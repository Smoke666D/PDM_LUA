
PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0801e4c8  0801e4c8  0002e4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb64  0801fb64  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fb64  0801fb64  0002fb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fb6c  0801fb6c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fb6c  0801fb6c  0002fb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fb70  0801fb70  0002fb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801fb74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e4  2**0
                  CONTENTS
 10 .bss          00005330  200001e4  200001e4  000301e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005514  20005514  000301e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004550a  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007984  00000000  00000000  0007571e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e38  00000000  00000000  0007d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002cf0  00000000  00000000  0007fee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009f15  00000000  00000000  00082bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000313aa  00000000  00000000  0008cae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ece0a  00000000  00000000  000bde8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001aac99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dfe0  00000000  00000000  001aacec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001b8ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  001b8cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e4b0 	.word	0x0801e4b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0801e4b0 	.word	0x0801e4b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <setjmp>:
 8000270:	46ec      	mov	ip, sp
 8000272:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000276:	f04f 0000 	mov.w	r0, #0
 800027a:	4770      	bx	lr

0800027c <longjmp>:
 800027c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000280:	46e5      	mov	sp, ip
 8000282:	0008      	movs	r0, r1
 8000284:	bf08      	it	eq
 8000286:	2001      	moveq	r0, #1
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop

0800028c <strcmp>:
 800028c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000294:	2a01      	cmp	r2, #1
 8000296:	bf28      	it	cs
 8000298:	429a      	cmpcs	r2, r3
 800029a:	d0f7      	beq.n	800028c <strcmp>
 800029c:	1ad0      	subs	r0, r2, r3
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9aa 	b.w	8000fd4 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff33 	bl	8000b0c <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca9 	bl	8000628 <__aeabi_dmul>
 8000cd6:	f7ff ff57 	bl	8000b88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc2a 	bl	8000534 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fca0 	bl	8000628 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fae2 	bl	80002b8 <__aeabi_dsub>
 8000cf4:	f7ff ff48 	bl	8000b88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468e      	mov	lr, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d14d      	bne.n	8000dae <__udivmoddi4+0xaa>
 8000d12:	428a      	cmp	r2, r1
 8000d14:	4694      	mov	ip, r2
 8000d16:	d969      	bls.n	8000dec <__udivmoddi4+0xe8>
 8000d18:	fab2 f282 	clz	r2, r2
 8000d1c:	b152      	cbz	r2, 8000d34 <__udivmoddi4+0x30>
 8000d1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d22:	f1c2 0120 	rsb	r1, r2, #32
 8000d26:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d32:	4094      	lsls	r4, r2
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	0c21      	lsrs	r1, r4, #16
 8000d3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d3e:	fa1f f78c 	uxth.w	r7, ip
 8000d42:	fb08 e316 	mls	r3, r8, r6, lr
 8000d46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4a:	fb06 f107 	mul.w	r1, r6, r7
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x64>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 811f 	bcs.w	8000f9c <__udivmoddi4+0x298>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 811c 	bls.w	8000f9c <__udivmoddi4+0x298>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 f707 	mul.w	r7, r0, r7
 8000d7c:	42a7      	cmp	r7, r4
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x92>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d88:	f080 810a 	bcs.w	8000fa0 <__udivmoddi4+0x29c>
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	f240 8107 	bls.w	8000fa0 <__udivmoddi4+0x29c>
 8000d92:	4464      	add	r4, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9a:	1be4      	subs	r4, r4, r7
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa4>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xc2>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80ef 	beq.w	8000f96 <__udivmoddi4+0x292>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x160>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd4>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80f9 	bhi.w	8000fca <__udivmoddi4+0x2c6>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	469e      	mov	lr, r3
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa4>
 8000de6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa4>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xec>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 8092 	bne.w	8000f1e <__udivmoddi4+0x21a>
 8000dfa:	eba1 010c 	sub.w	r1, r1, ip
 8000dfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	2601      	movs	r6, #1
 8000e08:	0c20      	lsrs	r0, r4, #16
 8000e0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e16:	fb0e f003 	mul.w	r0, lr, r3
 8000e1a:	4288      	cmp	r0, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x12c>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x12a>
 8000e28:	4288      	cmp	r0, r1
 8000e2a:	f200 80cb 	bhi.w	8000fc4 <__udivmoddi4+0x2c0>
 8000e2e:	4643      	mov	r3, r8
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1110 	mls	r1, r7, r0, r1
 8000e3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e40:	fb0e fe00 	mul.w	lr, lr, r0
 8000e44:	45a6      	cmp	lr, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x156>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e50:	d202      	bcs.n	8000e58 <__udivmoddi4+0x154>
 8000e52:	45a6      	cmp	lr, r4
 8000e54:	f200 80bb 	bhi.w	8000fce <__udivmoddi4+0x2ca>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e62:	e79c      	b.n	8000d9e <__udivmoddi4+0x9a>
 8000e64:	f1c6 0720 	rsb	r7, r6, #32
 8000e68:	40b3      	lsls	r3, r6
 8000e6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e72:	fa20 f407 	lsr.w	r4, r0, r7
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	431c      	orrs	r4, r3
 8000e7c:	40f9      	lsrs	r1, r7
 8000e7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e82:	fa00 f306 	lsl.w	r3, r0, r6
 8000e86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8a:	0c20      	lsrs	r0, r4, #16
 8000e8c:	fa1f fe8c 	uxth.w	lr, ip
 8000e90:	fb09 1118 	mls	r1, r9, r8, r1
 8000e94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e98:	fb08 f00e 	mul.w	r0, r8, lr
 8000e9c:	4288      	cmp	r0, r1
 8000e9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea2:	d90b      	bls.n	8000ebc <__udivmoddi4+0x1b8>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eac:	f080 8088 	bcs.w	8000fc0 <__udivmoddi4+0x2bc>
 8000eb0:	4288      	cmp	r0, r1
 8000eb2:	f240 8085 	bls.w	8000fc0 <__udivmoddi4+0x2bc>
 8000eb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	1a09      	subs	r1, r1, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ec8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ecc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed0:	458e      	cmp	lr, r1
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1e2>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000edc:	d26c      	bcs.n	8000fb8 <__udivmoddi4+0x2b4>
 8000ede:	458e      	cmp	lr, r1
 8000ee0:	d96a      	bls.n	8000fb8 <__udivmoddi4+0x2b4>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4461      	add	r1, ip
 8000ee6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eea:	fba0 9402 	umull	r9, r4, r0, r2
 8000eee:	eba1 010e 	sub.w	r1, r1, lr
 8000ef2:	42a1      	cmp	r1, r4
 8000ef4:	46c8      	mov	r8, r9
 8000ef6:	46a6      	mov	lr, r4
 8000ef8:	d356      	bcc.n	8000fa8 <__udivmoddi4+0x2a4>
 8000efa:	d053      	beq.n	8000fa4 <__udivmoddi4+0x2a0>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x212>
 8000efe:	ebb3 0208 	subs.w	r2, r3, r8
 8000f02:	eb61 010e 	sbc.w	r1, r1, lr
 8000f06:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f0e:	40f1      	lsrs	r1, r6
 8000f10:	431f      	orrs	r7, r3
 8000f12:	e9c5 7100 	strd	r7, r1, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	f1c2 0320 	rsb	r3, r2, #32
 8000f22:	40d8      	lsrs	r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2c:	4091      	lsls	r1, r2
 8000f2e:	4301      	orrs	r1, r0
 8000f30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f34:	fa1f fe8c 	uxth.w	lr, ip
 8000f38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f40:	0c0b      	lsrs	r3, r1, #16
 8000f42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f46:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4a:	429e      	cmp	r6, r3
 8000f4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x260>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5a:	d22f      	bcs.n	8000fbc <__udivmoddi4+0x2b8>
 8000f5c:	429e      	cmp	r6, r3
 8000f5e:	d92d      	bls.n	8000fbc <__udivmoddi4+0x2b8>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1b9b      	subs	r3, r3, r6
 8000f66:	b289      	uxth	r1, r1
 8000f68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f74:	fb06 f30e 	mul.w	r3, r6, lr
 8000f78:	428b      	cmp	r3, r1
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x28a>
 8000f7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f84:	d216      	bcs.n	8000fb4 <__udivmoddi4+0x2b0>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d914      	bls.n	8000fb4 <__udivmoddi4+0x2b0>
 8000f8a:	3e02      	subs	r6, #2
 8000f8c:	4461      	add	r1, ip
 8000f8e:	1ac9      	subs	r1, r1, r3
 8000f90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f94:	e738      	b.n	8000e08 <__udivmoddi4+0x104>
 8000f96:	462e      	mov	r6, r5
 8000f98:	4628      	mov	r0, r5
 8000f9a:	e705      	b.n	8000da8 <__udivmoddi4+0xa4>
 8000f9c:	4606      	mov	r6, r0
 8000f9e:	e6e3      	b.n	8000d68 <__udivmoddi4+0x64>
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	e6f8      	b.n	8000d96 <__udivmoddi4+0x92>
 8000fa4:	454b      	cmp	r3, r9
 8000fa6:	d2a9      	bcs.n	8000efc <__udivmoddi4+0x1f8>
 8000fa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb0:	3801      	subs	r0, #1
 8000fb2:	e7a3      	b.n	8000efc <__udivmoddi4+0x1f8>
 8000fb4:	4646      	mov	r6, r8
 8000fb6:	e7ea      	b.n	8000f8e <__udivmoddi4+0x28a>
 8000fb8:	4620      	mov	r0, r4
 8000fba:	e794      	b.n	8000ee6 <__udivmoddi4+0x1e2>
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	e7d1      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fc0:	46d0      	mov	r8, sl
 8000fc2:	e77b      	b.n	8000ebc <__udivmoddi4+0x1b8>
 8000fc4:	3b02      	subs	r3, #2
 8000fc6:	4461      	add	r1, ip
 8000fc8:	e732      	b.n	8000e30 <__udivmoddi4+0x12c>
 8000fca:	4630      	mov	r0, r6
 8000fcc:	e709      	b.n	8000de2 <__udivmoddi4+0xde>
 8000fce:	4464      	add	r4, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e742      	b.n	8000e5a <__udivmoddi4+0x156>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fdc:	f001 fcc8 	bl	8002970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe0:	f000 f840 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe4:	f000 fe44 	bl	8001c70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fe8:	f000 f8a8 	bl	800113c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000fec:	f000 f94a 	bl	8001284 <MX_ADC3_Init>
  MX_ADC2_Init();
 8000ff0:	f000 f8f6 	bl	80011e0 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000ff4:	f000 f998 	bl	8001328 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000ff8:	f000 f9f8 	bl	80013ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ffc:	f000 faba 	bl	8001574 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001000:	f000 fb58 	bl	80016b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001004:	f000 fbd8 	bl	80017b8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001008:	f000 fc6e 	bl	80018e8 <MX_TIM8_Init>
  MX_TIM9_Init();
 800100c:	f000 fd30 	bl	8001a70 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001010:	f000 fd68 	bl	8001ae4 <MX_TIM12_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001014:	f000 fdfe 	bl	8001c14 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8001018:	f000 f9ba 	bl	8001390 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800101c:	f000 fdd0 	bl	8001bc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001020:	f016 fc46 	bl	80178b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001024:	4a09      	ldr	r2, [pc, #36]	; (800104c <main+0x74>)
 8001026:	2100      	movs	r1, #0
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <main+0x78>)
 800102a:	f016 fc8b 	bl	8017944 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <main+0x7c>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of luaTask */
  luaTaskHandle = osThreadNew(vLuaTask, NULL, &luaTask_attributes);
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <main+0x80>)
 8001036:	2100      	movs	r1, #0
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <main+0x84>)
 800103a:	f016 fc83 	bl	8017944 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <main+0x88>)
 8001042:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001044:	f016 fc58 	bl	80178f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001048:	e7fe      	b.n	8001048 <main+0x70>
 800104a:	bf00      	nop
 800104c:	0801f1b8 	.word	0x0801f1b8
 8001050:	08001e25 	.word	0x08001e25
 8001054:	20000a9c 	.word	0x20000a9c
 8001058:	0801f1dc 	.word	0x0801f1dc
 800105c:	0801a3ad 	.word	0x0801a3ad
 8001060:	20000aa0 	.word	0x20000aa0

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f01a fa5a 	bl	801b52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <SystemClock_Config+0xd0>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <SystemClock_Config+0xd0>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <SystemClock_Config+0xd0>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemClock_Config+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a22      	ldr	r2, [pc, #136]	; (8001138 <SystemClock_Config+0xd4>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <SystemClock_Config+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ca:	2301      	movs	r3, #1
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ce:	2310      	movs	r3, #16
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010e0:	2348      	movs	r3, #72	; 0x48
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010e8:	2303      	movs	r3, #3
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fcfb 	bl	8003aec <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010fc:	f000 feac 	bl	8001e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f002 ff5e 	bl	8003fdc <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001126:	f000 fe97 	bl	8001e58 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <MX_ADC1_Init+0x9c>)
 8001152:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_ADC1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_ADC1_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_ADC1_Init+0x98>)
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <MX_ADC1_Init+0xa0>)
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001188:	2201      	movs	r2, #1
 800118a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_ADC1_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001196:	2201      	movs	r2, #1
 8001198:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <MX_ADC1_Init+0x98>)
 800119c:	f001 fc4e 	bl	8002a3c <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 fe57 	bl	8001e58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011aa:	230e      	movs	r3, #14
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_ADC1_Init+0x98>)
 80011bc:	f001 fc82 	bl	8002ac4 <HAL_ADC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011c6:	f000 fe47 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000200 	.word	0x20000200
 80011d8:	40012000 	.word	0x40012000
 80011dc:	0f000001 	.word	0x0f000001

080011e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_ADC2_Init+0x98>)
 80011f4:	4a21      	ldr	r2, [pc, #132]	; (800127c <MX_ADC2_Init+0x9c>)
 80011f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_ADC2_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_ADC2_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_ADC2_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_ADC2_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_ADC2_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_ADC2_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_ADC2_Init+0x98>)
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <MX_ADC2_Init+0xa0>)
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_ADC2_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_ADC2_Init+0x98>)
 800122c:	2201      	movs	r2, #1
 800122e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_ADC2_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_ADC2_Init+0x98>)
 800123a:	2201      	movs	r2, #1
 800123c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <MX_ADC2_Init+0x98>)
 8001240:	f001 fbfc 	bl	8002a3c <HAL_ADC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 fe05 	bl	8001e58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_ADC2_Init+0x98>)
 8001260:	f001 fc30 	bl	8002ac4 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800126a:	f000 fdf5 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000248 	.word	0x20000248
 800127c:	40012100 	.word	0x40012100
 8001280:	0f000001 	.word	0x0f000001

08001284 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <MX_ADC3_Init+0x98>)
 8001298:	4a21      	ldr	r2, [pc, #132]	; (8001320 <MX_ADC3_Init+0x9c>)
 800129a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_ADC3_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <MX_ADC3_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_ADC3_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_ADC3_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_ADC3_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_ADC3_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_ADC3_Init+0x98>)
 80012c4:	4a17      	ldr	r2, [pc, #92]	; (8001324 <MX_ADC3_Init+0xa0>)
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_ADC3_Init+0x98>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_ADC3_Init+0x98>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_ADC3_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_ADC3_Init+0x98>)
 80012de:	2201      	movs	r2, #1
 80012e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012e2:	480e      	ldr	r0, [pc, #56]	; (800131c <MX_ADC3_Init+0x98>)
 80012e4:	f001 fbaa 	bl	8002a3c <HAL_ADC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 fdb3 	bl	8001e58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012f2:	2304      	movs	r3, #4
 80012f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <MX_ADC3_Init+0x98>)
 8001304:	f001 fbde 	bl	8002ac4 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800130e:	f000 fda3 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000290 	.word	0x20000290
 8001320:	40012200 	.word	0x40012200
 8001324:	0f000001 	.word	0x0f000001

08001328 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_CAN1_Init+0x60>)
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <MX_CAN1_Init+0x64>)
 8001330:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_CAN1_Init+0x60>)
 8001334:	2210      	movs	r2, #16
 8001336:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_CAN1_Init+0x60>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_CAN1_Init+0x60>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_CAN1_Init+0x60>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_CAN1_Init+0x60>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <MX_CAN1_Init+0x60>)
 8001352:	2200      	movs	r2, #0
 8001354:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_CAN1_Init+0x60>)
 8001358:	2200      	movs	r2, #0
 800135a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_CAN1_Init+0x60>)
 800135e:	2200      	movs	r2, #0
 8001360:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_CAN1_Init+0x60>)
 8001364:	2200      	movs	r2, #0
 8001366:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_CAN1_Init+0x60>)
 800136a:	2200      	movs	r2, #0
 800136c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_CAN1_Init+0x60>)
 8001370:	2200      	movs	r2, #0
 8001372:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_CAN1_Init+0x60>)
 8001376:	f001 fdc3 	bl	8002f00 <HAL_CAN_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001380:	f000 fd6a 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200002d8 	.word	0x200002d8
 800138c:	40006400 	.word	0x40006400

08001390 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_I2C2_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <MX_I2C2_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_I2C2_Init+0x50>)
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_I2C2_Init+0x58>)
 800139e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013ce:	f002 f92b 	bl	8003628 <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f000 fd3e 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000300 	.word	0x20000300
 80013e4:	40005800 	.word	0x40005800
 80013e8:	000186a0 	.word	0x000186a0

080013ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b096      	sub	sp, #88	; 0x58
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2220      	movs	r2, #32
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f01a f881 	bl	801b52c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <MX_TIM1_Init+0x180>)
 800142c:	4a50      	ldr	r2, [pc, #320]	; (8001570 <MX_TIM1_Init+0x184>)
 800142e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <MX_TIM1_Init+0x180>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b4d      	ldr	r3, [pc, #308]	; (800156c <MX_TIM1_Init+0x180>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800143c:	4b4b      	ldr	r3, [pc, #300]	; (800156c <MX_TIM1_Init+0x180>)
 800143e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001442:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b49      	ldr	r3, [pc, #292]	; (800156c <MX_TIM1_Init+0x180>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144a:	4b48      	ldr	r3, [pc, #288]	; (800156c <MX_TIM1_Init+0x180>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <MX_TIM1_Init+0x180>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001456:	4845      	ldr	r0, [pc, #276]	; (800156c <MX_TIM1_Init+0x180>)
 8001458:	f003 f812 	bl	8004480 <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001462:	f000 fcf9 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001470:	4619      	mov	r1, r3
 8001472:	483e      	ldr	r0, [pc, #248]	; (800156c <MX_TIM1_Init+0x180>)
 8001474:	f003 fb9c 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800147e:	f000 fceb 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001482:	483a      	ldr	r0, [pc, #232]	; (800156c <MX_TIM1_Init+0x180>)
 8001484:	f003 f915 	bl	80046b2 <HAL_TIM_PWM_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800148e:	f000 fce3 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800149e:	4619      	mov	r1, r3
 80014a0:	4832      	ldr	r0, [pc, #200]	; (800156c <MX_TIM1_Init+0x180>)
 80014a2:	f003 ff5f 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014ac:	f000 fcd4 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b0:	2360      	movs	r3, #96	; 0x60
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4825      	ldr	r0, [pc, #148]	; (800156c <MX_TIM1_Init+0x180>)
 80014d6:	f003 faa9 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014e0:	f000 fcba 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	2204      	movs	r2, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	481f      	ldr	r0, [pc, #124]	; (800156c <MX_TIM1_Init+0x180>)
 80014ee:	f003 fa9d 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014f8:	f000 fcae 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	2208      	movs	r2, #8
 8001502:	4619      	mov	r1, r3
 8001504:	4819      	ldr	r0, [pc, #100]	; (800156c <MX_TIM1_Init+0x180>)
 8001506:	f003 fa91 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001510:	f000 fca2 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	220c      	movs	r2, #12
 800151a:	4619      	mov	r1, r3
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <MX_TIM1_Init+0x180>)
 800151e:	f003 fa85 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001528:	f000 fc96 	bl	8001e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM1_Init+0x180>)
 8001550:	f003 ff84 	bl	800545c <HAL_TIMEx_ConfigBreakDeadTime>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800155a:	f000 fc7d 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM1_Init+0x180>)
 8001560:	f000 fec4 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001564:	bf00      	nop
 8001566:	3758      	adds	r7, #88	; 0x58
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000354 	.word	0x20000354
 8001570:	40010000 	.word	0x40010000

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a4:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015ac:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015b8:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015cc:	4838      	ldr	r0, [pc, #224]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015ce:	f002 ff57 	bl	8004480 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015d8:	f000 fc3e 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4831      	ldr	r0, [pc, #196]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015ea:	f003 fae1 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015f4:	f000 fc30 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80015f8:	482d      	ldr	r0, [pc, #180]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80015fa:	f003 f801 	bl	8004600 <HAL_TIM_OC_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001604:	f000 fc28 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001608:	4829      	ldr	r0, [pc, #164]	; (80016b0 <MX_TIM2_Init+0x13c>)
 800160a:	f003 f852 	bl	80046b2 <HAL_TIM_PWM_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001614:	f000 fc20 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4619      	mov	r1, r3
 8001626:	4822      	ldr	r0, [pc, #136]	; (80016b0 <MX_TIM2_Init+0x13c>)
 8001628:	f003 fe9c 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001632:	f000 fc11 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	4818      	ldr	r0, [pc, #96]	; (80016b0 <MX_TIM2_Init+0x13c>)
 800164e:	f003 f991 	bl	8004974 <HAL_TIM_OC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001658:	f000 fbfe 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165c:	2360      	movs	r3, #96	; 0x60
 800165e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2204      	movs	r2, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4812      	ldr	r0, [pc, #72]	; (80016b0 <MX_TIM2_Init+0x13c>)
 8001668:	f003 f9e0 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001672:	f000 fbf1 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2208      	movs	r2, #8
 800167a:	4619      	mov	r1, r3
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <MX_TIM2_Init+0x13c>)
 800167e:	f003 f9d5 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001688:	f000 fbe6 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	220c      	movs	r2, #12
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	; (80016b0 <MX_TIM2_Init+0x13c>)
 8001694:	f003 f9ca 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800169e:	f000 fbdb 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016a2:	4803      	ldr	r0, [pc, #12]	; (80016b0 <MX_TIM2_Init+0x13c>)
 80016a4:	f000 fe22 	bl	80022ec <HAL_TIM_MspPostInit>

}
 80016a8:	bf00      	nop
 80016aa:	3738      	adds	r7, #56	; 0x38
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000039c 	.word	0x2000039c

080016b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	; 0x38
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e4:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80016e6:	4a33      	ldr	r2, [pc, #204]	; (80017b4 <MX_TIM3_Init+0x100>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80016f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800170a:	4829      	ldr	r0, [pc, #164]	; (80017b0 <MX_TIM3_Init+0xfc>)
 800170c:	f002 feb8 	bl	8004480 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001716:	f000 fb9f 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001724:	4619      	mov	r1, r3
 8001726:	4822      	ldr	r0, [pc, #136]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001728:	f003 fa42 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001732:	f000 fb91 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001736:	481e      	ldr	r0, [pc, #120]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001738:	f002 ffbb 	bl	80046b2 <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001742:	f000 fb89 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	4619      	mov	r1, r3
 8001754:	4816      	ldr	r0, [pc, #88]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001756:	f003 fe05 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001760:	f000 fb7a 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_TIM3_Init+0xfc>)
 800177c:	f003 f956 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001786:	f000 fb67 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2204      	movs	r2, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001792:	f003 f94b 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800179c:	f000 fb5c 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80017a2:	f000 fda3 	bl	80022ec <HAL_TIM_MspPostInit>

}
 80017a6:	bf00      	nop
 80017a8:	3738      	adds	r7, #56	; 0x38
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003e4 	.word	0x200003e4
 80017b4:	40000400 	.word	0x40000400

080017b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017e8:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <MX_TIM4_Init+0x128>)
 80017ea:	4a3e      	ldr	r2, [pc, #248]	; (80018e4 <MX_TIM4_Init+0x12c>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017ee:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <MX_TIM4_Init+0x128>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <MX_TIM4_Init+0x128>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <MX_TIM4_Init+0x128>)
 80017fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001800:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <MX_TIM4_Init+0x128>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <MX_TIM4_Init+0x128>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800180e:	4834      	ldr	r0, [pc, #208]	; (80018e0 <MX_TIM4_Init+0x128>)
 8001810:	f002 fe36 	bl	8004480 <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800181a:	f000 fb1d 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001828:	4619      	mov	r1, r3
 800182a:	482d      	ldr	r0, [pc, #180]	; (80018e0 <MX_TIM4_Init+0x128>)
 800182c:	f003 f9c0 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001836:	f000 fb0f 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800183a:	4829      	ldr	r0, [pc, #164]	; (80018e0 <MX_TIM4_Init+0x128>)
 800183c:	f002 ff39 	bl	80046b2 <HAL_TIM_PWM_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001846:	f000 fb07 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	4619      	mov	r1, r3
 8001858:	4821      	ldr	r0, [pc, #132]	; (80018e0 <MX_TIM4_Init+0x128>)
 800185a:	f003 fd83 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001864:	f000 faf8 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001868:	2360      	movs	r3, #96	; 0x60
 800186a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	4818      	ldr	r0, [pc, #96]	; (80018e0 <MX_TIM4_Init+0x128>)
 8001880:	f003 f8d4 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800188a:	f000 fae5 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2204      	movs	r2, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4812      	ldr	r0, [pc, #72]	; (80018e0 <MX_TIM4_Init+0x128>)
 8001896:	f003 f8c9 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80018a0:	f000 fada 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2208      	movs	r2, #8
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_TIM4_Init+0x128>)
 80018ac:	f003 f8be 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80018b6:	f000 facf 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	220c      	movs	r2, #12
 80018be:	4619      	mov	r1, r3
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM4_Init+0x128>)
 80018c2:	f003 f8b3 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80018cc:	f000 fac4 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM4_Init+0x128>)
 80018d2:	f000 fd0b 	bl	80022ec <HAL_TIM_MspPostInit>

}
 80018d6:	bf00      	nop
 80018d8:	3738      	adds	r7, #56	; 0x38
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000042c 	.word	0x2000042c
 80018e4:	40000800 	.word	0x40000800

080018e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b096      	sub	sp, #88	; 0x58
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2220      	movs	r2, #32
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f019 fe03 	bl	801b52c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <MX_TIM8_Init+0x184>)
 800192a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <MX_TIM8_Init+0x180>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <MX_TIM8_Init+0x180>)
 800193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001946:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <MX_TIM8_Init+0x180>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001952:	4845      	ldr	r0, [pc, #276]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001954:	f002 fd94 	bl	8004480 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800195e:	f000 fa7b 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001968:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800196c:	4619      	mov	r1, r3
 800196e:	483e      	ldr	r0, [pc, #248]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001970:	f003 f91e 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800197a:	f000 fa6d 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800197e:	483a      	ldr	r0, [pc, #232]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001980:	f002 fe97 	bl	80046b2 <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800198a:	f000 fa65 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800199a:	4619      	mov	r1, r3
 800199c:	4832      	ldr	r0, [pc, #200]	; (8001a68 <MX_TIM8_Init+0x180>)
 800199e:	f003 fce1 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80019a8:	f000 fa56 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4825      	ldr	r0, [pc, #148]	; (8001a68 <MX_TIM8_Init+0x180>)
 80019d2:	f003 f82b 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80019dc:	f000 fa3c 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	2204      	movs	r2, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	481f      	ldr	r0, [pc, #124]	; (8001a68 <MX_TIM8_Init+0x180>)
 80019ea:	f003 f81f 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80019f4:	f000 fa30 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	2208      	movs	r2, #8
 80019fe:	4619      	mov	r1, r3
 8001a00:	4819      	ldr	r0, [pc, #100]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001a02:	f003 f813 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001a0c:	f000 fa24 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	220c      	movs	r2, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	4813      	ldr	r0, [pc, #76]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001a1a:	f003 f807 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001a24:	f000 fa18 	bl	8001e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001a4c:	f003 fd06 	bl	800545c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001a56:	f000 f9ff 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_TIM8_Init+0x180>)
 8001a5c:	f000 fc46 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001a60:	bf00      	nop
 8001a62:	3758      	adds	r7, #88	; 0x58
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000474 	.word	0x20000474
 8001a6c:	40010400 	.word	0x40010400

08001a70 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_TIM9_Init+0x6c>)
 8001a84:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <MX_TIM9_Init+0x70>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_TIM9_Init+0x6c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_TIM9_Init+0x6c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_TIM9_Init+0x6c>)
 8001a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_TIM9_Init+0x6c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_TIM9_Init+0x6c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <MX_TIM9_Init+0x6c>)
 8001aaa:	f002 fce9 	bl	8004480 <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001ab4:	f000 f9d0 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <MX_TIM9_Init+0x6c>)
 8001ac4:	f003 f874 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001ace:	f000 f9c3 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200004bc 	.word	0x200004bc
 8001ae0:	40014000 	.word	0x40014000

08001ae4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b0c:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <MX_TIM12_Init+0xd8>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b22:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001b30:	4821      	ldr	r0, [pc, #132]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b32:	f002 fca5 	bl	8004480 <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001b3c:	f000 f98c 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b4e:	f003 f82f 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001b58:	f000 f97e 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b5c:	4816      	ldr	r0, [pc, #88]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b5e:	f002 fda8 	bl	80046b2 <HAL_TIM_PWM_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001b68:	f000 f976 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b84:	f002 ff52 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001b8e:	f000 f963 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2204      	movs	r2, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001b9a:	f002 ff47 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001ba4:	f000 f958 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM12_Init+0xd4>)
 8001baa:	f000 fb9f 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001bae:	bf00      	nop
 8001bb0:	3730      	adds	r7, #48	; 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000504 	.word	0x20000504
 8001bbc:	40001800 	.word	0x40001800

08001bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <MX_USART2_UART_Init+0x50>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bf8:	f003 fc96 	bl	8005528 <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c02:	f000 f929 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000054c 	.word	0x2000054c
 8001c10:	40004400 	.word	0x40004400

08001c14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c22:	2204      	movs	r2, #4
 8001c24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c28:	2202      	movs	r2, #2
 8001c2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c58:	f001 fe2a 	bl	80038b0 <HAL_PCD_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c62:	f000 f8f9 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000590 	.word	0x20000590

08001c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a60      	ldr	r2, [pc, #384]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a59      	ldr	r2, [pc, #356]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b45      	ldr	r3, [pc, #276]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a44      	ldr	r2, [pc, #272]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <MX_GPIO_Init+0x1a0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001d6c:	4829      	ldr	r0, [pc, #164]	; (8001e14 <MX_GPIO_Init+0x1a4>)
 8001d6e:	f001 fc41 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001d72:	2200      	movs	r2, #0
 8001d74:	f647 61fc 	movw	r1, #32508	; 0x7efc
 8001d78:	4827      	ldr	r0, [pc, #156]	; (8001e18 <MX_GPIO_Init+0x1a8>)
 8001d7a:	f001 fc3b 	bl	80035f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|Cs_Dis8_19_20_Pin|Cs_Dis8_17_18_Pin
                          |Cs_Dis8_15_16_Pin|Cs_Dis8_13_14_Pin|Cs_Dis8_11_12_Pin|Cs_Dis8_9_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Din3_Pin Din4_Pin Din5_Pin Din6_Pin
                           Din7_Pin Din1_Pin Din2_Pin */
  GPIO_InitStruct.Pin = Din3_Pin|Din4_Pin|Din5_Pin|Din6_Pin
 8001d7e:	237f      	movs	r3, #127	; 0x7f
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
                          |Din7_Pin|Din1_Pin|Din2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d86:	2302      	movs	r3, #2
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4822      	ldr	r0, [pc, #136]	; (8001e1c <MX_GPIO_Init+0x1ac>)
 8001d92:	f001 fa93 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	481d      	ldr	r0, [pc, #116]	; (8001e20 <MX_GPIO_Init+0x1b0>)
 8001dac:	f001 fa86 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001db0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <MX_GPIO_Init+0x1ac>)
 8001dc6:	f001 fa79 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001dca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de0:	4619      	mov	r1, r3
 8001de2:	480c      	ldr	r0, [pc, #48]	; (8001e14 <MX_GPIO_Init+0x1a4>)
 8001de4:	f001 fa6a 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG4 PG5
                           PG6 PG7 Cs_Dis8_19_20_Pin Cs_Dis8_17_18_Pin
                           Cs_Dis8_15_16_Pin Cs_Dis8_13_14_Pin Cs_Dis8_11_12_Pin Cs_Dis8_9_10_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001de8:	f647 63fc 	movw	r3, #32508	; 0x7efc
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|Cs_Dis8_19_20_Pin|Cs_Dis8_17_18_Pin
                          |Cs_Dis8_15_16_Pin|Cs_Dis8_13_14_Pin|Cs_Dis8_11_12_Pin|Cs_Dis8_9_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_GPIO_Init+0x1a8>)
 8001e02:	f001 fa5b 	bl	80032bc <HAL_GPIO_Init>

}
 8001e06:	bf00      	nop
 8001e08:	3738      	adds	r7, #56	; 0x38
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40021400 	.word	0x40021400

08001e24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f015 fe1b 	bl	8017a68 <osDelay>
 8001e32:	e7fb      	b.n	8001e2c <StartDefaultTask+0x8>

08001e34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e46:	f000 fdb5 	bl	80029b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40002000 	.word	0x40002000

08001e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5c:	b672      	cpsid	i
}
 8001e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <Error_Handler+0x8>
	...

08001e64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_MspInit+0x54>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_MspInit+0x54>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_MspInit+0x54>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_MspInit+0x54>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_MspInit+0x54>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_MspInit+0x54>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	210f      	movs	r1, #15
 8001ea6:	f06f 0001 	mvn.w	r0, #1
 8001eaa:	f001 f9dd 	bl	8003268 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b090      	sub	sp, #64	; 0x40
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <HAL_ADC_MspInit+0x19c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d142      	bne.n	8001f64 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee2:	4b5e      	ldr	r3, [pc, #376]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a5d      	ldr	r2, [pc, #372]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	4b57      	ldr	r3, [pc, #348]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b54      	ldr	r3, [pc, #336]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
 8001f1a:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a4f      	ldr	r2, [pc, #316]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b4d      	ldr	r3, [pc, #308]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	6a3b      	ldr	r3, [r7, #32]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f32:	2330      	movs	r3, #48	; 0x30
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f42:	4619      	mov	r1, r3
 8001f44:	4846      	ldr	r0, [pc, #280]	; (8002060 <HAL_ADC_MspInit+0x1a4>)
 8001f46:	f001 f9b9 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4841      	ldr	r0, [pc, #260]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f5e:	f001 f9ad 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f62:	e075      	b.n	8002050 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <HAL_ADC_MspInit+0x1ac>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d142      	bne.n	8001ff4 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a39      	ldr	r2, [pc, #228]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	4b33      	ldr	r3, [pc, #204]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a32      	ldr	r2, [pc, #200]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a2b      	ldr	r2, [pc, #172]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4822      	ldr	r0, [pc, #136]	; (8002060 <HAL_ADC_MspInit+0x1a4>)
 8001fd6:	f001 f971 	bl	80032bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001fda:	23ff      	movs	r3, #255	; 0xff
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fea:	4619      	mov	r1, r3
 8001fec:	481f      	ldr	r0, [pc, #124]	; (800206c <HAL_ADC_MspInit+0x1b0>)
 8001fee:	f001 f965 	bl	80032bc <HAL_GPIO_Init>
}
 8001ff2:	e02d      	b.n	8002050 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_ADC_MspInit+0x1b4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d128      	bne.n	8002050 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8002008:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a0e      	ldr	r2, [pc, #56]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_ADC_MspInit+0x1a0>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002036:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203c:	2303      	movs	r3, #3
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002048:	4619      	mov	r1, r3
 800204a:	480a      	ldr	r0, [pc, #40]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 800204c:	f001 f936 	bl	80032bc <HAL_GPIO_Init>
}
 8002050:	bf00      	nop
 8002052:	3740      	adds	r7, #64	; 0x40
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40012000 	.word	0x40012000
 800205c:	40023800 	.word	0x40023800
 8002060:	40020800 	.word	0x40020800
 8002064:	40020400 	.word	0x40020400
 8002068:	40012100 	.word	0x40012100
 800206c:	40020000 	.word	0x40020000
 8002070:	40012200 	.word	0x40012200
 8002074:	40021400 	.word	0x40021400

08002078 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_CAN_MspInit+0x84>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12b      	bne.n	80020f2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_CAN_MspInit+0x88>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_CAN_MspInit+0x88>)
 80020a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_CAN_MspInit+0x88>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_CAN_MspInit+0x88>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_CAN_MspInit+0x88>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_CAN_MspInit+0x88>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020d2:	2303      	movs	r3, #3
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020e2:	2309      	movs	r3, #9
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <HAL_CAN_MspInit+0x8c>)
 80020ee:	f001 f8e5 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40006400 	.word	0x40006400
 8002100:	40023800 	.word	0x40023800
 8002104:	40020c00 	.word	0x40020c00

08002108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_I2C_MspInit+0x84>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d12b      	bne.n	8002182 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_I2C_MspInit+0x88>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_I2C_MspInit+0x88>)
 8002134:	f043 0320 	orr.w	r3, r3, #32
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_I2C_MspInit+0x88>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002146:	2303      	movs	r3, #3
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214a:	2312      	movs	r3, #18
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214e:	2301      	movs	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002156:	2304      	movs	r3, #4
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	480c      	ldr	r0, [pc, #48]	; (8002194 <HAL_I2C_MspInit+0x8c>)
 8002162:	f001 f8ab 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_I2C_MspInit+0x88>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_I2C_MspInit+0x88>)
 8002170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_I2C_MspInit+0x88>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40005800 	.word	0x40005800
 8002190:	40023800 	.word	0x40023800
 8002194:	40021400 	.word	0x40021400

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a4a      	ldr	r2, [pc, #296]	; (80022d0 <HAL_TIM_Base_MspInit+0x138>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a48      	ldr	r2, [pc, #288]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80021c6:	e07e      	b.n	80022c6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d0:	d10e      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
 80021d6:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a3e      	ldr	r2, [pc, #248]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	623b      	str	r3, [r7, #32]
 80021ec:	6a3b      	ldr	r3, [r7, #32]
}
 80021ee:	e06a      	b.n	80022c6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_TIM_Base_MspInit+0x140>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a34      	ldr	r2, [pc, #208]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fb      	ldr	r3, [r7, #28]
}
 8002216:	e056      	b.n	80022c6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM4)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <HAL_TIM_Base_MspInit+0x144>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10e      	bne.n	8002240 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
}
 800223e:	e042      	b.n	80022c6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM8)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <HAL_TIM_Base_MspInit+0x148>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d116      	bne.n	8002278 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	210f      	movs	r1, #15
 800226a:	202d      	movs	r0, #45	; 0x2d
 800226c:	f000 fffc 	bl	8003268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002270:	202d      	movs	r0, #45	; 0x2d
 8002272:	f001 f815 	bl	80032a0 <HAL_NVIC_EnableIRQ>
}
 8002276:	e026      	b.n	80022c6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_TIM_Base_MspInit+0x14c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10e      	bne.n	80022a0 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	e012      	b.n	80022c6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM12)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_TIM_Base_MspInit+0x150>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d10d      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_TIM_Base_MspInit+0x13c>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40000800 	.word	0x40000800
 80022e0:	40010400 	.word	0x40010400
 80022e4:	40014000 	.word	0x40014000
 80022e8:	40001800 	.word	0x40001800

080022ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	; 0x38
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a7e      	ldr	r2, [pc, #504]	; (8002504 <HAL_TIM_MspPostInit+0x218>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d11f      	bne.n	800234e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	4b7d      	ldr	r3, [pc, #500]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a7c      	ldr	r2, [pc, #496]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 8002318:	f043 0310 	orr.w	r3, r3, #16
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b7a      	ldr	r3, [pc, #488]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800232a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800233c:	2301      	movs	r3, #1
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002344:	4619      	mov	r1, r3
 8002346:	4871      	ldr	r0, [pc, #452]	; (800250c <HAL_TIM_MspPostInit+0x220>)
 8002348:	f000 ffb8 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800234c:	e0d5      	b.n	80024fa <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002356:	d13e      	bne.n	80023d6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	4b6a      	ldr	r3, [pc, #424]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a69      	ldr	r2, [pc, #420]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
 8002368:	4b67      	ldr	r3, [pc, #412]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	4b63      	ldr	r3, [pc, #396]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a62      	ldr	r2, [pc, #392]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b60      	ldr	r3, [pc, #384]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8002390:	f640 4308 	movw	r3, #3080	; 0xc08
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023a2:	2301      	movs	r3, #1
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	4619      	mov	r1, r3
 80023ac:	4858      	ldr	r0, [pc, #352]	; (8002510 <HAL_TIM_MspPostInit+0x224>)
 80023ae:	f000 ff85 	bl	80032bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023c4:	2301      	movs	r3, #1
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4851      	ldr	r0, [pc, #324]	; (8002514 <HAL_TIM_MspPostInit+0x228>)
 80023d0:	f000 ff74 	bl	80032bc <HAL_GPIO_Init>
}
 80023d4:	e091      	b.n	80024fa <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_TIM_MspPostInit+0x22c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d11e      	bne.n	800241e <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	4b48      	ldr	r3, [pc, #288]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a47      	ldr	r2, [pc, #284]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b45      	ldr	r3, [pc, #276]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023fc:	2330      	movs	r3, #48	; 0x30
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800240c:	2302      	movs	r3, #2
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	483e      	ldr	r0, [pc, #248]	; (8002510 <HAL_TIM_MspPostInit+0x224>)
 8002418:	f000 ff50 	bl	80032bc <HAL_GPIO_Init>
}
 800241c:	e06d      	b.n	80024fa <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM4)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a3e      	ldr	r2, [pc, #248]	; (800251c <HAL_TIM_MspPostInit+0x230>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d11f      	bne.n	8002468 <HAL_TIM_MspPostInit+0x17c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4a35      	ldr	r2, [pc, #212]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6313      	str	r3, [r2, #48]	; 0x30
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002444:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002456:	2302      	movs	r3, #2
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800245a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245e:	4619      	mov	r1, r3
 8002460:	482f      	ldr	r0, [pc, #188]	; (8002520 <HAL_TIM_MspPostInit+0x234>)
 8002462:	f000 ff2b 	bl	80032bc <HAL_GPIO_Init>
}
 8002466:	e048      	b.n	80024fa <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM8)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2d      	ldr	r2, [pc, #180]	; (8002524 <HAL_TIM_MspPostInit+0x238>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d11f      	bne.n	80024b2 <HAL_TIM_MspPostInit+0x1c6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800248e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024a0:	2303      	movs	r3, #3
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	4619      	mov	r1, r3
 80024aa:	481f      	ldr	r0, [pc, #124]	; (8002528 <HAL_TIM_MspPostInit+0x23c>)
 80024ac:	f000 ff06 	bl	80032bc <HAL_GPIO_Init>
}
 80024b0:	e023      	b.n	80024fa <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM12)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1d      	ldr	r2, [pc, #116]	; (800252c <HAL_TIM_MspPostInit+0x240>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d11e      	bne.n	80024fa <HAL_TIM_MspPostInit+0x20e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	4a10      	ldr	r2, [pc, #64]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	6313      	str	r3, [r2, #48]	; 0x30
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_TIM_MspPostInit+0x21c>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024ea:	2309      	movs	r3, #9
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f2:	4619      	mov	r1, r3
 80024f4:	4806      	ldr	r0, [pc, #24]	; (8002510 <HAL_TIM_MspPostInit+0x224>)
 80024f6:	f000 fee1 	bl	80032bc <HAL_GPIO_Init>
}
 80024fa:	bf00      	nop
 80024fc:	3738      	adds	r7, #56	; 0x38
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40010000 	.word	0x40010000
 8002508:	40023800 	.word	0x40023800
 800250c:	40021000 	.word	0x40021000
 8002510:	40020400 	.word	0x40020400
 8002514:	40020000 	.word	0x40020000
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800
 8002520:	40020c00 	.word	0x40020c00
 8002524:	40010400 	.word	0x40010400
 8002528:	40020800 	.word	0x40020800
 800252c:	40001800 	.word	0x40001800

08002530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_UART_MspInit+0x84>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12b      	bne.n	80025aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_UART_MspInit+0x88>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_UART_MspInit+0x88>)
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_UART_MspInit+0x88>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_UART_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_UART_MspInit+0x88>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_UART_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800258a:	2360      	movs	r3, #96	; 0x60
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800259a:	2307      	movs	r3, #7
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_UART_MspInit+0x8c>)
 80025a6:	f000 fe89 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40004400 	.word	0x40004400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020c00 	.word	0x40020c00

080025c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e0:	d13f      	bne.n	8002662 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_PCD_MspInit+0xac>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a20      	ldr	r2, [pc, #128]	; (800266c <HAL_PCD_MspInit+0xac>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_PCD_MspInit+0xac>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80025fe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002610:	230a      	movs	r3, #10
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	4815      	ldr	r0, [pc, #84]	; (8002670 <HAL_PCD_MspInit+0xb0>)
 800261c:	f000 fe4e 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4619      	mov	r1, r3
 8002634:	480e      	ldr	r0, [pc, #56]	; (8002670 <HAL_PCD_MspInit+0xb0>)
 8002636:	f000 fe41 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_PCD_MspInit+0xac>)
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <HAL_PCD_MspInit+0xac>)
 8002640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002644:	6353      	str	r3, [r2, #52]	; 0x34
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_PCD_MspInit+0xac>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a07      	ldr	r2, [pc, #28]	; (800266c <HAL_PCD_MspInit+0xac>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_PCD_MspInit+0xac>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3728      	adds	r7, #40	; 0x28
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000

08002674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002684:	2200      	movs	r2, #0
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	202d      	movs	r0, #45	; 0x2d
 800268a:	f000 fded 	bl	8003268 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800268e:	202d      	movs	r0, #45	; 0x2d
 8002690:	f000 fe06 	bl	80032a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <HAL_InitTick+0xa0>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_InitTick+0xa0>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_InitTick+0xa0>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026b0:	f107 0210 	add.w	r2, r7, #16
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 feae 	bl	800441c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026c0:	f001 fe84 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 80026c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	4a13      	ldr	r2, [pc, #76]	; (8002718 <HAL_InitTick+0xa4>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9b      	lsrs	r3, r3, #18
 80026d0:	3b01      	subs	r3, #1
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_InitTick+0xa8>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_InitTick+0xac>)
 80026d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_InitTick+0xa8>)
 80026dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026e0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_InitTick+0xa8>)
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_InitTick+0xa8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_InitTick+0xa8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80026f4:	4809      	ldr	r0, [pc, #36]	; (800271c <HAL_InitTick+0xa8>)
 80026f6:	f001 fec3 	bl	8004480 <HAL_TIM_Base_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002700:	4806      	ldr	r0, [pc, #24]	; (800271c <HAL_InitTick+0xa8>)
 8002702:	f001 ff0d 	bl	8004520 <HAL_TIM_Base_Start_IT>
 8002706:	4603      	mov	r3, r0
 8002708:	e000      	b.n	800270c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3730      	adds	r7, #48	; 0x30
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40023800 	.word	0x40023800
 8002718:	431bde83 	.word	0x431bde83
 800271c:	20000aa4 	.word	0x20000aa4
 8002720:	40002000 	.word	0x40002000

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <NMI_Handler+0x4>

0800272a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <HardFault_Handler+0x4>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <MemManage_Handler+0x4>

08002736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <BusFault_Handler+0x4>

0800273c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <UsageFault_Handler+0x4>

08002742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002756:	f002 f805 	bl	8004764 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800275a:	4803      	ldr	r0, [pc, #12]	; (8002768 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800275c:	f002 f802 	bl	8004764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000474 	.word	0x20000474
 8002768:	20000aa4 	.word	0x20000aa4

0800276c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
	return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_kill>:

int _kill(int pid, int sig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002786:	f018 fb03 	bl	801ad90 <__errno>
 800278a:	4603      	mov	r3, r0
 800278c:	2216      	movs	r2, #22
 800278e:	601a      	str	r2, [r3, #0]
	return -1;
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <_exit>:

void _exit (int status)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ffe7 	bl	800277c <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ae:	e7fe      	b.n	80027ae <_exit+0x12>

080027b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e00a      	b.n	80027d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027c2:	f3af 8000 	nop.w
 80027c6:	4601      	mov	r1, r0
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	60ba      	str	r2, [r7, #8]
 80027ce:	b2ca      	uxtb	r2, r1
 80027d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3301      	adds	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	dbf0      	blt.n	80027c2 <_read+0x12>
	}

return len;
 80027e0:	687b      	ldr	r3, [r7, #4]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e009      	b.n	8002810 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	60ba      	str	r2, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	dbf1      	blt.n	80027fc <_write+0x12>
	}
	return len;
 8002818:	687b      	ldr	r3, [r7, #4]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_close>:

int _close(int file)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
	return -1;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800284a:	605a      	str	r2, [r3, #4]
	return 0;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_isatty>:

int _isatty(int file)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	return 1;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
	return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <_sbrk+0x5c>)
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <_sbrk+0x60>)
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <_sbrk+0x64>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <_sbrk+0x68>)
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d207      	bcs.n	80028cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028bc:	f018 fa68 	bl	801ad90 <__errno>
 80028c0:	4603      	mov	r3, r0
 80028c2:	220c      	movs	r2, #12
 80028c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	e009      	b.n	80028e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <_sbrk+0x64>)
 80028dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20020000 	.word	0x20020000
 80028ec:	00000400 	.word	0x00000400
 80028f0:	20000aec 	.word	0x20000aec
 80028f4:	20005518 	.word	0x20005518

080028f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <SystemInit+0x20>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <SystemInit+0x20>)
 8002904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002922:	490e      	ldr	r1, [pc, #56]	; (800295c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002938:	4c0b      	ldr	r4, [pc, #44]	; (8002968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002946:	f7ff ffd7 	bl	80028f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294a:	f018 fd1f 	bl	801b38c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294e:	f7fe fb43 	bl	8000fd8 <main>
  bx  lr    
 8002952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002960:	0801fb74 	.word	0x0801fb74
  ldr r2, =_sbss
 8002964:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002968:	20005514 	.word	0x20005514

0800296c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC_IRQHandler>
	...

08002970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_Init+0x40>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_Init+0x40>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_Init+0x40>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002998:	2003      	movs	r0, #3
 800299a:	f000 fc5a 	bl	8003252 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299e:	200f      	movs	r0, #15
 80029a0:	f7ff fe68 	bl	8002674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a4:	f7ff fa5e 	bl	8001e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_IncTick+0x20>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_IncTick+0x24>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <HAL_IncTick+0x24>)
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000008 	.word	0x20000008
 80029d8:	20000af0 	.word	0x20000af0

080029dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return uwTick;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_GetTick+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000af0 	.word	0x20000af0

080029f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff ffee 	bl	80029dc <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d005      	beq.n	8002a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_Delay+0x44>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a1a:	bf00      	nop
 8002a1c:	f7ff ffde 	bl	80029dc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d8f7      	bhi.n	8002a1c <HAL_Delay+0x28>
  {
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000008 	.word	0x20000008

08002a3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e033      	b.n	8002aba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fa2e 	bl	8001ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a82:	f023 0302 	bic.w	r3, r3, #2
 8002a86:	f043 0202 	orr.w	r2, r3, #2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f93a 	bl	8002d08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8002aaa:	e001      	b.n	8002ab0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1c>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e105      	b.n	8002cec <HAL_ADC_ConfigChannel+0x228>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b09      	cmp	r3, #9
 8002aee:	d925      	bls.n	8002b3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68d9      	ldr	r1, [r3, #12]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	3b1e      	subs	r3, #30
 8002b06:	2207      	movs	r2, #7
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	400a      	ands	r2, r1
 8002b14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68d9      	ldr	r1, [r3, #12]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	4603      	mov	r3, r0
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4403      	add	r3, r0
 8002b2e:	3b1e      	subs	r3, #30
 8002b30:	409a      	lsls	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	e022      	b.n	8002b82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	2207      	movs	r2, #7
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6919      	ldr	r1, [r3, #16]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4403      	add	r3, r0
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d824      	bhi.n	8002bd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b05      	subs	r3, #5
 8002b9c:	221f      	movs	r2, #31
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	400a      	ands	r2, r1
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b05      	subs	r3, #5
 8002bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd2:	e04c      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	d824      	bhi.n	8002c26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	3b23      	subs	r3, #35	; 0x23
 8002bee:	221f      	movs	r2, #31
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	3b23      	subs	r3, #35	; 0x23
 8002c18:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
 8002c24:	e023      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3b41      	subs	r3, #65	; 0x41
 8002c38:	221f      	movs	r2, #31
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	400a      	ands	r2, r1
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4618      	mov	r0, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	3b41      	subs	r3, #65	; 0x41
 8002c62:	fa00 f203 	lsl.w	r2, r0, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_ADC_ConfigChannel+0x234>)
 8002c70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <HAL_ADC_ConfigChannel+0x238>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d109      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1cc>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b12      	cmp	r3, #18
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_ADC_ConfigChannel+0x238>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d123      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x21e>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d003      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x1e6>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b11      	cmp	r3, #17
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d111      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_ADC_ConfigChannel+0x23c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <HAL_ADC_ConfigChannel+0x240>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	0c9a      	lsrs	r2, r3, #18
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cd4:	e002      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f9      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40012300 	.word	0x40012300
 8002cfc:	40012000 	.word	0x40012000
 8002d00:	20000000 	.word	0x20000000
 8002d04:	431bde83 	.word	0x431bde83

08002d08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d10:	4b79      	ldr	r3, [pc, #484]	; (8002ef8 <ADC_Init+0x1f0>)
 8002d12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	021a      	lsls	r2, r3, #8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6899      	ldr	r1, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	4a58      	ldr	r2, [pc, #352]	; (8002efc <ADC_Init+0x1f4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d022      	beq.n	8002de6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6899      	ldr	r1, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	e00f      	b.n	8002e06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0202 	bic.w	r2, r2, #2
 8002e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6899      	ldr	r1, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7e1b      	ldrb	r3, [r3, #24]
 8002e20:	005a      	lsls	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01b      	beq.n	8002e6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	035a      	lsls	r2, r3, #13
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	e007      	b.n	8002e7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	051a      	lsls	r2, r3, #20
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ebe:	025a      	lsls	r2, r3, #9
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	029a      	lsls	r2, r3, #10
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40012300 	.word	0x40012300
 8002efc:	0f000001 	.word	0x0f000001

08002f00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0ed      	b.n	80030ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff f8aa 	bl	8002078 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f34:	f7ff fd52 	bl	80029dc <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f3a:	e012      	b.n	8002f62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f3c:	f7ff fd4e 	bl	80029dc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b0a      	cmp	r3, #10
 8002f48:	d90b      	bls.n	8002f62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0c5      	b.n	80030ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0e5      	beq.n	8002f3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0202 	bic.w	r2, r2, #2
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f80:	f7ff fd2c 	bl	80029dc <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f86:	e012      	b.n	8002fae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f88:	f7ff fd28 	bl	80029dc <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b0a      	cmp	r3, #10
 8002f94:	d90b      	bls.n	8002fae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e09f      	b.n	80030ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e5      	bne.n	8002f88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7e1b      	ldrb	r3, [r3, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d108      	bne.n	8002fd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e007      	b.n	8002fe6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7e5b      	ldrb	r3, [r3, #25]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d108      	bne.n	8003000 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e007      	b.n	8003010 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7e9b      	ldrb	r3, [r3, #26]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d108      	bne.n	800302a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e007      	b.n	800303a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0220 	bic.w	r2, r2, #32
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7edb      	ldrb	r3, [r3, #27]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d108      	bne.n	8003054 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0210 	bic.w	r2, r2, #16
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e007      	b.n	8003064 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0210 	orr.w	r2, r2, #16
 8003062:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7f1b      	ldrb	r3, [r3, #28]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d108      	bne.n	800307e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0208 	orr.w	r2, r2, #8
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e007      	b.n	800308e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0208 	bic.w	r2, r2, #8
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7f5b      	ldrb	r3, [r3, #29]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d108      	bne.n	80030a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0204 	orr.w	r2, r2, #4
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e007      	b.n	80030b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	ea42 0103 	orr.w	r1, r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	60d3      	str	r3, [r2, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <__NVIC_GetPriorityGrouping+0x18>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0307 	and.w	r3, r3, #7
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db0b      	blt.n	8003186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <__NVIC_EnableIRQ+0x38>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
         );
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ff4c 	bl	80030f8 <__NVIC_SetPriorityGrouping>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800327a:	f7ff ff61 	bl	8003140 <__NVIC_GetPriorityGrouping>
 800327e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	6978      	ldr	r0, [r7, #20]
 8003286:	f7ff ffb1 	bl	80031ec <NVIC_EncodePriority>
 800328a:	4602      	mov	r2, r0
 800328c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff80 	bl	8003198 <__NVIC_SetPriority>
}
 8003298:	bf00      	nop
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff54 	bl	800315c <__NVIC_EnableIRQ>
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e16b      	b.n	80035b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	f040 815a 	bne.w	80035aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d005      	beq.n	800330e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330a:	2b02      	cmp	r3, #2
 800330c:	d130      	bne.n	8003370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003344:	2201      	movs	r2, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 0201 	and.w	r2, r3, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b03      	cmp	r3, #3
 800337a:	d017      	beq.n	80033ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d123      	bne.n	8003400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	08da      	lsrs	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3208      	adds	r2, #8
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0203 	and.w	r2, r3, #3
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80b4 	beq.w	80035aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b60      	ldr	r3, [pc, #384]	; (80035c8 <HAL_GPIO_Init+0x30c>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a5f      	ldr	r2, [pc, #380]	; (80035c8 <HAL_GPIO_Init+0x30c>)
 800344c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <HAL_GPIO_Init+0x30c>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800345e:	4a5b      	ldr	r2, [pc, #364]	; (80035cc <HAL_GPIO_Init+0x310>)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	3302      	adds	r3, #2
 8003466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_GPIO_Init+0x314>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02b      	beq.n	80034e2 <HAL_GPIO_Init+0x226>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a51      	ldr	r2, [pc, #324]	; (80035d4 <HAL_GPIO_Init+0x318>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d025      	beq.n	80034de <HAL_GPIO_Init+0x222>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a50      	ldr	r2, [pc, #320]	; (80035d8 <HAL_GPIO_Init+0x31c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01f      	beq.n	80034da <HAL_GPIO_Init+0x21e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a4f      	ldr	r2, [pc, #316]	; (80035dc <HAL_GPIO_Init+0x320>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d019      	beq.n	80034d6 <HAL_GPIO_Init+0x21a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4e      	ldr	r2, [pc, #312]	; (80035e0 <HAL_GPIO_Init+0x324>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_GPIO_Init+0x216>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4d      	ldr	r2, [pc, #308]	; (80035e4 <HAL_GPIO_Init+0x328>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00d      	beq.n	80034ce <HAL_GPIO_Init+0x212>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4c      	ldr	r2, [pc, #304]	; (80035e8 <HAL_GPIO_Init+0x32c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <HAL_GPIO_Init+0x20e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4b      	ldr	r2, [pc, #300]	; (80035ec <HAL_GPIO_Init+0x330>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_GPIO_Init+0x20a>
 80034c2:	2307      	movs	r3, #7
 80034c4:	e00e      	b.n	80034e4 <HAL_GPIO_Init+0x228>
 80034c6:	2308      	movs	r3, #8
 80034c8:	e00c      	b.n	80034e4 <HAL_GPIO_Init+0x228>
 80034ca:	2306      	movs	r3, #6
 80034cc:	e00a      	b.n	80034e4 <HAL_GPIO_Init+0x228>
 80034ce:	2305      	movs	r3, #5
 80034d0:	e008      	b.n	80034e4 <HAL_GPIO_Init+0x228>
 80034d2:	2304      	movs	r3, #4
 80034d4:	e006      	b.n	80034e4 <HAL_GPIO_Init+0x228>
 80034d6:	2303      	movs	r3, #3
 80034d8:	e004      	b.n	80034e4 <HAL_GPIO_Init+0x228>
 80034da:	2302      	movs	r3, #2
 80034dc:	e002      	b.n	80034e4 <HAL_GPIO_Init+0x228>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_GPIO_Init+0x228>
 80034e2:	2300      	movs	r3, #0
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	f002 0203 	and.w	r2, r2, #3
 80034ea:	0092      	lsls	r2, r2, #2
 80034ec:	4093      	lsls	r3, r2
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034f4:	4935      	ldr	r1, [pc, #212]	; (80035cc <HAL_GPIO_Init+0x310>)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	3302      	adds	r3, #2
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003502:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_GPIO_Init+0x334>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003526:	4a32      	ldr	r2, [pc, #200]	; (80035f0 <HAL_GPIO_Init+0x334>)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800352c:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <HAL_GPIO_Init+0x334>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_GPIO_Init+0x334>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <HAL_GPIO_Init+0x334>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_GPIO_Init+0x334>)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_GPIO_Init+0x334>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035a4:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_GPIO_Init+0x334>)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3301      	adds	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b0f      	cmp	r3, #15
 80035b4:	f67f ae90 	bls.w	80032d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	3724      	adds	r7, #36	; 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40013800 	.word	0x40013800
 80035d0:	40020000 	.word	0x40020000
 80035d4:	40020400 	.word	0x40020400
 80035d8:	40020800 	.word	0x40020800
 80035dc:	40020c00 	.word	0x40020c00
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40021400 	.word	0x40021400
 80035e8:	40021800 	.word	0x40021800
 80035ec:	40021c00 	.word	0x40021c00
 80035f0:	40013c00 	.word	0x40013c00

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003610:	e003      	b.n	800361a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	041a      	lsls	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e12b      	b.n	8003892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe fd5a 	bl	8002108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800367a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800368a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800368c:	f000 fe9e 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8003690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a81      	ldr	r2, [pc, #516]	; (800389c <HAL_I2C_Init+0x274>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d807      	bhi.n	80036ac <HAL_I2C_Init+0x84>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a80      	ldr	r2, [pc, #512]	; (80038a0 <HAL_I2C_Init+0x278>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bf94      	ite	ls
 80036a4:	2301      	movls	r3, #1
 80036a6:	2300      	movhi	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e006      	b.n	80036ba <HAL_I2C_Init+0x92>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a7d      	ldr	r2, [pc, #500]	; (80038a4 <HAL_I2C_Init+0x27c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bf94      	ite	ls
 80036b4:	2301      	movls	r3, #1
 80036b6:	2300      	movhi	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0e7      	b.n	8003892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a78      	ldr	r2, [pc, #480]	; (80038a8 <HAL_I2C_Init+0x280>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0c9b      	lsrs	r3, r3, #18
 80036cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a6a      	ldr	r2, [pc, #424]	; (800389c <HAL_I2C_Init+0x274>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d802      	bhi.n	80036fc <HAL_I2C_Init+0xd4>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3301      	adds	r3, #1
 80036fa:	e009      	b.n	8003710 <HAL_I2C_Init+0xe8>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	4a69      	ldr	r2, [pc, #420]	; (80038ac <HAL_I2C_Init+0x284>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	3301      	adds	r3, #1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	430b      	orrs	r3, r1
 8003716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	495c      	ldr	r1, [pc, #368]	; (800389c <HAL_I2C_Init+0x274>)
 800372c:	428b      	cmp	r3, r1
 800372e:	d819      	bhi.n	8003764 <HAL_I2C_Init+0x13c>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1e59      	subs	r1, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fbb1 f3f3 	udiv	r3, r1, r3
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003744:	400b      	ands	r3, r1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_I2C_Init+0x138>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1e59      	subs	r1, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fbb1 f3f3 	udiv	r3, r1, r3
 8003758:	3301      	adds	r3, #1
 800375a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375e:	e051      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 8003760:	2304      	movs	r3, #4
 8003762:	e04f      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <HAL_I2C_Init+0x168>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e58      	subs	r0, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	440b      	add	r3, r1
 800377a:	fbb0 f3f3 	udiv	r3, r0, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e012      	b.n	80037b6 <HAL_I2C_Init+0x18e>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1e58      	subs	r0, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	0099      	lsls	r1, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Init+0x196>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e022      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10e      	bne.n	80037e4 <HAL_I2C_Init+0x1bc>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1e58      	subs	r0, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e2:	e00f      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	0099      	lsls	r1, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	6809      	ldr	r1, [r1, #0]
 8003808:	4313      	orrs	r3, r2
 800380a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6911      	ldr	r1, [r2, #16]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68d2      	ldr	r2, [r2, #12]
 800383e:	4311      	orrs	r1, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	000186a0 	.word	0x000186a0
 80038a0:	001e847f 	.word	0x001e847f
 80038a4:	003d08ff 	.word	0x003d08ff
 80038a8:	431bde83 	.word	0x431bde83
 80038ac:	10624dd3 	.word	0x10624dd3

080038b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b2:	b08f      	sub	sp, #60	; 0x3c
 80038b4:	af0a      	add	r7, sp, #40	; 0x28
 80038b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e10f      	b.n	8003ae2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7fe fe6f 	bl	80025c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2203      	movs	r2, #3
 80038e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f002 f934 	bl	8005b6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	687e      	ldr	r6, [r7, #4]
 800390e:	466d      	mov	r5, sp
 8003910:	f106 0410 	add.w	r4, r6, #16
 8003914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003920:	e885 0003 	stmia.w	r5, {r0, r1}
 8003924:	1d33      	adds	r3, r6, #4
 8003926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003928:	6838      	ldr	r0, [r7, #0]
 800392a:	f002 f8bf 	bl	8005aac <USB_CoreInit>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0d0      	b.n	8003ae2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f002 f922 	bl	8005b90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e04a      	b.n	80039e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	333d      	adds	r3, #61	; 0x3d
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	333c      	adds	r3, #60	; 0x3c
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	b298      	uxth	r0, r3
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3344      	adds	r3, #68	; 0x44
 800398e:	4602      	mov	r2, r0
 8003990:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3340      	adds	r3, #64	; 0x40
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3348      	adds	r3, #72	; 0x48
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	334c      	adds	r3, #76	; 0x4c
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3354      	adds	r3, #84	; 0x54
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	3301      	adds	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d3af      	bcc.n	8003952 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	e044      	b.n	8003a82 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a0e:	7bfa      	ldrb	r2, [r7, #15]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a3a:	7bfa      	ldrb	r2, [r7, #15]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a50:	7bfa      	ldrb	r2, [r7, #15]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a66:	7bfa      	ldrb	r2, [r7, #15]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d3b5      	bcc.n	80039f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	687e      	ldr	r6, [r7, #4]
 8003a94:	466d      	mov	r5, sp
 8003a96:	f106 0410 	add.w	r4, r6, #16
 8003a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aaa:	1d33      	adds	r3, r6, #4
 8003aac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aae:	6838      	ldr	r0, [r7, #0]
 8003ab0:	f002 f8ba 	bl	8005c28 <USB_DevInit>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00d      	b.n	8003ae2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f002 fa85 	bl	8005fea <USB_DevDisconnect>

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e267      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d075      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0a:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d00c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b16:	4b85      	ldr	r3, [pc, #532]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d112      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b22:	4b82      	ldr	r3, [pc, #520]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2e:	d10b      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	4b7e      	ldr	r3, [pc, #504]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d05b      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x108>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d157      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e242      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d106      	bne.n	8003b60 <HAL_RCC_OscConfig+0x74>
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a75      	ldr	r2, [pc, #468]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e01d      	b.n	8003b9c <HAL_RCC_OscConfig+0xb0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x98>
 8003b6a:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6f      	ldr	r2, [pc, #444]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6c      	ldr	r2, [pc, #432]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e00b      	b.n	8003b9c <HAL_RCC_OscConfig+0xb0>
 8003b84:	4b69      	ldr	r3, [pc, #420]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a68      	ldr	r2, [pc, #416]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b66      	ldr	r3, [pc, #408]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a65      	ldr	r2, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d013      	beq.n	8003bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe ff1a 	bl	80029dc <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fe ff16 	bl	80029dc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e207      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0xc0>
 8003bca:	e014      	b.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe ff06 	bl	80029dc <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd4:	f7fe ff02 	bl	80029dc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e1f3      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be6:	4b51      	ldr	r3, [pc, #324]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xe8>
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d063      	beq.n	8003cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c02:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0e:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d11c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1a:	4b44      	ldr	r3, [pc, #272]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d116      	bne.n	8003c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_RCC_OscConfig+0x152>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d001      	beq.n	8003c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e1c7      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4937      	ldr	r1, [pc, #220]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	e03a      	b.n	8003cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5c:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <HAL_RCC_OscConfig+0x244>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fe febb 	bl	80029dc <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6a:	f7fe feb7 	bl	80029dc <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e1a8      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4925      	ldr	r1, [pc, #148]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]
 8003c9c:	e015      	b.n	8003cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_RCC_OscConfig+0x244>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fe9a 	bl	80029dc <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cac:	f7fe fe96 	bl	80029dc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e187      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d036      	beq.n	8003d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_RCC_OscConfig+0x248>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe fe7a 	bl	80029dc <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fe fe76 	bl	80029dc <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e167      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x200>
 8003d0a:	e01b      	b.n	8003d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCC_OscConfig+0x248>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fe fe63 	bl	80029dc <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	e00e      	b.n	8003d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fe fe5f 	bl	80029dc <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d907      	bls.n	8003d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e150      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	42470000 	.word	0x42470000
 8003d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	4b88      	ldr	r3, [pc, #544]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ea      	bne.n	8003d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8097 	beq.w	8003e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d56:	4b81      	ldr	r3, [pc, #516]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10f      	bne.n	8003d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	4b7d      	ldr	r3, [pc, #500]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	4a7c      	ldr	r2, [pc, #496]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d70:	6413      	str	r3, [r2, #64]	; 0x40
 8003d72:	4b7a      	ldr	r3, [pc, #488]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	4b77      	ldr	r3, [pc, #476]	; (8003f60 <HAL_RCC_OscConfig+0x474>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d118      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d8e:	4b74      	ldr	r3, [pc, #464]	; (8003f60 <HAL_RCC_OscConfig+0x474>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a73      	ldr	r2, [pc, #460]	; (8003f60 <HAL_RCC_OscConfig+0x474>)
 8003d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe fe1f 	bl	80029dc <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da2:	f7fe fe1b 	bl	80029dc <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e10c      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <HAL_RCC_OscConfig+0x474>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d106      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x2ea>
 8003dc8:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a63      	ldr	r2, [pc, #396]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	e01c      	b.n	8003e10 <HAL_RCC_OscConfig+0x324>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x30c>
 8003dde:	4b5f      	ldr	r3, [pc, #380]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	4a5e      	ldr	r2, [pc, #376]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003de4:	f043 0304 	orr.w	r3, r3, #4
 8003de8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dea:	4b5c      	ldr	r3, [pc, #368]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	4a5b      	ldr	r2, [pc, #364]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6713      	str	r3, [r2, #112]	; 0x70
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0x324>
 8003df8:	4b58      	ldr	r3, [pc, #352]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a57      	ldr	r2, [pc, #348]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
 8003e04:	4b55      	ldr	r3, [pc, #340]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a54      	ldr	r2, [pc, #336]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f023 0304 	bic.w	r3, r3, #4
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fe fde0 	bl	80029dc <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e20:	f7fe fddc 	bl	80029dc <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0cb      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e36:	4b49      	ldr	r3, [pc, #292]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0ee      	beq.n	8003e20 <HAL_RCC_OscConfig+0x334>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e44:	f7fe fdca 	bl	80029dc <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fe fdc6 	bl	80029dc <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0b5      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e62:	4b3e      	ldr	r3, [pc, #248]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ee      	bne.n	8003e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d105      	bne.n	8003e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e74:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	4a38      	ldr	r2, [pc, #224]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80a1 	beq.w	8003fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e8a:	4b34      	ldr	r3, [pc, #208]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d05c      	beq.n	8003f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d141      	bne.n	8003f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_RCC_OscConfig+0x478>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fd9a 	bl	80029dc <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fe fd96 	bl	80029dc <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e087      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	019b      	lsls	r3, r3, #6
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	491b      	ldr	r1, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_RCC_OscConfig+0x478>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7fe fd6f 	bl	80029dc <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fe fd6b 	bl	80029dc <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e05c      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x416>
 8003f20:	e054      	b.n	8003fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <HAL_RCC_OscConfig+0x478>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fe fd58 	bl	80029dc <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fe fd54 	bl	80029dc <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e045      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x444>
 8003f4e:	e03d      	b.n	8003fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e038      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40007000 	.word	0x40007000
 8003f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_RCC_OscConfig+0x4ec>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d028      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d121      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d11a      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f98:	4013      	ands	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d111      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800

08003fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0cc      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b68      	ldr	r3, [pc, #416]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d90c      	bls.n	8004018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b65      	ldr	r3, [pc, #404]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0b8      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d020      	beq.n	8004066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004030:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4a58      	ldr	r2, [pc, #352]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800403a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004048:	4b53      	ldr	r3, [pc, #332]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004054:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	494d      	ldr	r1, [pc, #308]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d044      	beq.n	80040fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d119      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e07f      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d003      	beq.n	800409a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004096:	2b03      	cmp	r3, #3
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e06f      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e067      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ba:	4b37      	ldr	r3, [pc, #220]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f023 0203 	bic.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4934      	ldr	r1, [pc, #208]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040cc:	f7fe fc86 	bl	80029dc <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d4:	f7fe fc82 	bl	80029dc <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e04f      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 020c 	and.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1eb      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d20c      	bcs.n	8004124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e032      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4916      	ldr	r1, [pc, #88]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	490e      	ldr	r1, [pc, #56]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004162:	f000 f821 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8004166:	4602      	mov	r2, r0
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	490a      	ldr	r1, [pc, #40]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004174:	5ccb      	ldrb	r3, [r1, r3]
 8004176:	fa22 f303 	lsr.w	r3, r2, r3
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800417c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fa76 	bl	8002674 <HAL_InitTick>

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023c00 	.word	0x40023c00
 8004198:	40023800 	.word	0x40023800
 800419c:	0801f200 	.word	0x0801f200
 80041a0:	20000000 	.word	0x20000000
 80041a4:	20000004 	.word	0x20000004

080041a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ac:	b094      	sub	sp, #80	; 0x50
 80041ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	647b      	str	r3, [r7, #68]	; 0x44
 80041b4:	2300      	movs	r3, #0
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b8:	2300      	movs	r3, #0
 80041ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c0:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d00d      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x40>
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	f200 80e1 	bhi.w	8004394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x34>
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d003      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041da:	e0db      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041dc:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCC_GetSysClockFreq+0x204>)
 80041de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041e0:	e0db      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041e2:	4b73      	ldr	r3, [pc, #460]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041e6:	e0d8      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e8:	4b6f      	ldr	r3, [pc, #444]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041f2:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d063      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fe:	4b6a      	ldr	r3, [pc, #424]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	099b      	lsrs	r3, r3, #6
 8004204:	2200      	movs	r2, #0
 8004206:	63bb      	str	r3, [r7, #56]	; 0x38
 8004208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
 8004212:	2300      	movs	r3, #0
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
 8004216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800421a:	4622      	mov	r2, r4
 800421c:	462b      	mov	r3, r5
 800421e:	f04f 0000 	mov.w	r0, #0
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	0159      	lsls	r1, r3, #5
 8004228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800422c:	0150      	lsls	r0, r2, #5
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4621      	mov	r1, r4
 8004234:	1a51      	subs	r1, r2, r1
 8004236:	6139      	str	r1, [r7, #16]
 8004238:	4629      	mov	r1, r5
 800423a:	eb63 0301 	sbc.w	r3, r3, r1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800424c:	4659      	mov	r1, fp
 800424e:	018b      	lsls	r3, r1, #6
 8004250:	4651      	mov	r1, sl
 8004252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004256:	4651      	mov	r1, sl
 8004258:	018a      	lsls	r2, r1, #6
 800425a:	4651      	mov	r1, sl
 800425c:	ebb2 0801 	subs.w	r8, r2, r1
 8004260:	4659      	mov	r1, fp
 8004262:	eb63 0901 	sbc.w	r9, r3, r1
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427a:	4690      	mov	r8, r2
 800427c:	4699      	mov	r9, r3
 800427e:	4623      	mov	r3, r4
 8004280:	eb18 0303 	adds.w	r3, r8, r3
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	462b      	mov	r3, r5
 8004288:	eb49 0303 	adc.w	r3, r9, r3
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800429a:	4629      	mov	r1, r5
 800429c:	024b      	lsls	r3, r1, #9
 800429e:	4621      	mov	r1, r4
 80042a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042a4:	4621      	mov	r1, r4
 80042a6:	024a      	lsls	r2, r1, #9
 80042a8:	4610      	mov	r0, r2
 80042aa:	4619      	mov	r1, r3
 80042ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ae:	2200      	movs	r2, #0
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042b8:	f7fc fcd6 	bl	8000c68 <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4613      	mov	r3, r2
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c4:	e058      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	2200      	movs	r2, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	4611      	mov	r1, r2
 80042d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
 80042dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042e0:	4642      	mov	r2, r8
 80042e2:	464b      	mov	r3, r9
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	0159      	lsls	r1, r3, #5
 80042ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f2:	0150      	lsls	r0, r2, #5
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4641      	mov	r1, r8
 80042fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80042fe:	4649      	mov	r1, r9
 8004300:	eb63 0b01 	sbc.w	fp, r3, r1
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004318:	ebb2 040a 	subs.w	r4, r2, sl
 800431c:	eb63 050b 	sbc.w	r5, r3, fp
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	00eb      	lsls	r3, r5, #3
 800432a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432e:	00e2      	lsls	r2, r4, #3
 8004330:	4614      	mov	r4, r2
 8004332:	461d      	mov	r5, r3
 8004334:	4643      	mov	r3, r8
 8004336:	18e3      	adds	r3, r4, r3
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	464b      	mov	r3, r9
 800433c:	eb45 0303 	adc.w	r3, r5, r3
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800434e:	4629      	mov	r1, r5
 8004350:	028b      	lsls	r3, r1, #10
 8004352:	4621      	mov	r1, r4
 8004354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004358:	4621      	mov	r1, r4
 800435a:	028a      	lsls	r2, r1, #10
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004362:	2200      	movs	r2, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	61fa      	str	r2, [r7, #28]
 8004368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436c:	f7fc fc7c 	bl	8000c68 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4613      	mov	r3, r2
 8004376:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	3301      	adds	r3, #1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800438a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004392:	e002      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004396:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800439c:	4618      	mov	r0, r3
 800439e:	3750      	adds	r7, #80	; 0x50
 80043a0:	46bd      	mov	sp, r7
 80043a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	007a1200 	.word	0x007a1200

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000000 	.word	0x20000000

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d0:	f7ff fff0 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0a9b      	lsrs	r3, r3, #10
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	0801f210 	.word	0x0801f210

080043f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043f8:	f7ff ffdc 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0b5b      	lsrs	r3, r3, #13
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4903      	ldr	r1, [pc, #12]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40023800 	.word	0x40023800
 8004418:	0801f210 	.word	0x0801f210

0800441c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	220f      	movs	r2, #15
 800442a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800442c:	4b12      	ldr	r3, [pc, #72]	; (8004478 <HAL_RCC_GetClockConfig+0x5c>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0203 	and.w	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <HAL_RCC_GetClockConfig+0x5c>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <HAL_RCC_GetClockConfig+0x5c>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_GetClockConfig+0x5c>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <HAL_RCC_GetClockConfig+0x60>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0207 	and.w	r2, r3, #7
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	40023c00 	.word	0x40023c00

08004480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e041      	b.n	8004516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fd fe76 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f000 fc66 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d001      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e04e      	b.n	80045d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d01d      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a18      	ldr	r2, [pc, #96]	; (80045fc <HAL_TIM_Base_Start_IT+0xdc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d111      	bne.n	80045c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d010      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	e007      	b.n	80045d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40010400 	.word	0x40010400
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40001800 	.word	0x40001800

08004600 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e041      	b.n	8004696 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f839 	bl	800469e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f000 fba6 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e041      	b.n	8004748 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f839 	bl	8004750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f000 fb4d 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d122      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d11b      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0202 	mvn.w	r2, #2
 8004790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fad3 	bl	8004d52 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fac5 	bl	8004d3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fad6 	bl	8004d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d122      	bne.n	8004814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d11b      	bne.n	8004814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0204 	mvn.w	r2, #4
 80047e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 faa9 	bl	8004d52 <HAL_TIM_IC_CaptureCallback>
 8004800:	e005      	b.n	800480e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa9b 	bl	8004d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 faac 	bl	8004d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b08      	cmp	r3, #8
 8004820:	d122      	bne.n	8004868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d11b      	bne.n	8004868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0208 	mvn.w	r2, #8
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2204      	movs	r2, #4
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa7f 	bl	8004d52 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fa71 	bl	8004d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fa82 	bl	8004d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b10      	cmp	r3, #16
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0210 	mvn.w	r2, #16
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2208      	movs	r2, #8
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa55 	bl	8004d52 <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa47 	bl	8004d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fa58 	bl	8004d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10e      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0201 	mvn.w	r2, #1
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fd faa6 	bl	8001e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	2b80      	cmp	r3, #128	; 0x80
 80048f4:	d10e      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d107      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fe00 	bl	8005514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d10e      	bne.n	8004940 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d107      	bne.n	8004940 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa1d 	bl	8004d7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b20      	cmp	r3, #32
 800494c:	d10e      	bne.n	800496c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b20      	cmp	r3, #32
 800495a:	d107      	bne.n	800496c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0220 	mvn.w	r2, #32
 8004964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fdca 	bl	8005500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_TIM_OC_ConfigChannel+0x1e>
 800498e:	2302      	movs	r3, #2
 8004990:	e048      	b.n	8004a24 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d839      	bhi.n	8004a14 <HAL_TIM_OC_ConfigChannel+0xa0>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	08004a15 	.word	0x08004a15
 80049b0:	08004a15 	.word	0x08004a15
 80049b4:	08004a15 	.word	0x08004a15
 80049b8:	080049eb 	.word	0x080049eb
 80049bc:	08004a15 	.word	0x08004a15
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004a15 	.word	0x08004a15
 80049c8:	080049f9 	.word	0x080049f9
 80049cc:	08004a15 	.word	0x08004a15
 80049d0:	08004a15 	.word	0x08004a15
 80049d4:	08004a15 	.word	0x08004a15
 80049d8:	08004a07 	.word	0x08004a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa74 	bl	8004ed0 <TIM_OC1_SetConfig>
      break;
 80049e8:	e017      	b.n	8004a1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fadd 	bl	8004fb0 <TIM_OC2_SetConfig>
      break;
 80049f6:	e010      	b.n	8004a1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fb4c 	bl	800509c <TIM_OC3_SetConfig>
      break;
 8004a04:	e009      	b.n	8004a1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fbb9 	bl	8005184 <TIM_OC4_SetConfig>
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
      break;
 8004a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0ae      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	f200 809f 	bhi.w	8004b98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004b99 	.word	0x08004b99
 8004a68:	08004b99 	.word	0x08004b99
 8004a6c:	08004b99 	.word	0x08004b99
 8004a70:	08004ad5 	.word	0x08004ad5
 8004a74:	08004b99 	.word	0x08004b99
 8004a78:	08004b99 	.word	0x08004b99
 8004a7c:	08004b99 	.word	0x08004b99
 8004a80:	08004b17 	.word	0x08004b17
 8004a84:	08004b99 	.word	0x08004b99
 8004a88:	08004b99 	.word	0x08004b99
 8004a8c:	08004b99 	.word	0x08004b99
 8004a90:	08004b57 	.word	0x08004b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa18 	bl	8004ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0208 	orr.w	r2, r2, #8
 8004aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0204 	bic.w	r2, r2, #4
 8004abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	619a      	str	r2, [r3, #24]
      break;
 8004ad2:	e064      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fa68 	bl	8004fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6999      	ldr	r1, [r3, #24]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	021a      	lsls	r2, r3, #8
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	619a      	str	r2, [r3, #24]
      break;
 8004b14:	e043      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fabd 	bl	800509c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0208 	orr.w	r2, r2, #8
 8004b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0204 	bic.w	r2, r2, #4
 8004b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	61da      	str	r2, [r3, #28]
      break;
 8004b54:	e023      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fb11 	bl	8005184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	021a      	lsls	r2, r3, #8
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	61da      	str	r2, [r3, #28]
      break;
 8004b96:	e002      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIM_ConfigClockSource+0x1c>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e0b4      	b.n	8004d36 <HAL_TIM_ConfigClockSource+0x186>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c04:	d03e      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0xd4>
 8004c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0a:	f200 8087 	bhi.w	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c12:	f000 8086 	beq.w	8004d22 <HAL_TIM_ConfigClockSource+0x172>
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1a:	d87f      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b70      	cmp	r3, #112	; 0x70
 8004c1e:	d01a      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0xa6>
 8004c20:	2b70      	cmp	r3, #112	; 0x70
 8004c22:	d87b      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b60      	cmp	r3, #96	; 0x60
 8004c26:	d050      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x11a>
 8004c28:	2b60      	cmp	r3, #96	; 0x60
 8004c2a:	d877      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b50      	cmp	r3, #80	; 0x50
 8004c2e:	d03c      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0xfa>
 8004c30:	2b50      	cmp	r3, #80	; 0x50
 8004c32:	d873      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d058      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x13a>
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d86f      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b30      	cmp	r3, #48	; 0x30
 8004c3e:	d064      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x15a>
 8004c40:	2b30      	cmp	r3, #48	; 0x30
 8004c42:	d86b      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d060      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d867      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d05c      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x15a>
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d05a      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x15a>
 8004c54:	e062      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6899      	ldr	r1, [r3, #8]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f000 fb5d 	bl	8005324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	609a      	str	r2, [r3, #8]
      break;
 8004c82:	e04f      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6899      	ldr	r1, [r3, #8]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f000 fb46 	bl	8005324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca6:	609a      	str	r2, [r3, #8]
      break;
 8004ca8:	e03c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 faba 	bl	8005230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2150      	movs	r1, #80	; 0x50
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fb13 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e02c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 fad9 	bl	800528e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2160      	movs	r1, #96	; 0x60
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fb03 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e01c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f000 fa9a 	bl	8005230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2140      	movs	r1, #64	; 0x40
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 faf3 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 8004d08:	e00c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f000 faea 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 8004d1a:	e003      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d20:	e000      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a40      	ldr	r2, [pc, #256]	; (8004ea4 <TIM_Base_SetConfig+0x114>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dae:	d00f      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a3d      	ldr	r2, [pc, #244]	; (8004ea8 <TIM_Base_SetConfig+0x118>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00b      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a3c      	ldr	r2, [pc, #240]	; (8004eac <TIM_Base_SetConfig+0x11c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a3b      	ldr	r2, [pc, #236]	; (8004eb0 <TIM_Base_SetConfig+0x120>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a3a      	ldr	r2, [pc, #232]	; (8004eb4 <TIM_Base_SetConfig+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d108      	bne.n	8004de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2f      	ldr	r2, [pc, #188]	; (8004ea4 <TIM_Base_SetConfig+0x114>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d02b      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d027      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <TIM_Base_SetConfig+0x118>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d023      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2b      	ldr	r2, [pc, #172]	; (8004eac <TIM_Base_SetConfig+0x11c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01f      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2a      	ldr	r2, [pc, #168]	; (8004eb0 <TIM_Base_SetConfig+0x120>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01b      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a29      	ldr	r2, [pc, #164]	; (8004eb4 <TIM_Base_SetConfig+0x124>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d017      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a28      	ldr	r2, [pc, #160]	; (8004eb8 <TIM_Base_SetConfig+0x128>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a27      	ldr	r2, [pc, #156]	; (8004ebc <TIM_Base_SetConfig+0x12c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00f      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <TIM_Base_SetConfig+0x130>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <TIM_Base_SetConfig+0x134>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <TIM_Base_SetConfig+0x138>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a23      	ldr	r2, [pc, #140]	; (8004ecc <TIM_Base_SetConfig+0x13c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <TIM_Base_SetConfig+0x114>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0xf8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a0c      	ldr	r2, [pc, #48]	; (8004eb4 <TIM_Base_SetConfig+0x124>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d103      	bne.n	8004e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	615a      	str	r2, [r3, #20]
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800
 8004ec4:	40001800 	.word	0x40001800
 8004ec8:	40001c00 	.word	0x40001c00
 8004ecc:	40002000 	.word	0x40002000

08004ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 0302 	bic.w	r3, r3, #2
 8004f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a20      	ldr	r2, [pc, #128]	; (8004fa8 <TIM_OC1_SetConfig+0xd8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC1_SetConfig+0x64>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	; (8004fac <TIM_OC1_SetConfig+0xdc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10c      	bne.n	8004f4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0308 	bic.w	r3, r3, #8
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 0304 	bic.w	r3, r3, #4
 8004f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <TIM_OC1_SetConfig+0xd8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_OC1_SetConfig+0x8e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a14      	ldr	r2, [pc, #80]	; (8004fac <TIM_OC1_SetConfig+0xdc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d111      	bne.n	8004f82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	621a      	str	r2, [r3, #32]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40010400 	.word	0x40010400

08004fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0210 	bic.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0320 	bic.w	r3, r3, #32
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a22      	ldr	r2, [pc, #136]	; (8005094 <TIM_OC2_SetConfig+0xe4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_OC2_SetConfig+0x68>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a21      	ldr	r2, [pc, #132]	; (8005098 <TIM_OC2_SetConfig+0xe8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d10d      	bne.n	8005034 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a17      	ldr	r2, [pc, #92]	; (8005094 <TIM_OC2_SetConfig+0xe4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_OC2_SetConfig+0x94>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <TIM_OC2_SetConfig+0xe8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d113      	bne.n	800506c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800504a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40010400 	.word	0x40010400

0800509c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0303 	bic.w	r3, r3, #3
 80050d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a21      	ldr	r2, [pc, #132]	; (800517c <TIM_OC3_SetConfig+0xe0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_OC3_SetConfig+0x66>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a20      	ldr	r2, [pc, #128]	; (8005180 <TIM_OC3_SetConfig+0xe4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10d      	bne.n	800511e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a16      	ldr	r2, [pc, #88]	; (800517c <TIM_OC3_SetConfig+0xe0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_OC3_SetConfig+0x92>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a15      	ldr	r2, [pc, #84]	; (8005180 <TIM_OC3_SetConfig+0xe4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d113      	bne.n	8005156 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	621a      	str	r2, [r3, #32]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40010000 	.word	0x40010000
 8005180:	40010400 	.word	0x40010400

08005184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	031b      	lsls	r3, r3, #12
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a12      	ldr	r2, [pc, #72]	; (8005228 <TIM_OC4_SetConfig+0xa4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC4_SetConfig+0x68>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a11      	ldr	r2, [pc, #68]	; (800522c <TIM_OC4_SetConfig+0xa8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d109      	bne.n	8005200 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40010400 	.word	0x40010400

08005230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0201 	bic.w	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800525a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 030a 	bic.w	r3, r3, #10
 800526c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800528e:	b480      	push	{r7}
 8005290:	b087      	sub	sp, #28
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f023 0210 	bic.w	r2, r3, #16
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	031b      	lsls	r3, r3, #12
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	f043 0307 	orr.w	r3, r3, #7
 8005310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800533e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	021a      	lsls	r2, r3, #8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	431a      	orrs	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4313      	orrs	r3, r2
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e05a      	b.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d01d      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1a      	ldr	r2, [pc, #104]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a18      	ldr	r2, [pc, #96]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a17      	ldr	r2, [pc, #92]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a15      	ldr	r2, [pc, #84]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10c      	bne.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4313      	orrs	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40010400 	.word	0x40010400
 8005454:	40014000 	.word	0x40014000
 8005458:	40001800 	.word	0x40001800

0800545c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005474:	2302      	movs	r3, #2
 8005476:	e03d      	b.n	80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e03f      	b.n	80055ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fc ffee 	bl	8002530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2224      	movs	r2, #36	; 0x24
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f829 	bl	80055c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c8:	b0c0      	sub	sp, #256	; 0x100
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	68d9      	ldr	r1, [r3, #12]
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	ea40 0301 	orr.w	r3, r0, r1
 80055ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	431a      	orrs	r2, r3
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800561c:	f021 010c 	bic.w	r1, r1, #12
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800562a:	430b      	orrs	r3, r1
 800562c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	6999      	ldr	r1, [r3, #24]
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	ea40 0301 	orr.w	r3, r0, r1
 800564a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b8f      	ldr	r3, [pc, #572]	; (8005890 <UART_SetConfig+0x2cc>)
 8005654:	429a      	cmp	r2, r3
 8005656:	d005      	beq.n	8005664 <UART_SetConfig+0xa0>
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b8d      	ldr	r3, [pc, #564]	; (8005894 <UART_SetConfig+0x2d0>)
 8005660:	429a      	cmp	r2, r3
 8005662:	d104      	bne.n	800566e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7fe fec6 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 8005668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800566c:	e003      	b.n	8005676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800566e:	f7fe fead 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8005672:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005680:	f040 810c 	bne.w	800589c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	1891      	adds	r1, r2, r2
 800569c:	65b9      	str	r1, [r7, #88]	; 0x58
 800569e:	415b      	adcs	r3, r3
 80056a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056a6:	4621      	mov	r1, r4
 80056a8:	eb12 0801 	adds.w	r8, r2, r1
 80056ac:	4629      	mov	r1, r5
 80056ae:	eb43 0901 	adc.w	r9, r3, r1
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c6:	4690      	mov	r8, r2
 80056c8:	4699      	mov	r9, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	eb18 0303 	adds.w	r3, r8, r3
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056d4:	462b      	mov	r3, r5
 80056d6:	eb49 0303 	adc.w	r3, r9, r3
 80056da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056f2:	460b      	mov	r3, r1
 80056f4:	18db      	adds	r3, r3, r3
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
 80056f8:	4613      	mov	r3, r2
 80056fa:	eb42 0303 	adc.w	r3, r2, r3
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005708:	f7fb faae 	bl	8000c68 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <UART_SetConfig+0x2d4>)
 8005712:	fba3 2302 	umull	r2, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	011c      	lsls	r4, r3, #4
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005724:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	64b9      	str	r1, [r7, #72]	; 0x48
 8005734:	415b      	adcs	r3, r3
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800573c:	4641      	mov	r1, r8
 800573e:	eb12 0a01 	adds.w	sl, r2, r1
 8005742:	4649      	mov	r1, r9
 8005744:	eb43 0b01 	adc.w	fp, r3, r1
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800575c:	4692      	mov	sl, r2
 800575e:	469b      	mov	fp, r3
 8005760:	4643      	mov	r3, r8
 8005762:	eb1a 0303 	adds.w	r3, sl, r3
 8005766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800576a:	464b      	mov	r3, r9
 800576c:	eb4b 0303 	adc.w	r3, fp, r3
 8005770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005780:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005788:	460b      	mov	r3, r1
 800578a:	18db      	adds	r3, r3, r3
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
 800578e:	4613      	mov	r3, r2
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
 8005796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800579a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800579e:	f7fb fa63 	bl	8000c68 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <UART_SetConfig+0x2d4>)
 80057aa:	fba3 2301 	umull	r2, r3, r3, r1
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2264      	movs	r2, #100	; 0x64
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	1acb      	subs	r3, r1, r3
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <UART_SetConfig+0x2d4>)
 80057c0:	fba3 2302 	umull	r2, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057cc:	441c      	add	r4, r3
 80057ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	1891      	adds	r1, r2, r2
 80057e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057e8:	415b      	adcs	r3, r3
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057f0:	4641      	mov	r1, r8
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6339      	str	r1, [r7, #48]	; 0x30
 80057f6:	4649      	mov	r1, r9
 80057f8:	414b      	adcs	r3, r1
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005808:	4659      	mov	r1, fp
 800580a:	00cb      	lsls	r3, r1, #3
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005812:	4651      	mov	r1, sl
 8005814:	00ca      	lsls	r2, r1, #3
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	4603      	mov	r3, r0
 800581c:	4642      	mov	r2, r8
 800581e:	189b      	adds	r3, r3, r2
 8005820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005824:	464b      	mov	r3, r9
 8005826:	460a      	mov	r2, r1
 8005828:	eb42 0303 	adc.w	r3, r2, r3
 800582c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800583c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005844:	460b      	mov	r3, r1
 8005846:	18db      	adds	r3, r3, r3
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
 800584a:	4613      	mov	r3, r2
 800584c:	eb42 0303 	adc.w	r3, r2, r3
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800585a:	f7fb fa05 	bl	8000c68 <__aeabi_uldivmod>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <UART_SetConfig+0x2d4>)
 8005864:	fba3 1302 	umull	r1, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	2164      	movs	r1, #100	; 0x64
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	3332      	adds	r3, #50	; 0x32
 8005876:	4a08      	ldr	r2, [pc, #32]	; (8005898 <UART_SetConfig+0x2d4>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	f003 0207 	and.w	r2, r3, #7
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4422      	add	r2, r4
 800588a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800588c:	e105      	b.n	8005a9a <UART_SetConfig+0x4d6>
 800588e:	bf00      	nop
 8005890:	40011000 	.word	0x40011000
 8005894:	40011400 	.word	0x40011400
 8005898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ae:	4642      	mov	r2, r8
 80058b0:	464b      	mov	r3, r9
 80058b2:	1891      	adds	r1, r2, r2
 80058b4:	6239      	str	r1, [r7, #32]
 80058b6:	415b      	adcs	r3, r3
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058be:	4641      	mov	r1, r8
 80058c0:	1854      	adds	r4, r2, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	eb43 0501 	adc.w	r5, r3, r1
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	00eb      	lsls	r3, r5, #3
 80058d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d6:	00e2      	lsls	r2, r4, #3
 80058d8:	4614      	mov	r4, r2
 80058da:	461d      	mov	r5, r3
 80058dc:	4643      	mov	r3, r8
 80058de:	18e3      	adds	r3, r4, r3
 80058e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058e4:	464b      	mov	r3, r9
 80058e6:	eb45 0303 	adc.w	r3, r5, r3
 80058ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800590a:	4629      	mov	r1, r5
 800590c:	008b      	lsls	r3, r1, #2
 800590e:	4621      	mov	r1, r4
 8005910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005914:	4621      	mov	r1, r4
 8005916:	008a      	lsls	r2, r1, #2
 8005918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800591c:	f7fb f9a4 	bl	8000c68 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005926:	fba3 2302 	umull	r2, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	011c      	lsls	r4, r3, #4
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800593c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	1891      	adds	r1, r2, r2
 8005946:	61b9      	str	r1, [r7, #24]
 8005948:	415b      	adcs	r3, r3
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005950:	4641      	mov	r1, r8
 8005952:	1851      	adds	r1, r2, r1
 8005954:	6139      	str	r1, [r7, #16]
 8005956:	4649      	mov	r1, r9
 8005958:	414b      	adcs	r3, r1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005968:	4659      	mov	r1, fp
 800596a:	00cb      	lsls	r3, r1, #3
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005972:	4651      	mov	r1, sl
 8005974:	00ca      	lsls	r2, r1, #3
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4603      	mov	r3, r0
 800597c:	4642      	mov	r2, r8
 800597e:	189b      	adds	r3, r3, r2
 8005980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005984:	464b      	mov	r3, r9
 8005986:	460a      	mov	r2, r1
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	67bb      	str	r3, [r7, #120]	; 0x78
 800599a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059a8:	4649      	mov	r1, r9
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	4641      	mov	r1, r8
 80059ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b2:	4641      	mov	r1, r8
 80059b4:	008a      	lsls	r2, r1, #2
 80059b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ba:	f7fb f955 	bl	8000c68 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4b39      	ldr	r3, [pc, #228]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059c4:	fba3 1302 	umull	r1, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	2164      	movs	r1, #100	; 0x64
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	3332      	adds	r3, #50	; 0x32
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059d8:	fba2 2303 	umull	r2, r3, r2, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e2:	441c      	add	r4, r3
 80059e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e8:	2200      	movs	r2, #0
 80059ea:	673b      	str	r3, [r7, #112]	; 0x70
 80059ec:	677a      	str	r2, [r7, #116]	; 0x74
 80059ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059f2:	4642      	mov	r2, r8
 80059f4:	464b      	mov	r3, r9
 80059f6:	1891      	adds	r1, r2, r2
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	415b      	adcs	r3, r3
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a02:	4641      	mov	r1, r8
 8005a04:	1851      	adds	r1, r2, r1
 8005a06:	6039      	str	r1, [r7, #0]
 8005a08:	4649      	mov	r1, r9
 8005a0a:	414b      	adcs	r3, r1
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	00cb      	lsls	r3, r1, #3
 8005a1e:	4651      	mov	r1, sl
 8005a20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a24:	4651      	mov	r1, sl
 8005a26:	00ca      	lsls	r2, r1, #3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4642      	mov	r2, r8
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a34:	464b      	mov	r3, r9
 8005a36:	460a      	mov	r2, r1
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	663b      	str	r3, [r7, #96]	; 0x60
 8005a48:	667a      	str	r2, [r7, #100]	; 0x64
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a56:	4649      	mov	r1, r9
 8005a58:	008b      	lsls	r3, r1, #2
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a60:	4641      	mov	r1, r8
 8005a62:	008a      	lsls	r2, r1, #2
 8005a64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a68:	f7fb f8fe 	bl	8000c68 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a72:	fba3 1302 	umull	r1, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2164      	movs	r1, #100	; 0x64
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4422      	add	r2, r4
 8005a98:	609a      	str	r2, [r3, #8]
}
 8005a9a:	bf00      	nop
 8005a9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	51eb851f 	.word	0x51eb851f

08005aac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aac:	b084      	sub	sp, #16
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	f107 001c 	add.w	r0, r7, #28
 8005aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d122      	bne.n	8005b0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d105      	bne.n	8005afe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 faa2 	bl	8006048 <USB_CoreReset>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
 8005b08:	e01a      	b.n	8005b40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa96 	bl	8006048 <USB_CoreReset>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
 8005b32:	e005      	b.n	8005b40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10b      	bne.n	8005b5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f043 0206 	orr.w	r2, r3, #6
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f043 0220 	orr.w	r2, r3, #32
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b6a:	b004      	add	sp, #16
 8005b6c:	4770      	bx	lr

08005b6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f023 0201 	bic.w	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d115      	bne.n	8005bde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f7fc ff18 	bl	80029f4 <HAL_Delay>
      ms++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa2e 	bl	800602c <USB_GetMode>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d01e      	beq.n	8005c14 <USB_SetCurrentMode+0x84>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b31      	cmp	r3, #49	; 0x31
 8005bda:	d9f0      	bls.n	8005bbe <USB_SetCurrentMode+0x2e>
 8005bdc:	e01a      	b.n	8005c14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d115      	bne.n	8005c10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7fc feff 	bl	80029f4 <HAL_Delay>
      ms++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fa15 	bl	800602c <USB_GetMode>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <USB_SetCurrentMode+0x84>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b31      	cmp	r3, #49	; 0x31
 8005c0c:	d9f0      	bls.n	8005bf0 <USB_SetCurrentMode+0x60>
 8005c0e:	e001      	b.n	8005c14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e005      	b.n	8005c20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b32      	cmp	r3, #50	; 0x32
 8005c18:	d101      	bne.n	8005c1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c28:	b084      	sub	sp, #16
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	e009      	b.n	8005c5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3340      	adds	r3, #64	; 0x40
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b0e      	cmp	r3, #14
 8005c60:	d9f2      	bls.n	8005c48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11c      	bne.n	8005ca2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c76:	f043 0302 	orr.w	r3, r3, #2
 8005c7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38
 8005ca0:	e00b      	b.n	8005cba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	4619      	mov	r1, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	680b      	ldr	r3, [r1, #0]
 8005cd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10c      	bne.n	8005cfa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d104      	bne.n	8005cf0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f965 	bl	8005fb8 <USB_SetDevSpeed>
 8005cee:	e008      	b.n	8005d02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f960 	bl	8005fb8 <USB_SetDevSpeed>
 8005cf8:	e003      	b.n	8005d02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cfa:	2103      	movs	r1, #3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f95b 	bl	8005fb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d02:	2110      	movs	r1, #16
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f8f3 	bl	8005ef0 <USB_FlushTxFifo>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f91f 	bl	8005f58 <USB_FlushRxFifo>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	461a      	mov	r2, r3
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d42:	461a      	mov	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	e043      	b.n	8005dd6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d64:	d118      	bne.n	8005d98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e013      	b.n	8005daa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e008      	b.n	8005daa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	461a      	mov	r2, r3
 8005da6:	2300      	movs	r3, #0
 8005da8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d3b7      	bcc.n	8005d4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e043      	b.n	8005e6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfa:	d118      	bne.n	8005e2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e013      	b.n	8005e40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	461a      	mov	r2, r3
 8005e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	e008      	b.n	8005e40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3b7      	bcc.n	8005de4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f043 0210 	orr.w	r2, r3, #16
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <USB_DevInit+0x2c4>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f043 0208 	orr.w	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d107      	bne.n	8005edc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed4:	f043 0304 	orr.w	r3, r3, #4
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ee8:	b004      	add	sp, #16
 8005eea:	4770      	bx	lr
 8005eec:	803c3800 	.word	0x803c3800

08005ef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <USB_FlushTxFifo+0x64>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e01b      	b.n	8005f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	daf2      	bge.n	8005efe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	019b      	lsls	r3, r3, #6
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <USB_FlushTxFifo+0x64>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e006      	b.n	8005f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d0f0      	beq.n	8005f28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	00030d40 	.word	0x00030d40

08005f58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <USB_FlushRxFifo+0x5c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e018      	b.n	8005fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	daf2      	bge.n	8005f64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2210      	movs	r2, #16
 8005f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <USB_FlushRxFifo+0x5c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e006      	b.n	8005fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b10      	cmp	r3, #16
 8005fa4:	d0f0      	beq.n	8005f88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	00030d40 	.word	0x00030d40

08005fb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006004:	f023 0303 	bic.w	r3, r3, #3
 8006008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f003 0301 	and.w	r3, r3, #1
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <USB_CoreReset+0x64>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e01b      	b.n	800609e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	daf2      	bge.n	8006054 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <USB_CoreReset+0x64>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e006      	b.n	800609e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b01      	cmp	r3, #1
 800609a:	d0f0      	beq.n	800607e <USB_CoreReset+0x36>

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	00030d40 	.word	0x00030d40

080060b0 <index2value>:

/*
** Convert an acceptable index to a pointer to its respective value.
** Non-valid indices return the special nil value 'G(L)->nilvalue'.
*/
static TValue *index2value (lua_State *L, int idx) {
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	617b      	str	r3, [r7, #20]
  if (idx > 0) {
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dd10      	ble.n	80060e8 <index2value+0x38>
    StkId o = ci->func + idx;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	4413      	add	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
    api_check(L, idx <= L->ci->top - (ci->func + 1), "unacceptable index");
    if (o >= L->top) return &G(L)->nilvalue;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d303      	bcc.n	80060e4 <index2value+0x34>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	332c      	adds	r3, #44	; 0x2c
 80060e2:	e034      	b.n	800614e <index2value+0x9e>
    else return s2v(o);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e032      	b.n	800614e <index2value+0x9e>
  }
  else if (!ispseudo(idx)) {  /* negative index */
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <index2value+0xac>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	db05      	blt.n	80060fc <index2value+0x4c>
    api_check(L, idx != 0 && -idx <= L->top - (ci->func + 1), "invalid index");
    return s2v(L->top + idx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	e028      	b.n	800614e <index2value+0x9e>
  }
  else if (idx == LUA_REGISTRYINDEX)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <index2value+0xb0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d103      	bne.n	800610c <index2value+0x5c>
    return &G(L)->l_registry;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	3324      	adds	r3, #36	; 0x24
 800610a:	e020      	b.n	800614e <index2value+0x9e>
  else {  /* upvalues */
    idx = LUA_REGISTRYINDEX - idx;
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <index2value+0xb0>)
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	603b      	str	r3, [r7, #0]
    api_check(L, idx <= MAXUPVAL + 1, "upvalue index too large");
    if (ttisCclosure(s2v(ci->func))) {  /* C closure? */
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	791b      	ldrb	r3, [r3, #4]
 800611a:	2b66      	cmp	r3, #102	; 0x66
 800611c:	d114      	bne.n	8006148 <index2value+0x98>
      CClosure *func = clCvalue(s2v(ci->func));
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	613b      	str	r3, [r7, #16]
      return (idx <= func->nupvalues) ? &func->upvalue[idx-1]
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	799b      	ldrb	r3, [r3, #6]
 800612a:	461a      	mov	r2, r3
                                      : &G(L)->nilvalue;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	4293      	cmp	r3, r2
 8006130:	dc06      	bgt.n	8006140 <index2value+0x90>
      return (idx <= func->nupvalues) ? &func->upvalue[idx-1]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	3b01      	subs	r3, #1
                                      : &G(L)->nilvalue;
 8006136:	3302      	adds	r3, #2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4413      	add	r3, r2
 800613e:	e006      	b.n	800614e <index2value+0x9e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	332c      	adds	r3, #44	; 0x2c
 8006146:	e002      	b.n	800614e <index2value+0x9e>
    }
    else {  /* light C function or Lua function (through a hook)?) */
      api_check(L, ttislcf(s2v(ci->func)), "caller not a C function");
      return &G(L)->nilvalue;  /* no upvalues */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	332c      	adds	r3, #44	; 0x2c
    }
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	fff0b9d9 	.word	0xfff0b9d9
 8006160:	fff0b9d8 	.word	0xfff0b9d8

08006164 <lua_atpanic>:
  }
  lua_unlock(to);
}


LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  lua_CFunction old;
  lua_lock(L);
  old = G(L)->panic;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006176:	60fb      	str	r3, [r7, #12]
  G(L)->panic = panicf;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  lua_unlock(L);
  return old;
 8006182:	68fb      	ldr	r3, [r7, #12]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <lua_tolstring>:
  const TValue *o = index2value(L, idx);
  return !l_isfalse(o);
}


LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  TValue *o;
  lua_lock(L);
  o = index2value(L, idx);
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff ff86 	bl	80060b0 <index2value>
 80061a4:	6178      	str	r0, [r7, #20]
  if (!ttisstring(o)) {
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d01e      	beq.n	80061f0 <lua_tolstring+0x60>
    if (!cvt2str(o)) {  /* not convertible? */
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	791b      	ldrb	r3, [r3, #4]
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d007      	beq.n	80061ce <lua_tolstring+0x3e>
      if (len != NULL) *len = 0;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <lua_tolstring+0x3a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
      lua_unlock(L);
      return NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e024      	b.n	8006218 <lua_tolstring+0x88>
    }
    luaO_tostring(L, o);
 80061ce:	6979      	ldr	r1, [r7, #20]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f005 fa0f 	bl	800b5f4 <luaO_tostring>
    luaC_checkGC(L);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd02      	ble.n	80061e6 <lua_tolstring+0x56>
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f004 fe39 	bl	800ae58 <luaC_step>
    o = index2value(L, idx);  /* previous call may reallocate the stack */
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ff61 	bl	80060b0 <index2value>
 80061ee:	6178      	str	r0, [r7, #20]
  }
  if (len != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00d      	beq.n	8006212 <lua_tolstring+0x82>
    *len = vslen(o);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	791b      	ldrb	r3, [r3, #4]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d103      	bne.n	8006208 <lua_tolstring+0x78>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	79db      	ldrb	r3, [r3, #7]
 8006206:	e002      	b.n	800620e <lua_tolstring+0x7e>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6013      	str	r3, [r2, #0]
  lua_unlock(L);
  return svalue(o);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3310      	adds	r3, #16
}
 8006218:	4618      	mov	r0, r3
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <lua_setwarnf>:
  G(L)->frealloc = f;
  lua_unlock(L);
}


void lua_setwarnf (lua_State *L, lua_WarnFunction f, void *ud) {
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  lua_lock(L);
  G(L)->ud_warn = ud;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  G(L)->warnf = f;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  lua_unlock(L);
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <l_alloc>:
  luaL_pushresult(&b);
  return lua_tostring(L, -1);
}


static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  (void)ud; (void)osize;  /* not used */
  if (nsize == 0) {
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <l_alloc+0x1e>
    free(ptr);
 8006260:	68b8      	ldr	r0, [r7, #8]
 8006262:	f015 f92b 	bl	801b4bc <free>
    return NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	e004      	b.n	8006274 <l_alloc+0x28>
  }
  else
    return realloc(ptr, nsize);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	68b8      	ldr	r0, [r7, #8]
 800626e:	f015 fd7b 	bl	801bd68 <realloc>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <panic>:


static int panic (lua_State *L) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  const char *msg = lua_tostring(L, -1);
 8006284:	2200      	movs	r2, #0
 8006286:	f04f 31ff 	mov.w	r1, #4294967295
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ff80 	bl	8006190 <lua_tolstring>
 8006290:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) msg = "error object is not a string";
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <panic+0x20>
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <panic+0x48>)
 800629a:	60fb      	str	r3, [r7, #12]
  lua_writestringerror("PANIC: unprotected error in call to Lua API (%s)\n",
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <panic+0x4c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4909      	ldr	r1, [pc, #36]	; (80062cc <panic+0x50>)
 80062a6:	4618      	mov	r0, r3
 80062a8:	f014 ff22 	bl	801b0f0 <fiprintf>
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <panic+0x4c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f014 fe34 	bl	801af20 <fflush>
                        msg);
  return 0;  /* return to Lua to abort */
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	0801e7c4 	.word	0x0801e7c4
 80062c8:	20000010 	.word	0x20000010
 80062cc:	0801e7e4 	.word	0x0801e7e4

080062d0 <checkcontrol>:

/*
** Check whether message is a control message. If so, execute the
** control or ignore it if unknown.
*/
static int checkcontrol (lua_State *L, const char *message, int tocont) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  if (tocont || *(message++) != '@')  /* not a control message? */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <checkcontrol+0x1e>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	60ba      	str	r2, [r7, #8]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d001      	beq.n	80062f2 <checkcontrol+0x22>
    return 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e019      	b.n	8006326 <checkcontrol+0x56>
  else {
    if (strcmp(message, "off") == 0)
 80062f2:	490f      	ldr	r1, [pc, #60]	; (8006330 <checkcontrol+0x60>)
 80062f4:	68b8      	ldr	r0, [r7, #8]
 80062f6:	f7f9 ffc9 	bl	800028c <strcmp>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <checkcontrol+0x3c>
      lua_setwarnf(L, warnfoff, L);  /* turn warnings off */
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	490c      	ldr	r1, [pc, #48]	; (8006334 <checkcontrol+0x64>)
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff ff8b 	bl	8006220 <lua_setwarnf>
 800630a:	e00b      	b.n	8006324 <checkcontrol+0x54>
    else if (strcmp(message, "on") == 0)
 800630c:	490a      	ldr	r1, [pc, #40]	; (8006338 <checkcontrol+0x68>)
 800630e:	68b8      	ldr	r0, [r7, #8]
 8006310:	f7f9 ffbc 	bl	800028c <strcmp>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <checkcontrol+0x54>
      lua_setwarnf(L, warnfon, L);   /* turn warnings on */
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4907      	ldr	r1, [pc, #28]	; (800633c <checkcontrol+0x6c>)
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f7ff ff7e 	bl	8006220 <lua_setwarnf>
    return 1;  /* it was a control message */
 8006324:	2301      	movs	r3, #1
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	0801e818 	.word	0x0801e818
 8006334:	08006341 	.word	0x08006341
 8006338:	0801e81c 	.word	0x0801e81c
 800633c:	080063d5 	.word	0x080063d5

08006340 <warnfoff>:


static void warnfoff (void *ud, const char *message, int tocont) {
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  checkcontrol((lua_State *)ud, message, tocont);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff ffbd 	bl	80062d0 <checkcontrol>
}
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <warnfcont>:

/*
** Writes the message and handle 'tocont', finishing the message
** if needed and setting the next warn function.
*/
static void warnfcont (void *ud, const char *message, int tocont) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  lua_State *L = (lua_State *)ud;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	617b      	str	r3, [r7, #20]
  lua_writestringerror("%s", message);  /* write message */
 8006370:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <warnfcont+0x68>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	4619      	mov	r1, r3
 8006378:	68b8      	ldr	r0, [r7, #8]
 800637a:	f014 ff71 	bl	801b260 <fputs>
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <warnfcont+0x68>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4618      	mov	r0, r3
 8006386:	f014 fdcb 	bl	801af20 <fflush>
  if (tocont)  /* not the last part? */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <warnfcont+0x3c>
    lua_setwarnf(L, warnfcont, L);  /* to be continued */
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	490e      	ldr	r1, [pc, #56]	; (80063cc <warnfcont+0x6c>)
 8006394:	6978      	ldr	r0, [r7, #20]
 8006396:	f7ff ff43 	bl	8006220 <lua_setwarnf>
  else {  /* last part */
    lua_writestringerror("%s", "\n");  /* finish message with end-of-line */
    lua_setwarnf(L, warnfon, L);  /* next call is a new message */
  }
}
 800639a:	e011      	b.n	80063c0 <warnfcont+0x60>
    lua_writestringerror("%s", "\n");  /* finish message with end-of-line */
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <warnfcont+0x68>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	4619      	mov	r1, r3
 80063a4:	200a      	movs	r0, #10
 80063a6:	f014 feed 	bl	801b184 <fputc>
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <warnfcont+0x68>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f014 fdb5 	bl	801af20 <fflush>
    lua_setwarnf(L, warnfon, L);  /* next call is a new message */
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4905      	ldr	r1, [pc, #20]	; (80063d0 <warnfcont+0x70>)
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	f7ff ff30 	bl	8006220 <lua_setwarnf>
}
 80063c0:	bf00      	nop
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20000010 	.word	0x20000010
 80063cc:	08006361 	.word	0x08006361
 80063d0:	080063d5 	.word	0x080063d5

080063d4 <warnfon>:


static void warnfon (void *ud, const char *message, int tocont) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  if (checkcontrol((lua_State *)ud, message, tocont))  /* control message? */
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7ff ff73 	bl	80062d0 <checkcontrol>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d113      	bne.n	8006418 <warnfon+0x44>
    return;  /* nothing else to be done */
  lua_writestringerror("%s", "Lua warning: ");  /* start a new warning */
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <warnfon+0x4c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	220d      	movs	r2, #13
 80063f8:	2101      	movs	r1, #1
 80063fa:	480a      	ldr	r0, [pc, #40]	; (8006424 <warnfon+0x50>)
 80063fc:	f014 ffb8 	bl	801b370 <fwrite>
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <warnfon+0x4c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	4618      	mov	r0, r3
 8006408:	f014 fd8a 	bl	801af20 <fflush>
  warnfcont(ud, message, tocont);  /* finish processing */
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff ffa5 	bl	8006360 <warnfcont>
 8006416:	e000      	b.n	800641a <warnfon+0x46>
    return;  /* nothing else to be done */
 8006418:	bf00      	nop
}
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000010 	.word	0x20000010
 8006424:	0801e820 	.word	0x0801e820

08006428 <luaL_newstate>:


LUALIB_API lua_State *luaL_newstate (void) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
  lua_State *L = lua_newstate(l_alloc, NULL);
 800642e:	2100      	movs	r1, #0
 8006430:	480c      	ldr	r0, [pc, #48]	; (8006464 <luaL_newstate+0x3c>)
 8006432:	f005 feef 	bl	800c214 <lua_newstate>
 8006436:	6078      	str	r0, [r7, #4]
  if (l_likely(L)) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf14      	ite	ne
 800643e:	2301      	movne	r3, #1
 8006440:	2300      	moveq	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <luaL_newstate+0x32>
    lua_atpanic(L, &panic);
 8006448:	4907      	ldr	r1, [pc, #28]	; (8006468 <luaL_newstate+0x40>)
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fe8a 	bl	8006164 <lua_atpanic>
    lua_setwarnf(L, warnfoff, L);  /* default is warnings off */
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	4906      	ldr	r1, [pc, #24]	; (800646c <luaL_newstate+0x44>)
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fee3 	bl	8006220 <lua_setwarnf>
  }
  return L;
 800645a:	687b      	ldr	r3, [r7, #4]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	0800624d 	.word	0x0800624d
 8006468:	0800627d 	.word	0x0800627d
 800646c:	08006341 	.word	0x08006341

08006470 <currentpc>:

static const char *funcnamefromcall (lua_State *L, CallInfo *ci,
                                                   const char **name);


static int currentpc (CallInfo *ci) {
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  lua_assert(isLua(ci));
  return pcRel(ci->u.l.savedpc, ci_func(ci)->p);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	109b      	asrs	r3, r3, #2
 800648a:	3b01      	subs	r3, #1
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <getbaseline>:
** The assertion that the estimate is a lower bound for the correct base
** is valid as long as the debug info has been generated with the same
** value for MAXIWTHABS or smaller. (Previous releases use a little
** smaller value.)
*/
static int getbaseline (const Proto *f, int pc, int *basepc) {
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  if (f->sizeabslineinfo == 0 || pc < f->abslineinfo[0].pc) {
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <getbaseline+0x20>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	da06      	bge.n	80064c6 <getbaseline+0x2e>
    *basepc = -1;  /* start from the beginning */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f04f 32ff 	mov.w	r2, #4294967295
 80064be:	601a      	str	r2, [r3, #0]
    return f->linedefined;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	e025      	b.n	8006512 <getbaseline+0x7a>
  }
  else {
    int i = cast_uint(pc) / MAXIWTHABS - 1;  /* get an estimate */
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	09db      	lsrs	r3, r3, #7
 80064ca:	3b01      	subs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
    /* estimate must be a lower bound of the correct base */
    lua_assert(i < 0 ||
              (i < f->sizeabslineinfo && f->abslineinfo[i].pc <= pc));
    while (i + 1 < f->sizeabslineinfo && pc >= f->abslineinfo[i + 1].pc)
 80064ce:	e002      	b.n	80064d6 <getbaseline+0x3e>
      i++;  /* low estimate; adjust it */
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3301      	adds	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
    while (i + 1 < f->sizeabslineinfo && pc >= f->abslineinfo[i + 1].pc)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	429a      	cmp	r2, r3
 80064e0:	da09      	bge.n	80064f6 <getbaseline+0x5e>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	3301      	adds	r3, #1
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	4413      	add	r3, r2
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	daec      	bge.n	80064d0 <getbaseline+0x38>
    *basepc = f->abslineinfo[i].pc;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	601a      	str	r2, [r3, #0]
    return f->abslineinfo[i].line;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4413      	add	r3, r2
 8006510:	685b      	ldr	r3, [r3, #4]
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <luaG_getfuncline>:
/*
** Get the line corresponding to instruction 'pc' in function 'f';
** first gets a base line and from there does the increments until
** the desired instruction.
*/
int luaG_getfuncline (const Proto *f, int pc) {
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  if (f->lineinfo == NULL)  /* no debug information? */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <luaG_getfuncline+0x18>
    return -1;
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
 8006534:	e019      	b.n	800656a <luaG_getfuncline+0x4c>
  else {
    int basepc;
    int baseline = getbaseline(f, pc, &basepc);
 8006536:	f107 0308 	add.w	r3, r7, #8
 800653a:	461a      	mov	r2, r3
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ffaa 	bl	8006498 <getbaseline>
 8006544:	60f8      	str	r0, [r7, #12]
    while (basepc++ < pc) {  /* walk until given instruction */
 8006546:	e009      	b.n	800655c <luaG_getfuncline+0x3e>
      lua_assert(f->lineinfo[basepc] != ABSLINEINFO);
      baseline += f->lineinfo[basepc];  /* correct line */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	4413      	add	r3, r2
 8006550:	f993 3000 	ldrsb.w	r3, [r3]
 8006554:	461a      	mov	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4413      	add	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
    while (basepc++ < pc) {  /* walk until given instruction */
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	60ba      	str	r2, [r7, #8]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	dcef      	bgt.n	8006548 <luaG_getfuncline+0x2a>
    }
    return baseline;
 8006568:	68fb      	ldr	r3, [r7, #12]
  }
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <getcurrentline>:


static int getcurrentline (CallInfo *ci) {
 8006572:	b590      	push	{r4, r7, lr}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  return luaG_getfuncline(ci_func(ci)->p, currentpc(ci));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68dc      	ldr	r4, [r3, #12]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff ff74 	bl	8006470 <currentpc>
 8006588:	4603      	mov	r3, r0
 800658a:	4619      	mov	r1, r3
 800658c:	4620      	mov	r0, r4
 800658e:	f7ff ffc6 	bl	800651e <luaG_getfuncline>
 8006592:	4603      	mov	r3, r0
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	bd90      	pop	{r4, r7, pc}

0800659c <upvalname>:
  lua_unlock(L);
  return status;
}


static const char *upvalname (const Proto *p, int uv) {
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  TString *s = check_exp(uv < p->sizeupvalues, p->upvalues[uv].name);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4413      	add	r3, r2
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]
  if (s == NULL) return "?";
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <upvalname+0x22>
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <upvalname+0x34>)
 80065bc:	e001      	b.n	80065c2 <upvalname+0x26>
  else return getstr(s);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3310      	adds	r3, #16
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	0801e89c 	.word	0x0801e89c

080065d4 <findvararg>:


static const char *findvararg (CallInfo *ci, int n, StkId *pos) {
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  if (clLvalue(s2v(ci->func))->p->is_vararg) {
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	79db      	ldrb	r3, [r3, #7]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d015      	beq.n	800661a <findvararg+0x46>
    int nextra = ci->u.l.nextraargs;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	617b      	str	r3, [r7, #20]
    if (n >= -nextra) {  /* 'n' is negative */
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	425b      	negs	r3, r3
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	db0d      	blt.n	800661a <findvararg+0x46>
      *pos = ci->func - nextra - (n + 1);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	6979      	ldr	r1, [r7, #20]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4419      	add	r1, r3
 8006608:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800660c:	1a5b      	subs	r3, r3, r1
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	441a      	add	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
      return "(vararg)";  /* generic name for any vararg */
 8006616:	4b04      	ldr	r3, [pc, #16]	; (8006628 <findvararg+0x54>)
 8006618:	e000      	b.n	800661c <findvararg+0x48>
    }
  }
  return NULL;  /* no such vararg */
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	0801e8a0 	.word	0x0801e8a0

0800662c <luaG_findlocal>:


const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n, StkId *pos) {
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b089      	sub	sp, #36	; 0x24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  StkId base = ci->func + 1;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	61bb      	str	r3, [r7, #24]
  const char *name = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
  if (isLua(ci)) {
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d117      	bne.n	8006682 <luaG_findlocal+0x56>
    if (n < 0)  /* access to vararg values? */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	da06      	bge.n	8006666 <luaG_findlocal+0x3a>
      return findvararg(ci, n, pos);
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	68b8      	ldr	r0, [r7, #8]
 800665e:	f7ff ffb9 	bl	80065d4 <findvararg>
 8006662:	4603      	mov	r3, r0
 8006664:	e041      	b.n	80066ea <luaG_findlocal+0xbe>
    else
      name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68dc      	ldr	r4, [r3, #12]
 800666e:	68b8      	ldr	r0, [r7, #8]
 8006670:	f7ff fefe 	bl	8006470 <currentpc>
 8006674:	4603      	mov	r3, r0
 8006676:	461a      	mov	r2, r3
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4620      	mov	r0, r4
 800667c:	f002 f901 	bl	8008882 <luaF_getlocalname>
 8006680:	61f8      	str	r0, [r7, #28]
  }
  if (name == NULL) {  /* no 'standard' name? */
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d123      	bne.n	80066d0 <luaG_findlocal+0xa4>
    StkId limit = (ci == L->ci) ? L->top : ci->next->func;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d102      	bne.n	8006698 <luaG_findlocal+0x6c>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	e002      	b.n	800669e <luaG_findlocal+0x72>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	617b      	str	r3, [r7, #20]
    if (limit - base >= n && n > 0) {  /* is 'n' inside 'ci' stack? */
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	10db      	asrs	r3, r3, #3
 80066a8:	461a      	mov	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	dc0d      	bgt.n	80066cc <luaG_findlocal+0xa0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	dd0a      	ble.n	80066cc <luaG_findlocal+0xa0>
      /* generic name for any valid slot */
      name = isLua(ci) ? "(temporary)" : "(C temporary)";
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <luaG_findlocal+0x9a>
 80066c2:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <luaG_findlocal+0xc8>)
 80066c4:	e000      	b.n	80066c8 <luaG_findlocal+0x9c>
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <luaG_findlocal+0xcc>)
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e001      	b.n	80066d0 <luaG_findlocal+0xa4>
    }
    else
      return NULL;  /* no name */
 80066cc:	2300      	movs	r3, #0
 80066ce:	e00c      	b.n	80066ea <luaG_findlocal+0xbe>
  }
  if (pos)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d008      	beq.n	80066e8 <luaG_findlocal+0xbc>
    *pos = base + (n - 1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80066dc:	3b01      	subs	r3, #1
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	441a      	add	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	601a      	str	r2, [r3, #0]
  return name;
 80066e8:	69fb      	ldr	r3, [r7, #28]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3724      	adds	r7, #36	; 0x24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd90      	pop	{r4, r7, pc}
 80066f2:	bf00      	nop
 80066f4:	0801e8ac 	.word	0x0801e8ac
 80066f8:	0801e8b8 	.word	0x0801e8b8

080066fc <kname>:


/*
** Find a "name" for the constant 'c'.
*/
static void kname (const Proto *p, int c, const char **name) {
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  TValue *kvalue = &p->k[c];
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
  *name = (ttisstring(kvalue)) ? svalue(kvalue) : "?";
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	791b      	ldrb	r3, [r3, #4]
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	2b04      	cmp	r3, #4
 800671e:	d103      	bne.n	8006728 <kname+0x2c>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3310      	adds	r3, #16
 8006726:	e000      	b.n	800672a <kname+0x2e>
 8006728:	4b04      	ldr	r3, [pc, #16]	; (800673c <kname+0x40>)
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6013      	str	r3, [r2, #0]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	0801e89c 	.word	0x0801e89c

08006740 <rname>:


/*
** Find a "name" for the register 'c'.
*/
static void rname (const Proto *p, int pc, int c, const char **name) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
  const char *what = getobjname(p, pc, c, name); /* search for 'c' */
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f91d 	bl	8006994 <getobjname>
 800675a:	6178      	str	r0, [r7, #20]
  if (!(what && *what == 'c'))  /* did not find a constant name? */
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <rname+0x2a>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b63      	cmp	r3, #99	; 0x63
 8006768:	d002      	beq.n	8006770 <rname+0x30>
    *name = "?";
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	4a02      	ldr	r2, [pc, #8]	; (8006778 <rname+0x38>)
 800676e:	601a      	str	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	0801e89c 	.word	0x0801e89c

0800677c <rkname>:


/*
** Find a "name" for a 'C' value in an RK instruction.
*/
static void rkname (const Proto *p, int pc, Instruction i, const char **name) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
  int c = GETARG_C(i);  /* key index */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0e1b      	lsrs	r3, r3, #24
 800678e:	617b      	str	r3, [r7, #20]
  if (GETARG_k(i))  /* is 'c' a constant? */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0bdb      	lsrs	r3, r3, #15
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <rkname+0x2c>
    kname(p, c, name);
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	6979      	ldr	r1, [r7, #20]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7ff ffab 	bl	80066fc <kname>
  else  /* 'c' is a register */
    rname(p, pc, c, name);
}
 80067a6:	e005      	b.n	80067b4 <rkname+0x38>
    rname(p, pc, c, name);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff ffc6 	bl	8006740 <rname>
}
 80067b4:	bf00      	nop
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <filterpc>:


static int filterpc (int pc, int jmptarget) {
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  if (pc < jmptarget)  /* is code conditional (inside a jump)? */
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	da02      	bge.n	80067d4 <filterpc+0x18>
    return -1;  /* cannot know who sets that register */
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295
 80067d2:	e000      	b.n	80067d6 <filterpc+0x1a>
  else return pc;  /* current position sets that register */
 80067d4:	687b      	ldr	r3, [r7, #4]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <findsetreg>:


/*
** Try to find last instruction before 'lastpc' that modified register 'reg'.
*/
static int findsetreg (const Proto *p, int lastpc, int reg) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08e      	sub	sp, #56	; 0x38
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  int pc;
  int setreg = -1;  /* keep last instruction that changed 'reg' */
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	633b      	str	r3, [r7, #48]	; 0x30
  int jmptarget = 0;  /* any code before this address is conditional */
 80067f6:	2300      	movs	r3, #0
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (testMMMode(GET_OPCODE(p->code[lastpc])))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680c:	4a46      	ldr	r2, [pc, #280]	; (8006928 <findsetreg+0x144>)
 800680e:	5cd3      	ldrb	r3, [r2, r3]
 8006810:	b25b      	sxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	da02      	bge.n	800681c <findsetreg+0x38>
    lastpc--;  /* previous instruction was not actually executed */
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3b01      	subs	r3, #1
 800681a:	60bb      	str	r3, [r7, #8]
  for (pc = 0; pc < lastpc; pc++) {
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
 8006820:	e079      	b.n	8006916 <findsetreg+0x132>
    Instruction i = p->code[pc];
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
    OpCode op = GET_OPCODE(i);
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int a = GETARG_A(i);
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	09db      	lsrs	r3, r3, #7
 8006840:	b2db      	uxtb	r3, r3
 8006842:	61fb      	str	r3, [r7, #28]
    int change;  /* true if current instruction changed 'reg' */
    switch (op) {
 8006844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006848:	2b4c      	cmp	r3, #76	; 0x4c
 800684a:	d01d      	beq.n	8006888 <findsetreg+0xa4>
 800684c:	2b4c      	cmp	r3, #76	; 0x4c
 800684e:	dc46      	bgt.n	80068de <findsetreg+0xfa>
 8006850:	2b45      	cmp	r3, #69	; 0x45
 8006852:	dc44      	bgt.n	80068de <findsetreg+0xfa>
 8006854:	2b44      	cmp	r3, #68	; 0x44
 8006856:	da21      	bge.n	800689c <findsetreg+0xb8>
 8006858:	2b08      	cmp	r3, #8
 800685a:	d002      	beq.n	8006862 <findsetreg+0x7e>
 800685c:	2b38      	cmp	r3, #56	; 0x38
 800685e:	d026      	beq.n	80068ae <findsetreg+0xca>
 8006860:	e03d      	b.n	80068de <findsetreg+0xfa>
      case OP_LOADNIL: {  /* set registers from 'a' to 'a+b' */
        int b = GETARG_B(i);
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	b2db      	uxtb	r3, r3
 8006868:	613b      	str	r3, [r7, #16]
        change = (a <= reg && reg <= a + b);
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	dc07      	bgt.n	8006882 <findsetreg+0x9e>
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4413      	add	r3, r2
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	dc01      	bgt.n	8006882 <findsetreg+0x9e>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <findsetreg+0xa0>
 8006882:	2300      	movs	r3, #0
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8006886:	e03b      	b.n	8006900 <findsetreg+0x11c>
      }
      case OP_TFORCALL: {  /* affect all regs above its base */
        change = (reg >= a + 2);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3301      	adds	r3, #1
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	429a      	cmp	r2, r3
 8006890:	bfcc      	ite	gt
 8006892:	2301      	movgt	r3, #1
 8006894:	2300      	movle	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800689a:	e031      	b.n	8006900 <findsetreg+0x11c>
      }
      case OP_CALL:
      case OP_TAILCALL: {  /* affect all registers above base */
        change = (reg >= a);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	bfac      	ite	ge
 80068a4:	2301      	movge	r3, #1
 80068a6:	2300      	movlt	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80068ac:	e028      	b.n	8006900 <findsetreg+0x11c>
      }
      case OP_JMP: {  /* doesn't change registers, but changes 'jmptarget' */
        int b = GETARG_sJ(i);
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	09db      	lsrs	r3, r3, #7
 80068b2:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80068b6:	3301      	adds	r3, #1
 80068b8:	61bb      	str	r3, [r7, #24]
        int dest = pc + 1 + b;
 80068ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068bc:	3301      	adds	r3, #1
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4413      	add	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
        /* jump does not skip 'lastpc' and is larger than current one? */
        if (dest <= lastpc && dest > jmptarget)
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	dc05      	bgt.n	80068d8 <findsetreg+0xf4>
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	429a      	cmp	r2, r3
 80068d2:	dd01      	ble.n	80068d8 <findsetreg+0xf4>
          jmptarget = dest;  /* update 'jmptarget' */
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        change = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80068dc:	e010      	b.n	8006900 <findsetreg+0x11c>
      }
      default:  /* any instruction that sets A */
        change = (testAMode(op) && reg == a);
 80068de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068e2:	4a11      	ldr	r2, [pc, #68]	; (8006928 <findsetreg+0x144>)
 80068e4:	5cd3      	ldrb	r3, [r2, r3]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <findsetreg+0x116>
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d101      	bne.n	80068fa <findsetreg+0x116>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <findsetreg+0x118>
 80068fa:	2300      	movs	r3, #0
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80068fe:	bf00      	nop
    }
    if (change)
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <findsetreg+0x12c>
      setreg = filterpc(pc, jmptarget);
 8006906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006908:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800690a:	f7ff ff57 	bl	80067bc <filterpc>
 800690e:	6338      	str	r0, [r7, #48]	; 0x30
  for (pc = 0; pc < lastpc; pc++) {
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	3301      	adds	r3, #1
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
 8006916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	db81      	blt.n	8006822 <findsetreg+0x3e>
  }
  return setreg;
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006920:	4618      	mov	r0, r3
 8006922:	3738      	adds	r7, #56	; 0x38
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	0801f4b8 	.word	0x0801f4b8

0800692c <gxf>:

/*
** Check whether table being indexed by instruction 'i' is the
** environment '_ENV'
*/
static const char *gxf (const Proto *p, int pc, Instruction i, int isup) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
  int t = GETARG_B(i);  /* table index */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	0c1b      	lsrs	r3, r3, #16
 800693e:	b2db      	uxtb	r3, r3
 8006940:	617b      	str	r3, [r7, #20]
  const char *name;  /* name of indexed variable */
  if (isup)  /* is an upvalue? */
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d006      	beq.n	8006956 <gxf+0x2a>
    name = upvalname(p, t);
 8006948:	6979      	ldr	r1, [r7, #20]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fe26 	bl	800659c <upvalname>
 8006950:	4603      	mov	r3, r0
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	e006      	b.n	8006964 <gxf+0x38>
  else
    getobjname(p, pc, t, &name);
 8006956:	f107 0310 	add.w	r3, r7, #16
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 f818 	bl	8006994 <getobjname>
  return (name && strcmp(name, LUA_ENV) == 0) ? "global" : "field";
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <gxf+0x52>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4906      	ldr	r1, [pc, #24]	; (8006988 <gxf+0x5c>)
 800696e:	4618      	mov	r0, r3
 8006970:	f7f9 fc8c 	bl	800028c <strcmp>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <gxf+0x52>
 800697a:	4b04      	ldr	r3, [pc, #16]	; (800698c <gxf+0x60>)
 800697c:	e000      	b.n	8006980 <gxf+0x54>
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <gxf+0x64>)
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	0801e8e8 	.word	0x0801e8e8
 800698c:	0801e8f0 	.word	0x0801e8f0
 8006990:	0801e8f8 	.word	0x0801e8f8

08006994 <getobjname>:


static const char *getobjname (const Proto *p, int lastpc, int reg,
                               const char **name) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b08c      	sub	sp, #48	; 0x30
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
  int pc;
  *name = luaF_getlocalname(p, reg + 1, lastpc);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3301      	adds	r3, #1
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4619      	mov	r1, r3
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f001 ff69 	bl	8008882 <luaF_getlocalname>
 80069b0:	4602      	mov	r2, r0
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	601a      	str	r2, [r3, #0]
  if (*name)  /* is a local? */
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <getobjname+0x2e>
    return "local";
 80069be:	4b6d      	ldr	r3, [pc, #436]	; (8006b74 <getobjname+0x1e0>)
 80069c0:	e0d4      	b.n	8006b6c <getobjname+0x1d8>
  /* else try symbolic execution */
  pc = findsetreg(p, lastpc, reg);
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff ff0c 	bl	80067e4 <findsetreg>
 80069cc:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (pc != -1) {  /* could find instruction? */
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d4:	f000 80c2 	beq.w	8006b5c <getobjname+0x1c8>
    Instruction i = p->code[pc];
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	62bb      	str	r3, [r7, #40]	; 0x28
    OpCode op = GET_OPCODE(i);
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    switch (op) {
 80069f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069f6:	2b14      	cmp	r3, #20
 80069f8:	f200 80b2 	bhi.w	8006b60 <getobjname+0x1cc>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <getobjname+0x70>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a59 	.word	0x08006a59
 8006a08:	08006b61 	.word	0x08006b61
 8006a0c:	08006b61 	.word	0x08006b61
 8006a10:	08006b01 	.word	0x08006b01
 8006a14:	08006b01 	.word	0x08006b01
 8006a18:	08006b61 	.word	0x08006b61
 8006a1c:	08006b61 	.word	0x08006b61
 8006a20:	08006b61 	.word	0x08006b61
 8006a24:	08006b61 	.word	0x08006b61
 8006a28:	08006ae9 	.word	0x08006ae9
 8006a2c:	08006b61 	.word	0x08006b61
 8006a30:	08006a7d 	.word	0x08006a7d
 8006a34:	08006a9d 	.word	0x08006a9d
 8006a38:	08006abf 	.word	0x08006abf
 8006a3c:	08006ac9 	.word	0x08006ac9
 8006a40:	08006b61 	.word	0x08006b61
 8006a44:	08006b61 	.word	0x08006b61
 8006a48:	08006b61 	.word	0x08006b61
 8006a4c:	08006b61 	.word	0x08006b61
 8006a50:	08006b61 	.word	0x08006b61
 8006a54:	08006b4d 	.word	0x08006b4d
      case OP_MOVE: {
        int b = GETARG_B(i);  /* move from 'b' to 'a' */
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	613b      	str	r3, [r7, #16]
        if (b < GETARG_A(i))
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	09db      	lsrs	r3, r3, #7
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	da7b      	bge.n	8006b64 <getobjname+0x1d0>
          return getobjname(p, pc, b, name);  /* get name for 'b' */
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff ff8e 	bl	8006994 <getobjname>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	e077      	b.n	8006b6c <getobjname+0x1d8>
        break;
      }
      case OP_GETTABUP: {
        int k = GETARG_C(i);  /* key index */
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	0e1b      	lsrs	r3, r3, #24
 8006a80:	61bb      	str	r3, [r7, #24]
        kname(p, k, name);
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	69b9      	ldr	r1, [r7, #24]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff fe38 	bl	80066fc <kname>
        return gxf(p, pc, i, 1);
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff ff4a 	bl	800692c <gxf>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	e067      	b.n	8006b6c <getobjname+0x1d8>
      }
      case OP_GETTABLE: {
        int k = GETARG_C(i);  /* key index */
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	0e1b      	lsrs	r3, r3, #24
 8006aa0:	61fb      	str	r3, [r7, #28]
        rname(p, pc, k, name);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7ff fe49 	bl	8006740 <rname>
        return gxf(p, pc, i, 0);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7ff ff39 	bl	800692c <gxf>
 8006aba:	4603      	mov	r3, r0
 8006abc:	e056      	b.n	8006b6c <getobjname+0x1d8>
      }
      case OP_GETI: {
        *name = "integer index";
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	4a2d      	ldr	r2, [pc, #180]	; (8006b78 <getobjname+0x1e4>)
 8006ac2:	601a      	str	r2, [r3, #0]
        return "field";
 8006ac4:	4b2d      	ldr	r3, [pc, #180]	; (8006b7c <getobjname+0x1e8>)
 8006ac6:	e051      	b.n	8006b6c <getobjname+0x1d8>
      }
      case OP_GETFIELD: {
        int k = GETARG_C(i);  /* key index */
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	0e1b      	lsrs	r3, r3, #24
 8006acc:	623b      	str	r3, [r7, #32]
        kname(p, k, name);
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	6a39      	ldr	r1, [r7, #32]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fe12 	bl	80066fc <kname>
        return gxf(p, pc, i, 0);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006adc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff ff24 	bl	800692c <gxf>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	e041      	b.n	8006b6c <getobjname+0x1d8>
      }
      case OP_GETUPVAL: {
        *name = upvalname(p, GETARG_B(i));
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	0c1b      	lsrs	r3, r3, #16
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	4619      	mov	r1, r3
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff fd53 	bl	800659c <upvalname>
 8006af6:	4602      	mov	r2, r0
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]
        return "upvalue";
 8006afc:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <getobjname+0x1ec>)
 8006afe:	e035      	b.n	8006b6c <getobjname+0x1d8>
      }
      case OP_LOADK:
      case OP_LOADKX: {
        int b = (op == OP_LOADK) ? GETARG_Bx(i)
                                 : GETARG_Ax(p->code[pc + 1]);
 8006b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d102      	bne.n	8006b0e <getobjname+0x17a>
        int b = (op == OP_LOADK) ? GETARG_Bx(i)
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	0bdb      	lsrs	r3, r3, #15
 8006b0c:	e007      	b.n	8006b1e <getobjname+0x18a>
                                 : GETARG_Ax(p->code[pc + 1]);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	3301      	adds	r3, #1
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	09db      	lsrs	r3, r3, #7
        int b = (op == OP_LOADK) ? GETARG_Bx(i)
 8006b1e:	617b      	str	r3, [r7, #20]
        if (ttisstring(&p->k[b])) {
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	791b      	ldrb	r3, [r3, #4]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d119      	bne.n	8006b68 <getobjname+0x1d4>
          *name = svalue(&p->k[b]);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f103 0210 	add.w	r2, r3, #16
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	601a      	str	r2, [r3, #0]
          return "constant";
 8006b48:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <getobjname+0x1f0>)
 8006b4a:	e00f      	b.n	8006b6c <getobjname+0x1d8>
        }
        break;
      }
      case OP_SELF: {
        rkname(p, pc, i, name);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fe12 	bl	800677c <rkname>
        return "method";
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <getobjname+0x1f4>)
 8006b5a:	e007      	b.n	8006b6c <getobjname+0x1d8>
      }
      default: break;  /* go through to return NULL */
    }
  }
 8006b5c:	bf00      	nop
 8006b5e:	e004      	b.n	8006b6a <getobjname+0x1d6>
      default: break;  /* go through to return NULL */
 8006b60:	bf00      	nop
 8006b62:	e002      	b.n	8006b6a <getobjname+0x1d6>
        break;
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <getobjname+0x1d6>
        break;
 8006b68:	bf00      	nop
  return NULL;  /* could not find reasonable name */
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3730      	adds	r7, #48	; 0x30
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	0801e900 	.word	0x0801e900
 8006b78:	0801e908 	.word	0x0801e908
 8006b7c:	0801e8f8 	.word	0x0801e8f8
 8006b80:	0801e918 	.word	0x0801e918
 8006b84:	0801e920 	.word	0x0801e920
 8006b88:	0801e92c 	.word	0x0801e92c

08006b8c <funcnamefromcode>:
** (Only works when function was called by a Lua function.)
** Returns what the name is (e.g., "for iterator", "method",
** "metamethod") and sets '*name' to point to the name.
*/
static const char *funcnamefromcode (lua_State *L, const Proto *p,
                                     int pc, const char **name) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
  TMS tm = (TMS)0;  /* (initial value avoids warnings) */
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	75fb      	strb	r3, [r7, #23]
  Instruction i = p->code[pc];  /* calling instruction */
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	613b      	str	r3, [r7, #16]
  switch (GET_OPCODE(i)) {
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb4:	3b0b      	subs	r3, #11
 8006bb6:	2b41      	cmp	r3, #65	; 0x41
 8006bb8:	f200 80b9 	bhi.w	8006d2e <funcnamefromcode+0x1a2>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <funcnamefromcode+0x38>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006ceb 	.word	0x08006ceb
 8006bc8:	08006ceb 	.word	0x08006ceb
 8006bcc:	08006ceb 	.word	0x08006ceb
 8006bd0:	08006ceb 	.word	0x08006ceb
 8006bd4:	08006cf1 	.word	0x08006cf1
 8006bd8:	08006cf1 	.word	0x08006cf1
 8006bdc:	08006cf1 	.word	0x08006cf1
 8006be0:	08006cf1 	.word	0x08006cf1
 8006be4:	08006d2f 	.word	0x08006d2f
 8006be8:	08006ceb 	.word	0x08006ceb
 8006bec:	08006d2f 	.word	0x08006d2f
 8006bf0:	08006d2f 	.word	0x08006d2f
 8006bf4:	08006d2f 	.word	0x08006d2f
 8006bf8:	08006d2f 	.word	0x08006d2f
 8006bfc:	08006d2f 	.word	0x08006d2f
 8006c00:	08006d2f 	.word	0x08006d2f
 8006c04:	08006d2f 	.word	0x08006d2f
 8006c08:	08006d2f 	.word	0x08006d2f
 8006c0c:	08006d2f 	.word	0x08006d2f
 8006c10:	08006d2f 	.word	0x08006d2f
 8006c14:	08006d2f 	.word	0x08006d2f
 8006c18:	08006d2f 	.word	0x08006d2f
 8006c1c:	08006d2f 	.word	0x08006d2f
 8006c20:	08006d2f 	.word	0x08006d2f
 8006c24:	08006d2f 	.word	0x08006d2f
 8006c28:	08006d2f 	.word	0x08006d2f
 8006c2c:	08006d2f 	.word	0x08006d2f
 8006c30:	08006d2f 	.word	0x08006d2f
 8006c34:	08006d2f 	.word	0x08006d2f
 8006c38:	08006d2f 	.word	0x08006d2f
 8006c3c:	08006d2f 	.word	0x08006d2f
 8006c40:	08006d2f 	.word	0x08006d2f
 8006c44:	08006d2f 	.word	0x08006d2f
 8006c48:	08006d2f 	.word	0x08006d2f
 8006c4c:	08006d2f 	.word	0x08006d2f
 8006c50:	08006cf7 	.word	0x08006cf7
 8006c54:	08006cf7 	.word	0x08006cf7
 8006c58:	08006cf7 	.word	0x08006cf7
 8006c5c:	08006cff 	.word	0x08006cff
 8006c60:	08006d05 	.word	0x08006d05
 8006c64:	08006d2f 	.word	0x08006d2f
 8006c68:	08006d0b 	.word	0x08006d0b
 8006c6c:	08006d11 	.word	0x08006d11
 8006c70:	08006d29 	.word	0x08006d29
 8006c74:	08006d2f 	.word	0x08006d2f
 8006c78:	08006d2f 	.word	0x08006d2f
 8006c7c:	08006d17 	.word	0x08006d17
 8006c80:	08006d1d 	.word	0x08006d1d
 8006c84:	08006d23 	.word	0x08006d23
 8006c88:	08006d2f 	.word	0x08006d2f
 8006c8c:	08006d2f 	.word	0x08006d2f
 8006c90:	08006d1d 	.word	0x08006d1d
 8006c94:	08006d23 	.word	0x08006d23
 8006c98:	08006d1d 	.word	0x08006d1d
 8006c9c:	08006d23 	.word	0x08006d23
 8006ca0:	08006d2f 	.word	0x08006d2f
 8006ca4:	08006d2f 	.word	0x08006d2f
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006ccd 	.word	0x08006ccd
 8006cb0:	08006d29 	.word	0x08006d29
 8006cb4:	08006d2f 	.word	0x08006d2f
 8006cb8:	08006d2f 	.word	0x08006d2f
 8006cbc:	08006d2f 	.word	0x08006d2f
 8006cc0:	08006d2f 	.word	0x08006d2f
 8006cc4:	08006d2f 	.word	0x08006d2f
 8006cc8:	08006ce1 	.word	0x08006ce1
    case OP_CALL:
    case OP_TAILCALL:
      return getobjname(p, pc, GETARG_A(i), name);  /* get function name */
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	09db      	lsrs	r3, r3, #7
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	68b8      	ldr	r0, [r7, #8]
 8006cd8:	f7ff fe5c 	bl	8006994 <getobjname>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	e033      	b.n	8006d48 <funcnamefromcode+0x1bc>
    case OP_TFORCALL: {  /* for iterator */
      *name = "for iterator";
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	4a1b      	ldr	r2, [pc, #108]	; (8006d50 <funcnamefromcode+0x1c4>)
 8006ce4:	601a      	str	r2, [r3, #0]
       return "for iterator";
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <funcnamefromcode+0x1c4>)
 8006ce8:	e02e      	b.n	8006d48 <funcnamefromcode+0x1bc>
    }
    /* other instructions can do calls through metamethods */
    case OP_SELF: case OP_GETTABUP: case OP_GETTABLE:
    case OP_GETI: case OP_GETFIELD:
      tm = TM_INDEX;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]
      break;
 8006cee:	e020      	b.n	8006d32 <funcnamefromcode+0x1a6>
    case OP_SETTABUP: case OP_SETTABLE: case OP_SETI: case OP_SETFIELD:
      tm = TM_NEWINDEX;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf4:	e01d      	b.n	8006d32 <funcnamefromcode+0x1a6>
    case OP_MMBIN: case OP_MMBINI: case OP_MMBINK: {
      tm = cast(TMS, GETARG_C(i));
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	0e1b      	lsrs	r3, r3, #24
 8006cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfc:	e019      	b.n	8006d32 <funcnamefromcode+0x1a6>
    }
    case OP_UNM: tm = TM_UNM; break;
 8006cfe:	2312      	movs	r3, #18
 8006d00:	75fb      	strb	r3, [r7, #23]
 8006d02:	e016      	b.n	8006d32 <funcnamefromcode+0x1a6>
    case OP_BNOT: tm = TM_BNOT; break;
 8006d04:	2313      	movs	r3, #19
 8006d06:	75fb      	strb	r3, [r7, #23]
 8006d08:	e013      	b.n	8006d32 <funcnamefromcode+0x1a6>
    case OP_LEN: tm = TM_LEN; break;
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	75fb      	strb	r3, [r7, #23]
 8006d0e:	e010      	b.n	8006d32 <funcnamefromcode+0x1a6>
    case OP_CONCAT: tm = TM_CONCAT; break;
 8006d10:	2316      	movs	r3, #22
 8006d12:	75fb      	strb	r3, [r7, #23]
 8006d14:	e00d      	b.n	8006d32 <funcnamefromcode+0x1a6>
    case OP_EQ: tm = TM_EQ; break;
 8006d16:	2305      	movs	r3, #5
 8006d18:	75fb      	strb	r3, [r7, #23]
 8006d1a:	e00a      	b.n	8006d32 <funcnamefromcode+0x1a6>
    /* no cases for OP_EQI and OP_EQK, as they don't call metamethods */
    case OP_LT: case OP_LTI: case OP_GTI: tm = TM_LT; break;
 8006d1c:	2314      	movs	r3, #20
 8006d1e:	75fb      	strb	r3, [r7, #23]
 8006d20:	e007      	b.n	8006d32 <funcnamefromcode+0x1a6>
    case OP_LE: case OP_LEI: case OP_GEI: tm = TM_LE; break;
 8006d22:	2315      	movs	r3, #21
 8006d24:	75fb      	strb	r3, [r7, #23]
 8006d26:	e004      	b.n	8006d32 <funcnamefromcode+0x1a6>
    case OP_CLOSE: case OP_RETURN: tm = TM_CLOSE; break;
 8006d28:	2318      	movs	r3, #24
 8006d2a:	75fb      	strb	r3, [r7, #23]
 8006d2c:	e001      	b.n	8006d32 <funcnamefromcode+0x1a6>
    default:
      return NULL;  /* cannot find a reasonable name */
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e00a      	b.n	8006d48 <funcnamefromcode+0x1bc>
  }
  *name = getstr(G(L)->tmname[tm]) + 2;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	7dfa      	ldrb	r2, [r7, #23]
 8006d38:	3226      	adds	r2, #38	; 0x26
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	3310      	adds	r3, #16
 8006d40:	1c9a      	adds	r2, r3, #2
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	601a      	str	r2, [r3, #0]
  return "metamethod";
 8006d46:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <funcnamefromcode+0x1c8>)
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	0801e934 	.word	0x0801e934
 8006d54:	0801e944 	.word	0x0801e944

08006d58 <funcnamefromcall>:

/*
** Try to find a name for a function based on how it was called.
*/
static const char *funcnamefromcall (lua_State *L, CallInfo *ci,
                                                   const char **name) {
 8006d58:	b590      	push	{r4, r7, lr}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  if (ci->callstatus & CIST_HOOKED) {  /* was it called inside a hook? */
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <funcnamefromcall+0x22>
    *name = "?";
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a14      	ldr	r2, [pc, #80]	; (8006dc4 <funcnamefromcall+0x6c>)
 8006d74:	601a      	str	r2, [r3, #0]
    return "hook";
 8006d76:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <funcnamefromcall+0x70>)
 8006d78:	e020      	b.n	8006dbc <funcnamefromcall+0x64>
  }
  else if (ci->callstatus & CIST_FIN) {  /* was it called as a finalizer? */
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <funcnamefromcall+0x38>
    *name = "__gc";
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a10      	ldr	r2, [pc, #64]	; (8006dcc <funcnamefromcall+0x74>)
 8006d8a:	601a      	str	r2, [r3, #0]
    return "metamethod";  /* report it as such */
 8006d8c:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <funcnamefromcall+0x78>)
 8006d8e:	e015      	b.n	8006dbc <funcnamefromcall+0x64>
  }
  else if (isLua(ci))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10e      	bne.n	8006dba <funcnamefromcall+0x62>
    return funcnamefromcode(L, ci_func(ci)->p, currentpc(ci), name);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68dc      	ldr	r4, [r3, #12]
 8006da4:	68b8      	ldr	r0, [r7, #8]
 8006da6:	f7ff fb63 	bl	8006470 <currentpc>
 8006daa:	4602      	mov	r2, r0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4621      	mov	r1, r4
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff feeb 	bl	8006b8c <funcnamefromcode>
 8006db6:	4603      	mov	r3, r0
 8006db8:	e000      	b.n	8006dbc <funcnamefromcall+0x64>
  else
    return NULL;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd90      	pop	{r4, r7, pc}
 8006dc4:	0801e89c 	.word	0x0801e89c
 8006dc8:	0801e950 	.word	0x0801e950
 8006dcc:	0801e958 	.word	0x0801e958
 8006dd0:	0801e944 	.word	0x0801e944

08006dd4 <isinstack>:
** Check whether pointer 'o' points to some value in the stack
** frame of the current function. Because 'o' may not point to a
** value in this stack, we cannot compare it with the region
** boundaries (undefined behaviour in ISO C).
*/
static int isinstack (CallInfo *ci, const TValue *o) {
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  StkId pos;
  for (pos = ci->func + 1; pos < ci->top; pos++) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e008      	b.n	8006dfa <isinstack+0x26>
    if (o == s2v(pos))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d101      	bne.n	8006df4 <isinstack+0x20>
      return 1;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e008      	b.n	8006e06 <isinstack+0x32>
  for (pos = ci->func + 1; pos < ci->top; pos++) {
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3308      	adds	r3, #8
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d3f1      	bcc.n	8006de8 <isinstack+0x14>
  }
  return 0;  /* not found */
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <getupvalname>:
** Checks whether value 'o' came from an upvalue. (That can only happen
** with instructions OP_GETTABUP/OP_SETTABUP, which operate directly on
** upvalues.)
*/
static const char *getupvalname (CallInfo *ci, const TValue *o,
                                 const char **name) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  LClosure *c = ci_func(ci);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	613b      	str	r3, [r7, #16]
  int i;
  for (i = 0; i < c->nupvalues; i++) {
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e016      	b.n	8006e5c <getupvalname+0x48>
    if (c->upvals[i]->v == o) {
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	3204      	adds	r2, #4
 8006e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d10a      	bne.n	8006e56 <getupvalname+0x42>
      *name = upvalname(c->p, i);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	6979      	ldr	r1, [r7, #20]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff fba8 	bl	800659c <upvalname>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]
      return "upvalue";
 8006e52:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <getupvalname+0x60>)
 8006e54:	e009      	b.n	8006e6a <getupvalname+0x56>
  for (i = 0; i < c->nupvalues; i++) {
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	799b      	ldrb	r3, [r3, #6]
 8006e60:	461a      	mov	r2, r3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	dbe2      	blt.n	8006e2e <getupvalname+0x1a>
    }
  }
  return NULL;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	0801e918 	.word	0x0801e918

08006e78 <formatvarinfo>:


static const char *formatvarinfo (lua_State *L, const char *kind,
                                                const char *name) {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  if (kind == NULL)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <formatvarinfo+0x16>
    return "";  /* no information */
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <formatvarinfo+0x2c>)
 8006e8c:	e006      	b.n	8006e9c <formatvarinfo+0x24>
  else
    return luaO_pushfstring(L, " (%s '%s')", kind, name);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	4905      	ldr	r1, [pc, #20]	; (8006ea8 <formatvarinfo+0x30>)
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f004 fe59 	bl	800bb4c <luaO_pushfstring>
 8006e9a:	4603      	mov	r3, r0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	0801e8e4 	.word	0x0801e8e4
 8006ea8:	0801e960 	.word	0x0801e960

08006eac <varinfo>:

/*
** Build a string with a "description" for the value 'o', such as
** "variable 'x'" or "upvalue 'y'".
*/
static const char *varinfo (lua_State *L, const TValue *o) {
 8006eac:	b590      	push	{r4, r7, lr}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	613b      	str	r3, [r7, #16]
  const char *name = NULL;  /* to avoid warnings */
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]
  const char *kind = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
  if (isLua(ci)) {
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d126      	bne.n	8006f1e <varinfo+0x72>
    kind = getupvalname(ci, o, &name);  /* check whether 'o' is an upvalue */
 8006ed0:	f107 030c 	add.w	r3, r7, #12
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6938      	ldr	r0, [r7, #16]
 8006eda:	f7ff ff9b 	bl	8006e14 <getupvalname>
 8006ede:	6178      	str	r0, [r7, #20]
    if (!kind && isinstack(ci, o))  /* no? try a register */
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d11b      	bne.n	8006f1e <varinfo+0x72>
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6938      	ldr	r0, [r7, #16]
 8006eea:	f7ff ff73 	bl	8006dd4 <isinstack>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d014      	beq.n	8006f1e <varinfo+0x72>
      kind = getobjname(ci_func(ci)->p, currentpc(ci),
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68dc      	ldr	r4, [r3, #12]
 8006efc:	6938      	ldr	r0, [r7, #16]
 8006efe:	f7ff fab7 	bl	8006470 <currentpc>
 8006f02:	4601      	mov	r1, r0
                        cast_int(cast(StkId, o) - (ci->func + 1)), &name);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	1ad3      	subs	r3, r2, r3
      kind = getobjname(ci_func(ci)->p, currentpc(ci),
 8006f0e:	10db      	asrs	r3, r3, #3
 8006f10:	461a      	mov	r2, r3
 8006f12:	f107 030c 	add.w	r3, r7, #12
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff fd3c 	bl	8006994 <getobjname>
 8006f1c:	6178      	str	r0, [r7, #20]
  }
  return formatvarinfo(L, kind, name);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	461a      	mov	r2, r3
 8006f22:	6979      	ldr	r1, [r7, #20]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff ffa7 	bl	8006e78 <formatvarinfo>
 8006f2a:	4603      	mov	r3, r0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd90      	pop	{r4, r7, pc}

08006f34 <typeerror>:

/*
** Raise a type error
*/
static l_noret typeerror (lua_State *L, const TValue *o, const char *op,
                          const char *extra) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
  const char *t = luaT_objtypename(L, o);
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f007 f857 	bl	800dff8 <luaT_objtypename>
 8006f4a:	6178      	str	r0, [r7, #20]
  luaG_runerror(L, "attempt to %s a %s value%s", op, t, extra);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4901      	ldr	r1, [pc, #4]	; (8006f5c <typeerror+0x28>)
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f931 	bl	80071be <luaG_runerror>
 8006f5c:	0801e96c 	.word	0x0801e96c

08006f60 <luaG_typeerror>:

/*
** Raise a type error with "standard" information about the faulty
** object 'o' (using 'varinfo').
*/
l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  typeerror(L, o, op, varinfo(L, o));
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff ff9c 	bl	8006eac <varinfo>
 8006f74:	4603      	mov	r3, r0
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff ffda 	bl	8006f34 <typeerror>

08006f80 <luaG_callerror>:
/*
** Raise an error for calling a non-callable object. Try to find a name
** for the object based on how it was called ('funcnamefromcall'); if it
** cannot get a name there, try 'varinfo'.
*/
l_noret luaG_callerror (lua_State *L, const TValue *o) {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	617b      	str	r3, [r7, #20]
  const char *name = NULL;  /* to avoid warnings */
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]
  const char *kind = funcnamefromcall(L, ci, &name);
 8006f94:	f107 0308 	add.w	r3, r7, #8
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6979      	ldr	r1, [r7, #20]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff fedb 	bl	8006d58 <funcnamefromcall>
 8006fa2:	6138      	str	r0, [r7, #16]
  const char *extra = kind ? formatvarinfo(L, kind, name) : varinfo(L, o);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <luaG_callerror+0x3a>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	461a      	mov	r2, r3
 8006fae:	6939      	ldr	r1, [r7, #16]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff ff61 	bl	8006e78 <formatvarinfo>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	e004      	b.n	8006fc4 <luaG_callerror+0x44>
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff ff75 	bl	8006eac <varinfo>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	60fb      	str	r3, [r7, #12]
  typeerror(L, o, "call", extra);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a02      	ldr	r2, [pc, #8]	; (8006fd4 <luaG_callerror+0x54>)
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff ffb1 	bl	8006f34 <typeerror>
 8006fd2:	bf00      	nop
 8006fd4:	0801e988 	.word	0x0801e988

08006fd8 <luaG_forerror>:
}


l_noret luaG_forerror (lua_State *L, const TValue *o, const char *what) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  luaG_runerror(L, "bad 'for' %s (number expected, got %s)",
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f007 f806 	bl	800dff8 <luaT_objtypename>
 8006fec:	4603      	mov	r3, r0
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4901      	ldr	r1, [pc, #4]	; (8006ff8 <luaG_forerror+0x20>)
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f8e3 	bl	80071be <luaG_runerror>
 8006ff8:	0801e990 	.word	0x0801e990

08006ffc <luaG_concaterror>:
                   what, luaT_objtypename(L, o));
}


l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  if (ttisstring(p1) || cvt2str(p1)) p1 = p2;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	791b      	ldrb	r3, [r3, #4]
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	2b04      	cmp	r3, #4
 8007012:	d005      	beq.n	8007020 <luaG_concaterror+0x24>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	791b      	ldrb	r3, [r3, #4]
 8007018:	f003 030f 	and.w	r3, r3, #15
 800701c:	2b03      	cmp	r3, #3
 800701e:	d101      	bne.n	8007024 <luaG_concaterror+0x28>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60bb      	str	r3, [r7, #8]
  luaG_typeerror(L, p1, "concatenate");
 8007024:	4a02      	ldr	r2, [pc, #8]	; (8007030 <luaG_concaterror+0x34>)
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7ff ff99 	bl	8006f60 <luaG_typeerror>
 800702e:	bf00      	nop
 8007030:	0801e9b8 	.word	0x0801e9b8

08007034 <luaG_opinterror>:
}


l_noret luaG_opinterror (lua_State *L, const TValue *p1,
                         const TValue *p2, const char *msg) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
  if (!ttisnumber(p1))  /* first operand is wrong? */
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	791b      	ldrb	r3, [r3, #4]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	2b03      	cmp	r3, #3
 800704c:	d001      	beq.n	8007052 <luaG_opinterror+0x1e>
    p2 = p1;  /* now second is wrong */
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	607b      	str	r3, [r7, #4]
  luaG_typeerror(L, p2, msg);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff ff82 	bl	8006f60 <luaG_typeerror>

0800705c <luaG_tointerror>:


/*
** Error when both values are convertible to numbers, but not to integers
*/
l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  lua_Integer temp;
  if (!luaV_tointegerns(p1, &temp, LUA_FLOORN2I))
 8007068:	f107 0314 	add.w	r3, r7, #20
 800706c:	2200      	movs	r2, #0
 800706e:	4619      	mov	r1, r3
 8007070:	68b8      	ldr	r0, [r7, #8]
 8007072:	f007 fb9f 	bl	800e7b4 <luaV_tointegerns>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <luaG_tointerror+0x24>
    p2 = p1;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	607b      	str	r3, [r7, #4]
  luaG_runerror(L, "number%s has no integer representation", varinfo(L, p2));
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff ff12 	bl	8006eac <varinfo>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	4901      	ldr	r1, [pc, #4]	; (8007094 <luaG_tointerror+0x38>)
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 f895 	bl	80071be <luaG_runerror>
 8007094:	0801e9c4 	.word	0x0801e9c4

08007098 <luaG_ordererror>:
}


l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  const char *t1 = luaT_objtypename(L, p1);
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f006 ffa6 	bl	800dff8 <luaT_objtypename>
 80070ac:	6178      	str	r0, [r7, #20]
  const char *t2 = luaT_objtypename(L, p2);
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f006 ffa1 	bl	800dff8 <luaT_objtypename>
 80070b6:	6138      	str	r0, [r7, #16]
  if (strcmp(t1, t2) == 0)
 80070b8:	6939      	ldr	r1, [r7, #16]
 80070ba:	6978      	ldr	r0, [r7, #20]
 80070bc:	f7f9 f8e6 	bl	800028c <strcmp>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <luaG_ordererror+0x38>
    luaG_runerror(L, "attempt to compare two %s values", t1);
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4904      	ldr	r1, [pc, #16]	; (80070dc <luaG_ordererror+0x44>)
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f877 	bl	80071be <luaG_runerror>
  else
    luaG_runerror(L, "attempt to compare %s with %s", t1, t2);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4902      	ldr	r1, [pc, #8]	; (80070e0 <luaG_ordererror+0x48>)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f871 	bl	80071be <luaG_runerror>
 80070dc:	0801e9ec 	.word	0x0801e9ec
 80070e0:	0801ea10 	.word	0x0801ea10

080070e4 <luaG_addinfo>:
}


/* add src:line information to 'msg' */
const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,
                                        int line) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b096      	sub	sp, #88	; 0x58
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
  char buff[LUA_IDSIZE];
  if (src)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d011      	beq.n	800711c <luaG_addinfo+0x38>
    luaO_chunkid(buff, getstr(src), tsslen(src));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f103 0110 	add.w	r1, r3, #16
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	791b      	ldrb	r3, [r3, #4]
 8007102:	2b04      	cmp	r3, #4
 8007104:	d102      	bne.n	800710c <luaG_addinfo+0x28>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	79db      	ldrb	r3, [r3, #7]
 800710a:	e001      	b.n	8007110 <luaG_addinfo+0x2c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f107 0014 	add.w	r0, r7, #20
 8007114:	461a      	mov	r2, r3
 8007116:	f004 fd2f 	bl	800bb78 <luaO_chunkid>
 800711a:	e003      	b.n	8007124 <luaG_addinfo+0x40>
  else {  /* no source available; use "?" instead */
    buff[0] = '?'; buff[1] = '\0';
 800711c:	233f      	movs	r3, #63	; 0x3f
 800711e:	753b      	strb	r3, [r7, #20]
 8007120:	2300      	movs	r3, #0
 8007122:	757b      	strb	r3, [r7, #21]
  }
  return luaO_pushfstring(L, "%s:%d: %s", buff, line, msg);
 8007124:	f107 0214 	add.w	r2, r7, #20
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	4904      	ldr	r1, [pc, #16]	; (8007140 <luaG_addinfo+0x5c>)
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f004 fd0b 	bl	800bb4c <luaO_pushfstring>
 8007136:	4603      	mov	r3, r0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3750      	adds	r7, #80	; 0x50
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	0801ea30 	.word	0x0801ea30

08007144 <luaG_errormsg>:


l_noret luaG_errormsg (lua_State *L) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  if (L->errfunc != 0) {  /* is there an error handling function? */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d030      	beq.n	80071b6 <luaG_errormsg+0x72>
    StkId errfunc = restorestack(L, L->errfunc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800715c:	4413      	add	r3, r2
 800715e:	61fb      	str	r3, [r7, #28]
    lua_assert(ttisfunction(s2v(errfunc)));
    setobjs2s(L, L->top, L->top - 1);  /* move argument */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	3b08      	subs	r3, #8
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	791a      	ldrb	r2, [r3, #4]
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	711a      	strb	r2, [r3, #4]
    setobjs2s(L, L->top - 1, errfunc);  /* push function */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	3b08      	subs	r3, #8
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	791a      	ldrb	r2, [r3, #4]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	711a      	strb	r2, [r3, #4]
    L->top++;  /* assume EXTRA_STACK */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f103 0208 	add.w	r2, r3, #8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60da      	str	r2, [r3, #12]
    luaD_callnoyield(L, L->top - 2, 1);  /* call it */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	3b10      	subs	r3, #16
 80071ac:	2201      	movs	r2, #1
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 f84f 	bl	8008254 <luaD_callnoyield>
  }
  luaD_throw(L, LUA_ERRRUN);
 80071b6:	2102      	movs	r1, #2
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f99b 	bl	80074f4 <luaD_throw>

080071be <luaG_runerror>:
}


l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {
 80071be:	b40e      	push	{r1, r2, r3}
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  CallInfo *ci = L->ci;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	617b      	str	r3, [r7, #20]
  const char *msg;
  va_list argp;
  luaC_checkGC(L);  /* error message uses memory */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dd02      	ble.n	80071de <luaG_runerror+0x20>
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f003 fe3d 	bl	800ae58 <luaC_step>
  va_start(argp, fmt);
 80071de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071e2:	60fb      	str	r3, [r7, #12]
  msg = luaO_pushvfstring(L, fmt, argp);  /* format message */
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f004 fac7 	bl	800b77c <luaO_pushvfstring>
 80071ee:	6138      	str	r0, [r7, #16]
  va_end(argp);
  if (isLua(ci))  /* if Lua function, add source:line information */
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10d      	bne.n	8007218 <luaG_runerror+0x5a>
    luaG_addinfo(L, msg, ci_func(ci)->p->source, getcurrentline(ci));
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007206:	6978      	ldr	r0, [r7, #20]
 8007208:	f7ff f9b3 	bl	8006572 <getcurrentline>
 800720c:	4603      	mov	r3, r0
 800720e:	4622      	mov	r2, r4
 8007210:	6939      	ldr	r1, [r7, #16]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff ff66 	bl	80070e4 <luaG_addinfo>
  luaG_errormsg(L);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff ff93 	bl	8007144 <luaG_errormsg>

0800721e <changedline>:
** one or a few instructions after 'oldpc' (it must be after, see
** caller), so try to avoid calling 'luaG_getfuncline'. If they are
** too far apart, there is a good chance of a ABSLINEINFO in the way,
** so it goes directly to 'luaG_getfuncline'.
*/
static int changedline (const Proto *p, int oldpc, int newpc) {
 800721e:	b590      	push	{r4, r7, lr}
 8007220:	b089      	sub	sp, #36	; 0x24
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
  if (p->lineinfo == NULL)  /* no debug information? */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <changedline+0x18>
    return 0;
 8007232:	2300      	movs	r3, #0
 8007234:	e035      	b.n	80072a2 <changedline+0x84>
  if (newpc - oldpc < MAXIWTHABS / 2) {  /* not too far apart? */
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b3f      	cmp	r3, #63	; 0x3f
 800723e:	dc21      	bgt.n	8007284 <changedline+0x66>
    int delta = 0;  /* line diference */
 8007240:	2300      	movs	r3, #0
 8007242:	61fb      	str	r3, [r7, #28]
    int pc = oldpc;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61bb      	str	r3, [r7, #24]
    for (;;) {
      int lineinfo = p->lineinfo[++pc];
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	3301      	adds	r3, #1
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	4413      	add	r3, r2
 8007256:	f993 3000 	ldrsb.w	r3, [r3]
 800725a:	617b      	str	r3, [r7, #20]
      if (lineinfo == ABSLINEINFO)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8007262:	d00e      	beq.n	8007282 <changedline+0x64>
        break;  /* cannot compute delta; fall through */
      delta += lineinfo;
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	61fb      	str	r3, [r7, #28]
      if (pc == newpc)
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d1e9      	bne.n	8007248 <changedline+0x2a>
        return (delta != 0);  /* delta computed successfully */
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bf14      	ite	ne
 800727a:	2301      	movne	r3, #1
 800727c:	2300      	moveq	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	e00f      	b.n	80072a2 <changedline+0x84>
        break;  /* cannot compute delta; fall through */
 8007282:	bf00      	nop
    }
  }
  /* either instructions are too far apart or there is an absolute line
     info in the way; compute line difference explicitly */
  return (luaG_getfuncline(p, oldpc) != luaG_getfuncline(p, newpc));
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f7ff f949 	bl	800651e <luaG_getfuncline>
 800728c:	4604      	mov	r4, r0
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7ff f944 	bl	800651e <luaG_getfuncline>
 8007296:	4603      	mov	r3, r0
 8007298:	429c      	cmp	r4, r3
 800729a:	bf14      	ite	ne
 800729c:	2301      	movne	r3, #1
 800729e:	2300      	moveq	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3724      	adds	r7, #36	; 0x24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd90      	pop	{r4, r7, pc}
	...

080072ac <luaG_traceexec>:
** invalid; if so, use zero as a valid value. (A wrong but valid 'oldpc'
** at most causes an extra call to a line hook.)
** This function is not "Protected" when called, so it should correct
** 'L->top' before calling anything that can run the GC.
*/
int luaG_traceexec (lua_State *L, const Instruction *pc) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
  lu_byte mask = L->hookmask;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  const Proto *p = ci_func(ci)->p;
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	61fb      	str	r3, [r7, #28]
  int counthook;
  if (!(mask & (LUA_MASKLINE | LUA_MASKCOUNT))) {  /* no hooks? */
 80072ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072d2:	f003 030c 	and.w	r3, r3, #12
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d104      	bne.n	80072e4 <luaG_traceexec+0x38>
    ci->u.l.trap = 0;  /* don't need to stop again */
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	2200      	movs	r2, #0
 80072de:	615a      	str	r2, [r3, #20]
    return 0;  /* turn off 'trap' */
 80072e0:	2300      	movs	r3, #0
 80072e2:	e0ab      	b.n	800743c <luaG_traceexec+0x190>
  }
  pc++;  /* reference is always next instruction */
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	3304      	adds	r3, #4
 80072e8:	603b      	str	r3, [r7, #0]
  ci->u.l.savedpc = pc;  /* save 'pc' */
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	611a      	str	r2, [r3, #16]
  counthook = (--L->hookcount == 0 && (mask & LUA_MASKCOUNT));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f4:	1e5a      	subs	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d107      	bne.n	8007312 <luaG_traceexec+0x66>
 8007302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <luaG_traceexec+0x66>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <luaG_traceexec+0x68>
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
  if (counthook)
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <luaG_traceexec+0x7a>
    resethookcount(L);  /* reset count */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	66da      	str	r2, [r3, #108]	; 0x6c
 8007324:	e007      	b.n	8007336 <luaG_traceexec+0x8a>
  else if (!(mask & LUA_MASKLINE))
 8007326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <luaG_traceexec+0x8a>
    return 1;  /* no line hook and count != 0; nothing to be done now */
 8007332:	2301      	movs	r3, #1
 8007334:	e082      	b.n	800743c <luaG_traceexec+0x190>
  if (ci->callstatus & CIST_HOOKYIELD) {  /* called hook last time? */
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <luaG_traceexec+0xa8>
    ci->callstatus &= ~CIST_HOOKYIELD;  /* erase mark */
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734a:	b29a      	uxth	r2, r3
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	845a      	strh	r2, [r3, #34]	; 0x22
    return 1;  /* do not call hook again (VM yielded, so it did not move) */
 8007350:	2301      	movs	r3, #1
 8007352:	e073      	b.n	800743c <luaG_traceexec+0x190>
  }
  if (!isIT(*(ci->u.l.savedpc - 1)))  /* top not being used? */
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	3b04      	subs	r3, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007362:	4a38      	ldr	r2, [pc, #224]	; (8007444 <luaG_traceexec+0x198>)
 8007364:	5cd3      	ldrb	r3, [r2, r3]
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <luaG_traceexec+0xd2>
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	3b04      	subs	r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <luaG_traceexec+0xda>
    L->top = ci->top;  /* correct top */
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60da      	str	r2, [r3, #12]
  if (counthook)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <luaG_traceexec+0xf2>
    luaD_hook(L, LUA_HOOKCOUNT, -1, 0, 0);  /* call count hook */
 800738c:	2300      	movs	r3, #0
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	f04f 32ff 	mov.w	r2, #4294967295
 8007396:	2103      	movs	r1, #3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa9f 	bl	80078dc <luaD_hook>
  if (mask & LUA_MASKLINE) {
 800739e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d02d      	beq.n	8007406 <luaG_traceexec+0x15a>
    /* 'L->oldpc' may be invalid; use zero in this case */
    int oldpc = (L->oldpc < p->sizecode) ? L->oldpc : 0;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	da02      	bge.n	80073bc <luaG_traceexec+0x110>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ba:	e000      	b.n	80073be <luaG_traceexec+0x112>
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
    int npci = pcRel(pc, p);
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	109b      	asrs	r3, r3, #2
 80073ca:	3b01      	subs	r3, #1
 80073cc:	613b      	str	r3, [r7, #16]
    if (npci <= oldpc ||  /* call hook when jump back (loop), */
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	dd07      	ble.n	80073e6 <luaG_traceexec+0x13a>
        changedline(p, oldpc, npci)) {  /* or when enter new line */
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	6979      	ldr	r1, [r7, #20]
 80073da:	69f8      	ldr	r0, [r7, #28]
 80073dc:	f7ff ff1f 	bl	800721e <changedline>
 80073e0:	4603      	mov	r3, r0
    if (npci <= oldpc ||  /* call hook when jump back (loop), */
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00c      	beq.n	8007400 <luaG_traceexec+0x154>
      int newline = luaG_getfuncline(p, npci);
 80073e6:	6939      	ldr	r1, [r7, #16]
 80073e8:	69f8      	ldr	r0, [r7, #28]
 80073ea:	f7ff f898 	bl	800651e <luaG_getfuncline>
 80073ee:	60f8      	str	r0, [r7, #12]
      luaD_hook(L, LUA_HOOKLINE, newline, 0, 0);  /* call line hook */
 80073f0:	2300      	movs	r3, #0
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2300      	movs	r3, #0
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	2102      	movs	r1, #2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa6e 	bl	80078dc <luaD_hook>
    }
    L->oldpc = npci;  /* 'pc' of last call to line hook */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	665a      	str	r2, [r3, #100]	; 0x64
  }
  if (L->status == LUA_YIELD) {  /* did hook yield? */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	799b      	ldrb	r3, [r3, #6]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d115      	bne.n	800743a <luaG_traceexec+0x18e>
    if (counthook)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <luaG_traceexec+0x16e>
      L->hookcount = 1;  /* undo decrement to zero */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	66da      	str	r2, [r3, #108]	; 0x6c
    ci->u.l.savedpc--;  /* undo increment (resume will increment it again) */
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	1f1a      	subs	r2, r3, #4
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	611a      	str	r2, [r3, #16]
    ci->callstatus |= CIST_HOOKYIELD;  /* mark that it yielded */
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800742c:	b29a      	uxth	r2, r3
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	845a      	strh	r2, [r3, #34]	; 0x22
    luaD_throw(L, LUA_YIELD);
 8007432:	2101      	movs	r1, #1
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f85d 	bl	80074f4 <luaD_throw>
  }
  return 1;  /* keep 'trap' on */
 800743a:	2301      	movs	r3, #1
}
 800743c:	4618      	mov	r0, r3
 800743e:	3728      	adds	r7, #40	; 0x28
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	0801f4b8 	.word	0x0801f4b8

08007448 <luaD_seterrorobj>:
  luai_jmpbuf b;
  volatile int status;  /* error code */
};


void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  switch (errcode) {
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b05      	cmp	r3, #5
 8007458:	d01a      	beq.n	8007490 <luaD_seterrorobj+0x48>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b05      	cmp	r3, #5
 800745e:	dc2e      	bgt.n	80074be <luaD_seterrorobj+0x76>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d027      	beq.n	80074b6 <luaD_seterrorobj+0x6e>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b04      	cmp	r3, #4
 800746a:	d128      	bne.n	80074be <luaD_seterrorobj+0x76>
    case LUA_ERRMEM: {  /* memory error? */
      setsvalue2s(L, oldtop, G(L)->memerrmsg); /* reuse preregistered msg. */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	61fb      	str	r3, [r7, #28]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	791b      	ldrb	r3, [r3, #4]
 8007484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007488:	b2da      	uxtb	r2, r3
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	711a      	strb	r2, [r3, #4]
      break;
 800748e:	e025      	b.n	80074dc <luaD_seterrorobj+0x94>
    }
    case LUA_ERRERR: {
      setsvalue2s(L, oldtop, luaS_newliteral(L, "error in error handling"));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
 8007494:	2217      	movs	r2, #23
 8007496:	4916      	ldr	r1, [pc, #88]	; (80074f0 <luaD_seterrorobj+0xa8>)
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f005 fab5 	bl	800ca08 <luaS_newlstr>
 800749e:	6238      	str	r0, [r7, #32]
 80074a0:	6a3a      	ldr	r2, [r7, #32]
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	791b      	ldrb	r3, [r3, #4]
 80074aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	711a      	strb	r2, [r3, #4]
      break;
 80074b4:	e012      	b.n	80074dc <luaD_seterrorobj+0x94>
    }
    case LUA_OK: {  /* special case only for closing upvalues */
      setnilvalue(s2v(oldtop));  /* no error message */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	711a      	strb	r2, [r3, #4]
      break;
 80074bc:	e00e      	b.n	80074dc <luaD_seterrorobj+0x94>
    }
    default: {
      lua_assert(errorstatus(errcode));  /* real error */
      setobjs2s(L, oldtop, L->top - 1);  /* error message on current top */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	3b08      	subs	r3, #8
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	791a      	ldrb	r2, [r3, #4]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	711a      	strb	r2, [r3, #4]
      break;
 80074da:	bf00      	nop
    }
  }
  L->top = oldtop + 1;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f103 0208 	add.w	r2, r3, #8
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	60da      	str	r2, [r3, #12]
}
 80074e6:	bf00      	nop
 80074e8:	3728      	adds	r7, #40	; 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	0801ea3c 	.word	0x0801ea3c

080074f4 <luaD_throw>:


l_noret luaD_throw (lua_State *L, int errcode) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  if (L->errorJmp) {  /* thread has an error handler? */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <luaD_throw+0x28>
    L->errorJmp->status = errcode;  /* set status */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	661a      	str	r2, [r3, #96]	; 0x60
    LUAI_THROW(L, L->errorJmp);  /* jump to it */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	3304      	adds	r3, #4
 8007514:	2101      	movs	r1, #1
 8007516:	4618      	mov	r0, r3
 8007518:	f7f8 feb0 	bl	800027c <longjmp>
  }
  else {  /* thread has no error handler */
    global_State *g = G(L);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	617b      	str	r3, [r7, #20]
    errcode = luaE_resetthread(L, errcode);  /* close all upvalues */
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f004 fe27 	bl	800c178 <luaE_resetthread>
 800752a:	6038      	str	r0, [r7, #0]
    if (g->mainthread->errorJmp) {  /* main thread has a handler? */
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01a      	beq.n	800756e <luaD_throw+0x7a>
      setobjs2s(L, g->mainthread->top++, L->top - 1);  /* copy error obj. */
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800753e:	68d3      	ldr	r3, [r2, #12]
 8007540:	f103 0108 	add.w	r1, r3, #8
 8007544:	60d1      	str	r1, [r2, #12]
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	3b08      	subs	r3, #8
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	791a      	ldrb	r2, [r3, #4]
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	711a      	strb	r2, [r3, #4]
      luaD_throw(g->mainthread, errcode);  /* re-throw in main thread */
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff ffc3 	bl	80074f4 <luaD_throw>
    }
    else {  /* no handler at all; abort */
      if (g->panic) {  /* panic function? */
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <luaD_throw+0x8e>
        lua_unlock(L);
        g->panic(L);  /* call panic function (last chance to jump out) */
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
      }
      abort();
 8007582:	f013 fbfd 	bl	801ad80 <abort>

08007586 <luaD_rawrunprotected>:
    }
  }
}


int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {
 8007586:	b580      	push	{r7, lr}
 8007588:	b09e      	sub	sp, #120	; 0x78
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]
  l_uint32 oldnCcalls = L->nCcalls;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007596:	677b      	str	r3, [r7, #116]	; 0x74
  struct lua_longjmp lj;
  lj.status = LUA_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	673b      	str	r3, [r7, #112]	; 0x70
  lj.previous = L->errorJmp;  /* chain new error handler */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	613b      	str	r3, [r7, #16]
  L->errorJmp = &lj;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f107 0210 	add.w	r2, r7, #16
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30
  LUAI_TRY(L, &lj,
 80075aa:	f107 0310 	add.w	r3, r7, #16
 80075ae:	3304      	adds	r3, #4
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7f8 fe5d 	bl	8000270 <setjmp>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <luaD_rawrunprotected+0x3e>
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	4798      	blx	r3
    (*f)(L, ud);
  );
  L->errorJmp = lj.previous;  /* restore old error handler */
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	631a      	str	r2, [r3, #48]	; 0x30
  L->nCcalls = oldnCcalls;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075ce:	661a      	str	r2, [r3, #96]	; 0x60
  return lj.status;
 80075d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3778      	adds	r7, #120	; 0x78
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <correctstack>:
/*
** {==================================================================
** Stack reallocation
** ===================================================================
*/
static void correctstack (lua_State *L, StkId oldstack, StkId newstack) {
 80075da:	b480      	push	{r7}
 80075dc:	b087      	sub	sp, #28
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  CallInfo *ci;
  UpVal *up;
  L->top = (L->top - oldstack) + newstack;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	461a      	mov	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	441a      	add	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	60da      	str	r2, [r3, #12]
  L->tbclist = (L->tbclist - oldstack) + newstack;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	461a      	mov	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	441a      	add	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	625a      	str	r2, [r3, #36]	; 0x24
  for (up = L->openupval; up != NULL; up = up->u.open.next)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	e00c      	b.n	800762c <correctstack+0x52>
    up->v = s2v((uplevel(up) - oldstack) + newstack);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	461a      	mov	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4413      	add	r3, r2
 8007620:	461a      	mov	r2, r3
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	609a      	str	r2, [r3, #8]
  for (up = L->openupval; up != NULL; up = up->u.open.next)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1ef      	bne.n	8007612 <correctstack+0x38>
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	e01d      	b.n	8007676 <correctstack+0x9c>
    ci->top = (ci->top - oldstack) + newstack;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	441a      	add	r2, r3
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	605a      	str	r2, [r3, #4]
    ci->func = (ci->func - oldstack) + newstack;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	441a      	add	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	601a      	str	r2, [r3, #0]
    if (isLua(ci))
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <correctstack+0x96>
      ci->u.l.trap = 1;  /* signal to update 'trap' in 'luaV_execute' */
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2201      	movs	r2, #1
 800766e:	615a      	str	r2, [r3, #20]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1de      	bne.n	800763a <correctstack+0x60>
  }
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <luaD_reallocstack>:
** (In ISO C, any pointer use after the pointer has been deallocated is
** undefined behavior.)
** In case of allocation error, raise an error or return false according
** to 'raiseerror'.
*/
int luaD_reallocstack (lua_State *L, int newsize, int raiseerror) {
 800768a:	b580      	push	{r7, lr}
 800768c:	b088      	sub	sp, #32
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
  int oldsize = stacksize(L);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	10db      	asrs	r3, r3, #3
 80076a2:	61bb      	str	r3, [r7, #24]
  int i;
  StkId newstack = luaM_reallocvector(L, NULL, 0,
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	3305      	adds	r3, #5
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	2200      	movs	r2, #0
 80076ac:	2100      	movs	r1, #0
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f003 fcc0 	bl	800b034 <luaM_realloc_>
 80076b4:	6178      	str	r0, [r7, #20]
                                      newsize + EXTRA_STACK, StackValue);
  lua_assert(newsize <= LUAI_MAXSTACK || newsize == ERRORSTACKSIZE);
  if (l_unlikely(newstack == NULL)) {  /* reallocation failed? */
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bf0c      	ite	eq
 80076bc:	2301      	moveq	r3, #1
 80076be:	2300      	movne	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d008      	beq.n	80076d8 <luaD_reallocstack+0x4e>
    if (raiseerror)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <luaD_reallocstack+0x4a>
      luaM_error(L);
 80076cc:	2104      	movs	r1, #4
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff ff10 	bl	80074f4 <luaD_throw>
    else return 0;  /* do not raise an error */
 80076d4:	2300      	movs	r3, #0
 80076d6:	e038      	b.n	800774a <luaD_reallocstack+0xc0>
  }
  /* number of elements to be copied to the new stack */
  i = ((oldsize <= newsize) ? oldsize : newsize) + EXTRA_STACK;
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	4293      	cmp	r3, r2
 80076de:	bfa8      	it	ge
 80076e0:	4613      	movge	r3, r2
 80076e2:	3305      	adds	r3, #5
 80076e4:	61fb      	str	r3, [r7, #28]
  memcpy(newstack, L->stack, i * sizeof(StackValue));
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	69d9      	ldr	r1, [r3, #28]
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	461a      	mov	r2, r3
 80076f0:	6978      	ldr	r0, [r7, #20]
 80076f2:	f013 ff0d 	bl	801b510 <memcpy>
  for (; i < newsize + EXTRA_STACK; i++)
 80076f6:	e008      	b.n	800770a <luaD_reallocstack+0x80>
    setnilvalue(s2v(newstack + i)); /* erase new segment */
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4413      	add	r3, r2
 8007700:	2200      	movs	r2, #0
 8007702:	711a      	strb	r2, [r3, #4]
  for (; i < newsize + EXTRA_STACK; i++)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	3304      	adds	r3, #4
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	429a      	cmp	r2, r3
 8007712:	ddf1      	ble.n	80076f8 <luaD_reallocstack+0x6e>
  correctstack(L, L->stack, newstack);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4619      	mov	r1, r3
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff ff5c 	bl	80075da <correctstack>
  luaM_freearray(L, L->stack, oldsize + EXTRA_STACK);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	69d9      	ldr	r1, [r3, #28]
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	3305      	adds	r3, #5
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	461a      	mov	r2, r3
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f003 fc3a 	bl	800afa8 <luaM_free_>
  L->stack = newstack;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	61da      	str	r2, [r3, #28]
  L->stack_last = L->stack + newsize;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	69da      	ldr	r2, [r3, #28]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	441a      	add	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	619a      	str	r2, [r3, #24]
  return 1;
 8007748:	2301      	movs	r3, #1
}
 800774a:	4618      	mov	r0, r3
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <luaD_growstack>:

/*
** Try to grow the stack by at least 'n' elements. when 'raiseerror'
** is true, raises any error; otherwise, return 0 in case of errors.
*/
int luaD_growstack (lua_State *L, int n, int raiseerror) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  int size = stacksize(L);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	699a      	ldr	r2, [r3, #24]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	10db      	asrs	r3, r3, #3
 800776c:	61bb      	str	r3, [r7, #24]
  if (l_unlikely(size > LUAI_MAXSTACK)) {
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	4a25      	ldr	r2, [pc, #148]	; (8007808 <luaD_growstack+0xb4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	bfcc      	ite	gt
 8007776:	2301      	movgt	r3, #1
 8007778:	2300      	movle	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d008      	beq.n	8007792 <luaD_growstack+0x3e>
    /* if stack is larger than maximum, thread is already using the
       extra space reserved for errors, that is, thread is handling
       a stack error; cannot grow further than that. */
    lua_assert(stacksize(L) == ERRORSTACKSIZE);
    if (raiseerror)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <luaD_growstack+0x3a>
      luaD_throw(L, LUA_ERRERR);  /* error inside message handler */
 8007786:	2105      	movs	r1, #5
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f7ff feb3 	bl	80074f4 <luaD_throw>
    return 0;  /* if not 'raiseerror', just signal it */
 800778e:	2300      	movs	r3, #0
 8007790:	e035      	b.n	80077fe <luaD_growstack+0xaa>
  }
  else {
    int newsize = 2 * size;  /* tentative new size */
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	61fb      	str	r3, [r7, #28]
    int needed = cast_int(L->top - L->stack) + n;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	10db      	asrs	r3, r3, #3
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]
    if (newsize > LUAI_MAXSTACK)  /* cannot cross the limit */
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	4a16      	ldr	r2, [pc, #88]	; (8007808 <luaD_growstack+0xb4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	dd01      	ble.n	80077b8 <luaD_growstack+0x64>
      newsize = LUAI_MAXSTACK;
 80077b4:	4b14      	ldr	r3, [pc, #80]	; (8007808 <luaD_growstack+0xb4>)
 80077b6:	61fb      	str	r3, [r7, #28]
    if (newsize < needed)  /* but must respect what was asked for */
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	429a      	cmp	r2, r3
 80077be:	da01      	bge.n	80077c4 <luaD_growstack+0x70>
      newsize = needed;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	61fb      	str	r3, [r7, #28]
    if (l_likely(newsize <= LUAI_MAXSTACK))
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4a10      	ldr	r2, [pc, #64]	; (8007808 <luaD_growstack+0xb4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	bfd4      	ite	le
 80077cc:	2301      	movle	r3, #1
 80077ce:	2300      	movgt	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d006      	beq.n	80077e4 <luaD_growstack+0x90>
      return luaD_reallocstack(L, newsize, raiseerror);
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	69f9      	ldr	r1, [r7, #28]
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7ff ff55 	bl	800768a <luaD_reallocstack>
 80077e0:	4603      	mov	r3, r0
 80077e2:	e00c      	b.n	80077fe <luaD_growstack+0xaa>
    else {  /* stack overflow */
      /* add extra size to be able to handle the error message */
      luaD_reallocstack(L, ERRORSTACKSIZE, raiseerror);
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	4909      	ldr	r1, [pc, #36]	; (800780c <luaD_growstack+0xb8>)
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff ff4e 	bl	800768a <luaD_reallocstack>
      if (raiseerror)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <luaD_growstack+0xa8>
        luaG_runerror(L, "stack overflow");
 80077f4:	4906      	ldr	r1, [pc, #24]	; (8007810 <luaD_growstack+0xbc>)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7ff fce1 	bl	80071be <luaG_runerror>
      return 0;
 80077fc:	2300      	movs	r3, #0
    }
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	000f4240 	.word	0x000f4240
 800780c:	000f4308 	.word	0x000f4308
 8007810:	0801ea54 	.word	0x0801ea54

08007814 <stackinuse>:


static int stackinuse (lua_State *L) {
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  CallInfo *ci;
  int res;
  StkId lim = L->top;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	60fb      	str	r3, [r7, #12]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e00a      	b.n	8007840 <stackinuse+0x2c>
    if (lim < ci->top) lim = ci->top;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	429a      	cmp	r2, r3
 8007832:	d202      	bcs.n	800783a <stackinuse+0x26>
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	60fb      	str	r3, [r7, #12]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f1      	bne.n	800782a <stackinuse+0x16>
  }
  lua_assert(lim <= L->stack_last);
  res = cast_int(lim - L->stack) + 1;  /* part of stack in use */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	10db      	asrs	r3, r3, #3
 8007850:	3301      	adds	r3, #1
 8007852:	613b      	str	r3, [r7, #16]
  if (res < LUA_MINSTACK)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b13      	cmp	r3, #19
 8007858:	dc01      	bgt.n	800785e <stackinuse+0x4a>
    res = LUA_MINSTACK;  /* ensure a minimum size */
 800785a:	2314      	movs	r3, #20
 800785c:	613b      	str	r3, [r7, #16]
  return res;
 800785e:	693b      	ldr	r3, [r7, #16]
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <luaD_shrinkstack>:
** As a particular case, if stack was handling a stack overflow and now
** it is not, 'max' (limited by LUAI_MAXSTACK) will be smaller than
** stacksize (equal to ERRORSTACKSIZE in this case), and so the stack
** will be reduced to a "regular" size.
*/
void luaD_shrinkstack (lua_State *L) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  int inuse = stackinuse(L);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff ffcd 	bl	8007814 <stackinuse>
 800787a:	60f8      	str	r0, [r7, #12]
  int nsize = inuse * 2;  /* proposed new size */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	617b      	str	r3, [r7, #20]
  int max = inuse * 3;  /* maximum "reasonable" size */
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4613      	mov	r3, r2
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	4413      	add	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
  if (max > LUAI_MAXSTACK) {
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	4a12      	ldr	r2, [pc, #72]	; (80078d8 <luaD_shrinkstack+0x6c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	dd07      	ble.n	80078a4 <luaD_shrinkstack+0x38>
    max = LUAI_MAXSTACK;  /* respect stack limit */
 8007894:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <luaD_shrinkstack+0x6c>)
 8007896:	613b      	str	r3, [r7, #16]
    if (nsize > LUAI_MAXSTACK)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4a0f      	ldr	r2, [pc, #60]	; (80078d8 <luaD_shrinkstack+0x6c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	dd01      	ble.n	80078a4 <luaD_shrinkstack+0x38>
      nsize = LUAI_MAXSTACK;
 80078a0:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <luaD_shrinkstack+0x6c>)
 80078a2:	617b      	str	r3, [r7, #20]
  }
  /* if thread is currently not handling a stack overflow and its
     size is larger than maximum "reasonable" size, shrink it */
  if (inuse <= LUAI_MAXSTACK && stacksize(L) > max)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a0c      	ldr	r2, [pc, #48]	; (80078d8 <luaD_shrinkstack+0x6c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	dc0e      	bgt.n	80078ca <luaD_shrinkstack+0x5e>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699a      	ldr	r2, [r3, #24]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	10db      	asrs	r3, r3, #3
 80078b8:	461a      	mov	r2, r3
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4293      	cmp	r3, r2
 80078be:	da04      	bge.n	80078ca <luaD_shrinkstack+0x5e>
    luaD_reallocstack(L, nsize, 0);  /* ok if that fails */
 80078c0:	2200      	movs	r2, #0
 80078c2:	6979      	ldr	r1, [r7, #20]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fee0 	bl	800768a <luaD_reallocstack>
  else  /* don't change stack */
    condmovestack(L,{},{});  /* (change only for debugging) */
  luaE_shrinkCI(L);  /* shrink CI list */
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f004 fa9e 	bl	800be0c <luaE_shrinkCI>
}
 80078d0:	bf00      	nop
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	000f4240 	.word	0x000f4240

080078dc <luaD_hook>:
** Call a hook for the given event. Make sure there is a hook to be
** called. (Both 'L->hook' and 'L->hookmask', which trigger this
** function, can be changed asynchronously by signals.)
*/
void luaD_hook (lua_State *L, int event, int line,
                              int ftransfer, int ntransfer) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b0a4      	sub	sp, #144	; 0x90
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
  lua_Hook hook = L->hook;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (hook && L->allowhook) {  /* make sure there is a hook */
 80078f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 80a0 	beq.w	8007a3c <luaD_hook+0x160>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	79db      	ldrb	r3, [r3, #7]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 809b 	beq.w	8007a3c <luaD_hook+0x160>
    int mask = CIST_HOOKED;
 8007906:	2308      	movs	r3, #8
 8007908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    CallInfo *ci = L->ci;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    ptrdiff_t top = savestack(L, L->top);  /* preserve original 'top' */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    ptrdiff_t ci_top = savestack(L, ci->top);  /* idem for 'ci->top' */
 8007922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	67fb      	str	r3, [r7, #124]	; 0x7c
    lua_Debug ar;
    ar.event = event;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	613b      	str	r3, [r7, #16]
    ar.currentline = line;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62bb      	str	r3, [r7, #40]	; 0x28
    ar.i_ci = ci;
 8007938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800793c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (ntransfer != 0) {
 800793e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007942:	2b00      	cmp	r3, #0
 8007944:	d010      	beq.n	8007968 <luaD_hook+0x8c>
      mask |= CIST_TRAN;  /* 'ci' has transfer information */
 8007946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800794a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      ci->u2.transferinfo.ftransfer = ftransfer;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	b29a      	uxth	r2, r3
 8007956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800795a:	839a      	strh	r2, [r3, #28]
      ci->u2.transferinfo.ntransfer = ntransfer;
 800795c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007966:	83da      	strh	r2, [r3, #30]
    }
    if (isLua(ci) && L->top < ci->top)
 8007968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800796c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <luaD_hook+0xb2>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d204      	bcs.n	800798e <luaD_hook+0xb2>
      L->top = ci->top;  /* protect entire activation register */
 8007984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	60da      	str	r2, [r3, #12]
    luaD_checkstack(L, LUA_MINSTACK);  /* ensure minimum stack size */
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2ba0      	cmp	r3, #160	; 0xa0
 800799a:	bfd4      	ite	le
 800799c:	2301      	movle	r3, #1
 800799e:	2300      	movgt	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <luaD_hook+0xd4>
 80079a6:	2201      	movs	r2, #1
 80079a8:	2114      	movs	r1, #20
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f7ff fed2 	bl	8007754 <luaD_growstack>
    if (ci->top < L->top + LUA_MINSTACK)
 80079b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	33a0      	adds	r3, #160	; 0xa0
 80079bc:	429a      	cmp	r2, r3
 80079be:	d206      	bcs.n	80079ce <luaD_hook+0xf2>
      ci->top = L->top + LUA_MINSTACK;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80079c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079cc:	605a      	str	r2, [r3, #4]
    L->allowhook = 0;  /* cannot call hooks inside a hook */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	71da      	strb	r2, [r3, #7]
    ci->callstatus |= mask;
 80079d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80079da:	b21a      	sxth	r2, r3
 80079dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079e0:	b21b      	sxth	r3, r3
 80079e2:	4313      	orrs	r3, r2
 80079e4:	b21b      	sxth	r3, r3
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079ec:	845a      	strh	r2, [r3, #34]	; 0x22
    lua_unlock(L);
    (*hook)(L, &ar);
 80079ee:	f107 0210 	add.w	r2, r7, #16
 80079f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079f6:	4611      	mov	r1, r2
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	4798      	blx	r3
    lua_lock(L);
    lua_assert(!L->allowhook);
    L->allowhook = 1;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	71da      	strb	r2, [r3, #7]
    ci->top = restorestack(L, ci_top);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	69da      	ldr	r2, [r3, #28]
 8007a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a08:	441a      	add	r2, r3
 8007a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a0e:	605a      	str	r2, [r3, #4]
    L->top = restorestack(L, top);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a18:	441a      	add	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	60da      	str	r2, [r3, #12]
    ci->callstatus &= ~mask;
 8007a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a22:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007a24:	b21a      	sxth	r2, r3
 8007a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a2a:	b21b      	sxth	r3, r3
 8007a2c:	43db      	mvns	r3, r3
 8007a2e:	b21b      	sxth	r3, r3
 8007a30:	4013      	ands	r3, r2
 8007a32:	b21b      	sxth	r3, r3
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a3a:	845a      	strh	r2, [r3, #34]	; 0x22
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	3790      	adds	r7, #144	; 0x90
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <luaD_hookcall>:
/*
** Executes a call hook for Lua functions. This function is called
** whenever 'hookmask' is not zero, so it checks whether call hooks are
** active.
*/
void luaD_hookcall (lua_State *L, CallInfo *ci) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  L->oldpc = 0;  /* set 'oldpc' for new function */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	665a      	str	r2, [r3, #100]	; 0x64
  if (L->hookmask & LUA_MASKCALL) {  /* is call hook on? */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01e      	beq.n	8007a9e <luaD_hookcall+0x5a>
    int event = (ci->callstatus & CIST_TAIL) ? LUA_HOOKTAILCALL
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                                             : LUA_HOOKCALL;
 8007a64:	10db      	asrs	r3, r3, #3
    int event = (ci->callstatus & CIST_TAIL) ? LUA_HOOKTAILCALL
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	60fb      	str	r3, [r7, #12]
    Proto *p = ci_func(ci)->p;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	60bb      	str	r3, [r7, #8]
    ci->u.l.savedpc++;  /* hooks assume 'pc' is already incremented */
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	1d1a      	adds	r2, r3, #4
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	611a      	str	r2, [r3, #16]
    luaD_hook(L, event, -1, 1, p->numparams);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	799b      	ldrb	r3, [r3, #6]
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	2301      	movs	r3, #1
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8c:	68f9      	ldr	r1, [r7, #12]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff ff24 	bl	80078dc <luaD_hook>
    ci->u.l.savedpc--;  /* correct 'pc' */
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	1f1a      	subs	r2, r3, #4
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	611a      	str	r2, [r3, #16]
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <rethook>:
/*
** Executes a return hook for Lua and C functions and sets/corrects
** 'oldpc'. (Note that this correction is needed by the line hook, so it
** is done even when return hooks are off.)
*/
static void rethook (lua_State *L, CallInfo *ci, int nres) {
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b08a      	sub	sp, #40	; 0x28
 8007aaa:	af02      	add	r7, sp, #8
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
  if (L->hookmask & LUA_MASKRET) {  /* is return hook on? */
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d03d      	beq.n	8007b3a <rethook+0x94>
    StkId firstres = L->top - nres;  /* index of first result */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	425b      	negs	r3, r3
 8007ac8:	4413      	add	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
    int delta = 0;  /* correction for vararg functions */
 8007acc:	2300      	movs	r3, #0
 8007ace:	61fb      	str	r3, [r7, #28]
    int ftransfer;
    if (isLua(ci)) {
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10f      	bne.n	8007afc <rethook+0x56>
      Proto *p = ci_func(ci)->p;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	617b      	str	r3, [r7, #20]
      if (p->is_vararg)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	79db      	ldrb	r3, [r3, #7]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d006      	beq.n	8007afc <rethook+0x56>
        delta = ci->u.l.nextraargs + p->numparams + 1;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	7992      	ldrb	r2, [r2, #6]
 8007af6:	4413      	add	r3, r2
 8007af8:	3301      	adds	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
    }
    ci->func += delta;  /* if vararg, back to virtual 'func' */
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	441a      	add	r2, r3
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	601a      	str	r2, [r3, #0]
    ftransfer = cast(unsigned short, firstres - ci->func);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	10db      	asrs	r3, r3, #3
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	613b      	str	r3, [r7, #16]
    luaD_hook(L, LUA_HOOKRET, -1, ftransfer, nres);  /* call it */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b22:	2101      	movs	r1, #1
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fed9 	bl	80078dc <luaD_hook>
    ci->func -= delta;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	425b      	negs	r3, r3
 8007b34:	441a      	add	r2, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	601a      	str	r2, [r3, #0]
  }
  if (isLua(ci = ci->previous))
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	60bb      	str	r3, [r7, #8]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10b      	bne.n	8007b64 <rethook+0xbe>
    L->oldpc = pcRel(ci->u.l.savedpc, ci_func(ci)->p);  /* set 'oldpc' */
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	109b      	asrs	r3, r3, #2
 8007b5e:	1e5a      	subs	r2, r3, #1
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b64:	bf00      	nop
 8007b66:	3720      	adds	r7, #32
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <luaD_tryfuncTM>:
/*
** Check whether 'func' has a '__call' metafield. If so, put it in the
** stack, below original 'func', so that 'luaD_precall' can call it. Raise
** an error if there is no '__call' metafield.
*/
StkId luaD_tryfuncTM (lua_State *L, StkId func) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	; 0x28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  const TValue *tm;
  StkId p;
  checkstackGCp(L, 1, func);  /* space for metamethod */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	bfd4      	ite	le
 8007b84:	2301      	movle	r3, #1
 8007b86:	2300      	movgt	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d016      	beq.n	8007bbc <luaD_tryfuncTM+0x50>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	623b      	str	r3, [r7, #32]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dd02      	ble.n	8007ba8 <luaD_tryfuncTM+0x3c>
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f003 f958 	bl	800ae58 <luaC_step>
 8007ba8:	2201      	movs	r2, #1
 8007baa:	2101      	movs	r1, #1
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fdd1 	bl	8007754 <luaD_growstack>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69da      	ldr	r2, [r3, #28]
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	4413      	add	r3, r2
 8007bba:	603b      	str	r3, [r7, #0]
  tm = luaT_gettmbyobj(L, s2v(func), TM_CALL);  /* (after previous GC) */
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2217      	movs	r2, #23
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f006 f9dc 	bl	800df80 <luaT_gettmbyobj>
 8007bc8:	61f8      	str	r0, [r7, #28]
  if (l_unlikely(ttisnil(tm)))
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	791b      	ldrb	r3, [r3, #4]
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bf0c      	ite	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	2300      	movne	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <luaD_tryfuncTM+0x7e>
    luaG_callerror(L, s2v(func));  /* nothing to call */
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff f9cb 	bl	8006f80 <luaG_callerror>
  for (p = L->top; p > func; p--)  /* open space for metamethod */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf0:	e00f      	b.n	8007c12 <luaD_tryfuncTM+0xa6>
    setobjs2s(L, p, p-1);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	3b08      	subs	r3, #8
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	791a      	ldrb	r2, [r3, #4]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	711a      	strb	r2, [r3, #4]
  for (p = L->top; p > func; p--)  /* open space for metamethod */
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	3b08      	subs	r3, #8
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
 8007c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d8eb      	bhi.n	8007bf2 <luaD_tryfuncTM+0x86>
  L->top++;  /* stack space pre-allocated by the caller */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f103 0208 	add.w	r2, r3, #8
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60da      	str	r2, [r3, #12]
  setobj2s(L, func, tm);  /* metamethod is the new function to be called */
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	6812      	ldr	r2, [r2, #0]
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	791a      	ldrb	r2, [r3, #4]
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	711a      	strb	r2, [r3, #4]
  return func;
 8007c3e:	683b      	ldr	r3, [r7, #0]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3728      	adds	r7, #40	; 0x28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <moveresults>:
** Given 'nres' results at 'firstResult', move 'wanted' of them to 'res'.
** Handle most typical cases (zero results for commands, one result for
** expressions, multiple results for tail calls/single parameters)
** separated.
*/
l_sinline void moveresults (lua_State *L, StkId res, int nres, int wanted) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08c      	sub	sp, #48	; 0x30
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	603b      	str	r3, [r7, #0]
  StkId firstresult;
  int i;
  switch (wanted) {  /* handle typical cases separately */
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d00d      	beq.n	8007c78 <moveresults+0x30>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	dc2b      	bgt.n	8007cba <moveresults+0x72>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d024      	beq.n	8007cb4 <moveresults+0x6c>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d124      	bne.n	8007cba <moveresults+0x72>
    case 0:  /* no values needed */
      L->top = res;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	60da      	str	r2, [r3, #12]
      return;
 8007c76:	e09f      	b.n	8007db8 <moveresults+0x170>
    case 1:  /* one value needed */
      if (nres == 0)   /* no results? */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d103      	bne.n	8007c86 <moveresults+0x3e>
        setnilvalue(s2v(res));  /* adjust with nil */
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	711a      	strb	r2, [r3, #4]
 8007c84:	e010      	b.n	8007ca8 <moveresults+0x60>
      else  /* at least one result */
        setobjs2s(L, res, L->top - nres);  /* move it to proper place */
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	425b      	negs	r3, r3
 8007c94:	4413      	add	r3, r2
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	791a      	ldrb	r2, [r3, #4]
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	711a      	strb	r2, [r3, #4]
      L->top = res + 1;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f103 0208 	add.w	r2, r3, #8
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	60da      	str	r2, [r3, #12]
      return;
 8007cb2:	e081      	b.n	8007db8 <moveresults+0x170>
    case LUA_MULTRET:
      wanted = nres;  /* we want all results */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	603b      	str	r3, [r7, #0]
      break;
 8007cb8:	e041      	b.n	8007d3e <moveresults+0xf6>
    default:  /* two/more results and/or to-be-closed variables */
      if (hastocloseCfunc(wanted)) {  /* to-be-closed variables? */
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc0:	da3c      	bge.n	8007d3c <moveresults+0xf4>
        ptrdiff_t savedres = savestack(L, res);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	623b      	str	r3, [r7, #32]
        L->ci->callstatus |= CIST_CLSRET;  /* in case of yields */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cda:	b292      	uxth	r2, r2
 8007cdc:	845a      	strh	r2, [r3, #34]	; 0x22
        L->ci->u2.nres = nres;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	61da      	str	r2, [r3, #28]
        luaF_close(L, res, CLOSEKTOP, 1);
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fd4b 	bl	800878a <luaF_close>
        L->ci->callstatus &= ~CIST_CLSRET;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d02:	b292      	uxth	r2, r2
 8007d04:	845a      	strh	r2, [r3, #34]	; 0x22
        if (L->hookmask)  /* if needed, call hook after '__close's */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d006      	beq.n	8007d1c <moveresults+0xd4>
          rethook(L, L->ci, nres);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4619      	mov	r1, r3
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff fec5 	bl	8007aa6 <rethook>
        res = restorestack(L, savedres);  /* close and hook can move stack */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	69da      	ldr	r2, [r3, #28]
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	4413      	add	r3, r2
 8007d24:	60bb      	str	r3, [r7, #8]
        wanted = decodeNresults(wanted);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	f06f 0302 	mvn.w	r3, #2
 8007d2c:	1a9b      	subs	r3, r3, r2
 8007d2e:	603b      	str	r3, [r7, #0]
        if (wanted == LUA_MULTRET)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d101      	bne.n	8007d3c <moveresults+0xf4>
          wanted = nres;  /* we want all results */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	603b      	str	r3, [r7, #0]
      }
      break;
 8007d3c:	bf00      	nop
  }
  /* generic case */
  firstresult = L->top - nres;  /* index of first result */
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	425b      	negs	r3, r3
 8007d48:	4413      	add	r3, r2
 8007d4a:	61fb      	str	r3, [r7, #28]
  if (nres > wanted)  /* extra results? */
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	dd01      	ble.n	8007d58 <moveresults+0x110>
    nres = wanted;  /* don't need them */
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nres; i++)  /* move all results to correct place */
 8007d58:	2300      	movs	r3, #0
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d5c:	e014      	b.n	8007d88 <moveresults+0x140>
    setobjs2s(L, res + i, firstresult + i);
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	4413      	add	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	4413      	add	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	6812      	ldr	r2, [r2, #0]
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	791a      	ldrb	r2, [r3, #4]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	711a      	strb	r2, [r3, #4]
  for (i = 0; i < nres; i++)  /* move all results to correct place */
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	3301      	adds	r3, #1
 8007d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	dbe6      	blt.n	8007d5e <moveresults+0x116>
  for (; i < wanted; i++)  /* complete wanted number of results */
 8007d90:	e008      	b.n	8007da4 <moveresults+0x15c>
    setnilvalue(s2v(res + i));
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	4413      	add	r3, r2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	711a      	strb	r2, [r3, #4]
  for (; i < wanted; i++)  /* complete wanted number of results */
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	3301      	adds	r3, #1
 8007da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	dbf2      	blt.n	8007d92 <moveresults+0x14a>
  L->top = res + wanted;  /* top points after the last result */
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	441a      	add	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	60da      	str	r2, [r3, #12]
}
 8007db8:	3730      	adds	r7, #48	; 0x30
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <luaD_poscall>:
** Finishes a function call: calls hook if necessary, moves current
** number of results to proper place, and returns to previous call
** info. If function has to close variables, hook must be called after
** that.
*/
void luaD_poscall (lua_State *L, CallInfo *ci, int nres) {
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
  int wanted = ci->nresults;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007dd0:	617b      	str	r3, [r7, #20]
  if (l_unlikely(L->hookmask && !hastocloseCfunc(wanted)))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <luaD_poscall+0x28>
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	db01      	blt.n	8007de6 <luaD_poscall+0x28>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <luaD_poscall+0x2a>
 8007de6:	2300      	movs	r3, #0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	bf14      	ite	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	2300      	moveq	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d004      	beq.n	8007e00 <luaD_poscall+0x42>
    rethook(L, ci, nres);
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff fe53 	bl	8007aa6 <rethook>
  /* move results to proper place */
  moveresults(L, ci->func, nres, wanted);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	6819      	ldr	r1, [r3, #0]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7ff ff1d 	bl	8007c48 <moveresults>
  /* function cannot be in any of these cases when returning */
  lua_assert(!(ci->callstatus &
        (CIST_HOOKED | CIST_YPCALL | CIST_FIN | CIST_TRAN | CIST_CLSRET)));
  L->ci = ci->previous;  /* back to caller (after closing variables) */
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	615a      	str	r2, [r3, #20]
}
 8007e16:	bf00      	nop
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <prepCallInfo>:

#define next_ci(L)  (L->ci->next ? L->ci->next : luaE_extendCI(L))


l_sinline CallInfo *prepCallInfo (lua_State *L, StkId func, int nret,
                                                int mask, StkId top) {
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b086      	sub	sp, #24
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
 8007e2a:	603b      	str	r3, [r7, #0]
  CallInfo *ci = L->ci = next_ci(L);  /* new frame */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <prepCallInfo+0x20>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	e003      	b.n	8007e46 <prepCallInfo+0x28>
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f003 ff9b 	bl	800bd7a <luaE_extendCI>
 8007e44:	4603      	mov	r3, r0
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	6153      	str	r3, [r2, #20]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	617b      	str	r3, [r7, #20]
  ci->func = func;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	601a      	str	r2, [r3, #0]
  ci->nresults = nret;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	b21a      	sxth	r2, r3
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	841a      	strh	r2, [r3, #32]
  ci->callstatus = mask;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	845a      	strh	r2, [r3, #34]	; 0x22
  ci->top = top;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	6a3a      	ldr	r2, [r7, #32]
 8007e6a:	605a      	str	r2, [r3, #4]
  return ci;
 8007e6c:	697b      	ldr	r3, [r7, #20]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <precallC>:

/*
** precall for C functions
*/
l_sinline int precallC (lua_State *L, StkId func, int nresults,
                                            lua_CFunction f) {
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b08a      	sub	sp, #40	; 0x28
 8007e7a:	af02      	add	r7, sp, #8
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	603b      	str	r3, [r7, #0]
  int n;  /* number of returns */
  CallInfo *ci;
  checkstackGCp(L, LUA_MINSTACK, func);  /* ensure minimum stack size */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2ba0      	cmp	r3, #160	; 0xa0
 8007e90:	bfd4      	ite	le
 8007e92:	2301      	movle	r3, #1
 8007e94:	2300      	movgt	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d016      	beq.n	8007eca <precallC+0x54>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd02      	ble.n	8007eb6 <precallC+0x40>
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f002 ffd1 	bl	800ae58 <luaC_step>
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	2114      	movs	r1, #20
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fc4a 	bl	8007754 <luaD_growstack>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	60bb      	str	r3, [r7, #8]
  L->ci = ci = prepCallInfo(L, func, nresults, CIST_C,
                               L->top + LUA_MINSTACK);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
  L->ci = ci = prepCallInfo(L, func, nresults, CIST_C,
 8007ece:	33a0      	adds	r3, #160	; 0xa0
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7ff ffa0 	bl	8007e1e <prepCallInfo>
 8007ede:	61b8      	str	r0, [r7, #24]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	615a      	str	r2, [r3, #20]
  lua_assert(ci->top <= L->stack_last);
  if (l_unlikely(L->hookmask & LUA_MASKCALL)) {
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bf14      	ite	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00f      	beq.n	8007f1c <precallC+0xa6>
    int narg = cast_int(L->top - func) - 1;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	10db      	asrs	r3, r3, #3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
    luaD_hook(L, LUA_HOOKCALL, -1, 1, narg);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7ff fce0 	bl	80078dc <luaD_hook>
  }
  lua_unlock(L);
  n = (*f)(L);  /* do the actual call */
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	4798      	blx	r3
 8007f22:	6138      	str	r0, [r7, #16]
  lua_lock(L);
  api_checknelems(L, n);
  luaD_poscall(L, ci, n);
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	69b9      	ldr	r1, [r7, #24]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7ff ff48 	bl	8007dbe <luaD_poscall>
  return n;
 8007f2e:	693b      	ldr	r3, [r7, #16]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3720      	adds	r7, #32
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <luaD_pretailcall>:
** of the current call info. 'narg1' is the number of arguments plus 1
** (so that it includes the function itself). Return the number of
** results, if it was a C function, or -1 for a Lua function.
*/
int luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func,
                                    int narg1, int delta) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08c      	sub	sp, #48	; 0x30
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
 retry:
  switch (ttypetag(s2v(func))) {
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	791b      	ldrb	r3, [r3, #4]
 8007f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f4e:	2b26      	cmp	r3, #38	; 0x26
 8007f50:	d007      	beq.n	8007f62 <luaD_pretailcall+0x2a>
 8007f52:	2b26      	cmp	r3, #38	; 0x26
 8007f54:	f300 80a0 	bgt.w	8008098 <luaD_pretailcall+0x160>
 8007f58:	2b06      	cmp	r3, #6
 8007f5a:	d017      	beq.n	8007f8c <luaD_pretailcall+0x54>
 8007f5c:	2b16      	cmp	r3, #22
 8007f5e:	d00b      	beq.n	8007f78 <luaD_pretailcall+0x40>
 8007f60:	e09a      	b.n	8008098 <luaD_pretailcall+0x160>
    case LUA_VCCL:  /* C closure */
      return precallC(L, func, LUA_MULTRET, clCvalue(s2v(func))->f);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7ff ff81 	bl	8007e76 <precallC>
 8007f74:	4603      	mov	r3, r0
 8007f76:	e098      	b.n	80080aa <luaD_pretailcall+0x172>
    case LUA_VLCF:  /* light C function */
      return precallC(L, func, LUA_MULTRET, fvalue(s2v(func)));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff ff77 	bl	8007e76 <precallC>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	e08e      	b.n	80080aa <luaD_pretailcall+0x172>
    case LUA_VLCL: {  /* Lua function */
      Proto *p = clLvalue(s2v(func))->p;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
      int fsize = p->maxstacksize;  /* frame size */
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	7a1b      	ldrb	r3, [r3, #8]
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
      int nfixparams = p->numparams;
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	799b      	ldrb	r3, [r3, #6]
 8007f9e:	623b      	str	r3, [r7, #32]
      int i;
      checkstackGCp(L, fsize - delta, func);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	10db      	asrs	r3, r3, #3
 8007fac:	4619      	mov	r1, r3
 8007fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	4299      	cmp	r1, r3
 8007fb6:	bfd4      	ite	le
 8007fb8:	2301      	movle	r3, #1
 8007fba:	2300      	movgt	r3, #0
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d019      	beq.n	8007ff6 <luaD_pretailcall+0xbe>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dd02      	ble.n	8007fdc <luaD_pretailcall+0xa4>
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f002 ff3e 	bl	800ae58 <luaC_step>
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff fbb4 	bl	8007754 <luaD_growstack>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	607b      	str	r3, [r7, #4]
      ci->func -= delta;  /* restore 'func' (if vararg) */
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	425b      	negs	r3, r3
 8008000:	441a      	add	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	601a      	str	r2, [r3, #0]
      for (i = 0; i < narg1; i++)  /* move down function and arguments */
 8008006:	2300      	movs	r3, #0
 8008008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800800a:	e015      	b.n	8008038 <luaD_pretailcall+0x100>
        setobjs2s(L, ci->func + i, func + i);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	4413      	add	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	4413      	add	r3, r2
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	6812      	ldr	r2, [r2, #0]
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	791a      	ldrb	r2, [r3, #4]
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	711a      	strb	r2, [r3, #4]
      for (i = 0; i < narg1; i++)  /* move down function and arguments */
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	3301      	adds	r3, #1
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	dbe5      	blt.n	800800c <luaD_pretailcall+0xd4>
      func = ci->func;  /* moved-down function */
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	607b      	str	r3, [r7, #4]
      for (; narg1 <= nfixparams; narg1++)
 8008046:	e008      	b.n	800805a <luaD_pretailcall+0x122>
        setnilvalue(s2v(func + narg1));  /* complete missing arguments */
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	4413      	add	r3, r2
 8008050:	2200      	movs	r2, #0
 8008052:	711a      	strb	r2, [r3, #4]
      for (; narg1 <= nfixparams; narg1++)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	429a      	cmp	r2, r3
 8008060:	ddf2      	ble.n	8008048 <luaD_pretailcall+0x110>
      ci->top = func + 1 + fsize;  /* top for new function */
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	3301      	adds	r3, #1
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	441a      	add	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	605a      	str	r2, [r3, #4]
      lua_assert(ci->top <= L->stack_last);
      ci->u.l.savedpc = p->code;  /* starting point */
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	611a      	str	r2, [r3, #16]
      ci->callstatus |= CIST_TAIL;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800807c:	f043 0320 	orr.w	r3, r3, #32
 8008080:	b29a      	uxth	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	845a      	strh	r2, [r3, #34]	; 0x22
      L->top = func + narg1;  /* set top */
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	441a      	add	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	60da      	str	r2, [r3, #12]
      return -1;
 8008092:	f04f 33ff 	mov.w	r3, #4294967295
 8008096:	e008      	b.n	80080aa <luaD_pretailcall+0x172>
    }
    default: {  /* not a function */
      func = luaD_tryfuncTM(L, func);  /* try to get '__call' metamethod */
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff fd66 	bl	8007b6c <luaD_tryfuncTM>
 80080a0:	6078      	str	r0, [r7, #4]
      /* return luaD_pretailcall(L, ci, func, narg1 + 1, delta); */
      narg1++;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	3301      	adds	r3, #1
 80080a6:	603b      	str	r3, [r7, #0]
      goto retry;  /* try again */
 80080a8:	e74d      	b.n	8007f46 <luaD_pretailcall+0xe>
    }
  }
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3730      	adds	r7, #48	; 0x30
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <luaD_precall>:
** are on the stack, right after the function.  Returns the CallInfo
** to be executed, if it was a Lua function. Otherwise (a C function)
** returns NULL, with all the results on the stack, starting at the
** original function position.
*/
CallInfo *luaD_precall (lua_State *L, StkId func, int nresults) {
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b08c      	sub	sp, #48	; 0x30
 80080b6:	af02      	add	r7, sp, #8
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
 retry:
  switch (ttypetag(s2v(func))) {
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c6:	2b26      	cmp	r3, #38	; 0x26
 80080c8:	d006      	beq.n	80080d8 <luaD_precall+0x26>
 80080ca:	2b26      	cmp	r3, #38	; 0x26
 80080cc:	dc74      	bgt.n	80081b8 <luaD_precall+0x106>
 80080ce:	2b06      	cmp	r3, #6
 80080d0:	d015      	beq.n	80080fe <luaD_precall+0x4c>
 80080d2:	2b16      	cmp	r3, #22
 80080d4:	d00a      	beq.n	80080ec <luaD_precall+0x3a>
 80080d6:	e06f      	b.n	80081b8 <luaD_precall+0x106>
    case LUA_VCCL:  /* C closure */
      precallC(L, func, nresults, clCvalue(s2v(func))->f);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff fec7 	bl	8007e76 <precallC>
      return NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e06b      	b.n	80081c4 <luaD_precall+0x112>
    case LUA_VLCF:  /* light C function */
      precallC(L, func, nresults, fvalue(s2v(func)));
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff febe 	bl	8007e76 <precallC>
      return NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e062      	b.n	80081c4 <luaD_precall+0x112>
    case LUA_VLCL: {  /* Lua function */
      CallInfo *ci;
      Proto *p = clLvalue(s2v(func))->p;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	623b      	str	r3, [r7, #32]
      int narg = cast_int(L->top - func) - 1;  /* number of real arguments */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	10db      	asrs	r3, r3, #3
 8008110:	3b01      	subs	r3, #1
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
      int nfixparams = p->numparams;
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	799b      	ldrb	r3, [r3, #6]
 8008118:	61fb      	str	r3, [r7, #28]
      int fsize = p->maxstacksize;  /* frame size */
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	7a1b      	ldrb	r3, [r3, #8]
 800811e:	61bb      	str	r3, [r7, #24]
      checkstackGCp(L, fsize, func);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	699a      	ldr	r2, [r3, #24]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	10db      	asrs	r3, r3, #3
 800812c:	461a      	mov	r2, r3
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	4293      	cmp	r3, r2
 8008132:	bfac      	ite	ge
 8008134:	2301      	movge	r3, #1
 8008136:	2300      	movlt	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d016      	beq.n	800816c <luaD_precall+0xba>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	dd02      	ble.n	8008158 <luaD_precall+0xa6>
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f002 fe80 	bl	800ae58 <luaC_step>
 8008158:	2201      	movs	r2, #1
 800815a:	69b9      	ldr	r1, [r7, #24]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff faf9 	bl	8007754 <luaD_growstack>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	69da      	ldr	r2, [r3, #28]
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	4413      	add	r3, r2
 800816a:	60bb      	str	r3, [r7, #8]
      L->ci = ci = prepCallInfo(L, func, nresults, 0, func + 1 + fsize);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	3301      	adds	r3, #1
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	4413      	add	r3, r2
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	2300      	movs	r3, #0
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff fe4d 	bl	8007e1e <prepCallInfo>
 8008184:	6138      	str	r0, [r7, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	615a      	str	r2, [r3, #20]
      ci->u.l.savedpc = p->code;  /* starting point */
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	611a      	str	r2, [r3, #16]
      for (; narg < nfixparams; narg++)
 8008194:	e00a      	b.n	80081ac <luaD_precall+0xfa>
        setnilvalue(s2v(L->top++));  /* complete missing arguments */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f103 0108 	add.w	r1, r3, #8
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	60d1      	str	r1, [r2, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	711a      	strb	r2, [r3, #4]
      for (; narg < nfixparams; narg++)
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	3301      	adds	r3, #1
 80081aa:	627b      	str	r3, [r7, #36]	; 0x24
 80081ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	dbf0      	blt.n	8008196 <luaD_precall+0xe4>
      lua_assert(ci->top <= L->stack_last);
      return ci;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	e005      	b.n	80081c4 <luaD_precall+0x112>
    }
    default: {  /* not a function */
      func = luaD_tryfuncTM(L, func);  /* try to get '__call' metamethod */
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff fcd6 	bl	8007b6c <luaD_tryfuncTM>
 80081c0:	60b8      	str	r0, [r7, #8]
      /* return luaD_precall(L, func, nresults); */
      goto retry;  /* try again with metamethod */
 80081c2:	e77c      	b.n	80080be <luaD_precall+0xc>
    }
  }
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3728      	adds	r7, #40	; 0x28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <ccall>:
/*
** Call a function (C or Lua) through C. 'inc' can be 1 (increment
** number of recursive invocations in the C stack) or nyci (the same
** plus increment number of non-yieldable calls).
*/
l_sinline void ccall (lua_State *L, StkId func, int nResults, int inc) {
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
  CallInfo *ci;
  L->nCcalls += inc;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	441a      	add	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	661a      	str	r2, [r3, #96]	; 0x60
  if (l_unlikely(getCcalls(L) >= LUAI_MAXCCALLS))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	2bc7      	cmp	r3, #199	; 0xc7
 80081ee:	bf8c      	ite	hi
 80081f0:	2301      	movhi	r3, #1
 80081f2:	2300      	movls	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <ccall+0x34>
    luaE_checkcstack(L);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f003 fe38 	bl	800be70 <luaE_checkcstack>
  if ((ci = luaD_precall(L, func, nResults)) != NULL) {  /* Lua function? */
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff ff54 	bl	80080b2 <luaD_precall>
 800820a:	6178      	str	r0, [r7, #20]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d006      	beq.n	8008220 <ccall+0x54>
    ci->callstatus = CIST_FRESH;  /* mark that it is a "fresh" execute */
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2204      	movs	r2, #4
 8008216:	845a      	strh	r2, [r3, #34]	; 0x22
    luaV_execute(L, ci);  /* call it */
 8008218:	6979      	ldr	r1, [r7, #20]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f007 fd1a 	bl	800fc54 <luaV_execute>
  }
  L->nCcalls -= inc;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	1ad2      	subs	r2, r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800822c:	bf00      	nop
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <luaD_call>:


/*
** External interface for 'ccall'
*/
void luaD_call (lua_State *L, StkId func, int nResults) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  ccall(L, func, nResults, 1);
 8008240:	2301      	movs	r3, #1
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f7ff ffc0 	bl	80081cc <ccall>
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <luaD_callnoyield>:


/*
** Similar to 'luaD_call', but does not allow yields during the call.
*/
void luaD_callnoyield (lua_State *L, StkId func, int nResults) {
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  ccall(L, func, nResults, nyci);
 8008260:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7ff ffaf 	bl	80081cc <ccall>
}
 800826e:	bf00      	nop
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <closepaux>:


/*
** Auxiliary function to call 'luaF_close' in protected mode.
*/
static void closepaux (lua_State *L, void *ud) {
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
  struct CloseP *pcl = cast(struct CloseP *, ud);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	60fb      	str	r3, [r7, #12]
  luaF_close(L, pcl->level, pcl->status, 0);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6819      	ldr	r1, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	2300      	movs	r3, #0
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa7b 	bl	800878a <luaF_close>
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <luaD_closeprotected>:

/*
** Calls 'luaF_close' in protected mode. Return the original status
** or, in case of errors, the new status.
*/
int luaD_closeprotected (lua_State *L, ptrdiff_t level, int status) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  CallInfo *old_ci = L->ci;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	61fb      	str	r3, [r7, #28]
  lu_byte old_allowhooks = L->allowhook;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	79db      	ldrb	r3, [r3, #7]
 80082b2:	76fb      	strb	r3, [r7, #27]
  for (;;) {  /* keep closing upvalues until no more errors */
    struct CloseP pcl;
    pcl.level = restorestack(L, level); pcl.status = status;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4413      	add	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	617b      	str	r3, [r7, #20]
    status = luaD_rawrunprotected(L, &closepaux, &pcl);
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	461a      	mov	r2, r3
 80082c8:	490c      	ldr	r1, [pc, #48]	; (80082fc <luaD_closeprotected+0x60>)
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff f95b 	bl	8007586 <luaD_rawrunprotected>
 80082d0:	6078      	str	r0, [r7, #4]
    if (l_likely(status == LUA_OK))  /* no more errors? */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bf0c      	ite	eq
 80082d8:	2301      	moveq	r3, #1
 80082da:	2300      	movne	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <luaD_closeprotected+0x4a>
      return pcl.status;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	e006      	b.n	80082f4 <luaD_closeprotected+0x58>
    else {  /* an error occurred; restore saved state and repeat */
      L->ci = old_ci;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	615a      	str	r2, [r3, #20]
      L->allowhook = old_allowhooks;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	7efa      	ldrb	r2, [r7, #27]
 80082f0:	71da      	strb	r2, [r3, #7]
  for (;;) {  /* keep closing upvalues until no more errors */
 80082f2:	e7df      	b.n	80082b4 <luaD_closeprotected+0x18>
    }
  }
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3720      	adds	r7, #32
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	08008277 	.word	0x08008277

08008300 <luaD_pcall>:
** Call the C function 'func' in protected mode, restoring basic
** thread information ('allowhook', etc.) and in particular
** its stack level in case of errors.
*/
int luaD_pcall (lua_State *L, Pfunc func, void *u,
                ptrdiff_t old_top, ptrdiff_t ef) {
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	603b      	str	r3, [r7, #0]
  int status;
  CallInfo *old_ci = L->ci;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	61bb      	str	r3, [r7, #24]
  lu_byte old_allowhooks = L->allowhook;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	79db      	ldrb	r3, [r3, #7]
 8008318:	75fb      	strb	r3, [r7, #23]
  ptrdiff_t old_errfunc = L->errfunc;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831e:	613b      	str	r3, [r7, #16]
  L->errfunc = ef;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008324:	65da      	str	r2, [r3, #92]	; 0x5c
  status = luaD_rawrunprotected(L, func, u);
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f7ff f92b 	bl	8007586 <luaD_rawrunprotected>
 8008330:	61f8      	str	r0, [r7, #28]
  if (l_unlikely(status != LUA_OK)) {  /* an error occurred? */
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	2b00      	cmp	r3, #0
 8008336:	bf14      	ite	ne
 8008338:	2301      	movne	r3, #1
 800833a:	2300      	moveq	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d017      	beq.n	8008372 <luaD_pcall+0x72>
    L->ci = old_ci;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	615a      	str	r2, [r3, #20]
    L->allowhook = old_allowhooks;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	7dfa      	ldrb	r2, [r7, #23]
 800834c:	71da      	strb	r2, [r3, #7]
    status = luaD_closeprotected(L, old_top, status);
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff ffa2 	bl	800829c <luaD_closeprotected>
 8008358:	61f8      	str	r0, [r7, #28]
    luaD_seterrorobj(L, status, restorestack(L, old_top));
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	69da      	ldr	r2, [r3, #28]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	4413      	add	r3, r2
 8008362:	461a      	mov	r2, r3
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff f86e 	bl	8007448 <luaD_seterrorobj>
    luaD_shrinkstack(L);   /* restore stack size in case of overflow */
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7ff fa7d 	bl	800786c <luaD_shrinkstack>
  }
  L->errfunc = old_errfunc;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	65da      	str	r2, [r3, #92]	; 0x5c
  return status;
 8008378:	69fb      	ldr	r3, [r7, #28]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <luaF_newLclosure>:
  c->nupvalues = cast_byte(nupvals);
  return c;
}


LClosure *luaF_newLclosure (lua_State *L, int nupvals) {
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
  GCObject *o = luaC_newobj(L, LUA_VLCL, sizeLclosure(nupvals));
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	3304      	adds	r3, #4
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	461a      	mov	r2, r3
 8008394:	2106      	movs	r1, #6
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fc15 	bl	8008bc6 <luaC_newobj>
 800839c:	60f8      	str	r0, [r7, #12]
  LClosure *c = gco2lcl(o);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	60bb      	str	r3, [r7, #8]
  c->p = NULL;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	60da      	str	r2, [r3, #12]
  c->nupvalues = cast_byte(nupvals);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	719a      	strb	r2, [r3, #6]
  while (nupvals--) c->upvals[nupvals] = NULL;
 80083b0:	e005      	b.n	80083be <luaF_newLclosure+0x3c>
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	3204      	adds	r2, #4
 80083b8:	2100      	movs	r1, #0
 80083ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	1e5a      	subs	r2, r3, #1
 80083c2:	603a      	str	r2, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f4      	bne.n	80083b2 <luaF_newLclosure+0x30>
  return c;
 80083c8:	68bb      	ldr	r3, [r7, #8]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <newupval>:

/*
** Create a new upvalue at the given level, and link it to the list of
** open upvalues of 'L' after entry 'prev'.
**/
static UpVal *newupval (lua_State *L, int tbc, StkId level, UpVal **prev) {
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b088      	sub	sp, #32
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	603b      	str	r3, [r7, #0]
  GCObject *o = luaC_newobj(L, LUA_VUPVAL, sizeof(UpVal));
 80083e0:	2214      	movs	r2, #20
 80083e2:	2109      	movs	r1, #9
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fbee 	bl	8008bc6 <luaC_newobj>
 80083ea:	61f8      	str	r0, [r7, #28]
  UpVal *uv = gco2upv(o);
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	61bb      	str	r3, [r7, #24]
  UpVal *next = *prev;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	617b      	str	r3, [r7, #20]
  uv->v = s2v(level);  /* current value lives in the stack */
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	609a      	str	r2, [r3, #8]
  uv->tbc = tbc;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	719a      	strb	r2, [r3, #6]
  uv->u.open.next = next;  /* link it to list of open upvalues */
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	60da      	str	r2, [r3, #12]
  uv->u.open.previous = prev;
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	611a      	str	r2, [r3, #16]
  if (next)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <newupval+0x4e>
    next->u.open.previous = &uv->u.open.next;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f103 020c 	add.w	r2, r3, #12
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	611a      	str	r2, [r3, #16]
  *prev = uv;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	601a      	str	r2, [r3, #0]
  if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	429a      	cmp	r2, r3
 800842e:	d10a      	bne.n	8008446 <newupval+0x74>
    L->twups = G(L)->twups;  /* link it to the list */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	62da      	str	r2, [r3, #44]	; 0x2c
    G(L)->twups = L;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
  return uv;
 8008446:	69bb      	ldr	r3, [r7, #24]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3720      	adds	r7, #32
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <luaF_findupval>:

/*
** Find and reuse, or create if it does not exist, an upvalue
** at the given level.
*/
UpVal *luaF_findupval (lua_State *L, StkId level) {
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  UpVal **pp = &L->openupval;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3320      	adds	r3, #32
 800845e:	60fb      	str	r3, [r7, #12]
  UpVal *p;
  lua_assert(isintwups(L) || L->openupval == NULL);
  while ((p = *pp) != NULL && uplevel(p) >= level) {  /* search for it */
 8008460:	e009      	b.n	8008476 <luaF_findupval+0x26>
    lua_assert(!isdead(G(L), p));
    if (uplevel(p) == level)  /* corresponding upvalue? */
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d101      	bne.n	8008470 <luaF_findupval+0x20>
      return p;  /* return it */
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	e014      	b.n	800849a <luaF_findupval+0x4a>
    pp = &p->u.open.next;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	330c      	adds	r3, #12
 8008474:	60fb      	str	r3, [r7, #12]
  while ((p = *pp) != NULL && uplevel(p) >= level) {  /* search for it */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60bb      	str	r3, [r7, #8]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <luaF_findupval+0x3c>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d9ea      	bls.n	8008462 <luaF_findupval+0x12>
  }
  /* not found: create a new upvalue after 'pp' */
  return newupval(L, 0, level, pp);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	2100      	movs	r1, #0
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff ff9d 	bl	80083d2 <newupval>
 8008498:	4603      	mov	r3, r0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <callclosemethod>:
/*
** Call closing method for object 'obj' with error message 'err'. The
** boolean 'yy' controls whether the call is yieldable.
** (This function assumes EXTRA_STACK.)
*/
static void callclosemethod (lua_State *L, TValue *obj, TValue *err, int yy) {
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b08c      	sub	sp, #48	; 0x30
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	603b      	str	r3, [r7, #0]
  StkId top = L->top;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  const TValue *tm = luaT_gettmbyobj(L, obj, TM_CLOSE);
 80084b6:	2218      	movs	r2, #24
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f005 fd60 	bl	800df80 <luaT_gettmbyobj>
 80084c0:	62b8      	str	r0, [r7, #40]	; 0x28
  setobj2s(L, top, tm);  /* will call metamethod... */
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	627b      	str	r3, [r7, #36]	; 0x24
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	623b      	str	r3, [r7, #32]
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	791a      	ldrb	r2, [r3, #4]
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	711a      	strb	r2, [r3, #4]
  setobj2s(L, top + 1, obj);  /* with 'self' as the 1st argument */
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	3308      	adds	r3, #8
 80084de:	61fb      	str	r3, [r7, #28]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	791a      	ldrb	r2, [r3, #4]
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	711a      	strb	r2, [r3, #4]
  setobj2s(L, top + 2, err);  /* and error msg. as 2nd argument */
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	3310      	adds	r3, #16
 80084f8:	617b      	str	r3, [r7, #20]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	6812      	ldr	r2, [r2, #0]
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	791a      	ldrb	r2, [r3, #4]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	711a      	strb	r2, [r3, #4]
  L->top = top + 3;  /* add function and arguments */
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	f103 0218 	add.w	r2, r3, #24
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	60da      	str	r2, [r3, #12]
  if (yy)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <callclosemethod+0x88>
    luaD_call(L, top, 0);
 800851e:	2200      	movs	r2, #0
 8008520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff fe86 	bl	8008234 <luaD_call>
  else
    luaD_callnoyield(L, top, 0);
}
 8008528:	e004      	b.n	8008534 <callclosemethod+0x92>
    luaD_callnoyield(L, top, 0);
 800852a:	2200      	movs	r2, #0
 800852c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fe90 	bl	8008254 <luaD_callnoyield>
}
 8008534:	bf00      	nop
 8008536:	3730      	adds	r7, #48	; 0x30
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <checkclosemth>:

/*
** Check whether object at given level has a close metamethod and raise
** an error if not.
*/
static void checkclosemth (lua_State *L, StkId level) {
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  const TValue *tm = luaT_gettmbyobj(L, s2v(level), TM_CLOSE);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2218      	movs	r2, #24
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f005 fd17 	bl	800df80 <luaT_gettmbyobj>
 8008552:	6138      	str	r0, [r7, #16]
  if (ttisnil(tm)) {  /* no metamethod? */
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	791b      	ldrb	r3, [r3, #4]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	2b00      	cmp	r3, #0
 800855e:	d118      	bne.n	8008592 <checkclosemth+0x56>
    int idx = cast_int(level - L->ci->func);  /* variable index */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	10db      	asrs	r3, r3, #3
 800856c:	60fb      	str	r3, [r7, #12]
    const char *vname = luaG_findlocal(L, L->ci, idx, NULL);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6959      	ldr	r1, [r3, #20]
 8008572:	2300      	movs	r3, #0
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fe f858 	bl	800662c <luaG_findlocal>
 800857c:	6178      	str	r0, [r7, #20]
    if (vname == NULL) vname = "?";
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <checkclosemth+0x4c>
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <checkclosemth+0x60>)
 8008586:	617b      	str	r3, [r7, #20]
    luaG_runerror(L, "variable '%s' got a non-closable value", vname);
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	4905      	ldr	r1, [pc, #20]	; (80085a0 <checkclosemth+0x64>)
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7fe fe16 	bl	80071be <luaG_runerror>
  }
}
 8008592:	bf00      	nop
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	0801eb54 	.word	0x0801eb54
 80085a0:	0801eb58 	.word	0x0801eb58

080085a4 <prepcallclosemth>:
** If status is CLOSEKTOP, the call to the closing method will be pushed
** at the top of the stack. Otherwise, values can be pushed right after
** the 'level' of the upvalue being closed, as everything after that
** won't be used again.
*/
static void prepcallclosemth (lua_State *L, StkId level, int status, int yy) {
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
  TValue *uv = s2v(level);  /* value being closed */
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	613b      	str	r3, [r7, #16]
  TValue *errobj;
  if (status == CLOSEKTOP)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085bc:	d104      	bne.n	80085c8 <prepcallclosemth+0x24>
    errobj = &G(L)->nilvalue;  /* error object is nil */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	332c      	adds	r3, #44	; 0x2c
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	e009      	b.n	80085dc <prepcallclosemth+0x38>
  else {  /* 'luaD_seterrorobj' will set top to level + 2 */
    errobj = s2v(level + 1);  /* error object goes after 'uv' */
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3308      	adds	r3, #8
 80085cc:	617b      	str	r3, [r7, #20]
    luaD_seterrorobj(L, status, level + 1);  /* set error object */
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	3308      	adds	r3, #8
 80085d2:	461a      	mov	r2, r3
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7fe ff36 	bl	8007448 <luaD_seterrorobj>
  }
  callclosemethod(L, uv, errobj, yy);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	6939      	ldr	r1, [r7, #16]
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff ff5d 	bl	80084a2 <callclosemethod>
}
 80085e8:	bf00      	nop
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <luaF_newtbcupval>:


/*
** Insert a variable in the list of to-be-closed variables.
*/
void luaF_newtbcupval (lua_State *L, StkId level) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  lua_assert(level > L->tbclist);
  if (l_isfalse(s2v(level)))
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	791b      	ldrb	r3, [r3, #4]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d02a      	beq.n	8008658 <luaF_newtbcupval+0x68>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	791b      	ldrb	r3, [r3, #4]
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	2b00      	cmp	r3, #0
 800860c:	d024      	beq.n	8008658 <luaF_newtbcupval+0x68>
    return;  /* false doesn't need to be closed */
  checkclosemth(L, level);  /* value must have a close method */
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff ff93 	bl	800853c <checkclosemth>
  while (cast_uint(level - L->tbclist) > MAXDELTA) {
 8008616:	e00b      	b.n	8008630 <luaF_newtbcupval+0x40>
    L->tbclist += MAXDELTA;  /* create a dummy node at maximum delta */
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8008620:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6253      	str	r3, [r2, #36]	; 0x24
    L->tbclist->tbclist.delta = 0;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2200      	movs	r2, #0
 800862e:	80da      	strh	r2, [r3, #6]
  while (cast_uint(level - L->tbclist) > MAXDELTA) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	461a      	mov	r2, r3
 800863a:	4b09      	ldr	r3, [pc, #36]	; (8008660 <luaF_newtbcupval+0x70>)
 800863c:	429a      	cmp	r2, r3
 800863e:	d8eb      	bhi.n	8008618 <luaF_newtbcupval+0x28>
  }
  level->tbclist.delta = cast(unsigned short, level - L->tbclist);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	10db      	asrs	r3, r3, #3
 800864a:	b29a      	uxth	r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	80da      	strh	r2, [r3, #6]
  L->tbclist = level;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	625a      	str	r2, [r3, #36]	; 0x24
 8008656:	e000      	b.n	800865a <luaF_newtbcupval+0x6a>
    return;  /* false doesn't need to be closed */
 8008658:	bf00      	nop
}
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	0007fff8 	.word	0x0007fff8

08008664 <luaF_unlinkupval>:


void luaF_unlinkupval (UpVal *uv) {
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  lua_assert(upisopen(uv));
  *uv->u.open.previous = uv->u.open.next;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	68d2      	ldr	r2, [r2, #12]
 8008674:	601a      	str	r2, [r3, #0]
  if (uv->u.open.next)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <luaF_unlinkupval+0x24>
    uv->u.open.next->u.open.previous = uv->u.open.previous;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6912      	ldr	r2, [r2, #16]
 8008686:	611a      	str	r2, [r3, #16]
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <luaF_closeupval>:


/*
** Close all upvalues up to the given stack level.
*/
void luaF_closeupval (lua_State *L, StkId level) {
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  UpVal *uv;
  StkId upl;  /* stack index pointed by 'uv' */
  while ((uv = L->openupval) != NULL && (upl = uplevel(uv)) >= level) {
 800869e:	e03c      	b.n	800871a <luaF_closeupval+0x86>
    TValue *slot = &uv->u.value;  /* new position for value */
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	330c      	adds	r3, #12
 80086a4:	617b      	str	r3, [r7, #20]
    lua_assert(uplevel(uv) < L->top);
    luaF_unlinkupval(uv);  /* remove upvalue from 'openupval' list */
 80086a6:	69f8      	ldr	r0, [r7, #28]
 80086a8:	f7ff ffdc 	bl	8008664 <luaF_unlinkupval>
    setobj(L, slot, uv->v);  /* move value to upvalue slot */
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	613b      	str	r3, [r7, #16]
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	6812      	ldr	r2, [r2, #0]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	791a      	ldrb	r2, [r3, #4]
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	711a      	strb	r2, [r3, #4]
    uv->v = slot;  /* now current value lives here */
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	609a      	str	r2, [r3, #8]
    if (!iswhite(uv)) {  /* neither white nor dead? */
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	795b      	ldrb	r3, [r3, #5]
 80086d0:	f003 0318 	and.w	r3, r3, #24
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d120      	bne.n	800871a <luaF_closeupval+0x86>
      nw2black(uv);  /* closed upvalues cannot be gray */
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	795b      	ldrb	r3, [r3, #5]
 80086dc:	f043 0320 	orr.w	r3, r3, #32
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	715a      	strb	r2, [r3, #5]
      luaC_barrier(L, uv, slot);
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	791b      	ldrb	r3, [r3, #4]
 80086ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d013      	beq.n	800871a <luaF_closeupval+0x86>
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	795b      	ldrb	r3, [r3, #5]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00d      	beq.n	800871a <luaF_closeupval+0x86>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	795b      	ldrb	r3, [r3, #5]
 8008704:	f003 0318 	and.w	r3, r3, #24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d006      	beq.n	800871a <luaF_closeupval+0x86>
 800870c:	69f9      	ldr	r1, [r7, #28]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f9b3 	bl	8008a80 <luaC_barrier_>
  while ((uv = L->openupval) != NULL && (upl = uplevel(uv)) >= level) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d006      	beq.n	8008734 <luaF_closeupval+0xa0>
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	61bb      	str	r3, [r7, #24]
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d2b5      	bcs.n	80086a0 <luaF_closeupval+0xc>
    }
  }
}
 8008734:	bf00      	nop
 8008736:	3720      	adds	r7, #32
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <poptbclist>:


/*
** Remove firt element from the tbclist plus its dummy nodes.
*/
static void poptbclist (lua_State *L) {
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  StkId tbc = L->tbclist;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	60fb      	str	r3, [r7, #12]
  lua_assert(tbc->tbclist.delta > 0);  /* first element cannot be dummy */
  tbc -= tbc->tbclist.delta;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	88db      	ldrh	r3, [r3, #6]
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	425b      	negs	r3, r3
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
  while (tbc > L->stack && tbc->tbclist.delta == 0)
 8008758:	e005      	b.n	8008766 <poptbclist+0x2a>
    tbc -= MAXDELTA;  /* remove dummy nodes */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f5a3 23ff 	sub.w	r3, r3, #522240	; 0x7f800
 8008760:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8008764:	60fb      	str	r3, [r7, #12]
  while (tbc > L->stack && tbc->tbclist.delta == 0)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	429a      	cmp	r2, r3
 800876e:	d903      	bls.n	8008778 <poptbclist+0x3c>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	88db      	ldrh	r3, [r3, #6]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0f0      	beq.n	800875a <poptbclist+0x1e>
  L->tbclist = tbc;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <luaF_close>:

/*
** Close all upvalues and to-be-closed variables up to the given stack
** level.
*/
void luaF_close (lua_State *L, StkId level, int status, int yy) {
 800878a:	b580      	push	{r7, lr}
 800878c:	b086      	sub	sp, #24
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	607a      	str	r2, [r7, #4]
 8008796:	603b      	str	r3, [r7, #0]
  ptrdiff_t levelrel = savestack(L, level);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	617b      	str	r3, [r7, #20]
  luaF_closeupval(L, level);  /* first, close the upvalues */
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff ff75 	bl	8008694 <luaF_closeupval>
  while (L->tbclist >= level) {  /* traverse tbc's down to that level */
 80087aa:	e010      	b.n	80087ce <luaF_close+0x44>
    StkId tbc = L->tbclist;  /* get variable index */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	613b      	str	r3, [r7, #16]
    poptbclist(L);  /* remove it from list */
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7ff ffc2 	bl	800873c <poptbclist>
    prepcallclosemth(L, tbc, status, yy);  /* close variable */
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	6939      	ldr	r1, [r7, #16]
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fef0 	bl	80085a4 <prepcallclosemth>
    level = restorestack(L, levelrel);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	4413      	add	r3, r2
 80087cc:	60bb      	str	r3, [r7, #8]
  while (L->tbclist >= level) {  /* traverse tbc's down to that level */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d9e9      	bls.n	80087ac <luaF_close+0x22>
  }
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <luaF_freeproto>:
  f->source = NULL;
  return f;
}


void luaF_freeproto (lua_State *L, Proto *f) {
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  luaM_freearray(L, f->code, f->sizecode);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	461a      	mov	r2, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f002 fbd5 	bl	800afa8 <luaM_free_>
  luaM_freearray(L, f->p, f->sizep);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	461a      	mov	r2, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f002 fbcc 	bl	800afa8 <luaM_free_>
  luaM_freearray(L, f->k, f->sizek);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	461a      	mov	r2, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f002 fbc3 	bl	800afa8 <luaM_free_>
  luaM_freearray(L, f->lineinfo, f->sizelineinfo);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	461a      	mov	r2, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f002 fbbb 	bl	800afa8 <luaM_free_>
  luaM_freearray(L, f->abslineinfo, f->sizeabslineinfo);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	461a      	mov	r2, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f002 fbb2 	bl	800afa8 <luaM_free_>
  luaM_freearray(L, f->locvars, f->sizelocvars);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	461a      	mov	r2, r3
 800884e:	4613      	mov	r3, r2
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	461a      	mov	r2, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f002 fba5 	bl	800afa8 <luaM_free_>
  luaM_freearray(L, f->upvalues, f->sizeupvalues);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	461a      	mov	r2, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f002 fb9c 	bl	800afa8 <luaM_free_>
  luaM_free(L, f);
 8008870:	2254      	movs	r2, #84	; 0x54
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f002 fb97 	bl	800afa8 <luaM_free_>
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <luaF_getlocalname>:

/*
** Look for n-th local variable at line 'line' in function 'func'.
** Returns NULL if not found.
*/
const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {
 8008882:	b480      	push	{r7}
 8008884:	b087      	sub	sp, #28
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i<f->sizelocvars && f->locvars[i].startpc <= pc; i++) {
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	e01f      	b.n	80088d4 <luaF_getlocalname+0x52>
    if (pc < f->locvars[i].endpc) {  /* is variable active? */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4613      	mov	r3, r2
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	da10      	bge.n	80088ce <luaF_getlocalname+0x4c>
      local_number--;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	60bb      	str	r3, [r7, #8]
      if (local_number == 0)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10a      	bne.n	80088ce <luaF_getlocalname+0x4c>
        return getstr(f->locvars[i].varname);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4613      	mov	r3, r2
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3310      	adds	r3, #16
 80088cc:	e014      	b.n	80088f8 <luaF_getlocalname+0x76>
  for (i = 0; i<f->sizelocvars && f->locvars[i].startpc <= pc; i++) {
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3301      	adds	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	429a      	cmp	r2, r3
 80088dc:	da0b      	bge.n	80088f6 <luaF_getlocalname+0x74>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	4613      	mov	r3, r2
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	dace      	bge.n	8008894 <luaF_getlocalname+0x12>
    }
  }
  return NULL;  /* not found */
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <getgclist>:
** one after last element in a hash array
*/
#define gnodelast(h)	gnode(h, cast_sizet(sizenode(h)))


static GCObject **getgclist (GCObject *o) {
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  switch (o->tt) {
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	791b      	ldrb	r3, [r3, #4]
 8008910:	3b05      	subs	r3, #5
 8008912:	2b21      	cmp	r3, #33	; 0x21
 8008914:	d85a      	bhi.n	80089cc <getgclist+0xc8>
 8008916:	a201      	add	r2, pc, #4	; (adr r2, 800891c <getgclist+0x18>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	080089a5 	.word	0x080089a5
 8008920:	080089ab 	.word	0x080089ab
 8008924:	080089c3 	.word	0x080089c3
 8008928:	080089b7 	.word	0x080089b7
 800892c:	080089cd 	.word	0x080089cd
 8008930:	080089bd 	.word	0x080089bd
 8008934:	080089cd 	.word	0x080089cd
 8008938:	080089cd 	.word	0x080089cd
 800893c:	080089cd 	.word	0x080089cd
 8008940:	080089cd 	.word	0x080089cd
 8008944:	080089cd 	.word	0x080089cd
 8008948:	080089cd 	.word	0x080089cd
 800894c:	080089cd 	.word	0x080089cd
 8008950:	080089cd 	.word	0x080089cd
 8008954:	080089cd 	.word	0x080089cd
 8008958:	080089cd 	.word	0x080089cd
 800895c:	080089cd 	.word	0x080089cd
 8008960:	080089cd 	.word	0x080089cd
 8008964:	080089cd 	.word	0x080089cd
 8008968:	080089cd 	.word	0x080089cd
 800896c:	080089cd 	.word	0x080089cd
 8008970:	080089cd 	.word	0x080089cd
 8008974:	080089cd 	.word	0x080089cd
 8008978:	080089cd 	.word	0x080089cd
 800897c:	080089cd 	.word	0x080089cd
 8008980:	080089cd 	.word	0x080089cd
 8008984:	080089cd 	.word	0x080089cd
 8008988:	080089cd 	.word	0x080089cd
 800898c:	080089cd 	.word	0x080089cd
 8008990:	080089cd 	.word	0x080089cd
 8008994:	080089cd 	.word	0x080089cd
 8008998:	080089cd 	.word	0x080089cd
 800899c:	080089cd 	.word	0x080089cd
 80089a0:	080089b1 	.word	0x080089b1
    case LUA_VTABLE: return &gco2t(o)->gclist;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	331c      	adds	r3, #28
 80089a8:	e011      	b.n	80089ce <getgclist+0xca>
    case LUA_VLCL: return &gco2lcl(o)->gclist;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3308      	adds	r3, #8
 80089ae:	e00e      	b.n	80089ce <getgclist+0xca>
    case LUA_VCCL: return &gco2ccl(o)->gclist;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3308      	adds	r3, #8
 80089b4:	e00b      	b.n	80089ce <getgclist+0xca>
    case LUA_VTHREAD: return &gco2th(o)->gclist;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3328      	adds	r3, #40	; 0x28
 80089ba:	e008      	b.n	80089ce <getgclist+0xca>
    case LUA_VPROTO: return &gco2p(o)->gclist;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3350      	adds	r3, #80	; 0x50
 80089c0:	e005      	b.n	80089ce <getgclist+0xca>
    case LUA_VUSERDATA: {
      Udata *u = gco2u(o);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	60fb      	str	r3, [r7, #12]
      lua_assert(u->nuvalue > 0);
      return &u->gclist;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3310      	adds	r3, #16
 80089ca:	e000      	b.n	80089ce <getgclist+0xca>
    }
    default: lua_assert(0); return 0;
 80089cc:	2300      	movs	r3, #0
  }
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop

080089dc <linkgclist_>:
** Link a collectable object 'o' with a known type into the list 'p'.
** (Must be a macro to access the 'gclist' field in different types.)
*/
#define linkgclist(o,p)	linkgclist_(obj2gco(o), &(o)->gclist, &(p))

static void linkgclist_ (GCObject *o, GCObject **pnext, GCObject **list) {
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  lua_assert(!isgray(o));  /* cannot be in a gray list */
  *pnext = *list;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	601a      	str	r2, [r3, #0]
  *list = o;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	601a      	str	r2, [r3, #0]
  set2gray(o);  /* now it is */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	795b      	ldrb	r3, [r3, #5]
 80089fa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	715a      	strb	r2, [r3, #5]
}
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <clearkey>:
** entry in the table: its removal could break a chain and could break
** a table traversal.  Other places never manipulate dead keys, because
** its associated empty value is enough to signal that the entry is
** logically empty.
*/
static void clearkey (Node *n) {
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  lua_assert(isempty(gval(n)));
  if (keyiscollectable(n))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	795b      	ldrb	r3, [r3, #5]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <clearkey+0x1a>
    setdeadkey(n);  /* unused key; remove it */
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	220b      	movs	r2, #11
 8008a28:	715a      	strb	r2, [r3, #5]
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <iscleared>:
** table. Non-collectable objects are never removed from weak
** tables. Strings behave as 'values', so are never removed too. for
** other objects: if really collected, cannot keep them; for objects
** being finalized, keep them in keys, but not in values
*/
static int iscleared (global_State *g, const GCObject *o) {
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  if (o == NULL) return 0;  /* non-collectable value */
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <iscleared+0x14>
 8008a46:	2300      	movs	r3, #0
 8008a48:	e016      	b.n	8008a78 <iscleared+0x42>
  else if (novariant(o->tt) == LUA_TSTRING) {
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	791b      	ldrb	r3, [r3, #4]
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d10c      	bne.n	8008a70 <iscleared+0x3a>
    markobject(g, o);  /* strings are 'values', so are never weak */
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	795b      	ldrb	r3, [r3, #5]
 8008a5a:	f003 0318 	and.w	r3, r3, #24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d004      	beq.n	8008a6c <iscleared+0x36>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f8d8 	bl	8008c1c <reallymarkobject>
    return 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e003      	b.n	8008a78 <iscleared+0x42>
  }
  else return iswhite(o);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	795b      	ldrb	r3, [r3, #5]
 8008a74:	f003 0318 	and.w	r3, r3, #24
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <luaC_barrier_>:
** incremental sweep phase, it clears the black object to white (sweep
** it) to avoid other barrier calls for this same object. (That cannot
** be done is generational mode, as its sweep does not distinguish
** whites from deads.)
*/
void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
  global_State *g = G(L);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	617b      	str	r3, [r7, #20]
  lua_assert(isblack(o) && iswhite(v) && !isdead(g, v) && !isdead(g, o));
  if (keepinvariant(g)) {  /* must keep invariant? */
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d816      	bhi.n	8008aca <luaC_barrier_+0x4a>
    reallymarkobject(g, v);  /* restore invariant */
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	6978      	ldr	r0, [r7, #20]
 8008aa0:	f000 f8bc 	bl	8008c1c <reallymarkobject>
    if (isold(o)) {
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	795b      	ldrb	r3, [r3, #5]
 8008aa8:	f003 0306 	and.w	r3, r3, #6
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d023      	beq.n	8008af8 <luaC_barrier_+0x78>
      lua_assert(!isold(v));  /* white object could not be old */
      setage(v, G_OLD0);  /* restore generational invariant */
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	795b      	ldrb	r3, [r3, #5]
 8008ab4:	b25b      	sxtb	r3, r3
 8008ab6:	f023 0307 	bic.w	r3, r3, #7
 8008aba:	b25b      	sxtb	r3, r3
 8008abc:	f043 0302 	orr.w	r3, r3, #2
 8008ac0:	b25b      	sxtb	r3, r3
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	715a      	strb	r2, [r3, #5]
  else {  /* sweep phase */
    lua_assert(issweepphase(g));
    if (g->gckind == KGC_INC)  /* incremental mode? */
      makewhite(g, o);  /* mark 'o' as white to avoid other barriers */
  }
}
 8008ac8:	e016      	b.n	8008af8 <luaC_barrier_+0x78>
    if (g->gckind == KGC_INC)  /* incremental mode? */
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d111      	bne.n	8008af8 <luaC_barrier_+0x78>
      makewhite(g, o);  /* mark 'o' as white to avoid other barriers */
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	795b      	ldrb	r3, [r3, #5]
 8008ad8:	b25b      	sxtb	r3, r3
 8008ada:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008ade:	b25a      	sxtb	r2, r3
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ae6:	b25b      	sxtb	r3, r3
 8008ae8:	f003 0318 	and.w	r3, r3, #24
 8008aec:	b25b      	sxtb	r3, r3
 8008aee:	4313      	orrs	r3, r2
 8008af0:	b25b      	sxtb	r3, r3
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	715a      	strb	r2, [r3, #5]
}
 8008af8:	bf00      	nop
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <luaC_barrierback_>:

/*
** barrier that moves collector backward, that is, mark the black object
** pointing to a white object as gray again.
*/
void luaC_barrierback_ (lua_State *L, GCObject *o) {
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	60fb      	str	r3, [r7, #12]
  lua_assert(isblack(o) && !isdead(g, o));
  lua_assert((g->gckind == KGC_GEN) == (isold(o) && getage(o) != G_TOUCHED1));
  if (getage(o) == G_TOUCHED2)  /* already in gray list? */
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	795b      	ldrb	r3, [r3, #5]
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	d107      	bne.n	8008b2c <luaC_barrierback_+0x2c>
    set2gray(o);  /* make it gray to become touched1 */
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	795b      	ldrb	r3, [r3, #5]
 8008b20:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	715a      	strb	r2, [r3, #5]
 8008b2a:	e00a      	b.n	8008b42 <luaC_barrierback_+0x42>
  else  /* link it in 'grayagain' and paint it gray */
    linkobjgclist(o, g->grayagain);
 8008b2c:	683c      	ldr	r4, [r7, #0]
 8008b2e:	6838      	ldr	r0, [r7, #0]
 8008b30:	f7ff fee8 	bl	8008904 <getgclist>
 8008b34:	4601      	mov	r1, r0
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3354      	adds	r3, #84	; 0x54
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f7ff ff4d 	bl	80089dc <linkgclist_>
  if (isold(o))  /* generational mode? */
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	795b      	ldrb	r3, [r3, #5]
 8008b46:	f003 0306 	and.w	r3, r3, #6
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <luaC_barrierback_+0x66>
    setage(o, G_TOUCHED1);  /* touched in current cycle */
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	795b      	ldrb	r3, [r3, #5]
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	f023 0307 	bic.w	r3, r3, #7
 8008b58:	b25b      	sxtb	r3, r3
 8008b5a:	f043 0305 	orr.w	r3, r3, #5
 8008b5e:	b25b      	sxtb	r3, r3
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	715a      	strb	r2, [r3, #5]
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd90      	pop	{r4, r7, pc}

08008b6e <luaC_fix>:


void luaC_fix (lua_State *L, GCObject *o) {
 8008b6e:	b480      	push	{r7}
 8008b70:	b085      	sub	sp, #20
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	60fb      	str	r3, [r7, #12]
  lua_assert(g->allgc == o);  /* object must be 1st in 'allgc' list! */
  set2gray(o);  /* they will be gray forever */
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	795b      	ldrb	r3, [r3, #5]
 8008b82:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	715a      	strb	r2, [r3, #5]
  setage(o, G_OLD);  /* and old forever */
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	795b      	ldrb	r3, [r3, #5]
 8008b90:	b25b      	sxtb	r3, r3
 8008b92:	f023 0307 	bic.w	r3, r3, #7
 8008b96:	b25b      	sxtb	r3, r3
 8008b98:	f043 0304 	orr.w	r3, r3, #4
 8008b9c:	b25b      	sxtb	r3, r3
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	715a      	strb	r2, [r3, #5]
  g->allgc = o->next;  /* remove object from 'allgc' list */
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	645a      	str	r2, [r3, #68]	; 0x44
  o->next = g->fixedgc;  /* link it to 'fixedgc' list */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	601a      	str	r2, [r3, #0]
  g->fixedgc = o;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <luaC_newobj>:

/*
** create a new collectable object (with given type and size) and link
** it to 'allgc' list.
*/
GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
  global_State *g = G(L);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	617b      	str	r3, [r7, #20]
  GCObject *o = cast(GCObject *, luaM_newobject(L, novariant(tt), sz));
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	461a      	mov	r2, r3
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f002 fa64 	bl	800b0b0 <luaM_malloc_>
 8008be8:	6138      	str	r0, [r7, #16]
  o->marked = luaC_white(g);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bf0:	f003 0318 	and.w	r3, r3, #24
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	715a      	strb	r2, [r3, #5]
  o->tt = tt;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	711a      	strb	r2, [r3, #4]
  o->next = g->allgc;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	601a      	str	r2, [r3, #0]
  g->allgc = o;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	645a      	str	r2, [r3, #68]	; 0x44
  return o;
 8008c10:	693b      	ldr	r3, [r7, #16]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <reallymarkobject>:
** gray list to be visited (and turned black) later.  Both userdata and
** upvalues can call this function recursively, but this recursion goes
** for at most two levels: An upvalue cannot refer to another upvalue
** (only closures can), and a userdata's metatable must be a table.
*/
static void reallymarkobject (global_State *g, GCObject *o) {
 8008c1c:	b590      	push	{r4, r7, lr}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  switch (o->tt) {
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	791b      	ldrb	r3, [r3, #4]
 8008c2a:	3b04      	subs	r3, #4
 8008c2c:	2b22      	cmp	r3, #34	; 0x22
 8008c2e:	f200 80b9 	bhi.w	8008da4 <reallymarkobject+0x188>
 8008c32:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <reallymarkobject+0x1c>)
 8008c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c38:	08008cc5 	.word	0x08008cc5
 8008c3c:	08008d8d 	.word	0x08008d8d
 8008c40:	08008d8d 	.word	0x08008d8d
 8008c44:	08008d45 	.word	0x08008d45
 8008c48:	08008d8d 	.word	0x08008d8d
 8008c4c:	08008cdf 	.word	0x08008cdf
 8008c50:	08008d8d 	.word	0x08008d8d
 8008c54:	08008da5 	.word	0x08008da5
 8008c58:	08008da5 	.word	0x08008da5
 8008c5c:	08008da5 	.word	0x08008da5
 8008c60:	08008da5 	.word	0x08008da5
 8008c64:	08008da5 	.word	0x08008da5
 8008c68:	08008da5 	.word	0x08008da5
 8008c6c:	08008da5 	.word	0x08008da5
 8008c70:	08008da5 	.word	0x08008da5
 8008c74:	08008da5 	.word	0x08008da5
 8008c78:	08008cc5 	.word	0x08008cc5
 8008c7c:	08008da5 	.word	0x08008da5
 8008c80:	08008da5 	.word	0x08008da5
 8008c84:	08008da5 	.word	0x08008da5
 8008c88:	08008da5 	.word	0x08008da5
 8008c8c:	08008da5 	.word	0x08008da5
 8008c90:	08008da5 	.word	0x08008da5
 8008c94:	08008da5 	.word	0x08008da5
 8008c98:	08008da5 	.word	0x08008da5
 8008c9c:	08008da5 	.word	0x08008da5
 8008ca0:	08008da5 	.word	0x08008da5
 8008ca4:	08008da5 	.word	0x08008da5
 8008ca8:	08008da5 	.word	0x08008da5
 8008cac:	08008da5 	.word	0x08008da5
 8008cb0:	08008da5 	.word	0x08008da5
 8008cb4:	08008da5 	.word	0x08008da5
 8008cb8:	08008da5 	.word	0x08008da5
 8008cbc:	08008da5 	.word	0x08008da5
 8008cc0:	08008d8d 	.word	0x08008d8d
    case LUA_VSHRSTR:
    case LUA_VLNGSTR: {
      set2black(o);  /* nothing to visit */
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	795b      	ldrb	r3, [r3, #5]
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008cce:	b25b      	sxtb	r3, r3
 8008cd0:	f043 0320 	orr.w	r3, r3, #32
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	715a      	strb	r2, [r3, #5]
      break;
 8008cdc:	e065      	b.n	8008daa <reallymarkobject+0x18e>
    }
    case LUA_VUPVAL: {
      UpVal *uv = gco2upv(o);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	60fb      	str	r3, [r7, #12]
      if (upisopen(uv))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	330c      	adds	r3, #12
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d007      	beq.n	8008cfe <reallymarkobject+0xe2>
        set2gray(uv);  /* open upvalues are kept gray */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	795b      	ldrb	r3, [r3, #5]
 8008cf2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	715a      	strb	r2, [r3, #5]
 8008cfc:	e00b      	b.n	8008d16 <reallymarkobject+0xfa>
      else
        set2black(uv);  /* closed upvalues are visited here */
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	795b      	ldrb	r3, [r3, #5]
 8008d02:	b25b      	sxtb	r3, r3
 8008d04:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008d08:	b25b      	sxtb	r3, r3
 8008d0a:	f043 0320 	orr.w	r3, r3, #32
 8008d0e:	b25b      	sxtb	r3, r3
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	715a      	strb	r2, [r3, #5]
      markvalue(g, uv->v);  /* mark its content */
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	791b      	ldrb	r3, [r3, #4]
 8008d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d041      	beq.n	8008da8 <reallymarkobject+0x18c>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	795b      	ldrb	r3, [r3, #5]
 8008d2c:	f003 0318 	and.w	r3, r3, #24
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d039      	beq.n	8008da8 <reallymarkobject+0x18c>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff ff6d 	bl	8008c1c <reallymarkobject>
      break;
 8008d42:	e031      	b.n	8008da8 <reallymarkobject+0x18c>
    }
    case LUA_VUSERDATA: {
      Udata *u = gco2u(o);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	60bb      	str	r3, [r7, #8]
      if (u->nuvalue == 0) {  /* no user values? */
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	88db      	ldrh	r3, [r3, #6]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11d      	bne.n	8008d8c <reallymarkobject+0x170>
        markobjectN(g, u->metatable);  /* mark its metatable */
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <reallymarkobject+0x156>
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	795b      	ldrb	r3, [r3, #5]
 8008d5e:	f003 0318 	and.w	r3, r3, #24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <reallymarkobject+0x156>
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff ff55 	bl	8008c1c <reallymarkobject>
        set2black(u);  /* nothing else to mark */
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	795b      	ldrb	r3, [r3, #5]
 8008d76:	b25b      	sxtb	r3, r3
 8008d78:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008d7c:	b25b      	sxtb	r3, r3
 8008d7e:	f043 0320 	orr.w	r3, r3, #32
 8008d82:	b25b      	sxtb	r3, r3
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	715a      	strb	r2, [r3, #5]
        break;
 8008d8a:	e00e      	b.n	8008daa <reallymarkobject+0x18e>
      }
      /* else... */
    }  /* FALLTHROUGH */
    case LUA_VLCL: case LUA_VCCL: case LUA_VTABLE:
    case LUA_VTHREAD: case LUA_VPROTO: {
      linkobjgclist(o, g->gray);  /* to be visited later */
 8008d8c:	683c      	ldr	r4, [r7, #0]
 8008d8e:	6838      	ldr	r0, [r7, #0]
 8008d90:	f7ff fdb8 	bl	8008904 <getgclist>
 8008d94:	4601      	mov	r1, r0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	3350      	adds	r3, #80	; 0x50
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7ff fe1d 	bl	80089dc <linkgclist_>
      break;
 8008da2:	e002      	b.n	8008daa <reallymarkobject+0x18e>
    }
    default: lua_assert(0); break;
 8008da4:	bf00      	nop
 8008da6:	e000      	b.n	8008daa <reallymarkobject+0x18e>
      break;
 8008da8:	bf00      	nop
  }
}
 8008daa:	bf00      	nop
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd90      	pop	{r4, r7, pc}
 8008db2:	bf00      	nop

08008db4 <markmt>:


/*
** mark metamethods for basic types
*/
static void markmt (global_State *g) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  int i;
  for (i=0; i < LUA_NUMTAGS; i++)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e01f      	b.n	8008e02 <markmt+0x4e>
    markobjectN(g, g->mt[i]);
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	333e      	adds	r3, #62	; 0x3e
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d014      	beq.n	8008dfc <markmt+0x48>
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	333e      	adds	r3, #62	; 0x3e
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	795b      	ldrb	r3, [r3, #5]
 8008de0:	f003 0318 	and.w	r3, r3, #24
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d009      	beq.n	8008dfc <markmt+0x48>
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	333e      	adds	r3, #62	; 0x3e
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff ff10 	bl	8008c1c <reallymarkobject>
  for (i=0; i < LUA_NUMTAGS; i++)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60fb      	str	r3, [r7, #12]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	dddc      	ble.n	8008dc2 <markmt+0xe>
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <markbeingfnz>:


/*
** mark all objects in list of being-finalized
*/
static lu_mem markbeingfnz (global_State *g) {
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  GCObject *o;
  lu_mem count = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60bb      	str	r3, [r7, #8]
  for (o = g->tobefnz; o != NULL; o = o->next) {
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e010      	b.n	8008e48 <markbeingfnz+0x36>
    count++;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	60bb      	str	r3, [r7, #8]
    markobject(g, o);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	795b      	ldrb	r3, [r3, #5]
 8008e30:	f003 0318 	and.w	r3, r3, #24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <markbeingfnz+0x30>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff feed 	bl	8008c1c <reallymarkobject>
  for (o = g->tobefnz; o != NULL; o = o->next) {
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1eb      	bne.n	8008e26 <markbeingfnz+0x14>
  }
  return count;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <remarkupvals>:
** any visited upvalue must be young too.) Also removes the thread from
** the list, as it was already visited. Removes also threads with no
** upvalues, as they have nothing to be checked. (If the thread gets an
** upvalue later, it will be linked in the list again.)
*/
static int remarkupvals (global_State *g) {
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  lua_State *thread;
  lua_State **p = &g->twups;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3388      	adds	r3, #136	; 0x88
 8008e64:	617b      	str	r3, [r7, #20]
  int work = 0;  /* estimate of how much work was done here */
 8008e66:	2300      	movs	r3, #0
 8008e68:	613b      	str	r3, [r7, #16]
  while ((thread = *p) != NULL) {
 8008e6a:	e040      	b.n	8008eee <remarkupvals+0x96>
    work++;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	613b      	str	r3, [r7, #16]
    if (!iswhite(thread) && thread->openupval != NULL)
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	795b      	ldrb	r3, [r3, #5]
 8008e76:	f003 0318 	and.w	r3, r3, #24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d107      	bne.n	8008e8e <remarkupvals+0x36>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <remarkupvals+0x36>
      p = &thread->twups;  /* keep marked thread with upvalues in the list */
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	332c      	adds	r3, #44	; 0x2c
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	e02f      	b.n	8008eee <remarkupvals+0x96>
    else {  /* thread is not marked or without upvalues */
      UpVal *uv;
      lua_assert(!isold(thread) || thread->openupval == NULL);
      *p = thread->twups;  /* remove thread from the list */
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	601a      	str	r2, [r3, #0]
      thread->twups = thread;  /* mark that it is out of list */
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      for (uv = thread->openupval; uv != NULL; uv = uv->u.open.next) {
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e021      	b.n	8008ee8 <remarkupvals+0x90>
        lua_assert(getage(uv) <= getage(thread));
        work++;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	613b      	str	r3, [r7, #16]
        if (!iswhite(uv)) {  /* upvalue already visited? */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	795b      	ldrb	r3, [r3, #5]
 8008eae:	f003 0318 	and.w	r3, r3, #24
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d115      	bne.n	8008ee2 <remarkupvals+0x8a>
          lua_assert(upisopen(uv) && isgray(uv));
          markvalue(g, uv->v);  /* mark its value */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	791b      	ldrb	r3, [r3, #4]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00e      	beq.n	8008ee2 <remarkupvals+0x8a>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	795b      	ldrb	r3, [r3, #5]
 8008ecc:	f003 0318 	and.w	r3, r3, #24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d006      	beq.n	8008ee2 <remarkupvals+0x8a>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff fe9d 	bl	8008c1c <reallymarkobject>
      for (uv = thread->openupval; uv != NULL; uv = uv->u.open.next) {
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1da      	bne.n	8008ea4 <remarkupvals+0x4c>
  while ((thread = *p) != NULL) {
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	60bb      	str	r3, [r7, #8]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1b8      	bne.n	8008e6c <remarkupvals+0x14>
        }
      }
    }
  }
  return work;
 8008efa:	693b      	ldr	r3, [r7, #16]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <cleargraylists>:


static void cleargraylists (global_State *g) {
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  g->gray = g->grayagain = NULL;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	655a      	str	r2, [r3, #84]	; 0x54
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	651a      	str	r2, [r3, #80]	; 0x50
  g->weak = g->allweak = g->ephemeron = NULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	661a      	str	r2, [r3, #96]	; 0x60
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <restartcollection>:


/*
** mark root set and reset all gray lists, to start a new collection
*/
static void restartcollection (global_State *g) {
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  cleargraylists(g);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff ffdd 	bl	8008f04 <cleargraylists>
  markobject(g, g->mainthread);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f50:	795b      	ldrb	r3, [r3, #5]
 8008f52:	f003 0318 	and.w	r3, r3, #24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d006      	beq.n	8008f68 <restartcollection+0x2c>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff fe5a 	bl	8008c1c <reallymarkobject>
  markvalue(g, &g->l_registry);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00c      	beq.n	8008f90 <restartcollection+0x54>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	795b      	ldrb	r3, [r3, #5]
 8008f7c:	f003 0318 	and.w	r3, r3, #24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d005      	beq.n	8008f90 <restartcollection+0x54>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fe46 	bl	8008c1c <reallymarkobject>
  markmt(g);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff ff0f 	bl	8008db4 <markmt>
  markbeingfnz(g);  /* mark any finalizing object left from previous cycle */
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff ff3b 	bl	8008e12 <markbeingfnz>
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <genlink>:
** more efficient to avoid adding elements that will be removed.) Only
** TOUCHED1 objects need to be in the list. TOUCHED2 doesn't need to go
** back to a gray list, but then it must become OLD. (That is what
** 'correctgraylist' does when it finds a TOUCHED2 object.)
*/
static void genlink (global_State *g, GCObject *o) {
 8008fa4:	b590      	push	{r4, r7, lr}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  lua_assert(isblack(o));
  if (getage(o) == G_TOUCHED1) {  /* touched in this cycle? */
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	795b      	ldrb	r3, [r3, #5]
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	d10b      	bne.n	8008fd2 <genlink+0x2e>
    linkobjgclist(o, g->grayagain);  /* link it back in 'grayagain' */
 8008fba:	683c      	ldr	r4, [r7, #0]
 8008fbc:	6838      	ldr	r0, [r7, #0]
 8008fbe:	f7ff fca1 	bl	8008904 <getgclist>
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3354      	adds	r3, #84	; 0x54
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7ff fd06 	bl	80089dc <linkgclist_>
  }  /* everything else do not need to be linked back */
  else if (getage(o) == G_TOUCHED2)
    changeage(o, G_TOUCHED2, G_OLD);  /* advance age */
}
 8008fd0:	e00c      	b.n	8008fec <genlink+0x48>
  else if (getage(o) == G_TOUCHED2)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	795b      	ldrb	r3, [r3, #5]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b06      	cmp	r3, #6
 8008fdc:	d106      	bne.n	8008fec <genlink+0x48>
    changeage(o, G_TOUCHED2, G_OLD);  /* advance age */
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	795b      	ldrb	r3, [r3, #5]
 8008fe2:	f083 0302 	eor.w	r3, r3, #2
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	715a      	strb	r2, [r3, #5]
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd90      	pop	{r4, r7, pc}

08008ff4 <traverseweakvalue>:
** Traverse a table with weak values and link it to proper list. During
** propagate phase, keep it in 'grayagain' list, to be revisited in the
** atomic phase. In the atomic phase, if table has any white value,
** put it in 'weak' list, to be cleared.
*/
static void traverseweakvalue (global_State *g, Table *h) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  Node *n, *limit = gnodelast(h);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	691a      	ldr	r2, [r3, #16]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	79db      	ldrb	r3, [r3, #7]
 8009006:	4619      	mov	r1, r3
 8009008:	2310      	movs	r3, #16
 800900a:	408b      	lsls	r3, r1
 800900c:	4413      	add	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
  /* if there is array part, assume it may have white values (it is not
     worth traversing it now just to check) */
  int hasclears = (h->alimit > 0);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	bf14      	ite	ne
 8009018:	2301      	movne	r3, #1
 800901a:	2300      	moveq	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	613b      	str	r3, [r7, #16]
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	e035      	b.n	8009094 <traverseweakvalue+0xa0>
    if (isempty(gval(n)))  /* entry is empty? */
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	791b      	ldrb	r3, [r3, #4]
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	2b00      	cmp	r3, #0
 8009032:	d103      	bne.n	800903c <traverseweakvalue+0x48>
      clearkey(n);  /* clear its key */
 8009034:	6978      	ldr	r0, [r7, #20]
 8009036:	f7ff fceb 	bl	8008a10 <clearkey>
 800903a:	e028      	b.n	800908e <traverseweakvalue+0x9a>
    else {
      lua_assert(!keyisnil(n));
      markkey(g, n);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	795b      	ldrb	r3, [r3, #5]
 8009040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <traverseweakvalue+0x6e>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	795b      	ldrb	r3, [r3, #5]
 800904e:	f003 0318 	and.w	r3, r3, #24
 8009052:	2b00      	cmp	r3, #0
 8009054:	d005      	beq.n	8009062 <traverseweakvalue+0x6e>
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff fddd 	bl	8008c1c <reallymarkobject>
      if (!hasclears && iscleared(g, gcvalueN(gval(n))))  /* a white value? */
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d112      	bne.n	800908e <traverseweakvalue+0x9a>
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	791b      	ldrb	r3, [r3, #4]
 800906c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <traverseweakvalue+0x86>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	e000      	b.n	800907c <traverseweakvalue+0x88>
 800907a:	2300      	movs	r3, #0
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff fcd9 	bl	8008a36 <iscleared>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <traverseweakvalue+0x9a>
        hasclears = 1;  /* table will have to be cleared */
 800908a:	2301      	movs	r3, #1
 800908c:	613b      	str	r3, [r7, #16]
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	3310      	adds	r3, #16
 8009092:	617b      	str	r3, [r7, #20]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	429a      	cmp	r2, r3
 800909a:	d3c5      	bcc.n	8009028 <traverseweakvalue+0x34>
    }
  }
  if (g->gcstate == GCSatomic && hasclears)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d10c      	bne.n	80090c0 <traverseweakvalue+0xcc>
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d009      	beq.n	80090c0 <traverseweakvalue+0xcc>
    linkgclist(h, g->weak);  /* has to be cleared later */
 80090ac:	6838      	ldr	r0, [r7, #0]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	f103 011c 	add.w	r1, r3, #28
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3358      	adds	r3, #88	; 0x58
 80090b8:	461a      	mov	r2, r3
 80090ba:	f7ff fc8f 	bl	80089dc <linkgclist_>
 80090be:	e009      	b.n	80090d4 <traverseweakvalue+0xe0>
  else
    linkgclist(h, g->grayagain);  /* must retraverse it in atomic phase */
 80090c0:	6838      	ldr	r0, [r7, #0]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	f103 011c 	add.w	r1, r3, #28
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3354      	adds	r3, #84	; 0x54
 80090cc:	461a      	mov	r2, r3
 80090ce:	f7ff fc85 	bl	80089dc <linkgclist_>
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <traverseephemeron>:
** black). Otherwise, if it has any white key, table has to be cleared
** (in the atomic phase). In generational mode, some tables
** must be kept in some gray list for post-processing; this is done
** by 'genlink'.
*/
static int traverseephemeron (global_State *g, Table *h, int inv) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08c      	sub	sp, #48	; 0x30
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  int marked = 0;  /* true if an object is marked in this traversal */
 80090e8:	2300      	movs	r3, #0
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  int hasclears = 0;  /* true if table has white keys */
 80090ec:	2300      	movs	r3, #0
 80090ee:	62bb      	str	r3, [r7, #40]	; 0x28
  int hasww = 0;  /* true if table has entry "white-key -> white-value" */
 80090f0:	2300      	movs	r3, #0
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
  unsigned int i;
  unsigned int asize = luaH_realasize(h);
 80090f4:	68b8      	ldr	r0, [r7, #8]
 80090f6:	f003 ff35 	bl	800cf64 <luaH_realasize>
 80090fa:	61f8      	str	r0, [r7, #28]
  unsigned int nsize = sizenode(h);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	79db      	ldrb	r3, [r3, #7]
 8009100:	461a      	mov	r2, r3
 8009102:	2301      	movs	r3, #1
 8009104:	4093      	lsls	r3, r2
 8009106:	61bb      	str	r3, [r7, #24]
  /* traverse array part */
  for (i = 0; i < asize; i++) {
 8009108:	2300      	movs	r3, #0
 800910a:	623b      	str	r3, [r7, #32]
 800910c:	e023      	b.n	8009156 <traverseephemeron+0x7a>
    if (valiswhite(&h->array[i])) {
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	4413      	add	r3, r2
 8009118:	791b      	ldrb	r3, [r3, #4]
 800911a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	d016      	beq.n	8009150 <traverseephemeron+0x74>
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	4413      	add	r3, r2
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	795b      	ldrb	r3, [r3, #5]
 8009130:	f003 0318 	and.w	r3, r3, #24
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <traverseephemeron+0x74>
      marked = 1;
 8009138:	2301      	movs	r3, #1
 800913a:	62fb      	str	r3, [r7, #44]	; 0x2c
      reallymarkobject(g, gcvalue(&h->array[i]));
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4413      	add	r3, r2
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4619      	mov	r1, r3
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff fd66 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < asize; i++) {
 8009150:	6a3b      	ldr	r3, [r7, #32]
 8009152:	3301      	adds	r3, #1
 8009154:	623b      	str	r3, [r7, #32]
 8009156:	6a3a      	ldr	r2, [r7, #32]
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	429a      	cmp	r2, r3
 800915c:	d3d7      	bcc.n	800910e <traverseephemeron+0x32>
    }
  }
  /* traverse hash part; if 'inv', traverse descending
     (see 'convergeephemerons') */
  for (i = 0; i < nsize; i++) {
 800915e:	2300      	movs	r3, #0
 8009160:	623b      	str	r3, [r7, #32]
 8009162:	e056      	b.n	8009212 <traverseephemeron+0x136>
    Node *n = inv ? gnode(h, nsize - 1 - i) : gnode(h, i);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d008      	beq.n	800917c <traverseephemeron+0xa0>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	691a      	ldr	r2, [r3, #16]
 800916e:	69b9      	ldr	r1, [r7, #24]
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	1acb      	subs	r3, r1, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	4413      	add	r3, r2
 800917a:	e004      	b.n	8009186 <traverseephemeron+0xaa>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	691a      	ldr	r2, [r3, #16]
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	4413      	add	r3, r2
 8009186:	617b      	str	r3, [r7, #20]
    if (isempty(gval(n)))  /* entry is empty? */
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	791b      	ldrb	r3, [r3, #4]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <traverseephemeron+0xc0>
      clearkey(n);  /* clear its key */
 8009194:	6978      	ldr	r0, [r7, #20]
 8009196:	f7ff fc3b 	bl	8008a10 <clearkey>
 800919a:	e037      	b.n	800920c <traverseephemeron+0x130>
    else if (iscleared(g, gckeyN(n))) {  /* key is not marked (yet)? */
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	795b      	ldrb	r3, [r3, #5]
 80091a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <traverseephemeron+0xd2>
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	e000      	b.n	80091b0 <traverseephemeron+0xd4>
 80091ae:	2300      	movs	r3, #0
 80091b0:	4619      	mov	r1, r3
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f7ff fc3f 	bl	8008a36 <iscleared>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d011      	beq.n	80091e2 <traverseephemeron+0x106>
      hasclears = 1;  /* table must be cleared */
 80091be:	2301      	movs	r3, #1
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28
      if (valiswhite(gval(n)))  /* value not marked yet? */
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	791b      	ldrb	r3, [r3, #4]
 80091c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01e      	beq.n	800920c <traverseephemeron+0x130>
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	795b      	ldrb	r3, [r3, #5]
 80091d4:	f003 0318 	and.w	r3, r3, #24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d017      	beq.n	800920c <traverseephemeron+0x130>
        hasww = 1;  /* white-white entry */
 80091dc:	2301      	movs	r3, #1
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
 80091e0:	e014      	b.n	800920c <traverseephemeron+0x130>
    }
    else if (valiswhite(gval(n))) {  /* value not marked yet? */
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00e      	beq.n	800920c <traverseephemeron+0x130>
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	795b      	ldrb	r3, [r3, #5]
 80091f4:	f003 0318 	and.w	r3, r3, #24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <traverseephemeron+0x130>
      marked = 1;
 80091fc:	2301      	movs	r3, #1
 80091fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      reallymarkobject(g, gcvalue(gval(n)));  /* mark it now */
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4619      	mov	r1, r3
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff fd08 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < nsize; i++) {
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	3301      	adds	r3, #1
 8009210:	623b      	str	r3, [r7, #32]
 8009212:	6a3a      	ldr	r2, [r7, #32]
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	429a      	cmp	r2, r3
 8009218:	d3a4      	bcc.n	8009164 <traverseephemeron+0x88>
    }
  }
  /* link table into proper list */
  if (g->gcstate == GCSpropagate)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009220:	2b00      	cmp	r3, #0
 8009222:	d109      	bne.n	8009238 <traverseephemeron+0x15c>
    linkgclist(h, g->grayagain);  /* must retraverse it in atomic phase */
 8009224:	68b8      	ldr	r0, [r7, #8]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f103 011c 	add.w	r1, r3, #28
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3354      	adds	r3, #84	; 0x54
 8009230:	461a      	mov	r2, r3
 8009232:	f7ff fbd3 	bl	80089dc <linkgclist_>
 8009236:	e01e      	b.n	8009276 <traverseephemeron+0x19a>
  else if (hasww)  /* table has white->white entries? */
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <traverseephemeron+0x176>
    linkgclist(h, g->ephemeron);  /* have to propagate again */
 800923e:	68b8      	ldr	r0, [r7, #8]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f103 011c 	add.w	r1, r3, #28
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	335c      	adds	r3, #92	; 0x5c
 800924a:	461a      	mov	r2, r3
 800924c:	f7ff fbc6 	bl	80089dc <linkgclist_>
 8009250:	e011      	b.n	8009276 <traverseephemeron+0x19a>
  else if (hasclears)  /* table has white keys? */
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <traverseephemeron+0x190>
    linkgclist(h, g->allweak);  /* may have to clean white keys */
 8009258:	68b8      	ldr	r0, [r7, #8]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f103 011c 	add.w	r1, r3, #28
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3360      	adds	r3, #96	; 0x60
 8009264:	461a      	mov	r2, r3
 8009266:	f7ff fbb9 	bl	80089dc <linkgclist_>
 800926a:	e004      	b.n	8009276 <traverseephemeron+0x19a>
  else
    genlink(g, obj2gco(h));  /* check whether collector still needs to see it */
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4619      	mov	r1, r3
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7ff fe97 	bl	8008fa4 <genlink>
  return marked;
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009278:	4618      	mov	r0, r3
 800927a:	3730      	adds	r7, #48	; 0x30
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <traversestrongtable>:


static void traversestrongtable (global_State *g, Table *h) {
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  Node *n, *limit = gnodelast(h);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	691a      	ldr	r2, [r3, #16]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	79db      	ldrb	r3, [r3, #7]
 8009292:	4619      	mov	r1, r3
 8009294:	2310      	movs	r3, #16
 8009296:	408b      	lsls	r3, r1
 8009298:	4413      	add	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
  unsigned int i;
  unsigned int asize = luaH_realasize(h);
 800929c:	6838      	ldr	r0, [r7, #0]
 800929e:	f003 fe61 	bl	800cf64 <luaH_realasize>
 80092a2:	60b8      	str	r0, [r7, #8]
  for (i = 0; i < asize; i++)  /* traverse array part */
 80092a4:	2300      	movs	r3, #0
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	e021      	b.n	80092ee <traversestrongtable+0x6e>
    markvalue(g, &h->array[i]);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	4413      	add	r3, r2
 80092b4:	791b      	ldrb	r3, [r3, #4]
 80092b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d014      	beq.n	80092e8 <traversestrongtable+0x68>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	4413      	add	r3, r2
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	795b      	ldrb	r3, [r3, #5]
 80092cc:	f003 0318 	and.w	r3, r3, #24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d009      	beq.n	80092e8 <traversestrongtable+0x68>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fc9a 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < asize; i++)  /* traverse array part */
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	3301      	adds	r3, #1
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d3d9      	bcc.n	80092aa <traversestrongtable+0x2a>
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	e032      	b.n	8009364 <traversestrongtable+0xe4>
    if (isempty(gval(n)))  /* entry is empty? */
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	2b00      	cmp	r3, #0
 8009308:	d103      	bne.n	8009312 <traversestrongtable+0x92>
      clearkey(n);  /* clear its key */
 800930a:	6978      	ldr	r0, [r7, #20]
 800930c:	f7ff fb80 	bl	8008a10 <clearkey>
 8009310:	e025      	b.n	800935e <traversestrongtable+0xde>
    else {
      lua_assert(!keyisnil(n));
      markkey(g, n);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	795b      	ldrb	r3, [r3, #5]
 8009316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00c      	beq.n	8009338 <traversestrongtable+0xb8>
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	795b      	ldrb	r3, [r3, #5]
 8009324:	f003 0318 	and.w	r3, r3, #24
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <traversestrongtable+0xb8>
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff fc72 	bl	8008c1c <reallymarkobject>
      markvalue(g, gval(n));
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	791b      	ldrb	r3, [r3, #4]
 800933c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00c      	beq.n	800935e <traversestrongtable+0xde>
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	795b      	ldrb	r3, [r3, #5]
 800934a:	f003 0318 	and.w	r3, r3, #24
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <traversestrongtable+0xde>
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff fc5f 	bl	8008c1c <reallymarkobject>
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	3310      	adds	r3, #16
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	429a      	cmp	r2, r3
 800936a:	d3c8      	bcc.n	80092fe <traversestrongtable+0x7e>
    }
  }
  genlink(g, obj2gco(h));
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff fe17 	bl	8008fa4 <genlink>
}
 8009376:	bf00      	nop
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <traversetable>:


static lu_mem traversetable (global_State *g, Table *h) {
 800937e:	b580      	push	{r7, lr}
 8009380:	b086      	sub	sp, #24
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  const char *weakkey, *weakvalue;
  const TValue *mode = gfasttm(g, h->metatable, TM_MODE);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d013      	beq.n	80093b8 <traversetable+0x3a>
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	799b      	ldrb	r3, [r3, #6]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <traversetable+0x36>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6998      	ldr	r0, [r3, #24]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093a8:	461a      	mov	r2, r3
 80093aa:	2103      	movs	r1, #3
 80093ac:	f004 fdc4 	bl	800df38 <luaT_gettm>
 80093b0:	4603      	mov	r3, r0
 80093b2:	e002      	b.n	80093ba <traversetable+0x3c>
 80093b4:	2300      	movs	r3, #0
 80093b6:	e000      	b.n	80093ba <traversetable+0x3c>
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]
  markobjectN(g, h->metatable);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00c      	beq.n	80093de <traversetable+0x60>
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	795b      	ldrb	r3, [r3, #5]
 80093ca:	f003 0318 	and.w	r3, r3, #24
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <traversetable+0x60>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff fc1f 	bl	8008c1c <reallymarkobject>
  if (mode && ttisstring(mode) &&  /* is there a weak mode? */
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d03b      	beq.n	800945c <traversetable+0xde>
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	791b      	ldrb	r3, [r3, #4]
 80093e8:	f003 030f 	and.w	r3, r3, #15
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d135      	bne.n	800945c <traversetable+0xde>
      (cast_void(weakkey = strchr(svalue(mode), 'k')),
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3310      	adds	r3, #16
 80093f6:	216b      	movs	r1, #107	; 0x6b
 80093f8:	4618      	mov	r0, r3
 80093fa:	f012 fdf2 	bl	801bfe2 <strchr>
 80093fe:	6138      	str	r0, [r7, #16]
       cast_void(weakvalue = strchr(svalue(mode), 'v')),
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3310      	adds	r3, #16
 8009406:	2176      	movs	r1, #118	; 0x76
 8009408:	4618      	mov	r0, r3
 800940a:	f012 fdea 	bl	801bfe2 <strchr>
 800940e:	60f8      	str	r0, [r7, #12]
       (weakkey || weakvalue))) {  /* is really weak? */
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d102      	bne.n	800941c <traversetable+0x9e>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <traversetable+0xa2>
 800941c:	2301      	movs	r3, #1
 800941e:	e000      	b.n	8009422 <traversetable+0xa4>
 8009420:	2300      	movs	r3, #0
  if (mode && ttisstring(mode) &&  /* is there a weak mode? */
 8009422:	2b00      	cmp	r3, #0
 8009424:	d01a      	beq.n	800945c <traversetable+0xde>
    if (!weakkey)  /* strong keys? */
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d104      	bne.n	8009436 <traversetable+0xb8>
      traverseweakvalue(g, h);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff fde0 	bl	8008ff4 <traverseweakvalue>
    if (!weakkey)  /* strong keys? */
 8009434:	e016      	b.n	8009464 <traversetable+0xe6>
    else if (!weakvalue)  /* strong values? */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d105      	bne.n	8009448 <traversetable+0xca>
      traverseephemeron(g, h, 0);
 800943c:	2200      	movs	r2, #0
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff fe4b 	bl	80090dc <traverseephemeron>
    if (!weakkey)  /* strong keys? */
 8009446:	e00d      	b.n	8009464 <traversetable+0xe6>
    else  /* all weak */
      linkgclist(h, g->allweak);  /* nothing to traverse now */
 8009448:	6838      	ldr	r0, [r7, #0]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	f103 011c 	add.w	r1, r3, #28
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3360      	adds	r3, #96	; 0x60
 8009454:	461a      	mov	r2, r3
 8009456:	f7ff fac1 	bl	80089dc <linkgclist_>
    if (!weakkey)  /* strong keys? */
 800945a:	e003      	b.n	8009464 <traversetable+0xe6>
  }
  else  /* not weak */
    traversestrongtable(g, h);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff ff0e 	bl	8009280 <traversestrongtable>
  return 1 + h->alimit + 2 * allocsizenode(h);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	6952      	ldr	r2, [r2, #20]
 800946c:	2a00      	cmp	r2, #0
 800946e:	d005      	beq.n	800947c <traversetable+0xfe>
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	79d2      	ldrb	r2, [r2, #7]
 8009474:	4611      	mov	r1, r2
 8009476:	2202      	movs	r2, #2
 8009478:	408a      	lsls	r2, r1
 800947a:	e000      	b.n	800947e <traversetable+0x100>
 800947c:	2200      	movs	r2, #0
 800947e:	4413      	add	r3, r2
 8009480:	3301      	adds	r3, #1
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <traverseudata>:


static int traverseudata (global_State *g, Udata *u) {
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
  int i;
  markobjectN(g, u->metatable);  /* mark its metatable */
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00c      	beq.n	80094b6 <traverseudata+0x2c>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	795b      	ldrb	r3, [r3, #5]
 80094a2:	f003 0318 	and.w	r3, r3, #24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <traverseudata+0x2c>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff fbb3 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < u->nuvalue; i++)
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e01f      	b.n	80094fc <traverseudata+0x72>
    markvalue(g, &u->uv[i].uv);
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3303      	adds	r3, #3
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	791b      	ldrb	r3, [r3, #4]
 80094c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d012      	beq.n	80094f6 <traverseudata+0x6c>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	3203      	adds	r2, #3
 80094d6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80094da:	795b      	ldrb	r3, [r3, #5]
 80094dc:	f003 0318 	and.w	r3, r3, #24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d008      	beq.n	80094f6 <traverseudata+0x6c>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	3203      	adds	r2, #3
 80094ea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fb93 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < u->nuvalue; i++)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3301      	adds	r3, #1
 80094fa:	60fb      	str	r3, [r7, #12]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	88db      	ldrh	r3, [r3, #6]
 8009500:	461a      	mov	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4293      	cmp	r3, r2
 8009506:	dbd9      	blt.n	80094bc <traverseudata+0x32>
  genlink(g, obj2gco(u));
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fd49 	bl	8008fa4 <genlink>
  return 1 + u->nuvalue;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	88db      	ldrh	r3, [r3, #6]
 8009516:	3301      	adds	r3, #1
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <traverseproto>:
/*
** Traverse a prototype. (While a prototype is being build, its
** arrays can be larger than needed; the extra slots are filled with
** NULL, so the use of 'markobjectN')
*/
static int traverseproto (global_State *g, Proto *f) {
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  int i;
  markobjectN(g, f->source);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00c      	beq.n	800954c <traverseproto+0x2c>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009536:	795b      	ldrb	r3, [r3, #5]
 8009538:	f003 0318 	and.w	r3, r3, #24
 800953c:	2b00      	cmp	r3, #0
 800953e:	d005      	beq.n	800954c <traverseproto+0x2c>
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff fb68 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < f->sizek; i++)  /* mark literals */
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e021      	b.n	8009596 <traverseproto+0x76>
    markvalue(g, &f->k[i]);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	4413      	add	r3, r2
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	d014      	beq.n	8009590 <traverseproto+0x70>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	4413      	add	r3, r2
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	795b      	ldrb	r3, [r3, #5]
 8009574:	f003 0318 	and.w	r3, r3, #24
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <traverseproto+0x70>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	4413      	add	r3, r2
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fb46 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < f->sizek; i++)  /* mark literals */
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3301      	adds	r3, #1
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	429a      	cmp	r2, r3
 800959e:	dbd8      	blt.n	8009552 <traverseproto+0x32>
  for (i = 0; i < f->sizeupvalues; i++)  /* mark upvalue names */
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e01f      	b.n	80095e6 <traverseproto+0xc6>
    markobjectN(g, f->upvalues[i].name);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	4413      	add	r3, r2
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d014      	beq.n	80095e0 <traverseproto+0xc0>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	4413      	add	r3, r2
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	795b      	ldrb	r3, [r3, #5]
 80095c4:	f003 0318 	and.w	r3, r3, #24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d009      	beq.n	80095e0 <traverseproto+0xc0>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	4413      	add	r3, r2
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fb1e 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < f->sizeupvalues; i++)  /* mark upvalue names */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3301      	adds	r3, #1
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	dbda      	blt.n	80095a6 <traverseproto+0x86>
  for (i = 0; i < f->sizep; i++)  /* mark nested protos */
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	e01f      	b.n	8009636 <traverseproto+0x116>
    markobjectN(g, f->p[i]);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d014      	beq.n	8009630 <traverseproto+0x110>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	795b      	ldrb	r3, [r3, #5]
 8009614:	f003 0318 	and.w	r3, r3, #24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d009      	beq.n	8009630 <traverseproto+0x110>
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff faf6 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < f->sizep; i++)  /* mark nested protos */
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	429a      	cmp	r2, r3
 800963e:	dbda      	blt.n	80095f6 <traverseproto+0xd6>
  for (i = 0; i < f->sizelocvars; i++)  /* mark local-variable names */
 8009640:	2300      	movs	r3, #0
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	e028      	b.n	8009698 <traverseproto+0x178>
    markobjectN(g, f->locvars[i].varname);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4613      	mov	r3, r2
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	440b      	add	r3, r1
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01a      	beq.n	8009692 <traverseproto+0x172>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4613      	mov	r3, r2
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	795b      	ldrb	r3, [r3, #5]
 8009670:	f003 0318 	and.w	r3, r3, #24
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <traverseproto+0x172>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4613      	mov	r3, r2
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff fac5 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < f->sizelocvars; i++)  /* mark local-variable names */
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3301      	adds	r3, #1
 8009696:	60fb      	str	r3, [r7, #12]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	429a      	cmp	r2, r3
 80096a0:	dbd1      	blt.n	8009646 <traverseproto+0x126>
  return 1 + f->sizek + f->sizeupvalues + f->sizep + f->sizelocvars;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	441a      	add	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	441a      	add	r2, r3
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	4413      	add	r3, r2
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <traverseCclosure>:


static int traverseCclosure (global_State *g, CClosure *cl) {
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < cl->nupvalues; i++)  /* mark its upvalues */
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e01f      	b.n	8009712 <traverseCclosure+0x50>
    markvalue(g, &cl->upvalue[i]);
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3302      	adds	r3, #2
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	4413      	add	r3, r2
 80096dc:	791b      	ldrb	r3, [r3, #4]
 80096de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d012      	beq.n	800970c <traverseCclosure+0x4a>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	3202      	adds	r2, #2
 80096ec:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80096f0:	795b      	ldrb	r3, [r3, #5]
 80096f2:	f003 0318 	and.w	r3, r3, #24
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d008      	beq.n	800970c <traverseCclosure+0x4a>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	3202      	adds	r2, #2
 8009700:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff fa88 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++)  /* mark its upvalues */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3301      	adds	r3, #1
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	799b      	ldrb	r3, [r3, #6]
 8009716:	461a      	mov	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4293      	cmp	r3, r2
 800971c:	dbd9      	blt.n	80096d2 <traverseCclosure+0x10>
  return 1 + cl->nupvalues;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	799b      	ldrb	r3, [r3, #6]
 8009722:	3301      	adds	r3, #1
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <traverseLclosure>:

/*
** Traverse a Lua closure, marking its prototype and its upvalues.
** (Both can be NULL while closure is being created.)
*/
static int traverseLclosure (global_State *g, LClosure *cl) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  int i;
  markobjectN(g, cl->p);  /* mark its prototype */
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00c      	beq.n	8009758 <traverseLclosure+0x2c>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	795b      	ldrb	r3, [r3, #5]
 8009744:	f003 0318 	and.w	r3, r3, #24
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <traverseLclosure+0x2c>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff fa62 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++) {  /* visit its upvalues */
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	e016      	b.n	800978c <traverseLclosure+0x60>
    UpVal *uv = cl->upvals[i];
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	3204      	adds	r2, #4
 8009764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009768:	60bb      	str	r3, [r7, #8]
    markobjectN(g, uv);  /* mark upvalue */
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00a      	beq.n	8009786 <traverseLclosure+0x5a>
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	795b      	ldrb	r3, [r3, #5]
 8009774:	f003 0318 	and.w	r3, r3, #24
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <traverseLclosure+0x5a>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff fa4b 	bl	8008c1c <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++) {  /* visit its upvalues */
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3301      	adds	r3, #1
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	799b      	ldrb	r3, [r3, #6]
 8009790:	461a      	mov	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4293      	cmp	r3, r2
 8009796:	dbe2      	blt.n	800975e <traverseLclosure+0x32>
  }
  return 1 + cl->nupvalues;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	799b      	ldrb	r3, [r3, #6]
 800979c:	3301      	adds	r3, #1
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <traversethread>:
** and therefore it must be visited again in the atomic phase. To ensure
** these visits, threads must return to a gray list if they are not new
** (which can only happen in generational mode) or if the traverse is in
** the propagate phase (which can only happen in incremental mode).
*/
static int traversethread (global_State *g, lua_State *th) {
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  UpVal *uv;
  StkId o = th->stack;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	60bb      	str	r3, [r7, #8]
  if (isold(th) || g->gcstate == GCSpropagate)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	795b      	ldrb	r3, [r3, #5]
 80097ba:	f003 0306 	and.w	r3, r3, #6
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <traversethread+0x26>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d108      	bne.n	80097de <traversethread+0x38>
    linkgclist(th, g->grayagain);  /* insert into 'grayagain' list */
 80097cc:	6838      	ldr	r0, [r7, #0]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3354      	adds	r3, #84	; 0x54
 80097d8:	461a      	mov	r2, r3
 80097da:	f7ff f8ff 	bl	80089dc <linkgclist_>
  if (o == NULL)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d117      	bne.n	8009814 <traversethread+0x6e>
    return 1;  /* stack not completely built yet */
 80097e4:	2301      	movs	r3, #1
 80097e6:	e063      	b.n	80098b0 <traversethread+0x10a>
  lua_assert(g->gcstate == GCSatomic ||
             th->openupval == NULL || isintwups(th));
  for (; o < th->top; o++)  /* mark live elements in the stack */
    markvalue(g, s2v(o));
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	791b      	ldrb	r3, [r3, #4]
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00c      	beq.n	800980e <traversethread+0x68>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	795b      	ldrb	r3, [r3, #5]
 80097fa:	f003 0318 	and.w	r3, r3, #24
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <traversethread+0x68>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff fa07 	bl	8008c1c <reallymarkobject>
  for (; o < th->top; o++)  /* mark live elements in the stack */
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	3308      	adds	r3, #8
 8009812:	60bb      	str	r3, [r7, #8]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	429a      	cmp	r2, r3
 800981c:	d3e4      	bcc.n	80097e8 <traversethread+0x42>
  for (uv = th->openupval; uv != NULL; uv = uv->u.open.next)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e00d      	b.n	8009842 <traversethread+0x9c>
    markobject(g, uv);  /* open upvalues cannot be collected */
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	795b      	ldrb	r3, [r3, #5]
 800982a:	f003 0318 	and.w	r3, r3, #24
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <traversethread+0x96>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff f9f0 	bl	8008c1c <reallymarkobject>
  for (uv = th->openupval; uv != NULL; uv = uv->u.open.next)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1ee      	bne.n	8009826 <traversethread+0x80>
  if (g->gcstate == GCSatomic) {  /* final traversal? */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800984e:	2b02      	cmp	r3, #2
 8009850:	d11f      	bne.n	8009892 <traversethread+0xec>
    for (; o < th->stack_last + EXTRA_STACK; o++)
 8009852:	e005      	b.n	8009860 <traversethread+0xba>
      setnilvalue(s2v(o));  /* clear dead stack slice */
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2200      	movs	r2, #0
 8009858:	711a      	strb	r2, [r3, #4]
    for (; o < th->stack_last + EXTRA_STACK; o++)
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	3308      	adds	r3, #8
 800985e:	60bb      	str	r3, [r7, #8]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	3328      	adds	r3, #40	; 0x28
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	429a      	cmp	r2, r3
 800986a:	d3f3      	bcc.n	8009854 <traversethread+0xae>
    /* 'remarkupvals' may have removed thread from 'twups' list */
    if (!isintwups(th) && th->openupval != NULL) {
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d115      	bne.n	80098a2 <traversethread+0xfc>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d011      	beq.n	80098a2 <traversethread+0xfc>
      th->twups = g->twups;  /* link it back to the list */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c
      g->twups = th;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009890:	e007      	b.n	80098a2 <traversethread+0xfc>
    }
  }
  else if (!g->gcemergency)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <traversethread+0xfc>
    luaD_shrinkstack(th); /* do not change stack in emergency cycle */
 800989c:	6838      	ldr	r0, [r7, #0]
 800989e:	f7fd ffe5 	bl	800786c <luaD_shrinkstack>
  return 1 + stacksize(th);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	699a      	ldr	r2, [r3, #24]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	69db      	ldr	r3, [r3, #28]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	10db      	asrs	r3, r3, #3
 80098ae:	3301      	adds	r3, #1
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <propagatemark>:


/*
** traverse one gray object, turning it to black.
*/
static lu_mem propagatemark (global_State *g) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  GCObject *o = g->gray;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c4:	60fb      	str	r3, [r7, #12]
  nw2black(o);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	795b      	ldrb	r3, [r3, #5]
 80098ca:	f043 0320 	orr.w	r3, r3, #32
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	715a      	strb	r2, [r3, #5]
  g->gray = *getgclist(o);  /* remove from 'gray' list */
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7ff f815 	bl	8008904 <getgclist>
 80098da:	4603      	mov	r3, r0
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	651a      	str	r2, [r3, #80]	; 0x50
  switch (o->tt) {
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	791b      	ldrb	r3, [r3, #4]
 80098e6:	3b05      	subs	r3, #5
 80098e8:	2b21      	cmp	r3, #33	; 0x21
 80098ea:	d871      	bhi.n	80099d0 <propagatemark+0x118>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <propagatemark+0x3c>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	0800997d 	.word	0x0800997d
 80098f8:	08009999 	.word	0x08009999
 80098fc:	0800998b 	.word	0x0800998b
 8009900:	080099c3 	.word	0x080099c3
 8009904:	080099d1 	.word	0x080099d1
 8009908:	080099b5 	.word	0x080099b5
 800990c:	080099d1 	.word	0x080099d1
 8009910:	080099d1 	.word	0x080099d1
 8009914:	080099d1 	.word	0x080099d1
 8009918:	080099d1 	.word	0x080099d1
 800991c:	080099d1 	.word	0x080099d1
 8009920:	080099d1 	.word	0x080099d1
 8009924:	080099d1 	.word	0x080099d1
 8009928:	080099d1 	.word	0x080099d1
 800992c:	080099d1 	.word	0x080099d1
 8009930:	080099d1 	.word	0x080099d1
 8009934:	080099d1 	.word	0x080099d1
 8009938:	080099d1 	.word	0x080099d1
 800993c:	080099d1 	.word	0x080099d1
 8009940:	080099d1 	.word	0x080099d1
 8009944:	080099d1 	.word	0x080099d1
 8009948:	080099d1 	.word	0x080099d1
 800994c:	080099d1 	.word	0x080099d1
 8009950:	080099d1 	.word	0x080099d1
 8009954:	080099d1 	.word	0x080099d1
 8009958:	080099d1 	.word	0x080099d1
 800995c:	080099d1 	.word	0x080099d1
 8009960:	080099d1 	.word	0x080099d1
 8009964:	080099d1 	.word	0x080099d1
 8009968:	080099d1 	.word	0x080099d1
 800996c:	080099d1 	.word	0x080099d1
 8009970:	080099d1 	.word	0x080099d1
 8009974:	080099d1 	.word	0x080099d1
 8009978:	080099a7 	.word	0x080099a7
    case LUA_VTABLE: return traversetable(g, gco2t(o));
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff fcfc 	bl	800937e <traversetable>
 8009986:	4603      	mov	r3, r0
 8009988:	e023      	b.n	80099d2 <propagatemark+0x11a>
    case LUA_VUSERDATA: return traverseudata(g, gco2u(o));
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff fd7b 	bl	800948a <traverseudata>
 8009994:	4603      	mov	r3, r0
 8009996:	e01c      	b.n	80099d2 <propagatemark+0x11a>
    case LUA_VLCL: return traverseLclosure(g, gco2lcl(o));
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff fec5 	bl	800972c <traverseLclosure>
 80099a2:	4603      	mov	r3, r0
 80099a4:	e015      	b.n	80099d2 <propagatemark+0x11a>
    case LUA_VCCL: return traverseCclosure(g, gco2ccl(o));
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff fe89 	bl	80096c2 <traverseCclosure>
 80099b0:	4603      	mov	r3, r0
 80099b2:	e00e      	b.n	80099d2 <propagatemark+0x11a>
    case LUA_VPROTO: return traverseproto(g, gco2p(o));
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff fdb1 	bl	8009520 <traverseproto>
 80099be:	4603      	mov	r3, r0
 80099c0:	e007      	b.n	80099d2 <propagatemark+0x11a>
    case LUA_VTHREAD: return traversethread(g, gco2th(o));
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff feed 	bl	80097a6 <traversethread>
 80099cc:	4603      	mov	r3, r0
 80099ce:	e000      	b.n	80099d2 <propagatemark+0x11a>
    default: lua_assert(0); return 0;
 80099d0:	2300      	movs	r3, #0
  }
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop

080099dc <propagateall>:


static lu_mem propagateall (global_State *g) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  lu_mem tot = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]
  while (g->gray)
 80099e8:	e006      	b.n	80099f8 <propagateall+0x1c>
    tot += propagatemark(g);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff ff64 	bl	80098b8 <propagatemark>
 80099f0:	4602      	mov	r2, r0
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
  while (g->gray)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1f4      	bne.n	80099ea <propagateall+0xe>
  return tot;
 8009a00:	68fb      	ldr	r3, [r7, #12]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <convergeephemerons>:
** Repeat until it converges, that is, nothing new is marked. 'dir'
** inverts the direction of the traversals, trying to speed up
** convergence on chains in the same table.
**
*/
static void convergeephemerons (global_State *g) {
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b088      	sub	sp, #32
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  int changed;
  int dir = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	61bb      	str	r3, [r7, #24]
  do {
    GCObject *w;
    GCObject *next = g->ephemeron;  /* get ephemeron list */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a1a:	617b      	str	r3, [r7, #20]
    g->ephemeron = NULL;  /* tables may return to this list when traversed */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	65da      	str	r2, [r3, #92]	; 0x5c
    changed = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61fb      	str	r3, [r7, #28]
    while ((w = next) != NULL) {  /* for each ephemeron table */
 8009a26:	e018      	b.n	8009a5a <convergeephemerons+0x50>
      Table *h = gco2t(w);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	60fb      	str	r3, [r7, #12]
      next = h->gclist;  /* list is rebuilt during loop */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	617b      	str	r3, [r7, #20]
      nw2black(h);  /* out of the list (for now) */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	795b      	ldrb	r3, [r3, #5]
 8009a36:	f043 0320 	orr.w	r3, r3, #32
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	715a      	strb	r2, [r3, #5]
      if (traverseephemeron(g, h, dir)) {  /* marked some value? */
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	68f9      	ldr	r1, [r7, #12]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff fb49 	bl	80090dc <traverseephemeron>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d004      	beq.n	8009a5a <convergeephemerons+0x50>
        propagateall(g);  /* propagate changes */
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7ff ffc3 	bl	80099dc <propagateall>
        changed = 1;  /* will have to revisit all ephemeron tables */
 8009a56:	2301      	movs	r3, #1
 8009a58:	61fb      	str	r3, [r7, #28]
    while ((w = next) != NULL) {  /* for each ephemeron table */
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	613b      	str	r3, [r7, #16]
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e1      	bne.n	8009a28 <convergeephemerons+0x1e>
      }
    }
    dir = !dir;  /* invert direction next time */
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	bf0c      	ite	eq
 8009a6a:	2301      	moveq	r3, #1
 8009a6c:	2300      	movne	r3, #0
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	61bb      	str	r3, [r7, #24]
  } while (changed);  /* repeat until no more changes */
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1ce      	bne.n	8009a16 <convergeephemerons+0xc>
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	3720      	adds	r7, #32
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <clearbykeys>:


/*
** clear entries with unmarked keys from all weaktables in list 'l'
*/
static void clearbykeys (global_State *g, GCObject *l) {
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b086      	sub	sp, #24
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  for (; l; l = gco2t(l)->gclist) {
 8009a8c:	e035      	b.n	8009afa <clearbykeys+0x78>
    Table *h = gco2t(l);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	613b      	str	r3, [r7, #16]
    Node *limit = gnodelast(h);
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	691a      	ldr	r2, [r3, #16]
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	79db      	ldrb	r3, [r3, #7]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	2310      	movs	r3, #16
 8009a9e:	408b      	lsls	r3, r1
 8009aa0:	4413      	add	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
    Node *n;
    for (n = gnode(h, 0); n < limit; n++) {
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e01f      	b.n	8009aec <clearbykeys+0x6a>
      if (iscleared(g, gckeyN(n)))  /* unmarked key? */
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	795b      	ldrb	r3, [r3, #5]
 8009ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <clearbykeys+0x3c>
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	e000      	b.n	8009ac0 <clearbykeys+0x3e>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fe ffb7 	bl	8008a36 <iscleared>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <clearbykeys+0x52>
        setempty(gval(n));  /* remove entry */
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2210      	movs	r2, #16
 8009ad2:	711a      	strb	r2, [r3, #4]
      if (isempty(gval(n)))  /* is entry empty? */
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	791b      	ldrb	r3, [r3, #4]
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d102      	bne.n	8009ae6 <clearbykeys+0x64>
        clearkey(n);  /* clear its key */
 8009ae0:	6978      	ldr	r0, [r7, #20]
 8009ae2:	f7fe ff95 	bl	8008a10 <clearkey>
    for (n = gnode(h, 0); n < limit; n++) {
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	3310      	adds	r3, #16
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d3db      	bcc.n	8009aac <clearbykeys+0x2a>
  for (; l; l = gco2t(l)->gclist) {
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	603b      	str	r3, [r7, #0]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1c6      	bne.n	8009a8e <clearbykeys+0xc>
    }
  }
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <clearbyvalues>:

/*
** clear entries with unmarked values from all weaktables in list 'l' up
** to element 'f'
*/
static void clearbyvalues (global_State *g, GCObject *l, GCObject *f) {
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b08a      	sub	sp, #40	; 0x28
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	607a      	str	r2, [r7, #4]
  for (; l != f; l = gco2t(l)->gclist) {
 8009b16:	e05d      	b.n	8009bd4 <clearbyvalues+0xca>
    Table *h = gco2t(l);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	61fb      	str	r3, [r7, #28]
    Node *n, *limit = gnodelast(h);
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	691a      	ldr	r2, [r3, #16]
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	79db      	ldrb	r3, [r3, #7]
 8009b24:	4619      	mov	r1, r3
 8009b26:	2310      	movs	r3, #16
 8009b28:	408b      	lsls	r3, r1
 8009b2a:	4413      	add	r3, r2
 8009b2c:	61bb      	str	r3, [r7, #24]
    unsigned int i;
    unsigned int asize = luaH_realasize(h);
 8009b2e:	69f8      	ldr	r0, [r7, #28]
 8009b30:	f003 fa18 	bl	800cf64 <luaH_realasize>
 8009b34:	6178      	str	r0, [r7, #20]
    for (i = 0; i < asize; i++) {
 8009b36:	2300      	movs	r3, #0
 8009b38:	623b      	str	r3, [r7, #32]
 8009b3a:	e01c      	b.n	8009b76 <clearbyvalues+0x6c>
      TValue *o = &h->array[i];
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	4413      	add	r3, r2
 8009b46:	613b      	str	r3, [r7, #16]
      if (iscleared(g, gcvalueN(o)))  /* value was collected? */
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	791b      	ldrb	r3, [r3, #4]
 8009b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <clearbyvalues+0x50>
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	e000      	b.n	8009b5c <clearbyvalues+0x52>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f7fe ff69 	bl	8008a36 <iscleared>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <clearbyvalues+0x66>
        setempty(o);  /* remove entry */
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2210      	movs	r2, #16
 8009b6e:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < asize; i++) {
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	3301      	adds	r3, #1
 8009b74:	623b      	str	r3, [r7, #32]
 8009b76:	6a3a      	ldr	r2, [r7, #32]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d3de      	bcc.n	8009b3c <clearbyvalues+0x32>
    }
    for (n = gnode(h, 0); n < limit; n++) {
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
 8009b84:	e01f      	b.n	8009bc6 <clearbyvalues+0xbc>
      if (iscleared(g, gcvalueN(gval(n))))  /* unmarked value? */
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	791b      	ldrb	r3, [r3, #4]
 8009b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <clearbyvalues+0x8e>
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	e000      	b.n	8009b9a <clearbyvalues+0x90>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7fe ff4a 	bl	8008a36 <iscleared>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <clearbyvalues+0xa4>
        setempty(gval(n));  /* remove entry */
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	2210      	movs	r2, #16
 8009bac:	711a      	strb	r2, [r3, #4]
      if (isempty(gval(n)))  /* is entry empty? */
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	791b      	ldrb	r3, [r3, #4]
 8009bb2:	f003 030f 	and.w	r3, r3, #15
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d102      	bne.n	8009bc0 <clearbyvalues+0xb6>
        clearkey(n);  /* clear its key */
 8009bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bbc:	f7fe ff28 	bl	8008a10 <clearkey>
    for (n = gnode(h, 0); n < limit; n++) {
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	3310      	adds	r3, #16
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d3db      	bcc.n	8009b86 <clearbyvalues+0x7c>
  for (; l != f; l = gco2t(l)->gclist) {
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	60bb      	str	r3, [r7, #8]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d19d      	bne.n	8009b18 <clearbyvalues+0xe>
    }
  }
}
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
 8009be0:	3728      	adds	r7, #40	; 0x28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <freeupval>:


static void freeupval (lua_State *L, UpVal *uv) {
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
  if (upisopen(uv))
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	330c      	adds	r3, #12
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d002      	beq.n	8009c02 <freeupval+0x1c>
    luaF_unlinkupval(uv);
 8009bfc:	6838      	ldr	r0, [r7, #0]
 8009bfe:	f7fe fd31 	bl	8008664 <luaF_unlinkupval>
  luaM_free(L, uv);
 8009c02:	2214      	movs	r2, #20
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f001 f9ce 	bl	800afa8 <luaM_free_>
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <freeobj>:


static void freeobj (lua_State *L, GCObject *o) {
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  switch (o->tt) {
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	791b      	ldrb	r3, [r3, #4]
 8009c22:	3b04      	subs	r3, #4
 8009c24:	2b22      	cmp	r3, #34	; 0x22
 8009c26:	f200 80a8 	bhi.w	8009d7a <freeobj+0x166>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <freeobj+0x1c>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009d47 	.word	0x08009d47
 8009c34:	08009d05 	.word	0x08009d05
 8009c38:	08009cd5 	.word	0x08009cd5
 8009c3c:	08009d1d 	.word	0x08009d1d
 8009c40:	08009d11 	.word	0x08009d11
 8009c44:	08009cc9 	.word	0x08009cc9
 8009c48:	08009cbd 	.word	0x08009cbd
 8009c4c:	08009d7b 	.word	0x08009d7b
 8009c50:	08009d7b 	.word	0x08009d7b
 8009c54:	08009d7b 	.word	0x08009d7b
 8009c58:	08009d7b 	.word	0x08009d7b
 8009c5c:	08009d7b 	.word	0x08009d7b
 8009c60:	08009d7b 	.word	0x08009d7b
 8009c64:	08009d7b 	.word	0x08009d7b
 8009c68:	08009d7b 	.word	0x08009d7b
 8009c6c:	08009d7b 	.word	0x08009d7b
 8009c70:	08009d65 	.word	0x08009d65
 8009c74:	08009d7b 	.word	0x08009d7b
 8009c78:	08009d7b 	.word	0x08009d7b
 8009c7c:	08009d7b 	.word	0x08009d7b
 8009c80:	08009d7b 	.word	0x08009d7b
 8009c84:	08009d7b 	.word	0x08009d7b
 8009c88:	08009d7b 	.word	0x08009d7b
 8009c8c:	08009d7b 	.word	0x08009d7b
 8009c90:	08009d7b 	.word	0x08009d7b
 8009c94:	08009d7b 	.word	0x08009d7b
 8009c98:	08009d7b 	.word	0x08009d7b
 8009c9c:	08009d7b 	.word	0x08009d7b
 8009ca0:	08009d7b 	.word	0x08009d7b
 8009ca4:	08009d7b 	.word	0x08009d7b
 8009ca8:	08009d7b 	.word	0x08009d7b
 8009cac:	08009d7b 	.word	0x08009d7b
 8009cb0:	08009d7b 	.word	0x08009d7b
 8009cb4:	08009d7b 	.word	0x08009d7b
 8009cb8:	08009ced 	.word	0x08009ced
    case LUA_VPROTO:
      luaF_freeproto(L, gco2p(o));
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7fe fd8e 	bl	80087e2 <luaF_freeproto>
      break;
 8009cc6:	e058      	b.n	8009d7a <freeobj+0x166>
    case LUA_VUPVAL:
      freeupval(L, gco2upv(o));
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ff8a 	bl	8009be6 <freeupval>
      break;
 8009cd2:	e052      	b.n	8009d7a <freeobj+0x166>
    case LUA_VLCL: {
      LClosure *cl = gco2lcl(o);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	613b      	str	r3, [r7, #16]
      luaM_freemem(L, cl, sizeLclosure(cl->nupvalues));
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	799b      	ldrb	r3, [r3, #6]
 8009cdc:	3304      	adds	r3, #4
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6939      	ldr	r1, [r7, #16]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 f95f 	bl	800afa8 <luaM_free_>
      break;
 8009cea:	e046      	b.n	8009d7a <freeobj+0x166>
    }
    case LUA_VCCL: {
      CClosure *cl = gco2ccl(o);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	61fb      	str	r3, [r7, #28]
      luaM_freemem(L, cl, sizeCclosure(cl->nupvalues));
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	799b      	ldrb	r3, [r3, #6]
 8009cf4:	3302      	adds	r3, #2
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	69f9      	ldr	r1, [r7, #28]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 f953 	bl	800afa8 <luaM_free_>
      break;
 8009d02:	e03a      	b.n	8009d7a <freeobj+0x166>
    }
    case LUA_VTABLE:
      luaH_free(L, gco2t(o));
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f003 fce2 	bl	800d6d2 <luaH_free>
      break;
 8009d0e:	e034      	b.n	8009d7a <freeobj+0x166>
    case LUA_VTHREAD:
      luaE_freethread(L, gco2th(o));
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f002 fa15 	bl	800c144 <luaE_freethread>
      break;
 8009d1a:	e02e      	b.n	8009d7a <freeobj+0x166>
    case LUA_VUSERDATA: {
      Udata *u = gco2u(o);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	617b      	str	r3, [r7, #20]
      luaM_freemem(L, o, sizeudata(u->nuvalue, u->len));
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	88db      	ldrh	r3, [r3, #6]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d004      	beq.n	8009d32 <freeobj+0x11e>
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	88db      	ldrh	r3, [r3, #6]
 8009d2c:	3303      	adds	r3, #3
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	e000      	b.n	8009d34 <freeobj+0x120>
 8009d32:	2310      	movs	r3, #16
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	6892      	ldr	r2, [r2, #8]
 8009d38:	4413      	add	r3, r2
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 f932 	bl	800afa8 <luaM_free_>
      break;
 8009d44:	e019      	b.n	8009d7a <freeobj+0x166>
    }
    case LUA_VSHRSTR: {
      TString *ts = gco2ts(o);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	60fb      	str	r3, [r7, #12]
      luaS_remove(L, ts);  /* remove it from hash table */
 8009d4a:	68f9      	ldr	r1, [r7, #12]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f002 fd78 	bl	800c842 <luaS_remove>
      luaM_freemem(L, ts, sizelstring(ts->shrlen));
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	79db      	ldrb	r3, [r3, #7]
 8009d56:	3311      	adds	r3, #17
 8009d58:	461a      	mov	r2, r3
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 f923 	bl	800afa8 <luaM_free_>
      break;
 8009d62:	e00a      	b.n	8009d7a <freeobj+0x166>
    }
    case LUA_VLNGSTR: {
      TString *ts = gco2ts(o);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	61bb      	str	r3, [r7, #24]
      luaM_freemem(L, ts, sizelstring(ts->u.lnglen));
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	3311      	adds	r3, #17
 8009d6e:	461a      	mov	r2, r3
 8009d70:	69b9      	ldr	r1, [r7, #24]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 f918 	bl	800afa8 <luaM_free_>
      break;
 8009d78:	bf00      	nop
    }
    default: lua_assert(0);
  }
}
 8009d7a:	bf00      	nop
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop

08009d84 <sweeplist>:
** white; change all non-dead objects back to white, preparing for next
** collection cycle. Return where to continue the traversal or NULL if
** list is finished. ('*countout' gets the number of elements traversed.)
*/
static GCObject **sweeplist (lua_State *L, GCObject **p, int countin,
                             int *countout) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08a      	sub	sp, #40	; 0x28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
  global_State *g = G(L);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	623b      	str	r3, [r7, #32]
  int ow = otherwhite(g);
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d9e:	f083 0318 	eor.w	r3, r3, #24
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	61fb      	str	r3, [r7, #28]
  int i;
  int white = luaC_white(g);  /* current white */
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009dac:	f003 0318 	and.w	r3, r3, #24
 8009db0:	61bb      	str	r3, [r7, #24]
  for (i = 0; *p != NULL && i < countin; i++) {
 8009db2:	2300      	movs	r3, #0
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24
 8009db6:	e024      	b.n	8009e02 <sweeplist+0x7e>
    GCObject *curr = *p;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	617b      	str	r3, [r7, #20]
    int marked = curr->marked;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	795b      	ldrb	r3, [r3, #5]
 8009dc2:	613b      	str	r3, [r7, #16]
    if (isdeadm(ow, marked)) {  /* is 'curr' dead? */
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	4013      	ands	r3, r2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d008      	beq.n	8009de0 <sweeplist+0x5c>
      *p = curr->next;  /* remove 'curr' from list */
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	601a      	str	r2, [r3, #0]
      freeobj(L, curr);  /* erase 'curr' */
 8009dd6:	6979      	ldr	r1, [r7, #20]
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff ff1b 	bl	8009c14 <freeobj>
 8009dde:	e00d      	b.n	8009dfc <sweeplist+0x78>
    }
    else {  /* change mark to 'white' */
      curr->marked = cast_byte((marked & ~maskgcbits) | white);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009de8:	b25a      	sxtb	r2, r3
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	b25b      	sxtb	r3, r3
 8009dee:	4313      	orrs	r3, r2
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	715a      	strb	r2, [r3, #5]
      p = &curr->next;  /* go to next element */
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	60bb      	str	r3, [r7, #8]
  for (i = 0; *p != NULL && i < countin; i++) {
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	3301      	adds	r3, #1
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <sweeplist+0x8e>
 8009e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	dbd2      	blt.n	8009db8 <sweeplist+0x34>
    }
  }
  if (countout)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <sweeplist+0x9a>
    *countout = i;  /* number of elements traversed */
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1c:	601a      	str	r2, [r3, #0]
  return (*p == NULL) ? NULL : p;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <sweeplist+0xa6>
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	e000      	b.n	8009e2c <sweeplist+0xa8>
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3728      	adds	r7, #40	; 0x28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <sweeptolive>:


/*
** sweep a list until a live object (or end of list)
*/
static GCObject **sweeptolive (lua_State *L, GCObject **p) {
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  GCObject **old = p;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	60fb      	str	r3, [r7, #12]
  do {
    p = sweeplist(L, p, 1, NULL);
 8009e42:	2300      	movs	r3, #0
 8009e44:	2201      	movs	r2, #1
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff ff9b 	bl	8009d84 <sweeplist>
 8009e4e:	6038      	str	r0, [r7, #0]
  } while (p == old);
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d0f4      	beq.n	8009e42 <sweeptolive+0xe>
  return p;
 8009e58:	683b      	ldr	r3, [r7, #0]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <checkSizes>:
*/

/*
** If possible, shrink string table.
*/
static void checkSizes (lua_State *L, global_State *g) {
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  if (!g->gcemergency) {
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d11e      	bne.n	8009eb4 <checkSizes+0x52>
    if (g->strt.nuse < g->strt.size / 4) {  /* string table too big? */
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	69da      	ldr	r2, [r3, #28]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	da00      	bge.n	8009e84 <checkSizes+0x22>
 8009e82:	3303      	adds	r3, #3
 8009e84:	109b      	asrs	r3, r3, #2
 8009e86:	429a      	cmp	r2, r3
 8009e88:	da14      	bge.n	8009eb4 <checkSizes+0x52>
      l_mem olddebt = g->GCdebt;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	60fb      	str	r3, [r7, #12]
      luaS_resize(L, g->strt.size / 2);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	0fda      	lsrs	r2, r3, #31
 8009e96:	4413      	add	r3, r2
 8009e98:	105b      	asrs	r3, r3, #1
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f002 fbc8 	bl	800c632 <luaS_resize>
      g->GCestimate += g->GCdebt - olddebt;  /* correct estimate */
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	68d1      	ldr	r1, [r2, #12]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	1a8a      	subs	r2, r1, r2
 8009eae:	441a      	add	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	611a      	str	r2, [r3, #16]
    }
  }
}
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <udata2finalize>:

/*
** Get the next udata to be finalized from the 'tobefnz' list, and
** link it back into the 'allgc' list.
*/
static GCObject *udata2finalize (global_State *g) {
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  GCObject *o = g->tobefnz;  /* get first element */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ec8:	60fb      	str	r3, [r7, #12]
  lua_assert(tofinalize(o));
  g->tobefnz = o->next;  /* remove it from 'tobefnz' list */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	665a      	str	r2, [r3, #100]	; 0x64
  o->next = g->allgc;  /* return it to 'allgc' list */
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	601a      	str	r2, [r3, #0]
  g->allgc = o;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	645a      	str	r2, [r3, #68]	; 0x44
  resetbit(o->marked, FINALIZEDBIT);  /* object is "normal" again */
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	795b      	ldrb	r3, [r3, #5]
 8009ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	715a      	strb	r2, [r3, #5]
  if (issweepphase(g))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d917      	bls.n	8009f28 <udata2finalize+0x6c>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009efe:	2b06      	cmp	r3, #6
 8009f00:	d812      	bhi.n	8009f28 <udata2finalize+0x6c>
    makewhite(g, o);  /* "sweep" object */
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	795b      	ldrb	r3, [r3, #5]
 8009f06:	b25b      	sxtb	r3, r3
 8009f08:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009f0c:	b25a      	sxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f14:	b25b      	sxtb	r3, r3
 8009f16:	f003 0318 	and.w	r3, r3, #24
 8009f1a:	b25b      	sxtb	r3, r3
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	b25b      	sxtb	r3, r3
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	715a      	strb	r2, [r3, #5]
 8009f26:	e008      	b.n	8009f3a <udata2finalize+0x7e>
  else if (getage(o) == G_OLD1)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	795b      	ldrb	r3, [r3, #5]
 8009f2c:	f003 0307 	and.w	r3, r3, #7
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d102      	bne.n	8009f3a <udata2finalize+0x7e>
    g->firstold1 = o;  /* it is the first OLD1 object in the list */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	679a      	str	r2, [r3, #120]	; 0x78
  return o;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <dothecall>:


static void dothecall (lua_State *L, void *ud) {
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  UNUSED(ud);
  luaD_callnoyield(L, L->top - 2, 0);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	3b10      	subs	r3, #16
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7fe f979 	bl	8008254 <luaD_callnoyield>
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <GCTM>:


static void GCTM (lua_State *L) {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b092      	sub	sp, #72	; 0x48
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  const TValue *tm;
  TValue v;
  lua_assert(!g->gcemergency);
  setgcovalue(L, &v, udata2finalize(g));
 8009f7a:	f107 030c 	add.w	r3, r7, #12
 8009f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f82:	f7ff ff9b 	bl	8009ebc <udata2finalize>
 8009f86:	6378      	str	r0, [r7, #52]	; 0x34
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f90:	791b      	ldrb	r3, [r3, #4]
 8009f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	711a      	strb	r2, [r3, #4]
  tm = luaT_gettmbyobj(L, &v, TM_GC);
 8009f9c:	f107 030c 	add.w	r3, r7, #12
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f003 ffeb 	bl	800df80 <luaT_gettmbyobj>
 8009faa:	6338      	str	r0, [r7, #48]	; 0x30
  if (!notm(tm)) {  /* is there a finalizer? */
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	791b      	ldrb	r3, [r3, #4]
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d072      	beq.n	800a09e <GCTM+0x132>
    int status;
    lu_byte oldah = L->allowhook;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	79db      	ldrb	r3, [r3, #7]
 8009fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int oldgcstp  = g->gcstp;
 8009fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    g->gcstp |= GCSTPGC;  /* avoid GC steps */
 8009fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fce:	f043 0302 	orr.w	r3, r3, #2
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    L->allowhook = 0;  /* stop debug hooks during GC metamethod */
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	71da      	strb	r2, [r3, #7]
    setobj2s(L, L->top++, tm);  /* push finalizer... */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	f103 0108 	add.w	r1, r3, #8
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	60d1      	str	r1, [r2, #12]
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	623b      	str	r3, [r7, #32]
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	6a3a      	ldr	r2, [r7, #32]
 8009ff6:	6812      	ldr	r2, [r2, #0]
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	791a      	ldrb	r2, [r3, #4]
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	711a      	strb	r2, [r3, #4]
    setobj2s(L, L->top++, &v);  /* ... and its argument */
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f103 0108 	add.w	r1, r3, #8
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	60d1      	str	r1, [r2, #12]
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	f107 030c 	add.w	r3, r7, #12
 800a014:	61bb      	str	r3, [r7, #24]
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	791a      	ldrb	r2, [r3, #4]
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	711a      	strb	r2, [r3, #4]
    L->ci->callstatus |= CIST_FIN;  /* will run a finalizer */
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a034:	b292      	uxth	r2, r2
 800a036:	845a      	strh	r2, [r3, #34]	; 0x22
    status = luaD_pcall(L, dothecall, NULL, savestack(L, L->top - 2), 0);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f1a3 0210 	sub.w	r2, r3, #16
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	2200      	movs	r2, #0
 800a048:	9200      	str	r2, [sp, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	4916      	ldr	r1, [pc, #88]	; (800a0a8 <GCTM+0x13c>)
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7fe f956 	bl	8008300 <luaD_pcall>
 800a054:	6178      	str	r0, [r7, #20]
    L->ci->callstatus &= ~CIST_FIN;  /* not running a finalizer anymore */
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a064:	b292      	uxth	r2, r2
 800a066:	845a      	strh	r2, [r3, #34]	; 0x22
    L->allowhook = oldah;  /* restore hooks */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a06e:	71da      	strb	r2, [r3, #7]
    g->gcstp = oldgcstp;  /* restore state */
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	b2da      	uxtb	r2, r3
 800a074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    if (l_unlikely(status != LUA_OK)) {  /* error while running __gc? */
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	bf14      	ite	ne
 800a080:	2301      	movne	r3, #1
 800a082:	2300      	moveq	r3, #0
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d009      	beq.n	800a09e <GCTM+0x132>
      luaE_warnerror(L, "__gc");
 800a08a:	4908      	ldr	r1, [pc, #32]	; (800a0ac <GCTM+0x140>)
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f002 f9dd 	bl	800c44c <luaE_warnerror>
      L->top--;  /* pops error object */
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f1a3 0208 	sub.w	r2, r3, #8
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60da      	str	r2, [r3, #12]
    }
  }
}
 800a09e:	bf00      	nop
 800a0a0:	3740      	adds	r7, #64	; 0x40
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	08009f49 	.word	0x08009f49
 800a0ac:	0801eb80 	.word	0x0801eb80

0800a0b0 <runafewfinalizers>:


/*
** Call a few finalizers
*/
static int runafewfinalizers (lua_State *L, int n) {
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	60bb      	str	r3, [r7, #8]
  int i;
  for (i = 0; i < n && g->tobefnz; i++)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e005      	b.n	800a0d2 <runafewfinalizers+0x22>
    GCTM(L);  /* call one finalizer */
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff ff50 	bl	8009f6c <GCTM>
  for (i = 0; i < n && g->tobefnz; i++)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	da03      	bge.n	800a0e2 <runafewfinalizers+0x32>
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f1      	bne.n	800a0c6 <runafewfinalizers+0x16>
  return i;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <callallpendingfinalizers>:


/*
** call all pending finalizers
*/
static void callallpendingfinalizers (lua_State *L) {
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	60fb      	str	r3, [r7, #12]
  while (g->tobefnz)
 800a0fa:	e002      	b.n	800a102 <callallpendingfinalizers+0x16>
    GCTM(L);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff ff35 	bl	8009f6c <GCTM>
  while (g->tobefnz)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1f8      	bne.n	800a0fc <callallpendingfinalizers+0x10>
}
 800a10a:	bf00      	nop
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <findlast>:


/*
** find last 'next' field in list 'p' list (to add elements in its end)
*/
static GCObject **findlast (GCObject **p) {
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  while (*p != NULL)
 800a11c:	e002      	b.n	800a124 <findlast+0x10>
    p = &(*p)->next;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	607b      	str	r3, [r7, #4]
  while (*p != NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1f8      	bne.n	800a11e <findlast+0xa>
  return p;
 800a12c:	687b      	ldr	r3, [r7, #4]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <separatetobefnz>:
** finalization from list 'finobj' to list 'tobefnz' (to be finalized).
** (Note that objects after 'finobjold1' cannot be white, so they
** don't need to be traversed. In incremental mode, 'finobjold1' is NULL,
** so the whole list is traversed.)
*/
static void separatetobefnz (global_State *g, int all) {
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
  GCObject *curr;
  GCObject **p = &g->finobj;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	334c      	adds	r3, #76	; 0x4c
 800a148:	617b      	str	r3, [r7, #20]
  GCObject **lastnext = findlast(&g->tobefnz);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3364      	adds	r3, #100	; 0x64
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff ffe0 	bl	800a114 <findlast>
 800a154:	6138      	str	r0, [r7, #16]
  while ((curr = *p) != g->finobjold1) {  /* traverse all finalizable objects */
 800a156:	e021      	b.n	800a19c <separatetobefnz+0x62>
    lua_assert(tofinalize(curr));
    if (!(iswhite(curr) || all))  /* not being collected? */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	795b      	ldrb	r3, [r3, #5]
 800a15c:	f003 0318 	and.w	r3, r3, #24
 800a160:	2b00      	cmp	r3, #0
 800a162:	d105      	bne.n	800a170 <separatetobefnz+0x36>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d102      	bne.n	800a170 <separatetobefnz+0x36>
      p = &curr->next;  /* don't bother with it */
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	e015      	b.n	800a19c <separatetobefnz+0x62>
    else {
      if (curr == g->finobjsur)  /* removing 'finobjsur'? */
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	429a      	cmp	r2, r3
 800a178:	d103      	bne.n	800a182 <separatetobefnz+0x48>
        g->finobjsur = curr->next;  /* correct it */
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	67da      	str	r2, [r3, #124]	; 0x7c
      *p = curr->next;  /* remove 'curr' from 'finobj' list */
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	601a      	str	r2, [r3, #0]
      curr->next = *lastnext;  /* link at the end of 'tobefnz' list */
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	601a      	str	r2, [r3, #0]
      *lastnext = curr;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	601a      	str	r2, [r3, #0]
      lastnext = &curr->next;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	613b      	str	r3, [r7, #16]
  while ((curr = *p) != g->finobjold1) {  /* traverse all finalizable objects */
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d1d4      	bne.n	800a158 <separatetobefnz+0x1e>
    }
  }
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <sweep2old>:
** Sweep a list of objects to enter generational mode.  Deletes dead
** objects and turns the non dead to old. All non-dead threads---which
** are now old---must be in a gray list. Everything else is not in a
** gray list. Open upvalues are also kept gray.
*/
static void sweep2old (lua_State *L, GCObject **p) {
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  GCObject *curr;
  global_State *g = G(L);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	617b      	str	r3, [r7, #20]
  while ((curr = *p) != NULL) {
 800a1c8:	e045      	b.n	800a256 <sweep2old+0x9e>
    if (iswhite(curr)) {  /* is 'curr' dead? */
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	795b      	ldrb	r3, [r3, #5]
 800a1ce:	f003 0318 	and.w	r3, r3, #24
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d008      	beq.n	800a1e8 <sweep2old+0x30>
      lua_assert(isdead(g, curr));
      *p = curr->next;  /* remove 'curr' from list */
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	601a      	str	r2, [r3, #0]
      freeobj(L, curr);  /* erase 'curr' */
 800a1de:	6939      	ldr	r1, [r7, #16]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff fd17 	bl	8009c14 <freeobj>
 800a1e6:	e036      	b.n	800a256 <sweep2old+0x9e>
    }
    else {  /* all surviving objects become old */
      setage(curr, G_OLD);
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	795b      	ldrb	r3, [r3, #5]
 800a1ec:	b25b      	sxtb	r3, r3
 800a1ee:	f023 0307 	bic.w	r3, r3, #7
 800a1f2:	b25b      	sxtb	r3, r3
 800a1f4:	f043 0304 	orr.w	r3, r3, #4
 800a1f8:	b25b      	sxtb	r3, r3
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	715a      	strb	r2, [r3, #5]
      if (curr->tt == LUA_VTHREAD) {  /* threads must be watched */
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	791b      	ldrb	r3, [r3, #4]
 800a204:	2b08      	cmp	r3, #8
 800a206:	d10b      	bne.n	800a220 <sweep2old+0x68>
        lua_State *th = gco2th(curr);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	60fb      	str	r3, [r7, #12]
        linkgclist(th, g->grayagain);  /* insert into 'grayagain' list */
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	3354      	adds	r3, #84	; 0x54
 800a218:	461a      	mov	r2, r3
 800a21a:	f7fe fbdf 	bl	80089dc <linkgclist_>
 800a21e:	e018      	b.n	800a252 <sweep2old+0x9a>
      }
      else if (curr->tt == LUA_VUPVAL && upisopen(gco2upv(curr)))
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	791b      	ldrb	r3, [r3, #4]
 800a224:	2b09      	cmp	r3, #9
 800a226:	d10d      	bne.n	800a244 <sweep2old+0x8c>
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	330c      	adds	r3, #12
 800a230:	429a      	cmp	r2, r3
 800a232:	d007      	beq.n	800a244 <sweep2old+0x8c>
        set2gray(curr);  /* open upvalues are always gray */
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	795b      	ldrb	r3, [r3, #5]
 800a238:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	715a      	strb	r2, [r3, #5]
 800a242:	e006      	b.n	800a252 <sweep2old+0x9a>
      else  /* everything else is black */
        nw2black(curr);
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	795b      	ldrb	r3, [r3, #5]
 800a248:	f043 0320 	orr.w	r3, r3, #32
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	715a      	strb	r2, [r3, #5]
      p = &curr->next;  /* go to next element */
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	603b      	str	r3, [r7, #0]
  while ((curr = *p) != NULL) {
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1b3      	bne.n	800a1ca <sweep2old+0x12>
    }
  }
}
 800a262:	bf00      	nop
 800a264:	bf00      	nop
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <sweepgen>:
** here, because these old-generation objects are usually not swept
** here.  They will all be advanced in 'correctgraylist'. That function
** will also remove objects turned white here from any gray list.
*/
static GCObject **sweepgen (lua_State *L, global_State *g, GCObject **p,
                            GCObject *limit, GCObject **pfirstold1) {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
    G_OLD,       /* from G_OLD1 */
    G_OLD,       /* from G_OLD (do not change) */
    G_TOUCHED1,  /* from G_TOUCHED1 (do not change) */
    G_TOUCHED2   /* from G_TOUCHED2 (do not change) */
  };
  int white = luaC_white(g);
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a280:	f003 0318 	and.w	r3, r3, #24
 800a284:	61fb      	str	r3, [r7, #28]
  GCObject *curr;
  while ((curr = *p) != limit) {
 800a286:	e047      	b.n	800a318 <sweepgen+0xac>
    if (iswhite(curr)) {  /* is 'curr' dead? */
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	795b      	ldrb	r3, [r3, #5]
 800a28c:	f003 0318 	and.w	r3, r3, #24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d008      	beq.n	800a2a6 <sweepgen+0x3a>
      lua_assert(!isold(curr) && isdead(g, curr));
      *p = curr->next;  /* remove 'curr' from list */
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	601a      	str	r2, [r3, #0]
      freeobj(L, curr);  /* erase 'curr' */
 800a29c:	69b9      	ldr	r1, [r7, #24]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7ff fcb8 	bl	8009c14 <freeobj>
 800a2a4:	e038      	b.n	800a318 <sweepgen+0xac>
    }
    else {  /* correct mark and age */
      if (getage(curr) == G_NEW) {  /* new objects go back to white */
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	795b      	ldrb	r3, [r3, #5]
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d111      	bne.n	800a2d6 <sweepgen+0x6a>
        int marked = curr->marked & ~maskgcbits;  /* erase GC bits */
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	795b      	ldrb	r3, [r3, #5]
 800a2b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a2ba:	617b      	str	r3, [r7, #20]
        curr->marked = cast_byte(marked | G_SURVIVAL | white);
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	b25b      	sxtb	r3, r3
 800a2c0:	f043 0301 	orr.w	r3, r3, #1
 800a2c4:	b25a      	sxtb	r2, r3
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	b25b      	sxtb	r3, r3
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	b25b      	sxtb	r3, r3
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	715a      	strb	r2, [r3, #5]
 800a2d4:	e01e      	b.n	800a314 <sweepgen+0xa8>
      }
      else {  /* all other objects will be old, and so keep their color */
        setage(curr, nextage[getage(curr)]);
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	795b      	ldrb	r3, [r3, #5]
 800a2da:	b25b      	sxtb	r3, r3
 800a2dc:	f023 0307 	bic.w	r3, r3, #7
 800a2e0:	b25a      	sxtb	r2, r3
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	795b      	ldrb	r3, [r3, #5]
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	4911      	ldr	r1, [pc, #68]	; (800a330 <sweepgen+0xc4>)
 800a2ec:	5ccb      	ldrb	r3, [r1, r3]
 800a2ee:	b25b      	sxtb	r3, r3
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	b25b      	sxtb	r3, r3
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	715a      	strb	r2, [r3, #5]
        if (getage(curr) == G_OLD1 && *pfirstold1 == NULL)
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	795b      	ldrb	r3, [r3, #5]
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	2b03      	cmp	r3, #3
 800a304:	d106      	bne.n	800a314 <sweepgen+0xa8>
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d102      	bne.n	800a314 <sweepgen+0xa8>
          *pfirstold1 = curr;  /* first OLD1 object in the list */
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	69ba      	ldr	r2, [r7, #24]
 800a312:	601a      	str	r2, [r3, #0]
      }
      p = &curr->next;  /* go to next element */
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	607b      	str	r3, [r7, #4]
  while ((curr = *p) != limit) {
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	61bb      	str	r3, [r7, #24]
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	429a      	cmp	r2, r3
 800a324:	d1b0      	bne.n	800a288 <sweepgen+0x1c>
    }
  }
  return p;
 800a326:	687b      	ldr	r3, [r7, #4]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3720      	adds	r7, #32
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	0801f31c 	.word	0x0801f31c

0800a334 <whitelist>:
/*
** Traverse a list making all its elements white and clearing their
** age. In incremental mode, all objects are 'new' all the time,
** except for fixed strings (which are always old).
*/
static void whitelist (global_State *g, GCObject *p) {
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  int white = luaC_white(g);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a344:	f003 0318 	and.w	r3, r3, #24
 800a348:	60fb      	str	r3, [r7, #12]
  for (; p != NULL; p = p->next)
 800a34a:	e00f      	b.n	800a36c <whitelist+0x38>
    p->marked = cast_byte((p->marked & ~maskgcbits) | white);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	795b      	ldrb	r3, [r3, #5]
 800a350:	b25b      	sxtb	r3, r3
 800a352:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a356:	b25a      	sxtb	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	b25b      	sxtb	r3, r3
 800a35c:	4313      	orrs	r3, r2
 800a35e:	b25b      	sxtb	r3, r3
 800a360:	b2da      	uxtb	r2, r3
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	715a      	strb	r2, [r3, #5]
  for (; p != NULL; p = p->next)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1ec      	bne.n	800a34c <whitelist+0x18>
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <correctgraylist>:
** be turned white and still be in the list. They are only removed.
** 'TOUCHED1' objects are advanced to 'TOUCHED2' and remain on the list;
** Non-white threads also remain on the list; 'TOUCHED2' objects become
** regular old; they and anything else are removed from the list.
*/
static GCObject **correctgraylist (GCObject **p) {
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  GCObject *curr;
  while ((curr = *p) != NULL) {
 800a388:	e041      	b.n	800a40e <correctgraylist+0x8e>
    GCObject **next = getgclist(curr);
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7fe faba 	bl	8008904 <getgclist>
 800a390:	60b8      	str	r0, [r7, #8]
    if (iswhite(curr))
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	795b      	ldrb	r3, [r3, #5]
 800a396:	f003 0318 	and.w	r3, r3, #24
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d12d      	bne.n	800a3fa <correctgraylist+0x7a>
      goto remove;  /* remove all white objects */
    else if (getage(curr) == G_TOUCHED1) {  /* touched in this cycle? */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	795b      	ldrb	r3, [r3, #5]
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	d10e      	bne.n	800a3c8 <correctgraylist+0x48>
      lua_assert(isgray(curr));
      nw2black(curr);  /* make it black, for next barrier */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	795b      	ldrb	r3, [r3, #5]
 800a3ae:	f043 0320 	orr.w	r3, r3, #32
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	715a      	strb	r2, [r3, #5]
      changeage(curr, G_TOUCHED1, G_TOUCHED2);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	795b      	ldrb	r3, [r3, #5]
 800a3bc:	f083 0303 	eor.w	r3, r3, #3
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	715a      	strb	r2, [r3, #5]
      goto remain;  /* keep it in the list and go to next element */
 800a3c6:	e01f      	b.n	800a408 <correctgraylist+0x88>
    }
    else if (curr->tt == LUA_VTHREAD) {
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	791b      	ldrb	r3, [r3, #4]
 800a3cc:	2b08      	cmp	r3, #8
 800a3ce:	d01a      	beq.n	800a406 <correctgraylist+0x86>
      lua_assert(isgray(curr));
      goto remain;  /* keep non-white threads on the list */
    }
    else {  /* everything else is removed */
      lua_assert(isold(curr));  /* young objects should be white here */
      if (getage(curr) == G_TOUCHED2)  /* advance from TOUCHED2... */
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	795b      	ldrb	r3, [r3, #5]
 800a3d4:	f003 0307 	and.w	r3, r3, #7
 800a3d8:	2b06      	cmp	r3, #6
 800a3da:	d106      	bne.n	800a3ea <correctgraylist+0x6a>
        changeage(curr, G_TOUCHED2, G_OLD);  /* ... to OLD */
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	795b      	ldrb	r3, [r3, #5]
 800a3e0:	f083 0302 	eor.w	r3, r3, #2
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	715a      	strb	r2, [r3, #5]
      nw2black(curr);  /* make object black (to be removed) */
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	795b      	ldrb	r3, [r3, #5]
 800a3ee:	f043 0320 	orr.w	r3, r3, #32
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	715a      	strb	r2, [r3, #5]
      goto remove;
 800a3f8:	e000      	b.n	800a3fc <correctgraylist+0x7c>
      goto remove;  /* remove all white objects */
 800a3fa:	bf00      	nop
    }
    remove: *p = *next; continue;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	e003      	b.n	800a40e <correctgraylist+0x8e>
      goto remain;  /* keep non-white threads on the list */
 800a406:	bf00      	nop
    remain: p = next; continue;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	607b      	str	r3, [r7, #4]
 800a40c:	bf00      	nop
  while ((curr = *p) != NULL) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1b7      	bne.n	800a38a <correctgraylist+0xa>
  }
  return p;
 800a41a:	687b      	ldr	r3, [r7, #4]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <correctgraylists>:


/*
** Correct all gray lists, coalescing them into 'grayagain'.
*/
static void correctgraylists (global_State *g) {
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  GCObject **list = correctgraylist(&g->grayagain);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3354      	adds	r3, #84	; 0x54
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff ffa5 	bl	800a380 <correctgraylist>
 800a436:	60f8      	str	r0, [r7, #12]
  *list = g->weak; g->weak = NULL;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	659a      	str	r2, [r3, #88]	; 0x58
  list = correctgraylist(list);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff ff9a 	bl	800a380 <correctgraylist>
 800a44c:	60f8      	str	r0, [r7, #12]
  *list = g->allweak; g->allweak = NULL;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	661a      	str	r2, [r3, #96]	; 0x60
  list = correctgraylist(list);
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f7ff ff8f 	bl	800a380 <correctgraylist>
 800a462:	60f8      	str	r0, [r7, #12]
  *list = g->ephemeron; g->ephemeron = NULL;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	65da      	str	r2, [r3, #92]	; 0x5c
  correctgraylist(list);
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7ff ff84 	bl	800a380 <correctgraylist>
}
 800a478:	bf00      	nop
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <markold>:
/*
** Mark black 'OLD1' objects when starting a new young collection.
** Gray objects are already in some gray list, and so will be visited
** in the atomic step.
*/
static void markold (global_State *g, GCObject *from, GCObject *to) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  GCObject *p;
  for (p = from; p != to; p = p->next) {
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	617b      	str	r3, [r7, #20]
 800a490:	e019      	b.n	800a4c6 <markold+0x46>
    if (getage(p) == G_OLD1) {
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	795b      	ldrb	r3, [r3, #5]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d110      	bne.n	800a4c0 <markold+0x40>
      lua_assert(!iswhite(p));
      changeage(p, G_OLD1, G_OLD);  /* now they are old */
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	795b      	ldrb	r3, [r3, #5]
 800a4a2:	f083 0307 	eor.w	r3, r3, #7
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	715a      	strb	r2, [r3, #5]
      if (isblack(p))
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	795b      	ldrb	r3, [r3, #5]
 800a4b0:	f003 0320 	and.w	r3, r3, #32
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d003      	beq.n	800a4c0 <markold+0x40>
        reallymarkobject(g, p);
 800a4b8:	6979      	ldr	r1, [r7, #20]
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7fe fbae 	bl	8008c1c <reallymarkobject>
  for (p = from; p != to; p = p->next) {
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d1e1      	bne.n	800a492 <markold+0x12>
    }
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <finishgencycle>:


/*
** Finish a young-generation collection.
*/
static void finishgencycle (lua_State *L, global_State *g) {
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  correctgraylists(g);
 800a4e2:	6838      	ldr	r0, [r7, #0]
 800a4e4:	f7ff ff9e 	bl	800a424 <correctgraylists>
  checkSizes(L, g);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fcb9 	bl	8009e62 <checkSizes>
  g->gcstate = GCSpropagate;  /* skip restart */
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  if (!g->gcemergency)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d102      	bne.n	800a508 <finishgencycle+0x30>
    callallpendingfinalizers(L);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fdf2 	bl	800a0ec <callallpendingfinalizers>
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <youngcollection>:
/*
** Does a young collection. First, mark 'OLD1' objects. Then does the
** atomic step. Then, sweep all lists and advance pointers. Finally,
** finish the collection.
*/
static void youngcollection (lua_State *L, global_State *g) {
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af02      	add	r7, sp, #8
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  GCObject **psurvival;  /* to point to first non-dead survival object */
  GCObject *dummy;  /* dummy out parameter to 'sweepgen' */
  lua_assert(g->gcstate == GCSpropagate);
  if (g->firstold1) {  /* are there regular OLD1 objects? */
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <youngcollection+0x28>
    markold(g, g->firstold1, g->reallyold);  /* mark them */
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a52a:	461a      	mov	r2, r3
 800a52c:	6838      	ldr	r0, [r7, #0]
 800a52e:	f7ff ffa7 	bl	800a480 <markold>
    g->firstold1 = NULL;  /* no more OLD1 objects (for now) */
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2200      	movs	r2, #0
 800a536:	679a      	str	r2, [r3, #120]	; 0x78
  }
  markold(g, g->finobj, g->finobjrold);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a542:	461a      	mov	r2, r3
 800a544:	6838      	ldr	r0, [r7, #0]
 800a546:	f7ff ff9b 	bl	800a480 <markold>
  markold(g, g->tobefnz, NULL);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a54e:	2200      	movs	r2, #0
 800a550:	4619      	mov	r1, r3
 800a552:	6838      	ldr	r0, [r7, #0]
 800a554:	f7ff ff94 	bl	800a480 <markold>
  atomic(L);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fa94 	bl	800aa86 <atomic>

  /* sweep nursery and get a pointer to its last live element */
  g->gcstate = GCSswpallgc;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2203      	movs	r2, #3
 800a562:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  psurvival = sweepgen(L, g, &g->allgc, g->survival, &g->firstold1);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	3378      	adds	r3, #120	; 0x78
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	460b      	mov	r3, r1
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff fe76 	bl	800a26c <sweepgen>
 800a580:	60f8      	str	r0, [r7, #12]
  /* sweep 'survival' */
  sweepgen(L, g, psurvival, g->old1, &g->firstold1);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	3378      	adds	r3, #120	; 0x78
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff fe6a 	bl	800a26c <sweepgen>
  g->reallyold = g->old1;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	675a      	str	r2, [r3, #116]	; 0x74
  g->old1 = *psurvival;  /* 'survival' survivals are old now */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	671a      	str	r2, [r3, #112]	; 0x70
  g->survival = g->allgc;  /* all news are survivals */
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* repeat for 'finobj' lists */
  dummy = NULL;  /* no 'firstold1' optimization for 'finobj' lists */
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60bb      	str	r3, [r7, #8]
  psurvival = sweepgen(L, g, &g->finobj, g->finobjsur, &dummy);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800a5be:	f107 0308 	add.w	r3, r7, #8
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff fe4f 	bl	800a26c <sweepgen>
 800a5ce:	60f8      	str	r0, [r7, #12]
  /* sweep 'survival' */
  sweepgen(L, g, psurvival, g->finobjold1, &dummy);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a5d6:	f107 0308 	add.w	r3, r7, #8
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff fe42 	bl	800a26c <sweepgen>
  g->finobjrold = g->finobjold1;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  g->finobjold1 = *psurvival;  /* 'survival' survivals are old now */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  g->finobjsur = g->finobj;  /* all news are survivals */
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	67da      	str	r2, [r3, #124]	; 0x7c

  sweepgen(L, g, &g->tobefnz, NULL, &dummy);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800a60c:	f107 0308 	add.w	r3, r7, #8
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	2300      	movs	r3, #0
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff fe28 	bl	800a26c <sweepgen>
  finishgencycle(L, g);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff ff5a 	bl	800a4d8 <finishgencycle>
}
 800a624:	bf00      	nop
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <atomic2gen>:
** Clears all gray lists, sweeps objects, and prepare sublists to enter
** generational mode. The sweeps remove dead objects and turn all
** surviving objects to old. Threads go back to 'grayagain'; everything
** else is turned black (not in any gray list).
*/
static void atomic2gen (lua_State *L, global_State *g) {
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  cleargraylists(g);
 800a636:	6838      	ldr	r0, [r7, #0]
 800a638:	f7fe fc64 	bl	8008f04 <cleargraylists>
  /* sweep all elements making them old */
  g->gcstate = GCSswpallgc;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2203      	movs	r2, #3
 800a640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  sweep2old(L, &g->allgc);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	3344      	adds	r3, #68	; 0x44
 800a648:	4619      	mov	r1, r3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff fdb4 	bl	800a1b8 <sweep2old>
  /* everything alive now is old */
  g->reallyold = g->old1 = g->survival = g->allgc;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	66da      	str	r2, [r3, #108]	; 0x6c
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	671a      	str	r2, [r3, #112]	; 0x70
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	675a      	str	r2, [r3, #116]	; 0x74
  g->firstold1 = NULL;  /* there are no OLD1 objects anywhere */
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2200      	movs	r2, #0
 800a66c:	679a      	str	r2, [r3, #120]	; 0x78

  /* repeat for 'finobj' lists */
  sweep2old(L, &g->finobj);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	334c      	adds	r3, #76	; 0x4c
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff fd9f 	bl	800a1b8 <sweep2old>
  g->finobjrold = g->finobjold1 = g->finobjsur = g->finobj;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	67da      	str	r2, [r3, #124]	; 0x7c
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  sweep2old(L, &g->tobefnz);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	3364      	adds	r3, #100	; 0x64
 800a69c:	4619      	mov	r1, r3
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff fd8a 	bl	800a1b8 <sweep2old>

  g->gckind = KGC_GEN;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  g->lastatomic = 0;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	615a      	str	r2, [r3, #20]
  g->GCestimate = gettotalbytes(g);  /* base for memory control */
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	689a      	ldr	r2, [r3, #8]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	461a      	mov	r2, r3
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	611a      	str	r2, [r3, #16]
  finishgencycle(L, g);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff ff07 	bl	800a4d8 <finishgencycle>
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <entergen>:
** Enter generational mode. Must go until the end of an atomic cycle
** to ensure that all objects are correctly marked and weak tables
** are cleared. Then, turn all objects into old and finishes the
** collection.
*/
static lu_mem entergen (lua_State *L, global_State *g) {
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
  lu_mem numobjs;
  luaC_runtilstate(L, bitmask(GCSpause));  /* prepare to start a new cycle */
 800a6dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fb4f 	bl	800ad84 <luaC_runtilstate>
  luaC_runtilstate(L, bitmask(GCSpropagate));  /* start new cycle */
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fb4b 	bl	800ad84 <luaC_runtilstate>
  numobjs = atomic(L);  /* propagates all and then do the atomic stuff */
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f9c9 	bl	800aa86 <atomic>
 800a6f4:	60f8      	str	r0, [r7, #12]
  atomic2gen(L, g);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ff97 	bl	800a62c <atomic2gen>
  return numobjs;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <enterinc>:
/*
** Enter incremental mode. Turn all objects white, make all
** intermediate lists point to NULL (to avoid invalid pointers),
** and go to the pause state.
*/
static void enterinc (global_State *g) {
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  whitelist(g, g->allgc);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff fe0c 	bl	800a334 <whitelist>
  g->reallyold = g->old1 = g->survival = NULL;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	66da      	str	r2, [r3, #108]	; 0x6c
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	671a      	str	r2, [r3, #112]	; 0x70
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	675a      	str	r2, [r3, #116]	; 0x74
  whitelist(g, g->finobj);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff fdfb 	bl	800a334 <whitelist>
  whitelist(g, g->tobefnz);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff fdf5 	bl	800a334 <whitelist>
  g->finobjrold = g->finobjold1 = g->finobjsur = NULL;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	67da      	str	r2, [r3, #124]	; 0x7c
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  g->gcstate = GCSpause;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2208      	movs	r2, #8
 800a76a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  g->gckind = KGC_INC;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  g->lastatomic = 0;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	615a      	str	r2, [r3, #20]
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <luaC_changemode>:


/*
** Change collector mode to 'newmode'.
*/
void luaC_changemode (lua_State *L, int newmode) {
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	60fb      	str	r3, [r7, #12]
  if (newmode != g->gckind) {
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a79a:	461a      	mov	r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d00a      	beq.n	800a7b8 <luaC_changemode+0x34>
    if (newmode == KGC_GEN)  /* entering generational mode? */
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d104      	bne.n	800a7b2 <luaC_changemode+0x2e>
      entergen(L, g);
 800a7a8:	68f9      	ldr	r1, [r7, #12]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff ff91 	bl	800a6d2 <entergen>
 800a7b0:	e002      	b.n	800a7b8 <luaC_changemode+0x34>
    else
      enterinc(g);  /* entering incremental mode */
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7ff ffa8 	bl	800a708 <enterinc>
  }
  g->lastatomic = 0;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	615a      	str	r2, [r3, #20]
}
 800a7be:	bf00      	nop
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <fullgen>:


/*
** Does a full collection in generational mode.
*/
static lu_mem fullgen (lua_State *L, global_State *g) {
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
  enterinc(g);
 800a7d0:	6838      	ldr	r0, [r7, #0]
 800a7d2:	f7ff ff99 	bl	800a708 <enterinc>
  return entergen(L, g);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7ff ff7a 	bl	800a6d2 <entergen>
 800a7de:	4603      	mov	r3, r0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <setminordebt>:

/*
** Set debt for the next minor collection, which will happen when
** memory grows 'genminormul'%.
*/
static void setminordebt (global_State *g) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  luaE_setdebt(g, -(cast(l_mem, (gettotalbytes(g) / 100)) * g->genminormul));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689a      	ldr	r2, [r3, #8]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4b09      	ldr	r3, [pc, #36]	; (800a824 <setminordebt+0x3c>)
 800a7fe:	fba3 2302 	umull	r2, r3, r3, r2
 800a802:	095b      	lsrs	r3, r3, #5
 800a804:	461a      	mov	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a80c:	fb02 f303 	mul.w	r3, r2, r3
 800a810:	425b      	negs	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 fa8b 	bl	800bd30 <luaE_setdebt>
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	51eb851f 	.word	0x51eb851f

0800a828 <stepgenfull>:
** decide whether to return to generational mode. Instead, it uses the
** number of objects traversed (returned by 'atomic') as a proxy. The
** field 'g->lastatomic' keeps this count from the last collection.
** ('g->lastatomic != 0' also means that the last collection was bad.)
*/
static void stepgenfull (lua_State *L, global_State *g) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  lu_mem newatomic;  /* count of traversed objects */
  lu_mem lastatomic = g->lastatomic;  /* count from last collection */
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	60fb      	str	r3, [r7, #12]
  if (g->gckind == KGC_GEN)  /* still in generational mode? */
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d102      	bne.n	800a848 <stepgenfull+0x20>
    enterinc(g);  /* enter incremental mode */
 800a842:	6838      	ldr	r0, [r7, #0]
 800a844:	f7ff ff60 	bl	800a708 <enterinc>
  luaC_runtilstate(L, bitmask(GCSpropagate));  /* start new cycle */
 800a848:	2101      	movs	r1, #1
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fa9a 	bl	800ad84 <luaC_runtilstate>
  newatomic = atomic(L);  /* mark everybody */
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f918 	bl	800aa86 <atomic>
 800a856:	60b8      	str	r0, [r7, #8]
  if (newatomic < lastatomic + (lastatomic >> 3)) {  /* good collection? */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	08da      	lsrs	r2, r3, #3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	429a      	cmp	r2, r3
 800a864:	d207      	bcs.n	800a876 <stepgenfull+0x4e>
    atomic2gen(L, g);  /* return to generational mode */
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7ff fedf 	bl	800a62c <atomic2gen>
    setminordebt(g);
 800a86e:	6838      	ldr	r0, [r7, #0]
 800a870:	f7ff ffba 	bl	800a7e8 <setminordebt>
    entersweep(L);
    luaC_runtilstate(L, bitmask(GCSpause));  /* finish collection */
    setpause(g);
    g->lastatomic = newatomic;
  }
}
 800a874:	e015      	b.n	800a8a2 <stepgenfull+0x7a>
    g->GCestimate = gettotalbytes(g);  /* first estimate */;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	689a      	ldr	r2, [r3, #8]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	461a      	mov	r2, r3
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	611a      	str	r2, [r3, #16]
    entersweep(L);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8a2 	bl	800a9d0 <entersweep>
    luaC_runtilstate(L, bitmask(GCSpause));  /* finish collection */
 800a88c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fa77 	bl	800ad84 <luaC_runtilstate>
    setpause(g);
 800a896:	6838      	ldr	r0, [r7, #0]
 800a898:	f000 f862 	bl	800a960 <setpause>
    g->lastatomic = newatomic;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	615a      	str	r2, [r3, #20]
}
 800a8a2:	bf00      	nop
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <genstep>:
** go to 'stepgenfull'.
**
** 'GCdebt <= 0' means an explicit call to GC step with "size" zero;
** in that case, do a minor collection.
*/
static void genstep (lua_State *L, global_State *g) {
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  if (g->lastatomic != 0)  /* last collection was a bad one? */
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <genstep+0x1c>
    stepgenfull(L, g);  /* do a full step */
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff ffb1 	bl	800a828 <stepgenfull>
      setminordebt(g);
      g->GCestimate = majorbase;  /* preserve base value */
    }
  }
  lua_assert(isdecGCmodegen(g));
}
 800a8c6:	e044      	b.n	800a952 <genstep+0xa6>
    lu_mem majorbase = g->GCestimate;  /* memory after last major collection */
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	617b      	str	r3, [r7, #20]
    lu_mem majorinc = (majorbase / 100) * getgcparam(g->genmajormul);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	4a22      	ldr	r2, [pc, #136]	; (800a95c <genstep+0xb0>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	095b      	lsrs	r3, r3, #5
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800a8de:	fb02 f303 	mul.w	r3, r2, r3
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	613b      	str	r3, [r7, #16]
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dd26      	ble.n	800a93c <genstep+0x90>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	689a      	ldr	r2, [r3, #8]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	4413      	add	r3, r2
 800a900:	4299      	cmp	r1, r3
 800a902:	d91b      	bls.n	800a93c <genstep+0x90>
      lu_mem numobjs = fullgen(L, g);  /* do a major collection */
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff ff5d 	bl	800a7c6 <fullgen>
 800a90c:	60f8      	str	r0, [r7, #12]
      if (gettotalbytes(g) < majorbase + (majorinc / 2)) {
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	689a      	ldr	r2, [r3, #8]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4413      	add	r3, r2
 800a918:	4619      	mov	r1, r3
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	085a      	lsrs	r2, r3, #1
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	4413      	add	r3, r2
 800a922:	4299      	cmp	r1, r3
 800a924:	d203      	bcs.n	800a92e <genstep+0x82>
        setminordebt(g);
 800a926:	6838      	ldr	r0, [r7, #0]
 800a928:	f7ff ff5e 	bl	800a7e8 <setminordebt>
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
 800a92c:	e011      	b.n	800a952 <genstep+0xa6>
        g->lastatomic = numobjs;  /* signal that last collection was bad */
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	615a      	str	r2, [r3, #20]
        setpause(g);  /* do a long wait for next (major) collection */
 800a934:	6838      	ldr	r0, [r7, #0]
 800a936:	f000 f813 	bl	800a960 <setpause>
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
 800a93a:	e00a      	b.n	800a952 <genstep+0xa6>
      youngcollection(L, g);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fde6 	bl	800a510 <youngcollection>
      setminordebt(g);
 800a944:	6838      	ldr	r0, [r7, #0]
 800a946:	f7ff ff4f 	bl	800a7e8 <setminordebt>
      g->GCestimate = majorbase;  /* preserve base value */
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	611a      	str	r2, [r3, #16]
}
 800a950:	e7ff      	b.n	800a952 <genstep+0xa6>
 800a952:	bf00      	nop
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	51eb851f 	.word	0x51eb851f

0800a960 <setpause>:
** Set the "time" to wait before starting a new GC cycle; cycle will
** start when memory use hits the threshold of ('estimate' * pause /
** PAUSEADJ). (Division by 'estimate' should be OK: it cannot be zero,
** because Lua cannot even start with less than PAUSEADJ bytes).
*/
static void setpause (global_State *g) {
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  l_mem threshold, debt;
  int pause = getgcparam(g->gcpause);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	613b      	str	r3, [r7, #16]
  l_mem estimate = g->GCestimate / PAUSEADJ;  /* adjust 'estimate' */
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	4a15      	ldr	r2, [pc, #84]	; (800a9cc <setpause+0x6c>)
 800a978:	fba2 2303 	umull	r2, r3, r2, r3
 800a97c:	095b      	lsrs	r3, r3, #5
 800a97e:	60fb      	str	r3, [r7, #12]
  lua_assert(estimate > 0);
  threshold = (pause < MAX_LMEM / estimate)  /* overflow? */
 800a980:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	fb92 f3f3 	sdiv	r3, r2, r3
            ? estimate * pause  /* no overflow */
            : MAX_LMEM;  /* overflow; truncate to maximum */
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	da04      	bge.n	800a99a <setpause+0x3a>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	e001      	b.n	800a99e <setpause+0x3e>
 800a99a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  threshold = (pause < MAX_LMEM / estimate)  /* overflow? */
 800a99e:	60bb      	str	r3, [r7, #8]
  debt = gettotalbytes(g) - threshold;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	617b      	str	r3, [r7, #20]
  if (debt > 0) debt = 0;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	dd01      	ble.n	800a9bc <setpause+0x5c>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	617b      	str	r3, [r7, #20]
  luaE_setdebt(g, debt);
 800a9bc:	6979      	ldr	r1, [r7, #20]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 f9b6 	bl	800bd30 <luaE_setdebt>
}
 800a9c4:	bf00      	nop
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	51eb851f 	.word	0x51eb851f

0800a9d0 <entersweep>:
** The call to 'sweeptolive' makes the pointer point to an object
** inside the list (instead of to the header), so that the real sweep do
** not need to skip objects created between "now" and the start of the
** real sweep.
*/
static void entersweep (lua_State *L) {
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	60fb      	str	r3, [r7, #12]
  g->gcstate = GCSswpallgc;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2203      	movs	r2, #3
 800a9e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  lua_assert(g->sweepgc == NULL);
  g->sweepgc = sweeptolive(L, &g->allgc);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3344      	adds	r3, #68	; 0x44
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff fa21 	bl	8009e34 <sweeptolive>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a9f8:	bf00      	nop
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <deletelist>:

/*
** Delete all objects in list 'p' until (but not including) object
** 'limit'.
*/
static void deletelist (lua_State *L, GCObject *p, GCObject *limit) {
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  while (p != limit) {
 800aa0c:	e008      	b.n	800aa20 <deletelist+0x20>
    GCObject *next = p->next;
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	617b      	str	r3, [r7, #20]
    freeobj(L, p);
 800aa14:	68b9      	ldr	r1, [r7, #8]
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f7ff f8fc 	bl	8009c14 <freeobj>
    p = next;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	60bb      	str	r3, [r7, #8]
  while (p != limit) {
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d1f2      	bne.n	800aa0e <deletelist+0xe>
  }
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <luaC_freeallobjects>:

/*
** Call all finalizers of the objects in the given Lua state, and
** then free all objects, except for the main thread.
*/
void luaC_freeallobjects (lua_State *L) {
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	60fb      	str	r3, [r7, #12]
  g->gcstp = GCSTPCLS;  /* no extra finalizers after here */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2204      	movs	r2, #4
 800aa44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  luaC_changemode(L, KGC_INC);
 800aa48:	2100      	movs	r1, #0
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff fe9a 	bl	800a784 <luaC_changemode>
  separatetobefnz(g, 1);  /* separate all objects with finalizers */
 800aa50:	2101      	movs	r1, #1
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fb71 	bl	800a13a <separatetobefnz>
  lua_assert(g->finobj == NULL);
  callallpendingfinalizers(L);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff fb47 	bl	800a0ec <callallpendingfinalizers>
  deletelist(L, g->allgc, obj2gco(g->mainthread));
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff ffc8 	bl	800aa00 <deletelist>
  lua_assert(g->finobj == NULL);  /* no new finalizers */
  deletelist(L, g->fixedgc, NULL);  /* collect fixed objects */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa74:	2200      	movs	r2, #0
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff ffc1 	bl	800aa00 <deletelist>
  lua_assert(g->strt.nuse == 0);
}
 800aa7e:	bf00      	nop
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <atomic>:


static lu_mem atomic (lua_State *L) {
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b088      	sub	sp, #32
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	61fb      	str	r3, [r7, #28]
  lu_mem work = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61bb      	str	r3, [r7, #24]
  GCObject *origweak, *origall;
  GCObject *grayagain = g->grayagain;  /* save original list */
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9c:	617b      	str	r3, [r7, #20]
  g->grayagain = NULL;
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	655a      	str	r2, [r3, #84]	; 0x54
  lua_assert(g->ephemeron == NULL && g->weak == NULL);
  lua_assert(!iswhite(g->mainthread));
  g->gcstate = GCSatomic;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	2202      	movs	r2, #2
 800aaa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  markobject(g, L);  /* mark running thread */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	795b      	ldrb	r3, [r3, #5]
 800aab0:	f003 0318 	and.w	r3, r3, #24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d004      	beq.n	800aac2 <atomic+0x3c>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4619      	mov	r1, r3
 800aabc:	69f8      	ldr	r0, [r7, #28]
 800aabe:	f7fe f8ad 	bl	8008c1c <reallymarkobject>
  /* registry and global metatables may be changed by API */
  markvalue(g, &g->l_registry);
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00c      	beq.n	800aaea <atomic+0x64>
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	795b      	ldrb	r3, [r3, #5]
 800aad6:	f003 0318 	and.w	r3, r3, #24
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d005      	beq.n	800aaea <atomic+0x64>
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae2:	4619      	mov	r1, r3
 800aae4:	69f8      	ldr	r0, [r7, #28]
 800aae6:	f7fe f899 	bl	8008c1c <reallymarkobject>
  markmt(g);  /* mark global metatables */
 800aaea:	69f8      	ldr	r0, [r7, #28]
 800aaec:	f7fe f962 	bl	8008db4 <markmt>
  work += propagateall(g);  /* empties 'gray' list */
 800aaf0:	69f8      	ldr	r0, [r7, #28]
 800aaf2:	f7fe ff73 	bl	80099dc <propagateall>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	4413      	add	r3, r2
 800aafc:	61bb      	str	r3, [r7, #24]
  /* remark occasional upvalues of (maybe) dead threads */
  work += remarkupvals(g);
 800aafe:	69f8      	ldr	r0, [r7, #28]
 800ab00:	f7fe f9aa 	bl	8008e58 <remarkupvals>
 800ab04:	4603      	mov	r3, r0
 800ab06:	461a      	mov	r2, r3
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	61bb      	str	r3, [r7, #24]
  work += propagateall(g);  /* propagate changes */
 800ab0e:	69f8      	ldr	r0, [r7, #28]
 800ab10:	f7fe ff64 	bl	80099dc <propagateall>
 800ab14:	4602      	mov	r2, r0
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	4413      	add	r3, r2
 800ab1a:	61bb      	str	r3, [r7, #24]
  g->gray = grayagain;
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	651a      	str	r2, [r3, #80]	; 0x50
  work += propagateall(g);  /* traverse 'grayagain' list */
 800ab22:	69f8      	ldr	r0, [r7, #28]
 800ab24:	f7fe ff5a 	bl	80099dc <propagateall>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	61bb      	str	r3, [r7, #24]
  convergeephemerons(g);
 800ab30:	69f8      	ldr	r0, [r7, #28]
 800ab32:	f7fe ff6a 	bl	8009a0a <convergeephemerons>
  /* at this point, all strongly accessible objects are marked. */
  /* Clear values from weak tables, before checking finalizers */
  clearbyvalues(g, g->weak, NULL);
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	69f8      	ldr	r0, [r7, #28]
 800ab40:	f7fe ffe3 	bl	8009b0a <clearbyvalues>
  clearbyvalues(g, g->allweak, NULL);
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab48:	2200      	movs	r2, #0
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	69f8      	ldr	r0, [r7, #28]
 800ab4e:	f7fe ffdc 	bl	8009b0a <clearbyvalues>
  origweak = g->weak; origall = g->allweak;
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab56:	613b      	str	r3, [r7, #16]
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab5c:	60fb      	str	r3, [r7, #12]
  separatetobefnz(g, 0);  /* separate objects to be finalized */
 800ab5e:	2100      	movs	r1, #0
 800ab60:	69f8      	ldr	r0, [r7, #28]
 800ab62:	f7ff faea 	bl	800a13a <separatetobefnz>
  work += markbeingfnz(g);  /* mark objects that will be finalized */
 800ab66:	69f8      	ldr	r0, [r7, #28]
 800ab68:	f7fe f953 	bl	8008e12 <markbeingfnz>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	4413      	add	r3, r2
 800ab72:	61bb      	str	r3, [r7, #24]
  work += propagateall(g);  /* remark, to propagate 'resurrection' */
 800ab74:	69f8      	ldr	r0, [r7, #28]
 800ab76:	f7fe ff31 	bl	80099dc <propagateall>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	4413      	add	r3, r2
 800ab80:	61bb      	str	r3, [r7, #24]
  convergeephemerons(g);
 800ab82:	69f8      	ldr	r0, [r7, #28]
 800ab84:	f7fe ff41 	bl	8009a0a <convergeephemerons>
  /* at this point, all resurrected objects are marked. */
  /* remove dead objects from weak tables */
  clearbykeys(g, g->ephemeron);  /* clear keys from all ephemeron tables */
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	69f8      	ldr	r0, [r7, #28]
 800ab90:	f7fe ff77 	bl	8009a82 <clearbykeys>
  clearbykeys(g, g->allweak);  /* clear keys from all 'allweak' tables */
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab98:	4619      	mov	r1, r3
 800ab9a:	69f8      	ldr	r0, [r7, #28]
 800ab9c:	f7fe ff71 	bl	8009a82 <clearbykeys>
  /* clear values from resurrected weak tables */
  clearbyvalues(g, g->weak, origweak);
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	4619      	mov	r1, r3
 800aba8:	69f8      	ldr	r0, [r7, #28]
 800abaa:	f7fe ffae 	bl	8009b0a <clearbyvalues>
  clearbyvalues(g, g->allweak, origall);
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4619      	mov	r1, r3
 800abb6:	69f8      	ldr	r0, [r7, #28]
 800abb8:	f7fe ffa7 	bl	8009b0a <clearbyvalues>
  luaS_clearcache(g);
 800abbc:	69f8      	ldr	r0, [r7, #28]
 800abbe:	f001 fd80 	bl	800c6c2 <luaS_clearcache>
  g->currentwhite = cast_byte(otherwhite(g));  /* flip current white */
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800abc8:	f083 0318 	eor.w	r3, r3, #24
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  lua_assert(g->gray == NULL);
  return work;  /* estimate of slots marked by 'atomic' */
 800abd4:	69bb      	ldr	r3, [r7, #24]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3720      	adds	r7, #32
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <sweepstep>:


static int sweepstep (lua_State *L, global_State *g,
                      int nextstate, GCObject **nextlist) {
 800abde:	b580      	push	{r7, lr}
 800abe0:	b086      	sub	sp, #24
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
 800abea:	603b      	str	r3, [r7, #0]
  if (g->sweepgc) {
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d018      	beq.n	800ac26 <sweepstep+0x48>
    l_mem olddebt = g->GCdebt;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	617b      	str	r3, [r7, #20]
    int count;
    g->sweepgc = sweeplist(L, g->sweepgc, GCSWEEPMAX, &count);
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800abfe:	f107 0310 	add.w	r3, r7, #16
 800ac02:	2264      	movs	r2, #100	; 0x64
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff f8bd 	bl	8009d84 <sweeplist>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	649a      	str	r2, [r3, #72]	; 0x48
    g->GCestimate += g->GCdebt - olddebt;  /* update estimate */
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	68d1      	ldr	r1, [r2, #12]
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	1a8a      	subs	r2, r1, r2
 800ac1c:	441a      	add	r2, r3
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	611a      	str	r2, [r3, #16]
    return count;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	e008      	b.n	800ac38 <sweepstep+0x5a>
  }
  else {  /* enter next state */
    g->gcstate = nextstate;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    g->sweepgc = nextlist;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	649a      	str	r2, [r3, #72]	; 0x48
    return 0;  /* no work done */
 800ac36:	2300      	movs	r3, #0
  }
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <singlestep>:


static lu_mem singlestep (lua_State *L) {
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	60bb      	str	r3, [r7, #8]
  lu_mem work;
  lua_assert(!g->gcstopem);  /* collector is not reentrant */
  g->gcstopem = 1;  /* no emergency collections while collecting */
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  switch (g->gcstate) {
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	f200 8085 	bhi.w	800ad6c <singlestep+0x12c>
 800ac62:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <singlestep+0x28>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800aca1 	.word	0x0800aca1
 800ac6c:	0800acc1 	.word	0x0800acc1
 800ac70:	0800ad6d 	.word	0x0800ad6d
 800ac74:	0800ace1 	.word	0x0800ace1
 800ac78:	0800acf5 	.word	0x0800acf5
 800ac7c:	0800ad09 	.word	0x0800ad09
 800ac80:	0800ad1b 	.word	0x0800ad1b
 800ac84:	0800ad31 	.word	0x0800ad31
 800ac88:	0800ac8d 	.word	0x0800ac8d
    case GCSpause: {
      restartcollection(g);
 800ac8c:	68b8      	ldr	r0, [r7, #8]
 800ac8e:	f7fe f955 	bl	8008f3c <restartcollection>
      g->gcstate = GCSpropagate;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      work = 1;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	60fb      	str	r3, [r7, #12]
      break;
 800ac9e:	e067      	b.n	800ad70 <singlestep+0x130>
    }
    case GCSpropagate: {
      if (g->gray == NULL) {  /* no more gray objects? */
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d106      	bne.n	800acb6 <singlestep+0x76>
        g->gcstate = GCSenteratomic;  /* finish propagate phase */
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        work = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	60fb      	str	r3, [r7, #12]
      }
      else
        work = propagatemark(g);  /* traverse one gray object */
      break;
 800acb4:	e05c      	b.n	800ad70 <singlestep+0x130>
        work = propagatemark(g);  /* traverse one gray object */
 800acb6:	68b8      	ldr	r0, [r7, #8]
 800acb8:	f7fe fdfe 	bl	80098b8 <propagatemark>
 800acbc:	60f8      	str	r0, [r7, #12]
      break;
 800acbe:	e057      	b.n	800ad70 <singlestep+0x130>
    }
    case GCSenteratomic: {
      work = atomic(L);  /* work is what was traversed by 'atomic' */
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff fee0 	bl	800aa86 <atomic>
 800acc6:	60f8      	str	r0, [r7, #12]
      entersweep(L);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fe81 	bl	800a9d0 <entersweep>
      g->GCestimate = gettotalbytes(g);  /* first estimate */;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	689a      	ldr	r2, [r3, #8]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	461a      	mov	r2, r3
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	611a      	str	r2, [r3, #16]
      break;
 800acde:	e047      	b.n	800ad70 <singlestep+0x130>
    }
    case GCSswpallgc: {  /* sweep "regular" objects */
      work = sweepstep(L, g, GCSswpfinobj, &g->finobj);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	334c      	adds	r3, #76	; 0x4c
 800ace4:	2204      	movs	r2, #4
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff ff78 	bl	800abde <sweepstep>
 800acee:	4603      	mov	r3, r0
 800acf0:	60fb      	str	r3, [r7, #12]
      break;
 800acf2:	e03d      	b.n	800ad70 <singlestep+0x130>
    }
    case GCSswpfinobj: {  /* sweep objects with finalizers */
      work = sweepstep(L, g, GCSswptobefnz, &g->tobefnz);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	3364      	adds	r3, #100	; 0x64
 800acf8:	2205      	movs	r2, #5
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff ff6e 	bl	800abde <sweepstep>
 800ad02:	4603      	mov	r3, r0
 800ad04:	60fb      	str	r3, [r7, #12]
      break;
 800ad06:	e033      	b.n	800ad70 <singlestep+0x130>
    }
    case GCSswptobefnz: {  /* sweep objects to be finalized */
      work = sweepstep(L, g, GCSswpend, NULL);
 800ad08:	2300      	movs	r3, #0
 800ad0a:	2206      	movs	r2, #6
 800ad0c:	68b9      	ldr	r1, [r7, #8]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff ff65 	bl	800abde <sweepstep>
 800ad14:	4603      	mov	r3, r0
 800ad16:	60fb      	str	r3, [r7, #12]
      break;
 800ad18:	e02a      	b.n	800ad70 <singlestep+0x130>
    }
    case GCSswpend: {  /* finish sweeps */
      checkSizes(L, g);
 800ad1a:	68b9      	ldr	r1, [r7, #8]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff f8a0 	bl	8009e62 <checkSizes>
      g->gcstate = GCScallfin;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2207      	movs	r2, #7
 800ad26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      work = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60fb      	str	r3, [r7, #12]
      break;
 800ad2e:	e01f      	b.n	800ad70 <singlestep+0x130>
    }
    case GCScallfin: {  /* call remaining finalizers */
      if (g->tobefnz && !g->gcemergency) {
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d012      	beq.n	800ad5e <singlestep+0x11e>
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10d      	bne.n	800ad5e <singlestep+0x11e>
        g->gcstopem = 0;  /* ok collections during finalizers */
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
        work = runafewfinalizers(L, GCFINMAX) * GCFINALIZECOST;
 800ad4a:	210a      	movs	r1, #10
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff f9af 	bl	800a0b0 <runafewfinalizers>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2232      	movs	r2, #50	; 0x32
 800ad56:	fb02 f303 	mul.w	r3, r2, r3
 800ad5a:	60fb      	str	r3, [r7, #12]
      }
      else {  /* emergency mode or no more finalizers */
        g->gcstate = GCSpause;  /* finish collection */
        work = 0;
      }
      break;
 800ad5c:	e008      	b.n	800ad70 <singlestep+0x130>
        g->gcstate = GCSpause;  /* finish collection */
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2208      	movs	r2, #8
 800ad62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        work = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
      break;
 800ad6a:	e001      	b.n	800ad70 <singlestep+0x130>
    }
    default: lua_assert(0); return 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e004      	b.n	800ad7a <singlestep+0x13a>
  }
  g->gcstopem = 0;
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  return work;
 800ad78:	68fb      	ldr	r3, [r7, #12]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop

0800ad84 <luaC_runtilstate>:

/*
** advances the garbage collector until it reaches a state allowed
** by 'statemask'
*/
void luaC_runtilstate (lua_State *L, int statesmask) {
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	60fb      	str	r3, [r7, #12]
  while (!testbit(statesmask, g->gcstate))
 800ad94:	e002      	b.n	800ad9c <luaC_runtilstate+0x18>
    singlestep(L);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff ff52 	bl	800ac40 <singlestep>
  while (!testbit(statesmask, g->gcstate))
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ada2:	461a      	mov	r2, r3
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	4113      	asrs	r3, r2
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d0f2      	beq.n	800ad96 <luaC_runtilstate+0x12>
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <incstep>:
** converted from bytes to "units of work"; then the function loops
** running single steps until adding that many units of work or
** finishing a cycle (pause state). Finally, it sets the debt that
** controls when next step will be performed.
*/
static void incstep (lua_State *L, global_State *g) {
 800adba:	b580      	push	{r7, lr}
 800adbc:	b086      	sub	sp, #24
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
  int stepmul = (getgcparam(g->gcstepmul) | 1);  /* avoid division by 0 */
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	f043 0301 	orr.w	r3, r3, #1
 800add0:	613b      	str	r3, [r7, #16]
  l_mem debt = (g->GCdebt / WORK2MEM) * stepmul;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	08db      	lsrs	r3, r3, #3
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	fb02 f303 	mul.w	r3, r2, r3
 800adde:	617b      	str	r3, [r7, #20]
  l_mem stepsize = (g->gcstepsize <= log2maxs(l_mem))
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
                 ? ((cast(l_mem, 1) << g->gcstepsize) / WORK2MEM) * stepmul
                 : MAX_LMEM;  /* overflow; keep maximum value */
 800ade6:	2b1e      	cmp	r3, #30
 800ade8:	d80a      	bhi.n	800ae00 <incstep+0x46>
                 ? ((cast(l_mem, 1) << g->gcstepsize) / WORK2MEM) * stepmul
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adf0:	461a      	mov	r2, r3
 800adf2:	2301      	movs	r3, #1
 800adf4:	4093      	lsls	r3, r2
 800adf6:	08db      	lsrs	r3, r3, #3
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	fb02 f303 	mul.w	r3, r2, r3
 800adfe:	e001      	b.n	800ae04 <incstep+0x4a>
                 : MAX_LMEM;  /* overflow; keep maximum value */
 800ae00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  l_mem stepsize = (g->gcstepsize <= log2maxs(l_mem))
 800ae04:	60fb      	str	r3, [r7, #12]
  do {  /* repeat until pause or enough "credit" (negative debt) */
    lu_mem work = singlestep(L);  /* perform one single step */
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff ff1a 	bl	800ac40 <singlestep>
 800ae0c:	60b8      	str	r0, [r7, #8]
    debt -= work;
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	617b      	str	r3, [r7, #20]
  } while (debt > -stepsize && g->gcstate != GCSpause);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	425b      	negs	r3, r3
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	dd04      	ble.n	800ae2a <incstep+0x70>
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae26:	2b08      	cmp	r3, #8
 800ae28:	d1ed      	bne.n	800ae06 <incstep+0x4c>
  if (g->gcstate == GCSpause)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	d103      	bne.n	800ae3c <incstep+0x82>
    setpause(g);  /* pause until next cycle */
 800ae34:	6838      	ldr	r0, [r7, #0]
 800ae36:	f7ff fd93 	bl	800a960 <setpause>
  else {
    debt = (debt / stepmul) * WORK2MEM;  /* convert 'work units' to bytes */
    luaE_setdebt(g, debt);
  }
}
 800ae3a:	e009      	b.n	800ae50 <incstep+0x96>
    debt = (debt / stepmul) * WORK2MEM;  /* convert 'work units' to bytes */
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	fb92 f3f3 	sdiv	r3, r2, r3
 800ae44:	00db      	lsls	r3, r3, #3
 800ae46:	617b      	str	r3, [r7, #20]
    luaE_setdebt(g, debt);
 800ae48:	6979      	ldr	r1, [r7, #20]
 800ae4a:	6838      	ldr	r0, [r7, #0]
 800ae4c:	f000 ff70 	bl	800bd30 <luaE_setdebt>
}
 800ae50:	bf00      	nop
 800ae52:	3718      	adds	r7, #24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <luaC_step>:

/*
** performs a basic GC step if collector is running
*/
void luaC_step (lua_State *L) {
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	60fb      	str	r3, [r7, #12]
  lua_assert(!g->gcemergency);
  if (gcrunning(g)) {  /* running? */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d111      	bne.n	800ae94 <luaC_step+0x3c>
    if(isdecGCmodegen(g))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d003      	beq.n	800ae82 <luaC_step+0x2a>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <luaC_step+0x34>
      genstep(L, g);
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff fd11 	bl	800a8ac <genstep>
    else
      incstep(L, g);
  }
}
 800ae8a:	e003      	b.n	800ae94 <luaC_step+0x3c>
      incstep(L, g);
 800ae8c:	68f9      	ldr	r1, [r7, #12]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff ff93 	bl	800adba <incstep>
}
 800ae94:	bf00      	nop
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <fullinc>:
** Before running the collection, check 'keepinvariant'; if it is true,
** there may be some objects marked as black, so the collector has
** to sweep all objects to turn them back to white (as white has not
** changed, nothing will be collected).
*/
static void fullinc (lua_State *L, global_State *g) {
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  if (keepinvariant(g))  /* black objects? */
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d802      	bhi.n	800aeb6 <fullinc+0x1a>
    entersweep(L); /* sweep everything to turn them back to white */
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff fd8d 	bl	800a9d0 <entersweep>
  /* finish any pending sweep phase to start a new cycle */
  luaC_runtilstate(L, bitmask(GCSpause));
 800aeb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff ff62 	bl	800ad84 <luaC_runtilstate>
  luaC_runtilstate(L, bitmask(GCScallfin));  /* run up to finalizers */
 800aec0:	2180      	movs	r1, #128	; 0x80
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7ff ff5e 	bl	800ad84 <luaC_runtilstate>
  /* estimate must be correct after a full GC cycle */
  lua_assert(g->GCestimate == gettotalbytes(g));
  luaC_runtilstate(L, bitmask(GCSpause));  /* finish collection */
 800aec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff ff59 	bl	800ad84 <luaC_runtilstate>
  setpause(g);
 800aed2:	6838      	ldr	r0, [r7, #0]
 800aed4:	f7ff fd44 	bl	800a960 <setpause>
}
 800aed8:	bf00      	nop
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <luaC_fullgc>:
/*
** Performs a full GC cycle; if 'isemergency', set a flag to avoid
** some operations which could change the interpreter state in some
** unexpected ways (running finalizers and shrinking some structures).
*/
void luaC_fullgc (lua_State *L, int isemergency) {
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	60fb      	str	r3, [r7, #12]
  lua_assert(!g->gcemergency);
  g->gcemergency = isemergency;  /* set flag */
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if (g->gckind == KGC_INC)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800af00:	2b00      	cmp	r3, #0
 800af02:	d104      	bne.n	800af0e <luaC_fullgc+0x2e>
    fullinc(L, g);
 800af04:	68f9      	ldr	r1, [r7, #12]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7ff ffc8 	bl	800ae9c <fullinc>
 800af0c:	e003      	b.n	800af16 <luaC_fullgc+0x36>
  else
    fullgen(L, g);
 800af0e:	68f9      	ldr	r1, [r7, #12]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff fc58 	bl	800a7c6 <fullgen>
  g->gcemergency = 0;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 800af1e:	bf00      	nop
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <luaX_init>:
  }
  b->buffer[luaZ_bufflen(b)++] = cast_char(c);
}


void luaX_init (lua_State *L) {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  int i;
  TString *e = luaS_newliteral(L, LUA_ENV);  /* create env name */
 800af30:	2204      	movs	r2, #4
 800af32:	4916      	ldr	r1, [pc, #88]	; (800af8c <luaX_init+0x64>)
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 fd67 	bl	800ca08 <luaS_newlstr>
 800af3a:	6138      	str	r0, [r7, #16]
  luaC_fix(L, obj2gco(e));  /* never collect this name */
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7fd fe14 	bl	8008b6e <luaC_fix>
  for (i=0; i<NUM_RESERVED; i++) {
 800af46:	2300      	movs	r3, #0
 800af48:	617b      	str	r3, [r7, #20]
 800af4a:	e016      	b.n	800af7a <luaX_init+0x52>
    TString *ts = luaS_new(L, luaX_tokens[i]);
 800af4c:	4a10      	ldr	r2, [pc, #64]	; (800af90 <luaX_init+0x68>)
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 fd86 	bl	800ca68 <luaS_new>
 800af5c:	60f8      	str	r0, [r7, #12]
    luaC_fix(L, obj2gco(ts));  /* reserved words are never collected */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7fd fe03 	bl	8008b6e <luaC_fix>
    ts->extra = cast_byte(i+1);  /* reserved word */
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	3301      	adds	r3, #1
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	719a      	strb	r2, [r3, #6]
  for (i=0; i<NUM_RESERVED; i++) {
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	3301      	adds	r3, #1
 800af78:	617b      	str	r3, [r7, #20]
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b15      	cmp	r3, #21
 800af7e:	dde5      	ble.n	800af4c <luaX_init+0x24>
  }
}
 800af80:	bf00      	nop
 800af82:	bf00      	nop
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	0801ec90 	.word	0x0801ec90
 800af90:	0801f324 	.word	0x0801f324

0800af94 <luaM_toobig>:
}

/* }================================================================== */


l_noret luaM_toobig (lua_State *L) {
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  luaG_runerror(L, "memory allocation error: block too big");
 800af9c:	4901      	ldr	r1, [pc, #4]	; (800afa4 <luaM_toobig+0x10>)
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7fc f90d 	bl	80071be <luaG_runerror>
 800afa4:	0801ee08 	.word	0x0801ee08

0800afa8 <luaM_free_>:


/*
** Free memory
*/
void luaM_free_ (lua_State *L, void *block, size_t osize) {
 800afa8:	b590      	push	{r4, r7, lr}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
  global_State *g = G(L);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	617b      	str	r3, [r7, #20]
  lua_assert((osize == 0) == (block == NULL));
  (*g->frealloc)(g->ud, block, osize, 0);
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681c      	ldr	r4, [r3, #0]
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	6858      	ldr	r0, [r3, #4]
 800afc2:	2300      	movs	r3, #0
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	47a0      	blx	r4
  g->GCdebt -= osize;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	461a      	mov	r2, r3
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	60da      	str	r2, [r3, #12]
}
 800afda:	bf00      	nop
 800afdc:	371c      	adds	r7, #28
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd90      	pop	{r4, r7, pc}

0800afe2 <tryagain>:
** collector is not yet fully initialized. Also, it should not be called
** when 'gcstopem' is true, because then the interpreter is in the
** middle of a collection step.
*/
static void *tryagain (lua_State *L, void *block,
                       size_t osize, size_t nsize) {
 800afe2:	b590      	push	{r4, r7, lr}
 800afe4:	b087      	sub	sp, #28
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	607a      	str	r2, [r7, #4]
 800afee:	603b      	str	r3, [r7, #0]
  global_State *g = G(L);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	617b      	str	r3, [r7, #20]
  if (completestate(g) && !g->gcstopem) {
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800affc:	f003 030f 	and.w	r3, r3, #15
 800b000:	2b00      	cmp	r3, #0
 800b002:	d112      	bne.n	800b02a <tryagain+0x48>
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10d      	bne.n	800b02a <tryagain+0x48>
    luaC_fullgc(L, 1);  /* try to free some memory... */
 800b00e:	2101      	movs	r1, #1
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7ff ff65 	bl	800aee0 <luaC_fullgc>
    return (*g->frealloc)(g->ud, block, osize, nsize);  /* try again */
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	681c      	ldr	r4, [r3, #0]
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	6858      	ldr	r0, [r3, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	47a0      	blx	r4
 800b026:	4603      	mov	r3, r0
 800b028:	e000      	b.n	800b02c <tryagain+0x4a>
  }
  else return NULL;  /* cannot free any memory without a full state */
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	bd90      	pop	{r4, r7, pc}

0800b034 <luaM_realloc_>:


/*
** Generic allocation routine.
*/
void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {
 800b034:	b590      	push	{r4, r7, lr}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
 800b040:	603b      	str	r3, [r7, #0]
  void *newblock;
  global_State *g = G(L);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	613b      	str	r3, [r7, #16]
  lua_assert((osize == 0) == (block == NULL));
  newblock = firsttry(g, block, osize, nsize);
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	681c      	ldr	r4, [r3, #0]
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	6858      	ldr	r0, [r3, #4]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	47a0      	blx	r4
 800b058:	6178      	str	r0, [r7, #20]
  if (l_unlikely(newblock == NULL && nsize > 0)) {
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d104      	bne.n	800b06a <luaM_realloc_+0x36>
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <luaM_realloc_+0x36>
 800b066:	2301      	movs	r3, #1
 800b068:	e000      	b.n	800b06c <luaM_realloc_+0x38>
 800b06a:	2300      	movs	r3, #0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bf14      	ite	ne
 800b070:	2301      	movne	r3, #1
 800b072:	2300      	moveq	r3, #0
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00b      	beq.n	800b092 <luaM_realloc_+0x5e>
    newblock = tryagain(L, block, osize, nsize);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff ffae 	bl	800afe2 <tryagain>
 800b086:	6178      	str	r0, [r7, #20]
    if (newblock == NULL)  /* still no memory? */
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <luaM_realloc_+0x5e>
      return NULL;  /* do not update 'GCdebt' */
 800b08e:	2300      	movs	r3, #0
 800b090:	e00a      	b.n	800b0a8 <luaM_realloc_+0x74>
  }
  lua_assert((nsize == 0) == (newblock == NULL));
  g->GCdebt = (g->GCdebt + nsize) - osize;
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	461a      	mov	r2, r3
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	441a      	add	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	60da      	str	r2, [r3, #12]
  return newblock;
 800b0a6:	697b      	ldr	r3, [r7, #20]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	371c      	adds	r7, #28
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd90      	pop	{r4, r7, pc}

0800b0b0 <luaM_malloc_>:
    luaM_error(L);
  return newblock;
}


void *luaM_malloc_ (lua_State *L, size_t size, int tag) {
 800b0b0:	b590      	push	{r4, r7, lr}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  if (size == 0)
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <luaM_malloc_+0x16>
    return NULL;  /* that's all */
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e02a      	b.n	800b11c <luaM_malloc_+0x6c>
  else {
    global_State *g = G(L);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	613b      	str	r3, [r7, #16]
    void *newblock = firsttry(g, NULL, tag, size);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	681c      	ldr	r4, [r3, #0]
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	6858      	ldr	r0, [r3, #4]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2100      	movs	r1, #0
 800b0da:	47a0      	blx	r4
 800b0dc:	6178      	str	r0, [r7, #20]
    if (l_unlikely(newblock == NULL)) {
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	bf0c      	ite	eq
 800b0e4:	2301      	moveq	r3, #1
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00d      	beq.n	800b10a <luaM_malloc_+0x5a>
      newblock = tryagain(L, NULL, tag, size);
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f7ff ff74 	bl	800afe2 <tryagain>
 800b0fa:	6178      	str	r0, [r7, #20]
      if (newblock == NULL)
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d103      	bne.n	800b10a <luaM_malloc_+0x5a>
        luaM_error(L);
 800b102:	2104      	movs	r1, #4
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7fc f9f5 	bl	80074f4 <luaD_throw>
    }
    g->GCdebt += size;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	461a      	mov	r2, r3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	4413      	add	r3, r2
 800b114:	461a      	mov	r2, r3
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	60da      	str	r2, [r3, #12]
    return newblock;
 800b11a:	697b      	ldr	r3, [r7, #20]
  }
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	371c      	adds	r7, #28
 800b120:	46bd      	mov	sp, r7
 800b122:	bd90      	pop	{r4, r7, pc}

0800b124 <luaO_ceillog2>:


/*
** Computes ceil(log2(x))
*/
int luaO_ceillog2 (unsigned int x) {
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
  };
  int l = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]
  x--;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3b01      	subs	r3, #1
 800b134:	607b      	str	r3, [r7, #4]
  while (x >= 256) { l += 8; x >>= 8; }
 800b136:	e005      	b.n	800b144 <luaO_ceillog2+0x20>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	3308      	adds	r3, #8
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	0a1b      	lsrs	r3, r3, #8
 800b142:	607b      	str	r3, [r7, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2bff      	cmp	r3, #255	; 0xff
 800b148:	d8f6      	bhi.n	800b138 <luaO_ceillog2+0x14>
  return l + log_2[x];
 800b14a:	4a06      	ldr	r2, [pc, #24]	; (800b164 <luaO_ceillog2+0x40>)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4413      	add	r3, r2
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4413      	add	r3, r2
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	0801f3b8 	.word	0x0801f3b8

0800b168 <luaO_hexavalue>:
    luaT_trybinTM(L, p1, p2, res, cast(TMS, (op - LUA_OPADD) + TM_ADD));
  }
}


int luaO_hexavalue (int c) {
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  if (lisdigit(c)) return c - '0';
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3301      	adds	r3, #1
 800b174:	4a09      	ldr	r2, [pc, #36]	; (800b19c <luaO_hexavalue+0x34>)
 800b176:	5cd3      	ldrb	r3, [r2, r3]
 800b178:	f003 0302 	and.w	r3, r3, #2
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <luaO_hexavalue+0x1e>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3b30      	subs	r3, #48	; 0x30
 800b184:	e003      	b.n	800b18e <luaO_hexavalue+0x26>
  else return (ltolower(c) - 'a') + 10;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f043 0320 	orr.w	r3, r3, #32
 800b18c:	3b57      	subs	r3, #87	; 0x57
}
 800b18e:	4618      	mov	r0, r3
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	0801f218 	.word	0x0801f218

0800b1a0 <isneg>:


static int isneg (const char **s) {
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  if (**s == '-') { (*s)++; return 1; }
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b2d      	cmp	r3, #45	; 0x2d
 800b1b0:	d106      	bne.n	800b1c0 <isneg+0x20>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e00a      	b.n	800b1d6 <isneg+0x36>
  else if (**s == '+') (*s)++;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b2b      	cmp	r3, #43	; 0x2b
 800b1c8:	d104      	bne.n	800b1d4 <isneg+0x34>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	601a      	str	r2, [r3, #0]
  return 0;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <l_str2dloc>:
/*
** Convert string 's' to a Lua number (put in 'result'). Return NULL on
** fail or the address of the ending '\0' on success. ('mode' == 'x')
** means a hexadecimal numeral.
*/
static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
  char *endptr;
  *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
                          : lua_str2number(s, &endptr);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b78      	cmp	r3, #120	; 0x78
 800b1f4:	d108      	bne.n	800b208 <l_str2dloc+0x24>
  *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
 800b1f6:	f107 0314 	add.w	r3, r7, #20
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f011 fd69 	bl	801ccd4 <strtof>
 800b202:	eef0 7a40 	vmov.f32	s15, s0
 800b206:	e007      	b.n	800b218 <l_str2dloc+0x34>
                          : lua_str2number(s, &endptr);
 800b208:	f107 0314 	add.w	r3, r7, #20
 800b20c:	4619      	mov	r1, r3
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f011 fd60 	bl	801ccd4 <strtof>
 800b214:	eef0 7a40 	vmov.f32	s15, s0
  *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	edc3 7a00 	vstr	s15, [r3]
  if (endptr == s) return NULL;  /* nothing recognized? */
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	429a      	cmp	r2, r3
 800b224:	d104      	bne.n	800b230 <l_str2dloc+0x4c>
 800b226:	2300      	movs	r3, #0
 800b228:	e012      	b.n	800b250 <l_str2dloc+0x6c>
  while (lisspace(cast_uchar(*endptr))) endptr++;  /* skip trailing spaces */
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	3301      	adds	r3, #1
 800b22e:	617b      	str	r3, [r7, #20]
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	3301      	adds	r3, #1
 800b236:	4a08      	ldr	r2, [pc, #32]	; (800b258 <l_str2dloc+0x74>)
 800b238:	5cd3      	ldrb	r3, [r2, r3]
 800b23a:	f003 0308 	and.w	r3, r3, #8
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f3      	bne.n	800b22a <l_str2dloc+0x46>
  return (*endptr == '\0') ? endptr : NULL;  /* OK iff no trailing chars */
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <l_str2dloc+0x6a>
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	e000      	b.n	800b250 <l_str2dloc+0x6c>
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	0801f218 	.word	0x0801f218

0800b25c <l_str2d>:
** The variable 'mode' checks for special characters in the string:
** - 'n' means 'inf' or 'nan' (which should be rejected)
** - 'x' means a hexadecimal numeral
** - '.' just optimizes the search for the common case (no special chars)
*/
static const char *l_str2d (const char *s, lua_Number *result) {
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b0ba      	sub	sp, #232	; 0xe8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  const char *endptr;
  const char *pmode = strpbrk(s, ".xXnN");  /* look for special chars */
 800b266:	4934      	ldr	r1, [pc, #208]	; (800b338 <l_str2d+0xdc>)
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f010 fee5 	bl	801c038 <strpbrk>
 800b26e:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
  int mode = pmode ? ltolower(cast_uchar(*pmode)) : 0;
 800b272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d006      	beq.n	800b288 <l_str2d+0x2c>
 800b27a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f043 0320 	orr.w	r3, r3, #32
 800b284:	b2db      	uxtb	r3, r3
 800b286:	e000      	b.n	800b28a <l_str2d+0x2e>
 800b288:	2300      	movs	r3, #0
 800b28a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (mode == 'n')  /* reject 'inf' and 'nan' */
 800b28e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b292:	2b6e      	cmp	r3, #110	; 0x6e
 800b294:	d101      	bne.n	800b29a <l_str2d+0x3e>
    return NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	e04a      	b.n	800b330 <l_str2d+0xd4>
  endptr = l_str2dloc(s, result, mode);  /* try to convert */
 800b29a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7ff ff9f 	bl	800b1e4 <l_str2dloc>
 800b2a6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  if (endptr == NULL) {  /* failed? may be a different locale */
 800b2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d13c      	bne.n	800b32c <l_str2d+0xd0>
    char buff[L_MAXLENNUM + 1];
    const char *pdot = strchr(s, '.');
 800b2b2:	212e      	movs	r1, #46	; 0x2e
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f010 fe94 	bl	801bfe2 <strchr>
 800b2ba:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (pdot == NULL || strlen(s) > L_MAXLENNUM)
 800b2be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <l_str2d+0x76>
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7f4 ffea 	bl	80002a0 <strlen>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2bc8      	cmp	r3, #200	; 0xc8
 800b2d0:	d901      	bls.n	800b2d6 <l_str2d+0x7a>
      return NULL;  /* string too long or no dot; fail */
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e02c      	b.n	800b330 <l_str2d+0xd4>
    strcpy(buff, s);  /* copy string to buffer */
 800b2d6:	f107 030c 	add.w	r3, r7, #12
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f010 fe8f 	bl	801c000 <strcpy>
    buff[pdot - s] = lua_getlocaledecpoint();  /* correct decimal point */
 800b2e2:	f010 f877 	bl	801b3d4 <localeconv>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	1acb      	subs	r3, r1, r3
 800b2f2:	7812      	ldrb	r2, [r2, #0]
 800b2f4:	33e8      	adds	r3, #232	; 0xe8
 800b2f6:	443b      	add	r3, r7
 800b2f8:	f803 2cdc 	strb.w	r2, [r3, #-220]
    endptr = l_str2dloc(buff, result, mode);  /* try again */
 800b2fc:	f107 030c 	add.w	r3, r7, #12
 800b300:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff ff6c 	bl	800b1e4 <l_str2dloc>
 800b30c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
    if (endptr != NULL)
 800b310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b314:	2b00      	cmp	r3, #0
 800b316:	d009      	beq.n	800b32c <l_str2d+0xd0>
      endptr = s + (endptr - buff);  /* make relative to 's' */
 800b318:	f107 030c 	add.w	r3, r7, #12
 800b31c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	461a      	mov	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4413      	add	r3, r2
 800b328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  }
  return endptr;
 800b32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
}
 800b330:	4618      	mov	r0, r3
 800b332:	37e8      	adds	r7, #232	; 0xe8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	0801ee30 	.word	0x0801ee30

0800b33c <l_str2int>:


#define MAXBY10		cast(lua_Unsigned, LUA_MAXINTEGER / 10)
#define MAXLASTD	cast_int(LUA_MAXINTEGER % 10)

static const char *l_str2int (const char *s, lua_Integer *result) {
 800b33c:	b590      	push	{r4, r7, lr}
 800b33e:	b087      	sub	sp, #28
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  lua_Unsigned a = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	617b      	str	r3, [r7, #20]
  int empty = 1;
 800b34a:	2301      	movs	r3, #1
 800b34c:	613b      	str	r3, [r7, #16]
  int neg;
  while (lisspace(cast_uchar(*s))) s++;  /* skip initial spaces */
 800b34e:	e002      	b.n	800b356 <l_str2int+0x1a>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3301      	adds	r3, #1
 800b354:	607b      	str	r3, [r7, #4]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	3301      	adds	r3, #1
 800b35c:	4a41      	ldr	r2, [pc, #260]	; (800b464 <l_str2int+0x128>)
 800b35e:	5cd3      	ldrb	r3, [r2, r3]
 800b360:	f003 0308 	and.w	r3, r3, #8
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1f3      	bne.n	800b350 <l_str2int+0x14>
  neg = isneg(&s);
 800b368:	1d3b      	adds	r3, r7, #4
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7ff ff18 	bl	800b1a0 <isneg>
 800b370:	60f8      	str	r0, [r7, #12]
  if (s[0] == '0' &&
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b30      	cmp	r3, #48	; 0x30
 800b378:	d147      	bne.n	800b40a <l_str2int+0xce>
      (s[1] == 'x' || s[1] == 'X')) {  /* hex? */
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3301      	adds	r3, #1
 800b37e:	781b      	ldrb	r3, [r3, #0]
  if (s[0] == '0' &&
 800b380:	2b78      	cmp	r3, #120	; 0x78
 800b382:	d004      	beq.n	800b38e <l_str2int+0x52>
      (s[1] == 'x' || s[1] == 'X')) {  /* hex? */
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3301      	adds	r3, #1
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b58      	cmp	r3, #88	; 0x58
 800b38c:	d13d      	bne.n	800b40a <l_str2int+0xce>
    s += 2;  /* skip '0x' */
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3302      	adds	r3, #2
 800b392:	607b      	str	r3, [r7, #4]
    for (; lisxdigit(cast_uchar(*s)); s++) {
 800b394:	e00e      	b.n	800b3b4 <l_str2int+0x78>
      a = a * 16 + luaO_hexavalue(*s);
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	011c      	lsls	r4, r3, #4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff fee2 	bl	800b168 <luaO_hexavalue>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	4423      	add	r3, r4
 800b3a8:	617b      	str	r3, [r7, #20]
      empty = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	613b      	str	r3, [r7, #16]
    for (; lisxdigit(cast_uchar(*s)); s++) {
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	607b      	str	r3, [r7, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	4a2a      	ldr	r2, [pc, #168]	; (800b464 <l_str2int+0x128>)
 800b3bc:	5cd3      	ldrb	r3, [r2, r3]
 800b3be:	f003 0310 	and.w	r3, r3, #16
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1e7      	bne.n	800b396 <l_str2int+0x5a>
  if (s[0] == '0' &&
 800b3c6:	e029      	b.n	800b41c <l_str2int+0xe0>
    }
  }
  else {  /* decimal */
    for (; lisdigit(cast_uchar(*s)); s++) {
      int d = *s - '0';
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	3b30      	subs	r3, #48	; 0x30
 800b3ce:	60bb      	str	r3, [r7, #8]
      if (a >= MAXBY10 && (a > MAXBY10 || d > MAXLASTD + neg))  /* overflow? */
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	4a25      	ldr	r2, [pc, #148]	; (800b468 <l_str2int+0x12c>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d30a      	bcc.n	800b3ee <l_str2int+0xb2>
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	4a23      	ldr	r2, [pc, #140]	; (800b468 <l_str2int+0x12c>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d804      	bhi.n	800b3ea <l_str2int+0xae>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3307      	adds	r3, #7
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	dd01      	ble.n	800b3ee <l_str2int+0xb2>
        return NULL;  /* do not accept it (as integer) */
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e036      	b.n	800b45c <l_str2int+0x120>
      a = a * 10 + d;
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	617b      	str	r3, [r7, #20]
      empty = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	613b      	str	r3, [r7, #16]
    for (; lisdigit(cast_uchar(*s)); s++) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3301      	adds	r3, #1
 800b408:	607b      	str	r3, [r7, #4]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	3301      	adds	r3, #1
 800b410:	4a14      	ldr	r2, [pc, #80]	; (800b464 <l_str2int+0x128>)
 800b412:	5cd3      	ldrb	r3, [r2, r3]
 800b414:	f003 0302 	and.w	r3, r3, #2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1d5      	bne.n	800b3c8 <l_str2int+0x8c>
    }
  }
  while (lisspace(cast_uchar(*s))) s++;  /* skip trailing spaces */
 800b41c:	e002      	b.n	800b424 <l_str2int+0xe8>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3301      	adds	r3, #1
 800b422:	607b      	str	r3, [r7, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	3301      	adds	r3, #1
 800b42a:	4a0e      	ldr	r2, [pc, #56]	; (800b464 <l_str2int+0x128>)
 800b42c:	5cd3      	ldrb	r3, [r2, r3]
 800b42e:	f003 0308 	and.w	r3, r3, #8
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1f3      	bne.n	800b41e <l_str2int+0xe2>
  if (empty || *s != '\0') return NULL;  /* something wrong in the numeral */
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d103      	bne.n	800b444 <l_str2int+0x108>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <l_str2int+0x10c>
 800b444:	2300      	movs	r3, #0
 800b446:	e009      	b.n	800b45c <l_str2int+0x120>
  else {
    *result = l_castU2S((neg) ? 0u - a : a);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <l_str2int+0x118>
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	425b      	negs	r3, r3
 800b452:	e000      	b.n	800b456 <l_str2int+0x11a>
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	6013      	str	r3, [r2, #0]
    return s;
 800b45a:	687b      	ldr	r3, [r7, #4]
  }
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	371c      	adds	r7, #28
 800b460:	46bd      	mov	sp, r7
 800b462:	bd90      	pop	{r4, r7, pc}
 800b464:	0801f218 	.word	0x0801f218
 800b468:	0ccccccc 	.word	0x0ccccccc

0800b46c <luaO_str2num>:


size_t luaO_str2num (const char *s, TValue *o) {
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  lua_Integer i; lua_Number n;
  const char *e;
  if ((e = l_str2int(s, &i)) != NULL) {  /* try as an integer */
 800b476:	f107 0310 	add.w	r3, r7, #16
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff5d 	bl	800b33c <l_str2int>
 800b482:	61f8      	str	r0, [r7, #28]
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d008      	beq.n	800b49c <luaO_str2num+0x30>
    setivalue(o, i);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	617b      	str	r3, [r7, #20]
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2203      	movs	r2, #3
 800b498:	711a      	strb	r2, [r3, #4]
 800b49a:	e014      	b.n	800b4c6 <luaO_str2num+0x5a>
  }
  else if ((e = l_str2d(s, &n)) != NULL) {  /* else try as a float */
 800b49c:	f107 030c 	add.w	r3, r7, #12
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff feda 	bl	800b25c <l_str2d>
 800b4a8:	61f8      	str	r0, [r7, #28]
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d008      	beq.n	800b4c2 <luaO_str2num+0x56>
    setfltvalue(o, n);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	61bb      	str	r3, [r7, #24]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2213      	movs	r2, #19
 800b4be:	711a      	strb	r2, [r3, #4]
 800b4c0:	e001      	b.n	800b4c6 <luaO_str2num+0x5a>
  }
  else
    return 0;  /* conversion failed */
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e003      	b.n	800b4ce <luaO_str2num+0x62>
  return (e - s) + 1;  /* success; return string size */
 800b4c6:	69fa      	ldr	r2, [r7, #28]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	3301      	adds	r3, #1
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <luaO_utf8esc>:


int luaO_utf8esc (char *buff, unsigned long x) {
 800b4d6:	b480      	push	{r7}
 800b4d8:	b085      	sub	sp, #20
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	6039      	str	r1, [r7, #0]
  int n = 1;  /* number of bytes put in buffer (backwards) */
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	60fb      	str	r3, [r7, #12]
  lua_assert(x <= 0x7FFFFFFFu);
  if (x < 0x80)  /* ascii? */
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	2b7f      	cmp	r3, #127	; 0x7f
 800b4e8:	d805      	bhi.n	800b4f6 <luaO_utf8esc+0x20>
    buff[UTF8BUFFSZ - 1] = cast_char(x);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3307      	adds	r3, #7
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	b2d2      	uxtb	r2, r2
 800b4f2:	701a      	strb	r2, [r3, #0]
 800b4f4:	e02d      	b.n	800b552 <luaO_utf8esc+0x7c>
  else {  /* need continuation bytes */
    unsigned int mfb = 0x3f;  /* maximum that fits in first byte */
 800b4f6:	233f      	movs	r3, #63	; 0x3f
 800b4f8:	60bb      	str	r3, [r7, #8]
    do {  /* add continuation bytes */
      buff[UTF8BUFFSZ - (n++)] = cast_char(0x80 | (x & 0x3f));
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b502:	b2da      	uxtb	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	1c59      	adds	r1, r3, #1
 800b508:	60f9      	str	r1, [r7, #12]
 800b50a:	f1c3 0308 	rsb	r3, r3, #8
 800b50e:	4619      	mov	r1, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	440b      	add	r3, r1
 800b514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	701a      	strb	r2, [r3, #0]
      x >>= 6;  /* remove added bits */
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	099b      	lsrs	r3, r3, #6
 800b520:	603b      	str	r3, [r7, #0]
      mfb >>= 1;  /* now there is one less bit available in first byte */
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	085b      	lsrs	r3, r3, #1
 800b526:	60bb      	str	r3, [r7, #8]
    } while (x > mfb);  /* still needs continuation byte? */
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d8e4      	bhi.n	800b4fa <luaO_utf8esc+0x24>
    buff[UTF8BUFFSZ - n] = cast_char((~mfb << 1) | x);  /* add first byte */
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	43db      	mvns	r3, r3
 800b536:	b2db      	uxtb	r3, r3
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	b2d9      	uxtb	r1, r3
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f1c3 0308 	rsb	r3, r3, #8
 800b546:	4618      	mov	r0, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4403      	add	r3, r0
 800b54c:	430a      	orrs	r2, r1
 800b54e:	b2d2      	uxtb	r2, r2
 800b550:	701a      	strb	r2, [r3, #0]
  }
  return n;
 800b552:	68fb      	ldr	r3, [r7, #12]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <tostringbuff>:


/*
** Convert a number object to a string, adding it to a buffer
*/
static int tostringbuff (TValue *obj, char *buff) {
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af02      	add	r7, sp, #8
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  int len;
  lua_assert(ttisnumber(obj));
  if (ttisinteger(obj))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	791b      	ldrb	r3, [r3, #4]
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d108      	bne.n	800b584 <tostringbuff+0x24>
    len = lua_integer2str(buff, MAXNUMBER2STR, ivalue(obj));
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a1c      	ldr	r2, [pc, #112]	; (800b5e8 <tostringbuff+0x88>)
 800b578:	212c      	movs	r1, #44	; 0x2c
 800b57a:	6838      	ldr	r0, [r7, #0]
 800b57c:	f010 fcba 	bl	801bef4 <sniprintf>
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	e02c      	b.n	800b5de <tostringbuff+0x7e>
  else {
    len = lua_number2str(buff, MAXNUMBER2STR, fltvalue(obj));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7f4 fff5 	bl	8000578 <__aeabi_f2d>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	e9cd 2300 	strd	r2, r3, [sp]
 800b596:	4a15      	ldr	r2, [pc, #84]	; (800b5ec <tostringbuff+0x8c>)
 800b598:	212c      	movs	r1, #44	; 0x2c
 800b59a:	6838      	ldr	r0, [r7, #0]
 800b59c:	f010 fcaa 	bl	801bef4 <sniprintf>
 800b5a0:	60f8      	str	r0, [r7, #12]
    if (buff[strspn(buff, "-0123456789")] == '\0') {  /* looks like an int? */
 800b5a2:	4913      	ldr	r1, [pc, #76]	; (800b5f0 <tostringbuff+0x90>)
 800b5a4:	6838      	ldr	r0, [r7, #0]
 800b5a6:	f010 fd61 	bl	801c06c <strspn>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d113      	bne.n	800b5de <tostringbuff+0x7e>
      buff[len++] = lua_getlocaledecpoint();
 800b5b6:	f00f ff0d 	bl	801b3d4 <localeconv>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1c59      	adds	r1, r3, #1
 800b5c2:	60f9      	str	r1, [r7, #12]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	440b      	add	r3, r1
 800b5ca:	7812      	ldrb	r2, [r2, #0]
 800b5cc:	701a      	strb	r2, [r3, #0]
      buff[len++] = '0';  /* adds '.0' to result */
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	60fa      	str	r2, [r7, #12]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	4413      	add	r3, r2
 800b5da:	2230      	movs	r2, #48	; 0x30
 800b5dc:	701a      	strb	r2, [r3, #0]
    }
  }
  return len;
 800b5de:	68fb      	ldr	r3, [r7, #12]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	0801ee38 	.word	0x0801ee38
 800b5ec:	0801ee3c 	.word	0x0801ee3c
 800b5f0:	0801ee44 	.word	0x0801ee44

0800b5f4 <luaO_tostring>:


/*
** Convert a number object to a Lua string, replacing the value at 'obj'
*/
void luaO_tostring (lua_State *L, TValue *obj) {
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b090      	sub	sp, #64	; 0x40
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  char buff[MAXNUMBER2STR];
  int len = tostringbuff(obj, buff);
 800b5fe:	f107 0308 	add.w	r3, r7, #8
 800b602:	4619      	mov	r1, r3
 800b604:	6838      	ldr	r0, [r7, #0]
 800b606:	f7ff ffab 	bl	800b560 <tostringbuff>
 800b60a:	63f8      	str	r0, [r7, #60]	; 0x3c
  setsvalue(L, obj, luaS_newlstr(L, buff, len));
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b612:	f107 0308 	add.w	r3, r7, #8
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 f9f5 	bl	800ca08 <luaS_newlstr>
 800b61e:	6378      	str	r0, [r7, #52]	; 0x34
 800b620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b628:	791b      	ldrb	r3, [r3, #4]
 800b62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	711a      	strb	r2, [r3, #4]
}
 800b634:	bf00      	nop
 800b636:	3740      	adds	r7, #64	; 0x40
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <pushstr>:

/*
** Push given string to the stack, as part of the buffer, and
** join the partial strings in the stack into one.
*/
static void pushstr (BuffFS *buff, const char *str, size_t l) {
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  lua_State *L = buff->L;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	61fb      	str	r3, [r7, #28]
  setsvalue2s(L, L->top, luaS_newlstr(L, str, l));
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	61bb      	str	r3, [r7, #24]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	69f8      	ldr	r0, [r7, #28]
 800b65a:	f001 f9d5 	bl	800ca08 <luaS_newlstr>
 800b65e:	6178      	str	r0, [r7, #20]
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	791b      	ldrb	r3, [r3, #4]
 800b66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	711a      	strb	r2, [r3, #4]
  L->top++;  /* may use one extra slot */
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f103 0208 	add.w	r2, r3, #8
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	60da      	str	r2, [r3, #12]
  buff->pushed++;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	605a      	str	r2, [r3, #4]
  luaV_concat(L, buff->pushed);  /* join partial results into one */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	4619      	mov	r1, r3
 800b690:	69f8      	ldr	r0, [r7, #28]
 800b692:	f003 ffed 	bl	800f670 <luaV_concat>
  buff->pushed = 1;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2201      	movs	r2, #1
 800b69a:	605a      	str	r2, [r3, #4]
}
 800b69c:	bf00      	nop
 800b69e:	3720      	adds	r7, #32
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <clearbuff>:


/*
** empty the buffer space into the stack
*/
static void clearbuff (BuffFS *buff) {
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  pushstr(buff, buff->space, buff->blen);  /* push buffer contents */
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f103 010c 	add.w	r1, r3, #12
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff ffbf 	bl	800b63c <pushstr>
  buff->blen = 0;  /* space now is empty */
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	609a      	str	r2, [r3, #8]
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <getbuff>:

/*
** Get a space of size 'sz' in the buffer. If buffer has not enough
** space, empty it. 'sz' must fit in an empty buffer.
*/
static char *getbuff (BuffFS *buff, int sz) {
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  lua_assert(buff->blen <= BUFVFS); lua_assert(sz <= BUFVFS);
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	dd02      	ble.n	800b6ea <getbuff+0x1e>
    clearbuff(buff);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff ffdd 	bl	800b6a4 <clearbuff>
  return buff->space + buff->blen;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	330c      	adds	r3, #12
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	6892      	ldr	r2, [r2, #8]
 800b6f2:	4413      	add	r3, r2
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <addstr2buff>:

/*
** Add 'str' to the buffer. If string is larger than the buffer space,
** push the string directly to the stack.
*/
static void addstr2buff (BuffFS *buff, const char *str, size_t slen) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
  if (slen <= BUFVFS) {  /* does string fit into buffer? */
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2bc8      	cmp	r3, #200	; 0xc8
 800b70c:	d811      	bhi.n	800b732 <addstr2buff+0x36>
    char *bf = getbuff(buff, cast_int(slen));
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4619      	mov	r1, r3
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f7ff ffda 	bl	800b6cc <getbuff>
 800b718:	6178      	str	r0, [r7, #20]
    memcpy(bf, str, slen);  /* add string to buffer */
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	68b9      	ldr	r1, [r7, #8]
 800b71e:	6978      	ldr	r0, [r7, #20]
 800b720:	f00f fef6 	bl	801b510 <memcpy>
    addsize(buff, cast_int(slen));
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	689a      	ldr	r2, [r3, #8]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	441a      	add	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	609a      	str	r2, [r3, #8]
  }
  else {  /* string larger than buffer */
    clearbuff(buff);  /* string comes after buffer's content */
    pushstr(buff, str, slen);  /* push string */
  }
}
 800b730:	e007      	b.n	800b742 <addstr2buff+0x46>
    clearbuff(buff);  /* string comes after buffer's content */
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff ffb6 	bl	800b6a4 <clearbuff>
    pushstr(buff, str, slen);  /* push string */
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	68b9      	ldr	r1, [r7, #8]
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f7ff ff7d 	bl	800b63c <pushstr>
}
 800b742:	bf00      	nop
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <addnum2buff>:


/*
** Add a number to the buffer.
*/
static void addnum2buff (BuffFS *buff, TValue *num) {
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b084      	sub	sp, #16
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
  char *numbuff = getbuff(buff, MAXNUMBER2STR);
 800b754:	212c      	movs	r1, #44	; 0x2c
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7ff ffb8 	bl	800b6cc <getbuff>
 800b75c:	60f8      	str	r0, [r7, #12]
  int len = tostringbuff(num, numbuff);  /* format number into 'numbuff' */
 800b75e:	68f9      	ldr	r1, [r7, #12]
 800b760:	6838      	ldr	r0, [r7, #0]
 800b762:	f7ff fefd 	bl	800b560 <tostringbuff>
 800b766:	60b8      	str	r0, [r7, #8]
  addsize(buff, len);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	441a      	add	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	609a      	str	r2, [r3, #8]
}
 800b774:	bf00      	nop
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <luaO_pushvfstring>:

/*
** this function handles only '%d', '%c', '%f', '%p', '%s', and '%%'
   conventional formats, plus Lua-specific '%I' and '%U'
*/
const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b0cc      	sub	sp, #304	; 0x130
 800b780:	af00      	add	r7, sp, #0
 800b782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b786:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b78a:	6018      	str	r0, [r3, #0]
 800b78c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b790:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b794:	6019      	str	r1, [r3, #0]
 800b796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b79a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b79e:	601a      	str	r2, [r3, #0]
  BuffFS buff;  /* holds last part of the result */
  const char *e;  /* points to next '%' */
  buff.pushed = buff.blen = 0;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a6:	63bb      	str	r3, [r7, #56]	; 0x38
  buff.L = L;
 800b7a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	637b      	str	r3, [r7, #52]	; 0x34
  while ((e = strchr(fmt, '%')) != NULL) {
 800b7b4:	e18e      	b.n	800bad4 <luaO_pushvfstring+0x358>
    addstr2buff(&buff, fmt, e - fmt);  /* add 'fmt' up to '%' */
 800b7b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b7be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b7d0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800b7d4:	6819      	ldr	r1, [r3, #0]
 800b7d6:	f7ff ff91 	bl	800b6fc <addstr2buff>
    switch (*(e + 1)) {  /* conversion specifier */
 800b7da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7de:	3301      	adds	r3, #1
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b25      	cmp	r3, #37	; 0x25
 800b7e4:	f000 8159 	beq.w	800ba9a <luaO_pushvfstring+0x31e>
 800b7e8:	2b25      	cmp	r3, #37	; 0x25
 800b7ea:	f2c0 815e 	blt.w	800baaa <luaO_pushvfstring+0x32e>
 800b7ee:	2b73      	cmp	r3, #115	; 0x73
 800b7f0:	f300 815b 	bgt.w	800baaa <luaO_pushvfstring+0x32e>
 800b7f4:	2b49      	cmp	r3, #73	; 0x49
 800b7f6:	f2c0 8158 	blt.w	800baaa <luaO_pushvfstring+0x32e>
 800b7fa:	3b49      	subs	r3, #73	; 0x49
 800b7fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b7fe:	f200 8154 	bhi.w	800baaa <luaO_pushvfstring+0x32e>
 800b802:	a201      	add	r2, pc, #4	; (adr r2, 800b808 <luaO_pushvfstring+0x8c>)
 800b804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b808:	0800b969 	.word	0x0800b969
 800b80c:	0800baab 	.word	0x0800baab
 800b810:	0800baab 	.word	0x0800baab
 800b814:	0800baab 	.word	0x0800baab
 800b818:	0800baab 	.word	0x0800baab
 800b81c:	0800baab 	.word	0x0800baab
 800b820:	0800baab 	.word	0x0800baab
 800b824:	0800baab 	.word	0x0800baab
 800b828:	0800baab 	.word	0x0800baab
 800b82c:	0800baab 	.word	0x0800baab
 800b830:	0800baab 	.word	0x0800baab
 800b834:	0800baab 	.word	0x0800baab
 800b838:	0800ba53 	.word	0x0800ba53
 800b83c:	0800baab 	.word	0x0800baab
 800b840:	0800baab 	.word	0x0800baab
 800b844:	0800baab 	.word	0x0800baab
 800b848:	0800baab 	.word	0x0800baab
 800b84c:	0800baab 	.word	0x0800baab
 800b850:	0800baab 	.word	0x0800baab
 800b854:	0800baab 	.word	0x0800baab
 800b858:	0800baab 	.word	0x0800baab
 800b85c:	0800baab 	.word	0x0800baab
 800b860:	0800baab 	.word	0x0800baab
 800b864:	0800baab 	.word	0x0800baab
 800b868:	0800baab 	.word	0x0800baab
 800b86c:	0800baab 	.word	0x0800baab
 800b870:	0800b8f9 	.word	0x0800b8f9
 800b874:	0800b929 	.word	0x0800b929
 800b878:	0800baab 	.word	0x0800baab
 800b87c:	0800b9a9 	.word	0x0800b9a9
 800b880:	0800baab 	.word	0x0800baab
 800b884:	0800baab 	.word	0x0800baab
 800b888:	0800baab 	.word	0x0800baab
 800b88c:	0800baab 	.word	0x0800baab
 800b890:	0800baab 	.word	0x0800baab
 800b894:	0800baab 	.word	0x0800baab
 800b898:	0800baab 	.word	0x0800baab
 800b89c:	0800baab 	.word	0x0800baab
 800b8a0:	0800baab 	.word	0x0800baab
 800b8a4:	0800b9fd 	.word	0x0800b9fd
 800b8a8:	0800baab 	.word	0x0800baab
 800b8ac:	0800baab 	.word	0x0800baab
 800b8b0:	0800b8b5 	.word	0x0800b8b5
      case 's': {  /* zero-terminated string */
        const char *s = va_arg(argp, char *);
 800b8b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	1d19      	adds	r1, r3, #4
 800b8c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b8c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b8c8:	6011      	str	r1, [r2, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        if (s == NULL) s = "(null)";
 800b8d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <luaO_pushvfstring+0x162>
 800b8d8:	4b98      	ldr	r3, [pc, #608]	; (800bb3c <luaO_pushvfstring+0x3c0>)
 800b8da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        addstr2buff(&buff, s, strlen(s));
 800b8de:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800b8e2:	f7f4 fcdd 	bl	80002a0 <strlen>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b8ec:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff ff03 	bl	800b6fc <addstr2buff>
        break;
 800b8f6:	e0e5      	b.n	800bac4 <luaO_pushvfstring+0x348>
      }
      case 'c': {  /* an 'int' as a character */
        char c = cast_uchar(va_arg(argp, int));
 800b8f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	1d19      	adds	r1, r3, #4
 800b904:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b908:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b90c:	6011      	str	r1, [r2, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	b2db      	uxtb	r3, r3
 800b912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        addstr2buff(&buff, &c, sizeof(char));
 800b916:	f107 0133 	add.w	r1, r7, #51	; 0x33
 800b91a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b91e:	2201      	movs	r2, #1
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff feeb 	bl	800b6fc <addstr2buff>
        break;
 800b926:	e0cd      	b.n	800bac4 <luaO_pushvfstring+0x348>
      }
      case 'd': {  /* an 'int' */
        TValue num;
        setivalue(&num, va_arg(argp, int));
 800b928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b92c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	1d19      	adds	r1, r3, #4
 800b93c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b940:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b944:	6011      	str	r1, [r2, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b952:	2203      	movs	r2, #3
 800b954:	711a      	strb	r2, [r3, #4]
        addnum2buff(&buff, &num);
 800b956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b95a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b95e:	4611      	mov	r1, r2
 800b960:	4618      	mov	r0, r3
 800b962:	f7ff fef2 	bl	800b74a <addnum2buff>
        break;
 800b966:	e0ad      	b.n	800bac4 <luaO_pushvfstring+0x348>
      }
      case 'I': {  /* a 'lua_Integer' */
        TValue num;
        setivalue(&num, cast(lua_Integer, va_arg(argp, l_uacInt)));
 800b968:	f107 0320 	add.w	r3, r7, #32
 800b96c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b974:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	1d19      	adds	r1, r3, #4
 800b97c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b980:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b984:	6011      	str	r1, [r2, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b992:	2203      	movs	r2, #3
 800b994:	711a      	strb	r2, [r3, #4]
        addnum2buff(&buff, &num);
 800b996:	f107 0220 	add.w	r2, r7, #32
 800b99a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff fed2 	bl	800b74a <addnum2buff>
        break;
 800b9a6:	e08d      	b.n	800bac4 <luaO_pushvfstring+0x348>
      }
      case 'f': {  /* a 'lua_Number' */
        TValue num;
        setfltvalue(&num, cast_num(va_arg(argp, l_uacNumber)));
 800b9a8:	f107 0318 	add.w	r3, r7, #24
 800b9ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b9b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3307      	adds	r3, #7
 800b9bc:	f023 0307 	bic.w	r3, r3, #7
 800b9c0:	f103 0108 	add.w	r1, r3, #8
 800b9c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b9c8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b9cc:	6011      	str	r1, [r2, #0]
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	f7f5 f8f7 	bl	8000bc8 <__aeabi_d2f>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e6:	2213      	movs	r2, #19
 800b9e8:	711a      	strb	r2, [r3, #4]
        addnum2buff(&buff, &num);
 800b9ea:	f107 0218 	add.w	r2, r7, #24
 800b9ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff fea8 	bl	800b74a <addnum2buff>
        break;
 800b9fa:	e063      	b.n	800bac4 <luaO_pushvfstring+0x348>
      }
      case 'p': {  /* a pointer */
        const int sz = 3 * sizeof(void*) + 8; /* enough space for '%p' */
 800b9fc:	2314      	movs	r3, #20
 800b9fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        char *bf = getbuff(&buff, sz);
 800ba02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba06:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff fe5e 	bl	800b6cc <getbuff>
 800ba10:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
        void *p = va_arg(argp, void *);
 800ba14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	1d19      	adds	r1, r3, #4
 800ba20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ba24:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ba28:	6011      	str	r1, [r2, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        int len = lua_pointer2str(bf, sz, p);
 800ba30:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800ba34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba38:	4a41      	ldr	r2, [pc, #260]	; (800bb40 <luaO_pushvfstring+0x3c4>)
 800ba3a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800ba3e:	f010 fa59 	bl	801bef4 <sniprintf>
 800ba42:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
        addsize(&buff, len);
 800ba46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ba4c:	4413      	add	r3, r2
 800ba4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba50:	e038      	b.n	800bac4 <luaO_pushvfstring+0x348>
      }
      case 'U': {  /* a 'long' as a UTF-8 sequence */
        char bf[UTF8BUFFSZ];
        int len = luaO_utf8esc(bf, va_arg(argp, long));
 800ba52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	1d19      	adds	r1, r3, #4
 800ba5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ba62:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ba66:	6011      	str	r1, [r2, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f107 0310 	add.w	r3, r7, #16
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fd2f 	bl	800b4d6 <luaO_utf8esc>
 800ba78:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        addstr2buff(&buff, bf + UTF8BUFFSZ - len, len);
 800ba7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba80:	f1c3 0308 	rsb	r3, r3, #8
 800ba84:	f107 0210 	add.w	r2, r7, #16
 800ba88:	18d1      	adds	r1, r2, r3
 800ba8a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ba8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7ff fe32 	bl	800b6fc <addstr2buff>
        break;
 800ba98:	e014      	b.n	800bac4 <luaO_pushvfstring+0x348>
      }
      case '%': {
        addstr2buff(&buff, "%", 1);
 800ba9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba9e:	2201      	movs	r2, #1
 800baa0:	4928      	ldr	r1, [pc, #160]	; (800bb44 <luaO_pushvfstring+0x3c8>)
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff fe2a 	bl	800b6fc <addstr2buff>
        break;
 800baa8:	e00c      	b.n	800bac4 <luaO_pushvfstring+0x348>
      }
      default: {
        luaG_runerror(L, "invalid option '%%%c' to 'lua_pushfstring'",
                         *(e + 1));
 800baaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800baae:	3301      	adds	r3, #1
 800bab0:	781b      	ldrb	r3, [r3, #0]
        luaG_runerror(L, "invalid option '%%%c' to 'lua_pushfstring'",
 800bab2:	461a      	mov	r2, r3
 800bab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bab8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800babc:	4922      	ldr	r1, [pc, #136]	; (800bb48 <luaO_pushvfstring+0x3cc>)
 800babe:	6818      	ldr	r0, [r3, #0]
 800bac0:	f7fb fb7d 	bl	80071be <luaG_runerror>
      }
    }
    fmt = e + 2;  /* skip '%' and the specifier */
 800bac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bac8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bacc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bad0:	3202      	adds	r2, #2
 800bad2:	601a      	str	r2, [r3, #0]
  while ((e = strchr(fmt, '%')) != NULL) {
 800bad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bad8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800badc:	2125      	movs	r1, #37	; 0x25
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	f010 fa7f 	bl	801bfe2 <strchr>
 800bae4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 800bae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800baec:	2b00      	cmp	r3, #0
 800baee:	f47f ae62 	bne.w	800b7b6 <luaO_pushvfstring+0x3a>
  }
  addstr2buff(&buff, fmt, strlen(fmt));  /* rest of 'fmt' */
 800baf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800baf6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bafa:	6818      	ldr	r0, [r3, #0]
 800bafc:	f7f4 fbd0 	bl	80002a0 <strlen>
 800bb00:	4602      	mov	r2, r0
 800bb02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bb0a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800bb0e:	6819      	ldr	r1, [r3, #0]
 800bb10:	f7ff fdf4 	bl	800b6fc <addstr2buff>
  clearbuff(&buff);  /* empty buffer into the stack */
 800bb14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff fdc3 	bl	800b6a4 <clearbuff>
  lua_assert(buff.pushed == 1);
  return svalue(s2v(L->top - 1));
 800bb1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb22:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	3b08      	subs	r3, #8
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3310      	adds	r3, #16
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	0801ee50 	.word	0x0801ee50
 800bb40:	0801ee58 	.word	0x0801ee58
 800bb44:	0801ee5c 	.word	0x0801ee5c
 800bb48:	0801ee60 	.word	0x0801ee60

0800bb4c <luaO_pushfstring>:


const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {
 800bb4c:	b40e      	push	{r1, r2, r3}
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b085      	sub	sp, #20
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  const char *msg;
  va_list argp;
  va_start(argp, fmt);
 800bb56:	f107 0320 	add.w	r3, r7, #32
 800bb5a:	60bb      	str	r3, [r7, #8]
  msg = luaO_pushvfstring(L, fmt, argp);
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	69f9      	ldr	r1, [r7, #28]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff fe0b 	bl	800b77c <luaO_pushvfstring>
 800bb66:	60f8      	str	r0, [r7, #12]
  va_end(argp);
  return msg;
 800bb68:	68fb      	ldr	r3, [r7, #12]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb74:	b003      	add	sp, #12
 800bb76:	4770      	bx	lr

0800bb78 <luaO_chunkid>:
#define PRE	"[string \""
#define POS	"\"]"

#define addstr(a,b,l)	( memcpy(a,b,(l) * sizeof(char)), a += (l) )

void luaO_chunkid (char *out, const char *source, size_t srclen) {
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
  size_t bufflen = LUA_IDSIZE;  /* free space in buffer */
 800bb84:	233c      	movs	r3, #60	; 0x3c
 800bb86:	617b      	str	r3, [r7, #20]
  if (*source == '=') {  /* 'literal' source */
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2b3d      	cmp	r3, #61	; 0x3d
 800bb8e:	d11c      	bne.n	800bbca <luaO_chunkid+0x52>
    if (srclen <= bufflen)  /* small enough? */
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d807      	bhi.n	800bba8 <luaO_chunkid+0x30>
      memcpy(out, source + 1, srclen * sizeof(char));
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f00f fcb5 	bl	801b510 <memcpy>
      addstr(out, source, srclen);
      addstr(out, RETS, LL(RETS));
    }
    memcpy(out, POS, (LL(POS) + 1) * sizeof(char));
  }
}
 800bba6:	e07b      	b.n	800bca0 <luaO_chunkid+0x128>
      addstr(out, source + 1, bufflen - 1);
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	1c59      	adds	r1, r3, #1
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f00f fcac 	bl	801b510 <memcpy>
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	60fb      	str	r3, [r7, #12]
      *out = '\0';
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
}
 800bbc8:	e06a      	b.n	800bca0 <luaO_chunkid+0x128>
  else if (*source == '@') {  /* file name */
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b40      	cmp	r3, #64	; 0x40
 800bbd0:	d122      	bne.n	800bc18 <luaO_chunkid+0xa0>
    if (srclen <= bufflen)  /* small enough? */
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d807      	bhi.n	800bbea <luaO_chunkid+0x72>
      memcpy(out, source + 1, srclen * sizeof(char));
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f00f fc94 	bl	801b510 <memcpy>
}
 800bbe8:	e05a      	b.n	800bca0 <luaO_chunkid+0x128>
      addstr(out, RETS, LL(RETS));
 800bbea:	2203      	movs	r2, #3
 800bbec:	492e      	ldr	r1, [pc, #184]	; (800bca8 <luaO_chunkid+0x130>)
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f00f fc8e 	bl	801b510 <memcpy>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	3303      	adds	r3, #3
 800bbf8:	60fb      	str	r3, [r7, #12]
      bufflen -= LL(RETS);
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	3b03      	subs	r3, #3
 800bbfe:	617b      	str	r3, [r7, #20]
      memcpy(out, source + 1 + srclen - bufflen, bufflen * sizeof(char));
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	3301      	adds	r3, #1
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f00f fc7d 	bl	801b510 <memcpy>
}
 800bc16:	e043      	b.n	800bca0 <luaO_chunkid+0x128>
    const char *nl = strchr(source, '\n');  /* find first new line (if any) */
 800bc18:	210a      	movs	r1, #10
 800bc1a:	68b8      	ldr	r0, [r7, #8]
 800bc1c:	f010 f9e1 	bl	801bfe2 <strchr>
 800bc20:	6138      	str	r0, [r7, #16]
    addstr(out, PRE, LL(PRE));  /* add prefix */
 800bc22:	2209      	movs	r2, #9
 800bc24:	4921      	ldr	r1, [pc, #132]	; (800bcac <luaO_chunkid+0x134>)
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f00f fc72 	bl	801b510 <memcpy>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3309      	adds	r3, #9
 800bc30:	60fb      	str	r3, [r7, #12]
    bufflen -= LL(PRE RETS POS) + 1;  /* save space for prefix+suffix+'\0' */
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	3b0f      	subs	r3, #15
 800bc36:	617b      	str	r3, [r7, #20]
    if (srclen < bufflen && nl == NULL) {  /* small one-line source? */
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d20c      	bcs.n	800bc5a <luaO_chunkid+0xe2>
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d109      	bne.n	800bc5a <luaO_chunkid+0xe2>
      addstr(out, source, srclen);  /* keep it */
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	68b9      	ldr	r1, [r7, #8]
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f00f fc60 	bl	801b510 <memcpy>
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4413      	add	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	e01d      	b.n	800bc96 <luaO_chunkid+0x11e>
      if (nl != NULL) srclen = nl - source;  /* stop at first newline */
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d003      	beq.n	800bc68 <luaO_chunkid+0xf0>
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	607b      	str	r3, [r7, #4]
      if (srclen > bufflen) srclen = bufflen;
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d901      	bls.n	800bc74 <luaO_chunkid+0xfc>
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	607b      	str	r3, [r7, #4]
      addstr(out, source, srclen);
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	68b9      	ldr	r1, [r7, #8]
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f00f fc49 	bl	801b510 <memcpy>
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	60fb      	str	r3, [r7, #12]
      addstr(out, RETS, LL(RETS));
 800bc86:	2203      	movs	r2, #3
 800bc88:	4907      	ldr	r1, [pc, #28]	; (800bca8 <luaO_chunkid+0x130>)
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f00f fc40 	bl	801b510 <memcpy>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3303      	adds	r3, #3
 800bc94:	60fb      	str	r3, [r7, #12]
    memcpy(out, POS, (LL(POS) + 1) * sizeof(char));
 800bc96:	2203      	movs	r2, #3
 800bc98:	4905      	ldr	r1, [pc, #20]	; (800bcb0 <luaO_chunkid+0x138>)
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f00f fc38 	bl	801b510 <memcpy>
}
 800bca0:	bf00      	nop
 800bca2:	3718      	adds	r7, #24
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	0801ee8c 	.word	0x0801ee8c
 800bcac:	0801ee90 	.word	0x0801ee90
 800bcb0:	0801ee9c 	.word	0x0801ee9c

0800bcb4 <luai_makeseed>:
*/
#define addbuff(b,p,e) \
  { size_t t = cast_sizet(e); \
    memcpy(b + p, &t, sizeof(t)); p += sizeof(t); }

static unsigned int luai_makeseed (lua_State *L) {
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08a      	sub	sp, #40	; 0x28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  char buff[3 * sizeof(size_t)];
  unsigned int h = cast_uint(time(NULL));
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	f011 f865 	bl	801cd8c <time>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	617b      	str	r3, [r7, #20]
  int p = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
  addbuff(buff, p, L);  /* heap variable */
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	613b      	str	r3, [r7, #16]
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	f107 0218 	add.w	r2, r7, #24
 800bcd8:	4413      	add	r3, r2
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce0:	3304      	adds	r3, #4
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
  addbuff(buff, p, &h);  /* local variable */
 800bce4:	f107 0314 	add.w	r3, r7, #20
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	f107 0218 	add.w	r2, r7, #24
 800bcf0:	4413      	add	r3, r2
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	627b      	str	r3, [r7, #36]	; 0x24
  addbuff(buff, p, &lua_newstate);  /* public function */
 800bcfc:	4b0b      	ldr	r3, [pc, #44]	; (800bd2c <luai_makeseed+0x78>)
 800bcfe:	60bb      	str	r3, [r7, #8]
 800bd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd02:	f107 0218 	add.w	r2, r7, #24
 800bd06:	4413      	add	r3, r2
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0e:	3304      	adds	r3, #4
 800bd10:	627b      	str	r3, [r7, #36]	; 0x24
  lua_assert(p == sizeof(buff));
  return luaS_hash(buff, p, h);
 800bd12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	f107 0318 	add.w	r3, r7, #24
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 fbf4 	bl	800c508 <luaS_hash>
 800bd20:	4603      	mov	r3, r0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3728      	adds	r7, #40	; 0x28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	0800c215 	.word	0x0800c215

0800bd30 <luaE_setdebt>:

/*
** set GCdebt to a new value keeping the value (totalbytes + GCdebt)
** invariant (and avoiding underflows in 'totalbytes')
*/
void luaE_setdebt (global_State *g, l_mem debt) {
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  l_mem tb = gettotalbytes(g);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689a      	ldr	r2, [r3, #8]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	60fb      	str	r3, [r7, #12]
  lua_assert(tb > 0);
  if (debt < tb - MAX_LMEM)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	da04      	bge.n	800bd5e <luaE_setdebt+0x2e>
    debt = tb - MAX_LMEM;  /* will make 'totalbytes == MAX_LMEM' */
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	603b      	str	r3, [r7, #0]
  g->totalbytes = tb - debt;
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	1ad2      	subs	r2, r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	609a      	str	r2, [r3, #8]
  g->GCdebt = debt;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	60da      	str	r2, [r3, #12]
}
 800bd6e:	bf00      	nop
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <luaE_extendCI>:
  UNUSED(L); UNUSED(limit);
  return LUAI_MAXCCALLS;  /* warning?? */
}


CallInfo *luaE_extendCI (lua_State *L) {
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  CallInfo *ci;
  lua_assert(L->ci->next == NULL);
  ci = luaM_new(L, CallInfo);
 800bd82:	2200      	movs	r2, #0
 800bd84:	2124      	movs	r1, #36	; 0x24
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff f992 	bl	800b0b0 <luaM_malloc_>
 800bd8c:	60f8      	str	r0, [r7, #12]
  lua_assert(L->ci->next == NULL);
  L->ci->next = ci;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	60da      	str	r2, [r3, #12]
  ci->previous = L->ci;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	695a      	ldr	r2, [r3, #20]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	609a      	str	r2, [r3, #8]
  ci->next = NULL;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	60da      	str	r2, [r3, #12]
  ci->u.l.trap = 0;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	615a      	str	r2, [r3, #20]
  L->nci++;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	891b      	ldrh	r3, [r3, #8]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	811a      	strh	r2, [r3, #8]
  return ci;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <luaE_freeCI>:


/*
** free all CallInfo structures not in use by a thread
*/
void luaE_freeCI (lua_State *L) {
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  CallInfo *ci = L->ci;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	60bb      	str	r3, [r7, #8]
  CallInfo *next = ci->next;
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	60fb      	str	r3, [r7, #12]
  ci->next = NULL;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	60da      	str	r2, [r3, #12]
  while ((ci = next) != NULL) {
 800bdda:	e00d      	b.n	800bdf8 <luaE_freeCI+0x38>
    next = ci->next;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	60fb      	str	r3, [r7, #12]
    luaM_free(L, ci);
 800bde2:	2224      	movs	r2, #36	; 0x24
 800bde4:	68b9      	ldr	r1, [r7, #8]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff f8de 	bl	800afa8 <luaM_free_>
    L->nci--;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	891b      	ldrh	r3, [r3, #8]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	811a      	strh	r2, [r3, #8]
  while ((ci = next) != NULL) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	60bb      	str	r3, [r7, #8]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1ec      	bne.n	800bddc <luaE_freeCI+0x1c>
  }
}
 800be02:	bf00      	nop
 800be04:	bf00      	nop
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <luaE_shrinkCI>:

/*
** free half of the CallInfo structures not in use by a thread,
** keeping the first one.
*/
void luaE_shrinkCI (lua_State *L) {
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  CallInfo *ci = L->ci->next;  /* first free CallInfo */
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	617b      	str	r3, [r7, #20]
  CallInfo *next;
  if (ci == NULL)
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d020      	beq.n	800be64 <luaE_shrinkCI+0x58>
    return;  /* no extra elements */
  while ((next = ci->next) != NULL) {  /* two extra elements? */
 800be22:	e018      	b.n	800be56 <luaE_shrinkCI+0x4a>
    CallInfo *next2 = next->next;  /* next's next */
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	60fb      	str	r3, [r7, #12]
    ci->next = next2;  /* remove next from the list */
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	60da      	str	r2, [r3, #12]
    L->nci--;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	891b      	ldrh	r3, [r3, #8]
 800be34:	3b01      	subs	r3, #1
 800be36:	b29a      	uxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	811a      	strh	r2, [r3, #8]
    luaM_free(L, next);  /* free next */
 800be3c:	2224      	movs	r2, #36	; 0x24
 800be3e:	6939      	ldr	r1, [r7, #16]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff f8b1 	bl	800afa8 <luaM_free_>
    if (next2 == NULL)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00d      	beq.n	800be68 <luaE_shrinkCI+0x5c>
      break;  /* no more elements */
    else {
      next2->previous = ci;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	609a      	str	r2, [r3, #8]
      ci = next2;  /* continue */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	617b      	str	r3, [r7, #20]
  while ((next = ci->next) != NULL) {  /* two extra elements? */
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	613b      	str	r3, [r7, #16]
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e0      	bne.n	800be24 <luaE_shrinkCI+0x18>
 800be62:	e002      	b.n	800be6a <luaE_shrinkCI+0x5e>
    return;  /* no extra elements */
 800be64:	bf00      	nop
 800be66:	e000      	b.n	800be6a <luaE_shrinkCI+0x5e>
      break;  /* no more elements */
 800be68:	bf00      	nop
    }
  }
}
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <luaE_checkcstack>:
** If equal, raises an overflow error. If value is larger than
** LUAI_MAXCCALLS (which means it is handling an overflow) but
** not much larger, does not report an error (to allow overflow
** handling to work).
*/
void luaE_checkcstack (lua_State *L) {
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  if (getCcalls(L) == LUAI_MAXCCALLS)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	2bc8      	cmp	r3, #200	; 0xc8
 800be80:	d103      	bne.n	800be8a <luaE_checkcstack+0x1a>
    luaG_runerror(L, "C stack overflow");
 800be82:	4908      	ldr	r1, [pc, #32]	; (800bea4 <luaE_checkcstack+0x34>)
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7fb f99a 	bl	80071be <luaG_runerror>
  else if (getCcalls(L) >= (LUAI_MAXCCALLS / 10 * 11))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be8e:	b29b      	uxth	r3, r3
 800be90:	2bdb      	cmp	r3, #219	; 0xdb
 800be92:	d903      	bls.n	800be9c <luaE_checkcstack+0x2c>
    luaD_throw(L, LUA_ERRERR);  /* error while handling stack error */
 800be94:	2105      	movs	r1, #5
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7fb fb2c 	bl	80074f4 <luaD_throw>
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	0801eea0 	.word	0x0801eea0

0800bea8 <stack_init>:
  if (l_unlikely(getCcalls(L) >= LUAI_MAXCCALLS))
    luaE_checkcstack(L);
}


static void stack_init (lua_State *L1, lua_State *L) {
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  int i; CallInfo *ci;
  /* initialize stack array */
  L1->stack = luaM_newvector(L, BASIC_STACK_SIZE + EXTRA_STACK, StackValue);
 800beb2:	2200      	movs	r2, #0
 800beb4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800beb8:	6838      	ldr	r0, [r7, #0]
 800beba:	f7ff f8f9 	bl	800b0b0 <luaM_malloc_>
 800bebe:	4602      	mov	r2, r0
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	61da      	str	r2, [r3, #28]
  L1->tbclist = L1->stack;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	69da      	ldr	r2, [r3, #28]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	625a      	str	r2, [r3, #36]	; 0x24
  for (i = 0; i < BASIC_STACK_SIZE + EXTRA_STACK; i++)
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e009      	b.n	800bee6 <stack_init+0x3e>
    setnilvalue(s2v(L1->stack + i));  /* erase new stack */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	69da      	ldr	r2, [r3, #28]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	4413      	add	r3, r2
 800bedc:	2200      	movs	r2, #0
 800bede:	711a      	strb	r2, [r3, #4]
  for (i = 0; i < BASIC_STACK_SIZE + EXTRA_STACK; i++)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3301      	adds	r3, #1
 800bee4:	60fb      	str	r3, [r7, #12]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b2c      	cmp	r3, #44	; 0x2c
 800beea:	ddf2      	ble.n	800bed2 <stack_init+0x2a>
  L1->top = L1->stack;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	69da      	ldr	r2, [r3, #28]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60da      	str	r2, [r3, #12]
  L1->stack_last = L1->stack + BASIC_STACK_SIZE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	69db      	ldr	r3, [r3, #28]
 800bef8:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	619a      	str	r2, [r3, #24]
  /* initialize first ci */
  ci = &L1->base_ci;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3334      	adds	r3, #52	; 0x34
 800bf04:	60bb      	str	r3, [r7, #8]
  ci->next = ci->previous = NULL;
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	609a      	str	r2, [r3, #8]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	60da      	str	r2, [r3, #12]
  ci->callstatus = CIST_C;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	2202      	movs	r2, #2
 800bf18:	845a      	strh	r2, [r3, #34]	; 0x22
  ci->func = L1->top;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68da      	ldr	r2, [r3, #12]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	601a      	str	r2, [r3, #0]
  ci->u.c.k = NULL;
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	2200      	movs	r2, #0
 800bf26:	611a      	str	r2, [r3, #16]
  ci->nresults = 0;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	841a      	strh	r2, [r3, #32]
  setnilvalue(s2v(L1->top));  /* 'function' entry for this 'ci' */
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	711a      	strb	r2, [r3, #4]
  L1->top++;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	f103 0208 	add.w	r2, r3, #8
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60da      	str	r2, [r3, #12]
  ci->top = L1->top + LUA_MINSTACK;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	605a      	str	r2, [r3, #4]
  L1->ci = ci;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	615a      	str	r2, [r3, #20]
}
 800bf54:	bf00      	nop
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <freestack>:


static void freestack (lua_State *L) {
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  if (L->stack == NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d014      	beq.n	800bf96 <freestack+0x3a>
    return;  /* stack not completely built yet */
  L->ci = &L->base_ci;  /* free the entire 'ci' list */
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	615a      	str	r2, [r3, #20]
  luaE_freeCI(L);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff ff22 	bl	800bdc0 <luaE_freeCI>
  lua_assert(L->nci == 0);
  luaM_freearray(L, L->stack, stacksize(L) + EXTRA_STACK);  /* free stack */
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	69d9      	ldr	r1, [r3, #28]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	69db      	ldr	r3, [r3, #28]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	3328      	adds	r3, #40	; 0x28
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff f80a 	bl	800afa8 <luaM_free_>
 800bf94:	e000      	b.n	800bf98 <freestack+0x3c>
    return;  /* stack not completely built yet */
 800bf96:	bf00      	nop
}
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <init_registry>:


/*
** Create registry table and its predefined values
*/
static void init_registry (lua_State *L, global_State *g) {
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b08a      	sub	sp, #40	; 0x28
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
  /* create registry */
  Table *registry = luaH_new(L);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fb70 	bl	800d68e <luaH_new>
 800bfae:	6278      	str	r0, [r7, #36]	; 0x24
  sethvalue(L, &g->l_registry, registry);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	3324      	adds	r3, #36	; 0x24
 800bfb4:	623b      	str	r3, [r7, #32]
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	69fa      	ldr	r2, [r7, #28]
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	2245      	movs	r2, #69	; 0x45
 800bfc4:	711a      	strb	r2, [r3, #4]
  luaH_resize(L, registry, LUA_RIDX_LAST, 0);
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	2202      	movs	r2, #2
 800bfca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f001 fa3d 	bl	800d44c <luaH_resize>
  /* registry[LUA_RIDX_MAINTHREAD] = L */
  setthvalue(L, &registry->array[LUA_RIDX_MAINTHREAD - 1], L);
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	61bb      	str	r3, [r7, #24]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	617b      	str	r3, [r7, #20]
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	2248      	movs	r2, #72	; 0x48
 800bfe6:	711a      	strb	r2, [r3, #4]
  /* registry[LUA_RIDX_GLOBALS] = new table (table of globals) */
  sethvalue(L, &registry->array[LUA_RIDX_GLOBALS - 1], luaH_new(L));
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	3308      	adds	r3, #8
 800bfee:	613b      	str	r3, [r7, #16]
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f001 fb4c 	bl	800d68e <luaH_new>
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2245      	movs	r2, #69	; 0x45
 800c002:	711a      	strb	r2, [r3, #4]
}
 800c004:	bf00      	nop
 800c006:	3728      	adds	r7, #40	; 0x28
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <f_luaopen>:


/*
** open parts of the state that may cause memory-allocation errors.
*/
static void f_luaopen (lua_State *L, void *ud) {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	60fb      	str	r3, [r7, #12]
  UNUSED(ud);
  stack_init(L, L);  /* init stack */
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff ff42 	bl	800bea8 <stack_init>
  init_registry(L, g);
 800c024:	68f9      	ldr	r1, [r7, #12]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7ff ffb9 	bl	800bf9e <init_registry>
  luaS_init(L);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fb7d 	bl	800c72c <luaS_init>
  luaT_init(L);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f001 ff52 	bl	800dedc <luaT_init>
  luaX_init(L);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7fe ff75 	bl	800af28 <luaX_init>
  g->gcstp = 0;  /* allow gc */
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  setnilvalue(&g->nilvalue);  /* now state is complete */
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  luai_userstateopen(L);
}
 800c04e:	bf00      	nop
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <preinit_thread>:

/*
** preinitialize a thread with consistent values without allocating
** any memory (to avoid errors)
*/
static void preinit_thread (lua_State *L, global_State *g) {
 800c056:	b480      	push	{r7}
 800c058:	b083      	sub	sp, #12
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	6039      	str	r1, [r7, #0]
  G(L) = g;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	611a      	str	r2, [r3, #16]
  L->stack = NULL;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	61da      	str	r2, [r3, #28]
  L->ci = NULL;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	615a      	str	r2, [r3, #20]
  L->nci = 0;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	811a      	strh	r2, [r3, #8]
  L->twups = L;  /* thread has no upvalues */
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	62da      	str	r2, [r3, #44]	; 0x2c
  L->nCcalls = 0;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	661a      	str	r2, [r3, #96]	; 0x60
  L->errorJmp = NULL;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	631a      	str	r2, [r3, #48]	; 0x30
  L->hook = NULL;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	659a      	str	r2, [r3, #88]	; 0x58
  L->hookmask = 0;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	671a      	str	r2, [r3, #112]	; 0x70
  L->basehookcount = 0;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	669a      	str	r2, [r3, #104]	; 0x68
  L->allowhook = 1;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	71da      	strb	r2, [r3, #7]
  resethookcount(L);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	66da      	str	r2, [r3, #108]	; 0x6c
  L->openupval = NULL;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	621a      	str	r2, [r3, #32]
  L->status = LUA_OK;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	719a      	strb	r2, [r3, #6]
  L->errfunc = 0;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	65da      	str	r2, [r3, #92]	; 0x5c
  L->oldpc = 0;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <close_state>:


static void close_state (lua_State *L) {
 800c0ce:	b590      	push	{r4, r7, lr}
 800c0d0:	b085      	sub	sp, #20
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	60fb      	str	r3, [r7, #12]
  if (!completestate(g))  /* closing a partially built state? */
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0e2:	f003 030f 	and.w	r3, r3, #15
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <close_state+0x24>
    luaC_freeallobjects(L);  /* just collect its objects */
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7fe fca1 	bl	800aa32 <luaC_freeallobjects>
 800c0f0:	e00c      	b.n	800c10c <close_state+0x3e>
  else {  /* closing a fully built state */
    L->ci = &L->base_ci;  /* unwind CallInfo list */
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	615a      	str	r2, [r3, #20]
    luaD_closeprotected(L, 1, LUA_OK);  /* close all upvalues */
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2101      	movs	r1, #1
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7fc f8cb 	bl	800829c <luaD_closeprotected>
    luaC_freeallobjects(L);  /* collect all objects */
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7fe fc93 	bl	800aa32 <luaC_freeallobjects>
    luai_userstateclose(L);
  }
  luaM_freearray(L, G(L)->strt.hash, G(L)->strt.size);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	6999      	ldr	r1, [r3, #24]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	6a1b      	ldr	r3, [r3, #32]
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	461a      	mov	r2, r3
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7fe ff43 	bl	800afa8 <luaM_free_>
  freestack(L);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff ff1a 	bl	800bf5c <freestack>
  lua_assert(gettotalbytes(g) == sizeof(LG));
  (*g->frealloc)(g->ud, fromstate(L), sizeof(LG), 0);  /* free main block */
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681c      	ldr	r4, [r3, #0]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6858      	ldr	r0, [r3, #4]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	1f19      	subs	r1, r3, #4
 800c134:	2300      	movs	r3, #0
 800c136:	f44f 7252 	mov.w	r2, #840	; 0x348
 800c13a:	47a0      	blx	r4
}
 800c13c:	bf00      	nop
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	bd90      	pop	{r4, r7, pc}

0800c144 <luaE_freethread>:
  lua_unlock(L);
  return L1;
}


void luaE_freethread (lua_State *L, lua_State *L1) {
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  LX *l = fromstate(L1);
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	3b04      	subs	r3, #4
 800c152:	60fb      	str	r3, [r7, #12]
  luaF_closeupval(L1, L1->stack);  /* close all upvalues */
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	69db      	ldr	r3, [r3, #28]
 800c158:	4619      	mov	r1, r3
 800c15a:	6838      	ldr	r0, [r7, #0]
 800c15c:	f7fc fa9a 	bl	8008694 <luaF_closeupval>
  lua_assert(L1->openupval == NULL);
  luai_userstatefree(L, L1);
  freestack(L1);
 800c160:	6838      	ldr	r0, [r7, #0]
 800c162:	f7ff fefb 	bl	800bf5c <freestack>
  luaM_free(L, l);
 800c166:	2278      	movs	r2, #120	; 0x78
 800c168:	68f9      	ldr	r1, [r7, #12]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7fe ff1c 	bl	800afa8 <luaM_free_>
}
 800c170:	bf00      	nop
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <luaE_resetthread>:


int luaE_resetthread (lua_State *L, int status) {
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci = &L->base_ci;  /* unwind CallInfo list */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	615a      	str	r2, [r3, #20]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	695b      	ldr	r3, [r3, #20]
 800c190:	60fb      	str	r3, [r7, #12]
  setnilvalue(s2v(L->stack));  /* 'function' entry for basic 'ci' */
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	69db      	ldr	r3, [r3, #28]
 800c196:	2200      	movs	r2, #0
 800c198:	711a      	strb	r2, [r3, #4]
  ci->func = L->stack;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	69da      	ldr	r2, [r3, #28]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	601a      	str	r2, [r3, #0]
  ci->callstatus = CIST_C;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	845a      	strh	r2, [r3, #34]	; 0x22
  if (status == LUA_YIELD)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d101      	bne.n	800c1b2 <luaE_resetthread+0x3a>
    status = LUA_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	603b      	str	r3, [r7, #0]
  L->status = LUA_OK;  /* so it can run __close metamethods */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	719a      	strb	r2, [r3, #6]
  status = luaD_closeprotected(L, 1, status);
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7fc f86d 	bl	800829c <luaD_closeprotected>
 800c1c2:	6038      	str	r0, [r7, #0]
  if (status != LUA_OK)  /* errors? */
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d008      	beq.n	800c1dc <luaE_resetthread+0x64>
    luaD_seterrorobj(L, status, L->stack + 1);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	69db      	ldr	r3, [r3, #28]
 800c1ce:	3308      	adds	r3, #8
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7fb f937 	bl	8007448 <luaD_seterrorobj>
 800c1da:	e005      	b.n	800c1e8 <luaE_resetthread+0x70>
  else
    L->top = L->stack + 1;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	69db      	ldr	r3, [r3, #28]
 800c1e0:	f103 0208 	add.w	r2, r3, #8
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	60da      	str	r2, [r3, #12]
  ci->top = L->top + LUA_MINSTACK;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	605a      	str	r2, [r3, #4]
  luaD_reallocstack(L, cast_int(ci->top - L->stack), 0);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	10db      	asrs	r3, r3, #3
 800c200:	2200      	movs	r2, #0
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7fb fa40 	bl	800768a <luaD_reallocstack>
  return status;
 800c20a:	683b      	ldr	r3, [r7, #0]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <lua_newstate>:
  lua_unlock(L);
  return status;
}


LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {
 800c214:	b590      	push	{r4, r7, lr}
 800c216:	b089      	sub	sp, #36	; 0x24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  int i;
  lua_State *L;
  global_State *g;
  LG *l = cast(LG *, (*f)(ud, NULL, LUA_TTHREAD, sizeof(LG)));
 800c21e:	687c      	ldr	r4, [r7, #4]
 800c220:	f44f 7352 	mov.w	r3, #840	; 0x348
 800c224:	2208      	movs	r2, #8
 800c226:	2100      	movs	r1, #0
 800c228:	6838      	ldr	r0, [r7, #0]
 800c22a:	47a0      	blx	r4
 800c22c:	6178      	str	r0, [r7, #20]
  if (l == NULL) return NULL;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <lua_newstate+0x24>
 800c234:	2300      	movs	r3, #0
 800c236:	e0e9      	b.n	800c40c <lua_newstate+0x1f8>
  L = &l->l.l;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	3304      	adds	r3, #4
 800c23c:	61bb      	str	r3, [r7, #24]
  g = &l->g;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	3378      	adds	r3, #120	; 0x78
 800c242:	613b      	str	r3, [r7, #16]
  L->tt = LUA_VTHREAD;
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	2208      	movs	r2, #8
 800c248:	711a      	strb	r2, [r3, #4]
  g->currentwhite = bitmask(WHITE0BIT);
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2208      	movs	r2, #8
 800c24e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  L->marked = luaC_white(g);
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c258:	f003 0318 	and.w	r3, r3, #24
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	715a      	strb	r2, [r3, #5]
  preinit_thread(L, g);
 800c262:	6939      	ldr	r1, [r7, #16]
 800c264:	69b8      	ldr	r0, [r7, #24]
 800c266:	f7ff fef6 	bl	800c056 <preinit_thread>
  g->allgc = obj2gco(L);  /* by now, only object is the main thread */
 800c26a:	69ba      	ldr	r2, [r7, #24]
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	645a      	str	r2, [r3, #68]	; 0x44
  L->next = NULL;
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
  incnny(L);  /* main thread is always non yieldable */
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c27a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	661a      	str	r2, [r3, #96]	; 0x60
  g->frealloc = f;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	601a      	str	r2, [r3, #0]
  g->ud = ud;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	605a      	str	r2, [r3, #4]
  g->warnf = NULL;
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	2200      	movs	r2, #0
 800c292:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  g->ud_warn = NULL;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2200      	movs	r2, #0
 800c29a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  g->mainthread = L;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	69ba      	ldr	r2, [r7, #24]
 800c2a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  g->seed = luai_makeseed(L);
 800c2a6:	69b8      	ldr	r0, [r7, #24]
 800c2a8:	f7ff fd04 	bl	800bcb4 <luai_makeseed>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	635a      	str	r2, [r3, #52]	; 0x34
  g->gcstp = GCSTPGC;  /* no GC while building state */
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  g->strt.size = g->strt.nuse = 0;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	61da      	str	r2, [r3, #28]
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	69da      	ldr	r2, [r3, #28]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	621a      	str	r2, [r3, #32]
  g->strt.hash = NULL;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	619a      	str	r2, [r3, #24]
  setnilvalue(&g->l_registry);
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  g->panic = NULL;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  g->gcstate = GCSpause;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  g->gckind = KGC_INC;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  g->gcstopem = 0;
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  g->gcemergency = 0;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  g->finobj = g->tobefnz = g->fixedgc = NULL;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	2200      	movs	r2, #0
 800c302:	669a      	str	r2, [r3, #104]	; 0x68
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	665a      	str	r2, [r3, #100]	; 0x64
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	64da      	str	r2, [r3, #76]	; 0x4c
  g->firstold1 = g->survival = g->old1 = g->reallyold = NULL;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	2200      	movs	r2, #0
 800c318:	675a      	str	r2, [r3, #116]	; 0x74
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	671a      	str	r2, [r3, #112]	; 0x70
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	66da      	str	r2, [r3, #108]	; 0x6c
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	679a      	str	r2, [r3, #120]	; 0x78
  g->finobjsur = g->finobjold1 = g->finobjrold = NULL;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2200      	movs	r2, #0
 800c336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	67da      	str	r2, [r3, #124]	; 0x7c
  g->sweepgc = NULL;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	2200      	movs	r2, #0
 800c354:	649a      	str	r2, [r3, #72]	; 0x48
  g->gray = g->grayagain = NULL;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2200      	movs	r2, #0
 800c35a:	655a      	str	r2, [r3, #84]	; 0x54
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	651a      	str	r2, [r3, #80]	; 0x50
  g->weak = g->ephemeron = g->allweak = NULL;
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	2200      	movs	r2, #0
 800c368:	661a      	str	r2, [r3, #96]	; 0x60
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	65da      	str	r2, [r3, #92]	; 0x5c
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	659a      	str	r2, [r3, #88]	; 0x58
  g->twups = NULL;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  g->totalbytes = sizeof(LG);
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	f44f 7252 	mov.w	r2, #840	; 0x348
 800c388:	609a      	str	r2, [r3, #8]
  g->GCdebt = 0;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	2200      	movs	r2, #0
 800c38e:	60da      	str	r2, [r3, #12]
  g->lastatomic = 0;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	2200      	movs	r2, #0
 800c394:	615a      	str	r2, [r3, #20]
  setivalue(&g->nilvalue, 0);  /* to signal that state is not yet built */
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	332c      	adds	r3, #44	; 0x2c
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2203      	movs	r2, #3
 800c3a6:	711a      	strb	r2, [r3, #4]
  setgcparam(g->gcpause, LUAI_GCPAUSE);
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	2232      	movs	r2, #50	; 0x32
 800c3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  setgcparam(g->gcstepmul, LUAI_GCMUL);
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	2219      	movs	r2, #25
 800c3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  g->gcstepsize = LUAI_GCSTEPSIZE;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	220d      	movs	r2, #13
 800c3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  setgcparam(g->genmajormul, LUAI_GENMAJORMUL);
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2219      	movs	r2, #25
 800c3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  g->genminormul = LUAI_GENMINORMUL;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2214      	movs	r2, #20
 800c3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  for (i=0; i < LUA_NUMTAGS; i++) g->mt[i] = NULL;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	61fb      	str	r3, [r7, #28]
 800c3d4:	e009      	b.n	800c3ea <lua_newstate+0x1d6>
 800c3d6:	693a      	ldr	r2, [r7, #16]
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	333e      	adds	r3, #62	; 0x3e
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	605a      	str	r2, [r3, #4]
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	61fb      	str	r3, [r7, #28]
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	2b08      	cmp	r3, #8
 800c3ee:	ddf2      	ble.n	800c3d6 <lua_newstate+0x1c2>
  if (luaD_rawrunprotected(L, f_luaopen, NULL) != LUA_OK) {
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	4908      	ldr	r1, [pc, #32]	; (800c414 <lua_newstate+0x200>)
 800c3f4:	69b8      	ldr	r0, [r7, #24]
 800c3f6:	f7fb f8c6 	bl	8007586 <luaD_rawrunprotected>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d004      	beq.n	800c40a <lua_newstate+0x1f6>
    /* memory allocation error: free partial state */
    close_state(L);
 800c400:	69b8      	ldr	r0, [r7, #24]
 800c402:	f7ff fe64 	bl	800c0ce <close_state>
    L = NULL;
 800c406:	2300      	movs	r3, #0
 800c408:	61bb      	str	r3, [r7, #24]
  }
  return L;
 800c40a:	69bb      	ldr	r3, [r7, #24]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3724      	adds	r7, #36	; 0x24
 800c410:	46bd      	mov	sp, r7
 800c412:	bd90      	pop	{r4, r7, pc}
 800c414:	0800c00d 	.word	0x0800c00d

0800c418 <luaE_warning>:
  L = G(L)->mainthread;  /* only the main thread can be closed */
  close_state(L);
}


void luaE_warning (lua_State *L, const char *msg, int tocont) {
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
  lua_WarnFunction wf = G(L)->warnf;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c42c:	617b      	str	r3, [r7, #20]
  if (wf != NULL)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d007      	beq.n	800c444 <luaE_warning+0x2c>
    wf(G(L)->ud_warn, msg, tocont);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	68b9      	ldr	r1, [r7, #8]
 800c442:	4798      	blx	r3
}
 800c444:	bf00      	nop
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <luaE_warnerror>:


/*
** Generate a warning from an error message
*/
void luaE_warnerror (lua_State *L, const char *where) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  TValue *errobj = s2v(L->top - 1);  /* error object */
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	3b08      	subs	r3, #8
 800c45c:	60fb      	str	r3, [r7, #12]
  const char *msg = (ttisstring(errobj))
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	791b      	ldrb	r3, [r3, #4]
 800c462:	f003 030f 	and.w	r3, r3, #15
                  ? svalue(errobj)
                  : "error object is not a string";
 800c466:	2b04      	cmp	r3, #4
 800c468:	d103      	bne.n	800c472 <luaE_warnerror+0x26>
                  ? svalue(errobj)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
                  : "error object is not a string";
 800c46e:	3310      	adds	r3, #16
 800c470:	e000      	b.n	800c474 <luaE_warnerror+0x28>
 800c472:	4b0f      	ldr	r3, [pc, #60]	; (800c4b0 <luaE_warnerror+0x64>)
  const char *msg = (ttisstring(errobj))
 800c474:	60bb      	str	r3, [r7, #8]
  /* produce warning "error in %s (%s)" (where, msg) */
  luaE_warning(L, "error in ", 1);
 800c476:	2201      	movs	r2, #1
 800c478:	490e      	ldr	r1, [pc, #56]	; (800c4b4 <luaE_warnerror+0x68>)
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7ff ffcc 	bl	800c418 <luaE_warning>
  luaE_warning(L, where, 1);
 800c480:	2201      	movs	r2, #1
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff ffc7 	bl	800c418 <luaE_warning>
  luaE_warning(L, " (", 1);
 800c48a:	2201      	movs	r2, #1
 800c48c:	490a      	ldr	r1, [pc, #40]	; (800c4b8 <luaE_warnerror+0x6c>)
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7ff ffc2 	bl	800c418 <luaE_warning>
  luaE_warning(L, msg, 1);
 800c494:	2201      	movs	r2, #1
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f7ff ffbd 	bl	800c418 <luaE_warning>
  luaE_warning(L, ")", 0);
 800c49e:	2200      	movs	r2, #0
 800c4a0:	4906      	ldr	r1, [pc, #24]	; (800c4bc <luaE_warnerror+0x70>)
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ffb8 	bl	800c418 <luaE_warning>
}
 800c4a8:	bf00      	nop
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	0801eeb4 	.word	0x0801eeb4
 800c4b4:	0801eed4 	.word	0x0801eed4
 800c4b8:	0801eee0 	.word	0x0801eee0
 800c4bc:	0801eee4 	.word	0x0801eee4

0800c4c0 <luaS_eqlngstr>:


/*
** equality for long strings
*/
int luaS_eqlngstr (TString *a, TString *b) {
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  size_t len = a->u.lnglen;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	60fb      	str	r3, [r7, #12]
  lua_assert(a->tt == LUA_VLNGSTR && b->tt == LUA_VLNGSTR);
  return (a == b) ||  /* same instance or... */
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d010      	beq.n	800c4fa <luaS_eqlngstr+0x3a>
    ((len == b->u.lnglen) &&  /* equal length and ... */
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	68db      	ldr	r3, [r3, #12]
  return (a == b) ||  /* same instance or... */
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d10d      	bne.n	800c4fe <luaS_eqlngstr+0x3e>
     (memcmp(getstr(a), getstr(b), len) == 0));  /* equal contents */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f103 0010 	add.w	r0, r3, #16
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	3310      	adds	r3, #16
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	f00e fffe 	bl	801b4f0 <memcmp>
 800c4f4:	4603      	mov	r3, r0
    ((len == b->u.lnglen) &&  /* equal length and ... */
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <luaS_eqlngstr+0x3e>
  return (a == b) ||  /* same instance or... */
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e000      	b.n	800c500 <luaS_eqlngstr+0x40>
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <luaS_hash>:


unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {
 800c508:	b480      	push	{r7}
 800c50a:	b087      	sub	sp, #28
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
  unsigned int h = seed ^ cast_uint(l);
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	4053      	eors	r3, r2
 800c51a:	617b      	str	r3, [r7, #20]
  for (; l > 0; l--)
 800c51c:	e010      	b.n	800c540 <luaS_hash+0x38>
    h ^= ((h<<5) + (h>>2) + cast_byte(str[l - 1]));
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	089b      	lsrs	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	3a01      	subs	r2, #1
 800c52c:	68f9      	ldr	r1, [r7, #12]
 800c52e:	440a      	add	r2, r1
 800c530:	7812      	ldrb	r2, [r2, #0]
 800c532:	4413      	add	r3, r2
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	4053      	eors	r3, r2
 800c538:	617b      	str	r3, [r7, #20]
  for (; l > 0; l--)
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	60bb      	str	r3, [r7, #8]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1eb      	bne.n	800c51e <luaS_hash+0x16>
  return h;
 800c546:	697b      	ldr	r3, [r7, #20]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	371c      	adds	r7, #28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <luaS_hashlongstr>:


unsigned int luaS_hashlongstr (TString *ts) {
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  lua_assert(ts->tt == LUA_VLNGSTR);
  if (ts->extra == 0) {  /* no hash? */
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	799b      	ldrb	r3, [r3, #6]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d111      	bne.n	800c588 <luaS_hashlongstr+0x34>
    size_t len = ts->u.lnglen;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	60fb      	str	r3, [r7, #12]
    ts->hash = luaS_hash(getstr(ts), len, ts->hash);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f103 0010 	add.w	r0, r3, #16
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	461a      	mov	r2, r3
 800c576:	68f9      	ldr	r1, [r7, #12]
 800c578:	f7ff ffc6 	bl	800c508 <luaS_hash>
 800c57c:	4602      	mov	r2, r0
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	609a      	str	r2, [r3, #8]
    ts->extra = 1;  /* now it has its hash */
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2201      	movs	r2, #1
 800c586:	719a      	strb	r2, [r3, #6]
  }
  return ts->hash;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689b      	ldr	r3, [r3, #8]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <tablerehash>:


static void tablerehash (TString **vect, int osize, int nsize) {
 800c594:	b480      	push	{r7}
 800c596:	b089      	sub	sp, #36	; 0x24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
  int i;
  for (i = osize; i < nsize; i++)  /* clear new elements */
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	61fb      	str	r3, [r7, #28]
 800c5a4:	e008      	b.n	800c5b8 <tablerehash+0x24>
    vect[i] = NULL;
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	601a      	str	r2, [r3, #0]
  for (i = osize; i < nsize; i++)  /* clear new elements */
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	69fa      	ldr	r2, [r7, #28]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	dbf2      	blt.n	800c5a6 <tablerehash+0x12>
  for (i = 0; i < osize; i++) {  /* rehash old part of the array */
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	61fb      	str	r3, [r7, #28]
 800c5c4:	e02a      	b.n	800c61c <tablerehash+0x88>
    TString *p = vect[i];
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	61bb      	str	r3, [r7, #24]
    vect[i] = NULL;
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	4413      	add	r3, r2
 800c5da:	2200      	movs	r2, #0
 800c5dc:	601a      	str	r2, [r3, #0]
    while (p) {  /* for each string in the list */
 800c5de:	e017      	b.n	800c610 <tablerehash+0x7c>
      TString *hnext = p->u.hnext;  /* save next */
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	617b      	str	r3, [r7, #20]
      unsigned int h = lmod(p->hash, nsize);  /* new position */
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	3a01      	subs	r2, #1
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	613b      	str	r3, [r7, #16]
      p->u.hnext = vect[h];  /* chain it into array */
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	60da      	str	r2, [r3, #12]
      vect[h] = p;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	4413      	add	r3, r2
 800c608:	69ba      	ldr	r2, [r7, #24]
 800c60a:	601a      	str	r2, [r3, #0]
      p = hnext;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	61bb      	str	r3, [r7, #24]
    while (p) {  /* for each string in the list */
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e4      	bne.n	800c5e0 <tablerehash+0x4c>
  for (i = 0; i < osize; i++) {  /* rehash old part of the array */
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	3301      	adds	r3, #1
 800c61a:	61fb      	str	r3, [r7, #28]
 800c61c:	69fa      	ldr	r2, [r7, #28]
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	429a      	cmp	r2, r3
 800c622:	dbd0      	blt.n	800c5c6 <tablerehash+0x32>
    }
  }
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	3724      	adds	r7, #36	; 0x24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <luaS_resize>:
/*
** Resize the string table. If allocation fails, keep the current size.
** (This can degrade performance, but any non-zero size should work
** correctly.)
*/
void luaS_resize (lua_State *L, int nsize) {
 800c632:	b580      	push	{r7, lr}
 800c634:	b086      	sub	sp, #24
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	6039      	str	r1, [r7, #0]
  stringtable *tb = &G(L)->strt;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	3318      	adds	r3, #24
 800c642:	617b      	str	r3, [r7, #20]
  int osize = tb->size;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	613b      	str	r3, [r7, #16]
  TString **newvect;
  if (nsize < osize)  /* shrinking table? */
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	429a      	cmp	r2, r3
 800c650:	da06      	bge.n	800c660 <luaS_resize+0x2e>
    tablerehash(tb->hash, osize, nsize);  /* depopulate shrinking part */
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	6939      	ldr	r1, [r7, #16]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff ff9a 	bl	800c594 <tablerehash>
  newvect = luaM_reallocvector(L, tb->hash, osize, nsize, TString*);
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	6819      	ldr	r1, [r3, #0]
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	009a      	lsls	r2, r3, #2
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7fe fce1 	bl	800b034 <luaM_realloc_>
 800c672:	60f8      	str	r0, [r7, #12]
  if (l_unlikely(newvect == NULL)) {  /* reallocation failed? */
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	bf0c      	ite	eq
 800c67a:	2301      	moveq	r3, #1
 800c67c:	2300      	movne	r3, #0
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00b      	beq.n	800c69c <luaS_resize+0x6a>
    if (nsize < osize)  /* was it shrinking table? */
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	429a      	cmp	r2, r3
 800c68a:	da16      	bge.n	800c6ba <luaS_resize+0x88>
      tablerehash(tb->hash, nsize, osize);  /* restore to original size */
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	693a      	ldr	r2, [r7, #16]
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff ff7d 	bl	800c594 <tablerehash>
    tb->hash = newvect;
    tb->size = nsize;
    if (nsize > osize)
      tablerehash(newvect, osize, nsize);  /* rehash for new size */
  }
}
 800c69a:	e00e      	b.n	800c6ba <luaS_resize+0x88>
    tb->hash = newvect;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	601a      	str	r2, [r3, #0]
    tb->size = nsize;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	609a      	str	r2, [r3, #8]
    if (nsize > osize)
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	dd04      	ble.n	800c6ba <luaS_resize+0x88>
      tablerehash(newvect, osize, nsize);  /* rehash for new size */
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	6939      	ldr	r1, [r7, #16]
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f7ff ff6d 	bl	800c594 <tablerehash>
}
 800c6ba:	bf00      	nop
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <luaS_clearcache>:

/*
** Clear API string cache. (Entries cannot be empty, so fill them with
** a non-collectable string.)
*/
void luaS_clearcache (global_State *g) {
 800c6c2:	b480      	push	{r7}
 800c6c4:	b085      	sub	sp, #20
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  int i, j;
  for (i = 0; i < STRCACHE_N; i++)
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	e023      	b.n	800c718 <luaS_clearcache+0x56>
    for (j = 0; j < STRCACHE_M; j++) {
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	60bb      	str	r3, [r7, #8]
 800c6d4:	e01a      	b.n	800c70c <luaS_clearcache+0x4a>
      if (iswhite(g->strcache[i][j]))  /* will entry be collected? */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	0051      	lsls	r1, r2, #1
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	440a      	add	r2, r1
 800c6e0:	3248      	adds	r2, #72	; 0x48
 800c6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e6:	795b      	ldrb	r3, [r3, #5]
 800c6e8:	f003 0318 	and.w	r3, r3, #24
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00a      	beq.n	800c706 <luaS_clearcache+0x44>
        g->strcache[i][j] = g->memerrmsg;  /* replace it with something fixed */
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	0050      	lsls	r0, r2, #1
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	4402      	add	r2, r0
 800c700:	3248      	adds	r2, #72	; 0x48
 800c702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < STRCACHE_M; j++) {
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	3301      	adds	r3, #1
 800c70a:	60bb      	str	r3, [r7, #8]
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	dde1      	ble.n	800c6d6 <luaS_clearcache+0x14>
  for (i = 0; i < STRCACHE_N; i++)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3301      	adds	r3, #1
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b34      	cmp	r3, #52	; 0x34
 800c71c:	ddd8      	ble.n	800c6d0 <luaS_clearcache+0xe>
    }
}
 800c71e:	bf00      	nop
 800c720:	bf00      	nop
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <luaS_init>:


/*
** Initialize the string table and the string cache
*/
void luaS_init (lua_State *L) {
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	60fb      	str	r3, [r7, #12]
  int i, j;
  stringtable *tb = &G(L)->strt;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	3318      	adds	r3, #24
 800c740:	60bb      	str	r3, [r7, #8]
  tb->hash = luaM_newvector(L, MINSTRTABSIZE, TString*);
 800c742:	2200      	movs	r2, #0
 800c744:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7fe fcb1 	bl	800b0b0 <luaM_malloc_>
 800c74e:	4602      	mov	r2, r0
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	601a      	str	r2, [r3, #0]
  tablerehash(tb->hash, 0, MINSTRTABSIZE);  /* clear array */
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2280      	movs	r2, #128	; 0x80
 800c75a:	2100      	movs	r1, #0
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff ff19 	bl	800c594 <tablerehash>
  tb->size = MINSTRTABSIZE;
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2280      	movs	r2, #128	; 0x80
 800c766:	609a      	str	r2, [r3, #8]
  /* pre-create memory-error message */
  g->memerrmsg = luaS_newliteral(L, MEMERRMSG);
 800c768:	2211      	movs	r2, #17
 800c76a:	4918      	ldr	r1, [pc, #96]	; (800c7cc <luaS_init+0xa0>)
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f94b 	bl	800ca08 <luaS_newlstr>
 800c772:	4602      	mov	r2, r0
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  luaC_fix(L, obj2gco(g->memerrmsg));  /* it should never be collected */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c780:	4619      	mov	r1, r3
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7fc f9f3 	bl	8008b6e <luaC_fix>
  for (i = 0; i < STRCACHE_N; i++)  /* fill cache with valid strings */
 800c788:	2300      	movs	r3, #0
 800c78a:	617b      	str	r3, [r7, #20]
 800c78c:	e016      	b.n	800c7bc <luaS_init+0x90>
    for (j = 0; j < STRCACHE_M; j++)
 800c78e:	2300      	movs	r3, #0
 800c790:	613b      	str	r3, [r7, #16]
 800c792:	e00d      	b.n	800c7b0 <luaS_init+0x84>
      g->strcache[i][j] = g->memerrmsg;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	0050      	lsls	r0, r2, #1
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	4402      	add	r2, r0
 800c7a4:	3248      	adds	r2, #72	; 0x48
 800c7a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < STRCACHE_M; j++)
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	613b      	str	r3, [r7, #16]
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	ddee      	ble.n	800c794 <luaS_init+0x68>
  for (i = 0; i < STRCACHE_N; i++)  /* fill cache with valid strings */
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	617b      	str	r3, [r7, #20]
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	2b34      	cmp	r3, #52	; 0x34
 800c7c0:	dde5      	ble.n	800c78e <luaS_init+0x62>
}
 800c7c2:	bf00      	nop
 800c7c4:	bf00      	nop
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	0801eee8 	.word	0x0801eee8

0800c7d0 <createstrobj>:


/*
** creates a new string object
*/
static TString *createstrobj (lua_State *L, size_t l, int tag, unsigned int h) {
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b088      	sub	sp, #32
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
 800c7dc:	603b      	str	r3, [r7, #0]
  TString *ts;
  GCObject *o;
  size_t totalsize;  /* total size of TString object */
  totalsize = sizelstring(l);
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	3311      	adds	r3, #17
 800c7e2:	61fb      	str	r3, [r7, #28]
  o = luaC_newobj(L, tag, totalsize);
 800c7e4:	69fa      	ldr	r2, [r7, #28]
 800c7e6:	6879      	ldr	r1, [r7, #4]
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f7fc f9ec 	bl	8008bc6 <luaC_newobj>
 800c7ee:	61b8      	str	r0, [r7, #24]
  ts = gco2ts(o);
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	617b      	str	r3, [r7, #20]
  ts->hash = h;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	609a      	str	r2, [r3, #8]
  ts->extra = 0;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	719a      	strb	r2, [r3, #6]
  getstr(ts)[l] = '\0';  /* ending 0 */
 800c800:	697a      	ldr	r2, [r7, #20]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	4413      	add	r3, r2
 800c806:	3310      	adds	r3, #16
 800c808:	2200      	movs	r2, #0
 800c80a:	701a      	strb	r2, [r3, #0]
  return ts;
 800c80c:	697b      	ldr	r3, [r7, #20]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <luaS_createlngstrobj>:


TString *luaS_createlngstrobj (lua_State *L, size_t l) {
 800c816:	b580      	push	{r7, lr}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	6039      	str	r1, [r7, #0]
  TString *ts = createstrobj(L, l, LUA_VLNGSTR, G(L)->seed);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c826:	2214      	movs	r2, #20
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7ff ffd0 	bl	800c7d0 <createstrobj>
 800c830:	60f8      	str	r0, [r7, #12]
  ts->u.lnglen = l;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	683a      	ldr	r2, [r7, #0]
 800c836:	60da      	str	r2, [r3, #12]
  return ts;
 800c838:	68fb      	ldr	r3, [r7, #12]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <luaS_remove>:


void luaS_remove (lua_State *L, TString *ts) {
 800c842:	b480      	push	{r7}
 800c844:	b085      	sub	sp, #20
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
  stringtable *tb = &G(L)->strt;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	3318      	adds	r3, #24
 800c852:	60bb      	str	r3, [r7, #8]
  TString **p = &tb->hash[lmod(ts->hash, tb->size)];
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	68b9      	ldr	r1, [r7, #8]
 800c85e:	6889      	ldr	r1, [r1, #8]
 800c860:	3901      	subs	r1, #1
 800c862:	400b      	ands	r3, r1
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]
  while (*p != ts)  /* find previous element */
 800c86a:	e003      	b.n	800c874 <luaS_remove+0x32>
    p = &(*p)->u.hnext;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	330c      	adds	r3, #12
 800c872:	60fb      	str	r3, [r7, #12]
  while (*p != ts)  /* find previous element */
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	683a      	ldr	r2, [r7, #0]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d1f6      	bne.n	800c86c <luaS_remove+0x2a>
  *p = (*p)->u.hnext;  /* remove element from its list */
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68da      	ldr	r2, [r3, #12]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	601a      	str	r2, [r3, #0]
  tb->nuse--;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	1e5a      	subs	r2, r3, #1
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	605a      	str	r2, [r3, #4]
}
 800c892:	bf00      	nop
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr

0800c89e <growstrtab>:


static void growstrtab (lua_State *L, stringtable *tb) {
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b082      	sub	sp, #8
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	6039      	str	r1, [r7, #0]
  if (l_unlikely(tb->nuse == MAX_INT)) {  /* too many strings? */
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	bf0c      	ite	eq
 800c8b4:	2301      	moveq	r3, #1
 800c8b6:	2300      	movne	r3, #0
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00d      	beq.n	800c8da <growstrtab+0x3c>
    luaC_fullgc(L, 1);  /* try to free some... */
 800c8be:	2101      	movs	r1, #1
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7fe fb0d 	bl	800aee0 <luaC_fullgc>
    if (tb->nuse == MAX_INT)  /* still too many? */
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d103      	bne.n	800c8da <growstrtab+0x3c>
      luaM_error(L);  /* cannot even create a message... */
 800c8d2:	2104      	movs	r1, #4
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7fa fe0d 	bl	80074f4 <luaD_throw>
  }
  if (tb->size <= MAXSTRTB / 2)  /* can grow string table? */
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e2:	da06      	bge.n	800c8f2 <growstrtab+0x54>
    luaS_resize(L, tb->size * 2);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff fea0 	bl	800c632 <luaS_resize>
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <internshrstr>:


/*
** Checks whether short string exists and reuses it or creates a new one.
*/
static TString *internshrstr (lua_State *L, const char *str, size_t l) {
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b08a      	sub	sp, #40	; 0x28
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	60b9      	str	r1, [r7, #8]
 800c904:	607a      	str	r2, [r7, #4]
  TString *ts;
  global_State *g = G(L);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	61fb      	str	r3, [r7, #28]
  stringtable *tb = &g->strt;
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	3318      	adds	r3, #24
 800c910:	61bb      	str	r3, [r7, #24]
  unsigned int h = luaS_hash(str, l, g->seed);
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c916:	461a      	mov	r2, r3
 800c918:	6879      	ldr	r1, [r7, #4]
 800c91a:	68b8      	ldr	r0, [r7, #8]
 800c91c:	f7ff fdf4 	bl	800c508 <luaS_hash>
 800c920:	6178      	str	r0, [r7, #20]
  TString **list = &tb->hash[lmod(h, tb->size)];
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	4619      	mov	r1, r3
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	400b      	ands	r3, r1
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	623b      	str	r3, [r7, #32]
  lua_assert(str != NULL);  /* otherwise 'memcmp'/'memcpy' are undefined */
  for (ts = *list; ts != NULL; ts = ts->u.hnext) {
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
 800c93e:	e027      	b.n	800c990 <internshrstr+0x96>
    if (l == ts->shrlen && (memcmp(str, getstr(ts), l * sizeof(char)) == 0)) {
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	79db      	ldrb	r3, [r3, #7]
 800c944:	461a      	mov	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4293      	cmp	r3, r2
 800c94a:	d11e      	bne.n	800c98a <internshrstr+0x90>
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	3310      	adds	r3, #16
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	4619      	mov	r1, r3
 800c954:	68b8      	ldr	r0, [r7, #8]
 800c956:	f00e fdcb 	bl	801b4f0 <memcmp>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d114      	bne.n	800c98a <internshrstr+0x90>
      /* found! */
      if (isdead(g, ts))  /* dead (but not collected yet)? */
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	795a      	ldrb	r2, [r3, #5]
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c96a:	f083 0318 	eor.w	r3, r3, #24
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	4013      	ands	r3, r2
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b00      	cmp	r3, #0
 800c976:	d006      	beq.n	800c986 <internshrstr+0x8c>
        changewhite(ts);  /* resurrect it */
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	795b      	ldrb	r3, [r3, #5]
 800c97c:	f083 0318 	eor.w	r3, r3, #24
 800c980:	b2da      	uxtb	r2, r3
 800c982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c984:	715a      	strb	r2, [r3, #5]
      return ts;
 800c986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c988:	e039      	b.n	800c9fe <internshrstr+0x104>
  for (ts = *list; ts != NULL; ts = ts->u.hnext) {
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	627b      	str	r3, [r7, #36]	; 0x24
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1d4      	bne.n	800c940 <internshrstr+0x46>
    }
  }
  /* else must create a new string */
  if (tb->nuse >= tb->size) {  /* need to grow string table? */
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	db0e      	blt.n	800c9c0 <internshrstr+0xc6>
    growstrtab(L, tb);
 800c9a2:	69b9      	ldr	r1, [r7, #24]
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f7ff ff7a 	bl	800c89e <growstrtab>
    list = &tb->hash[lmod(h, tb->size)];  /* rehash with new size */
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	400b      	ands	r3, r1
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	623b      	str	r3, [r7, #32]
  }
  ts = createstrobj(L, l, LUA_VSHRSTR, h);
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	2204      	movs	r2, #4
 800c9c4:	6879      	ldr	r1, [r7, #4]
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f7ff ff02 	bl	800c7d0 <createstrobj>
 800c9cc:	6278      	str	r0, [r7, #36]	; 0x24
  memcpy(getstr(ts), str, l * sizeof(char));
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	3310      	adds	r3, #16
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	68b9      	ldr	r1, [r7, #8]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f00e fd9a 	bl	801b510 <memcpy>
  ts->shrlen = cast_byte(l);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	71da      	strb	r2, [r3, #7]
  ts->u.hnext = *list;
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	60da      	str	r2, [r3, #12]
  *list = ts;
 800c9ec:	6a3b      	ldr	r3, [r7, #32]
 800c9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9f0:	601a      	str	r2, [r3, #0]
  tb->nuse++;
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	605a      	str	r2, [r3, #4]
  return ts;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3728      	adds	r7, #40	; 0x28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <luaS_newlstr>:


/*
** new string (with explicit length)
*/
TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b086      	sub	sp, #24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
  if (l <= LUAI_MAXSHORTLEN)  /* short string? */
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b28      	cmp	r3, #40	; 0x28
 800ca18:	d806      	bhi.n	800ca28 <luaS_newlstr+0x20>
    return internshrstr(L, str, l);
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	68b9      	ldr	r1, [r7, #8]
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7ff ff6b 	bl	800c8fa <internshrstr>
 800ca24:	4603      	mov	r3, r0
 800ca26:	e018      	b.n	800ca5a <luaS_newlstr+0x52>
  else {
    TString *ts;
    if (l_unlikely(l >= (MAX_SIZE - sizeof(TString))/sizeof(char)))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a0e      	ldr	r2, [pc, #56]	; (800ca64 <luaS_newlstr+0x5c>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	bf8c      	ite	hi
 800ca30:	2301      	movhi	r3, #1
 800ca32:	2300      	movls	r3, #0
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d002      	beq.n	800ca40 <luaS_newlstr+0x38>
      luaM_toobig(L);
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f7fe faaa 	bl	800af94 <luaM_toobig>
    ts = luaS_createlngstrobj(L, l);
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f7ff fee7 	bl	800c816 <luaS_createlngstrobj>
 800ca48:	6178      	str	r0, [r7, #20]
    memcpy(getstr(ts), str, l * sizeof(char));
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	3310      	adds	r3, #16
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	68b9      	ldr	r1, [r7, #8]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f00e fd5c 	bl	801b510 <memcpy>
    return ts;
 800ca58:	697b      	ldr	r3, [r7, #20]
  }
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	7fffffea 	.word	0x7fffffea

0800ca68 <luaS_new>:
** Create or reuse a zero-terminated string, first checking in the
** cache (using the string address as a key). The cache can contain
** only zero-terminated strings, so it is safe to use 'strcmp' to
** check hits.
*/
TString *luaS_new (lua_State *L, const char *str) {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  unsigned int i = point2uint(str) % STRCACHE_N;  /* hash */
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	4a2b      	ldr	r2, [pc, #172]	; (800cb24 <luaS_new+0xbc>)
 800ca76:	fba2 1203 	umull	r1, r2, r2, r3
 800ca7a:	1a99      	subs	r1, r3, r2
 800ca7c:	0849      	lsrs	r1, r1, #1
 800ca7e:	440a      	add	r2, r1
 800ca80:	0952      	lsrs	r2, r2, #5
 800ca82:	2135      	movs	r1, #53	; 0x35
 800ca84:	fb01 f202 	mul.w	r2, r1, r2
 800ca88:	1a9b      	subs	r3, r3, r2
 800ca8a:	613b      	str	r3, [r7, #16]
  int j;
  TString **p = G(L)->strcache[i];
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	691a      	ldr	r2, [r3, #16]
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	3324      	adds	r3, #36	; 0x24
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	4413      	add	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]
  for (j = 0; j < STRCACHE_M; j++) {
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	617b      	str	r3, [r7, #20]
 800ca9e:	e015      	b.n	800cacc <luaS_new+0x64>
    if (strcmp(str, getstr(p[j])) == 0)  /* hit? */
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	4413      	add	r3, r2
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	3310      	adds	r3, #16
 800caac:	4619      	mov	r1, r3
 800caae:	6838      	ldr	r0, [r7, #0]
 800cab0:	f7f3 fbec 	bl	800028c <strcmp>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d105      	bne.n	800cac6 <luaS_new+0x5e>
      return p[j];  /* that is it */
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	4413      	add	r3, r2
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	e029      	b.n	800cb1a <luaS_new+0xb2>
  for (j = 0; j < STRCACHE_M; j++) {
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	3301      	adds	r3, #1
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	2b01      	cmp	r3, #1
 800cad0:	dde6      	ble.n	800caa0 <luaS_new+0x38>
  }
  /* normal route */
  for (j = STRCACHE_M - 1; j > 0; j--)
 800cad2:	2301      	movs	r3, #1
 800cad4:	617b      	str	r3, [r7, #20]
 800cad6:	e00f      	b.n	800caf8 <luaS_new+0x90>
    p[j] = p[j - 1];  /* move out last element */
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cade:	3b01      	subs	r3, #1
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	441a      	add	r2, r3
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	68f9      	ldr	r1, [r7, #12]
 800caec:	440b      	add	r3, r1
 800caee:	6812      	ldr	r2, [r2, #0]
 800caf0:	601a      	str	r2, [r3, #0]
  for (j = STRCACHE_M - 1; j > 0; j--)
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	617b      	str	r3, [r7, #20]
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	dcec      	bgt.n	800cad8 <luaS_new+0x70>
  /* new element is first in the list */
  p[0] = luaS_newlstr(L, str, strlen(str));
 800cafe:	6838      	ldr	r0, [r7, #0]
 800cb00:	f7f3 fbce 	bl	80002a0 <strlen>
 800cb04:	4603      	mov	r3, r0
 800cb06:	461a      	mov	r2, r3
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7ff ff7c 	bl	800ca08 <luaS_newlstr>
 800cb10:	4602      	mov	r2, r0
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]
  return p[0];
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	3521cfb3 	.word	0x3521cfb3

0800cb28 <hashint>:
** Hash for integers. To allow a good hash, use the remainder operator
** ('%'). If integer fits as a non-negative int, compute an int
** remainder, which is faster. Otherwise, use an unsigned-integer
** remainder, which uses all bits and ensures a non-negative result.
*/
static Node *hashint (const Table *t, lua_Integer i) {
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  lua_Unsigned ui = l_castS2U(i);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	60fb      	str	r3, [r7, #12]
  if (ui <= (unsigned int)INT_MAX)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	db12      	blt.n	800cb62 <hashint+0x3a>
    return hashmod(t, cast_int(ui));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6919      	ldr	r1, [r3, #16]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	79d2      	ldrb	r2, [r2, #7]
 800cb46:	4610      	mov	r0, r2
 800cb48:	2201      	movs	r2, #1
 800cb4a:	4082      	lsls	r2, r0
 800cb4c:	3a01      	subs	r2, #1
 800cb4e:	f042 0201 	orr.w	r2, r2, #1
 800cb52:	fb93 f0f2 	sdiv	r0, r3, r2
 800cb56:	fb00 f202 	mul.w	r2, r0, r2
 800cb5a:	1a9b      	subs	r3, r3, r2
 800cb5c:	011b      	lsls	r3, r3, #4
 800cb5e:	440b      	add	r3, r1
 800cb60:	e012      	b.n	800cb88 <hashint+0x60>
  else
    return hashmod(t, ui);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6919      	ldr	r1, [r3, #16]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	79db      	ldrb	r3, [r3, #7]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	4093      	lsls	r3, r2
 800cb70:	3b01      	subs	r3, #1
 800cb72:	f043 0301 	orr.w	r3, r3, #1
 800cb76:	461a      	mov	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb7e:	fb00 f202 	mul.w	r2, r0, r2
 800cb82:	1a9b      	subs	r3, r3, r2
 800cb84:	011b      	lsls	r3, r3, #4
 800cb86:	440b      	add	r3, r1
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <l_hashfloat>:
** to INT_MAX. Next, the use of 'unsigned int' avoids overflows when
** adding 'i'; the use of '~u' (instead of '-u') avoids problems with
** INT_MIN.
*/
#if !defined(l_hashfloat)
static int l_hashfloat (lua_Number n) {
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	ed87 0a01 	vstr	s0, [r7, #4]
  int i;
  lua_Integer ni;
  n = l_mathop(frexp)(n, &i) * -cast_num(INT_MIN);
 800cb9e:	f107 0310 	add.w	r3, r7, #16
 800cba2:	4618      	mov	r0, r3
 800cba4:	ed97 0a01 	vldr	s0, [r7, #4]
 800cba8:	f00d fc4a 	bl	801a440 <frexpf>
 800cbac:	eef0 7a40 	vmov.f32	s15, s0
 800cbb0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800cc34 <l_hashfloat+0xa0>
 800cbb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbb8:	edc7 7a01 	vstr	s15, [r7, #4]
  if (!lua_numbertointeger(n, &ni)) {  /* is 'n' inf/-inf/NaN? */
 800cbbc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cbc0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800cc38 <l_hashfloat+0xa4>
 800cbc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	bfac      	ite	ge
 800cbce:	2301      	movge	r3, #1
 800cbd0:	2300      	movlt	r3, #0
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	f083 0301 	eor.w	r3, r3, #1
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d120      	bne.n	800cc20 <l_hashfloat+0x8c>
 800cbde:	edd7 7a01 	vldr	s15, [r7, #4]
 800cbe2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800cc34 <l_hashfloat+0xa0>
 800cbe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbee:	bf4c      	ite	mi
 800cbf0:	2301      	movmi	r3, #1
 800cbf2:	2300      	movpl	r3, #0
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	f083 0301 	eor.w	r3, r3, #1
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10f      	bne.n	800cc20 <l_hashfloat+0x8c>
 800cc00:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc08:	ee17 3a90 	vmov	r3, s15
 800cc0c:	60fb      	str	r3, [r7, #12]
    lua_assert(luai_numisnan(n) || l_mathop(fabs)(n) == cast_num(HUGE_VAL));
    return 0;
  }
  else {  /* normal case */
    unsigned int u = cast_uint(i) + cast_uint(ni);
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	461a      	mov	r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	4413      	add	r3, r2
 800cc16:	617b      	str	r3, [r7, #20]
    return cast_int(u <= cast_uint(INT_MAX) ? u : ~u);
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	da05      	bge.n	800cc2a <l_hashfloat+0x96>
 800cc1e:	e001      	b.n	800cc24 <l_hashfloat+0x90>
    return 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	e003      	b.n	800cc2c <l_hashfloat+0x98>
    return cast_int(u <= cast_uint(INT_MAX) ? u : ~u);
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	43db      	mvns	r3, r3
 800cc28:	e000      	b.n	800cc2c <l_hashfloat+0x98>
 800cc2a:	697b      	ldr	r3, [r7, #20]
  }
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3718      	adds	r7, #24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	4f000000 	.word	0x4f000000
 800cc38:	cf000000 	.word	0xcf000000

0800cc3c <mainpositionTV>:

/*
** returns the 'main' position of an element in a table (that is,
** the index of its hash value).
*/
static Node *mainpositionTV (const Table *t, const TValue *key) {
 800cc3c:	b590      	push	{r4, r7, lr}
 800cc3e:	b08b      	sub	sp, #44	; 0x2c
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  switch (ttypetag(key)) {
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	791b      	ldrb	r3, [r3, #4]
 800cc4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	2b15      	cmp	r3, #21
 800cc52:	f200 80b2 	bhi.w	800cdba <mainpositionTV+0x17e>
 800cc56:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <mainpositionTV+0x20>)
 800cc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5c:	0800cd43 	.word	0x0800cd43
 800cc60:	0800cd63 	.word	0x0800cd63
 800cc64:	0800ccb5 	.word	0x0800ccb5
 800cc68:	0800ccfb 	.word	0x0800ccfb
 800cc6c:	0800cdbb 	.word	0x0800cdbb
 800cc70:	0800cdbb 	.word	0x0800cdbb
 800cc74:	0800cdbb 	.word	0x0800cdbb
 800cc78:	0800cdbb 	.word	0x0800cdbb
 800cc7c:	0800cdbb 	.word	0x0800cdbb
 800cc80:	0800cdbb 	.word	0x0800cdbb
 800cc84:	0800cdbb 	.word	0x0800cdbb
 800cc88:	0800cdbb 	.word	0x0800cdbb
 800cc8c:	0800cdbb 	.word	0x0800cdbb
 800cc90:	0800cdbb 	.word	0x0800cdbb
 800cc94:	0800cdbb 	.word	0x0800cdbb
 800cc98:	0800cdbb 	.word	0x0800cdbb
 800cc9c:	0800cd49 	.word	0x0800cd49
 800cca0:	0800cdbb 	.word	0x0800cdbb
 800cca4:	0800ccc7 	.word	0x0800ccc7
 800cca8:	0800cd1d 	.word	0x0800cd1d
 800ccac:	0800cdbb 	.word	0x0800cdbb
 800ccb0:	0800cd8f 	.word	0x0800cd8f
    case LUA_VNUMINT: {
      lua_Integer i = ivalue(key);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	617b      	str	r3, [r7, #20]
      return hashint(t, i);
 800ccba:	6979      	ldr	r1, [r7, #20]
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7ff ff33 	bl	800cb28 <hashint>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	e08e      	b.n	800cde4 <mainpositionTV+0x1a8>
    }
    case LUA_VNUMFLT: {
      lua_Number n = fltvalue(key);
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	61fb      	str	r3, [r7, #28]
      return hashmod(t, l_hashfloat(n));
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691c      	ldr	r4, [r3, #16]
 800ccd0:	ed97 0a07 	vldr	s0, [r7, #28]
 800ccd4:	f7ff ff5e 	bl	800cb94 <l_hashfloat>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	79db      	ldrb	r3, [r3, #7]
 800ccde:	4619      	mov	r1, r3
 800cce0:	2301      	movs	r3, #1
 800cce2:	408b      	lsls	r3, r1
 800cce4:	3b01      	subs	r3, #1
 800cce6:	f043 0301 	orr.w	r3, r3, #1
 800ccea:	fb92 f1f3 	sdiv	r1, r2, r3
 800ccee:	fb01 f303 	mul.w	r3, r1, r3
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	011b      	lsls	r3, r3, #4
 800ccf6:	4423      	add	r3, r4
 800ccf8:	e074      	b.n	800cde4 <mainpositionTV+0x1a8>
    }
    case LUA_VSHRSTR: {
      TString *ts = tsvalue(key);
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	61bb      	str	r3, [r7, #24]
      return hashstr(t, ts);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	691a      	ldr	r2, [r3, #16]
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	6879      	ldr	r1, [r7, #4]
 800cd0a:	79c9      	ldrb	r1, [r1, #7]
 800cd0c:	4608      	mov	r0, r1
 800cd0e:	2101      	movs	r1, #1
 800cd10:	4081      	lsls	r1, r0
 800cd12:	3901      	subs	r1, #1
 800cd14:	400b      	ands	r3, r1
 800cd16:	011b      	lsls	r3, r3, #4
 800cd18:	4413      	add	r3, r2
 800cd1a:	e063      	b.n	800cde4 <mainpositionTV+0x1a8>
    }
    case LUA_VLNGSTR: {
      TString *ts = tsvalue(key);
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	623b      	str	r3, [r7, #32]
      return hashpow2(t, luaS_hashlongstr(ts));
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	691c      	ldr	r4, [r3, #16]
 800cd26:	6a38      	ldr	r0, [r7, #32]
 800cd28:	f7ff fc14 	bl	800c554 <luaS_hashlongstr>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	79db      	ldrb	r3, [r3, #7]
 800cd32:	4619      	mov	r1, r3
 800cd34:	2301      	movs	r3, #1
 800cd36:	408b      	lsls	r3, r1
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	011b      	lsls	r3, r3, #4
 800cd3e:	4423      	add	r3, r4
 800cd40:	e050      	b.n	800cde4 <mainpositionTV+0x1a8>
    }
    case LUA_VFALSE:
      return hashboolean(t, 0);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	e04d      	b.n	800cde4 <mainpositionTV+0x1a8>
    case LUA_VTRUE:
      return hashboolean(t, 1);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	691a      	ldr	r2, [r3, #16]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	79db      	ldrb	r3, [r3, #7]
 800cd50:	4619      	mov	r1, r3
 800cd52:	2301      	movs	r3, #1
 800cd54:	408b      	lsls	r3, r1
 800cd56:	3b01      	subs	r3, #1
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	011b      	lsls	r3, r3, #4
 800cd5e:	4413      	add	r3, r2
 800cd60:	e040      	b.n	800cde4 <mainpositionTV+0x1a8>
    case LUA_VLIGHTUSERDATA: {
      void *p = pvalue(key);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	613b      	str	r3, [r7, #16]
      return hashpointer(t, p);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6919      	ldr	r1, [r3, #16]
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	79d2      	ldrb	r2, [r2, #7]
 800cd72:	4610      	mov	r0, r2
 800cd74:	2201      	movs	r2, #1
 800cd76:	4082      	lsls	r2, r0
 800cd78:	3a01      	subs	r2, #1
 800cd7a:	f042 0201 	orr.w	r2, r2, #1
 800cd7e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd82:	fb00 f202 	mul.w	r2, r0, r2
 800cd86:	1a9b      	subs	r3, r3, r2
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	440b      	add	r3, r1
 800cd8c:	e02a      	b.n	800cde4 <mainpositionTV+0x1a8>
    }
    case LUA_VLCF: {
      lua_CFunction f = fvalue(key);
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	627b      	str	r3, [r7, #36]	; 0x24
      return hashpointer(t, f);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6919      	ldr	r1, [r3, #16]
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	79d2      	ldrb	r2, [r2, #7]
 800cd9e:	4610      	mov	r0, r2
 800cda0:	2201      	movs	r2, #1
 800cda2:	4082      	lsls	r2, r0
 800cda4:	3a01      	subs	r2, #1
 800cda6:	f042 0201 	orr.w	r2, r2, #1
 800cdaa:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdae:	fb00 f202 	mul.w	r2, r0, r2
 800cdb2:	1a9b      	subs	r3, r3, r2
 800cdb4:	011b      	lsls	r3, r3, #4
 800cdb6:	440b      	add	r3, r1
 800cdb8:	e014      	b.n	800cde4 <mainpositionTV+0x1a8>
    }
    default: {
      GCObject *o = gcvalue(key);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]
      return hashpointer(t, o);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6919      	ldr	r1, [r3, #16]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	79d2      	ldrb	r2, [r2, #7]
 800cdca:	4610      	mov	r0, r2
 800cdcc:	2201      	movs	r2, #1
 800cdce:	4082      	lsls	r2, r0
 800cdd0:	3a01      	subs	r2, #1
 800cdd2:	f042 0201 	orr.w	r2, r2, #1
 800cdd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdda:	fb00 f202 	mul.w	r2, r0, r2
 800cdde:	1a9b      	subs	r3, r3, r2
 800cde0:	011b      	lsls	r3, r3, #4
 800cde2:	440b      	add	r3, r1
    }
  }
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	372c      	adds	r7, #44	; 0x2c
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd90      	pop	{r4, r7, pc}

0800cdec <mainpositionfromnode>:


l_sinline Node *mainpositionfromnode (const Table *t, Node *nd) {
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  TValue key;
  getnodekey(cast(lua_State *, NULL), &key, nd);
 800cdf6:	f107 0308 	add.w	r3, r7, #8
 800cdfa:	617b      	str	r3, [r7, #20]
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	68d2      	ldr	r2, [r2, #12]
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	795a      	ldrb	r2, [r3, #5]
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	711a      	strb	r2, [r3, #4]
  return mainpositionTV(t, &key);
 800ce10:	f107 0308 	add.w	r3, r7, #8
 800ce14:	4619      	mov	r1, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff ff10 	bl	800cc3c <mainpositionTV>
 800ce1c:	4603      	mov	r3, r0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <equalkey>:
** could not have been collected. Outside a regular traversal, we
** have garbage in, garbage out. What is relevant is that this false
** positive does not break anything.  (In particular, 'next' will return
** some other valid item on the table or nil.)
*/
static int equalkey (const TValue *k1, const Node *n2, int deadok) {
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
  if ((rawtt(k1) != keytt(n2)) &&  /* not the same variants? */
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	791a      	ldrb	r2, [r3, #4]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	795b      	ldrb	r3, [r3, #5]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d00e      	beq.n	800ce5e <equalkey+0x36>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d009      	beq.n	800ce5a <equalkey+0x32>
       !(deadok && keyisdead(n2) && iscollectable(k1)))
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	795b      	ldrb	r3, [r3, #5]
 800ce4a:	2b0b      	cmp	r3, #11
 800ce4c:	d105      	bne.n	800ce5a <equalkey+0x32>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	791b      	ldrb	r3, [r3, #4]
 800ce52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <equalkey+0x36>
   return 0;  /* cannot be same key */
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	e07e      	b.n	800cf5c <equalkey+0x134>
  switch (keytt(n2)) {
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	795b      	ldrb	r3, [r3, #5]
 800ce62:	2b16      	cmp	r3, #22
 800ce64:	dc34      	bgt.n	800ced0 <equalkey+0xa8>
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	db6f      	blt.n	800cf4a <equalkey+0x122>
 800ce6a:	2b16      	cmp	r3, #22
 800ce6c:	d86d      	bhi.n	800cf4a <equalkey+0x122>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <equalkey+0x4c>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800ced7 	.word	0x0800ced7
 800ce78:	0800ced7 	.word	0x0800ced7
 800ce7c:	0800cf0d 	.word	0x0800cf0d
 800ce80:	0800cedb 	.word	0x0800cedb
 800ce84:	0800cf4b 	.word	0x0800cf4b
 800ce88:	0800cf4b 	.word	0x0800cf4b
 800ce8c:	0800cf4b 	.word	0x0800cf4b
 800ce90:	0800cf4b 	.word	0x0800cf4b
 800ce94:	0800cf4b 	.word	0x0800cf4b
 800ce98:	0800cf4b 	.word	0x0800cf4b
 800ce9c:	0800cf4b 	.word	0x0800cf4b
 800cea0:	0800cf4b 	.word	0x0800cf4b
 800cea4:	0800cf4b 	.word	0x0800cf4b
 800cea8:	0800cf4b 	.word	0x0800cf4b
 800ceac:	0800cf4b 	.word	0x0800cf4b
 800ceb0:	0800cf4b 	.word	0x0800cf4b
 800ceb4:	0800cf4b 	.word	0x0800cf4b
 800ceb8:	0800ced7 	.word	0x0800ced7
 800cebc:	0800cf4b 	.word	0x0800cf4b
 800cec0:	0800ceef 	.word	0x0800ceef
 800cec4:	0800cf4b 	.word	0x0800cf4b
 800cec8:	0800cf4b 	.word	0x0800cf4b
 800cecc:	0800cf21 	.word	0x0800cf21
 800ced0:	2b54      	cmp	r3, #84	; 0x54
 800ced2:	d02f      	beq.n	800cf34 <equalkey+0x10c>
 800ced4:	e039      	b.n	800cf4a <equalkey+0x122>
    case LUA_VNIL: case LUA_VFALSE: case LUA_VTRUE:
      return 1;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e040      	b.n	800cf5c <equalkey+0x134>
    case LUA_VNUMINT:
      return (ivalue(k1) == keyival(n2));
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	bf0c      	ite	eq
 800cee6:	2301      	moveq	r3, #1
 800cee8:	2300      	movne	r3, #0
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	e036      	b.n	800cf5c <equalkey+0x134>
    case LUA_VNUMFLT:
      return luai_numeq(fltvalue(k1), fltvalueraw(keyval(n2)));
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	ed93 7a00 	vldr	s14, [r3]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	edd3 7a03 	vldr	s15, [r3, #12]
 800cefa:	eeb4 7a67 	vcmp.f32	s14, s15
 800cefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf02:	bf0c      	ite	eq
 800cf04:	2301      	moveq	r3, #1
 800cf06:	2300      	movne	r3, #0
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	e027      	b.n	800cf5c <equalkey+0x134>
    case LUA_VLIGHTUSERDATA:
      return pvalue(k1) == pvalueraw(keyval(n2));
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	bf0c      	ite	eq
 800cf18:	2301      	moveq	r3, #1
 800cf1a:	2300      	movne	r3, #0
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	e01d      	b.n	800cf5c <equalkey+0x134>
    case LUA_VLCF:
      return fvalue(k1) == fvalueraw(keyval(n2));
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	bf0c      	ite	eq
 800cf2c:	2301      	moveq	r3, #1
 800cf2e:	2300      	movne	r3, #0
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	e013      	b.n	800cf5c <equalkey+0x134>
    case ctb(LUA_VLNGSTR):
      return luaS_eqlngstr(tsvalue(k1), keystrval(n2));
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4610      	mov	r0, r2
 800cf42:	f7ff fabd 	bl	800c4c0 <luaS_eqlngstr>
 800cf46:	4603      	mov	r3, r0
 800cf48:	e008      	b.n	800cf5c <equalkey+0x134>
    default:
      return gcvalue(k1) == gcvalueraw(keyval(n2));
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	bf0c      	ite	eq
 800cf56:	2301      	moveq	r3, #1
 800cf58:	2300      	movne	r3, #0
 800cf5a:	b2db      	uxtb	r3, r3
  }
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <luaH_realasize>:


/*
** Returns the real size of the 'array' array
*/
LUAI_FUNC unsigned int luaH_realasize (const Table *t) {
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  if (limitequalsasize(t))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	799b      	ldrb	r3, [r3, #6]
 800cf70:	b25b      	sxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	da07      	bge.n	800cf86 <luaH_realasize+0x22>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	4013      	ands	r3, r2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d102      	bne.n	800cf8c <luaH_realasize+0x28>
    return t->alimit;  /* this is the size */
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	e01f      	b.n	800cfcc <luaH_realasize+0x68>
  else {
    unsigned int size = t->alimit;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	60fb      	str	r3, [r7, #12]
    /* compute the smallest power of 2 not smaller than 'n' */
    size |= (size >> 1);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	085b      	lsrs	r3, r3, #1
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]
    size |= (size >> 2);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	089b      	lsrs	r3, r3, #2
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	60fb      	str	r3, [r7, #12]
    size |= (size >> 4);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	091b      	lsrs	r3, r3, #4
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]
    size |= (size >> 8);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	0a1b      	lsrs	r3, r3, #8
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	60fb      	str	r3, [r7, #12]
    size |= (size >> 16);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	0c1b      	lsrs	r3, r3, #16
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	60fb      	str	r3, [r7, #12]
#if (UINT_MAX >> 30) > 3
    size |= (size >> 32);  /* unsigned int has more than 32 bits */
#endif
    size++;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
    lua_assert(ispow2(size) && size/2 < t->alimit && t->alimit < size);
    return size;
 800cfca:	68fb      	ldr	r3, [r7, #12]
  }
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3714      	adds	r7, #20
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <ispow2realasize>:
/*
** Check whether real size of the array is a power of 2.
** (If it is not, 'alimit' cannot be changed to any other value
** without changing the real size.)
*/
static int ispow2realasize (const Table *t) {
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  return (!isrealasize(t) || ispow2(t->alimit));
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	799b      	ldrb	r3, [r3, #6]
 800cfe4:	b25b      	sxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	db07      	blt.n	800cffa <ispow2realasize+0x22>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	689a      	ldr	r2, [r3, #8]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	4013      	ands	r3, r2
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <ispow2realasize+0x26>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e000      	b.n	800d000 <ispow2realasize+0x28>
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <setlimittosize>:


static unsigned int setlimittosize (Table *t) {
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  t->alimit = luaH_realasize(t);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7ff ffa5 	bl	800cf64 <luaH_realasize>
 800d01a:	4602      	mov	r2, r0
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	609a      	str	r2, [r3, #8]
  setrealasize(t);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	799b      	ldrb	r3, [r3, #6]
 800d024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	719a      	strb	r2, [r3, #6]
  return t->alimit;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	689b      	ldr	r3, [r3, #8]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
	...

0800d03c <getgeneric>:
/*
** "Generic" get version. (Not that generic: not valid for integers,
** which may be in array part, nor for floats with integral values.)
** See explanation about 'deadok' in function 'equalkey'.
*/
static const TValue *getgeneric (Table *t, const TValue *key, int deadok) {
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
  Node *n = mainpositionTV(t, key);
 800d048:	68b9      	ldr	r1, [r7, #8]
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f7ff fdf6 	bl	800cc3c <mainpositionTV>
 800d050:	6178      	str	r0, [r7, #20]
  for (;;) {  /* check whether 'key' is somewhere in the chain */
    if (equalkey(key, n, deadok))
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	6979      	ldr	r1, [r7, #20]
 800d056:	68b8      	ldr	r0, [r7, #8]
 800d058:	f7ff fee6 	bl	800ce28 <equalkey>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <getgeneric+0x2a>
      return gval(n);  /* that's it */
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	e00d      	b.n	800d082 <getgeneric+0x46>
    else {
      int nx = gnext(n);
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	613b      	str	r3, [r7, #16]
      if (nx == 0)
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <getgeneric+0x3a>
        return &absentkey;  /* not found */
 800d072:	4b06      	ldr	r3, [pc, #24]	; (800d08c <getgeneric+0x50>)
 800d074:	e005      	b.n	800d082 <getgeneric+0x46>
      n += nx;
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	011b      	lsls	r3, r3, #4
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	4413      	add	r3, r2
 800d07e:	617b      	str	r3, [r7, #20]
    if (equalkey(key, n, deadok))
 800d080:	e7e7      	b.n	800d052 <getgeneric+0x16>
    }
  }
}
 800d082:	4618      	mov	r0, r3
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	0801f51c 	.word	0x0801f51c

0800d090 <arrayindex>:

/*
** returns the index for 'k' if 'k' is an appropriate key to live in
** the array part of a table, 0 otherwise.
*/
static unsigned int arrayindex (lua_Integer k) {
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  if (l_castS2U(k) - 1u < MAXASIZE)  /* 'k' in [1, MAXASIZE]? */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3b01      	subs	r3, #1
 800d09c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d201      	bcs.n	800d0a8 <arrayindex+0x18>
    return cast_uint(k);  /* 'key' is an appropriate array index */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	e000      	b.n	800d0aa <arrayindex+0x1a>
  else
    return 0;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <freehash>:
  }
  return 0;  /* no more elements */
}


static void freehash (lua_State *L, Table *t) {
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	6039      	str	r1, [r7, #0]
  if (!isdummy(t))
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00a      	beq.n	800d0de <freehash+0x28>
    luaM_freearray(L, t->node, cast_sizet(sizenode(t)));
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	6919      	ldr	r1, [r3, #16]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	79db      	ldrb	r3, [r3, #7]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	2310      	movs	r3, #16
 800d0d4:	4093      	lsls	r3, r2
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7fd ff65 	bl	800afa8 <luaM_free_>
}
 800d0de:	bf00      	nop
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <computesizes>:
** between 2^(i - 1) + 1 and 2^i. 'pna' enters with the total number of
** integer keys in the table and leaves with the number of keys that
** will go to the array part; return the optimal size.  (The condition
** 'twotoi > 0' in the for loop stops the loop if 'twotoi' overflows.)
*/
static unsigned int computesizes (unsigned int nums[], unsigned int *pna) {
 800d0e6:	b480      	push	{r7}
 800d0e8:	b089      	sub	sp, #36	; 0x24
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
  int i;
  unsigned int twotoi;  /* 2^i (candidate for optimal size) */
  unsigned int a = 0;  /* number of elements smaller than 2^i */
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	617b      	str	r3, [r7, #20]
  unsigned int na = 0;  /* number of elements to go to array part */
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	613b      	str	r3, [r7, #16]
  unsigned int optimal = 0;  /* optimal size for array part */
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	60fb      	str	r3, [r7, #12]
  /* loop while keys can fill more than half of total size */
  for (i = 0, twotoi = 1;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	61fb      	str	r3, [r7, #28]
 800d100:	2301      	movs	r3, #1
 800d102:	61bb      	str	r3, [r7, #24]
 800d104:	e016      	b.n	800d134 <computesizes+0x4e>
       twotoi > 0 && *pna > twotoi / 2;
       i++, twotoi *= 2) {
    a += nums[i];
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	4413      	add	r3, r2
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	697a      	ldr	r2, [r7, #20]
 800d112:	4413      	add	r3, r2
 800d114:	617b      	str	r3, [r7, #20]
    if (a > twotoi/2) {  /* more than half elements present? */
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	085b      	lsrs	r3, r3, #1
 800d11a:	697a      	ldr	r2, [r7, #20]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d903      	bls.n	800d128 <computesizes+0x42>
      optimal = twotoi;  /* optimal size (till now) */
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	60fb      	str	r3, [r7, #12]
      na = a;  /* all elements up to 'optimal' will go to array part */
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	613b      	str	r3, [r7, #16]
       i++, twotoi *= 2) {
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	3301      	adds	r3, #1
 800d12c:	61fb      	str	r3, [r7, #28]
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	61bb      	str	r3, [r7, #24]
  for (i = 0, twotoi = 1;
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d005      	beq.n	800d146 <computesizes+0x60>
       twotoi > 0 && *pna > twotoi / 2;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	085b      	lsrs	r3, r3, #1
 800d142:	429a      	cmp	r2, r3
 800d144:	d8df      	bhi.n	800d106 <computesizes+0x20>
    }
  }
  lua_assert((optimal == 0 || optimal / 2 < na) && na <= optimal);
  *pna = na;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	601a      	str	r2, [r3, #0]
  return optimal;
 800d14c:	68fb      	ldr	r3, [r7, #12]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3724      	adds	r7, #36	; 0x24
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <countint>:


static int countint (lua_Integer key, unsigned int *nums) {
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	6039      	str	r1, [r7, #0]
  unsigned int k = arrayindex(key);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff ff93 	bl	800d090 <arrayindex>
 800d16a:	60f8      	str	r0, [r7, #12]
  if (k != 0) {  /* is 'key' an appropriate array index? */
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00b      	beq.n	800d18a <countint+0x30>
    nums[luaO_ceillog2(k)]++;  /* count as such */
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f7fd ffd6 	bl	800b124 <luaO_ceillog2>
 800d178:	4603      	mov	r3, r0
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	683a      	ldr	r2, [r7, #0]
 800d17e:	4413      	add	r3, r2
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	3201      	adds	r2, #1
 800d184:	601a      	str	r2, [r3, #0]
    return 1;
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <countint+0x32>
  }
  else
    return 0;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <numusearray>:
/*
** Count keys in array part of table 't': Fill 'nums[i]' with
** number of keys that will go into corresponding slice and return
** total number of non-nil keys.
*/
static unsigned int numusearray (const Table *t, unsigned int *nums) {
 800d194:	b480      	push	{r7}
 800d196:	b08b      	sub	sp, #44	; 0x2c
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  int lg;
  unsigned int ttlg;  /* 2^lg */
  unsigned int ause = 0;  /* summation of 'nums' */
 800d19e:	2300      	movs	r3, #0
 800d1a0:	61fb      	str	r3, [r7, #28]
  unsigned int i = 1;  /* count to traverse all array keys */
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	61bb      	str	r3, [r7, #24]
  unsigned int asize = limitasasize(t);  /* real array size */
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	60fb      	str	r3, [r7, #12]
  /* traverse each slice */
  for (lg = 0, ttlg = 1; lg <= MAXABITS; lg++, ttlg *= 2) {
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	623b      	str	r3, [r7, #32]
 800d1b4:	e03b      	b.n	800d22e <numusearray+0x9a>
    unsigned int lc = 0;  /* counter */
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	617b      	str	r3, [r7, #20]
    unsigned int lim = ttlg;
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	613b      	str	r3, [r7, #16]
    if (lim > asize) {
 800d1be:	693a      	ldr	r2, [r7, #16]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d919      	bls.n	800d1fa <numusearray+0x66>
      lim = asize;  /* adjust upper limit */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	613b      	str	r3, [r7, #16]
      if (i > lim)
 800d1ca:	69ba      	ldr	r2, [r7, #24]
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d831      	bhi.n	800d236 <numusearray+0xa2>
        break;  /* no more elements to count */
    }
    /* count elements in range (2^(lg - 1), 2^lg] */
    for (; i <= lim; i++) {
 800d1d2:	e012      	b.n	800d1fa <numusearray+0x66>
      if (!isempty(&t->array[i-1]))
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	68da      	ldr	r2, [r3, #12]
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	4413      	add	r3, r2
 800d1e4:	791b      	ldrb	r3, [r3, #4]
 800d1e6:	f003 030f 	and.w	r3, r3, #15
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d002      	beq.n	800d1f4 <numusearray+0x60>
        lc++;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	617b      	str	r3, [r7, #20]
    for (; i <= lim; i++) {
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	61bb      	str	r3, [r7, #24]
 800d1fa:	69ba      	ldr	r2, [r7, #24]
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d9e8      	bls.n	800d1d4 <numusearray+0x40>
    }
    nums[lg] += lc;
 800d202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	4413      	add	r3, r2
 800d20a:	6819      	ldr	r1, [r3, #0]
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	4413      	add	r3, r2
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	440a      	add	r2, r1
 800d218:	601a      	str	r2, [r3, #0]
    ause += lc;
 800d21a:	69fa      	ldr	r2, [r7, #28]
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	4413      	add	r3, r2
 800d220:	61fb      	str	r3, [r7, #28]
  for (lg = 0, ttlg = 1; lg <= MAXABITS; lg++, ttlg *= 2) {
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d224:	3301      	adds	r3, #1
 800d226:	627b      	str	r3, [r7, #36]	; 0x24
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	623b      	str	r3, [r7, #32]
 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	2b1f      	cmp	r3, #31
 800d232:	ddc0      	ble.n	800d1b6 <numusearray+0x22>
 800d234:	e000      	b.n	800d238 <numusearray+0xa4>
        break;  /* no more elements to count */
 800d236:	bf00      	nop
  }
  return ause;
 800d238:	69fb      	ldr	r3, [r7, #28]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	372c      	adds	r7, #44	; 0x2c
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr

0800d246 <numusehash>:


static int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {
 800d246:	b580      	push	{r7, lr}
 800d248:	b088      	sub	sp, #32
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	60f8      	str	r0, [r7, #12]
 800d24e:	60b9      	str	r1, [r7, #8]
 800d250:	607a      	str	r2, [r7, #4]
  int totaluse = 0;  /* total number of elements */
 800d252:	2300      	movs	r3, #0
 800d254:	61fb      	str	r3, [r7, #28]
  int ause = 0;  /* elements added to 'nums' (can go to array part) */
 800d256:	2300      	movs	r3, #0
 800d258:	61bb      	str	r3, [r7, #24]
  int i = sizenode(t);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	79db      	ldrb	r3, [r3, #7]
 800d25e:	461a      	mov	r2, r3
 800d260:	2301      	movs	r3, #1
 800d262:	4093      	lsls	r3, r2
 800d264:	617b      	str	r3, [r7, #20]
  while (i--) {
 800d266:	e01c      	b.n	800d2a2 <numusehash+0x5c>
    Node *n = &t->node[i];
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	691a      	ldr	r2, [r3, #16]
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	011b      	lsls	r3, r3, #4
 800d270:	4413      	add	r3, r2
 800d272:	613b      	str	r3, [r7, #16]
    if (!isempty(gval(n))) {
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	791b      	ldrb	r3, [r3, #4]
 800d278:	f003 030f 	and.w	r3, r3, #15
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d010      	beq.n	800d2a2 <numusehash+0x5c>
      if (keyisinteger(n))
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	795b      	ldrb	r3, [r3, #5]
 800d284:	2b03      	cmp	r3, #3
 800d286:	d109      	bne.n	800d29c <numusehash+0x56>
        ause += countint(keyival(n), nums);
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	68b9      	ldr	r1, [r7, #8]
 800d28e:	4618      	mov	r0, r3
 800d290:	f7ff ff63 	bl	800d15a <countint>
 800d294:	4602      	mov	r2, r0
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	4413      	add	r3, r2
 800d29a:	61bb      	str	r3, [r7, #24]
      totaluse++;
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	61fb      	str	r3, [r7, #28]
  while (i--) {
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	1e5a      	subs	r2, r3, #1
 800d2a6:	617a      	str	r2, [r7, #20]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1dd      	bne.n	800d268 <numusehash+0x22>
    }
  }
  *pna += ause;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	441a      	add	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	601a      	str	r2, [r3, #0]
  return totaluse;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3720      	adds	r7, #32
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <setnodevector>:
** size, or reuses the dummy node if size is zero.
** The computation for size overflow is in two steps: the first
** comparison ensures that the shift in the second one does not
** overflow.
*/
static void setnodevector (lua_State *L, Table *t, unsigned int size) {
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
  if (size == 0) {  /* no elements to hash part? */
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d109      	bne.n	800d2ea <setnodevector+0x26>
    t->node = cast(Node *, dummynode);  /* use common 'dummynode' */
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	4a28      	ldr	r2, [pc, #160]	; (800d37c <setnodevector+0xb8>)
 800d2da:	611a      	str	r2, [r3, #16]
    t->lsizenode = 0;
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	71da      	strb	r2, [r3, #7]
    t->lastfree = NULL;  /* signal that it is using dummy node */
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	615a      	str	r2, [r3, #20]
      setempty(gval(n));
    }
    t->lsizenode = cast_byte(lsize);
    t->lastfree = gnode(t, size);  /* all positions are free */
  }
}
 800d2e8:	e044      	b.n	800d374 <setnodevector+0xb0>
    int lsize = luaO_ceillog2(size);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7fd ff1a 	bl	800b124 <luaO_ceillog2>
 800d2f0:	61b8      	str	r0, [r7, #24]
    if (lsize > MAXHBITS || (1u << lsize) > MAXHSIZE)
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	2b1e      	cmp	r3, #30
 800d2f6:	dc06      	bgt.n	800d306 <setnodevector+0x42>
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d304:	d303      	bcc.n	800d30e <setnodevector+0x4a>
      luaG_runerror(L, "table overflow");
 800d306:	491e      	ldr	r1, [pc, #120]	; (800d380 <setnodevector+0xbc>)
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f7f9 ff58 	bl	80071be <luaG_runerror>
    size = twoto(lsize);
 800d30e:	2201      	movs	r2, #1
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	fa02 f303 	lsl.w	r3, r2, r3
 800d316:	607b      	str	r3, [r7, #4]
    t->node = luaM_newvector(L, size, Node);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	011b      	lsls	r3, r3, #4
 800d31c:	2200      	movs	r2, #0
 800d31e:	4619      	mov	r1, r3
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f7fd fec5 	bl	800b0b0 <luaM_malloc_>
 800d326:	4602      	mov	r2, r0
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	611a      	str	r2, [r3, #16]
    for (i = 0; i < (int)size; i++) {
 800d32c:	2300      	movs	r3, #0
 800d32e:	61fb      	str	r3, [r7, #28]
 800d330:	e011      	b.n	800d356 <setnodevector+0x92>
      Node *n = gnode(t, i);
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	691a      	ldr	r2, [r3, #16]
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	4413      	add	r3, r2
 800d33c:	617b      	str	r3, [r7, #20]
      gnext(n) = 0;
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	2200      	movs	r2, #0
 800d342:	609a      	str	r2, [r3, #8]
      setnilkey(n);
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2200      	movs	r2, #0
 800d348:	715a      	strb	r2, [r3, #5]
      setempty(gval(n));
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2210      	movs	r2, #16
 800d34e:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < (int)size; i++) {
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	3301      	adds	r3, #1
 800d354:	61fb      	str	r3, [r7, #28]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	69fa      	ldr	r2, [r7, #28]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	dbe9      	blt.n	800d332 <setnodevector+0x6e>
    t->lsizenode = cast_byte(lsize);
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	b2da      	uxtb	r2, r3
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	71da      	strb	r2, [r3, #7]
    t->lastfree = gnode(t, size);  /* all positions are free */
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	691a      	ldr	r2, [r3, #16]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	011b      	lsls	r3, r3, #4
 800d36e:	441a      	add	r2, r3
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	615a      	str	r2, [r3, #20]
}
 800d374:	bf00      	nop
 800d376:	3720      	adds	r7, #32
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	0801f50c 	.word	0x0801f50c
 800d380:	0801ef14 	.word	0x0801ef14

0800d384 <reinsert>:


/*
** (Re)insert all elements from the hash part of 'ot' into table 't'.
*/
static void reinsert (lua_State *L, Table *ot, Table *t) {
 800d384:	b580      	push	{r7, lr}
 800d386:	b08c      	sub	sp, #48	; 0x30
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
  int j;
  int size = sizenode(ot);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	79db      	ldrb	r3, [r3, #7]
 800d394:	461a      	mov	r2, r3
 800d396:	2301      	movs	r3, #1
 800d398:	4093      	lsls	r3, r2
 800d39a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (j = 0; j < size; j++) {
 800d39c:	2300      	movs	r3, #0
 800d39e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3a0:	e022      	b.n	800d3e8 <reinsert+0x64>
    Node *old = gnode(ot, j);
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	691a      	ldr	r2, [r3, #16]
 800d3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	4413      	add	r3, r2
 800d3ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (!isempty(gval(old))) {
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	791b      	ldrb	r3, [r3, #4]
 800d3b2:	f003 030f 	and.w	r3, r3, #15
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d013      	beq.n	800d3e2 <reinsert+0x5e>
      /* doesn't need barrier/invalidate cache, as entry was
         already present in the table */
      TValue k;
      getnodekey(L, &k, old);
 800d3ba:	f107 0314 	add.w	r3, r7, #20
 800d3be:	623b      	str	r3, [r7, #32]
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	69fa      	ldr	r2, [r7, #28]
 800d3c8:	68d2      	ldr	r2, [r2, #12]
 800d3ca:	601a      	str	r2, [r3, #0]
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	795a      	ldrb	r2, [r3, #5]
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	711a      	strb	r2, [r3, #4]
      luaH_set(L, t, &k, gval(old));
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d6:	f107 0214 	add.w	r2, r7, #20
 800d3da:	6879      	ldr	r1, [r7, #4]
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f000 fc01 	bl	800dbe4 <luaH_set>
  for (j = 0; j < size; j++) {
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	dbd8      	blt.n	800d3a2 <reinsert+0x1e>
    }
  }
}
 800d3f0:	bf00      	nop
 800d3f2:	bf00      	nop
 800d3f4:	3730      	adds	r7, #48	; 0x30
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <exchangehashpart>:


/*
** Exchange the hash part of 't1' and 't2'.
*/
static void exchangehashpart (Table *t1, Table *t2) {
 800d3fa:	b480      	push	{r7}
 800d3fc:	b087      	sub	sp, #28
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	6039      	str	r1, [r7, #0]
  lu_byte lsizenode = t1->lsizenode;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	79db      	ldrb	r3, [r3, #7]
 800d408:	75fb      	strb	r3, [r7, #23]
  Node *node = t1->node;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	613b      	str	r3, [r7, #16]
  Node *lastfree = t1->lastfree;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	60fb      	str	r3, [r7, #12]
  t1->lsizenode = t2->lsizenode;
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	79da      	ldrb	r2, [r3, #7]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	71da      	strb	r2, [r3, #7]
  t1->node = t2->node;
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	691a      	ldr	r2, [r3, #16]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	611a      	str	r2, [r3, #16]
  t1->lastfree = t2->lastfree;
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	695a      	ldr	r2, [r3, #20]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	615a      	str	r2, [r3, #20]
  t2->lsizenode = lsizenode;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	7dfa      	ldrb	r2, [r7, #23]
 800d432:	71da      	strb	r2, [r3, #7]
  t2->node = node;
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	611a      	str	r2, [r3, #16]
  t2->lastfree = lastfree;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	615a      	str	r2, [r3, #20]
}
 800d440:	bf00      	nop
 800d442:	371c      	adds	r7, #28
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <luaH_resize>:
** into the table, initializes the new part of the array (if any) with
** nils and reinserts the elements of the old hash back into the new
** parts of the table.
*/
void luaH_resize (lua_State *L, Table *t, unsigned int newasize,
                                          unsigned int nhsize) {
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b090      	sub	sp, #64	; 0x40
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
 800d458:	603b      	str	r3, [r7, #0]
  unsigned int i;
  Table newt;  /* to keep the new hash part */
  unsigned int oldasize = setlimittosize(t);
 800d45a:	68b8      	ldr	r0, [r7, #8]
 800d45c:	f7ff fdd6 	bl	800d00c <setlimittosize>
 800d460:	63b8      	str	r0, [r7, #56]	; 0x38
  TValue *newarray;
  /* create new hash part with appropriate size into 'newt' */
  setnodevector(L, &newt, nhsize);
 800d462:	f107 0314 	add.w	r3, r7, #20
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	4619      	mov	r1, r3
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f7ff ff2a 	bl	800d2c4 <setnodevector>
  if (newasize < oldasize) {  /* will array shrink? */
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d474:	429a      	cmp	r2, r3
 800d476:	d232      	bcs.n	800d4de <luaH_resize+0x92>
    t->alimit = newasize;  /* pretend array has new size... */
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	609a      	str	r2, [r3, #8]
    exchangehashpart(t, &newt);  /* and new hash */
 800d47e:	f107 0314 	add.w	r3, r7, #20
 800d482:	4619      	mov	r1, r3
 800d484:	68b8      	ldr	r0, [r7, #8]
 800d486:	f7ff ffb8 	bl	800d3fa <exchangehashpart>
    /* re-insert into the new hash the elements from vanishing slice */
    for (i = newasize; i < oldasize; i++) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d48e:	e019      	b.n	800d4c4 <luaH_resize+0x78>
      if (!isempty(&t->array[i]))
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	68da      	ldr	r2, [r3, #12]
 800d494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d496:	00db      	lsls	r3, r3, #3
 800d498:	4413      	add	r3, r2
 800d49a:	791b      	ldrb	r3, [r3, #4]
 800d49c:	f003 030f 	and.w	r3, r3, #15
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00c      	beq.n	800d4be <luaH_resize+0x72>
        luaH_setint(L, t, i + 1, &t->array[i]);
 800d4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	68da      	ldr	r2, [r3, #12]
 800d4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b0:	00db      	lsls	r3, r3, #3
 800d4b2:	4413      	add	r3, r2
 800d4b4:	460a      	mov	r2, r1
 800d4b6:	68b9      	ldr	r1, [r7, #8]
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f000 fbab 	bl	800dc14 <luaH_setint>
    for (i = newasize; i < oldasize; i++) {
 800d4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d3e1      	bcc.n	800d490 <luaH_resize+0x44>
    }
    t->alimit = oldasize;  /* restore current size... */
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4d0:	609a      	str	r2, [r3, #8]
    exchangehashpart(t, &newt);  /* and hash (in case of errors) */
 800d4d2:	f107 0314 	add.w	r3, r7, #20
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	68b8      	ldr	r0, [r7, #8]
 800d4da:	f7ff ff8e 	bl	800d3fa <exchangehashpart>
  }
  /* allocate new array */
  newarray = luaM_reallocvector(L, t->array, oldasize, newasize, TValue);
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	68d9      	ldr	r1, [r3, #12]
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e4:	00da      	lsls	r2, r3, #3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	00db      	lsls	r3, r3, #3
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7fd fda2 	bl	800b034 <luaM_realloc_>
 800d4f0:	6378      	str	r0, [r7, #52]	; 0x34
  if (l_unlikely(newarray == NULL && newasize > 0)) {  /* allocation failed? */
 800d4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d104      	bne.n	800d502 <luaH_resize+0xb6>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <luaH_resize+0xb6>
 800d4fe:	2301      	movs	r3, #1
 800d500:	e000      	b.n	800d504 <luaH_resize+0xb8>
 800d502:	2300      	movs	r3, #0
 800d504:	2b00      	cmp	r3, #0
 800d506:	bf14      	ite	ne
 800d508:	2301      	movne	r3, #1
 800d50a:	2300      	moveq	r3, #0
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <luaH_resize+0xda>
    freehash(L, &newt);  /* release new hash part */
 800d512:	f107 0314 	add.w	r3, r7, #20
 800d516:	4619      	mov	r1, r3
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f7ff fdcc 	bl	800d0b6 <freehash>
    luaM_error(L);  /* raise error (with array unchanged) */
 800d51e:	2104      	movs	r1, #4
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f7f9 ffe7 	bl	80074f4 <luaD_throw>
  }
  /* allocation ok; initialize new part of the array */
  exchangehashpart(t, &newt);  /* 't' has the new hash ('newt' has the old) */
 800d526:	f107 0314 	add.w	r3, r7, #20
 800d52a:	4619      	mov	r1, r3
 800d52c:	68b8      	ldr	r0, [r7, #8]
 800d52e:	f7ff ff64 	bl	800d3fa <exchangehashpart>
  t->array = newarray;  /* set new array part */
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d536:	60da      	str	r2, [r3, #12]
  t->alimit = newasize;
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	609a      	str	r2, [r3, #8]
  for (i = oldasize; i < newasize; i++)  /* clear new slice of the array */
 800d53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d542:	e009      	b.n	800d558 <luaH_resize+0x10c>
     setempty(&t->array[i]);
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	68da      	ldr	r2, [r3, #12]
 800d548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	4413      	add	r3, r2
 800d54e:	2210      	movs	r2, #16
 800d550:	711a      	strb	r2, [r3, #4]
  for (i = oldasize; i < newasize; i++)  /* clear new slice of the array */
 800d552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d554:	3301      	adds	r3, #1
 800d556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d3f1      	bcc.n	800d544 <luaH_resize+0xf8>
  /* re-insert elements from old hash part into new parts */
  reinsert(L, &newt, t);  /* 'newt' now has the old hash */
 800d560:	f107 0314 	add.w	r3, r7, #20
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	4619      	mov	r1, r3
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7ff ff0b 	bl	800d384 <reinsert>
  freehash(L, &newt);  /* free old hash part */
 800d56e:	f107 0314 	add.w	r3, r7, #20
 800d572:	4619      	mov	r1, r3
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff fd9e 	bl	800d0b6 <freehash>
}
 800d57a:	bf00      	nop
 800d57c:	3740      	adds	r7, #64	; 0x40
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <luaH_resizearray>:


void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {
 800d582:	b580      	push	{r7, lr}
 800d584:	b086      	sub	sp, #24
 800d586:	af00      	add	r7, sp, #0
 800d588:	60f8      	str	r0, [r7, #12]
 800d58a:	60b9      	str	r1, [r7, #8]
 800d58c:	607a      	str	r2, [r7, #4]
  int nsize = allocsizenode(t);
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	695b      	ldr	r3, [r3, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d005      	beq.n	800d5a2 <luaH_resizearray+0x20>
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	79db      	ldrb	r3, [r3, #7]
 800d59a:	461a      	mov	r2, r3
 800d59c:	2301      	movs	r3, #1
 800d59e:	4093      	lsls	r3, r2
 800d5a0:	e000      	b.n	800d5a4 <luaH_resizearray+0x22>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	617b      	str	r3, [r7, #20]
  luaH_resize(L, t, nasize, nsize);
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	68b9      	ldr	r1, [r7, #8]
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f7ff ff4d 	bl	800d44c <luaH_resize>
}
 800d5b2:	bf00      	nop
 800d5b4:	3718      	adds	r7, #24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <rehash>:

/*
** nums[i] = number of keys 'k' where 2^(i - 1) < k <= 2^i
*/
static void rehash (lua_State *L, Table *t, const TValue *ek) {
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b0a8      	sub	sp, #160	; 0xa0
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	607a      	str	r2, [r7, #4]
  unsigned int asize;  /* optimal size for array part */
  unsigned int na;  /* number of keys in the array part */
  unsigned int nums[MAXABITS + 1];
  int i;
  int totaluse;
  for (i = 0; i <= MAXABITS; i++) nums[i] = 0;  /* reset counts */
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5cc:	e00c      	b.n	800d5e8 <rehash+0x2e>
 800d5ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	33a0      	adds	r3, #160	; 0xa0
 800d5d6:	443b      	add	r3, r7
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f843 2c90 	str.w	r2, [r3, #-144]
 800d5de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5ec:	2b1f      	cmp	r3, #31
 800d5ee:	ddee      	ble.n	800d5ce <rehash+0x14>
  setlimittosize(t);
 800d5f0:	68b8      	ldr	r0, [r7, #8]
 800d5f2:	f7ff fd0b 	bl	800d00c <setlimittosize>
  na = numusearray(t, nums);  /* count keys in array part */
 800d5f6:	f107 0310 	add.w	r3, r7, #16
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	68b8      	ldr	r0, [r7, #8]
 800d5fe:	f7ff fdc9 	bl	800d194 <numusearray>
 800d602:	4603      	mov	r3, r0
 800d604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  totaluse = na;  /* all those keys are integer keys */
 800d608:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d60c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  totaluse += numusehash(t, nums, &na);  /* count keys in hash part */
 800d610:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800d614:	f107 0310 	add.w	r3, r7, #16
 800d618:	4619      	mov	r1, r3
 800d61a:	68b8      	ldr	r0, [r7, #8]
 800d61c:	f7ff fe13 	bl	800d246 <numusehash>
 800d620:	4602      	mov	r2, r0
 800d622:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d626:	4413      	add	r3, r2
 800d628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* count extra key */
  if (ttisinteger(ek))
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	791b      	ldrb	r3, [r3, #4]
 800d630:	2b03      	cmp	r3, #3
 800d632:	d10e      	bne.n	800d652 <rehash+0x98>
    na += countint(ivalue(ek), nums);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f107 0210 	add.w	r2, r7, #16
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff fd8b 	bl	800d15a <countint>
 800d644:	4603      	mov	r3, r0
 800d646:	461a      	mov	r2, r3
 800d648:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d64c:	4413      	add	r3, r2
 800d64e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  totaluse++;
 800d652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d656:	3301      	adds	r3, #1
 800d658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* compute new size for array part */
  asize = computesizes(nums, &na);
 800d65c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800d660:	f107 0310 	add.w	r3, r7, #16
 800d664:	4611      	mov	r1, r2
 800d666:	4618      	mov	r0, r3
 800d668:	f7ff fd3d 	bl	800d0e6 <computesizes>
 800d66c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  /* resize the table to new computed sizes */
  luaH_resize(L, t, asize, totaluse - na);
 800d670:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d67e:	68b9      	ldr	r1, [r7, #8]
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f7ff fee3 	bl	800d44c <luaH_resize>
}
 800d686:	bf00      	nop
 800d688:	37a0      	adds	r7, #160	; 0xa0
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <luaH_new>:
/*
** }=============================================================
*/


Table *luaH_new (lua_State *L) {
 800d68e:	b580      	push	{r7, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
  GCObject *o = luaC_newobj(L, LUA_VTABLE, sizeof(Table));
 800d696:	2220      	movs	r2, #32
 800d698:	2105      	movs	r1, #5
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7fb fa93 	bl	8008bc6 <luaC_newobj>
 800d6a0:	60f8      	str	r0, [r7, #12]
  Table *t = gco2t(o);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	60bb      	str	r3, [r7, #8]
  t->metatable = NULL;
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	619a      	str	r2, [r3, #24]
  t->flags = cast_byte(maskflags);  /* table has no metamethod fields */
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	223f      	movs	r2, #63	; 0x3f
 800d6b0:	719a      	strb	r2, [r3, #6]
  t->array = NULL;
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	60da      	str	r2, [r3, #12]
  t->alimit = 0;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	609a      	str	r2, [r3, #8]
  setnodevector(L, t, 0);
 800d6be:	2200      	movs	r2, #0
 800d6c0:	68b9      	ldr	r1, [r7, #8]
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7ff fdfe 	bl	800d2c4 <setnodevector>
  return t;
 800d6c8:	68bb      	ldr	r3, [r7, #8]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <luaH_free>:


void luaH_free (lua_State *L, Table *t) {
 800d6d2:	b590      	push	{r4, r7, lr}
 800d6d4:	b083      	sub	sp, #12
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
 800d6da:	6039      	str	r1, [r7, #0]
  freehash(L, t);
 800d6dc:	6839      	ldr	r1, [r7, #0]
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff fce9 	bl	800d0b6 <freehash>
  luaM_freearray(L, t->array, luaH_realasize(t));
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	68dc      	ldr	r4, [r3, #12]
 800d6e8:	6838      	ldr	r0, [r7, #0]
 800d6ea:	f7ff fc3b 	bl	800cf64 <luaH_realasize>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	00db      	lsls	r3, r3, #3
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7fd fc56 	bl	800afa8 <luaM_free_>
  luaM_free(L, t);
 800d6fc:	2220      	movs	r2, #32
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7fd fc51 	bl	800afa8 <luaM_free_>
}
 800d706:	bf00      	nop
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd90      	pop	{r4, r7, pc}

0800d70e <getfreepos>:


static Node *getfreepos (Table *t) {
 800d70e:	b480      	push	{r7}
 800d710:	b083      	sub	sp, #12
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
  if (!isdummy(t)) {
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d014      	beq.n	800d748 <getfreepos+0x3a>
    while (t->lastfree > t->node) {
 800d71e:	e00d      	b.n	800d73c <getfreepos+0x2e>
      t->lastfree--;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	f1a3 0210 	sub.w	r2, r3, #16
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	615a      	str	r2, [r3, #20]
      if (keyisnil(t->lastfree))
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	695b      	ldr	r3, [r3, #20]
 800d730:	795b      	ldrb	r3, [r3, #5]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d102      	bne.n	800d73c <getfreepos+0x2e>
        return t->lastfree;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	695b      	ldr	r3, [r3, #20]
 800d73a:	e006      	b.n	800d74a <getfreepos+0x3c>
    while (t->lastfree > t->node) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	695a      	ldr	r2, [r3, #20]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	429a      	cmp	r2, r3
 800d746:	d8eb      	bhi.n	800d720 <getfreepos+0x12>
    }
  }
  return NULL;  /* could not find a free place */
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
	...

0800d758 <luaH_newkey>:
** position is free. If not, check whether colliding node is in its main
** position or not: if it is not, move colliding node to an empty place and
** put new key in its main position; otherwise (colliding node is in its main
** position), new key goes to an empty position.
*/
void luaH_newkey (lua_State *L, Table *t, const TValue *key, TValue *value) {
 800d758:	b590      	push	{r4, r7, lr}
 800d75a:	b091      	sub	sp, #68	; 0x44
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
 800d764:	603b      	str	r3, [r7, #0]
  Node *mp;
  TValue aux;
  if (l_unlikely(ttisnil(key)))
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	791b      	ldrb	r3, [r3, #4]
 800d76a:	f003 030f 	and.w	r3, r3, #15
 800d76e:	2b00      	cmp	r3, #0
 800d770:	bf0c      	ite	eq
 800d772:	2301      	moveq	r3, #1
 800d774:	2300      	movne	r3, #0
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d003      	beq.n	800d784 <luaH_newkey+0x2c>
    luaG_runerror(L, "table index is nil");
 800d77c:	4971      	ldr	r1, [pc, #452]	; (800d944 <luaH_newkey+0x1ec>)
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f7f9 fd1d 	bl	80071be <luaG_runerror>
  else if (ttisfloat(key)) {
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	791b      	ldrb	r3, [r3, #4]
 800d788:	2b13      	cmp	r3, #19
 800d78a:	d12c      	bne.n	800d7e6 <luaH_newkey+0x8e>
    lua_Number f = fltvalue(key);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	637b      	str	r3, [r7, #52]	; 0x34
    lua_Integer k;
    if (luaV_flttointeger(f, &k, F2Ieq)) {  /* does key fit in an integer? */
 800d792:	f107 0310 	add.w	r3, r7, #16
 800d796:	2100      	movs	r1, #0
 800d798:	4618      	mov	r0, r3
 800d79a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800d79e:	f000 ffbd 	bl	800e71c <luaV_flttointeger>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00c      	beq.n	800d7c2 <luaH_newkey+0x6a>
      setivalue(&aux, k);
 800d7a8:	f107 0314 	add.w	r3, r7, #20
 800d7ac:	633b      	str	r3, [r7, #48]	; 0x30
 800d7ae:	693a      	ldr	r2, [r7, #16]
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	2203      	movs	r2, #3
 800d7b8:	711a      	strb	r2, [r3, #4]
      key = &aux;  /* insert it as an integer */
 800d7ba:	f107 0314 	add.w	r3, r7, #20
 800d7be:	607b      	str	r3, [r7, #4]
 800d7c0:	e011      	b.n	800d7e6 <luaH_newkey+0x8e>
    }
    else if (l_unlikely(luai_numisnan(f)))
 800d7c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d7c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d7ca:	eeb4 7a67 	vcmp.f32	s14, s15
 800d7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d2:	bf14      	ite	ne
 800d7d4:	2301      	movne	r3, #1
 800d7d6:	2300      	moveq	r3, #0
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d003      	beq.n	800d7e6 <luaH_newkey+0x8e>
      luaG_runerror(L, "table index is NaN");
 800d7de:	495a      	ldr	r1, [pc, #360]	; (800d948 <luaH_newkey+0x1f0>)
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f7f9 fcec 	bl	80071be <luaG_runerror>
  }
  if (ttisnil(value))
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	791b      	ldrb	r3, [r3, #4]
 800d7ea:	f003 030f 	and.w	r3, r3, #15
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f000 80a4 	beq.w	800d93c <luaH_newkey+0x1e4>
    return;  /* do not insert nil values */
  mp = mainpositionTV(t, key);
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	68b8      	ldr	r0, [r7, #8]
 800d7f8:	f7ff fa20 	bl	800cc3c <mainpositionTV>
 800d7fc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (!isempty(gval(mp)) || isdummy(t)) {  /* main position is taken? */
 800d7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d800:	791b      	ldrb	r3, [r3, #4]
 800d802:	f003 030f 	and.w	r3, r3, #15
 800d806:	2b00      	cmp	r3, #0
 800d808:	d103      	bne.n	800d812 <luaH_newkey+0xba>
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d163      	bne.n	800d8da <luaH_newkey+0x182>
    Node *othern;
    Node *f = getfreepos(t);  /* get a free place */
 800d812:	68b8      	ldr	r0, [r7, #8]
 800d814:	f7ff ff7b 	bl	800d70e <getfreepos>
 800d818:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (f == NULL) {  /* cannot find a free place? */
 800d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10b      	bne.n	800d838 <luaH_newkey+0xe0>
      rehash(L, t, key);  /* grow table */
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f7ff fec8 	bl	800d5ba <rehash>
      /* whatever called 'newkey' takes care of TM cache */
      luaH_set(L, t, key, value);  /* insert key into grown table */
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	68b9      	ldr	r1, [r7, #8]
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f000 f9d7 	bl	800dbe4 <luaH_set>
      return;
 800d836:	e082      	b.n	800d93e <luaH_newkey+0x1e6>
    }
    lua_assert(!isdummy(t));
    othern = mainpositionfromnode(t, mp);
 800d838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d83a:	68b8      	ldr	r0, [r7, #8]
 800d83c:	f7ff fad6 	bl	800cdec <mainpositionfromnode>
 800d840:	63b8      	str	r0, [r7, #56]	; 0x38
    if (othern != mp) {  /* is colliding node out of its main position? */
 800d842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d846:	429a      	cmp	r2, r3
 800d848:	d02f      	beq.n	800d8aa <luaH_newkey+0x152>
      /* yes; move colliding node into free position */
      while (othern + gnext(othern) != mp)  /* find previous */
 800d84a:	e005      	b.n	800d858 <luaH_newkey+0x100>
        othern += gnext(othern);
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	011b      	lsls	r3, r3, #4
 800d852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d854:	4413      	add	r3, r2
 800d856:	63bb      	str	r3, [r7, #56]	; 0x38
      while (othern + gnext(othern) != mp)  /* find previous */
 800d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	011b      	lsls	r3, r3, #4
 800d85e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d860:	4413      	add	r3, r2
 800d862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d864:	429a      	cmp	r2, r3
 800d866:	d1f1      	bne.n	800d84c <luaH_newkey+0xf4>
      gnext(othern) = cast_int(f - othern);  /* rechain to point to 'f' */
 800d868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86c:	1ad3      	subs	r3, r2, r3
 800d86e:	111b      	asrs	r3, r3, #4
 800d870:	461a      	mov	r2, r3
 800d872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d874:	609a      	str	r2, [r3, #8]
      *f = *mp;  /* copy colliding node into free pos. (mp->next also goes) */
 800d876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d87a:	4614      	mov	r4, r2
 800d87c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d87e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      if (gnext(mp) != 0) {
 800d882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00b      	beq.n	800d8a2 <luaH_newkey+0x14a>
        gnext(f) += cast_int(mp - f);  /* correct 'next' */
 800d88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d892:	1a8a      	subs	r2, r1, r2
 800d894:	1112      	asrs	r2, r2, #4
 800d896:	441a      	add	r2, r3
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	609a      	str	r2, [r3, #8]
        gnext(mp) = 0;  /* now 'mp' is free */
 800d89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d89e:	2200      	movs	r2, #0
 800d8a0:	609a      	str	r2, [r3, #8]
      }
      setempty(gval(mp));
 800d8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a4:	2210      	movs	r2, #16
 800d8a6:	711a      	strb	r2, [r3, #4]
 800d8a8:	e017      	b.n	800d8da <luaH_newkey+0x182>
    }
    else {  /* colliding node is in its own main position */
      /* new node will go into free position */
      if (gnext(mp) != 0)
 800d8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ac:	689b      	ldr	r3, [r3, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00a      	beq.n	800d8c8 <luaH_newkey+0x170>
        gnext(f) = cast_int((mp + gnext(mp)) - f);  /* chain new position */
 800d8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b4:	689b      	ldr	r3, [r3, #8]
 800d8b6:	011b      	lsls	r3, r3, #4
 800d8b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8ba:	441a      	add	r2, r3
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	111b      	asrs	r3, r3, #4
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	609a      	str	r2, [r3, #8]
      else lua_assert(gnext(f) == 0);
      gnext(mp) = cast_int(f - mp);
 800d8c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	111b      	asrs	r3, r3, #4
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d4:	609a      	str	r2, [r3, #8]
      mp = f;
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  setnodekey(L, mp, key);
 800d8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8e6:	6812      	ldr	r2, [r2, #0]
 800d8e8:	60da      	str	r2, [r3, #12]
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	791a      	ldrb	r2, [r3, #4]
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	715a      	strb	r2, [r3, #5]
  luaC_barrierback(L, obj2gco(t), key);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	791b      	ldrb	r3, [r3, #4]
 800d8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d011      	beq.n	800d922 <luaH_newkey+0x1ca>
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	795b      	ldrb	r3, [r3, #5]
 800d902:	f003 0320 	and.w	r3, r3, #32
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00b      	beq.n	800d922 <luaH_newkey+0x1ca>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	795b      	ldrb	r3, [r3, #5]
 800d910:	f003 0318 	and.w	r3, r3, #24
 800d914:	2b00      	cmp	r3, #0
 800d916:	d004      	beq.n	800d922 <luaH_newkey+0x1ca>
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	4619      	mov	r1, r3
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f7fb f8ef 	bl	8008b00 <luaC_barrierback_>
  lua_assert(isempty(gval(mp)));
  setobj2t(L, gval(mp), value);
 800d922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d924:	623b      	str	r3, [r7, #32]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	61fb      	str	r3, [r7, #28]
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	69fa      	ldr	r2, [r7, #28]
 800d92e:	6812      	ldr	r2, [r2, #0]
 800d930:	601a      	str	r2, [r3, #0]
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	791a      	ldrb	r2, [r3, #4]
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	711a      	strb	r2, [r3, #4]
 800d93a:	e000      	b.n	800d93e <luaH_newkey+0x1e6>
    return;  /* do not insert nil values */
 800d93c:	bf00      	nop
}
 800d93e:	3744      	adds	r7, #68	; 0x44
 800d940:	46bd      	mov	sp, r7
 800d942:	bd90      	pop	{r4, r7, pc}
 800d944:	0801ef24 	.word	0x0801ef24
 800d948:	0801ef38 	.word	0x0801ef38

0800d94c <luaH_getint>:
** the real size of the array, key still can be in the array part. In
** this case, try to avoid a call to 'luaH_realasize' when key is just
** one more than the limit (so that it can be incremented without
** changing the real size of the array).
*/
const TValue *luaH_getint (Table *t, lua_Integer key) {
 800d94c:	b590      	push	{r4, r7, lr}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  if (l_castS2U(key) - 1u < t->alimit)  /* 'key' in [1, t->alimit]? */
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	1e5a      	subs	r2, r3, #1
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d208      	bcs.n	800d974 <luaH_getint+0x28>
    return &t->array[key - 1];
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68da      	ldr	r2, [r3, #12]
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d96c:	3b01      	subs	r3, #1
 800d96e:	00db      	lsls	r3, r3, #3
 800d970:	4413      	add	r3, r2
 800d972:	e044      	b.n	800d9fe <luaH_getint+0xb2>
  else if (!limitequalsasize(t) &&  /* key still may be in the array part? */
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	799b      	ldrb	r3, [r3, #6]
 800d978:	b25b      	sxtb	r3, r3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	da21      	bge.n	800d9c2 <luaH_getint+0x76>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	689a      	ldr	r2, [r3, #8]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	3b01      	subs	r3, #1
 800d988:	4013      	ands	r3, r2
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d019      	beq.n	800d9c2 <luaH_getint+0x76>
           (l_castS2U(key) == t->alimit + 1 ||
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	683b      	ldr	r3, [r7, #0]
  else if (!limitequalsasize(t) &&  /* key still may be in the array part? */
 800d996:	429a      	cmp	r2, r3
 800d998:	d007      	beq.n	800d9aa <luaH_getint+0x5e>
            l_castS2U(key) - 1u < luaH_realasize(t))) {
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	1e5c      	subs	r4, r3, #1
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff fae0 	bl	800cf64 <luaH_realasize>
 800d9a4:	4603      	mov	r3, r0
           (l_castS2U(key) == t->alimit + 1 ||
 800d9a6:	429c      	cmp	r4, r3
 800d9a8:	d20b      	bcs.n	800d9c2 <luaH_getint+0x76>
    t->alimit = cast_uint(key);  /* probably '#t' is here now */
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	609a      	str	r2, [r3, #8]
    return &t->array[key - 1];
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	4413      	add	r3, r2
 800d9c0:	e01d      	b.n	800d9fe <luaH_getint+0xb2>
  }
  else {
    Node *n = hashint(t, key);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7ff f8af 	bl	800cb28 <hashint>
 800d9ca:	60f8      	str	r0, [r7, #12]
    for (;;) {  /* check whether 'key' is somewhere in the chain */
      if (keyisinteger(n) && keyival(n) == key)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	795b      	ldrb	r3, [r3, #5]
 800d9d0:	2b03      	cmp	r3, #3
 800d9d2:	d106      	bne.n	800d9e2 <luaH_getint+0x96>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d101      	bne.n	800d9e2 <luaH_getint+0x96>
        return gval(n);  /* that's it */
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	e00d      	b.n	800d9fe <luaH_getint+0xb2>
      else {
        int nx = gnext(n);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	60bb      	str	r3, [r7, #8]
        if (nx == 0) break;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d005      	beq.n	800d9fa <luaH_getint+0xae>
        n += nx;
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	011b      	lsls	r3, r3, #4
 800d9f2:	68fa      	ldr	r2, [r7, #12]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	60fb      	str	r3, [r7, #12]
      if (keyisinteger(n) && keyival(n) == key)
 800d9f8:	e7e8      	b.n	800d9cc <luaH_getint+0x80>
        if (nx == 0) break;
 800d9fa:	bf00      	nop
      }
    }
    return &absentkey;
 800d9fc:	4b02      	ldr	r3, [pc, #8]	; (800da08 <luaH_getint+0xbc>)
  }
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	bd90      	pop	{r4, r7, pc}
 800da06:	bf00      	nop
 800da08:	0801f51c 	.word	0x0801f51c

0800da0c <luaH_getshortstr>:


/*
** search function for short strings
*/
const TValue *luaH_getshortstr (Table *t, TString *key) {
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  Node *n = hashstr(t, key);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	691a      	ldr	r2, [r3, #16]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	79c9      	ldrb	r1, [r1, #7]
 800da22:	4608      	mov	r0, r1
 800da24:	2101      	movs	r1, #1
 800da26:	4081      	lsls	r1, r0
 800da28:	3901      	subs	r1, #1
 800da2a:	400b      	ands	r3, r1
 800da2c:	011b      	lsls	r3, r3, #4
 800da2e:	4413      	add	r3, r2
 800da30:	60fb      	str	r3, [r7, #12]
  lua_assert(key->tt == LUA_VSHRSTR);
  for (;;) {  /* check whether 'key' is somewhere in the chain */
    if (keyisshrstr(n) && eqshrstr(keystrval(n), key))
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	795b      	ldrb	r3, [r3, #5]
 800da36:	2b44      	cmp	r3, #68	; 0x44
 800da38:	d107      	bne.n	800da4a <luaH_getshortstr+0x3e>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	461a      	mov	r2, r3
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	4293      	cmp	r3, r2
 800da44:	d101      	bne.n	800da4a <luaH_getshortstr+0x3e>
      return gval(n);  /* that's it */
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	e00d      	b.n	800da66 <luaH_getshortstr+0x5a>
    else {
      int nx = gnext(n);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	60bb      	str	r3, [r7, #8]
      if (nx == 0)
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <luaH_getshortstr+0x4e>
        return &absentkey;  /* not found */
 800da56:	4b07      	ldr	r3, [pc, #28]	; (800da74 <luaH_getshortstr+0x68>)
 800da58:	e005      	b.n	800da66 <luaH_getshortstr+0x5a>
      n += nx;
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	011b      	lsls	r3, r3, #4
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	4413      	add	r3, r2
 800da62:	60fb      	str	r3, [r7, #12]
    if (keyisshrstr(n) && eqshrstr(keystrval(n), key))
 800da64:	e7e5      	b.n	800da32 <luaH_getshortstr+0x26>
    }
  }
}
 800da66:	4618      	mov	r0, r3
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	0801f51c 	.word	0x0801f51c

0800da78 <luaH_getstr>:


const TValue *luaH_getstr (Table *t, TString *key) {
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  if (key->tt == LUA_VSHRSTR)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	791b      	ldrb	r3, [r3, #4]
 800da86:	2b04      	cmp	r3, #4
 800da88:	d105      	bne.n	800da96 <luaH_getstr+0x1e>
    return luaH_getshortstr(t, key);
 800da8a:	6839      	ldr	r1, [r7, #0]
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7ff ffbd 	bl	800da0c <luaH_getshortstr>
 800da92:	4603      	mov	r3, r0
 800da94:	e016      	b.n	800dac4 <luaH_getstr+0x4c>
  else {  /* for long strings, use generic case */
    TValue ko;
    setsvalue(cast(lua_State *, NULL), &ko, key);
 800da96:	f107 0308 	add.w	r3, r7, #8
 800da9a:	617b      	str	r3, [r7, #20]
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	613b      	str	r3, [r7, #16]
 800daa0:	693a      	ldr	r2, [r7, #16]
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	791b      	ldrb	r3, [r3, #4]
 800daaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	711a      	strb	r2, [r3, #4]
    return getgeneric(t, &ko, 0);
 800dab4:	f107 0308 	add.w	r3, r7, #8
 800dab8:	2200      	movs	r2, #0
 800daba:	4619      	mov	r1, r3
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f7ff fabd 	bl	800d03c <getgeneric>
 800dac2:	4603      	mov	r3, r0
  }
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <luaH_get>:


/*
** main search function
*/
const TValue *luaH_get (Table *t, const TValue *key) {
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  switch (ttypetag(key)) {
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	791b      	ldrb	r3, [r3, #4]
 800dada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dade:	2b13      	cmp	r3, #19
 800dae0:	d851      	bhi.n	800db86 <luaH_get+0xba>
 800dae2:	a201      	add	r2, pc, #4	; (adr r2, 800dae8 <luaH_get+0x1c>)
 800dae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae8:	0800db59 	.word	0x0800db59
 800daec:	0800db87 	.word	0x0800db87
 800daf0:	0800db87 	.word	0x0800db87
 800daf4:	0800db49 	.word	0x0800db49
 800daf8:	0800db39 	.word	0x0800db39
 800dafc:	0800db87 	.word	0x0800db87
 800db00:	0800db87 	.word	0x0800db87
 800db04:	0800db87 	.word	0x0800db87
 800db08:	0800db87 	.word	0x0800db87
 800db0c:	0800db87 	.word	0x0800db87
 800db10:	0800db87 	.word	0x0800db87
 800db14:	0800db87 	.word	0x0800db87
 800db18:	0800db87 	.word	0x0800db87
 800db1c:	0800db87 	.word	0x0800db87
 800db20:	0800db87 	.word	0x0800db87
 800db24:	0800db87 	.word	0x0800db87
 800db28:	0800db87 	.word	0x0800db87
 800db2c:	0800db87 	.word	0x0800db87
 800db30:	0800db87 	.word	0x0800db87
 800db34:	0800db5d 	.word	0x0800db5d
    case LUA_VSHRSTR: return luaH_getshortstr(t, tsvalue(key));
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4619      	mov	r1, r3
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff ff64 	bl	800da0c <luaH_getshortstr>
 800db44:	4603      	mov	r3, r0
 800db46:	e024      	b.n	800db92 <luaH_get+0xc6>
    case LUA_VNUMINT: return luaH_getint(t, ivalue(key));
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4619      	mov	r1, r3
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff fefc 	bl	800d94c <luaH_getint>
 800db54:	4603      	mov	r3, r0
 800db56:	e01c      	b.n	800db92 <luaH_get+0xc6>
    case LUA_VNIL: return &absentkey;
 800db58:	4b10      	ldr	r3, [pc, #64]	; (800db9c <luaH_get+0xd0>)
 800db5a:	e01a      	b.n	800db92 <luaH_get+0xc6>
    case LUA_VNUMFLT: {
      lua_Integer k;
      if (luaV_flttointeger(fltvalue(key), &k, F2Ieq)) /* integral index? */
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	edd3 7a00 	vldr	s15, [r3]
 800db62:	f107 030c 	add.w	r3, r7, #12
 800db66:	2100      	movs	r1, #0
 800db68:	4618      	mov	r0, r3
 800db6a:	eeb0 0a67 	vmov.f32	s0, s15
 800db6e:	f000 fdd5 	bl	800e71c <luaV_flttointeger>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d006      	beq.n	800db86 <luaH_get+0xba>
        return luaH_getint(t, k);  /* use specialized version */
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff fee5 	bl	800d94c <luaH_getint>
 800db82:	4603      	mov	r3, r0
 800db84:	e005      	b.n	800db92 <luaH_get+0xc6>
      /* else... */
    }  /* FALLTHROUGH */
    default:
      return getgeneric(t, key, 0);
 800db86:	2200      	movs	r2, #0
 800db88:	6839      	ldr	r1, [r7, #0]
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff fa56 	bl	800d03c <getgeneric>
 800db90:	4603      	mov	r3, r0
  }
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	0801f51c 	.word	0x0801f51c

0800dba0 <luaH_finishset>:
** should have been (the result of a previous "get table").
** Beware: when using this function you probably need to check a GC
** barrier and invalidate the TM cache.
*/
void luaH_finishset (lua_State *L, Table *t, const TValue *key,
                                   const TValue *slot, TValue *value) {
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	60b9      	str	r1, [r7, #8]
 800dbaa:	607a      	str	r2, [r7, #4]
 800dbac:	603b      	str	r3, [r7, #0]
  if (isabstkey(slot))
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	791b      	ldrb	r3, [r3, #4]
 800dbb2:	2b20      	cmp	r3, #32
 800dbb4:	d106      	bne.n	800dbc4 <luaH_finishset+0x24>
    luaH_newkey(L, t, key, value);
 800dbb6:	6a3b      	ldr	r3, [r7, #32]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	68b9      	ldr	r1, [r7, #8]
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f7ff fdcb 	bl	800d758 <luaH_newkey>
  else
    setobj2t(L, cast(TValue *, slot), value);
}
 800dbc2:	e00b      	b.n	800dbdc <luaH_finishset+0x3c>
    setobj2t(L, cast(TValue *, slot), value);
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	617b      	str	r3, [r7, #20]
 800dbc8:	6a3b      	ldr	r3, [r7, #32]
 800dbca:	613b      	str	r3, [r7, #16]
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	693a      	ldr	r2, [r7, #16]
 800dbd0:	6812      	ldr	r2, [r2, #0]
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	791a      	ldrb	r2, [r3, #4]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	711a      	strb	r2, [r3, #4]
}
 800dbdc:	bf00      	nop
 800dbde:	3718      	adds	r7, #24
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <luaH_set>:

/*
** beware: when using this function you probably need to check a GC
** barrier and invalidate the TM cache.
*/
void luaH_set (lua_State *L, Table *t, const TValue *key, TValue *value) {
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af02      	add	r7, sp, #8
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
  const TValue *slot = luaH_get(t, key);
 800dbf2:	6879      	ldr	r1, [r7, #4]
 800dbf4:	68b8      	ldr	r0, [r7, #8]
 800dbf6:	f7ff ff69 	bl	800dacc <luaH_get>
 800dbfa:	6178      	str	r0, [r7, #20]
  luaH_finishset(L, t, key, slot, value);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	68b9      	ldr	r1, [r7, #8]
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f7ff ffca 	bl	800dba0 <luaH_finishset>
}
 800dc0c:	bf00      	nop
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <luaH_setint>:


void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b08a      	sub	sp, #40	; 0x28
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	603b      	str	r3, [r7, #0]
  const TValue *p = luaH_getint(t, key);
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	68b8      	ldr	r0, [r7, #8]
 800dc26:	f7ff fe91 	bl	800d94c <luaH_getint>
 800dc2a:	6278      	str	r0, [r7, #36]	; 0x24
  if (isabstkey(p)) {
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	791b      	ldrb	r3, [r3, #4]
 800dc30:	2b20      	cmp	r3, #32
 800dc32:	d110      	bne.n	800dc56 <luaH_setint+0x42>
    TValue k;
    setivalue(&k, key);
 800dc34:	f107 0310 	add.w	r3, r7, #16
 800dc38:	61bb      	str	r3, [r7, #24]
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	601a      	str	r2, [r3, #0]
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	2203      	movs	r2, #3
 800dc44:	711a      	strb	r2, [r3, #4]
    luaH_newkey(L, t, &k, value);
 800dc46:	f107 0210 	add.w	r2, r7, #16
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	68b9      	ldr	r1, [r7, #8]
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f7ff fd82 	bl	800d758 <luaH_newkey>
  }
  else
    setobj2t(L, cast(TValue *, p), value);
}
 800dc54:	e00b      	b.n	800dc6e <luaH_setint+0x5a>
    setobj2t(L, cast(TValue *, p), value);
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	623b      	str	r3, [r7, #32]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	61fb      	str	r3, [r7, #28]
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	69fa      	ldr	r2, [r7, #28]
 800dc62:	6812      	ldr	r2, [r2, #0]
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	791a      	ldrb	r2, [r3, #4]
 800dc6a:	6a3b      	ldr	r3, [r7, #32]
 800dc6c:	711a      	strb	r2, [r3, #4]
}
 800dc6e:	bf00      	nop
 800dc70:	3728      	adds	r7, #40	; 0x28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <hash_search>:
** is larger or equal to 'i', but it cannot be equal because it is
** absent while 'i' is present; so 'j > i'.) Otherwise, 'j' is a
** boundary. ('j + 1' cannot be a present integer key because it is
** not a valid integer in Lua.)
*/
static lua_Unsigned hash_search (Table *t, lua_Unsigned j) {
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b084      	sub	sp, #16
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
 800dc7e:	6039      	str	r1, [r7, #0]
  lua_Unsigned i;
  if (j == 0) j++;  /* the caller ensures 'j + 1' is present */
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d102      	bne.n	800dc8c <hash_search+0x16>
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	603b      	str	r3, [r7, #0]
  do {
    i = j;  /* 'i' is a present index */
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	60fb      	str	r3, [r7, #12]
    if (j <= l_castS2U(LUA_MAXINTEGER) / 2)
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc96:	d203      	bcs.n	800dca0 <hash_search+0x2a>
      j *= 2;
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	005b      	lsls	r3, r3, #1
 800dc9c:	603b      	str	r3, [r7, #0]
 800dc9e:	e00f      	b.n	800dcc0 <hash_search+0x4a>
    else {
      j = LUA_MAXINTEGER;
 800dca0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dca4:	603b      	str	r3, [r7, #0]
      if (isempty(luaH_getint(t, j)))  /* t[j] not present? */
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	4619      	mov	r1, r3
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7ff fe4e 	bl	800d94c <luaH_getint>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	791b      	ldrb	r3, [r3, #4]
 800dcb4:	f003 030f 	and.w	r3, r3, #15
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00d      	beq.n	800dcd8 <hash_search+0x62>
        break;  /* 'j' now is an absent index */
      else  /* weird case */
        return j;  /* well, max integer is a boundary... */
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	e028      	b.n	800dd12 <hash_search+0x9c>
    }
  } while (!isempty(luaH_getint(t, j)));  /* repeat until an absent t[j] */
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7ff fe41 	bl	800d94c <luaH_getint>
 800dcca:	4603      	mov	r3, r0
 800dccc:	791b      	ldrb	r3, [r3, #4]
 800dcce:	f003 030f 	and.w	r3, r3, #15
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1da      	bne.n	800dc8c <hash_search+0x16>
 800dcd6:	e016      	b.n	800dd06 <hash_search+0x90>
        break;  /* 'j' now is an absent index */
 800dcd8:	bf00      	nop
  /* i < j  &&  t[i] present  &&  t[j] absent */
  while (j - i > 1u) {  /* do a binary search between them */
 800dcda:	e014      	b.n	800dd06 <hash_search+0x90>
    lua_Unsigned m = (i + j) / 2;
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	4413      	add	r3, r2
 800dce2:	085b      	lsrs	r3, r3, #1
 800dce4:	60bb      	str	r3, [r7, #8]
    if (isempty(luaH_getint(t, m))) j = m;
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	4619      	mov	r1, r3
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff fe2e 	bl	800d94c <luaH_getint>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	791b      	ldrb	r3, [r3, #4]
 800dcf4:	f003 030f 	and.w	r3, r3, #15
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d102      	bne.n	800dd02 <hash_search+0x8c>
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	603b      	str	r3, [r7, #0]
 800dd00:	e001      	b.n	800dd06 <hash_search+0x90>
    else i = m;
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	60fb      	str	r3, [r7, #12]
  while (j - i > 1u) {  /* do a binary search between them */
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d8e5      	bhi.n	800dcdc <hash_search+0x66>
  }
  return i;
 800dd10:	68fb      	ldr	r3, [r7, #12]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <binsearch>:


static unsigned int binsearch (const TValue *array, unsigned int i,
                                                    unsigned int j) {
 800dd1a:	b480      	push	{r7}
 800dd1c:	b087      	sub	sp, #28
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
 800dd24:	607a      	str	r2, [r7, #4]
  while (j - i > 1u) {  /* binary search */
 800dd26:	e015      	b.n	800dd54 <binsearch+0x3a>
    unsigned int m = (i + j) / 2;
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	085b      	lsrs	r3, r3, #1
 800dd30:	617b      	str	r3, [r7, #20]
    if (isempty(&array[m - 1])) j = m;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	00db      	lsls	r3, r3, #3
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	4413      	add	r3, r2
 800dd40:	791b      	ldrb	r3, [r3, #4]
 800dd42:	f003 030f 	and.w	r3, r3, #15
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d102      	bne.n	800dd50 <binsearch+0x36>
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	607b      	str	r3, [r7, #4]
 800dd4e:	e001      	b.n	800dd54 <binsearch+0x3a>
    else i = m;
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	60bb      	str	r3, [r7, #8]
  while (j - i > 1u) {  /* binary search */
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d8e4      	bhi.n	800dd28 <binsearch+0xe>
  }
  return i;
 800dd5e:	68bb      	ldr	r3, [r7, #8]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	371c      	adds	r7, #28
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <luaH_getn>:
** or 'limit+1' is absent, 'limit' is a boundary.  Otherwise, call
** 'hash_search' to find a boundary in the hash part of the table.
** (In those cases, the boundary is not inside the array part, and
** therefore cannot be used as a new limit.)
*/
lua_Unsigned luaH_getn (Table *t) {
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  unsigned int limit = t->alimit;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	617b      	str	r3, [r7, #20]
  if (limit > 0 && isempty(&t->array[limit - 1])) {  /* (1)? */
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d059      	beq.n	800de34 <luaH_getn+0xc8>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	68da      	ldr	r2, [r3, #12]
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	00db      	lsls	r3, r3, #3
 800dd8e:	4413      	add	r3, r2
 800dd90:	791b      	ldrb	r3, [r3, #4]
 800dd92:	f003 030f 	and.w	r3, r3, #15
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d14c      	bne.n	800de34 <luaH_getn+0xc8>
    /* there must be a boundary before 'limit' */
    if (limit >= 2 && !isempty(&t->array[limit - 2])) {
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d927      	bls.n	800ddf0 <luaH_getn+0x84>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68da      	ldr	r2, [r3, #12]
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ddaa:	3b02      	subs	r3, #2
 800ddac:	00db      	lsls	r3, r3, #3
 800ddae:	4413      	add	r3, r2
 800ddb0:	791b      	ldrb	r3, [r3, #4]
 800ddb2:	f003 030f 	and.w	r3, r3, #15
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d01a      	beq.n	800ddf0 <luaH_getn+0x84>
      /* 'limit - 1' is a boundary; can it be a new limit? */
      if (ispow2realasize(t) && !ispow2(limit - 1)) {
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff f90c 	bl	800cfd8 <ispow2realasize>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d011      	beq.n	800ddea <luaH_getn+0x7e>
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	1e5a      	subs	r2, r3, #1
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	3b02      	subs	r3, #2
 800ddce:	4013      	ands	r3, r2
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00a      	beq.n	800ddea <luaH_getn+0x7e>
        t->alimit = limit - 1;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	1e5a      	subs	r2, r3, #1
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	609a      	str	r2, [r3, #8]
        setnorealasize(t);  /* now 'alimit' is not the real size */
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	799b      	ldrb	r3, [r3, #6]
 800dde0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	719a      	strb	r2, [r3, #6]
      }
      return limit - 1;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	3b01      	subs	r3, #1
 800ddee:	e070      	b.n	800ded2 <luaH_getn+0x166>
    }
    else {  /* must search for a boundary in [0, limit] */
      unsigned int boundary = binsearch(t->array, 0, limit);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7ff ff8e 	bl	800dd1a <binsearch>
 800ddfe:	6138      	str	r0, [r7, #16]
      /* can this boundary represent the real size of the array? */
      if (ispow2realasize(t) && boundary > luaH_realasize(t) / 2) {
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff f8e9 	bl	800cfd8 <ispow2realasize>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d011      	beq.n	800de30 <luaH_getn+0xc4>
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7ff f8a9 	bl	800cf64 <luaH_realasize>
 800de12:	4603      	mov	r3, r0
 800de14:	085b      	lsrs	r3, r3, #1
 800de16:	693a      	ldr	r2, [r7, #16]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d909      	bls.n	800de30 <luaH_getn+0xc4>
        t->alimit = boundary;  /* use it as the new limit */
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	609a      	str	r2, [r3, #8]
        setnorealasize(t);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	799b      	ldrb	r3, [r3, #6]
 800de26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	719a      	strb	r2, [r3, #6]
      }
      return boundary;
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	e04e      	b.n	800ded2 <luaH_getn+0x166>
    }
  }
  /* 'limit' is zero or present in table */
  if (!limitequalsasize(t)) {  /* (2)? */
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	799b      	ldrb	r3, [r3, #6]
 800de38:	b25b      	sxtb	r3, r3
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	da32      	bge.n	800dea4 <luaH_getn+0x138>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	689a      	ldr	r2, [r3, #8]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	689b      	ldr	r3, [r3, #8]
 800de46:	3b01      	subs	r3, #1
 800de48:	4013      	ands	r3, r2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d02a      	beq.n	800dea4 <luaH_getn+0x138>
    /* 'limit' > 0 and array has more elements after 'limit' */
    if (isempty(&t->array[limit]))  /* 'limit + 1' is empty? */
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	68da      	ldr	r2, [r3, #12]
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	4413      	add	r3, r2
 800de58:	791b      	ldrb	r3, [r3, #4]
 800de5a:	f003 030f 	and.w	r3, r3, #15
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d101      	bne.n	800de66 <luaH_getn+0xfa>
      return limit;  /* this is the boundary */
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	e035      	b.n	800ded2 <luaH_getn+0x166>
    /* else, try last element in the array */
    limit = luaH_realasize(t);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7ff f87c 	bl	800cf64 <luaH_realasize>
 800de6c:	6178      	str	r0, [r7, #20]
    if (isempty(&t->array[limit - 1])) {  /* empty? */
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	68da      	ldr	r2, [r3, #12]
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800de78:	3b01      	subs	r3, #1
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	4413      	add	r3, r2
 800de7e:	791b      	ldrb	r3, [r3, #4]
 800de80:	f003 030f 	and.w	r3, r3, #15
 800de84:	2b00      	cmp	r3, #0
 800de86:	d10d      	bne.n	800dea4 <luaH_getn+0x138>
      /* there must be a boundary in the array after old limit,
         and it must be a valid new limit */
      unsigned int boundary = binsearch(t->array, t->alimit, limit);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	68d8      	ldr	r0, [r3, #12]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	697a      	ldr	r2, [r7, #20]
 800de92:	4619      	mov	r1, r3
 800de94:	f7ff ff41 	bl	800dd1a <binsearch>
 800de98:	60f8      	str	r0, [r7, #12]
      t->alimit = boundary;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	609a      	str	r2, [r3, #8]
      return boundary;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	e016      	b.n	800ded2 <luaH_getn+0x166>
    /* else, new limit is present in the table; check the hash part */
  }
  /* (3) 'limit' is the last element and either is zero or present in table */
  lua_assert(limit == luaH_realasize(t) &&
             (limit == 0 || !isempty(&t->array[limit - 1])));
  if (isdummy(t) || isempty(luaH_getint(t, cast(lua_Integer, limit + 1))))
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	695b      	ldr	r3, [r3, #20]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00b      	beq.n	800dec4 <luaH_getn+0x158>
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	3301      	adds	r3, #1
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff fd4a 	bl	800d94c <luaH_getint>
 800deb8:	4603      	mov	r3, r0
 800deba:	791b      	ldrb	r3, [r3, #4]
 800debc:	f003 030f 	and.w	r3, r3, #15
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d101      	bne.n	800dec8 <luaH_getn+0x15c>
    return limit;  /* 'limit + 1' is absent */
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	e004      	b.n	800ded2 <luaH_getn+0x166>
  else  /* 'limit + 1' is also present */
    return hash_search(t, limit);
 800dec8:	6979      	ldr	r1, [r7, #20]
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7ff fed3 	bl	800dc76 <hash_search>
 800ded0:	4603      	mov	r3, r0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3718      	adds	r7, #24
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <luaT_init>:
  "string", "table", "function", udatatypename, "thread",
  "upvalue", "proto" /* these last cases are used for tests only */
};


void luaT_init (lua_State *L) {
 800dedc:	b590      	push	{r4, r7, lr}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
    "__band", "__bor", "__bxor", "__shl", "__shr",
    "__unm", "__bnot", "__lt", "__le",
    "__concat", "__call", "__close"
  };
  int i;
  for (i=0; i<TM_N; i++) {
 800dee4:	2300      	movs	r3, #0
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	e01b      	b.n	800df22 <luaT_init+0x46>
    G(L)->tmname[i] = luaS_new(L, luaT_eventname[i]);
 800deea:	4a12      	ldr	r2, [pc, #72]	; (800df34 <luaT_init+0x58>)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	691c      	ldr	r4, [r3, #16]
 800def6:	4611      	mov	r1, r2
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7fe fdb5 	bl	800ca68 <luaS_new>
 800defe:	4602      	mov	r2, r0
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3326      	adds	r3, #38	; 0x26
 800df04:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    luaC_fix(L, obj2gco(G(L)->tmname[i]));  /* never collect these names */
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	691b      	ldr	r3, [r3, #16]
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	3226      	adds	r2, #38	; 0x26
 800df10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7fa fe29 	bl	8008b6e <luaC_fix>
  for (i=0; i<TM_N; i++) {
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	3301      	adds	r3, #1
 800df20:	60fb      	str	r3, [r7, #12]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2b18      	cmp	r3, #24
 800df26:	dde0      	ble.n	800deea <luaT_init+0xe>
  }
}
 800df28:	bf00      	nop
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd90      	pop	{r4, r7, pc}
 800df32:	bf00      	nop
 800df34:	0801f560 	.word	0x0801f560

0800df38 <luaT_gettm>:

/*
** function to be used with macro "fasttm": optimized for absence of
** tag methods
*/
const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	460b      	mov	r3, r1
 800df42:	607a      	str	r2, [r7, #4]
 800df44:	72fb      	strb	r3, [r7, #11]
  const TValue *tm = luaH_getshortstr(events, ename);
 800df46:	6879      	ldr	r1, [r7, #4]
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f7ff fd5f 	bl	800da0c <luaH_getshortstr>
 800df4e:	6178      	str	r0, [r7, #20]
  lua_assert(event <= TM_EQ);
  if (notm(tm)) {  /* no tag method? */
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	791b      	ldrb	r3, [r3, #4]
 800df54:	f003 030f 	and.w	r3, r3, #15
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10c      	bne.n	800df76 <luaT_gettm+0x3e>
    events->flags |= cast_byte(1u<<event);  /* cache this fact */
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	799a      	ldrb	r2, [r3, #6]
 800df60:	7afb      	ldrb	r3, [r7, #11]
 800df62:	2101      	movs	r1, #1
 800df64:	fa01 f303 	lsl.w	r3, r1, r3
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	4313      	orrs	r3, r2
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	719a      	strb	r2, [r3, #6]
    return NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	e000      	b.n	800df78 <luaT_gettm+0x40>
  }
  else return tm;
 800df76:	697b      	ldr	r3, [r7, #20]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3718      	adds	r7, #24
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <luaT_gettmbyobj>:


const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {
 800df80:	b580      	push	{r7, lr}
 800df82:	b086      	sub	sp, #24
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	4613      	mov	r3, r2
 800df8c:	71fb      	strb	r3, [r7, #7]
  Table *mt;
  switch (ttype(o)) {
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	791b      	ldrb	r3, [r3, #4]
 800df92:	f003 030f 	and.w	r3, r3, #15
 800df96:	2b05      	cmp	r3, #5
 800df98:	d002      	beq.n	800dfa0 <luaT_gettmbyobj+0x20>
 800df9a:	2b07      	cmp	r3, #7
 800df9c:	d005      	beq.n	800dfaa <luaT_gettmbyobj+0x2a>
 800df9e:	e009      	b.n	800dfb4 <luaT_gettmbyobj+0x34>
    case LUA_TTABLE:
      mt = hvalue(o)->metatable;
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	699b      	ldr	r3, [r3, #24]
 800dfa6:	617b      	str	r3, [r7, #20]
      break;
 800dfa8:	e00f      	b.n	800dfca <luaT_gettmbyobj+0x4a>
    case LUA_TUSERDATA:
      mt = uvalue(o)->metatable;
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	617b      	str	r3, [r7, #20]
      break;
 800dfb2:	e00a      	b.n	800dfca <luaT_gettmbyobj+0x4a>
    default:
      mt = G(L)->mt[ttype(o)];
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	691a      	ldr	r2, [r3, #16]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	791b      	ldrb	r3, [r3, #4]
 800dfbc:	f003 030f 	and.w	r3, r3, #15
 800dfc0:	333e      	adds	r3, #62	; 0x3e
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	4413      	add	r3, r2
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	617b      	str	r3, [r7, #20]
  }
  return (mt ? luaH_getshortstr(mt, G(L)->tmname[event]) : &G(L)->nilvalue);
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00b      	beq.n	800dfe8 <luaT_gettmbyobj+0x68>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	79fa      	ldrb	r2, [r7, #7]
 800dfd6:	3226      	adds	r2, #38	; 0x26
 800dfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	6978      	ldr	r0, [r7, #20]
 800dfe0:	f7ff fd14 	bl	800da0c <luaH_getshortstr>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	e002      	b.n	800dfee <luaT_gettmbyobj+0x6e>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	332c      	adds	r3, #44	; 0x2c
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3718      	adds	r7, #24
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
	...

0800dff8 <luaT_objtypename>:

/*
** Return the name of the type of an object. For tables and userdata
** with metatable, use their '__name' metafield, if present.
*/
const char *luaT_objtypename (lua_State *L, const TValue *o) {
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  Table *mt;
  if ((ttistable(o) && (mt = hvalue(o)->metatable) != NULL) ||
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	791b      	ldrb	r3, [r3, #4]
 800e006:	2b45      	cmp	r3, #69	; 0x45
 800e008:	d106      	bne.n	800e018 <luaT_objtypename+0x20>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10a      	bne.n	800e02e <luaT_objtypename+0x36>
      (ttisfulluserdata(o) && (mt = uvalue(o)->metatable) != NULL)) {
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	791b      	ldrb	r3, [r3, #4]
  if ((ttistable(o) && (mt = hvalue(o)->metatable) != NULL) ||
 800e01c:	2b47      	cmp	r3, #71	; 0x47
 800e01e:	d11a      	bne.n	800e056 <luaT_objtypename+0x5e>
      (ttisfulluserdata(o) && (mt = uvalue(o)->metatable) != NULL)) {
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	60fb      	str	r3, [r7, #12]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d013      	beq.n	800e056 <luaT_objtypename+0x5e>
    const TValue *name = luaH_getshortstr(mt, luaS_new(L, "__name"));
 800e02e:	4910      	ldr	r1, [pc, #64]	; (800e070 <luaT_objtypename+0x78>)
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7fe fd19 	bl	800ca68 <luaS_new>
 800e036:	4603      	mov	r3, r0
 800e038:	4619      	mov	r1, r3
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f7ff fce6 	bl	800da0c <luaH_getshortstr>
 800e040:	60b8      	str	r0, [r7, #8]
    if (ttisstring(name))  /* is '__name' a string? */
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	791b      	ldrb	r3, [r3, #4]
 800e046:	f003 030f 	and.w	r3, r3, #15
 800e04a:	2b04      	cmp	r3, #4
 800e04c:	d103      	bne.n	800e056 <luaT_objtypename+0x5e>
      return getstr(tsvalue(name));  /* use it as type name */
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	3310      	adds	r3, #16
 800e054:	e007      	b.n	800e066 <luaT_objtypename+0x6e>
  }
  return ttypename(ttype(o));  /* else use standard type name */
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	791b      	ldrb	r3, [r3, #4]
 800e05a:	f003 030f 	and.w	r3, r3, #15
 800e05e:	3301      	adds	r3, #1
 800e060:	4a04      	ldr	r2, [pc, #16]	; (800e074 <luaT_objtypename+0x7c>)
 800e062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	0801efa0 	.word	0x0801efa0
 800e074:	0801f530 	.word	0x0801f530

0800e078 <luaT_callTM>:


void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,
                  const TValue *p2, const TValue *p3) {
 800e078:	b580      	push	{r7, lr}
 800e07a:	b08e      	sub	sp, #56	; 0x38
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
 800e084:	603b      	str	r3, [r7, #0]
  StkId func = L->top;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	637b      	str	r3, [r7, #52]	; 0x34
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
 800e08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08e:	633b      	str	r3, [r7, #48]	; 0x30
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e098:	6812      	ldr	r2, [r2, #0]
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09e:	791a      	ldrb	r2, [r3, #4]
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a2:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 1, p1);  /* 1st argument */
 800e0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a6:	3308      	adds	r3, #8
 800e0a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b2:	6812      	ldr	r2, [r2, #0]
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b8:	791a      	ldrb	r2, [r3, #4]
 800e0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0bc:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 2, p2);  /* 2nd argument */
 800e0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c0:	3310      	adds	r3, #16
 800e0c2:	623b      	str	r3, [r7, #32]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	61fb      	str	r3, [r7, #28]
 800e0c8:	6a3b      	ldr	r3, [r7, #32]
 800e0ca:	69fa      	ldr	r2, [r7, #28]
 800e0cc:	6812      	ldr	r2, [r2, #0]
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	791a      	ldrb	r2, [r3, #4]
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 3, p3);  /* 3rd argument */
 800e0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0da:	3318      	adds	r3, #24
 800e0dc:	61bb      	str	r3, [r7, #24]
 800e0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e0:	617b      	str	r3, [r7, #20]
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	697a      	ldr	r2, [r7, #20]
 800e0e6:	6812      	ldr	r2, [r2, #0]
 800e0e8:	601a      	str	r2, [r3, #0]
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	791a      	ldrb	r2, [r3, #4]
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	711a      	strb	r2, [r3, #4]
  L->top = func + 4;
 800e0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f4:	f103 0220 	add.w	r2, r3, #32
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	60da      	str	r2, [r3, #12]
  /* metamethod may yield only when called from Lua code */
  if (isLuacode(L->ci))
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e102:	f003 030a 	and.w	r3, r3, #10
 800e106:	2b00      	cmp	r3, #0
 800e108:	d105      	bne.n	800e116 <luaT_callTM+0x9e>
    luaD_call(L, func, 0);
 800e10a:	2200      	movs	r2, #0
 800e10c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	f7fa f890 	bl	8008234 <luaD_call>
  else
    luaD_callnoyield(L, func, 0);
}
 800e114:	e004      	b.n	800e120 <luaT_callTM+0xa8>
    luaD_callnoyield(L, func, 0);
 800e116:	2200      	movs	r2, #0
 800e118:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7fa f89a 	bl	8008254 <luaD_callnoyield>
}
 800e120:	bf00      	nop
 800e122:	3738      	adds	r7, #56	; 0x38
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <luaT_callTMres>:


void luaT_callTMres (lua_State *L, const TValue *f, const TValue *p1,
                     const TValue *p2, StkId res) {
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08e      	sub	sp, #56	; 0x38
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
 800e134:	603b      	str	r3, [r7, #0]
  ptrdiff_t result = savestack(L, res);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	69db      	ldr	r3, [r3, #28]
 800e13a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	637b      	str	r3, [r7, #52]	; 0x34
  StkId func = L->top;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	633b      	str	r3, [r7, #48]	; 0x30
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
 800e146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e152:	6812      	ldr	r2, [r2, #0]
 800e154:	601a      	str	r2, [r3, #0]
 800e156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e158:	791a      	ldrb	r2, [r3, #4]
 800e15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15c:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 1, p1);  /* 1st argument */
 800e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e160:	3308      	adds	r3, #8
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	623b      	str	r3, [r7, #32]
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	6a3a      	ldr	r2, [r7, #32]
 800e16c:	6812      	ldr	r2, [r2, #0]
 800e16e:	601a      	str	r2, [r3, #0]
 800e170:	6a3b      	ldr	r3, [r7, #32]
 800e172:	791a      	ldrb	r2, [r3, #4]
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 2, p2);  /* 2nd argument */
 800e178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17a:	3310      	adds	r3, #16
 800e17c:	61fb      	str	r3, [r7, #28]
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	61bb      	str	r3, [r7, #24]
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	69ba      	ldr	r2, [r7, #24]
 800e186:	6812      	ldr	r2, [r2, #0]
 800e188:	601a      	str	r2, [r3, #0]
 800e18a:	69bb      	ldr	r3, [r7, #24]
 800e18c:	791a      	ldrb	r2, [r3, #4]
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	711a      	strb	r2, [r3, #4]
  L->top += 3;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	f103 0218 	add.w	r2, r3, #24
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	60da      	str	r2, [r3, #12]
  /* metamethod may yield only when called from Lua code */
  if (isLuacode(L->ci))
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	695b      	ldr	r3, [r3, #20]
 800e1a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e1a4:	f003 030a 	and.w	r3, r3, #10
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d105      	bne.n	800e1b8 <luaT_callTMres+0x90>
    luaD_call(L, func, 1);
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f7fa f83f 	bl	8008234 <luaD_call>
 800e1b6:	e004      	b.n	800e1c2 <luaT_callTMres+0x9a>
  else
    luaD_callnoyield(L, func, 1);
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f7fa f849 	bl	8008254 <luaD_callnoyield>
  res = restorestack(L, result);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	69da      	ldr	r2, [r3, #28]
 800e1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c8:	4413      	add	r3, r2
 800e1ca:	643b      	str	r3, [r7, #64]	; 0x40
  setobjs2s(L, res, --L->top);  /* move result to its place */
 800e1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1ce:	617b      	str	r3, [r7, #20]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	f1a3 0208 	sub.w	r2, r3, #8
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	60da      	str	r2, [r3, #12]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	613b      	str	r3, [r7, #16]
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	6812      	ldr	r2, [r2, #0]
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	791a      	ldrb	r2, [r3, #4]
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	711a      	strb	r2, [r3, #4]
}
 800e1f2:	bf00      	nop
 800e1f4:	3738      	adds	r7, #56	; 0x38
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <callbinTM>:


static int callbinTM (lua_State *L, const TValue *p1, const TValue *p2,
                      StkId res, TMS event) {
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b088      	sub	sp, #32
 800e1fe:	af02      	add	r7, sp, #8
 800e200:	60f8      	str	r0, [r7, #12]
 800e202:	60b9      	str	r1, [r7, #8]
 800e204:	607a      	str	r2, [r7, #4]
 800e206:	603b      	str	r3, [r7, #0]
  const TValue *tm = luaT_gettmbyobj(L, p1, event);  /* try first operand */
 800e208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e20c:	461a      	mov	r2, r3
 800e20e:	68b9      	ldr	r1, [r7, #8]
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f7ff feb5 	bl	800df80 <luaT_gettmbyobj>
 800e216:	6178      	str	r0, [r7, #20]
  if (notm(tm))
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	791b      	ldrb	r3, [r3, #4]
 800e21c:	f003 030f 	and.w	r3, r3, #15
 800e220:	2b00      	cmp	r3, #0
 800e222:	d107      	bne.n	800e234 <callbinTM+0x3a>
    tm = luaT_gettmbyobj(L, p2, event);  /* try second operand */
 800e224:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e228:	461a      	mov	r2, r3
 800e22a:	6879      	ldr	r1, [r7, #4]
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f7ff fea7 	bl	800df80 <luaT_gettmbyobj>
 800e232:	6178      	str	r0, [r7, #20]
  if (notm(tm)) return 0;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	791b      	ldrb	r3, [r3, #4]
 800e238:	f003 030f 	and.w	r3, r3, #15
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d101      	bne.n	800e244 <callbinTM+0x4a>
 800e240:	2300      	movs	r3, #0
 800e242:	e008      	b.n	800e256 <callbinTM+0x5c>
  luaT_callTMres(L, tm, p1, p2, res);
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	6979      	ldr	r1, [r7, #20]
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f7ff ff6a 	bl	800e128 <luaT_callTMres>
  return 1;
 800e254:	2301      	movs	r3, #1
}
 800e256:	4618      	mov	r0, r3
 800e258:	3718      	adds	r7, #24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
	...

0800e260 <luaT_trybinTM>:


void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,
                    StkId res, TMS event) {
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af02      	add	r7, sp, #8
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	603b      	str	r3, [r7, #0]
  if (l_unlikely(!callbinTM(L, p1, p2, res, event))) {
 800e26e:	7e3b      	ldrb	r3, [r7, #24]
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	68b9      	ldr	r1, [r7, #8]
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7ff ffbe 	bl	800e1fa <callbinTM>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	bf0c      	ite	eq
 800e284:	2301      	moveq	r3, #1
 800e286:	2300      	movne	r3, #0
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d024      	beq.n	800e2d8 <luaT_trybinTM+0x78>
    switch (event) {
 800e28e:	7e3b      	ldrb	r3, [r7, #24]
 800e290:	2b11      	cmp	r3, #17
 800e292:	dc02      	bgt.n	800e29a <luaT_trybinTM+0x3a>
 800e294:	2b0d      	cmp	r3, #13
 800e296:	da02      	bge.n	800e29e <luaT_trybinTM+0x3e>
 800e298:	e018      	b.n	800e2cc <luaT_trybinTM+0x6c>
 800e29a:	2b13      	cmp	r3, #19
 800e29c:	d116      	bne.n	800e2cc <luaT_trybinTM+0x6c>
      case TM_BAND: case TM_BOR: case TM_BXOR:
      case TM_SHL: case TM_SHR: case TM_BNOT: {
        if (ttisnumber(p1) && ttisnumber(p2))
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	791b      	ldrb	r3, [r3, #4]
 800e2a2:	f003 030f 	and.w	r3, r3, #15
 800e2a6:	2b03      	cmp	r3, #3
 800e2a8:	d10a      	bne.n	800e2c0 <luaT_trybinTM+0x60>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	791b      	ldrb	r3, [r3, #4]
 800e2ae:	f003 030f 	and.w	r3, r3, #15
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d104      	bne.n	800e2c0 <luaT_trybinTM+0x60>
          luaG_tointerror(L, p1, p2);
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	68b9      	ldr	r1, [r7, #8]
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f7f8 fece 	bl	800705c <luaG_tointerror>
        else
          luaG_opinterror(L, p1, p2, "perform bitwise operation on");
 800e2c0:	4b07      	ldr	r3, [pc, #28]	; (800e2e0 <luaT_trybinTM+0x80>)
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	68b9      	ldr	r1, [r7, #8]
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f7f8 feb4 	bl	8007034 <luaG_opinterror>
      }
      /* calls never return, but to avoid warnings: *//* FALLTHROUGH */
      default:
        luaG_opinterror(L, p1, p2, "perform arithmetic on");
 800e2cc:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <luaT_trybinTM+0x84>)
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	68b9      	ldr	r1, [r7, #8]
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f7f8 feae 	bl	8007034 <luaG_opinterror>
    }
  }
}
 800e2d8:	bf00      	nop
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	0801efa8 	.word	0x0801efa8
 800e2e4:	0801efc8 	.word	0x0801efc8

0800e2e8 <luaT_tryconcatTM>:


void luaT_tryconcatTM (lua_State *L) {
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af02      	add	r7, sp, #8
 800e2ee:	6078      	str	r0, [r7, #4]
  StkId top = L->top;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	60fb      	str	r3, [r7, #12]
  if (l_unlikely(!callbinTM(L, s2v(top - 2), s2v(top - 1), top - 2,
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3b10      	subs	r3, #16
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	3b08      	subs	r3, #8
 800e300:	4618      	mov	r0, r3
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3b10      	subs	r3, #16
 800e306:	2216      	movs	r2, #22
 800e308:	9200      	str	r2, [sp, #0]
 800e30a:	4602      	mov	r2, r0
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7ff ff74 	bl	800e1fa <callbinTM>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	bf0c      	ite	eq
 800e318:	2301      	moveq	r3, #1
 800e31a:	2300      	movne	r3, #0
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d008      	beq.n	800e334 <luaT_tryconcatTM+0x4c>
                               TM_CONCAT)))
    luaG_concaterror(L, s2v(top - 2), s2v(top - 1));
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	3b10      	subs	r3, #16
 800e326:	4619      	mov	r1, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3b08      	subs	r3, #8
 800e32c:	461a      	mov	r2, r3
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f7f8 fe64 	bl	8006ffc <luaG_concaterror>
}
 800e334:	bf00      	nop
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <luaT_trybinassocTM>:


void luaT_trybinassocTM (lua_State *L, const TValue *p1, const TValue *p2,
                                       int flip, StkId res, TMS event) {
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af02      	add	r7, sp, #8
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	603b      	str	r3, [r7, #0]
  if (flip)
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d008      	beq.n	800e362 <luaT_trybinassocTM+0x26>
    luaT_trybinTM(L, p2, p1, res, event);
 800e350:	7f3b      	ldrb	r3, [r7, #28]
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	6879      	ldr	r1, [r7, #4]
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f7ff ff80 	bl	800e260 <luaT_trybinTM>
  else
    luaT_trybinTM(L, p1, p2, res, event);
}
 800e360:	e007      	b.n	800e372 <luaT_trybinassocTM+0x36>
    luaT_trybinTM(L, p1, p2, res, event);
 800e362:	7f3b      	ldrb	r3, [r7, #28]
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	68b9      	ldr	r1, [r7, #8]
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f7ff ff77 	bl	800e260 <luaT_trybinTM>
}
 800e372:	bf00      	nop
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <luaT_trybiniTM>:


void luaT_trybiniTM (lua_State *L, const TValue *p1, lua_Integer i2,
                                   int flip, StkId res, TMS event) {
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b08a      	sub	sp, #40	; 0x28
 800e37e:	af02      	add	r7, sp, #8
 800e380:	60f8      	str	r0, [r7, #12]
 800e382:	60b9      	str	r1, [r7, #8]
 800e384:	607a      	str	r2, [r7, #4]
 800e386:	603b      	str	r3, [r7, #0]
  TValue aux;
  setivalue(&aux, i2);
 800e388:	f107 0314 	add.w	r3, r7, #20
 800e38c:	61fb      	str	r3, [r7, #28]
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	2203      	movs	r2, #3
 800e398:	711a      	strb	r2, [r3, #4]
  luaT_trybinassocTM(L, p1, &aux, flip, res, event);
 800e39a:	f107 0214 	add.w	r2, r7, #20
 800e39e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e3a2:	9301      	str	r3, [sp, #4]
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	68b9      	ldr	r1, [r7, #8]
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f7ff ffc5 	bl	800e33c <luaT_trybinassocTM>
}
 800e3b2:	bf00      	nop
 800e3b4:	3720      	adds	r7, #32
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <luaT_callorderTM>:
** this substitution, the continuation has to know about it (to negate
** the result of r<l); bit CIST_LEQ in the call status keeps that
** information.
*/
int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,
                      TMS event) {
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b086      	sub	sp, #24
 800e3be:	af02      	add	r7, sp, #8
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	607a      	str	r2, [r7, #4]
 800e3c6:	70fb      	strb	r3, [r7, #3]
  if (callbinTM(L, p1, p2, L->top, event))  /* try original event */
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	68da      	ldr	r2, [r3, #12]
 800e3cc:	78fb      	ldrb	r3, [r7, #3]
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	68b9      	ldr	r1, [r7, #8]
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f7ff ff0f 	bl	800e1fa <callbinTM>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00f      	beq.n	800e402 <luaT_callorderTM+0x48>
    return !l_isfalse(s2v(L->top));
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	791b      	ldrb	r3, [r3, #4]
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d008      	beq.n	800e3fe <luaT_callorderTM+0x44>
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	791b      	ldrb	r3, [r3, #4]
 800e3f2:	f003 030f 	and.w	r3, r3, #15
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d001      	beq.n	800e3fe <luaT_callorderTM+0x44>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e006      	b.n	800e40c <luaT_callorderTM+0x52>
 800e3fe:	2300      	movs	r3, #0
 800e400:	e004      	b.n	800e40c <luaT_callorderTM+0x52>
        return l_isfalse(s2v(L->top));
      }
      /* else error will remove this 'ci'; no need to clear mark */
  }
#endif
  luaG_ordererror(L, p1, p2);  /* no metamethod found */
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	68b9      	ldr	r1, [r7, #8]
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f7f8 fe46 	bl	8007098 <luaG_ordererror>
  return 0;  /* to avoid warnings */
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <luaT_callorderiTM>:


int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,
                       int flip, int isfloat, TMS event) {
 800e414:	b580      	push	{r7, lr}
 800e416:	b08a      	sub	sp, #40	; 0x28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
  TValue aux; const TValue *p2;
  if (isfloat) {
 800e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00e      	beq.n	800e446 <luaT_callorderiTM+0x32>
    setfltvalue(&aux, cast_num(v2));
 800e428:	f107 0314 	add.w	r3, r7, #20
 800e42c:	61fb      	str	r3, [r7, #28]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	ee07 3a90 	vmov	s15, r3
 800e434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	edc3 7a00 	vstr	s15, [r3]
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	2213      	movs	r2, #19
 800e442:	711a      	strb	r2, [r3, #4]
 800e444:	e008      	b.n	800e458 <luaT_callorderiTM+0x44>
  }
  else
    setivalue(&aux, v2);
 800e446:	f107 0314 	add.w	r3, r7, #20
 800e44a:	623b      	str	r3, [r7, #32]
 800e44c:	6a3b      	ldr	r3, [r7, #32]
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	601a      	str	r2, [r3, #0]
 800e452:	6a3b      	ldr	r3, [r7, #32]
 800e454:	2203      	movs	r2, #3
 800e456:	711a      	strb	r2, [r3, #4]
  if (flip) {  /* arguments were exchanged? */
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d005      	beq.n	800e46a <luaT_callorderiTM+0x56>
    p2 = p1; p1 = &aux;  /* correct them */
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	627b      	str	r3, [r7, #36]	; 0x24
 800e462:	f107 0314 	add.w	r3, r7, #20
 800e466:	60bb      	str	r3, [r7, #8]
 800e468:	e002      	b.n	800e470 <luaT_callorderiTM+0x5c>
  }
  else
    p2 = &aux;
 800e46a:	f107 0314 	add.w	r3, r7, #20
 800e46e:	627b      	str	r3, [r7, #36]	; 0x24
  return luaT_callorderTM(L, p1, p2, event);
 800e470:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e476:	68b9      	ldr	r1, [r7, #8]
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f7ff ff9e 	bl	800e3ba <luaT_callorderTM>
 800e47e:	4603      	mov	r3, r0
}
 800e480:	4618      	mov	r0, r3
 800e482:	3728      	adds	r7, #40	; 0x28
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <luaT_adjustvarargs>:


void luaT_adjustvarargs (lua_State *L, int nfixparams, CallInfo *ci,
                         const Proto *p) {
 800e488:	b580      	push	{r7, lr}
 800e48a:	b08c      	sub	sp, #48	; 0x30
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
 800e494:	603b      	str	r3, [r7, #0]
  int i;
  int actual = cast_int(L->top - ci->func) - 1;  /* number of arguments */
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	68da      	ldr	r2, [r3, #12]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	10db      	asrs	r3, r3, #3
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	62bb      	str	r3, [r7, #40]	; 0x28
  int nextra = actual - nfixparams;  /* number of extra arguments */
 800e4a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	627b      	str	r3, [r7, #36]	; 0x24
  ci->u.l.nextraargs = nextra;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b2:	619a      	str	r2, [r3, #24]
  luaD_checkstack(L, p->maxstacksize + 1);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	699a      	ldr	r2, [r3, #24]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	10db      	asrs	r3, r3, #3
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	7a1b      	ldrb	r3, [r3, #8]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	bfd4      	ite	le
 800e4cc:	2301      	movle	r3, #1
 800e4ce:	2300      	movgt	r3, #0
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d007      	beq.n	800e4e6 <luaT_adjustvarargs+0x5e>
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	7a1b      	ldrb	r3, [r3, #8]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	2201      	movs	r2, #1
 800e4de:	4619      	mov	r1, r3
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f7f9 f937 	bl	8007754 <luaD_growstack>
  /* copy function to the top of the stack */
  setobjs2s(L, L->top++, ci->func);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	f103 0108 	add.w	r1, r3, #8
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	60d1      	str	r1, [r2, #12]
 800e4f2:	623b      	str	r3, [r7, #32]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	61fb      	str	r3, [r7, #28]
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	69fa      	ldr	r2, [r7, #28]
 800e4fe:	6812      	ldr	r2, [r2, #0]
 800e500:	601a      	str	r2, [r3, #0]
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	791a      	ldrb	r2, [r3, #4]
 800e506:	6a3b      	ldr	r3, [r7, #32]
 800e508:	711a      	strb	r2, [r3, #4]
  /* move fixed parameters to the top of the stack */
  for (i = 1; i <= nfixparams; i++) {
 800e50a:	2301      	movs	r3, #1
 800e50c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e50e:	e01e      	b.n	800e54e <luaT_adjustvarargs+0xc6>
    setobjs2s(L, L->top++, ci->func + i);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	f103 0108 	add.w	r1, r3, #8
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	60d1      	str	r1, [r2, #12]
 800e51c:	61bb      	str	r3, [r7, #24]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e524:	00db      	lsls	r3, r3, #3
 800e526:	4413      	add	r3, r2
 800e528:	617b      	str	r3, [r7, #20]
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	697a      	ldr	r2, [r7, #20]
 800e52e:	6812      	ldr	r2, [r2, #0]
 800e530:	601a      	str	r2, [r3, #0]
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	791a      	ldrb	r2, [r3, #4]
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	711a      	strb	r2, [r3, #4]
    setnilvalue(s2v(ci->func + i));  /* erase original parameter (for GC) */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	4413      	add	r3, r2
 800e544:	2200      	movs	r2, #0
 800e546:	711a      	strb	r2, [r3, #4]
  for (i = 1; i <= nfixparams; i++) {
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	3301      	adds	r3, #1
 800e54c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e54e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	429a      	cmp	r2, r3
 800e554:	dddc      	ble.n	800e510 <luaT_adjustvarargs+0x88>
  }
  ci->func += actual + 1;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55c:	3301      	adds	r3, #1
 800e55e:	00db      	lsls	r3, r3, #3
 800e560:	441a      	add	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	601a      	str	r2, [r3, #0]
  ci->top += actual + 1;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	3301      	adds	r3, #1
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	441a      	add	r2, r3
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	605a      	str	r2, [r3, #4]
  lua_assert(L->top <= ci->top && ci->top <= L->stack_last);
}
 800e576:	bf00      	nop
 800e578:	3730      	adds	r7, #48	; 0x30
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <luaT_getvarargs>:


void luaT_getvarargs (lua_State *L, CallInfo *ci, StkId where, int wanted) {
 800e57e:	b580      	push	{r7, lr}
 800e580:	b08a      	sub	sp, #40	; 0x28
 800e582:	af00      	add	r7, sp, #0
 800e584:	60f8      	str	r0, [r7, #12]
 800e586:	60b9      	str	r1, [r7, #8]
 800e588:	607a      	str	r2, [r7, #4]
 800e58a:	603b      	str	r3, [r7, #0]
  int i;
  int nextra = ci->u.l.nextraargs;
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	623b      	str	r3, [r7, #32]
  if (wanted < 0) {
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	da2d      	bge.n	800e5f4 <luaT_getvarargs+0x76>
    wanted = nextra;  /* get all extra arguments available */
 800e598:	6a3b      	ldr	r3, [r7, #32]
 800e59a:	603b      	str	r3, [r7, #0]
    checkstackGCp(L, nextra, where);  /* ensure stack space */
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	699a      	ldr	r2, [r3, #24]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	10db      	asrs	r3, r3, #3
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	bfac      	ite	ge
 800e5b0:	2301      	movge	r3, #1
 800e5b2:	2300      	movlt	r3, #0
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d016      	beq.n	800e5e8 <luaT_getvarargs+0x6a>
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	69db      	ldr	r3, [r3, #28]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	61fb      	str	r3, [r7, #28]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	68db      	ldr	r3, [r3, #12]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	dd02      	ble.n	800e5d4 <luaT_getvarargs+0x56>
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f7fc fc42 	bl	800ae58 <luaC_step>
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	6a39      	ldr	r1, [r7, #32]
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7f9 f8bb 	bl	8007754 <luaD_growstack>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	69da      	ldr	r2, [r3, #28]
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	607b      	str	r3, [r7, #4]
    L->top = where + nextra;  /* next instruction will need top */
 800e5e8:	6a3b      	ldr	r3, [r7, #32]
 800e5ea:	00db      	lsls	r3, r3, #3
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	441a      	add	r2, r3
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < wanted && i < nextra; i++)
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5f8:	e017      	b.n	800e62a <luaT_getvarargs+0xac>
    setobjs2s(L, where + i, ci->func - nextra + i);
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	00db      	lsls	r3, r3, #3
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	4413      	add	r3, r2
 800e602:	61bb      	str	r3, [r7, #24]
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	1acb      	subs	r3, r1, r3
 800e60e:	00db      	lsls	r3, r3, #3
 800e610:	4413      	add	r3, r2
 800e612:	617b      	str	r3, [r7, #20]
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	697a      	ldr	r2, [r7, #20]
 800e618:	6812      	ldr	r2, [r2, #0]
 800e61a:	601a      	str	r2, [r3, #0]
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	791a      	ldrb	r2, [r3, #4]
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	711a      	strb	r2, [r3, #4]
  for (i = 0; i < wanted && i < nextra; i++)
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	3301      	adds	r3, #1
 800e628:	627b      	str	r3, [r7, #36]	; 0x24
 800e62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	429a      	cmp	r2, r3
 800e630:	da0d      	bge.n	800e64e <luaT_getvarargs+0xd0>
 800e632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	429a      	cmp	r2, r3
 800e638:	dbdf      	blt.n	800e5fa <luaT_getvarargs+0x7c>
  for (; i < wanted; i++)   /* complete required results with nil */
 800e63a:	e008      	b.n	800e64e <luaT_getvarargs+0xd0>
    setnilvalue(s2v(where + i));
 800e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63e:	00db      	lsls	r3, r3, #3
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	4413      	add	r3, r2
 800e644:	2200      	movs	r2, #0
 800e646:	711a      	strb	r2, [r3, #4]
  for (; i < wanted; i++)   /* complete required results with nil */
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	3301      	adds	r3, #1
 800e64c:	627b      	str	r3, [r7, #36]	; 0x24
 800e64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	429a      	cmp	r2, r3
 800e654:	dbf2      	blt.n	800e63c <luaT_getvarargs+0xbe>
}
 800e656:	bf00      	nop
 800e658:	bf00      	nop
 800e65a:	3728      	adds	r7, #40	; 0x28
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <l_strton>:
** If the value is not a string or is a string not representing
** a valid numeral (or if coercions from strings to numbers
** are disabled via macro 'cvt2num'), do not modify 'result'
** and return 0.
*/
static int l_strton (const TValue *obj, TValue *result) {
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  lua_assert(obj != result);
  if (!cvt2num(obj))  /* is object not a string? */
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	791b      	ldrb	r3, [r3, #4]
 800e66e:	f003 030f 	and.w	r3, r3, #15
 800e672:	2b04      	cmp	r3, #4
 800e674:	d001      	beq.n	800e67a <l_strton+0x1a>
    return 0;
 800e676:	2300      	movs	r3, #0
 800e678:	e01a      	b.n	800e6b0 <l_strton+0x50>
  else
    return (luaO_str2num(svalue(obj), result) == vslen(obj) + 1);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	3310      	adds	r3, #16
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	4618      	mov	r0, r3
 800e684:	f7fc fef2 	bl	800b46c <luaO_str2num>
 800e688:	4602      	mov	r2, r0
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	791b      	ldrb	r3, [r3, #4]
 800e690:	2b04      	cmp	r3, #4
 800e692:	d104      	bne.n	800e69e <l_strton+0x3e>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	79db      	ldrb	r3, [r3, #7]
 800e69a:	3301      	adds	r3, #1
 800e69c:	e003      	b.n	800e6a6 <l_strton+0x46>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	bf0c      	ite	eq
 800e6aa:	2301      	moveq	r3, #1
 800e6ac:	2300      	movne	r3, #0
 800e6ae:	b2db      	uxtb	r3, r3
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <luaV_tonumber_>:

/*
** Try to convert a value to a float. The float case is already handled
** by the macro 'tonumber'.
*/
int luaV_tonumber_ (const TValue *obj, lua_Number *n) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  TValue v;
  if (ttisinteger(obj)) {
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	791b      	ldrb	r3, [r3, #4]
 800e6c6:	2b03      	cmp	r3, #3
 800e6c8:	d10a      	bne.n	800e6e0 <luaV_tonumber_+0x28>
    *n = cast_num(ivalue(obj));
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	ee07 3a90 	vmov	s15, r3
 800e6d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e019      	b.n	800e714 <luaV_tonumber_+0x5c>
  }
  else if (l_strton(obj, &v)) {  /* string coercible to number? */
 800e6e0:	f107 0308 	add.w	r3, r7, #8
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7ff ffba 	bl	800e660 <l_strton>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00f      	beq.n	800e712 <luaV_tonumber_+0x5a>
    *n = nvalue(&v);  /* convert result of 'luaO_str2num' to a float */
 800e6f2:	7b3b      	ldrb	r3, [r7, #12]
 800e6f4:	2b03      	cmp	r3, #3
 800e6f6:	d105      	bne.n	800e704 <luaV_tonumber_+0x4c>
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	ee07 3a90 	vmov	s15, r3
 800e6fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e702:	e001      	b.n	800e708 <luaV_tonumber_+0x50>
 800e704:	edd7 7a02 	vldr	s15, [r7, #8]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 800e70e:	2301      	movs	r3, #1
 800e710:	e000      	b.n	800e714 <luaV_tonumber_+0x5c>
  }
  else
    return 0;  /* conversion failed */
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <luaV_flttointeger>:


/*
** try to convert a float to an integer, rounding according to 'mode'.
*/
int luaV_flttointeger (lua_Number n, lua_Integer *p, F2Imod mode) {
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af00      	add	r7, sp, #0
 800e722:	ed87 0a03 	vstr	s0, [r7, #12]
 800e726:	60b8      	str	r0, [r7, #8]
 800e728:	460b      	mov	r3, r1
 800e72a:	71fb      	strb	r3, [r7, #7]
  lua_Number f = l_floor(n);
 800e72c:	ed97 0a03 	vldr	s0, [r7, #12]
 800e730:	f00b fe44 	bl	801a3bc <floorf>
 800e734:	ed87 0a05 	vstr	s0, [r7, #20]
  if (n != f) {  /* not an integral value? */
 800e738:	ed97 7a03 	vldr	s14, [r7, #12]
 800e73c:	edd7 7a05 	vldr	s15, [r7, #20]
 800e740:	eeb4 7a67 	vcmp.f32	s14, s15
 800e744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e748:	d00f      	beq.n	800e76a <luaV_flttointeger+0x4e>
    if (mode == F2Ieq) return 0;  /* fails if mode demands integral value */
 800e74a:	79fb      	ldrb	r3, [r7, #7]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d101      	bne.n	800e754 <luaV_flttointeger+0x38>
 800e750:	2300      	movs	r3, #0
 800e752:	e027      	b.n	800e7a4 <luaV_flttointeger+0x88>
    else if (mode == F2Iceil)  /* needs ceil? */
 800e754:	79fb      	ldrb	r3, [r7, #7]
 800e756:	2b02      	cmp	r3, #2
 800e758:	d107      	bne.n	800e76a <luaV_flttointeger+0x4e>
      f += 1;  /* convert floor to ceil (remember: n != f) */
 800e75a:	edd7 7a05 	vldr	s15, [r7, #20]
 800e75e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e762:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e766:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  return lua_numbertointeger(f, p);
 800e76a:	edd7 7a05 	vldr	s15, [r7, #20]
 800e76e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800e7ac <luaV_flttointeger+0x90>
 800e772:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77a:	db12      	blt.n	800e7a2 <luaV_flttointeger+0x86>
 800e77c:	edd7 7a05 	vldr	s15, [r7, #20]
 800e780:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800e7b0 <luaV_flttointeger+0x94>
 800e784:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78c:	d509      	bpl.n	800e7a2 <luaV_flttointeger+0x86>
 800e78e:	edd7 7a05 	vldr	s15, [r7, #20]
 800e792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e796:	ee17 2a90 	vmov	r2, s15
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e000      	b.n	800e7a4 <luaV_flttointeger+0x88>
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	cf000000 	.word	0xcf000000
 800e7b0:	4f000000 	.word	0x4f000000

0800e7b4 <luaV_tointegerns>:
/*
** try to convert a value to an integer, rounding according to 'mode',
** without string coercion.
** ("Fast track" handled by macro 'tointegerns'.)
*/
int luaV_tointegerns (const TValue *obj, lua_Integer *p, F2Imod mode) {
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	4613      	mov	r3, r2
 800e7c0:	71fb      	strb	r3, [r7, #7]
  if (ttisfloat(obj))
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	791b      	ldrb	r3, [r3, #4]
 800e7c6:	2b13      	cmp	r3, #19
 800e7c8:	d10b      	bne.n	800e7e2 <luaV_tointegerns+0x2e>
    return luaV_flttointeger(fltvalue(obj), p, mode);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	edd3 7a00 	vldr	s15, [r3]
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	68b8      	ldr	r0, [r7, #8]
 800e7d6:	eeb0 0a67 	vmov.f32	s0, s15
 800e7da:	f7ff ff9f 	bl	800e71c <luaV_flttointeger>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	e00a      	b.n	800e7f8 <luaV_tointegerns+0x44>
  else if (ttisinteger(obj)) {
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	791b      	ldrb	r3, [r3, #4]
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d105      	bne.n	800e7f6 <luaV_tointegerns+0x42>
    *p = ivalue(obj);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	601a      	str	r2, [r3, #0]
    return 1;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e000      	b.n	800e7f8 <luaV_tointegerns+0x44>
  }
  else
    return 0;
 800e7f6:	2300      	movs	r3, #0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <luaV_tointeger>:


/*
** try to convert a value to an integer.
*/
int luaV_tointeger (const TValue *obj, lua_Integer *p, F2Imod mode) {
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	4613      	mov	r3, r2
 800e80c:	71fb      	strb	r3, [r7, #7]
  TValue v;
  if (l_strton(obj, &v))  /* does 'obj' point to a numerical string? */
 800e80e:	f107 0310 	add.w	r3, r7, #16
 800e812:	4619      	mov	r1, r3
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f7ff ff23 	bl	800e660 <l_strton>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d002      	beq.n	800e826 <luaV_tointeger+0x26>
    obj = &v;  /* change it to point to its corresponding number */
 800e820:	f107 0310 	add.w	r3, r7, #16
 800e824:	60fb      	str	r3, [r7, #12]
  return luaV_tointegerns(obj, p, mode);
 800e826:	79fb      	ldrb	r3, [r7, #7]
 800e828:	461a      	mov	r2, r3
 800e82a:	68b9      	ldr	r1, [r7, #8]
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f7ff ffc1 	bl	800e7b4 <luaV_tointegerns>
 800e832:	4603      	mov	r3, r0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3718      	adds	r7, #24
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <forlimit>:
** true to signal that. (For this latter case, no integer limit would be
** correct; even a limit of LUA_MININTEGER would run the loop once for
** an initial value equal to LUA_MININTEGER.)
*/
static int forlimit (lua_State *L, lua_Integer init, const TValue *lim,
                                   lua_Integer *p, lua_Integer step) {
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	603b      	str	r3, [r7, #0]
  if (!luaV_tointeger(lim, p, (step < 0 ? F2Iceil : F2Ifloor))) {
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	da01      	bge.n	800e854 <forlimit+0x18>
 800e850:	2302      	movs	r3, #2
 800e852:	e000      	b.n	800e856 <forlimit+0x1a>
 800e854:	2301      	movs	r3, #1
 800e856:	461a      	mov	r2, r3
 800e858:	6839      	ldr	r1, [r7, #0]
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7ff ffd0 	bl	800e800 <luaV_tointeger>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d135      	bne.n	800e8d2 <forlimit+0x96>
    /* not coercible to in integer */
    lua_Number flim;  /* try to convert to float */
    if (!tonumber(lim, &flim)) /* cannot convert to float? */
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	791b      	ldrb	r3, [r3, #4]
 800e86a:	2b13      	cmp	r3, #19
 800e86c:	d104      	bne.n	800e878 <forlimit+0x3c>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	617b      	str	r3, [r7, #20]
 800e874:	2300      	movs	r3, #0
 800e876:	e00b      	b.n	800e890 <forlimit+0x54>
 800e878:	f107 0314 	add.w	r3, r7, #20
 800e87c:	4619      	mov	r1, r3
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7ff ff1a 	bl	800e6b8 <luaV_tonumber_>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	bf0c      	ite	eq
 800e88a:	2301      	moveq	r3, #1
 800e88c:	2300      	movne	r3, #0
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	2b00      	cmp	r3, #0
 800e892:	d004      	beq.n	800e89e <forlimit+0x62>
      luaG_forerror(L, lim, "limit");
 800e894:	4a1b      	ldr	r2, [pc, #108]	; (800e904 <forlimit+0xc8>)
 800e896:	6879      	ldr	r1, [r7, #4]
 800e898:	68f8      	ldr	r0, [r7, #12]
 800e89a:	f7f8 fb9d 	bl	8006fd8 <luaG_forerror>
    /* else 'flim' is a float out of integer bounds */
    if (luai_numlt(0, flim)) {  /* if it is positive, it is too large */
 800e89e:	edd7 7a05 	vldr	s15, [r7, #20]
 800e8a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8aa:	dd09      	ble.n	800e8c0 <forlimit+0x84>
      if (step < 0) return 1;  /* initial value must be less than it */
 800e8ac:	6a3b      	ldr	r3, [r7, #32]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	da01      	bge.n	800e8b6 <forlimit+0x7a>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e021      	b.n	800e8fa <forlimit+0xbe>
      *p = LUA_MAXINTEGER;  /* truncate */
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e8bc:	601a      	str	r2, [r3, #0]
 800e8be:	e008      	b.n	800e8d2 <forlimit+0x96>
    }
    else {  /* it is less than min integer */
      if (step > 0) return 1;  /* initial value must be greater than it */
 800e8c0:	6a3b      	ldr	r3, [r7, #32]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	dd01      	ble.n	800e8ca <forlimit+0x8e>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e017      	b.n	800e8fa <forlimit+0xbe>
      *p = LUA_MININTEGER;  /* truncate */
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e8d0:	601a      	str	r2, [r3, #0]
    }
  }
  return (step > 0 ? init > *p : init < *p);  /* not to run? */
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	dd08      	ble.n	800e8ea <forlimit+0xae>
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	bfcc      	ite	gt
 800e8e2:	2301      	movgt	r3, #1
 800e8e4:	2300      	movle	r3, #0
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	e007      	b.n	800e8fa <forlimit+0xbe>
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	68ba      	ldr	r2, [r7, #8]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	bfb4      	ite	lt
 800e8f4:	2301      	movlt	r3, #1
 800e8f6:	2300      	movge	r3, #0
 800e8f8:	b2db      	uxtb	r3, r3
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3718      	adds	r7, #24
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	0801f0b0 	.word	0x0801f0b0

0800e908 <forprep>:
**   ra : internal index (safe copy of the control variable)
**   ra + 1 : loop counter (integer loops) or limit (float loops)
**   ra + 2 : step
**   ra + 3 : control variable
*/
static int forprep (lua_State *L, StkId ra) {
 800e908:	b580      	push	{r7, lr}
 800e90a:	b094      	sub	sp, #80	; 0x50
 800e90c:	af02      	add	r7, sp, #8
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  TValue *pinit = s2v(ra);
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	643b      	str	r3, [r7, #64]	; 0x40
  TValue *plimit = s2v(ra + 1);
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	3308      	adds	r3, #8
 800e91a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TValue *pstep = s2v(ra + 2);
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	3310      	adds	r3, #16
 800e920:	63bb      	str	r3, [r7, #56]	; 0x38
  if (ttisinteger(pinit) && ttisinteger(pstep)) { /* integer loop? */
 800e922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e924:	791b      	ldrb	r3, [r3, #4]
 800e926:	2b03      	cmp	r3, #3
 800e928:	d14c      	bne.n	800e9c4 <forprep+0xbc>
 800e92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92c:	791b      	ldrb	r3, [r3, #4]
 800e92e:	2b03      	cmp	r3, #3
 800e930:	d148      	bne.n	800e9c4 <forprep+0xbc>
    lua_Integer init = ivalue(pinit);
 800e932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	637b      	str	r3, [r7, #52]	; 0x34
    lua_Integer step = ivalue(pstep);
 800e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	633b      	str	r3, [r7, #48]	; 0x30
    lua_Integer limit;
    if (step == 0)
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	2b00      	cmp	r3, #0
 800e942:	d103      	bne.n	800e94c <forprep+0x44>
      luaG_runerror(L, "'for' step is zero");
 800e944:	4974      	ldr	r1, [pc, #464]	; (800eb18 <forprep+0x210>)
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7f8 fc39 	bl	80071be <luaG_runerror>
    setivalue(s2v(ra + 3), init);  /* control variable */
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	3318      	adds	r3, #24
 800e950:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e956:	601a      	str	r2, [r3, #0]
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	2203      	movs	r2, #3
 800e95c:	711a      	strb	r2, [r3, #4]
    if (forlimit(L, init, plimit, &limit, step))
 800e95e:	f107 0214 	add.w	r2, r7, #20
 800e962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	4613      	mov	r3, r2
 800e968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e96a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7ff ff65 	bl	800e83c <forlimit>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <forprep+0x74>
      return 1;  /* skip the loop */
 800e978:	2301      	movs	r3, #1
 800e97a:	e0c8      	b.n	800eb0e <forprep+0x206>
    else {  /* prepare loop counter */
      lua_Unsigned count;
      if (step > 0) {  /* ascending loop? */
 800e97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97e:	2b00      	cmp	r3, #0
 800e980:	dd0d      	ble.n	800e99e <forprep+0x96>
        count = l_castS2U(limit) - l_castS2U(init);
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	461a      	mov	r2, r3
 800e986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	647b      	str	r3, [r7, #68]	; 0x44
        if (step != 1)  /* avoid division in the too common case */
 800e98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d00f      	beq.n	800e9b2 <forprep+0xaa>
          count /= l_castS2U(step);
 800e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e996:	fbb2 f3f3 	udiv	r3, r2, r3
 800e99a:	647b      	str	r3, [r7, #68]	; 0x44
 800e99c:	e009      	b.n	800e9b2 <forprep+0xaa>
      }
      else {  /* step < 0; descending loop */
        count = l_castS2U(init) - l_castS2U(limit);
 800e99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	1a9b      	subs	r3, r3, r2
 800e9a4:	647b      	str	r3, [r7, #68]	; 0x44
        /* 'step+1' avoids negating 'mininteger' */
        count /= l_castS2U(-(step + 1)) + 1u;
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	425b      	negs	r3, r3
 800e9aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9b0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      /* store the counter in place of the limit (which won't be
         needed anymore) */
      setivalue(plimit, l_castU2S(count));
 800e9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	601a      	str	r2, [r3, #0]
 800e9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9be:	2203      	movs	r2, #3
 800e9c0:	711a      	strb	r2, [r3, #4]
  if (ttisinteger(pinit) && ttisinteger(pstep)) { /* integer loop? */
 800e9c2:	e0a3      	b.n	800eb0c <forprep+0x204>
    }
  }
  else {  /* try making all values floats */
    lua_Number init; lua_Number limit; lua_Number step;
    if (l_unlikely(!tonumber(plimit, &limit)))
 800e9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9c6:	791b      	ldrb	r3, [r3, #4]
 800e9c8:	2b13      	cmp	r3, #19
 800e9ca:	d104      	bne.n	800e9d6 <forprep+0xce>
 800e9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	60fb      	str	r3, [r7, #12]
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	e00b      	b.n	800e9ee <forprep+0xe6>
 800e9d6:	f107 030c 	add.w	r3, r7, #12
 800e9da:	4619      	mov	r1, r3
 800e9dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e9de:	f7ff fe6b 	bl	800e6b8 <luaV_tonumber_>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	bf0c      	ite	eq
 800e9e8:	2301      	moveq	r3, #1
 800e9ea:	2300      	movne	r3, #0
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d004      	beq.n	800e9fc <forprep+0xf4>
      luaG_forerror(L, plimit, "limit");
 800e9f2:	4a4a      	ldr	r2, [pc, #296]	; (800eb1c <forprep+0x214>)
 800e9f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7f8 faee 	bl	8006fd8 <luaG_forerror>
    if (l_unlikely(!tonumber(pstep, &step)))
 800e9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fe:	791b      	ldrb	r3, [r3, #4]
 800ea00:	2b13      	cmp	r3, #19
 800ea02:	d104      	bne.n	800ea0e <forprep+0x106>
 800ea04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60bb      	str	r3, [r7, #8]
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	e00b      	b.n	800ea26 <forprep+0x11e>
 800ea0e:	f107 0308 	add.w	r3, r7, #8
 800ea12:	4619      	mov	r1, r3
 800ea14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea16:	f7ff fe4f 	bl	800e6b8 <luaV_tonumber_>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	bf0c      	ite	eq
 800ea20:	2301      	moveq	r3, #1
 800ea22:	2300      	movne	r3, #0
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d004      	beq.n	800ea34 <forprep+0x12c>
      luaG_forerror(L, pstep, "step");
 800ea2a:	4a3d      	ldr	r2, [pc, #244]	; (800eb20 <forprep+0x218>)
 800ea2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7f8 fad2 	bl	8006fd8 <luaG_forerror>
    if (l_unlikely(!tonumber(pinit, &init)))
 800ea34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea36:	791b      	ldrb	r3, [r3, #4]
 800ea38:	2b13      	cmp	r3, #19
 800ea3a:	d104      	bne.n	800ea46 <forprep+0x13e>
 800ea3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	613b      	str	r3, [r7, #16]
 800ea42:	2300      	movs	r3, #0
 800ea44:	e00b      	b.n	800ea5e <forprep+0x156>
 800ea46:	f107 0310 	add.w	r3, r7, #16
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ea4e:	f7ff fe33 	bl	800e6b8 <luaV_tonumber_>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	bf0c      	ite	eq
 800ea58:	2301      	moveq	r3, #1
 800ea5a:	2300      	movne	r3, #0
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d004      	beq.n	800ea6c <forprep+0x164>
      luaG_forerror(L, pinit, "initial value");
 800ea62:	4a30      	ldr	r2, [pc, #192]	; (800eb24 <forprep+0x21c>)
 800ea64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f7f8 fab6 	bl	8006fd8 <luaG_forerror>
    if (step == 0)
 800ea6c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea70:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea78:	d103      	bne.n	800ea82 <forprep+0x17a>
      luaG_runerror(L, "'for' step is zero");
 800ea7a:	4927      	ldr	r1, [pc, #156]	; (800eb18 <forprep+0x210>)
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7f8 fb9e 	bl	80071be <luaG_runerror>
    if (luai_numlt(0, step) ? luai_numlt(limit, init)
 800ea82:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ea8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea8e:	dd0c      	ble.n	800eaaa <forprep+0x1a2>
 800ea90:	ed97 7a03 	vldr	s14, [r7, #12]
 800ea94:	edd7 7a04 	vldr	s15, [r7, #16]
 800ea98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa0:	bf4c      	ite	mi
 800eaa2:	2301      	movmi	r3, #1
 800eaa4:	2300      	movpl	r3, #0
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	e00b      	b.n	800eac2 <forprep+0x1ba>
 800eaaa:	ed97 7a04 	vldr	s14, [r7, #16]
 800eaae:	edd7 7a03 	vldr	s15, [r7, #12]
 800eab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaba:	bf4c      	ite	mi
 800eabc:	2301      	movmi	r3, #1
 800eabe:	2300      	movpl	r3, #0
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <forprep+0x1c2>
                            : luai_numlt(init, limit))
      return 1;  /* skip the loop */
 800eac6:	2301      	movs	r3, #1
 800eac8:	e021      	b.n	800eb0e <forprep+0x206>
    else {
      /* make sure internal values are all floats */
      setfltvalue(plimit, limit);
 800eaca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eacc:	627b      	str	r3, [r7, #36]	; 0x24
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	601a      	str	r2, [r3, #0]
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	2213      	movs	r2, #19
 800ead8:	711a      	strb	r2, [r3, #4]
      setfltvalue(pstep, step);
 800eada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eadc:	623b      	str	r3, [r7, #32]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	601a      	str	r2, [r3, #0]
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	2213      	movs	r2, #19
 800eae8:	711a      	strb	r2, [r3, #4]
      setfltvalue(s2v(ra), init);  /* internal index */
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	61fb      	str	r3, [r7, #28]
 800eaee:	693a      	ldr	r2, [r7, #16]
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	2213      	movs	r2, #19
 800eaf8:	711a      	strb	r2, [r3, #4]
      setfltvalue(s2v(ra + 3), init);  /* control variable */
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	3318      	adds	r3, #24
 800eafe:	61bb      	str	r3, [r7, #24]
 800eb00:	693a      	ldr	r2, [r7, #16]
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	601a      	str	r2, [r3, #0]
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	2213      	movs	r2, #19
 800eb0a:	711a      	strb	r2, [r3, #4]
    }
  }
  return 0;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3748      	adds	r7, #72	; 0x48
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	0801f0b8 	.word	0x0801f0b8
 800eb1c:	0801f0b0 	.word	0x0801f0b0
 800eb20:	0801f0cc 	.word	0x0801f0cc
 800eb24:	0801f0d4 	.word	0x0801f0d4

0800eb28 <floatforloop>:
/*
** Execute a step of a float numerical for loop, returning
** true iff the loop must continue. (The integer case is
** written online with opcode OP_FORLOOP, for performance.)
*/
static int floatforloop (StkId ra) {
 800eb28:	b480      	push	{r7}
 800eb2a:	b089      	sub	sp, #36	; 0x24
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  lua_Number step = fltvalue(s2v(ra + 2));
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3310      	adds	r3, #16
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	61fb      	str	r3, [r7, #28]
  lua_Number limit = fltvalue(s2v(ra + 1));
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	3308      	adds	r3, #8
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	61bb      	str	r3, [r7, #24]
  lua_Number idx = fltvalue(s2v(ra));  /* internal index */
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	617b      	str	r3, [r7, #20]
  idx = luai_numadd(L, idx, step);  /* increment index */
 800eb46:	ed97 7a05 	vldr	s14, [r7, #20]
 800eb4a:	edd7 7a07 	vldr	s15, [r7, #28]
 800eb4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb52:	edc7 7a05 	vstr	s15, [r7, #20]
  if (luai_numlt(0, step) ? luai_numle(idx, limit)
 800eb56:	edd7 7a07 	vldr	s15, [r7, #28]
 800eb5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb62:	dd0c      	ble.n	800eb7e <floatforloop+0x56>
 800eb64:	ed97 7a05 	vldr	s14, [r7, #20]
 800eb68:	edd7 7a06 	vldr	s15, [r7, #24]
 800eb6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb74:	bf94      	ite	ls
 800eb76:	2301      	movls	r3, #1
 800eb78:	2300      	movhi	r3, #0
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	e00b      	b.n	800eb96 <floatforloop+0x6e>
 800eb7e:	ed97 7a06 	vldr	s14, [r7, #24]
 800eb82:	edd7 7a05 	vldr	s15, [r7, #20]
 800eb86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8e:	bf94      	ite	ls
 800eb90:	2301      	movls	r3, #1
 800eb92:	2300      	movhi	r3, #0
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00f      	beq.n	800ebba <floatforloop+0x92>
                          : luai_numle(limit, idx)) {
    chgfltvalue(s2v(ra), idx);  /* update internal index */
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	613b      	str	r3, [r7, #16]
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	697a      	ldr	r2, [r7, #20]
 800eba2:	601a      	str	r2, [r3, #0]
    setfltvalue(s2v(ra + 3), idx);  /* and control variable */
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3318      	adds	r3, #24
 800eba8:	60fb      	str	r3, [r7, #12]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	697a      	ldr	r2, [r7, #20]
 800ebae:	601a      	str	r2, [r3, #0]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2213      	movs	r2, #19
 800ebb4:	711a      	strb	r2, [r3, #4]
    return 1;  /* jump back */
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e000      	b.n	800ebbc <floatforloop+0x94>
  }
  else
    return 0;  /* finish the loop */
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3724      	adds	r7, #36	; 0x24
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <luaV_finishget>:
** Finish the table access 'val = t[key]'.
** if 'slot' is NULL, 't' is not a table; otherwise, 'slot' points to
** t[k] entry (which must be empty).
*/
void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,
                      const TValue *slot) {
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b08a      	sub	sp, #40	; 0x28
 800ebcc:	af02      	add	r7, sp, #8
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
 800ebd4:	603b      	str	r3, [r7, #0]
  int loop;  /* counter to avoid infinite loops */
  const TValue *tm;  /* metamethod */
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	61fb      	str	r3, [r7, #28]
 800ebda:	e078      	b.n	800ecce <luaV_finishget+0x106>
    if (slot == NULL) {  /* 't' is not a table? */
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d115      	bne.n	800ec0e <luaV_finishget+0x46>
      lua_assert(!ttistable(t));
      tm = luaT_gettmbyobj(L, t, TM_INDEX);
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	68b9      	ldr	r1, [r7, #8]
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f7ff f9ca 	bl	800df80 <luaT_gettmbyobj>
 800ebec:	61b8      	str	r0, [r7, #24]
      if (l_unlikely(notm(tm)))
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	791b      	ldrb	r3, [r3, #4]
 800ebf2:	f003 030f 	and.w	r3, r3, #15
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	bf0c      	ite	eq
 800ebfa:	2301      	moveq	r3, #1
 800ebfc:	2300      	movne	r3, #0
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d029      	beq.n	800ec58 <luaV_finishget+0x90>
        luaG_typeerror(L, t, "index");  /* no metamethod */
 800ec04:	4a37      	ldr	r2, [pc, #220]	; (800ece4 <luaV_finishget+0x11c>)
 800ec06:	68b9      	ldr	r1, [r7, #8]
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f7f8 f9a9 	bl	8006f60 <luaG_typeerror>
      /* else will try the metamethod */
    }
    else {  /* 't' is a table */
      lua_assert(isempty(slot));
      tm = fasttm(L, hvalue(t)->metatable, TM_INDEX);  /* table's metamethod */
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	699b      	ldr	r3, [r3, #24]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d016      	beq.n	800ec46 <luaV_finishget+0x7e>
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	699b      	ldr	r3, [r3, #24]
 800ec1e:	799b      	ldrb	r3, [r3, #6]
 800ec20:	f003 0301 	and.w	r3, r3, #1
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10c      	bne.n	800ec42 <luaV_finishget+0x7a>
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	6998      	ldr	r0, [r3, #24]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ec36:	461a      	mov	r2, r3
 800ec38:	2100      	movs	r1, #0
 800ec3a:	f7ff f97d 	bl	800df38 <luaT_gettm>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	e002      	b.n	800ec48 <luaV_finishget+0x80>
 800ec42:	2300      	movs	r3, #0
 800ec44:	e000      	b.n	800ec48 <luaV_finishget+0x80>
 800ec46:	2300      	movs	r3, #0
 800ec48:	61bb      	str	r3, [r7, #24]
      if (tm == NULL) {  /* no metamethod? */
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d103      	bne.n	800ec58 <luaV_finishget+0x90>
        setnilvalue(s2v(val));  /* result is nil */
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	2200      	movs	r2, #0
 800ec54:	711a      	strb	r2, [r3, #4]
        return;
 800ec56:	e042      	b.n	800ecde <luaV_finishget+0x116>
      }
      /* else will try the metamethod */
    }
    if (ttisfunction(tm)) {  /* is metamethod a function? */
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	791b      	ldrb	r3, [r3, #4]
 800ec5c:	f003 030f 	and.w	r3, r3, #15
 800ec60:	2b06      	cmp	r3, #6
 800ec62:	d108      	bne.n	800ec76 <luaV_finishget+0xae>
      luaT_callTMres(L, tm, t, key, val);  /* call it */
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	69b9      	ldr	r1, [r7, #24]
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f7ff fa5a 	bl	800e128 <luaT_callTMres>
      return;
 800ec74:	e033      	b.n	800ecde <luaV_finishget+0x116>
    }
    t = tm;  /* else try to access 'tm[key]' */
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	60bb      	str	r3, [r7, #8]
    if (luaV_fastget(L, t, key, slot, luaH_get)) {  /* fast track? */
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	791b      	ldrb	r3, [r3, #4]
 800ec7e:	2b45      	cmp	r3, #69	; 0x45
 800ec80:	d003      	beq.n	800ec8a <luaV_finishget+0xc2>
 800ec82:	2300      	movs	r3, #0
 800ec84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec86:	2300      	movs	r3, #0
 800ec88:	e00f      	b.n	800ecaa <luaV_finishget+0xe2>
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	6879      	ldr	r1, [r7, #4]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7fe ff1b 	bl	800dacc <luaH_get>
 800ec96:	62b8      	str	r0, [r7, #40]	; 0x28
 800ec98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9a:	791b      	ldrb	r3, [r3, #4]
 800ec9c:	f003 030f 	and.w	r3, r3, #15
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	bf14      	ite	ne
 800eca4:	2301      	movne	r3, #1
 800eca6:	2300      	moveq	r3, #0
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d00c      	beq.n	800ecc8 <luaV_finishget+0x100>
      setobj2s(L, val, slot);  /* done */
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	617b      	str	r3, [r7, #20]
 800ecb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb4:	613b      	str	r3, [r7, #16]
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	6812      	ldr	r2, [r2, #0]
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	791a      	ldrb	r2, [r3, #4]
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	711a      	strb	r2, [r3, #4]
      return;
 800ecc6:	e00a      	b.n	800ecde <luaV_finishget+0x116>
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	3301      	adds	r3, #1
 800eccc:	61fb      	str	r3, [r7, #28]
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ecd4:	db82      	blt.n	800ebdc <luaV_finishget+0x14>
    }
    /* else repeat (tail call 'luaV_finishget') */
  }
  luaG_runerror(L, "'__index' chain too long; possible loop");
 800ecd6:	4904      	ldr	r1, [pc, #16]	; (800ece8 <luaV_finishget+0x120>)
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f7f8 fa70 	bl	80071be <luaG_runerror>
}
 800ecde:	3720      	adds	r7, #32
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	0801f0e4 	.word	0x0801f0e4
 800ece8:	0801f0ec 	.word	0x0801f0ec

0800ecec <luaV_finishset>:
** to the entry 't[key]', or to a value with an absent key if there
** is no such entry.  (The value at 'slot' must be empty, otherwise
** 'luaV_fastget' would have done the job.)
*/
void luaV_finishset (lua_State *L, const TValue *t, TValue *key,
                     TValue *val, const TValue *slot) {
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b08c      	sub	sp, #48	; 0x30
 800ecf0:	af02      	add	r7, sp, #8
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	607a      	str	r2, [r7, #4]
 800ecf8:	603b      	str	r3, [r7, #0]
  int loop;  /* counter to avoid infinite loops */
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	627b      	str	r3, [r7, #36]	; 0x24
 800ecfe:	e0b8      	b.n	800ee72 <luaV_finishset+0x186>
    const TValue *tm;  /* '__newindex' metamethod */
    if (slot != NULL) {  /* is 't' a table? */
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d04a      	beq.n	800ed9c <luaV_finishset+0xb0>
      Table *h = hvalue(t);  /* save 't' table */
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	61fb      	str	r3, [r7, #28]
      lua_assert(isempty(slot));  /* slot must be empty */
      tm = fasttm(L, h->metatable, TM_NEWINDEX);  /* get metamethod */
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	699b      	ldr	r3, [r3, #24]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d014      	beq.n	800ed3e <luaV_finishset+0x52>
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	799b      	ldrb	r3, [r3, #6]
 800ed1a:	f003 0302 	and.w	r3, r3, #2
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10b      	bne.n	800ed3a <luaV_finishset+0x4e>
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	6998      	ldr	r0, [r3, #24]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ed2e:	461a      	mov	r2, r3
 800ed30:	2101      	movs	r1, #1
 800ed32:	f7ff f901 	bl	800df38 <luaT_gettm>
 800ed36:	4603      	mov	r3, r0
 800ed38:	e002      	b.n	800ed40 <luaV_finishset+0x54>
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	e000      	b.n	800ed40 <luaV_finishset+0x54>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	623b      	str	r3, [r7, #32]
      if (tm == NULL) {  /* no metamethod? */
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d13f      	bne.n	800edc8 <luaV_finishset+0xdc>
        luaH_finishset(L, h, key, slot, val);  /* set new value */
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	69f9      	ldr	r1, [r7, #28]
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f7fe ff24 	bl	800dba0 <luaH_finishset>
        invalidateTMcache(h);
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	799b      	ldrb	r3, [r3, #6]
 800ed5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	719a      	strb	r2, [r3, #6]
        luaC_barrierback(L, obj2gco(h), val);
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	791b      	ldrb	r3, [r3, #4]
 800ed6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f000 8088 	beq.w	800ee84 <luaV_finishset+0x198>
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	795b      	ldrb	r3, [r3, #5]
 800ed78:	f003 0320 	and.w	r3, r3, #32
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f000 8081 	beq.w	800ee84 <luaV_finishset+0x198>
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	795b      	ldrb	r3, [r3, #5]
 800ed88:	f003 0318 	and.w	r3, r3, #24
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d079      	beq.n	800ee84 <luaV_finishset+0x198>
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	4619      	mov	r1, r3
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f7f9 feb3 	bl	8008b00 <luaC_barrierback_>
        return;
 800ed9a:	e073      	b.n	800ee84 <luaV_finishset+0x198>
      }
      /* else will try the metamethod */
    }
    else {  /* not a table; check metamethod */
      tm = luaT_gettmbyobj(L, t, TM_NEWINDEX);
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	68b9      	ldr	r1, [r7, #8]
 800eda0:	68f8      	ldr	r0, [r7, #12]
 800eda2:	f7ff f8ed 	bl	800df80 <luaT_gettmbyobj>
 800eda6:	6238      	str	r0, [r7, #32]
      if (l_unlikely(notm(tm)))
 800eda8:	6a3b      	ldr	r3, [r7, #32]
 800edaa:	791b      	ldrb	r3, [r3, #4]
 800edac:	f003 030f 	and.w	r3, r3, #15
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	bf0c      	ite	eq
 800edb4:	2301      	moveq	r3, #1
 800edb6:	2300      	movne	r3, #0
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d004      	beq.n	800edc8 <luaV_finishset+0xdc>
        luaG_typeerror(L, t, "index");
 800edbe:	4a34      	ldr	r2, [pc, #208]	; (800ee90 <luaV_finishset+0x1a4>)
 800edc0:	68b9      	ldr	r1, [r7, #8]
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f7f8 f8cc 	bl	8006f60 <luaG_typeerror>
    }
    /* try the metamethod */
    if (ttisfunction(tm)) {
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	791b      	ldrb	r3, [r3, #4]
 800edcc:	f003 030f 	and.w	r3, r3, #15
 800edd0:	2b06      	cmp	r3, #6
 800edd2:	d108      	bne.n	800ede6 <luaV_finishset+0xfa>
      luaT_callTM(L, tm, t, key, val);
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	6a39      	ldr	r1, [r7, #32]
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f7ff f94a 	bl	800e078 <luaT_callTM>
      return;
 800ede4:	e051      	b.n	800ee8a <luaV_finishset+0x19e>
    }
    t = tm;  /* else repeat assignment over 'tm' */
 800ede6:	6a3b      	ldr	r3, [r7, #32]
 800ede8:	60bb      	str	r3, [r7, #8]
    if (luaV_fastget(L, t, key, slot, luaH_get)) {
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	791b      	ldrb	r3, [r3, #4]
 800edee:	2b45      	cmp	r3, #69	; 0x45
 800edf0:	d003      	beq.n	800edfa <luaV_finishset+0x10e>
 800edf2:	2300      	movs	r3, #0
 800edf4:	633b      	str	r3, [r7, #48]	; 0x30
 800edf6:	2300      	movs	r3, #0
 800edf8:	e00f      	b.n	800ee1a <luaV_finishset+0x12e>
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	6879      	ldr	r1, [r7, #4]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7fe fe63 	bl	800dacc <luaH_get>
 800ee06:	6338      	str	r0, [r7, #48]	; 0x30
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	791b      	ldrb	r3, [r3, #4]
 800ee0c:	f003 030f 	and.w	r3, r3, #15
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	bf14      	ite	ne
 800ee14:	2301      	movne	r3, #1
 800ee16:	2300      	moveq	r3, #0
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d026      	beq.n	800ee6c <luaV_finishset+0x180>
      luaV_finishfastset(L, t, slot, val);
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee20:	61bb      	str	r3, [r7, #24]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	617b      	str	r3, [r7, #20]
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	6812      	ldr	r2, [r2, #0]
 800ee2c:	601a      	str	r2, [r3, #0]
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	791a      	ldrb	r2, [r3, #4]
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	711a      	strb	r2, [r3, #4]
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	791b      	ldrb	r3, [r3, #4]
 800ee3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d022      	beq.n	800ee88 <luaV_finishset+0x19c>
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	795b      	ldrb	r3, [r3, #5]
 800ee48:	f003 0320 	and.w	r3, r3, #32
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d01b      	beq.n	800ee88 <luaV_finishset+0x19c>
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	795b      	ldrb	r3, [r3, #5]
 800ee56:	f003 0318 	and.w	r3, r3, #24
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d014      	beq.n	800ee88 <luaV_finishset+0x19c>
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4619      	mov	r1, r3
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f7f9 fe4b 	bl	8008b00 <luaC_barrierback_>
      return;  /* done */
 800ee6a:	e00d      	b.n	800ee88 <luaV_finishset+0x19c>
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	3301      	adds	r3, #1
 800ee70:	627b      	str	r3, [r7, #36]	; 0x24
 800ee72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ee78:	f6ff af42 	blt.w	800ed00 <luaV_finishset+0x14>
    }
    /* else 'return luaV_finishset(L, t, key, val, slot)' (loop) */
  }
  luaG_runerror(L, "'__newindex' chain too long; possible loop");
 800ee7c:	4905      	ldr	r1, [pc, #20]	; (800ee94 <luaV_finishset+0x1a8>)
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f7f8 f99d 	bl	80071be <luaG_runerror>
        return;
 800ee84:	bf00      	nop
 800ee86:	e000      	b.n	800ee8a <luaV_finishset+0x19e>
      return;  /* done */
 800ee88:	bf00      	nop
}
 800ee8a:	3728      	adds	r7, #40	; 0x28
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	0801f0e4 	.word	0x0801f0e4
 800ee94:	0801f114 	.word	0x0801f114

0800ee98 <l_strcmp>:
** -greater than zero if 'ls' is less-equal-greater than 'rs'.
** The code is a little tricky because it allows '\0' in the strings
** and it uses 'strcoll' (to respect locales) for each segments
** of the strings.
*/
static int l_strcmp (const TString *ls, const TString *rs) {
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b088      	sub	sp, #32
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
  const char *l = getstr(ls);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	3310      	adds	r3, #16
 800eea6:	61fb      	str	r3, [r7, #28]
  size_t ll = tsslen(ls);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	791b      	ldrb	r3, [r3, #4]
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	d102      	bne.n	800eeb6 <l_strcmp+0x1e>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	79db      	ldrb	r3, [r3, #7]
 800eeb4:	e001      	b.n	800eeba <l_strcmp+0x22>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	61bb      	str	r3, [r7, #24]
  const char *r = getstr(rs);
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	3310      	adds	r3, #16
 800eec0:	617b      	str	r3, [r7, #20]
  size_t lr = tsslen(rs);
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	791b      	ldrb	r3, [r3, #4]
 800eec6:	2b04      	cmp	r3, #4
 800eec8:	d102      	bne.n	800eed0 <l_strcmp+0x38>
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	79db      	ldrb	r3, [r3, #7]
 800eece:	e001      	b.n	800eed4 <l_strcmp+0x3c>
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	613b      	str	r3, [r7, #16]
  for (;;) {  /* for each segment */
    int temp = strcoll(l, r);
 800eed6:	6979      	ldr	r1, [r7, #20]
 800eed8:	69f8      	ldr	r0, [r7, #28]
 800eeda:	f00d f88f 	bl	801bffc <strcoll>
 800eede:	60f8      	str	r0, [r7, #12]
    if (temp != 0)  /* not equal? */
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <l_strcmp+0x52>
      return temp;  /* done */
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	e02a      	b.n	800ef40 <l_strcmp+0xa8>
    else {  /* strings are equal up to a '\0' */
      size_t len = strlen(l);  /* index of first '\0' in both strings */
 800eeea:	69f8      	ldr	r0, [r7, #28]
 800eeec:	f7f1 f9d8 	bl	80002a0 <strlen>
 800eef0:	60b8      	str	r0, [r7, #8]
      if (len == lr)  /* 'rs' is finished? */
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d107      	bne.n	800ef0a <l_strcmp+0x72>
        return (len == ll) ? 0 : 1;  /* check 'ls' */
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	bf14      	ite	ne
 800ef02:	2301      	movne	r3, #1
 800ef04:	2300      	moveq	r3, #0
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	e01a      	b.n	800ef40 <l_strcmp+0xa8>
      else if (len == ll)  /* 'ls' is finished? */
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d102      	bne.n	800ef18 <l_strcmp+0x80>
        return -1;  /* 'ls' is less than 'rs' ('rs' is not finished) */
 800ef12:	f04f 33ff 	mov.w	r3, #4294967295
 800ef16:	e013      	b.n	800ef40 <l_strcmp+0xa8>
      /* both strings longer than 'len'; go on comparing after the '\0' */
      len++;
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	60bb      	str	r3, [r7, #8]
      l += len; ll -= len; r += len; lr -= len;
 800ef1e:	69fa      	ldr	r2, [r7, #28]
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	4413      	add	r3, r2
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	69ba      	ldr	r2, [r7, #24]
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	61bb      	str	r3, [r7, #24]
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	4413      	add	r3, r2
 800ef34:	617b      	str	r3, [r7, #20]
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	613b      	str	r3, [r7, #16]
  for (;;) {  /* for each segment */
 800ef3e:	e7ca      	b.n	800eed6 <l_strcmp+0x3e>
    }
  }
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3720      	adds	r7, #32
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <LTintfloat>:
** (The test with 'l_intfitsf' is only for performance; the else
** case is correct for all values, but it is slow due to the conversion
** from float to int.)
** When 'f' is NaN, comparisons must result in false.
*/
l_sinline int LTintfloat (lua_Integer i, lua_Number f) {
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	ed87 0a00 	vstr	s0, [r7]
  if (l_intfitsf(i))
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800ef5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef5e:	d80f      	bhi.n	800ef80 <LTintfloat+0x38>
    return luai_numlt(cast_num(i), f);  /* compare them as floats */
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	ee07 3a90 	vmov	s15, r3
 800ef66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef6a:	ed97 7a00 	vldr	s14, [r7]
 800ef6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef76:	bfcc      	ite	gt
 800ef78:	2301      	movgt	r3, #1
 800ef7a:	2300      	movle	r3, #0
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	e01c      	b.n	800efba <LTintfloat+0x72>
  else {  /* i < f <=> i < ceil(f) */
    lua_Integer fi;
    if (luaV_flttointeger(f, &fi, F2Iceil))  /* fi = ceil(f) */
 800ef80:	f107 030c 	add.w	r3, r7, #12
 800ef84:	2102      	movs	r1, #2
 800ef86:	4618      	mov	r0, r3
 800ef88:	ed97 0a00 	vldr	s0, [r7]
 800ef8c:	f7ff fbc6 	bl	800e71c <luaV_flttointeger>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d007      	beq.n	800efa6 <LTintfloat+0x5e>
      return i < fi;   /* compare them as integers */
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	bfb4      	ite	lt
 800ef9e:	2301      	movlt	r3, #1
 800efa0:	2300      	movge	r3, #0
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	e009      	b.n	800efba <LTintfloat+0x72>
    else  /* 'f' is either greater or less than all integers */
      return f > 0;  /* greater? */
 800efa6:	edd7 7a00 	vldr	s15, [r7]
 800efaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	bfcc      	ite	gt
 800efb4:	2301      	movgt	r3, #1
 800efb6:	2300      	movle	r3, #0
 800efb8:	b2db      	uxtb	r3, r3
  }
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <LEintfloat>:

/*
** Check whether integer 'i' is less than or equal to float 'f'.
** See comments on previous function.
*/
l_sinline int LEintfloat (lua_Integer i, lua_Number f) {
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b084      	sub	sp, #16
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
 800efca:	ed87 0a00 	vstr	s0, [r7]
  if (l_intfitsf(i))
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800efd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efd8:	d80f      	bhi.n	800effa <LEintfloat+0x38>
    return luai_numle(cast_num(i), f);  /* compare them as floats */
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	ee07 3a90 	vmov	s15, r3
 800efe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efe4:	ed97 7a00 	vldr	s14, [r7]
 800efe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800efec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff0:	bfac      	ite	ge
 800eff2:	2301      	movge	r3, #1
 800eff4:	2300      	movlt	r3, #0
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	e01c      	b.n	800f034 <LEintfloat+0x72>
  else {  /* i <= f <=> i <= floor(f) */
    lua_Integer fi;
    if (luaV_flttointeger(f, &fi, F2Ifloor))  /* fi = floor(f) */
 800effa:	f107 030c 	add.w	r3, r7, #12
 800effe:	2101      	movs	r1, #1
 800f000:	4618      	mov	r0, r3
 800f002:	ed97 0a00 	vldr	s0, [r7]
 800f006:	f7ff fb89 	bl	800e71c <luaV_flttointeger>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d007      	beq.n	800f020 <LEintfloat+0x5e>
      return i <= fi;   /* compare them as integers */
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	429a      	cmp	r2, r3
 800f016:	bfd4      	ite	le
 800f018:	2301      	movle	r3, #1
 800f01a:	2300      	movgt	r3, #0
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	e009      	b.n	800f034 <LEintfloat+0x72>
    else  /* 'f' is either greater or less than all integers */
      return f > 0;  /* greater? */
 800f020:	edd7 7a00 	vldr	s15, [r7]
 800f024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02c:	bfcc      	ite	gt
 800f02e:	2301      	movgt	r3, #1
 800f030:	2300      	movle	r3, #0
 800f032:	b2db      	uxtb	r3, r3
  }
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <LTfloatint>:

/*
** Check whether float 'f' is less than integer 'i'.
** See comments on previous function.
*/
l_sinline int LTfloatint (lua_Number f, lua_Integer i) {
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	ed87 0a01 	vstr	s0, [r7, #4]
 800f046:	6038      	str	r0, [r7, #0]
  if (l_intfitsf(i))
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800f04e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f052:	d80f      	bhi.n	800f074 <LTfloatint+0x38>
    return luai_numlt(f, cast_num(i));  /* compare them as floats */
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	ee07 3a90 	vmov	s15, r3
 800f05a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f05e:	ed97 7a01 	vldr	s14, [r7, #4]
 800f062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f06a:	bf4c      	ite	mi
 800f06c:	2301      	movmi	r3, #1
 800f06e:	2300      	movpl	r3, #0
 800f070:	b2db      	uxtb	r3, r3
 800f072:	e01c      	b.n	800f0ae <LTfloatint+0x72>
  else {  /* f < i <=> floor(f) < i */
    lua_Integer fi;
    if (luaV_flttointeger(f, &fi, F2Ifloor))  /* fi = floor(f) */
 800f074:	f107 030c 	add.w	r3, r7, #12
 800f078:	2101      	movs	r1, #1
 800f07a:	4618      	mov	r0, r3
 800f07c:	ed97 0a01 	vldr	s0, [r7, #4]
 800f080:	f7ff fb4c 	bl	800e71c <luaV_flttointeger>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d007      	beq.n	800f09a <LTfloatint+0x5e>
      return fi < i;   /* compare them as integers */
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	429a      	cmp	r2, r3
 800f090:	bfcc      	ite	gt
 800f092:	2301      	movgt	r3, #1
 800f094:	2300      	movle	r3, #0
 800f096:	b2db      	uxtb	r3, r3
 800f098:	e009      	b.n	800f0ae <LTfloatint+0x72>
    else  /* 'f' is either greater or less than all integers */
      return f < 0;  /* less? */
 800f09a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f09e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a6:	bf4c      	ite	mi
 800f0a8:	2301      	movmi	r3, #1
 800f0aa:	2300      	movpl	r3, #0
 800f0ac:	b2db      	uxtb	r3, r3
  }
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <LEfloatint>:

/*
** Check whether float 'f' is less than or equal to integer 'i'.
** See comments on previous function.
*/
l_sinline int LEfloatint (lua_Number f, lua_Integer i) {
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b084      	sub	sp, #16
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	ed87 0a01 	vstr	s0, [r7, #4]
 800f0c0:	6038      	str	r0, [r7, #0]
  if (l_intfitsf(i))
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800f0c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0cc:	d80f      	bhi.n	800f0ee <LEfloatint+0x38>
    return luai_numle(f, cast_num(i));  /* compare them as floats */
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	ee07 3a90 	vmov	s15, r3
 800f0d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0d8:	ed97 7a01 	vldr	s14, [r7, #4]
 800f0dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e4:	bf94      	ite	ls
 800f0e6:	2301      	movls	r3, #1
 800f0e8:	2300      	movhi	r3, #0
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	e01c      	b.n	800f128 <LEfloatint+0x72>
  else {  /* f <= i <=> ceil(f) <= i */
    lua_Integer fi;
    if (luaV_flttointeger(f, &fi, F2Iceil))  /* fi = ceil(f) */
 800f0ee:	f107 030c 	add.w	r3, r7, #12
 800f0f2:	2102      	movs	r1, #2
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	ed97 0a01 	vldr	s0, [r7, #4]
 800f0fa:	f7ff fb0f 	bl	800e71c <luaV_flttointeger>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d007      	beq.n	800f114 <LEfloatint+0x5e>
      return fi <= i;   /* compare them as integers */
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	bfac      	ite	ge
 800f10c:	2301      	movge	r3, #1
 800f10e:	2300      	movlt	r3, #0
 800f110:	b2db      	uxtb	r3, r3
 800f112:	e009      	b.n	800f128 <LEfloatint+0x72>
    else  /* 'f' is either greater or less than all integers */
      return f < 0;  /* less? */
 800f114:	edd7 7a01 	vldr	s15, [r7, #4]
 800f118:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f120:	bf4c      	ite	mi
 800f122:	2301      	movmi	r3, #1
 800f124:	2300      	movpl	r3, #0
 800f126:	b2db      	uxtb	r3, r3
  }
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <LTnum>:


/*
** Return 'l < r', for numbers.
*/
l_sinline int LTnum (const TValue *l, const TValue *r) {
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  lua_assert(ttisnumber(l) && ttisnumber(r));
  if (ttisinteger(l)) {
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	791b      	ldrb	r3, [r3, #4]
 800f13e:	2b03      	cmp	r3, #3
 800f140:	d119      	bne.n	800f176 <LTnum+0x46>
    lua_Integer li = ivalue(l);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	60bb      	str	r3, [r7, #8]
    if (ttisinteger(r))
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	791b      	ldrb	r3, [r3, #4]
 800f14c:	2b03      	cmp	r3, #3
 800f14e:	d108      	bne.n	800f162 <LTnum+0x32>
      return li < ivalue(r);  /* both are integers */
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	68ba      	ldr	r2, [r7, #8]
 800f156:	429a      	cmp	r2, r3
 800f158:	bfb4      	ite	lt
 800f15a:	2301      	movlt	r3, #1
 800f15c:	2300      	movge	r3, #0
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	e026      	b.n	800f1b0 <LTnum+0x80>
    else  /* 'l' is int and 'r' is float */
      return LTintfloat(li, fltvalue(r));  /* l < r ? */
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	edd3 7a00 	vldr	s15, [r3]
 800f168:	eeb0 0a67 	vmov.f32	s0, s15
 800f16c:	68b8      	ldr	r0, [r7, #8]
 800f16e:	f7ff feeb 	bl	800ef48 <LTintfloat>
 800f172:	4603      	mov	r3, r0
 800f174:	e01c      	b.n	800f1b0 <LTnum+0x80>
  }
  else {
    lua_Number lf = fltvalue(l);  /* 'l' must be float */
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	60fb      	str	r3, [r7, #12]
    if (ttisfloat(r))
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	791b      	ldrb	r3, [r3, #4]
 800f180:	2b13      	cmp	r3, #19
 800f182:	d10d      	bne.n	800f1a0 <LTnum+0x70>
      return luai_numlt(lf, fltvalue(r));  /* both are float */
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	edd3 7a00 	vldr	s15, [r3]
 800f18a:	ed97 7a03 	vldr	s14, [r7, #12]
 800f18e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f196:	bf4c      	ite	mi
 800f198:	2301      	movmi	r3, #1
 800f19a:	2300      	movpl	r3, #0
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	e007      	b.n	800f1b0 <LTnum+0x80>
    else  /* 'l' is float and 'r' is int */
      return LTfloatint(lf, ivalue(r));
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	ed97 0a03 	vldr	s0, [r7, #12]
 800f1aa:	f7ff ff47 	bl	800f03c <LTfloatint>
 800f1ae:	4603      	mov	r3, r0
  }
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3710      	adds	r7, #16
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <LEnum>:


/*
** Return 'l <= r', for numbers.
*/
l_sinline int LEnum (const TValue *l, const TValue *r) {
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  lua_assert(ttisnumber(l) && ttisnumber(r));
  if (ttisinteger(l)) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	791b      	ldrb	r3, [r3, #4]
 800f1c6:	2b03      	cmp	r3, #3
 800f1c8:	d119      	bne.n	800f1fe <LEnum+0x46>
    lua_Integer li = ivalue(l);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	60bb      	str	r3, [r7, #8]
    if (ttisinteger(r))
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	791b      	ldrb	r3, [r3, #4]
 800f1d4:	2b03      	cmp	r3, #3
 800f1d6:	d108      	bne.n	800f1ea <LEnum+0x32>
      return li <= ivalue(r);  /* both are integers */
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	bfd4      	ite	le
 800f1e2:	2301      	movle	r3, #1
 800f1e4:	2300      	movgt	r3, #0
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	e026      	b.n	800f238 <LEnum+0x80>
    else  /* 'l' is int and 'r' is float */
      return LEintfloat(li, fltvalue(r));  /* l <= r ? */
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	edd3 7a00 	vldr	s15, [r3]
 800f1f0:	eeb0 0a67 	vmov.f32	s0, s15
 800f1f4:	68b8      	ldr	r0, [r7, #8]
 800f1f6:	f7ff fee4 	bl	800efc2 <LEintfloat>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	e01c      	b.n	800f238 <LEnum+0x80>
  }
  else {
    lua_Number lf = fltvalue(l);  /* 'l' must be float */
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	60fb      	str	r3, [r7, #12]
    if (ttisfloat(r))
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	791b      	ldrb	r3, [r3, #4]
 800f208:	2b13      	cmp	r3, #19
 800f20a:	d10d      	bne.n	800f228 <LEnum+0x70>
      return luai_numle(lf, fltvalue(r));  /* both are float */
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	edd3 7a00 	vldr	s15, [r3]
 800f212:	ed97 7a03 	vldr	s14, [r7, #12]
 800f216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f21e:	bf94      	ite	ls
 800f220:	2301      	movls	r3, #1
 800f222:	2300      	movhi	r3, #0
 800f224:	b2db      	uxtb	r3, r3
 800f226:	e007      	b.n	800f238 <LEnum+0x80>
    else  /* 'l' is float and 'r' is int */
      return LEfloatint(lf, ivalue(r));
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4618      	mov	r0, r3
 800f22e:	ed97 0a03 	vldr	s0, [r7, #12]
 800f232:	f7ff ff40 	bl	800f0b6 <LEfloatint>
 800f236:	4603      	mov	r3, r0
  }
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3710      	adds	r7, #16
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <lessthanothers>:


/*
** return 'l < r' for non-numbers.
*/
static int lessthanothers (lua_State *L, const TValue *l, const TValue *r) {
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
  lua_assert(!ttisnumber(l) || !ttisnumber(r));
  if (ttisstring(l) && ttisstring(r))  /* both are strings? */
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	791b      	ldrb	r3, [r3, #4]
 800f250:	f003 030f 	and.w	r3, r3, #15
 800f254:	2b04      	cmp	r3, #4
 800f256:	d112      	bne.n	800f27e <lessthanothers+0x3e>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	791b      	ldrb	r3, [r3, #4]
 800f25c:	f003 030f 	and.w	r3, r3, #15
 800f260:	2b04      	cmp	r3, #4
 800f262:	d10c      	bne.n	800f27e <lessthanothers+0x3e>
    return l_strcmp(tsvalue(l), tsvalue(r)) < 0;
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	461a      	mov	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4619      	mov	r1, r3
 800f270:	4610      	mov	r0, r2
 800f272:	f7ff fe11 	bl	800ee98 <l_strcmp>
 800f276:	4603      	mov	r3, r0
 800f278:	0fdb      	lsrs	r3, r3, #31
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	e006      	b.n	800f28c <lessthanothers+0x4c>
  else
    return luaT_callorderTM(L, l, r, TM_LT);
 800f27e:	2314      	movs	r3, #20
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	68b9      	ldr	r1, [r7, #8]
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7ff f898 	bl	800e3ba <luaT_callorderTM>
 800f28a:	4603      	mov	r3, r0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3710      	adds	r7, #16
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <lessequalothers>:


/*
** return 'l <= r' for non-numbers.
*/
static int lessequalothers (lua_State *L, const TValue *l, const TValue *r) {
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
  lua_assert(!ttisnumber(l) || !ttisnumber(r));
  if (ttisstring(l) && ttisstring(r))  /* both are strings? */
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	791b      	ldrb	r3, [r3, #4]
 800f2a4:	f003 030f 	and.w	r3, r3, #15
 800f2a8:	2b04      	cmp	r3, #4
 800f2aa:	d115      	bne.n	800f2d8 <lessequalothers+0x44>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	791b      	ldrb	r3, [r3, #4]
 800f2b0:	f003 030f 	and.w	r3, r3, #15
 800f2b4:	2b04      	cmp	r3, #4
 800f2b6:	d10f      	bne.n	800f2d8 <lessequalothers+0x44>
    return l_strcmp(tsvalue(l), tsvalue(r)) <= 0;
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	4610      	mov	r0, r2
 800f2c6:	f7ff fde7 	bl	800ee98 <l_strcmp>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	bfd4      	ite	le
 800f2d0:	2301      	movle	r3, #1
 800f2d2:	2300      	movgt	r3, #0
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	e006      	b.n	800f2e6 <lessequalothers+0x52>
  else
    return luaT_callorderTM(L, l, r, TM_LE);
 800f2d8:	2315      	movs	r3, #21
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	68b9      	ldr	r1, [r7, #8]
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f7ff f86b 	bl	800e3ba <luaT_callorderTM>
 800f2e4:	4603      	mov	r3, r0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <luaV_equalobj>:

/*
** Main operation for equality of Lua values; return 't1 == t2'.
** L == NULL means raw equality (no metamethods)
*/
int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08a      	sub	sp, #40	; 0x28
 800f2f4:	af02      	add	r7, sp, #8
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
  const TValue *tm;
  if (ttypetag(t1) != ttypetag(t2)) {  /* not the same variant? */
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	791a      	ldrb	r2, [r3, #4]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	791b      	ldrb	r3, [r3, #4]
 800f304:	4053      	eors	r3, r2
 800f306:	b2db      	uxtb	r3, r3
 800f308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d02d      	beq.n	800f36c <luaV_equalobj+0x7c>
    if (ttype(t1) != ttype(t2) || ttype(t1) != LUA_TNUMBER)
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	791a      	ldrb	r2, [r3, #4]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	791b      	ldrb	r3, [r3, #4]
 800f318:	4053      	eors	r3, r2
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	f003 030f 	and.w	r3, r3, #15
 800f320:	2b00      	cmp	r3, #0
 800f322:	d105      	bne.n	800f330 <luaV_equalobj+0x40>
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	791b      	ldrb	r3, [r3, #4]
 800f328:	f003 030f 	and.w	r3, r3, #15
 800f32c:	2b03      	cmp	r3, #3
 800f32e:	d001      	beq.n	800f334 <luaV_equalobj+0x44>
      return 0;  /* only numbers can be equal with different variants */
 800f330:	2300      	movs	r3, #0
 800f332:	e15b      	b.n	800f5ec <luaV_equalobj+0x2fc>
    else {  /* two numbers with different variants */
      /* One of them is an integer. If the other does not have an
         integer value, they cannot be equal; otherwise, compare their
         integer values. */
      lua_Integer i1, i2;
      return (luaV_tointegerns(t1, &i1, F2Ieq) &&
 800f334:	f107 0318 	add.w	r3, r7, #24
 800f338:	2200      	movs	r2, #0
 800f33a:	4619      	mov	r1, r3
 800f33c:	68b8      	ldr	r0, [r7, #8]
 800f33e:	f7ff fa39 	bl	800e7b4 <luaV_tointegerns>
 800f342:	4603      	mov	r3, r0
              luaV_tointegerns(t2, &i2, F2Ieq) &&
 800f344:	2b00      	cmp	r3, #0
 800f346:	d00f      	beq.n	800f368 <luaV_equalobj+0x78>
 800f348:	f107 0314 	add.w	r3, r7, #20
 800f34c:	2200      	movs	r2, #0
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7ff fa2f 	bl	800e7b4 <luaV_tointegerns>
 800f356:	4603      	mov	r3, r0
      return (luaV_tointegerns(t1, &i1, F2Ieq) &&
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d005      	beq.n	800f368 <luaV_equalobj+0x78>
              i1 == i2);
 800f35c:	69ba      	ldr	r2, [r7, #24]
 800f35e:	697b      	ldr	r3, [r7, #20]
              luaV_tointegerns(t2, &i2, F2Ieq) &&
 800f360:	429a      	cmp	r2, r3
 800f362:	d101      	bne.n	800f368 <luaV_equalobj+0x78>
 800f364:	2301      	movs	r3, #1
 800f366:	e141      	b.n	800f5ec <luaV_equalobj+0x2fc>
 800f368:	2300      	movs	r3, #0
 800f36a:	e13f      	b.n	800f5ec <luaV_equalobj+0x2fc>
    }
  }
  /* values have same type and same variant */
  switch (ttypetag(t1)) {
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	791b      	ldrb	r3, [r3, #4]
 800f370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f374:	2b16      	cmp	r3, #22
 800f376:	f200 810f 	bhi.w	800f598 <luaV_equalobj+0x2a8>
 800f37a:	a201      	add	r2, pc, #4	; (adr r2, 800f380 <luaV_equalobj+0x90>)
 800f37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f380:	0800f3dd 	.word	0x0800f3dd
 800f384:	0800f3dd 	.word	0x0800f3dd
 800f388:	0800f413 	.word	0x0800f413
 800f38c:	0800f3e1 	.word	0x0800f3e1
 800f390:	0800f43b 	.word	0x0800f43b
 800f394:	0800f4ff 	.word	0x0800f4ff
 800f398:	0800f599 	.word	0x0800f599
 800f39c:	0800f465 	.word	0x0800f465
 800f3a0:	0800f599 	.word	0x0800f599
 800f3a4:	0800f599 	.word	0x0800f599
 800f3a8:	0800f599 	.word	0x0800f599
 800f3ac:	0800f599 	.word	0x0800f599
 800f3b0:	0800f599 	.word	0x0800f599
 800f3b4:	0800f599 	.word	0x0800f599
 800f3b8:	0800f599 	.word	0x0800f599
 800f3bc:	0800f599 	.word	0x0800f599
 800f3c0:	0800f599 	.word	0x0800f599
 800f3c4:	0800f3dd 	.word	0x0800f3dd
 800f3c8:	0800f599 	.word	0x0800f599
 800f3cc:	0800f3f5 	.word	0x0800f3f5
 800f3d0:	0800f44f 	.word	0x0800f44f
 800f3d4:	0800f599 	.word	0x0800f599
 800f3d8:	0800f427 	.word	0x0800f427
    case LUA_VNIL: case LUA_VFALSE: case LUA_VTRUE: return 1;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e105      	b.n	800f5ec <luaV_equalobj+0x2fc>
    case LUA_VNUMINT: return (ivalue(t1) == ivalue(t2));
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	681a      	ldr	r2, [r3, #0]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	bf0c      	ite	eq
 800f3ec:	2301      	moveq	r3, #1
 800f3ee:	2300      	movne	r3, #0
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	e0fb      	b.n	800f5ec <luaV_equalobj+0x2fc>
    case LUA_VNUMFLT: return luai_numeq(fltvalue(t1), fltvalue(t2));
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	ed93 7a00 	vldr	s14, [r3]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	edd3 7a00 	vldr	s15, [r3]
 800f400:	eeb4 7a67 	vcmp.f32	s14, s15
 800f404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f408:	bf0c      	ite	eq
 800f40a:	2301      	moveq	r3, #1
 800f40c:	2300      	movne	r3, #0
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	e0ec      	b.n	800f5ec <luaV_equalobj+0x2fc>
    case LUA_VLIGHTUSERDATA: return pvalue(t1) == pvalue(t2);
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	bf0c      	ite	eq
 800f41e:	2301      	moveq	r3, #1
 800f420:	2300      	movne	r3, #0
 800f422:	b2db      	uxtb	r3, r3
 800f424:	e0e2      	b.n	800f5ec <luaV_equalobj+0x2fc>
    case LUA_VLCF: return fvalue(t1) == fvalue(t2);
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	429a      	cmp	r2, r3
 800f430:	bf0c      	ite	eq
 800f432:	2301      	moveq	r3, #1
 800f434:	2300      	movne	r3, #0
 800f436:	b2db      	uxtb	r3, r3
 800f438:	e0d8      	b.n	800f5ec <luaV_equalobj+0x2fc>
    case LUA_VSHRSTR: return eqshrstr(tsvalue(t1), tsvalue(t2));
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	429a      	cmp	r2, r3
 800f444:	bf0c      	ite	eq
 800f446:	2301      	moveq	r3, #1
 800f448:	2300      	movne	r3, #0
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	e0ce      	b.n	800f5ec <luaV_equalobj+0x2fc>
    case LUA_VLNGSTR: return luaS_eqlngstr(tsvalue(t1), tsvalue(t2));
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4619      	mov	r1, r3
 800f45a:	4610      	mov	r0, r2
 800f45c:	f7fd f830 	bl	800c4c0 <luaS_eqlngstr>
 800f460:	4603      	mov	r3, r0
 800f462:	e0c3      	b.n	800f5ec <luaV_equalobj+0x2fc>
    case LUA_VUSERDATA: {
      if (uvalue(t1) == uvalue(t2)) return 1;
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d101      	bne.n	800f474 <luaV_equalobj+0x184>
 800f470:	2301      	movs	r3, #1
 800f472:	e0bb      	b.n	800f5ec <luaV_equalobj+0x2fc>
      else if (L == NULL) return 0;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <luaV_equalobj+0x18e>
 800f47a:	2300      	movs	r3, #0
 800f47c:	e0b6      	b.n	800f5ec <luaV_equalobj+0x2fc>
      tm = fasttm(L, uvalue(t1)->metatable, TM_EQ);
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d016      	beq.n	800f4b6 <luaV_equalobj+0x1c6>
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	799b      	ldrb	r3, [r3, #6]
 800f490:	f003 0320 	and.w	r3, r3, #32
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10c      	bne.n	800f4b2 <luaV_equalobj+0x1c2>
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	68d8      	ldr	r0, [r3, #12]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	691b      	ldr	r3, [r3, #16]
 800f4a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	2105      	movs	r1, #5
 800f4aa:	f7fe fd45 	bl	800df38 <luaT_gettm>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	e002      	b.n	800f4b8 <luaV_equalobj+0x1c8>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	e000      	b.n	800f4b8 <luaV_equalobj+0x1c8>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	61fb      	str	r3, [r7, #28]
      if (tm == NULL)
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d175      	bne.n	800f5ac <luaV_equalobj+0x2bc>
        tm = fasttm(L, uvalue(t2)->metatable, TM_EQ);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d016      	beq.n	800f4f8 <luaV_equalobj+0x208>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	799b      	ldrb	r3, [r3, #6]
 800f4d2:	f003 0320 	and.w	r3, r3, #32
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d10c      	bne.n	800f4f4 <luaV_equalobj+0x204>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	68d8      	ldr	r0, [r3, #12]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	691b      	ldr	r3, [r3, #16]
 800f4e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	2105      	movs	r1, #5
 800f4ec:	f7fe fd24 	bl	800df38 <luaT_gettm>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	e002      	b.n	800f4fa <luaV_equalobj+0x20a>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e000      	b.n	800f4fa <luaV_equalobj+0x20a>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	61fb      	str	r3, [r7, #28]
      break;  /* will try TM */
 800f4fc:	e056      	b.n	800f5ac <luaV_equalobj+0x2bc>
    }
    case LUA_VTABLE: {
      if (hvalue(t1) == hvalue(t2)) return 1;
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	429a      	cmp	r2, r3
 800f508:	d101      	bne.n	800f50e <luaV_equalobj+0x21e>
 800f50a:	2301      	movs	r3, #1
 800f50c:	e06e      	b.n	800f5ec <luaV_equalobj+0x2fc>
      else if (L == NULL) return 0;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d101      	bne.n	800f518 <luaV_equalobj+0x228>
 800f514:	2300      	movs	r3, #0
 800f516:	e069      	b.n	800f5ec <luaV_equalobj+0x2fc>
      tm = fasttm(L, hvalue(t1)->metatable, TM_EQ);
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	699b      	ldr	r3, [r3, #24]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d016      	beq.n	800f550 <luaV_equalobj+0x260>
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	699b      	ldr	r3, [r3, #24]
 800f528:	799b      	ldrb	r3, [r3, #6]
 800f52a:	f003 0320 	and.w	r3, r3, #32
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d10c      	bne.n	800f54c <luaV_equalobj+0x25c>
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6998      	ldr	r0, [r3, #24]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f540:	461a      	mov	r2, r3
 800f542:	2105      	movs	r1, #5
 800f544:	f7fe fcf8 	bl	800df38 <luaT_gettm>
 800f548:	4603      	mov	r3, r0
 800f54a:	e002      	b.n	800f552 <luaV_equalobj+0x262>
 800f54c:	2300      	movs	r3, #0
 800f54e:	e000      	b.n	800f552 <luaV_equalobj+0x262>
 800f550:	2300      	movs	r3, #0
 800f552:	61fb      	str	r3, [r7, #28]
      if (tm == NULL)
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d12a      	bne.n	800f5b0 <luaV_equalobj+0x2c0>
        tm = fasttm(L, hvalue(t2)->metatable, TM_EQ);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	699b      	ldr	r3, [r3, #24]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d016      	beq.n	800f592 <luaV_equalobj+0x2a2>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	699b      	ldr	r3, [r3, #24]
 800f56a:	799b      	ldrb	r3, [r3, #6]
 800f56c:	f003 0320 	and.w	r3, r3, #32
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10c      	bne.n	800f58e <luaV_equalobj+0x29e>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	6998      	ldr	r0, [r3, #24]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f582:	461a      	mov	r2, r3
 800f584:	2105      	movs	r1, #5
 800f586:	f7fe fcd7 	bl	800df38 <luaT_gettm>
 800f58a:	4603      	mov	r3, r0
 800f58c:	e002      	b.n	800f594 <luaV_equalobj+0x2a4>
 800f58e:	2300      	movs	r3, #0
 800f590:	e000      	b.n	800f594 <luaV_equalobj+0x2a4>
 800f592:	2300      	movs	r3, #0
 800f594:	61fb      	str	r3, [r7, #28]
      break;  /* will try TM */
 800f596:	e00b      	b.n	800f5b0 <luaV_equalobj+0x2c0>
    }
    default:
      return gcvalue(t1) == gcvalue(t2);
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	bf0c      	ite	eq
 800f5a4:	2301      	moveq	r3, #1
 800f5a6:	2300      	movne	r3, #0
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	e01f      	b.n	800f5ec <luaV_equalobj+0x2fc>
      break;  /* will try TM */
 800f5ac:	bf00      	nop
 800f5ae:	e000      	b.n	800f5b2 <luaV_equalobj+0x2c2>
      break;  /* will try TM */
 800f5b0:	bf00      	nop
  }
  if (tm == NULL)  /* no TM? */
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d101      	bne.n	800f5bc <luaV_equalobj+0x2cc>
    return 0;  /* objects are different */
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	e017      	b.n	800f5ec <luaV_equalobj+0x2fc>
  else {
    luaT_callTMres(L, tm, t1, t2, L->top);  /* call TM */
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	69f9      	ldr	r1, [r7, #28]
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f7fe fdad 	bl	800e128 <luaT_callTMres>
    return !l_isfalse(s2v(L->top));
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	791b      	ldrb	r3, [r3, #4]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d008      	beq.n	800f5ea <luaV_equalobj+0x2fa>
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	791b      	ldrb	r3, [r3, #4]
 800f5de:	f003 030f 	and.w	r3, r3, #15
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <luaV_equalobj+0x2fa>
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e000      	b.n	800f5ec <luaV_equalobj+0x2fc>
 800f5ea:	2300      	movs	r3, #0
  }
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3720      	adds	r7, #32
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <copy2buff>:
	(ttisstring(o) || (cvt2str(o) && (luaO_tostring(L, o), 1)))

#define isemptystr(o)	(ttisshrstring(o) && tsvalue(o)->shrlen == 0)

/* copy strings in stack from top - n up to top - 1 to buffer */
static void copy2buff (StkId top, int n, char *buff) {
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	607a      	str	r2, [r7, #4]
  size_t tl = 0;  /* size already copied */
 800f600:	2300      	movs	r3, #0
 800f602:	617b      	str	r3, [r7, #20]
  do {
    size_t l = vslen(s2v(top - n));  /* length of string being copied */
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	00db      	lsls	r3, r3, #3
 800f608:	425b      	negs	r3, r3
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	4413      	add	r3, r2
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	791b      	ldrb	r3, [r3, #4]
 800f612:	2b04      	cmp	r3, #4
 800f614:	d107      	bne.n	800f626 <copy2buff+0x32>
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	00db      	lsls	r3, r3, #3
 800f61a:	425b      	negs	r3, r3
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	4413      	add	r3, r2
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	79db      	ldrb	r3, [r3, #7]
 800f624:	e006      	b.n	800f634 <copy2buff+0x40>
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	00db      	lsls	r3, r3, #3
 800f62a:	425b      	negs	r3, r3
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	4413      	add	r3, r2
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	613b      	str	r3, [r7, #16]
    memcpy(buff + tl, svalue(s2v(top - n)), l * sizeof(char));
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	18d0      	adds	r0, r2, r3
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	00db      	lsls	r3, r3, #3
 800f640:	425b      	negs	r3, r3
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	4413      	add	r3, r2
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3310      	adds	r3, #16
 800f64a:	693a      	ldr	r2, [r7, #16]
 800f64c:	4619      	mov	r1, r3
 800f64e:	f00b ff5f 	bl	801b510 <memcpy>
    tl += l;
 800f652:	697a      	ldr	r2, [r7, #20]
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	4413      	add	r3, r2
 800f658:	617b      	str	r3, [r7, #20]
  } while (--n > 0);
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	3b01      	subs	r3, #1
 800f65e:	60bb      	str	r3, [r7, #8]
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	2b00      	cmp	r3, #0
 800f664:	dcce      	bgt.n	800f604 <copy2buff+0x10>
}
 800f666:	bf00      	nop
 800f668:	bf00      	nop
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <luaV_concat>:

/*
** Main operation for concatenation: concat 'total' values in the stack,
** from 'L->top - total' up to 'L->top - 1'.
*/
void luaV_concat (lua_State *L, int total) {
 800f670:	b580      	push	{r7, lr}
 800f672:	b096      	sub	sp, #88	; 0x58
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  if (total == 1)
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	f000 811f 	beq.w	800f8c0 <luaV_concat+0x250>
    return;  /* "all" values already concatenated */
  do {
    StkId top = L->top;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	64bb      	str	r3, [r7, #72]	; 0x48
    int n = 2;  /* number of elements handled in this pass (at least 2) */
 800f688:	2302      	movs	r3, #2
 800f68a:	657b      	str	r3, [r7, #84]	; 0x54
    if (!(ttisstring(s2v(top - 2)) || cvt2str(s2v(top - 2))) ||
 800f68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f68e:	3b10      	subs	r3, #16
 800f690:	791b      	ldrb	r3, [r3, #4]
 800f692:	f003 030f 	and.w	r3, r3, #15
 800f696:	2b04      	cmp	r3, #4
 800f698:	d006      	beq.n	800f6a8 <luaV_concat+0x38>
 800f69a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f69c:	3b10      	subs	r3, #16
 800f69e:	791b      	ldrb	r3, [r3, #4]
 800f6a0:	f003 030f 	and.w	r3, r3, #15
 800f6a4:	2b03      	cmp	r3, #3
 800f6a6:	d114      	bne.n	800f6d2 <luaV_concat+0x62>
        !tostring(L, s2v(top - 1)))
 800f6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6aa:	3b08      	subs	r3, #8
 800f6ac:	791b      	ldrb	r3, [r3, #4]
 800f6ae:	f003 030f 	and.w	r3, r3, #15
    if (!(ttisstring(s2v(top - 2)) || cvt2str(s2v(top - 2))) ||
 800f6b2:	2b04      	cmp	r3, #4
 800f6b4:	d011      	beq.n	800f6da <luaV_concat+0x6a>
        !tostring(L, s2v(top - 1)))
 800f6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6b8:	3b08      	subs	r3, #8
 800f6ba:	791b      	ldrb	r3, [r3, #4]
 800f6bc:	f003 030f 	and.w	r3, r3, #15
 800f6c0:	2b03      	cmp	r3, #3
 800f6c2:	d106      	bne.n	800f6d2 <luaV_concat+0x62>
 800f6c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6c6:	3b08      	subs	r3, #8
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7fb ff92 	bl	800b5f4 <luaO_tostring>
 800f6d0:	e003      	b.n	800f6da <luaV_concat+0x6a>
      luaT_tryconcatTM(L);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7fe fe08 	bl	800e2e8 <luaT_tryconcatTM>
 800f6d8:	e0df      	b.n	800f89a <luaV_concat+0x22a>
    else if (isemptystr(s2v(top - 1)))  /* second operand is empty? */
 800f6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6dc:	3b08      	subs	r3, #8
 800f6de:	791b      	ldrb	r3, [r3, #4]
 800f6e0:	2b44      	cmp	r3, #68	; 0x44
 800f6e2:	d11c      	bne.n	800f71e <luaV_concat+0xae>
 800f6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6e6:	3b08      	subs	r3, #8
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	79db      	ldrb	r3, [r3, #7]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d116      	bne.n	800f71e <luaV_concat+0xae>
      cast_void(tostring(L, s2v(top - 2)));  /* result is first operand */
 800f6f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6f2:	3b10      	subs	r3, #16
 800f6f4:	791b      	ldrb	r3, [r3, #4]
 800f6f6:	f003 030f 	and.w	r3, r3, #15
 800f6fa:	2b04      	cmp	r3, #4
 800f6fc:	f000 80cc 	beq.w	800f898 <luaV_concat+0x228>
 800f700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f702:	3b10      	subs	r3, #16
 800f704:	791b      	ldrb	r3, [r3, #4]
 800f706:	f003 030f 	and.w	r3, r3, #15
 800f70a:	2b03      	cmp	r3, #3
 800f70c:	f040 80c4 	bne.w	800f898 <luaV_concat+0x228>
 800f710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f712:	3b10      	subs	r3, #16
 800f714:	4619      	mov	r1, r3
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7fb ff6c 	bl	800b5f4 <luaO_tostring>
 800f71c:	e0bc      	b.n	800f898 <luaV_concat+0x228>
    else if (isemptystr(s2v(top - 2))) {  /* first operand is empty string? */
 800f71e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f720:	3b10      	subs	r3, #16
 800f722:	791b      	ldrb	r3, [r3, #4]
 800f724:	2b44      	cmp	r3, #68	; 0x44
 800f726:	d114      	bne.n	800f752 <luaV_concat+0xe2>
 800f728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f72a:	3b10      	subs	r3, #16
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	79db      	ldrb	r3, [r3, #7]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d10e      	bne.n	800f752 <luaV_concat+0xe2>
      setobjs2s(L, top - 2, top - 1);  /* result is second op. */
 800f734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f736:	3b10      	subs	r3, #16
 800f738:	647b      	str	r3, [r7, #68]	; 0x44
 800f73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f73c:	3b08      	subs	r3, #8
 800f73e:	643b      	str	r3, [r7, #64]	; 0x40
 800f740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f744:	6812      	ldr	r2, [r2, #0]
 800f746:	601a      	str	r2, [r3, #0]
 800f748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f74a:	791a      	ldrb	r2, [r3, #4]
 800f74c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f74e:	711a      	strb	r2, [r3, #4]
 800f750:	e0a3      	b.n	800f89a <luaV_concat+0x22a>
    }
    else {
      /* at least two non-empty string values; get as many as possible */
      size_t tl = vslen(s2v(top - 1));
 800f752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f754:	3b08      	subs	r3, #8
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	791b      	ldrb	r3, [r3, #4]
 800f75a:	2b04      	cmp	r3, #4
 800f75c:	d104      	bne.n	800f768 <luaV_concat+0xf8>
 800f75e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f760:	3b08      	subs	r3, #8
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	79db      	ldrb	r3, [r3, #7]
 800f766:	e003      	b.n	800f770 <luaV_concat+0x100>
 800f768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f76a:	3b08      	subs	r3, #8
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	653b      	str	r3, [r7, #80]	; 0x50
      TString *ts;
      /* collect total length and number of strings */
      for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {
 800f772:	2301      	movs	r3, #1
 800f774:	657b      	str	r3, [r7, #84]	; 0x54
 800f776:	e035      	b.n	800f7e4 <luaV_concat+0x174>
        size_t l = vslen(s2v(top - n - 1));
 800f778:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f77a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f77e:	1a9b      	subs	r3, r3, r2
 800f780:	00db      	lsls	r3, r3, #3
 800f782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f784:	4413      	add	r3, r2
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	791b      	ldrb	r3, [r3, #4]
 800f78a:	2b04      	cmp	r3, #4
 800f78c:	d109      	bne.n	800f7a2 <luaV_concat+0x132>
 800f78e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f790:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f794:	1a9b      	subs	r3, r3, r2
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f79a:	4413      	add	r3, r2
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	79db      	ldrb	r3, [r3, #7]
 800f7a0:	e008      	b.n	800f7b4 <luaV_concat+0x144>
 800f7a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7a4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f7a8:	1a9b      	subs	r3, r3, r2
 800f7aa:	00db      	lsls	r3, r3, #3
 800f7ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7ae:	4413      	add	r3, r2
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (l_unlikely(l >= (MAX_SIZE/sizeof(char)) - tl))
 800f7b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f7bc:	1a9b      	subs	r3, r3, r2
 800f7be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	bf2c      	ite	cs
 800f7c4:	2301      	movcs	r3, #1
 800f7c6:	2300      	movcc	r3, #0
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d003      	beq.n	800f7d6 <luaV_concat+0x166>
          luaG_runerror(L, "string length overflow");
 800f7ce:	493e      	ldr	r1, [pc, #248]	; (800f8c8 <luaV_concat+0x258>)
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f7f7 fcf4 	bl	80071be <luaG_runerror>
        tl += l;
 800f7d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7da:	4413      	add	r3, r2
 800f7dc:	653b      	str	r3, [r7, #80]	; 0x50
      for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {
 800f7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	657b      	str	r3, [r7, #84]	; 0x54
 800f7e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	da23      	bge.n	800f834 <luaV_concat+0x1c4>
 800f7ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7ee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f7f2:	1a9b      	subs	r3, r3, r2
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7f8:	4413      	add	r3, r2
 800f7fa:	791b      	ldrb	r3, [r3, #4]
 800f7fc:	f003 030f 	and.w	r3, r3, #15
 800f800:	2b04      	cmp	r3, #4
 800f802:	d0b9      	beq.n	800f778 <luaV_concat+0x108>
 800f804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f806:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f80a:	1a9b      	subs	r3, r3, r2
 800f80c:	00db      	lsls	r3, r3, #3
 800f80e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f810:	4413      	add	r3, r2
 800f812:	791b      	ldrb	r3, [r3, #4]
 800f814:	f003 030f 	and.w	r3, r3, #15
 800f818:	2b03      	cmp	r3, #3
 800f81a:	d10b      	bne.n	800f834 <luaV_concat+0x1c4>
 800f81c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f81e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f822:	1a9b      	subs	r3, r3, r2
 800f824:	00db      	lsls	r3, r3, #3
 800f826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f828:	4413      	add	r3, r2
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7fb fee1 	bl	800b5f4 <luaO_tostring>
 800f832:	e7a1      	b.n	800f778 <luaV_concat+0x108>
      }
      if (tl <= LUAI_MAXSHORTLEN) {  /* is result a short string? */
 800f834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f836:	2b28      	cmp	r3, #40	; 0x28
 800f838:	d80f      	bhi.n	800f85a <luaV_concat+0x1ea>
        char buff[LUAI_MAXSHORTLEN];
        copy2buff(top, n, buff);  /* copy strings to buffer */
 800f83a:	f107 030c 	add.w	r3, r7, #12
 800f83e:	461a      	mov	r2, r3
 800f840:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f842:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f844:	f7ff fed6 	bl	800f5f4 <copy2buff>
        ts = luaS_newlstr(L, buff, tl);
 800f848:	f107 030c 	add.w	r3, r7, #12
 800f84c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f84e:	4619      	mov	r1, r3
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f7fd f8d9 	bl	800ca08 <luaS_newlstr>
 800f856:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f858:	e00b      	b.n	800f872 <luaV_concat+0x202>
      }
      else {  /* long string; copy strings directly to final result */
        ts = luaS_createlngstrobj(L, tl);
 800f85a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7fc ffda 	bl	800c816 <luaS_createlngstrobj>
 800f862:	64f8      	str	r0, [r7, #76]	; 0x4c
        copy2buff(top, n, getstr(ts));
 800f864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f866:	3310      	adds	r3, #16
 800f868:	461a      	mov	r2, r3
 800f86a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f86c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f86e:	f7ff fec1 	bl	800f5f4 <copy2buff>
      }
      setsvalue2s(L, top - n, ts);  /* create result */
 800f872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f874:	00db      	lsls	r3, r3, #3
 800f876:	425b      	negs	r3, r3
 800f878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f87a:	4413      	add	r3, r2
 800f87c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f880:	637b      	str	r3, [r7, #52]	; 0x34
 800f882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	601a      	str	r2, [r3, #0]
 800f888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88a:	791b      	ldrb	r3, [r3, #4]
 800f88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f890:	b2da      	uxtb	r2, r3
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	711a      	strb	r2, [r3, #4]
 800f896:	e000      	b.n	800f89a <luaV_concat+0x22a>
      cast_void(tostring(L, s2v(top - 2)));  /* result is first operand */
 800f898:	bf00      	nop
    }
    total -= n-1;  /* got 'n' strings to create 1 new */
 800f89a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f89c:	3b01      	subs	r3, #1
 800f89e:	683a      	ldr	r2, [r7, #0]
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	603b      	str	r3, [r7, #0]
    L->top -= n-1;  /* popped 'n' strings and pushed one */
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	68da      	ldr	r2, [r3, #12]
 800f8a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8aa:	f1c3 0301 	rsb	r3, r3, #1
 800f8ae:	00db      	lsls	r3, r3, #3
 800f8b0:	441a      	add	r2, r3
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	60da      	str	r2, [r3, #12]
  } while (total > 1);  /* repeat until only 1 result left */
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	f73f aee2 	bgt.w	800f682 <luaV_concat+0x12>
 800f8be:	e000      	b.n	800f8c2 <luaV_concat+0x252>
    return;  /* "all" values already concatenated */
 800f8c0:	bf00      	nop
}
 800f8c2:	3758      	adds	r7, #88	; 0x58
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	0801f140 	.word	0x0801f140

0800f8cc <luaV_objlen>:


/*
** Main operation 'ra = #rb'.
*/
void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b08c      	sub	sp, #48	; 0x30
 800f8d0:	af02      	add	r7, sp, #8
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  const TValue *tm;
  switch (ttypetag(rb)) {
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	791b      	ldrb	r3, [r3, #4]
 800f8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8e0:	2b14      	cmp	r3, #20
 800f8e2:	d03f      	beq.n	800f964 <luaV_objlen+0x98>
 800f8e4:	2b14      	cmp	r3, #20
 800f8e6:	dc49      	bgt.n	800f97c <luaV_objlen+0xb0>
 800f8e8:	2b04      	cmp	r3, #4
 800f8ea:	d02f      	beq.n	800f94c <luaV_objlen+0x80>
 800f8ec:	2b05      	cmp	r3, #5
 800f8ee:	d145      	bne.n	800f97c <luaV_objlen+0xb0>
    case LUA_VTABLE: {
      Table *h = hvalue(rb);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	61fb      	str	r3, [r7, #28]
      tm = fasttm(L, h->metatable, TM_LEN);
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	699b      	ldr	r3, [r3, #24]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d014      	beq.n	800f928 <luaV_objlen+0x5c>
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	699b      	ldr	r3, [r3, #24]
 800f902:	799b      	ldrb	r3, [r3, #6]
 800f904:	f003 0310 	and.w	r3, r3, #16
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d10b      	bne.n	800f924 <luaV_objlen+0x58>
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	6998      	ldr	r0, [r3, #24]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f918:	461a      	mov	r2, r3
 800f91a:	2104      	movs	r1, #4
 800f91c:	f7fe fb0c 	bl	800df38 <luaT_gettm>
 800f920:	4603      	mov	r3, r0
 800f922:	e002      	b.n	800f92a <luaV_objlen+0x5e>
 800f924:	2300      	movs	r3, #0
 800f926:	e000      	b.n	800f92a <luaV_objlen+0x5e>
 800f928:	2300      	movs	r3, #0
 800f92a:	627b      	str	r3, [r7, #36]	; 0x24
      if (tm) break;  /* metamethod? break switch to call it */
 800f92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d13a      	bne.n	800f9a8 <luaV_objlen+0xdc>
      setivalue(s2v(ra), luaH_getn(h));  /* else primitive len */
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	61bb      	str	r3, [r7, #24]
 800f936:	69f8      	ldr	r0, [r7, #28]
 800f938:	f7fe fa18 	bl	800dd6c <luaH_getn>
 800f93c:	4603      	mov	r3, r0
 800f93e:	461a      	mov	r2, r3
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	601a      	str	r2, [r3, #0]
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	2203      	movs	r2, #3
 800f948:	711a      	strb	r2, [r3, #4]
      return;
 800f94a:	e038      	b.n	800f9be <luaV_objlen+0xf2>
    }
    case LUA_VSHRSTR: {
      setivalue(s2v(ra), tsvalue(rb)->shrlen);
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	617b      	str	r3, [r7, #20]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	79db      	ldrb	r3, [r3, #7]
 800f956:	461a      	mov	r2, r3
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	601a      	str	r2, [r3, #0]
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	2203      	movs	r2, #3
 800f960:	711a      	strb	r2, [r3, #4]
      return;
 800f962:	e02c      	b.n	800f9be <luaV_objlen+0xf2>
    }
    case LUA_VLNGSTR: {
      setivalue(s2v(ra), tsvalue(rb)->u.lnglen);
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	623b      	str	r3, [r7, #32]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	461a      	mov	r2, r3
 800f970:	6a3b      	ldr	r3, [r7, #32]
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	6a3b      	ldr	r3, [r7, #32]
 800f976:	2203      	movs	r2, #3
 800f978:	711a      	strb	r2, [r3, #4]
      return;
 800f97a:	e020      	b.n	800f9be <luaV_objlen+0xf2>
    }
    default: {  /* try metamethod */
      tm = luaT_gettmbyobj(L, rb, TM_LEN);
 800f97c:	2204      	movs	r2, #4
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7fe fafd 	bl	800df80 <luaT_gettmbyobj>
 800f986:	6278      	str	r0, [r7, #36]	; 0x24
      if (l_unlikely(notm(tm)))  /* no metamethod? */
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	791b      	ldrb	r3, [r3, #4]
 800f98c:	f003 030f 	and.w	r3, r3, #15
 800f990:	2b00      	cmp	r3, #0
 800f992:	bf0c      	ite	eq
 800f994:	2301      	moveq	r3, #1
 800f996:	2300      	movne	r3, #0
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d006      	beq.n	800f9ac <luaV_objlen+0xe0>
        luaG_typeerror(L, rb, "get length of");
 800f99e:	4a09      	ldr	r2, [pc, #36]	; (800f9c4 <luaV_objlen+0xf8>)
 800f9a0:	6879      	ldr	r1, [r7, #4]
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7f7 fadc 	bl	8006f60 <luaG_typeerror>
      if (tm) break;  /* metamethod? break switch to call it */
 800f9a8:	bf00      	nop
 800f9aa:	e000      	b.n	800f9ae <luaV_objlen+0xe2>
      break;
 800f9ac:	bf00      	nop
    }
  }
  luaT_callTMres(L, tm, rb, rb, ra);
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f7fe fbb5 	bl	800e128 <luaT_callTMres>
}
 800f9be:	3728      	adds	r7, #40	; 0x28
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	0801f158 	.word	0x0801f158

0800f9c8 <luaV_idiv>:
** Integer division; return 'm // n', that is, floor(m/n).
** C division truncates its result (rounds towards zero).
** 'floor(q) == trunc(q)' when 'q >= 0' or when 'q' is integer,
** otherwise 'floor(q) == trunc(q) - 1'.
*/
lua_Integer luaV_idiv (lua_State *L, lua_Integer m, lua_Integer n) {
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
  if (l_unlikely(l_castS2U(n) + 1u <= 1u)) {  /* special cases: -1 or 0 */
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	bf94      	ite	ls
 800f9dc:	2301      	movls	r3, #1
 800f9de:	2300      	movhi	r3, #0
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d009      	beq.n	800f9fa <luaV_idiv+0x32>
    if (n == 0)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d103      	bne.n	800f9f4 <luaV_idiv+0x2c>
      luaG_runerror(L, "attempt to divide by zero");
 800f9ec:	4911      	ldr	r1, [pc, #68]	; (800fa34 <luaV_idiv+0x6c>)
 800f9ee:	68f8      	ldr	r0, [r7, #12]
 800f9f0:	f7f7 fbe5 	bl	80071be <luaG_runerror>
    return intop(-, 0, m);   /* n==-1; avoid overflow with 0x80000...//-1 */
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	425b      	negs	r3, r3
 800f9f8:	e017      	b.n	800fa2a <luaV_idiv+0x62>
  }
  else {
    lua_Integer q = m / n;  /* perform C division */
 800f9fa:	68ba      	ldr	r2, [r7, #8]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	fb92 f3f3 	sdiv	r3, r2, r3
 800fa02:	617b      	str	r3, [r7, #20]
    if ((m ^ n) < 0 && m % n != 0)  /* 'm/n' would be negative non-integer? */
 800fa04:	68ba      	ldr	r2, [r7, #8]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4053      	eors	r3, r2
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	da0c      	bge.n	800fa28 <luaV_idiv+0x60>
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa16:	6879      	ldr	r1, [r7, #4]
 800fa18:	fb01 f202 	mul.w	r2, r1, r2
 800fa1c:	1a9b      	subs	r3, r3, r2
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d002      	beq.n	800fa28 <luaV_idiv+0x60>
      q -= 1;  /* correct result for different rounding */
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	3b01      	subs	r3, #1
 800fa26:	617b      	str	r3, [r7, #20]
    return q;
 800fa28:	697b      	ldr	r3, [r7, #20]
  }
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3718      	adds	r7, #24
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	0801f168 	.word	0x0801f168

0800fa38 <luaV_mod>:
/*
** Integer modulus; return 'm % n'. (Assume that C '%' with
** negative operands follows C99 behavior. See previous comment
** about luaV_idiv.)
*/
lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b086      	sub	sp, #24
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
  if (l_unlikely(l_castS2U(n) + 1u <= 1u)) {  /* special cases: -1 or 0 */
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	3301      	adds	r3, #1
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	bf94      	ite	ls
 800fa4c:	2301      	movls	r3, #1
 800fa4e:	2300      	movhi	r3, #0
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d008      	beq.n	800fa68 <luaV_mod+0x30>
    if (n == 0)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d103      	bne.n	800fa64 <luaV_mod+0x2c>
      luaG_runerror(L, "attempt to perform 'n%%0'");
 800fa5c:	490f      	ldr	r1, [pc, #60]	; (800fa9c <luaV_mod+0x64>)
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7f7 fbad 	bl	80071be <luaG_runerror>
    return 0;   /* m % -1 == 0; avoid overflow with 0x80000...%-1 */
 800fa64:	2300      	movs	r3, #0
 800fa66:	e015      	b.n	800fa94 <luaV_mod+0x5c>
  }
  else {
    lua_Integer r = m % n;
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa70:	6879      	ldr	r1, [r7, #4]
 800fa72:	fb01 f202 	mul.w	r2, r1, r2
 800fa76:	1a9b      	subs	r3, r3, r2
 800fa78:	617b      	str	r3, [r7, #20]
    if (r != 0 && (r ^ n) < 0)  /* 'm/n' would be non-integer negative? */
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d008      	beq.n	800fa92 <luaV_mod+0x5a>
 800fa80:	697a      	ldr	r2, [r7, #20]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4053      	eors	r3, r2
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	da03      	bge.n	800fa92 <luaV_mod+0x5a>
      r += n;  /* correct result for different rounding */
 800fa8a:	697a      	ldr	r2, [r7, #20]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4413      	add	r3, r2
 800fa90:	617b      	str	r3, [r7, #20]
    return r;
 800fa92:	697b      	ldr	r3, [r7, #20]
  }
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3718      	adds	r7, #24
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	0801f184 	.word	0x0801f184

0800faa0 <luaV_modf>:


/*
** Float modulus
*/
lua_Number luaV_modf (lua_State *L, lua_Number m, lua_Number n) {
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	ed87 0a02 	vstr	s0, [r7, #8]
 800faac:	edc7 0a01 	vstr	s1, [r7, #4]
  lua_Number r;
  luai_nummod(L, m, n, r);
 800fab0:	edd7 0a01 	vldr	s1, [r7, #4]
 800fab4:	ed97 0a02 	vldr	s0, [r7, #8]
 800fab8:	f00a fd5a 	bl	801a570 <fmodf>
 800fabc:	ed87 0a05 	vstr	s0, [r7, #20]
 800fac0:	edd7 7a05 	vldr	s15, [r7, #20]
 800fac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800facc:	dd0a      	ble.n	800fae4 <luaV_modf+0x44>
 800face:	edd7 7a01 	vldr	s15, [r7, #4]
 800fad2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fada:	bf4c      	ite	mi
 800fadc:	2301      	movmi	r3, #1
 800fade:	2300      	movpl	r3, #0
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	e013      	b.n	800fb0c <luaV_modf+0x6c>
 800fae4:	edd7 7a05 	vldr	s15, [r7, #20]
 800fae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800faec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf0:	d508      	bpl.n	800fb04 <luaV_modf+0x64>
 800faf2:	edd7 7a01 	vldr	s15, [r7, #4]
 800faf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fafe:	dd01      	ble.n	800fb04 <luaV_modf+0x64>
 800fb00:	2301      	movs	r3, #1
 800fb02:	e000      	b.n	800fb06 <luaV_modf+0x66>
 800fb04:	2300      	movs	r3, #0
 800fb06:	f003 0301 	and.w	r3, r3, #1
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d007      	beq.n	800fb20 <luaV_modf+0x80>
 800fb10:	ed97 7a05 	vldr	s14, [r7, #20]
 800fb14:	edd7 7a01 	vldr	s15, [r7, #4]
 800fb18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb1c:	edc7 7a05 	vstr	s15, [r7, #20]
  return r;
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	ee07 3a90 	vmov	s15, r3
}
 800fb26:	eeb0 0a67 	vmov.f32	s0, s15
 800fb2a:	3718      	adds	r7, #24
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <luaV_shiftl>:
** Shift left operation. (Shift right just negates 'y'.)
*/
#define luaV_shiftr(x,y)	luaV_shiftl(x,intop(-, 0, y))


lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  if (y < 0) {  /* shift right? */
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	da0a      	bge.n	800fb56 <luaV_shiftl+0x26>
    if (y <= -NBITS) return 0;
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	f113 0f1f 	cmn.w	r3, #31
 800fb46:	da01      	bge.n	800fb4c <luaV_shiftl+0x1c>
 800fb48:	2300      	movs	r3, #0
 800fb4a:	e00d      	b.n	800fb68 <luaV_shiftl+0x38>
    else return intop(>>, x, -y);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	4252      	negs	r2, r2
 800fb52:	40d3      	lsrs	r3, r2
 800fb54:	e008      	b.n	800fb68 <luaV_shiftl+0x38>
  }
  else {  /* shift left */
    if (y >= NBITS) return 0;
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	2b1f      	cmp	r3, #31
 800fb5a:	dd01      	ble.n	800fb60 <luaV_shiftl+0x30>
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	e003      	b.n	800fb68 <luaV_shiftl+0x38>
    else return intop(<<, x, y);
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	fa02 f303 	lsl.w	r3, r2, r3
  }
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr

0800fb74 <pushclosure>:
/*
** create a new Lua closure, push it in the stack, and initialize
** its upvalues.
*/
static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,
                         StkId ra) {
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b08a      	sub	sp, #40	; 0x28
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
 800fb80:	603b      	str	r3, [r7, #0]
  int nup = p->sizeupvalues;
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	623b      	str	r3, [r7, #32]
  Upvaldesc *uv = p->upvalues;
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb8c:	61fb      	str	r3, [r7, #28]
  int i;
  LClosure *ncl = luaF_newLclosure(L, nup);
 800fb8e:	6a39      	ldr	r1, [r7, #32]
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f7f8 fbf6 	bl	8008382 <luaF_newLclosure>
 800fb96:	61b8      	str	r0, [r7, #24]
  ncl->p = p;
 800fb98:	69bb      	ldr	r3, [r7, #24]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	60da      	str	r2, [r3, #12]
  setclLvalue2s(L, ra, ncl);  /* anchor new closure in stack */
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba0:	617b      	str	r3, [r7, #20]
 800fba2:	69bb      	ldr	r3, [r7, #24]
 800fba4:	613b      	str	r3, [r7, #16]
 800fba6:	693a      	ldr	r2, [r7, #16]
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	601a      	str	r2, [r3, #0]
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	2246      	movs	r2, #70	; 0x46
 800fbb0:	711a      	strb	r2, [r3, #4]
  for (i = 0; i < nup; i++) {  /* fill in its upvalues */
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800fbb6:	e044      	b.n	800fc42 <pushclosure+0xce>
    if (uv[i].instack)  /* upvalue refers to local variable? */
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	00db      	lsls	r3, r3, #3
 800fbbc:	69fa      	ldr	r2, [r7, #28]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	791b      	ldrb	r3, [r3, #4]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d012      	beq.n	800fbec <pushclosure+0x78>
      ncl->upvals[i] = luaF_findupval(L, base + uv[i].idx);
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc8:	00db      	lsls	r3, r3, #3
 800fbca:	69fa      	ldr	r2, [r7, #28]
 800fbcc:	4413      	add	r3, r2
 800fbce:	795b      	ldrb	r3, [r3, #5]
 800fbd0:	00db      	lsls	r3, r3, #3
 800fbd2:	683a      	ldr	r2, [r7, #0]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f7f8 fc39 	bl	8008450 <luaF_findupval>
 800fbde:	4601      	mov	r1, r0
 800fbe0:	69bb      	ldr	r3, [r7, #24]
 800fbe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbe4:	3204      	adds	r2, #4
 800fbe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fbea:	e00d      	b.n	800fc08 <pushclosure+0x94>
    else  /* get upvalue from enclosing function */
      ncl->upvals[i] = encup[uv[i].idx];
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	00db      	lsls	r3, r3, #3
 800fbf0:	69fa      	ldr	r2, [r7, #28]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	795b      	ldrb	r3, [r3, #5]
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	6819      	ldr	r1, [r3, #0]
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc02:	3204      	adds	r2, #4
 800fc04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    luaC_objbarrier(L, ncl, ncl->upvals[i]);
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	795b      	ldrb	r3, [r3, #5]
 800fc0c:	f003 0320 	and.w	r3, r3, #32
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d013      	beq.n	800fc3c <pushclosure+0xc8>
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc18:	3204      	adds	r2, #4
 800fc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc1e:	795b      	ldrb	r3, [r3, #5]
 800fc20:	f003 0318 	and.w	r3, r3, #24
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d009      	beq.n	800fc3c <pushclosure+0xc8>
 800fc28:	69b9      	ldr	r1, [r7, #24]
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc2e:	3204      	adds	r2, #4
 800fc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc34:	461a      	mov	r2, r3
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f7f8 ff22 	bl	8008a80 <luaC_barrier_>
  for (i = 0; i < nup; i++) {  /* fill in its upvalues */
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3e:	3301      	adds	r3, #1
 800fc40:	627b      	str	r3, [r7, #36]	; 0x24
 800fc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	dbb6      	blt.n	800fbb8 <pushclosure+0x44>
  }
}
 800fc4a:	bf00      	nop
 800fc4c:	bf00      	nop
 800fc4e:	3728      	adds	r7, #40	; 0x28
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <luaV_execute>:
#define vmdispatch(o)	switch(o)
#define vmcase(l)	case l:
#define vmbreak		break


void luaV_execute (lua_State *L, CallInfo *ci) {
 800fc54:	b590      	push	{r4, r7, lr}
 800fc56:	f2ad 5d8c 	subw	sp, sp, #1420	; 0x58c
 800fc5a:	af02      	add	r7, sp, #8
 800fc5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fc60:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800fc64:	6018      	str	r0, [r3, #0]
 800fc66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fc6a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800fc6e:	6019      	str	r1, [r3, #0]
  int trap;
#if LUA_USE_JUMPTABLE
#include "ljumptab.h"
#endif
 startfunc:
  trap = L->hookmask;
 800fc70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fc74:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc7c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 returning:  /* trap already set */
  cl = clLvalue(s2v(ci->func));
 800fc80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fc84:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
  k = cl->p->k;
 800fc92:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc9a:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
  pc = ci->u.l.savedpc;
 800fc9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fca2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
  if (l_unlikely(trap)) {
 800fcae:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	bf14      	ite	ne
 800fcb6:	2301      	movne	r3, #1
 800fcb8:	2300      	moveq	r3, #0
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d024      	beq.n	800fd0a <luaV_execute+0xb6>
    if (pc == cl->p->code) {  /* first instruction (not resuming)? */
 800fcc0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcc8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d115      	bne.n	800fcfc <luaV_execute+0xa8>
      if (cl->p->is_vararg)
 800fcd0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	79db      	ldrb	r3, [r3, #7]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d003      	beq.n	800fce4 <luaV_execute+0x90>
        trap = 0;  /* hooks will start after VARARGPREP instruction */
 800fcdc:	2300      	movs	r3, #0
 800fcde:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800fce2:	e00b      	b.n	800fcfc <luaV_execute+0xa8>
      else  /* check 'call' hook */
        luaD_hookcall(L, ci);
 800fce4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fce8:	f5a3 62b0 	sub.w	r2, r3, #1408	; 0x580
 800fcec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fcf0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800fcf4:	6811      	ldr	r1, [r2, #0]
 800fcf6:	6818      	ldr	r0, [r3, #0]
 800fcf8:	f7f7 fea4 	bl	8007a44 <luaD_hookcall>
    }
    ci->u.l.trap = 1;  /* assume trap is on, for now */
 800fcfc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fd00:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2201      	movs	r2, #1
 800fd08:	615a      	str	r2, [r3, #20]
  }
  base = ci->func + 1;
 800fd0a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fd0e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	3308      	adds	r3, #8
 800fd18:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
  /* main loop of interpreter */
  for (;;) {
    Instruction i;  /* instruction being executed */
    StkId ra;  /* instruction's A register */
    vmfetch();
 800fd1c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	bf14      	ite	ne
 800fd24:	2301      	movne	r3, #1
 800fd26:	2300      	moveq	r3, #0
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d013      	beq.n	800fd56 <luaV_execute+0x102>
 800fd2e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fd32:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800fd36:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800fd3a:	6818      	ldr	r0, [r3, #0]
 800fd3c:	f7f7 fab6 	bl	80072ac <luaG_traceexec>
 800fd40:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 800fd44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fd48:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	3308      	adds	r3, #8
 800fd52:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800fd56:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800fd5a:	1d1a      	adds	r2, r3, #4
 800fd5c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 800fd66:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800fd6a:	09db      	lsrs	r3, r3, #7
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	00db      	lsls	r3, r3, #3
 800fd70:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800fd74:	4413      	add	r3, r2
 800fd76:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    #endif
    lua_assert(base == ci->func + 1);
    lua_assert(base <= L->top && L->top < L->stack_last);
    /* invalidate top for instructions not expecting it */
    lua_assert(isIT(i) || (cast_void(L->top = base), 1));
    vmdispatch (GET_OPCODE(i)) {
 800fd7a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd84:	4acb      	ldr	r2, [pc, #812]	; (80100b4 <luaV_execute+0x460>)
 800fd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd8a:	e035      	b.n	800fdf8 <luaV_execute+0x1a4>
      vmcase(OP_MOVE) {
        setobjs2s(L, ra, RB(i));
 800fd8c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fd90:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800fd94:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800fd98:	601a      	str	r2, [r3, #0]
 800fd9a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800fd9e:	0c1b      	lsrs	r3, r3, #16
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	00db      	lsls	r3, r3, #3
 800fda4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800fda8:	441a      	add	r2, r3
 800fdaa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fdae:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800fdb2:	601a      	str	r2, [r3, #0]
 800fdb4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fdb8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800fdc2:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800fdc6:	6812      	ldr	r2, [r2, #0]
 800fdc8:	6812      	ldr	r2, [r2, #0]
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fdd0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	791a      	ldrb	r2, [r3, #4]
 800fdd8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fddc:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	711a      	strb	r2, [r3, #4]
        vmbreak;
 800fde4:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	bf14      	ite	ne
 800fdec:	2301      	movne	r3, #1
 800fdee:	2300      	moveq	r3, #0
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d103      	bne.n	800fdfe <luaV_execute+0x1aa>
 800fdf6:	e016      	b.n	800fe26 <luaV_execute+0x1d2>
 800fdf8:	f043 0301 	orr.w	r3, r3, #1
 800fdfc:	4718      	bx	r3
 800fdfe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fe02:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800fe06:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800fe0a:	6818      	ldr	r0, [r3, #0]
 800fe0c:	f7f7 fa4e 	bl	80072ac <luaG_traceexec>
 800fe10:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 800fe14:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fe18:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	3308      	adds	r3, #8
 800fe22:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800fe26:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800fe2a:	1d1a      	adds	r2, r3, #4
 800fe2c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 800fe36:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800fe3a:	09db      	lsrs	r3, r3, #7
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	00db      	lsls	r3, r3, #3
 800fe40:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800fe44:	4413      	add	r3, r2
 800fe46:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800fe4a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe54:	4a97      	ldr	r2, [pc, #604]	; (80100b4 <luaV_execute+0x460>)
 800fe56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5a:	e7cd      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADI) {
        lua_Integer b = GETARG_sBx(i);
 800fe5c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800fe60:	0bdb      	lsrs	r3, r3, #15
 800fe62:	4619      	mov	r1, r3
 800fe64:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fe68:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 800fe6c:	f5a1 437f 	sub.w	r3, r1, #65280	; 0xff00
 800fe70:	3bff      	subs	r3, #255	; 0xff
 800fe72:	6013      	str	r3, [r2, #0]
        setivalue(s2v(ra), b);
 800fe74:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fe78:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800fe7c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800fe80:	601a      	str	r2, [r3, #0]
 800fe82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fe86:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800fe90:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800fe94:	6812      	ldr	r2, [r2, #0]
 800fe96:	601a      	str	r2, [r3, #0]
 800fe98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fe9c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2203      	movs	r2, #3
 800fea4:	711a      	strb	r2, [r3, #4]
        vmbreak;
 800fea6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800feaa:	2b00      	cmp	r3, #0
 800feac:	bf14      	ite	ne
 800feae:	2301      	movne	r3, #1
 800feb0:	2300      	moveq	r3, #0
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d013      	beq.n	800fee0 <luaV_execute+0x28c>
 800feb8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800febc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800fec0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800fec4:	6818      	ldr	r0, [r3, #0]
 800fec6:	f7f7 f9f1 	bl	80072ac <luaG_traceexec>
 800feca:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 800fece:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fed2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	3308      	adds	r3, #8
 800fedc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800fee0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800fee4:	1d1a      	adds	r2, r3, #4
 800fee6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 800fef0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800fef4:	09db      	lsrs	r3, r3, #7
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	00db      	lsls	r3, r3, #3
 800fefa:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800fefe:	4413      	add	r3, r2
 800ff00:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800ff04:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff0e:	4a69      	ldr	r2, [pc, #420]	; (80100b4 <luaV_execute+0x460>)
 800ff10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff14:	e770      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADF) {
        int b = GETARG_sBx(i);
 800ff16:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800ff1a:	0bdb      	lsrs	r3, r3, #15
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800ff22:	f5a3 62a2 	sub.w	r2, r3, #1296	; 0x510
 800ff26:	f5a1 437f 	sub.w	r3, r1, #65280	; 0xff00
 800ff2a:	3bff      	subs	r3, #255	; 0xff
 800ff2c:	6013      	str	r3, [r2, #0]
        setfltvalue(s2v(ra), cast_num(b));
 800ff2e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800ff32:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800ff36:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800ff3a:	601a      	str	r2, [r3, #0]
 800ff3c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800ff40:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	ee07 3a90 	vmov	s15, r3
 800ff4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff4e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800ff52:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	edc3 7a00 	vstr	s15, [r3]
 800ff5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800ff60:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2213      	movs	r2, #19
 800ff68:	711a      	strb	r2, [r3, #4]
        vmbreak;
 800ff6a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	bf14      	ite	ne
 800ff72:	2301      	movne	r3, #1
 800ff74:	2300      	moveq	r3, #0
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d013      	beq.n	800ffa4 <luaV_execute+0x350>
 800ff7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800ff80:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800ff84:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800ff88:	6818      	ldr	r0, [r3, #0]
 800ff8a:	f7f7 f98f 	bl	80072ac <luaG_traceexec>
 800ff8e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 800ff92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800ff96:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	3308      	adds	r3, #8
 800ffa0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800ffa4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800ffa8:	1d1a      	adds	r2, r3, #4
 800ffaa:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 800ffb4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800ffb8:	09db      	lsrs	r3, r3, #7
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	00db      	lsls	r3, r3, #3
 800ffbe:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800ffc2:	4413      	add	r3, r2
 800ffc4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800ffc8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffd2:	4a38      	ldr	r2, [pc, #224]	; (80100b4 <luaV_execute+0x460>)
 800ffd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffd8:	e70e      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADK) {
        TValue *rb = k + GETARG_Bx(i);
 800ffda:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800ffde:	0bdb      	lsrs	r3, r3, #15
 800ffe0:	00da      	lsls	r2, r3, #3
 800ffe2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800ffe6:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800ffea:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 800ffee:	440a      	add	r2, r1
 800fff0:	601a      	str	r2, [r3, #0]
        setobj2s(L, ra, rb);
 800fff2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800fff6:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800fffa:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800fffe:	601a      	str	r2, [r3, #0]
 8010000:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010004:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8010008:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801000c:	f2a2 5204 	subw	r2, r2, #1284	; 0x504
 8010010:	6812      	ldr	r2, [r2, #0]
 8010012:	601a      	str	r2, [r3, #0]
 8010014:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010018:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8010022:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8010026:	6812      	ldr	r2, [r2, #0]
 8010028:	6812      	ldr	r2, [r2, #0]
 801002a:	601a      	str	r2, [r3, #0]
 801002c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010030:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	791a      	ldrb	r2, [r3, #4]
 8010038:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801003c:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8010044:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010048:	2b00      	cmp	r3, #0
 801004a:	bf14      	ite	ne
 801004c:	2301      	movne	r3, #1
 801004e:	2300      	moveq	r3, #0
 8010050:	b2db      	uxtb	r3, r3
 8010052:	2b00      	cmp	r3, #0
 8010054:	d013      	beq.n	801007e <luaV_execute+0x42a>
 8010056:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801005a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801005e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8010062:	6818      	ldr	r0, [r3, #0]
 8010064:	f7f7 f922 	bl	80072ac <luaG_traceexec>
 8010068:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801006c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010070:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3308      	adds	r3, #8
 801007a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801007e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8010082:	1d1a      	adds	r2, r3, #4
 8010084:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801008e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010092:	09db      	lsrs	r3, r3, #7
 8010094:	b2db      	uxtb	r3, r3
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801009c:	4413      	add	r3, r2
 801009e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80100a2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100ac:	4a01      	ldr	r2, [pc, #4]	; (80100b4 <luaV_execute+0x460>)
 80100ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100b2:	e6a1      	b.n	800fdf8 <luaV_execute+0x1a4>
 80100b4:	0801f5c4 	.word	0x0801f5c4
      }
      vmcase(OP_LOADKX) {
        TValue *rb;
        rb = k + GETARG_Ax(*pc); pc++;
 80100b8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	09db      	lsrs	r3, r3, #7
 80100c0:	00da      	lsls	r2, r3, #3
 80100c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80100c6:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80100ca:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80100ce:	440a      	add	r2, r1
 80100d0:	601a      	str	r2, [r3, #0]
 80100d2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80100d6:	3304      	adds	r3, #4
 80100d8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        setobj2s(L, ra, rb);
 80100dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80100e0:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80100e4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80100e8:	601a      	str	r2, [r3, #0]
 80100ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80100ee:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80100f2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80100f6:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 80100fa:	6812      	ldr	r2, [r2, #0]
 80100fc:	601a      	str	r2, [r3, #0]
 80100fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010102:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801010c:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 8010110:	6812      	ldr	r2, [r2, #0]
 8010112:	6812      	ldr	r2, [r2, #0]
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801011a:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	791a      	ldrb	r2, [r3, #4]
 8010122:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010126:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801012e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010132:	2b00      	cmp	r3, #0
 8010134:	bf14      	ite	ne
 8010136:	2301      	movne	r3, #1
 8010138:	2300      	moveq	r3, #0
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b00      	cmp	r3, #0
 801013e:	d013      	beq.n	8010168 <luaV_execute+0x514>
 8010140:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010144:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010148:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801014c:	6818      	ldr	r0, [r3, #0]
 801014e:	f7f7 f8ad 	bl	80072ac <luaG_traceexec>
 8010152:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8010156:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801015a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	3308      	adds	r3, #8
 8010164:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8010168:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801016c:	1d1a      	adds	r2, r3, #4
 801016e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8010178:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801017c:	09db      	lsrs	r3, r3, #7
 801017e:	b2db      	uxtb	r3, r3
 8010180:	00db      	lsls	r3, r3, #3
 8010182:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010186:	4413      	add	r3, r2
 8010188:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801018c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010190:	b2db      	uxtb	r3, r3
 8010192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010196:	4abd      	ldr	r2, [pc, #756]	; (801048c <luaV_execute+0x838>)
 8010198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801019c:	e62c      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADFALSE) {
        setbfvalue(s2v(ra));
 801019e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80101a2:	2201      	movs	r2, #1
 80101a4:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80101a6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	bf14      	ite	ne
 80101ae:	2301      	movne	r3, #1
 80101b0:	2300      	moveq	r3, #0
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d013      	beq.n	80101e0 <luaV_execute+0x58c>
 80101b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80101bc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80101c0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80101c4:	6818      	ldr	r0, [r3, #0]
 80101c6:	f7f7 f871 	bl	80072ac <luaG_traceexec>
 80101ca:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80101ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80101d2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	3308      	adds	r3, #8
 80101dc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80101e0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80101e4:	1d1a      	adds	r2, r3, #4
 80101e6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80101f0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80101f4:	09db      	lsrs	r3, r3, #7
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	00db      	lsls	r3, r3, #3
 80101fa:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80101fe:	4413      	add	r3, r2
 8010200:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8010204:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010208:	b2db      	uxtb	r3, r3
 801020a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801020e:	4a9f      	ldr	r2, [pc, #636]	; (801048c <luaV_execute+0x838>)
 8010210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010214:	e5f0      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LFALSESKIP) {
        setbfvalue(s2v(ra));
 8010216:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801021a:	2201      	movs	r2, #1
 801021c:	711a      	strb	r2, [r3, #4]
        pc++;  /* skip next instruction */
 801021e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8010222:	3304      	adds	r3, #4
 8010224:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        vmbreak;
 8010228:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801022c:	2b00      	cmp	r3, #0
 801022e:	bf14      	ite	ne
 8010230:	2301      	movne	r3, #1
 8010232:	2300      	moveq	r3, #0
 8010234:	b2db      	uxtb	r3, r3
 8010236:	2b00      	cmp	r3, #0
 8010238:	d013      	beq.n	8010262 <luaV_execute+0x60e>
 801023a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801023e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010242:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8010246:	6818      	ldr	r0, [r3, #0]
 8010248:	f7f7 f830 	bl	80072ac <luaG_traceexec>
 801024c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8010250:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010254:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	3308      	adds	r3, #8
 801025e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8010262:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8010266:	1d1a      	adds	r2, r3, #4
 8010268:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8010272:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010276:	09db      	lsrs	r3, r3, #7
 8010278:	b2db      	uxtb	r3, r3
 801027a:	00db      	lsls	r3, r3, #3
 801027c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010280:	4413      	add	r3, r2
 8010282:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8010286:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801028a:	b2db      	uxtb	r3, r3
 801028c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010290:	4a7e      	ldr	r2, [pc, #504]	; (801048c <luaV_execute+0x838>)
 8010292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010296:	e5af      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADTRUE) {
        setbtvalue(s2v(ra));
 8010298:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801029c:	2211      	movs	r2, #17
 801029e:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80102a0:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	bf14      	ite	ne
 80102a8:	2301      	movne	r3, #1
 80102aa:	2300      	moveq	r3, #0
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d013      	beq.n	80102da <luaV_execute+0x686>
 80102b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80102b6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80102ba:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80102be:	6818      	ldr	r0, [r3, #0]
 80102c0:	f7f6 fff4 	bl	80072ac <luaG_traceexec>
 80102c4:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80102c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80102cc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	3308      	adds	r3, #8
 80102d6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80102da:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80102de:	1d1a      	adds	r2, r3, #4
 80102e0:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80102ea:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80102ee:	09db      	lsrs	r3, r3, #7
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	00db      	lsls	r3, r3, #3
 80102f4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80102f8:	4413      	add	r3, r2
 80102fa:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80102fe:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010302:	b2db      	uxtb	r3, r3
 8010304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010308:	4a60      	ldr	r2, [pc, #384]	; (801048c <luaV_execute+0x838>)
 801030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801030e:	e573      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADNIL) {
        int b = GETARG_B(i);
 8010310:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010314:	0c1b      	lsrs	r3, r3, #16
 8010316:	b2db      	uxtb	r3, r3
 8010318:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
        do {
          setnilvalue(s2v(ra++));
 801031c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8010320:	f103 0208 	add.w	r2, r3, #8
 8010324:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 8010328:	2200      	movs	r2, #0
 801032a:	711a      	strb	r2, [r3, #4]
        } while (b--);
 801032c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8010330:	1e5a      	subs	r2, r3, #1
 8010332:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 8010336:	2b00      	cmp	r3, #0
 8010338:	d1f0      	bne.n	801031c <luaV_execute+0x6c8>
        vmbreak;
 801033a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801033e:	2b00      	cmp	r3, #0
 8010340:	bf14      	ite	ne
 8010342:	2301      	movne	r3, #1
 8010344:	2300      	moveq	r3, #0
 8010346:	b2db      	uxtb	r3, r3
 8010348:	2b00      	cmp	r3, #0
 801034a:	d013      	beq.n	8010374 <luaV_execute+0x720>
 801034c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010350:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010354:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8010358:	6818      	ldr	r0, [r3, #0]
 801035a:	f7f6 ffa7 	bl	80072ac <luaG_traceexec>
 801035e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8010362:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010366:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	3308      	adds	r3, #8
 8010370:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8010374:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8010378:	1d1a      	adds	r2, r3, #4
 801037a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8010384:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010388:	09db      	lsrs	r3, r3, #7
 801038a:	b2db      	uxtb	r3, r3
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010392:	4413      	add	r3, r2
 8010394:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8010398:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801039c:	b2db      	uxtb	r3, r3
 801039e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103a2:	4a3a      	ldr	r2, [pc, #232]	; (801048c <luaV_execute+0x838>)
 80103a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103a8:	e526      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETUPVAL) {
        int b = GETARG_B(i);
 80103aa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80103ae:	0c1b      	lsrs	r3, r3, #16
 80103b0:	461a      	mov	r2, r3
 80103b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80103b6:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80103ba:	b2d2      	uxtb	r2, r2
 80103bc:	601a      	str	r2, [r3, #0]
        setobj2s(L, ra, cl->upvals[b]->v);
 80103be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80103c2:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80103c6:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80103ca:	601a      	str	r2, [r3, #0]
 80103cc:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80103d0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80103d4:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 80103d8:	6812      	ldr	r2, [r2, #0]
 80103da:	3204      	adds	r2, #4
 80103dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80103e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80103e4:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 80103e8:	6892      	ldr	r2, [r2, #8]
 80103ea:	601a      	str	r2, [r3, #0]
 80103ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80103f0:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80103fa:	f2a2 42f4 	subw	r2, r2, #1268	; 0x4f4
 80103fe:	6812      	ldr	r2, [r2, #0]
 8010400:	6812      	ldr	r2, [r2, #0]
 8010402:	601a      	str	r2, [r3, #0]
 8010404:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010408:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	791a      	ldrb	r2, [r3, #4]
 8010410:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010414:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801041c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010420:	2b00      	cmp	r3, #0
 8010422:	bf14      	ite	ne
 8010424:	2301      	movne	r3, #1
 8010426:	2300      	moveq	r3, #0
 8010428:	b2db      	uxtb	r3, r3
 801042a:	2b00      	cmp	r3, #0
 801042c:	d013      	beq.n	8010456 <luaV_execute+0x802>
 801042e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010432:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010436:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801043a:	6818      	ldr	r0, [r3, #0]
 801043c:	f7f6 ff36 	bl	80072ac <luaG_traceexec>
 8010440:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8010444:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010448:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	3308      	adds	r3, #8
 8010452:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8010456:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801045a:	1d1a      	adds	r2, r3, #4
 801045c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8010466:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801046a:	09db      	lsrs	r3, r3, #7
 801046c:	b2db      	uxtb	r3, r3
 801046e:	00db      	lsls	r3, r3, #3
 8010470:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010474:	4413      	add	r3, r2
 8010476:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801047a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801047e:	b2db      	uxtb	r3, r3
 8010480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010484:	4a01      	ldr	r2, [pc, #4]	; (801048c <luaV_execute+0x838>)
 8010486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801048a:	e4b5      	b.n	800fdf8 <luaV_execute+0x1a4>
 801048c:	0801f5c4 	.word	0x0801f5c4
      }
      vmcase(OP_SETUPVAL) {
        UpVal *uv = cl->upvals[GETARG_B(i)];
 8010490:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010494:	0c1b      	lsrs	r3, r3, #16
 8010496:	b2d9      	uxtb	r1, r3
 8010498:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801049c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80104a0:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 80104a4:	3104      	adds	r1, #4
 80104a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80104aa:	601a      	str	r2, [r3, #0]
        setobj(L, uv->v, s2v(ra));
 80104ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80104b0:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80104b4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80104b8:	f5a2 629c 	sub.w	r2, r2, #1248	; 0x4e0
 80104bc:	6812      	ldr	r2, [r2, #0]
 80104be:	6892      	ldr	r2, [r2, #8]
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80104c6:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80104ca:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80104ce:	601a      	str	r2, [r3, #0]
 80104d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80104d4:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80104de:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 80104e2:	6812      	ldr	r2, [r2, #0]
 80104e4:	6812      	ldr	r2, [r2, #0]
 80104e6:	601a      	str	r2, [r3, #0]
 80104e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80104ec:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	791a      	ldrb	r2, [r3, #4]
 80104f4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80104f8:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	711a      	strb	r2, [r3, #4]
        luaC_barrier(L, uv, s2v(ra));
 8010500:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8010504:	791b      	ldrb	r3, [r3, #4]
 8010506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801050a:	2b00      	cmp	r3, #0
 801050c:	d020      	beq.n	8010550 <luaV_execute+0x8fc>
 801050e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010512:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	795b      	ldrb	r3, [r3, #5]
 801051a:	f003 0320 	and.w	r3, r3, #32
 801051e:	2b00      	cmp	r3, #0
 8010520:	d016      	beq.n	8010550 <luaV_execute+0x8fc>
 8010522:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	795b      	ldrb	r3, [r3, #5]
 801052a:	f003 0318 	and.w	r3, r3, #24
 801052e:	2b00      	cmp	r3, #0
 8010530:	d00e      	beq.n	8010550 <luaV_execute+0x8fc>
 8010532:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010536:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 801053a:	6819      	ldr	r1, [r3, #0]
 801053c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010546:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801054a:	6818      	ldr	r0, [r3, #0]
 801054c:	f7f8 fa98 	bl	8008a80 <luaC_barrier_>
        vmbreak;
 8010550:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010554:	2b00      	cmp	r3, #0
 8010556:	bf14      	ite	ne
 8010558:	2301      	movne	r3, #1
 801055a:	2300      	moveq	r3, #0
 801055c:	b2db      	uxtb	r3, r3
 801055e:	2b00      	cmp	r3, #0
 8010560:	d013      	beq.n	801058a <luaV_execute+0x936>
 8010562:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010566:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801056a:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801056e:	6818      	ldr	r0, [r3, #0]
 8010570:	f7f6 fe9c 	bl	80072ac <luaG_traceexec>
 8010574:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8010578:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801057c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	3308      	adds	r3, #8
 8010586:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801058a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801058e:	1d1a      	adds	r2, r3, #4
 8010590:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801059a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801059e:	09db      	lsrs	r3, r3, #7
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	00db      	lsls	r3, r3, #3
 80105a4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80105a8:	4413      	add	r3, r2
 80105aa:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80105ae:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105b8:	4ab5      	ldr	r2, [pc, #724]	; (8010890 <luaV_execute+0xc3c>)
 80105ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105be:	e41b      	b.n	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_B(i)]->v;
 80105c0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80105c4:	0c1b      	lsrs	r3, r3, #16
 80105c6:	b2da      	uxtb	r2, r3
 80105c8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80105cc:	3204      	adds	r2, #4
 80105ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80105d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80105d6:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80105da:	6892      	ldr	r2, [r2, #8]
 80105dc:	601a      	str	r2, [r3, #0]
        TValue *rc = KC(i);
 80105de:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80105e2:	0e1b      	lsrs	r3, r3, #24
 80105e4:	00da      	lsls	r2, r3, #3
 80105e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80105ea:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80105ee:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80105f2:	440a      	add	r2, r1
 80105f4:	601a      	str	r2, [r3, #0]
        TString *key = tsvalue(rc);  /* key must be a string */
 80105f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80105fa:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010606:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801060a:	601a      	str	r2, [r3, #0]
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
 801060c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010610:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	791b      	ldrb	r3, [r3, #4]
 8010618:	2b45      	cmp	r3, #69	; 0x45
 801061a:	d004      	beq.n	8010626 <luaV_execute+0x9d2>
 801061c:	2300      	movs	r3, #0
 801061e:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8010622:	2300      	movs	r3, #0
 8010624:	e01a      	b.n	801065c <luaV_execute+0xa08>
 8010626:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801062a:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	461a      	mov	r2, r3
 8010634:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010638:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801063c:	6819      	ldr	r1, [r3, #0]
 801063e:	4610      	mov	r0, r2
 8010640:	f7fd f9e4 	bl	800da0c <luaH_getshortstr>
 8010644:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
 8010648:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 801064c:	791b      	ldrb	r3, [r3, #4]
 801064e:	f003 030f 	and.w	r3, r3, #15
 8010652:	2b00      	cmp	r3, #0
 8010654:	bf14      	ite	ne
 8010656:	2301      	movne	r3, #1
 8010658:	2300      	moveq	r3, #0
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b00      	cmp	r3, #0
 801065e:	d026      	beq.n	80106ae <luaV_execute+0xa5a>
          setobj2s(L, ra, slot);
 8010660:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010664:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8010668:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010672:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8010676:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 801067a:	601a      	str	r2, [r3, #0]
 801067c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010680:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801068a:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 801068e:	6812      	ldr	r2, [r2, #0]
 8010690:	6812      	ldr	r2, [r2, #0]
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010698:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	791a      	ldrb	r2, [r3, #4]
 80106a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80106a4:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	711a      	strb	r2, [r3, #4]
 80106ac:	e031      	b.n	8010712 <luaV_execute+0xabe>
        }
        else
          Protect(luaV_finishget(L, upval, rc, ra, slot));
 80106ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80106b2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80106bc:	611a      	str	r2, [r3, #16]
 80106be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80106c2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	685a      	ldr	r2, [r3, #4]
 80106ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80106ce:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	60da      	str	r2, [r3, #12]
 80106d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80106da:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 80106de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80106e2:	f2a3 41cc 	subw	r1, r3, #1228	; 0x4cc
 80106e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80106ea:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 80106ee:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80106f8:	6812      	ldr	r2, [r2, #0]
 80106fa:	6809      	ldr	r1, [r1, #0]
 80106fc:	6800      	ldr	r0, [r0, #0]
 80106fe:	f7fe fa63 	bl	800ebc8 <luaV_finishget>
 8010702:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010706:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	695b      	ldr	r3, [r3, #20]
 801070e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8010712:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010716:	2b00      	cmp	r3, #0
 8010718:	bf14      	ite	ne
 801071a:	2301      	movne	r3, #1
 801071c:	2300      	moveq	r3, #0
 801071e:	b2db      	uxtb	r3, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	d013      	beq.n	801074c <luaV_execute+0xaf8>
 8010724:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010728:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801072c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8010730:	6818      	ldr	r0, [r3, #0]
 8010732:	f7f6 fdbb 	bl	80072ac <luaG_traceexec>
 8010736:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801073a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801073e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	3308      	adds	r3, #8
 8010748:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801074c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8010750:	1d1a      	adds	r2, r3, #4
 8010752:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801075c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010760:	09db      	lsrs	r3, r3, #7
 8010762:	b2db      	uxtb	r3, r3
 8010764:	00db      	lsls	r3, r3, #3
 8010766:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801076a:	4413      	add	r3, r2
 801076c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8010770:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010774:	b2db      	uxtb	r3, r3
 8010776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801077a:	4a45      	ldr	r2, [pc, #276]	; (8010890 <luaV_execute+0xc3c>)
 801077c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010780:	f7ff bb3a 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETTABLE) {
        const TValue *slot;
        TValue *rb = vRB(i);
 8010784:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010788:	0c1b      	lsrs	r3, r3, #16
 801078a:	b2db      	uxtb	r3, r3
 801078c:	00db      	lsls	r3, r3, #3
 801078e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010792:	441a      	add	r2, r3
 8010794:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010798:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801079c:	601a      	str	r2, [r3, #0]
        TValue *rc = vRC(i);
 801079e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80107a2:	0e1b      	lsrs	r3, r3, #24
 80107a4:	00db      	lsls	r3, r3, #3
 80107a6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80107aa:	441a      	add	r2, r3
 80107ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80107b0:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80107b4:	601a      	str	r2, [r3, #0]
        lua_Unsigned n;
        if (ttisinteger(rc)  /* fast track for integers? */
 80107b6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80107ba:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	791b      	ldrb	r3, [r3, #4]
 80107c2:	2b03      	cmp	r3, #3
 80107c4:	d156      	bne.n	8010874 <luaV_execute+0xc20>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
 80107c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80107ca:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80107d6:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80107da:	601a      	str	r2, [r3, #0]
 80107dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80107e0:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	791b      	ldrb	r3, [r3, #4]
        if (ttisinteger(rc)  /* fast track for integers? */
 80107e8:	2b45      	cmp	r3, #69	; 0x45
 80107ea:	d004      	beq.n	80107f6 <luaV_execute+0xba2>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
 80107ec:	2300      	movs	r3, #0
 80107ee:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
        if (ttisinteger(rc)  /* fast track for integers? */
 80107f2:	2300      	movs	r3, #0
 80107f4:	e069      	b.n	80108ca <luaV_execute+0xc76>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
 80107f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80107fa:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	1e5a      	subs	r2, r3, #1
 8010802:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010806:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	429a      	cmp	r2, r3
 8010812:	d211      	bcs.n	8010838 <luaV_execute+0xbe4>
 8010814:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010818:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	68da      	ldr	r2, [r3, #12]
 8010822:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010826:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010830:	3b01      	subs	r3, #1
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	4413      	add	r3, r2
 8010836:	e010      	b.n	801085a <luaV_execute+0xc06>
 8010838:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801083c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	461a      	mov	r2, r3
 8010846:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801084a:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4619      	mov	r1, r3
 8010852:	4610      	mov	r0, r2
 8010854:	f7fd f87a 	bl	800d94c <luaH_getint>
 8010858:	4603      	mov	r3, r0
 801085a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 801085e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8010862:	791b      	ldrb	r3, [r3, #4]
 8010864:	f003 030f 	and.w	r3, r3, #15
        if (ttisinteger(rc)  /* fast track for integers? */
 8010868:	2b00      	cmp	r3, #0
 801086a:	bf14      	ite	ne
 801086c:	2301      	movne	r3, #1
 801086e:	2300      	moveq	r3, #0
 8010870:	b2db      	uxtb	r3, r3
 8010872:	e02a      	b.n	80108ca <luaV_execute+0xc76>
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
 8010874:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010878:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	791b      	ldrb	r3, [r3, #4]
        if (ttisinteger(rc)  /* fast track for integers? */
 8010880:	2b45      	cmp	r3, #69	; 0x45
 8010882:	d007      	beq.n	8010894 <luaV_execute+0xc40>
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
 8010884:	2300      	movs	r3, #0
 8010886:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
        if (ttisinteger(rc)  /* fast track for integers? */
 801088a:	2300      	movs	r3, #0
 801088c:	e01d      	b.n	80108ca <luaV_execute+0xc76>
 801088e:	bf00      	nop
 8010890:	0801f5c4 	.word	0x0801f5c4
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
 8010894:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010898:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	461a      	mov	r2, r3
 80108a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80108a6:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80108aa:	6819      	ldr	r1, [r3, #0]
 80108ac:	4610      	mov	r0, r2
 80108ae:	f7fd f90d 	bl	800dacc <luaH_get>
 80108b2:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
 80108b6:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80108ba:	791b      	ldrb	r3, [r3, #4]
 80108bc:	f003 030f 	and.w	r3, r3, #15
        if (ttisinteger(rc)  /* fast track for integers? */
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	bf14      	ite	ne
 80108c4:	2301      	movne	r3, #1
 80108c6:	2300      	moveq	r3, #0
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d026      	beq.n	801091c <luaV_execute+0xcc8>
          setobj2s(L, ra, slot);
 80108ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80108d2:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80108d6:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80108da:	601a      	str	r2, [r3, #0]
 80108dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80108e0:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80108e4:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 80108e8:	601a      	str	r2, [r3, #0]
 80108ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80108ee:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80108f8:	f5a2 6299 	sub.w	r2, r2, #1224	; 0x4c8
 80108fc:	6812      	ldr	r2, [r2, #0]
 80108fe:	6812      	ldr	r2, [r2, #0]
 8010900:	601a      	str	r2, [r3, #0]
 8010902:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010906:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	791a      	ldrb	r2, [r3, #4]
 801090e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010912:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	711a      	strb	r2, [r3, #4]
 801091a:	e031      	b.n	8010980 <luaV_execute+0xd2c>
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
 801091c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010920:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801092a:	611a      	str	r2, [r3, #16]
 801092c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010930:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	685a      	ldr	r2, [r3, #4]
 8010938:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801093c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	60da      	str	r2, [r3, #12]
 8010944:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010948:	f2a3 42bc 	subw	r2, r3, #1212	; 0x4bc
 801094c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010950:	f5a3 6197 	sub.w	r1, r3, #1208	; 0x4b8
 8010954:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010958:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 801095c:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8010966:	6812      	ldr	r2, [r2, #0]
 8010968:	6809      	ldr	r1, [r1, #0]
 801096a:	6800      	ldr	r0, [r0, #0]
 801096c:	f7fe f92c 	bl	800ebc8 <luaV_finishget>
 8010970:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010974:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	695b      	ldr	r3, [r3, #20]
 801097c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8010980:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010984:	2b00      	cmp	r3, #0
 8010986:	bf14      	ite	ne
 8010988:	2301      	movne	r3, #1
 801098a:	2300      	moveq	r3, #0
 801098c:	b2db      	uxtb	r3, r3
 801098e:	2b00      	cmp	r3, #0
 8010990:	d013      	beq.n	80109ba <luaV_execute+0xd66>
 8010992:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010996:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801099a:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801099e:	6818      	ldr	r0, [r3, #0]
 80109a0:	f7f6 fc84 	bl	80072ac <luaG_traceexec>
 80109a4:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80109a8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80109ac:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	3308      	adds	r3, #8
 80109b6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80109ba:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80109be:	1d1a      	adds	r2, r3, #4
 80109c0:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80109ca:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80109ce:	09db      	lsrs	r3, r3, #7
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	00db      	lsls	r3, r3, #3
 80109d4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80109d8:	4413      	add	r3, r2
 80109da:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80109de:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109e8:	4ac1      	ldr	r2, [pc, #772]	; (8010cf0 <luaV_execute+0x109c>)
 80109ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109ee:	f7ff ba03 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETI) {
        const TValue *slot;
        TValue *rb = vRB(i);
 80109f2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80109f6:	0c1b      	lsrs	r3, r3, #16
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	00db      	lsls	r3, r3, #3
 80109fc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010a00:	441a      	add	r2, r3
 8010a02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a06:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8010a0a:	601a      	str	r2, [r3, #0]
        int c = GETARG_C(i);
 8010a0c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010a10:	0e1a      	lsrs	r2, r3, #24
 8010a12:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a16:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8010a1a:	601a      	str	r2, [r3, #0]
        if (luaV_fastgeti(L, rb, c, slot)) {
 8010a1c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a20:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	791b      	ldrb	r3, [r3, #4]
 8010a28:	2b45      	cmp	r3, #69	; 0x45
 8010a2a:	d004      	beq.n	8010a36 <luaV_execute+0xde2>
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8010a32:	2300      	movs	r3, #0
 8010a34:	e03c      	b.n	8010ab0 <luaV_execute+0xe5c>
 8010a36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a3a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	1e5a      	subs	r2, r3, #1
 8010a42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a46:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d211      	bcs.n	8010a78 <luaV_execute+0xe24>
 8010a54:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a58:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	68da      	ldr	r2, [r3, #12]
 8010a62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a66:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010a70:	3b01      	subs	r3, #1
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	4413      	add	r3, r2
 8010a76:	e00f      	b.n	8010a98 <luaV_execute+0xe44>
 8010a78:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a7c:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	461a      	mov	r2, r3
 8010a86:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010a8a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8010a8e:	6819      	ldr	r1, [r3, #0]
 8010a90:	4610      	mov	r0, r2
 8010a92:	f7fc ff5b 	bl	800d94c <luaH_getint>
 8010a96:	4603      	mov	r3, r0
 8010a98:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8010a9c:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8010aa0:	791b      	ldrb	r3, [r3, #4]
 8010aa2:	f003 030f 	and.w	r3, r3, #15
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	bf14      	ite	ne
 8010aaa:	2301      	movne	r3, #1
 8010aac:	2300      	moveq	r3, #0
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d026      	beq.n	8010b02 <luaV_execute+0xeae>
          setobj2s(L, ra, slot);
 8010ab4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ab8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8010abc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8010ac0:	601a      	str	r2, [r3, #0]
 8010ac2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ac6:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8010aca:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8010ace:	601a      	str	r2, [r3, #0]
 8010ad0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ad4:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8010ade:	f2a2 42b4 	subw	r2, r2, #1204	; 0x4b4
 8010ae2:	6812      	ldr	r2, [r2, #0]
 8010ae4:	6812      	ldr	r2, [r2, #0]
 8010ae6:	601a      	str	r2, [r3, #0]
 8010ae8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010aec:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	791a      	ldrb	r2, [r3, #4]
 8010af4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010af8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	711a      	strb	r2, [r3, #4]
 8010b00:	e047      	b.n	8010b92 <luaV_execute+0xf3e>
        }
        else {
          TValue key;
          setivalue(&key, c);
 8010b02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b06:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8010b0a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010b0e:	601a      	str	r2, [r3, #0]
 8010b10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b14:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8010b1e:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8010b22:	6812      	ldr	r2, [r2, #0]
 8010b24:	601a      	str	r2, [r3, #0]
 8010b26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b2a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	2203      	movs	r2, #3
 8010b32:	711a      	strb	r2, [r3, #4]
          Protect(luaV_finishget(L, rb, &key, ra, slot));
 8010b34:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b38:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8010b42:	611a      	str	r2, [r3, #16]
 8010b44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b48:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	685a      	ldr	r2, [r3, #4]
 8010b50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b54:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	60da      	str	r2, [r3, #12]
 8010b5c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010b60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b64:	f2a3 41a4 	subw	r1, r3, #1188	; 0x4a4
 8010b68:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b6c:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8010b70:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8010b7a:	6809      	ldr	r1, [r1, #0]
 8010b7c:	6800      	ldr	r0, [r0, #0]
 8010b7e:	f7fe f823 	bl	800ebc8 <luaV_finishget>
 8010b82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010b86:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	695b      	ldr	r3, [r3, #20]
 8010b8e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        }
        vmbreak;
 8010b92:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	bf14      	ite	ne
 8010b9a:	2301      	movne	r3, #1
 8010b9c:	2300      	moveq	r3, #0
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d013      	beq.n	8010bcc <luaV_execute+0xf78>
 8010ba4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ba8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010bac:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8010bb0:	6818      	ldr	r0, [r3, #0]
 8010bb2:	f7f6 fb7b 	bl	80072ac <luaG_traceexec>
 8010bb6:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8010bba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010bbe:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	3308      	adds	r3, #8
 8010bc8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8010bcc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8010bd0:	1d1a      	adds	r2, r3, #4
 8010bd2:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8010bdc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010be0:	09db      	lsrs	r3, r3, #7
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	00db      	lsls	r3, r3, #3
 8010be6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010bea:	4413      	add	r3, r2
 8010bec:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8010bf0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bfa:	4a3d      	ldr	r2, [pc, #244]	; (8010cf0 <luaV_execute+0x109c>)
 8010bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c00:	f7ff b8fa 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETFIELD) {
        const TValue *slot;
        TValue *rb = vRB(i);
 8010c04:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010c08:	0c1b      	lsrs	r3, r3, #16
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010c12:	441a      	add	r2, r3
 8010c14:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010c18:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8010c1c:	601a      	str	r2, [r3, #0]
        TValue *rc = KC(i);
 8010c1e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010c22:	0e1b      	lsrs	r3, r3, #24
 8010c24:	00da      	lsls	r2, r3, #3
 8010c26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010c2a:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8010c2e:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8010c32:	440a      	add	r2, r1
 8010c34:	601a      	str	r2, [r3, #0]
        TString *key = tsvalue(rc);  /* key must be a string */
 8010c36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010c3a:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010c46:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8010c4a:	601a      	str	r2, [r3, #0]
        if (luaV_fastget(L, rb, key, slot, luaH_getshortstr)) {
 8010c4c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010c50:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	791b      	ldrb	r3, [r3, #4]
 8010c58:	2b45      	cmp	r3, #69	; 0x45
 8010c5a:	d004      	beq.n	8010c66 <luaV_execute+0x1012>
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
 8010c62:	2300      	movs	r3, #0
 8010c64:	e01a      	b.n	8010c9c <luaV_execute+0x1048>
 8010c66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010c6a:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	461a      	mov	r2, r3
 8010c74:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010c78:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8010c7c:	6819      	ldr	r1, [r3, #0]
 8010c7e:	4610      	mov	r0, r2
 8010c80:	f7fc fec4 	bl	800da0c <luaH_getshortstr>
 8010c84:	f8c7 0558 	str.w	r0, [r7, #1368]	; 0x558
 8010c88:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8010c8c:	791b      	ldrb	r3, [r3, #4]
 8010c8e:	f003 030f 	and.w	r3, r3, #15
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bf14      	ite	ne
 8010c96:	2301      	movne	r3, #1
 8010c98:	2300      	moveq	r3, #0
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d029      	beq.n	8010cf4 <luaV_execute+0x10a0>
          setobj2s(L, ra, slot);
 8010ca0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ca4:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8010ca8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010cb2:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8010cb6:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 8010cba:	601a      	str	r2, [r3, #0]
 8010cbc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010cc0:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8010cca:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 8010cce:	6812      	ldr	r2, [r2, #0]
 8010cd0:	6812      	ldr	r2, [r2, #0]
 8010cd2:	601a      	str	r2, [r3, #0]
 8010cd4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010cd8:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	791a      	ldrb	r2, [r3, #4]
 8010ce0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ce4:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	711a      	strb	r2, [r3, #4]
 8010cec:	e034      	b.n	8010d58 <luaV_execute+0x1104>
 8010cee:	bf00      	nop
 8010cf0:	0801f5c4 	.word	0x0801f5c4
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
 8010cf4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010cf8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8010d02:	611a      	str	r2, [r3, #16]
 8010d04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010d08:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	685a      	ldr	r2, [r3, #4]
 8010d10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010d14:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	60da      	str	r2, [r3, #12]
 8010d1c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010d20:	f2a3 4294 	subw	r2, r3, #1172	; 0x494
 8010d24:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010d28:	f5a3 6192 	sub.w	r1, r3, #1168	; 0x490
 8010d2c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010d30:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8010d34:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8010d38:	9300      	str	r3, [sp, #0]
 8010d3a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8010d3e:	6812      	ldr	r2, [r2, #0]
 8010d40:	6809      	ldr	r1, [r1, #0]
 8010d42:	6800      	ldr	r0, [r0, #0]
 8010d44:	f7fd ff40 	bl	800ebc8 <luaV_finishget>
 8010d48:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010d4c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	695b      	ldr	r3, [r3, #20]
 8010d54:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8010d58:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	bf14      	ite	ne
 8010d60:	2301      	movne	r3, #1
 8010d62:	2300      	moveq	r3, #0
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d013      	beq.n	8010d92 <luaV_execute+0x113e>
 8010d6a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010d6e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010d72:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8010d76:	6818      	ldr	r0, [r3, #0]
 8010d78:	f7f6 fa98 	bl	80072ac <luaG_traceexec>
 8010d7c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8010d80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010d84:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	3308      	adds	r3, #8
 8010d8e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8010d92:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8010d96:	1d1a      	adds	r2, r3, #4
 8010d98:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8010da2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010da6:	09db      	lsrs	r3, r3, #7
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	00db      	lsls	r3, r3, #3
 8010dac:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010db0:	4413      	add	r3, r2
 8010db2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8010db6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dc0:	4abc      	ldr	r2, [pc, #752]	; (80110b4 <luaV_execute+0x1460>)
 8010dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dc6:	f7ff b817 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_A(i)]->v;
 8010dca:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010dce:	09db      	lsrs	r3, r3, #7
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8010dd6:	3204      	adds	r2, #4
 8010dd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010ddc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010de0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8010de4:	6892      	ldr	r2, [r2, #8]
 8010de6:	601a      	str	r2, [r3, #0]
        TValue *rb = KB(i);
 8010de8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010dec:	0c1b      	lsrs	r3, r3, #16
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	00da      	lsls	r2, r3, #3
 8010df2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010df6:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8010dfa:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8010dfe:	440a      	add	r2, r1
 8010e00:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);
 8010e02:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d007      	beq.n	8010e1e <luaV_execute+0x11ca>
 8010e0e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010e12:	0e1b      	lsrs	r3, r3, #24
 8010e14:	00db      	lsls	r3, r3, #3
 8010e16:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8010e1a:	4413      	add	r3, r2
 8010e1c:	e006      	b.n	8010e2c <luaV_execute+0x11d8>
 8010e1e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8010e22:	0e1b      	lsrs	r3, r3, #24
 8010e24:	00db      	lsls	r3, r3, #3
 8010e26:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010e2a:	4413      	add	r3, r2
 8010e2c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8010e30:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8010e34:	6013      	str	r3, [r2, #0]
        TString *key = tsvalue(rb);  /* key must be a string */
 8010e36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010e3a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010e46:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8010e4a:	601a      	str	r2, [r3, #0]
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
 8010e4c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010e50:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	791b      	ldrb	r3, [r3, #4]
 8010e58:	2b45      	cmp	r3, #69	; 0x45
 8010e5a:	d004      	beq.n	8010e66 <luaV_execute+0x1212>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8010e62:	2300      	movs	r3, #0
 8010e64:	e01a      	b.n	8010e9c <luaV_execute+0x1248>
 8010e66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010e6a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	461a      	mov	r2, r3
 8010e74:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010e78:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8010e7c:	6819      	ldr	r1, [r3, #0]
 8010e7e:	4610      	mov	r0, r2
 8010e80:	f7fc fdc4 	bl	800da0c <luaH_getshortstr>
 8010e84:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
 8010e88:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8010e8c:	791b      	ldrb	r3, [r3, #4]
 8010e8e:	f003 030f 	and.w	r3, r3, #15
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	bf14      	ite	ne
 8010e96:	2301      	movne	r3, #1
 8010e98:	2300      	moveq	r3, #0
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d057      	beq.n	8010f50 <luaV_execute+0x12fc>
          luaV_finishfastset(L, upval, slot, rc);
 8010ea0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ea4:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8010ea8:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8010eac:	601a      	str	r2, [r3, #0]
 8010eae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010eb2:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8010eb6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8010eba:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8010ebe:	6812      	ldr	r2, [r2, #0]
 8010ec0:	601a      	str	r2, [r3, #0]
 8010ec2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ec6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8010ed0:	f2a2 428c 	subw	r2, r2, #1164	; 0x48c
 8010ed4:	6812      	ldr	r2, [r2, #0]
 8010ed6:	6812      	ldr	r2, [r2, #0]
 8010ed8:	601a      	str	r2, [r3, #0]
 8010eda:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ede:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	791a      	ldrb	r2, [r3, #4]
 8010ee6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010eea:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	711a      	strb	r2, [r3, #4]
 8010ef2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010ef6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	791b      	ldrb	r3, [r3, #4]
 8010efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d059      	beq.n	8010fba <luaV_execute+0x1366>
 8010f06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010f0a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	795b      	ldrb	r3, [r3, #5]
 8010f14:	f003 0320 	and.w	r3, r3, #32
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d04e      	beq.n	8010fba <luaV_execute+0x1366>
 8010f1c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010f20:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	795b      	ldrb	r3, [r3, #5]
 8010f2a:	f003 0318 	and.w	r3, r3, #24
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d043      	beq.n	8010fba <luaV_execute+0x1366>
 8010f32:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010f36:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010f42:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010f46:	4611      	mov	r1, r2
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	f7f7 fdd9 	bl	8008b00 <luaC_barrierback_>
 8010f4e:	e034      	b.n	8010fba <luaV_execute+0x1366>
        }
        else
          Protect(luaV_finishset(L, upval, rb, rc, slot));
 8010f50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010f54:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8010f5e:	611a      	str	r2, [r3, #16]
 8010f60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010f64:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	685a      	ldr	r2, [r3, #4]
 8010f6c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010f70:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	60da      	str	r2, [r3, #12]
 8010f78:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010f7c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8010f80:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8010f84:	f2a2 427c 	subw	r2, r2, #1148	; 0x47c
 8010f88:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8010f8c:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 8010f90:	f507 60b0 	add.w	r0, r7, #1408	; 0x580
 8010f94:	f2a0 507c 	subw	r0, r0, #1404	; 0x57c
 8010f98:	f8d7 4554 	ldr.w	r4, [r7, #1364]	; 0x554
 8010f9c:	9400      	str	r4, [sp, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	6812      	ldr	r2, [r2, #0]
 8010fa2:	6809      	ldr	r1, [r1, #0]
 8010fa4:	6800      	ldr	r0, [r0, #0]
 8010fa6:	f7fd fea1 	bl	800ecec <luaV_finishset>
 8010faa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010fae:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	695b      	ldr	r3, [r3, #20]
 8010fb6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8010fba:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	bf14      	ite	ne
 8010fc2:	2301      	movne	r3, #1
 8010fc4:	2300      	moveq	r3, #0
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d013      	beq.n	8010ff4 <luaV_execute+0x13a0>
 8010fcc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010fd0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8010fd4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8010fd8:	6818      	ldr	r0, [r3, #0]
 8010fda:	f7f6 f967 	bl	80072ac <luaG_traceexec>
 8010fde:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8010fe2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8010fe6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	3308      	adds	r3, #8
 8010ff0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8010ff4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8010ff8:	1d1a      	adds	r2, r3, #4
 8010ffa:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8011004:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011008:	09db      	lsrs	r3, r3, #7
 801100a:	b2db      	uxtb	r3, r3
 801100c:	00db      	lsls	r3, r3, #3
 801100e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011012:	4413      	add	r3, r2
 8011014:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011018:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801101c:	b2db      	uxtb	r3, r3
 801101e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011022:	4a24      	ldr	r2, [pc, #144]	; (80110b4 <luaV_execute+0x1460>)
 8011024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011028:	f7fe bee6 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETTABLE) {
        const TValue *slot;
        TValue *rb = vRB(i);  /* key (table is in 'ra') */
 801102c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011030:	0c1b      	lsrs	r3, r3, #16
 8011032:	b2db      	uxtb	r3, r3
 8011034:	00db      	lsls	r3, r3, #3
 8011036:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801103a:	441a      	add	r2, r3
 801103c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011040:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8011044:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);  /* value */
 8011046:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801104a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801104e:	2b00      	cmp	r3, #0
 8011050:	d007      	beq.n	8011062 <luaV_execute+0x140e>
 8011052:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011056:	0e1b      	lsrs	r3, r3, #24
 8011058:	00db      	lsls	r3, r3, #3
 801105a:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 801105e:	4413      	add	r3, r2
 8011060:	e006      	b.n	8011070 <luaV_execute+0x141c>
 8011062:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011066:	0e1b      	lsrs	r3, r3, #24
 8011068:	00db      	lsls	r3, r3, #3
 801106a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801106e:	4413      	add	r3, r2
 8011070:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011074:	f5a2 628d 	sub.w	r2, r2, #1128	; 0x468
 8011078:	6013      	str	r3, [r2, #0]
        lua_Unsigned n;
        if (ttisinteger(rb)  /* fast track for integers? */
 801107a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801107e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	791b      	ldrb	r3, [r3, #4]
 8011086:	2b03      	cmp	r3, #3
 8011088:	d14c      	bne.n	8011124 <luaV_execute+0x14d0>
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
 801108a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801108e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801109a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801109e:	601a      	str	r2, [r3, #0]
 80110a0:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80110a4:	791b      	ldrb	r3, [r3, #4]
        if (ttisinteger(rb)  /* fast track for integers? */
 80110a6:	2b45      	cmp	r3, #69	; 0x45
 80110a8:	d006      	beq.n	80110b8 <luaV_execute+0x1464>
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
 80110aa:	2300      	movs	r3, #0
 80110ac:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
        if (ttisinteger(rb)  /* fast track for integers? */
 80110b0:	2300      	movs	r3, #0
 80110b2:	e059      	b.n	8011168 <luaV_execute+0x1514>
 80110b4:	0801f5c4 	.word	0x0801f5c4
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
 80110b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80110bc:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	1e5a      	subs	r2, r3, #1
 80110c4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	689b      	ldr	r3, [r3, #8]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d20e      	bcs.n	80110ee <luaV_execute+0x149a>
 80110d0:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	68da      	ldr	r2, [r3, #12]
 80110d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80110dc:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80110e6:	3b01      	subs	r3, #1
 80110e8:	00db      	lsls	r3, r3, #3
 80110ea:	4413      	add	r3, r2
 80110ec:	e00d      	b.n	801110a <luaV_execute+0x14b6>
 80110ee:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	461a      	mov	r2, r3
 80110f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80110fa:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4619      	mov	r1, r3
 8011102:	4610      	mov	r0, r2
 8011104:	f7fc fc22 	bl	800d94c <luaH_getint>
 8011108:	4603      	mov	r3, r0
 801110a:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 801110e:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8011112:	791b      	ldrb	r3, [r3, #4]
 8011114:	f003 030f 	and.w	r3, r3, #15
        if (ttisinteger(rb)  /* fast track for integers? */
 8011118:	2b00      	cmp	r3, #0
 801111a:	bf14      	ite	ne
 801111c:	2301      	movne	r3, #1
 801111e:	2300      	moveq	r3, #0
 8011120:	b2db      	uxtb	r3, r3
 8011122:	e021      	b.n	8011168 <luaV_execute+0x1514>
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
 8011124:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8011128:	791b      	ldrb	r3, [r3, #4]
        if (ttisinteger(rb)  /* fast track for integers? */
 801112a:	2b45      	cmp	r3, #69	; 0x45
 801112c:	d004      	beq.n	8011138 <luaV_execute+0x14e4>
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
 801112e:	2300      	movs	r3, #0
 8011130:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
        if (ttisinteger(rb)  /* fast track for integers? */
 8011134:	2300      	movs	r3, #0
 8011136:	e017      	b.n	8011168 <luaV_execute+0x1514>
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
 8011138:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	461a      	mov	r2, r3
 8011140:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011144:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8011148:	6819      	ldr	r1, [r3, #0]
 801114a:	4610      	mov	r0, r2
 801114c:	f7fc fcbe 	bl	800dacc <luaH_get>
 8011150:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
 8011154:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8011158:	791b      	ldrb	r3, [r3, #4]
 801115a:	f003 030f 	and.w	r3, r3, #15
        if (ttisinteger(rb)  /* fast track for integers? */
 801115e:	2b00      	cmp	r3, #0
 8011160:	bf14      	ite	ne
 8011162:	2301      	movne	r3, #1
 8011164:	2300      	moveq	r3, #0
 8011166:	b2db      	uxtb	r3, r3
 8011168:	2b00      	cmp	r3, #0
 801116a:	d051      	beq.n	8011210 <luaV_execute+0x15bc>
          luaV_finishfastset(L, s2v(ra), slot, rc);
 801116c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011170:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8011174:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8011178:	601a      	str	r2, [r3, #0]
 801117a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801117e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8011182:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011186:	f5a2 628d 	sub.w	r2, r2, #1128	; 0x468
 801118a:	6812      	ldr	r2, [r2, #0]
 801118c:	601a      	str	r2, [r3, #0]
 801118e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011192:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801119c:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 80111a0:	6812      	ldr	r2, [r2, #0]
 80111a2:	6812      	ldr	r2, [r2, #0]
 80111a4:	601a      	str	r2, [r3, #0]
 80111a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80111aa:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	791a      	ldrb	r2, [r3, #4]
 80111b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80111b6:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	711a      	strb	r2, [r3, #4]
 80111be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80111c2:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	791b      	ldrb	r3, [r3, #4]
 80111ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d051      	beq.n	8011276 <luaV_execute+0x1622>
 80111d2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	795b      	ldrb	r3, [r3, #5]
 80111da:	f003 0320 	and.w	r3, r3, #32
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d049      	beq.n	8011276 <luaV_execute+0x1622>
 80111e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80111e6:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	795b      	ldrb	r3, [r3, #5]
 80111f0:	f003 0318 	and.w	r3, r3, #24
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d03e      	beq.n	8011276 <luaV_execute+0x1622>
 80111f8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011202:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011206:	4611      	mov	r1, r2
 8011208:	6818      	ldr	r0, [r3, #0]
 801120a:	f7f7 fc79 	bl	8008b00 <luaC_barrierback_>
 801120e:	e032      	b.n	8011276 <luaV_execute+0x1622>
        }
        else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
 8011210:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011214:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801121e:	611a      	str	r2, [r3, #16]
 8011220:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011224:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	685a      	ldr	r2, [r3, #4]
 801122c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011230:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	60da      	str	r2, [r3, #12]
 8011238:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 801123c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011240:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8011244:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011248:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 801124c:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8011250:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 8011254:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8011258:	9100      	str	r1, [sp, #0]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	6812      	ldr	r2, [r2, #0]
 801125e:	4621      	mov	r1, r4
 8011260:	6800      	ldr	r0, [r0, #0]
 8011262:	f7fd fd43 	bl	800ecec <luaV_finishset>
 8011266:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801126a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	695b      	ldr	r3, [r3, #20]
 8011272:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8011276:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801127a:	2b00      	cmp	r3, #0
 801127c:	bf14      	ite	ne
 801127e:	2301      	movne	r3, #1
 8011280:	2300      	moveq	r3, #0
 8011282:	b2db      	uxtb	r3, r3
 8011284:	2b00      	cmp	r3, #0
 8011286:	d013      	beq.n	80112b0 <luaV_execute+0x165c>
 8011288:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801128c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011290:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011294:	6818      	ldr	r0, [r3, #0]
 8011296:	f7f6 f809 	bl	80072ac <luaG_traceexec>
 801129a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801129e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80112a2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	3308      	adds	r3, #8
 80112ac:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80112b0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80112b4:	1d1a      	adds	r2, r3, #4
 80112b6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80112c0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80112c4:	09db      	lsrs	r3, r3, #7
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	00db      	lsls	r3, r3, #3
 80112ca:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80112ce:	4413      	add	r3, r2
 80112d0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80112d4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112de:	4abc      	ldr	r2, [pc, #752]	; (80115d0 <luaV_execute+0x197c>)
 80112e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112e4:	f7fe bd88 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETI) {
        const TValue *slot;
        int c = GETARG_B(i);
 80112e8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80112ec:	0c1b      	lsrs	r3, r3, #16
 80112ee:	461a      	mov	r2, r3
 80112f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80112f4:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80112f8:	b2d2      	uxtb	r2, r2
 80112fa:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);
 80112fc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011304:	2b00      	cmp	r3, #0
 8011306:	d007      	beq.n	8011318 <luaV_execute+0x16c4>
 8011308:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801130c:	0e1b      	lsrs	r3, r3, #24
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8011314:	4413      	add	r3, r2
 8011316:	e006      	b.n	8011326 <luaV_execute+0x16d2>
 8011318:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801131c:	0e1b      	lsrs	r3, r3, #24
 801131e:	00db      	lsls	r3, r3, #3
 8011320:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011324:	4413      	add	r3, r2
 8011326:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801132a:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 801132e:	6013      	str	r3, [r2, #0]
        if (luaV_fastgeti(L, s2v(ra), c, slot)) {
 8011330:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8011334:	791b      	ldrb	r3, [r3, #4]
 8011336:	2b45      	cmp	r3, #69	; 0x45
 8011338:	d004      	beq.n	8011344 <luaV_execute+0x16f0>
 801133a:	2300      	movs	r3, #0
 801133c:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8011340:	2300      	movs	r3, #0
 8011342:	e033      	b.n	80113ac <luaV_execute+0x1758>
 8011344:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011348:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	1e5a      	subs	r2, r3, #1
 8011350:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	429a      	cmp	r2, r3
 801135a:	d20e      	bcs.n	801137a <luaV_execute+0x1726>
 801135c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	68da      	ldr	r2, [r3, #12]
 8011364:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011368:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8011372:	3b01      	subs	r3, #1
 8011374:	00db      	lsls	r3, r3, #3
 8011376:	4413      	add	r3, r2
 8011378:	e00c      	b.n	8011394 <luaV_execute+0x1740>
 801137a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	461a      	mov	r2, r3
 8011382:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011386:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801138a:	6819      	ldr	r1, [r3, #0]
 801138c:	4610      	mov	r0, r2
 801138e:	f7fc fadd 	bl	800d94c <luaH_getint>
 8011392:	4603      	mov	r3, r0
 8011394:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8011398:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 801139c:	791b      	ldrb	r3, [r3, #4]
 801139e:	f003 030f 	and.w	r3, r3, #15
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	bf14      	ite	ne
 80113a6:	2301      	movne	r3, #1
 80113a8:	2300      	moveq	r3, #0
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d051      	beq.n	8011454 <luaV_execute+0x1800>
          luaV_finishfastset(L, s2v(ra), slot, rc);
 80113b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80113b4:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80113b8:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80113c2:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80113c6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80113ca:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 80113ce:	6812      	ldr	r2, [r2, #0]
 80113d0:	601a      	str	r2, [r3, #0]
 80113d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80113d6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80113e0:	f5a2 628c 	sub.w	r2, r2, #1120	; 0x460
 80113e4:	6812      	ldr	r2, [r2, #0]
 80113e6:	6812      	ldr	r2, [r2, #0]
 80113e8:	601a      	str	r2, [r3, #0]
 80113ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80113ee:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	791a      	ldrb	r2, [r3, #4]
 80113f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80113fa:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	711a      	strb	r2, [r3, #4]
 8011402:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011406:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	791b      	ldrb	r3, [r3, #4]
 801140e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011412:	2b00      	cmp	r3, #0
 8011414:	d067      	beq.n	80114e6 <luaV_execute+0x1892>
 8011416:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	795b      	ldrb	r3, [r3, #5]
 801141e:	f003 0320 	and.w	r3, r3, #32
 8011422:	2b00      	cmp	r3, #0
 8011424:	d05f      	beq.n	80114e6 <luaV_execute+0x1892>
 8011426:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801142a:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	795b      	ldrb	r3, [r3, #5]
 8011434:	f003 0318 	and.w	r3, r3, #24
 8011438:	2b00      	cmp	r3, #0
 801143a:	d054      	beq.n	80114e6 <luaV_execute+0x1892>
 801143c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011446:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801144a:	4611      	mov	r1, r2
 801144c:	6818      	ldr	r0, [r3, #0]
 801144e:	f7f7 fb57 	bl	8008b00 <luaC_barrierback_>
 8011452:	e048      	b.n	80114e6 <luaV_execute+0x1892>
        }
        else {
          TValue key;
          setivalue(&key, c);
 8011454:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011458:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 801145c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011460:	601a      	str	r2, [r3, #0]
 8011462:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011466:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011470:	f5a2 628a 	sub.w	r2, r2, #1104	; 0x450
 8011474:	6812      	ldr	r2, [r2, #0]
 8011476:	601a      	str	r2, [r3, #0]
 8011478:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801147c:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2203      	movs	r2, #3
 8011484:	711a      	strb	r2, [r3, #4]
          Protect(luaV_finishset(L, s2v(ra), &key, rc, slot));
 8011486:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801148a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8011494:	611a      	str	r2, [r3, #16]
 8011496:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801149a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	685a      	ldr	r2, [r3, #4]
 80114a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80114a6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	60da      	str	r2, [r3, #12]
 80114ae:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80114b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80114b6:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 80114ba:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80114be:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80114c2:	f2a2 507c 	subw	r0, r2, #1404	; 0x57c
 80114c6:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80114ca:	9200      	str	r2, [sp, #0]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4622      	mov	r2, r4
 80114d0:	6800      	ldr	r0, [r0, #0]
 80114d2:	f7fd fc0b 	bl	800ecec <luaV_finishset>
 80114d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80114da:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	695b      	ldr	r3, [r3, #20]
 80114e2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        }
        vmbreak;
 80114e6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	bf14      	ite	ne
 80114ee:	2301      	movne	r3, #1
 80114f0:	2300      	moveq	r3, #0
 80114f2:	b2db      	uxtb	r3, r3
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d013      	beq.n	8011520 <luaV_execute+0x18cc>
 80114f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80114fc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011500:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011504:	6818      	ldr	r0, [r3, #0]
 8011506:	f7f5 fed1 	bl	80072ac <luaG_traceexec>
 801150a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801150e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011512:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	3308      	adds	r3, #8
 801151c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8011520:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011524:	1d1a      	adds	r2, r3, #4
 8011526:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8011530:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011534:	09db      	lsrs	r3, r3, #7
 8011536:	b2db      	uxtb	r3, r3
 8011538:	00db      	lsls	r3, r3, #3
 801153a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801153e:	4413      	add	r3, r2
 8011540:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011544:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011548:	b2db      	uxtb	r3, r3
 801154a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801154e:	4a20      	ldr	r2, [pc, #128]	; (80115d0 <luaV_execute+0x197c>)
 8011550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011554:	f7fe bc50 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETFIELD) {
        const TValue *slot;
        TValue *rb = KB(i);
 8011558:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801155c:	0c1b      	lsrs	r3, r3, #16
 801155e:	b2db      	uxtb	r3, r3
 8011560:	00da      	lsls	r2, r3, #3
 8011562:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011566:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 801156a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 801156e:	440a      	add	r2, r1
 8011570:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);
 8011572:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801157a:	2b00      	cmp	r3, #0
 801157c:	d007      	beq.n	801158e <luaV_execute+0x193a>
 801157e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011582:	0e1b      	lsrs	r3, r3, #24
 8011584:	00db      	lsls	r3, r3, #3
 8011586:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 801158a:	4413      	add	r3, r2
 801158c:	e006      	b.n	801159c <luaV_execute+0x1948>
 801158e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011592:	0e1b      	lsrs	r3, r3, #24
 8011594:	00db      	lsls	r3, r3, #3
 8011596:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801159a:	4413      	add	r3, r2
 801159c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80115a0:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80115a4:	6013      	str	r3, [r2, #0]
        TString *key = tsvalue(rb);  /* key must be a string */
 80115a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80115aa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80115b6:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80115ba:	601a      	str	r2, [r3, #0]
        if (luaV_fastget(L, s2v(ra), key, slot, luaH_getshortstr)) {
 80115bc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80115c0:	791b      	ldrb	r3, [r3, #4]
 80115c2:	2b45      	cmp	r3, #69	; 0x45
 80115c4:	d006      	beq.n	80115d4 <luaV_execute+0x1980>
 80115c6:	2300      	movs	r3, #0
 80115c8:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
 80115cc:	2300      	movs	r3, #0
 80115ce:	e019      	b.n	8011604 <luaV_execute+0x19b0>
 80115d0:	0801f5c4 	.word	0x0801f5c4
 80115d4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	461a      	mov	r2, r3
 80115dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80115e0:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80115e4:	6819      	ldr	r1, [r3, #0]
 80115e6:	4610      	mov	r0, r2
 80115e8:	f7fc fa10 	bl	800da0c <luaH_getshortstr>
 80115ec:	f8c7 0548 	str.w	r0, [r7, #1352]	; 0x548
 80115f0:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80115f4:	791b      	ldrb	r3, [r3, #4]
 80115f6:	f003 030f 	and.w	r3, r3, #15
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	bf14      	ite	ne
 80115fe:	2301      	movne	r3, #1
 8011600:	2300      	moveq	r3, #0
 8011602:	b2db      	uxtb	r3, r3
 8011604:	2b00      	cmp	r3, #0
 8011606:	d051      	beq.n	80116ac <luaV_execute+0x1a58>
          luaV_finishfastset(L, s2v(ra), slot, rc);
 8011608:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801160c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8011610:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 8011614:	601a      	str	r2, [r3, #0]
 8011616:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801161a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801161e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011622:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8011626:	6812      	ldr	r2, [r2, #0]
 8011628:	601a      	str	r2, [r3, #0]
 801162a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801162e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011638:	f2a2 424c 	subw	r2, r2, #1100	; 0x44c
 801163c:	6812      	ldr	r2, [r2, #0]
 801163e:	6812      	ldr	r2, [r2, #0]
 8011640:	601a      	str	r2, [r3, #0]
 8011642:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011646:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	791a      	ldrb	r2, [r3, #4]
 801164e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011652:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	711a      	strb	r2, [r3, #4]
 801165a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801165e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	791b      	ldrb	r3, [r3, #4]
 8011666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801166a:	2b00      	cmp	r3, #0
 801166c:	d051      	beq.n	8011712 <luaV_execute+0x1abe>
 801166e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	795b      	ldrb	r3, [r3, #5]
 8011676:	f003 0320 	and.w	r3, r3, #32
 801167a:	2b00      	cmp	r3, #0
 801167c:	d049      	beq.n	8011712 <luaV_execute+0x1abe>
 801167e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011682:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	795b      	ldrb	r3, [r3, #5]
 801168c:	f003 0318 	and.w	r3, r3, #24
 8011690:	2b00      	cmp	r3, #0
 8011692:	d03e      	beq.n	8011712 <luaV_execute+0x1abe>
 8011694:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801169e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80116a2:	4611      	mov	r1, r2
 80116a4:	6818      	ldr	r0, [r3, #0]
 80116a6:	f7f7 fa2b 	bl	8008b00 <luaC_barrierback_>
 80116aa:	e032      	b.n	8011712 <luaV_execute+0x1abe>
        }
        else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
 80116ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80116b0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80116ba:	611a      	str	r2, [r3, #16]
 80116bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80116c0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	685a      	ldr	r2, [r3, #4]
 80116c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80116cc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	60da      	str	r2, [r3, #12]
 80116d4:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 80116d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80116dc:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80116e0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80116e4:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80116e8:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80116ec:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 80116f0:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 80116f4:	9100      	str	r1, [sp, #0]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	6812      	ldr	r2, [r2, #0]
 80116fa:	4621      	mov	r1, r4
 80116fc:	6800      	ldr	r0, [r0, #0]
 80116fe:	f7fd faf5 	bl	800ecec <luaV_finishset>
 8011702:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011706:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	695b      	ldr	r3, [r3, #20]
 801170e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8011712:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8011716:	2b00      	cmp	r3, #0
 8011718:	bf14      	ite	ne
 801171a:	2301      	movne	r3, #1
 801171c:	2300      	moveq	r3, #0
 801171e:	b2db      	uxtb	r3, r3
 8011720:	2b00      	cmp	r3, #0
 8011722:	d013      	beq.n	801174c <luaV_execute+0x1af8>
 8011724:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011728:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801172c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011730:	6818      	ldr	r0, [r3, #0]
 8011732:	f7f5 fdbb 	bl	80072ac <luaG_traceexec>
 8011736:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801173a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801173e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	3308      	adds	r3, #8
 8011748:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801174c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011750:	1d1a      	adds	r2, r3, #4
 8011752:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801175c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011760:	09db      	lsrs	r3, r3, #7
 8011762:	b2db      	uxtb	r3, r3
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801176a:	4413      	add	r3, r2
 801176c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011770:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011774:	b2db      	uxtb	r3, r3
 8011776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801177a:	4ac9      	ldr	r2, [pc, #804]	; (8011aa0 <luaV_execute+0x1e4c>)
 801177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011780:	f7fe bb3a 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_NEWTABLE) {
        int b = GETARG_B(i);  /* log2(hash size) + 1 */
 8011784:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011788:	0c1b      	lsrs	r3, r3, #16
 801178a:	b2db      	uxtb	r3, r3
 801178c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
        int c = GETARG_C(i);  /* array size */
 8011790:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011794:	0e1b      	lsrs	r3, r3, #24
 8011796:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
        Table *t;
        if (b > 0)
 801179a:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 801179e:	2b00      	cmp	r3, #0
 80117a0:	dd07      	ble.n	80117b2 <luaV_execute+0x1b5e>
          b = 1 << (b - 1);  /* size is 2^(b - 1) */
 80117a2:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80117a6:	3b01      	subs	r3, #1
 80117a8:	2201      	movs	r2, #1
 80117aa:	fa02 f303 	lsl.w	r3, r2, r3
 80117ae:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
        lua_assert((!TESTARG_k(i)) == (GETARG_Ax(*pc) == 0));
        if (TESTARG_k(i))  /* non-zero extra argument? */
 80117b2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80117b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d009      	beq.n	80117d2 <luaV_execute+0x1b7e>
          c += GETARG_Ax(*pc) * (MAXARG_C + 1);  /* add it to size */
 80117be:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	09db      	lsrs	r3, r3, #7
 80117c6:	021b      	lsls	r3, r3, #8
 80117c8:	f8d7 2540 	ldr.w	r2, [r7, #1344]	; 0x540
 80117cc:	4413      	add	r3, r2
 80117ce:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
        pc++;  /* skip extra argument */
 80117d2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80117d6:	3304      	adds	r3, #4
 80117d8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        L->top = ra + 1;  /* correct top in case of emergency GC */
 80117dc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80117e0:	f103 0208 	add.w	r2, r3, #8
 80117e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80117e8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	60da      	str	r2, [r3, #12]
        t = luaH_new(L);  /* memory allocation */
 80117f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80117f4:	f5a3 6486 	sub.w	r4, r3, #1072	; 0x430
 80117f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80117fc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011800:	6818      	ldr	r0, [r3, #0]
 8011802:	f7fb ff44 	bl	800d68e <luaH_new>
 8011806:	6020      	str	r0, [r4, #0]
        sethvalue2s(L, ra, t);
 8011808:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801180c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8011810:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801181a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 801181e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011822:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8011826:	6812      	ldr	r2, [r2, #0]
 8011828:	601a      	str	r2, [r3, #0]
 801182a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801182e:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011838:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	601a      	str	r2, [r3, #0]
 8011840:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011844:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	2245      	movs	r2, #69	; 0x45
 801184c:	711a      	strb	r2, [r3, #4]
        if (b != 0 || c != 0)
 801184e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8011852:	2b00      	cmp	r3, #0
 8011854:	d103      	bne.n	801185e <luaV_execute+0x1c0a>
 8011856:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00f      	beq.n	801187e <luaV_execute+0x1c2a>
          luaH_resize(L, t, c, b);  /* idem */
 801185e:	f8d7 2540 	ldr.w	r2, [r7, #1344]	; 0x540
 8011862:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8011866:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 801186a:	f5a1 6186 	sub.w	r1, r1, #1072	; 0x430
 801186e:	f507 60b0 	add.w	r0, r7, #1408	; 0x580
 8011872:	f2a0 507c 	subw	r0, r0, #1404	; 0x57c
 8011876:	6809      	ldr	r1, [r1, #0]
 8011878:	6800      	ldr	r0, [r0, #0]
 801187a:	f7fb fde7 	bl	800d44c <luaH_resize>
        checkGC(L, ra + 1);
 801187e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011882:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	691b      	ldr	r3, [r3, #16]
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	2b00      	cmp	r3, #0
 801188e:	dd20      	ble.n	80118d2 <luaV_execute+0x1c7e>
 8011890:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011894:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801189e:	611a      	str	r2, [r3, #16]
 80118a0:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80118a4:	f103 0208 	add.w	r2, r3, #8
 80118a8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80118ac:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	60da      	str	r2, [r3, #12]
 80118b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80118b8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80118bc:	6818      	ldr	r0, [r3, #0]
 80118be:	f7f9 facb 	bl	800ae58 <luaC_step>
 80118c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80118c6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	695b      	ldr	r3, [r3, #20]
 80118ce:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80118d2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	bf14      	ite	ne
 80118da:	2301      	movne	r3, #1
 80118dc:	2300      	moveq	r3, #0
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d013      	beq.n	801190c <luaV_execute+0x1cb8>
 80118e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80118e8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80118ec:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80118f0:	6818      	ldr	r0, [r3, #0]
 80118f2:	f7f5 fcdb 	bl	80072ac <luaG_traceexec>
 80118f6:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80118fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80118fe:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	3308      	adds	r3, #8
 8011908:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801190c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011910:	1d1a      	adds	r2, r3, #4
 8011912:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801191c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011920:	09db      	lsrs	r3, r3, #7
 8011922:	b2db      	uxtb	r3, r3
 8011924:	00db      	lsls	r3, r3, #3
 8011926:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801192a:	4413      	add	r3, r2
 801192c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011930:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011934:	b2db      	uxtb	r3, r3
 8011936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801193a:	4a59      	ldr	r2, [pc, #356]	; (8011aa0 <luaV_execute+0x1e4c>)
 801193c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011940:	f7fe ba5a 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SELF) {
        const TValue *slot;
        TValue *rb = vRB(i);
 8011944:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011948:	0c1b      	lsrs	r3, r3, #16
 801194a:	b2db      	uxtb	r3, r3
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011952:	441a      	add	r2, r3
 8011954:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011958:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 801195c:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);
 801195e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011966:	2b00      	cmp	r3, #0
 8011968:	d007      	beq.n	801197a <luaV_execute+0x1d26>
 801196a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801196e:	0e1b      	lsrs	r3, r3, #24
 8011970:	00db      	lsls	r3, r3, #3
 8011972:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8011976:	4413      	add	r3, r2
 8011978:	e006      	b.n	8011988 <luaV_execute+0x1d34>
 801197a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801197e:	0e1b      	lsrs	r3, r3, #24
 8011980:	00db      	lsls	r3, r3, #3
 8011982:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011986:	4413      	add	r3, r2
 8011988:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801198c:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8011990:	6013      	str	r3, [r2, #0]
        TString *key = tsvalue(rc);  /* key must be a string */
 8011992:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011996:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80119a2:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80119a6:	601a      	str	r2, [r3, #0]
        setobj2s(L, ra + 1, rb);
 80119a8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80119ac:	f103 0208 	add.w	r2, r3, #8
 80119b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80119b4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80119be:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80119c2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80119c6:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 80119ca:	6812      	ldr	r2, [r2, #0]
 80119cc:	601a      	str	r2, [r3, #0]
 80119ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80119d2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80119dc:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 80119e0:	6812      	ldr	r2, [r2, #0]
 80119e2:	6812      	ldr	r2, [r2, #0]
 80119e4:	601a      	str	r2, [r3, #0]
 80119e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80119ea:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	791a      	ldrb	r2, [r3, #4]
 80119f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80119f6:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	711a      	strb	r2, [r3, #4]
        if (luaV_fastget(L, rb, key, slot, luaH_getstr)) {
 80119fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011a02:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	791b      	ldrb	r3, [r3, #4]
 8011a0a:	2b45      	cmp	r3, #69	; 0x45
 8011a0c:	d004      	beq.n	8011a18 <luaV_execute+0x1dc4>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8011a14:	2300      	movs	r3, #0
 8011a16:	e01a      	b.n	8011a4e <luaV_execute+0x1dfa>
 8011a18:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011a1c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	461a      	mov	r2, r3
 8011a26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011a2a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8011a2e:	6819      	ldr	r1, [r3, #0]
 8011a30:	4610      	mov	r0, r2
 8011a32:	f7fc f821 	bl	800da78 <luaH_getstr>
 8011a36:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
 8011a3a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8011a3e:	791b      	ldrb	r3, [r3, #4]
 8011a40:	f003 030f 	and.w	r3, r3, #15
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	bf14      	ite	ne
 8011a48:	2301      	movne	r3, #1
 8011a4a:	2300      	moveq	r3, #0
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d028      	beq.n	8011aa4 <luaV_execute+0x1e50>
          setobj2s(L, ra, slot);
 8011a52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011a56:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8011a5a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011a5e:	601a      	str	r2, [r3, #0]
 8011a60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011a64:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8011a68:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011a72:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011a7c:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8011a80:	6812      	ldr	r2, [r2, #0]
 8011a82:	6812      	ldr	r2, [r2, #0]
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011a8a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	791a      	ldrb	r2, [r3, #4]
 8011a92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011a96:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	711a      	strb	r2, [r3, #4]
 8011a9e:	e033      	b.n	8011b08 <luaV_execute+0x1eb4>
 8011aa0:	0801f5c4 	.word	0x0801f5c4
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
 8011aa4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011aa8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8011ab2:	611a      	str	r2, [r3, #16]
 8011ab4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ab8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ac4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	60da      	str	r2, [r3, #12]
 8011acc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ad0:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 8011ad4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ad8:	f2a3 4114 	subw	r1, r3, #1044	; 0x414
 8011adc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ae0:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8011ae4:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8011aee:	6812      	ldr	r2, [r2, #0]
 8011af0:	6809      	ldr	r1, [r1, #0]
 8011af2:	6800      	ldr	r0, [r0, #0]
 8011af4:	f7fd f868 	bl	800ebc8 <luaV_finishget>
 8011af8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011afc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	695b      	ldr	r3, [r3, #20]
 8011b04:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8011b08:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	bf14      	ite	ne
 8011b10:	2301      	movne	r3, #1
 8011b12:	2300      	moveq	r3, #0
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d013      	beq.n	8011b42 <luaV_execute+0x1eee>
 8011b1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011b1e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011b22:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011b26:	6818      	ldr	r0, [r3, #0]
 8011b28:	f7f5 fbc0 	bl	80072ac <luaG_traceexec>
 8011b2c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8011b30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011b34:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	3308      	adds	r3, #8
 8011b3e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8011b42:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011b46:	1d1a      	adds	r2, r3, #4
 8011b48:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8011b52:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011b56:	09db      	lsrs	r3, r3, #7
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	00db      	lsls	r3, r3, #3
 8011b5c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011b60:	4413      	add	r3, r2
 8011b62:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011b66:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b70:	4aca      	ldr	r2, [pc, #808]	; (8011e9c <luaV_execute+0x2248>)
 8011b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b76:	f7fe b93f 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_ADDI) {
        op_arithI(L, l_addi, luai_numadd);
 8011b7a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011b7e:	0c1b      	lsrs	r3, r3, #16
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	00db      	lsls	r3, r3, #3
 8011b84:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011b88:	441a      	add	r2, r3
 8011b8a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011b8e:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8011b92:	601a      	str	r2, [r3, #0]
 8011b94:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011b98:	0e1b      	lsrs	r3, r3, #24
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ba0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8011ba4:	3a7f      	subs	r2, #127	; 0x7f
 8011ba6:	601a      	str	r2, [r3, #0]
 8011ba8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011bac:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	791b      	ldrb	r3, [r3, #4]
 8011bb4:	2b03      	cmp	r3, #3
 8011bb6:	d130      	bne.n	8011c1a <luaV_execute+0x1fc6>
 8011bb8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011bbc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011bc0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011bc4:	f5a2 727e 	sub.w	r2, r2, #1016	; 0x3f8
 8011bc8:	6812      	ldr	r2, [r2, #0]
 8011bca:	6812      	ldr	r2, [r2, #0]
 8011bcc:	601a      	str	r2, [r3, #0]
 8011bce:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8011bd8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011bdc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8011be0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011be4:	601a      	str	r2, [r3, #0]
 8011be6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011bea:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011bf4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c02:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c0e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2203      	movs	r2, #3
 8011c16:	711a      	strb	r2, [r3, #4]
 8011c18:	e049      	b.n	8011cae <luaV_execute+0x205a>
 8011c1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c1e:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	791b      	ldrb	r3, [r3, #4]
 8011c26:	2b13      	cmp	r3, #19
 8011c28:	d141      	bne.n	8011cae <luaV_execute+0x205a>
 8011c2a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c2e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011c32:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011c36:	f5a2 727e 	sub.w	r2, r2, #1016	; 0x3f8
 8011c3a:	6812      	ldr	r2, [r2, #0]
 8011c3c:	6812      	ldr	r2, [r2, #0]
 8011c3e:	601a      	str	r2, [r3, #0]
 8011c40:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c44:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011c48:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011c4c:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8011c50:	6812      	ldr	r2, [r2, #0]
 8011c52:	ee07 2a90 	vmov	s15, r2
 8011c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c5a:	edc3 7a00 	vstr	s15, [r3]
 8011c5e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011c62:	3304      	adds	r3, #4
 8011c64:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8011c68:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c6c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8011c70:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011c74:	601a      	str	r2, [r3, #0]
 8011c76:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c7a:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
 8011c7e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c82:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011c86:	ed92 7a00 	vldr	s14, [r2]
 8011c8a:	edd3 7a00 	vldr	s15, [r3]
 8011c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011c96:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	edc3 7a00 	vstr	s15, [r3]
 8011ca0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ca4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	2213      	movs	r2, #19
 8011cac:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8011cae:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	bf14      	ite	ne
 8011cb6:	2301      	movne	r3, #1
 8011cb8:	2300      	moveq	r3, #0
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d013      	beq.n	8011ce8 <luaV_execute+0x2094>
 8011cc0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011cc4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011cc8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011ccc:	6818      	ldr	r0, [r3, #0]
 8011cce:	f7f5 faed 	bl	80072ac <luaG_traceexec>
 8011cd2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8011cd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011cda:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	3308      	adds	r3, #8
 8011ce4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8011ce8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011cec:	1d1a      	adds	r2, r3, #4
 8011cee:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8011cf8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011cfc:	09db      	lsrs	r3, r3, #7
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	00db      	lsls	r3, r3, #3
 8011d02:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011d06:	4413      	add	r3, r2
 8011d08:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011d0c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d16:	4a61      	ldr	r2, [pc, #388]	; (8011e9c <luaV_execute+0x2248>)
 8011d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d1c:	f7fe b86c 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_ADDK) {
        op_arithK(L, l_addi, luai_numadd);
 8011d20:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011d24:	0c1b      	lsrs	r3, r3, #16
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	00db      	lsls	r3, r3, #3
 8011d2a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011d2e:	441a      	add	r2, r3
 8011d30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011d34:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011d3e:	0e1b      	lsrs	r3, r3, #24
 8011d40:	00da      	lsls	r2, r3, #3
 8011d42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011d46:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8011d4a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8011d4e:	440a      	add	r2, r1
 8011d50:	601a      	str	r2, [r3, #0]
 8011d52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011d56:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	791b      	ldrb	r3, [r3, #4]
 8011d5e:	2b03      	cmp	r3, #3
 8011d60:	d143      	bne.n	8011dea <luaV_execute+0x2196>
 8011d62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011d66:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	791b      	ldrb	r3, [r3, #4]
 8011d6e:	2b03      	cmp	r3, #3
 8011d70:	d13b      	bne.n	8011dea <luaV_execute+0x2196>
 8011d72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011d76:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8011d7a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011d7e:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8011d82:	6812      	ldr	r2, [r2, #0]
 8011d84:	6812      	ldr	r2, [r2, #0]
 8011d86:	601a      	str	r2, [r3, #0]
 8011d88:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011d8c:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8011d90:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011d94:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 8011d98:	6812      	ldr	r2, [r2, #0]
 8011d9a:	6812      	ldr	r2, [r2, #0]
 8011d9c:	601a      	str	r2, [r3, #0]
 8011d9e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011da2:	3304      	adds	r3, #4
 8011da4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8011da8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dac:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8011db0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011db4:	601a      	str	r2, [r3, #0]
 8011db6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dc4:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	4413      	add	r3, r2
 8011dcc:	461a      	mov	r2, r3
 8011dce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dd2:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	601a      	str	r2, [r3, #0]
 8011dda:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dde:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	2203      	movs	r2, #3
 8011de6:	711a      	strb	r2, [r3, #4]
 8011de8:	e081      	b.n	8011eee <luaV_execute+0x229a>
 8011dea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dee:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	791b      	ldrb	r3, [r3, #4]
 8011df6:	2b13      	cmp	r3, #19
 8011df8:	d10a      	bne.n	8011e10 <luaV_execute+0x21bc>
 8011dfa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dfe:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8011e0a:	6013      	str	r3, [r2, #0]
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	e018      	b.n	8011e42 <luaV_execute+0x21ee>
 8011e10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e14:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	791b      	ldrb	r3, [r3, #4]
 8011e1c:	2b03      	cmp	r3, #3
 8011e1e:	d10f      	bne.n	8011e40 <luaV_execute+0x21ec>
 8011e20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e24:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	ee07 3a90 	vmov	s15, r3
 8011e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e34:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8011e38:	edc3 7a00 	vstr	s15, [r3]
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e000      	b.n	8011e42 <luaV_execute+0x21ee>
 8011e40:	2300      	movs	r3, #0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d053      	beq.n	8011eee <luaV_execute+0x229a>
 8011e46:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e4a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	791b      	ldrb	r3, [r3, #4]
 8011e52:	2b13      	cmp	r3, #19
 8011e54:	d10a      	bne.n	8011e6c <luaV_execute+0x2218>
 8011e56:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e5a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8011e66:	6013      	str	r3, [r2, #0]
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e01a      	b.n	8011ea2 <luaV_execute+0x224e>
 8011e6c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e70:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	791b      	ldrb	r3, [r3, #4]
 8011e78:	2b03      	cmp	r3, #3
 8011e7a:	d111      	bne.n	8011ea0 <luaV_execute+0x224c>
 8011e7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e80:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	ee07 3a90 	vmov	s15, r3
 8011e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e90:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8011e94:	edc3 7a00 	vstr	s15, [r3]
 8011e98:	2301      	movs	r3, #1
 8011e9a:	e002      	b.n	8011ea2 <luaV_execute+0x224e>
 8011e9c:	0801f5c4 	.word	0x0801f5c4
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d023      	beq.n	8011eee <luaV_execute+0x229a>
 8011ea6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011eaa:	3304      	adds	r3, #4
 8011eac:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8011eb0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011eb4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8011eb8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011ebc:	601a      	str	r2, [r3, #0]
 8011ebe:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8011ec2:	ed93 7a00 	vldr	s14, [r3]
 8011ec6:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8011eca:	edd3 7a00 	vldr	s15, [r3]
 8011ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ed2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ed6:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	edc3 7a00 	vstr	s15, [r3]
 8011ee0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ee4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2213      	movs	r2, #19
 8011eec:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8011eee:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	bf14      	ite	ne
 8011ef6:	2301      	movne	r3, #1
 8011ef8:	2300      	moveq	r3, #0
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d013      	beq.n	8011f28 <luaV_execute+0x22d4>
 8011f00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f04:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011f08:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011f0c:	6818      	ldr	r0, [r3, #0]
 8011f0e:	f7f5 f9cd 	bl	80072ac <luaG_traceexec>
 8011f12:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8011f16:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f1a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	3308      	adds	r3, #8
 8011f24:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8011f28:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011f2c:	1d1a      	adds	r2, r3, #4
 8011f2e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8011f38:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011f3c:	09db      	lsrs	r3, r3, #7
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	00db      	lsls	r3, r3, #3
 8011f42:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011f46:	4413      	add	r3, r2
 8011f48:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011f4c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011f50:	b2db      	uxtb	r3, r3
 8011f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f56:	4ac4      	ldr	r2, [pc, #784]	; (8012268 <luaV_execute+0x2614>)
 8011f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f5c:	f7fd bf4c 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SUBK) {
        op_arithK(L, l_subi, luai_numsub);
 8011f60:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011f64:	0c1b      	lsrs	r3, r3, #16
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	00db      	lsls	r3, r3, #3
 8011f6a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011f6e:	441a      	add	r2, r3
 8011f70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f74:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8011f78:	601a      	str	r2, [r3, #0]
 8011f7a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011f7e:	0e1b      	lsrs	r3, r3, #24
 8011f80:	00da      	lsls	r2, r3, #3
 8011f82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f86:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8011f8a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8011f8e:	440a      	add	r2, r1
 8011f90:	601a      	str	r2, [r3, #0]
 8011f92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f96:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	791b      	ldrb	r3, [r3, #4]
 8011f9e:	2b03      	cmp	r3, #3
 8011fa0:	d143      	bne.n	801202a <luaV_execute+0x23d6>
 8011fa2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011fa6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	791b      	ldrb	r3, [r3, #4]
 8011fae:	2b03      	cmp	r3, #3
 8011fb0:	d13b      	bne.n	801202a <luaV_execute+0x23d6>
 8011fb2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011fb6:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8011fba:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011fbe:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8011fc2:	6812      	ldr	r2, [r2, #0]
 8011fc4:	6812      	ldr	r2, [r2, #0]
 8011fc6:	601a      	str	r2, [r3, #0]
 8011fc8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011fcc:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8011fd0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011fd4:	f5a2 7273 	sub.w	r2, r2, #972	; 0x3cc
 8011fd8:	6812      	ldr	r2, [r2, #0]
 8011fda:	6812      	ldr	r2, [r2, #0]
 8011fdc:	601a      	str	r2, [r3, #0]
 8011fde:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8011fe8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011fec:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8011ff0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011ff4:	601a      	str	r2, [r3, #0]
 8011ff6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011ffa:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012004:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	461a      	mov	r2, r3
 801200e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012012:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	601a      	str	r2, [r3, #0]
 801201a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801201e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	2203      	movs	r2, #3
 8012026:	711a      	strb	r2, [r3, #4]
 8012028:	e07f      	b.n	801212a <luaV_execute+0x24d6>
 801202a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801202e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	791b      	ldrb	r3, [r3, #4]
 8012036:	2b13      	cmp	r3, #19
 8012038:	d10a      	bne.n	8012050 <luaV_execute+0x23fc>
 801203a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801203e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f507 62a6 	add.w	r2, r7, #1328	; 0x530
 801204a:	6013      	str	r3, [r2, #0]
 801204c:	2301      	movs	r3, #1
 801204e:	e018      	b.n	8012082 <luaV_execute+0x242e>
 8012050:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012054:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	791b      	ldrb	r3, [r3, #4]
 801205c:	2b03      	cmp	r3, #3
 801205e:	d10f      	bne.n	8012080 <luaV_execute+0x242c>
 8012060:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012064:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	ee07 3a90 	vmov	s15, r3
 8012070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012074:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8012078:	edc3 7a00 	vstr	s15, [r3]
 801207c:	2301      	movs	r3, #1
 801207e:	e000      	b.n	8012082 <luaV_execute+0x242e>
 8012080:	2300      	movs	r3, #0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d051      	beq.n	801212a <luaV_execute+0x24d6>
 8012086:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801208a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	791b      	ldrb	r3, [r3, #4]
 8012092:	2b13      	cmp	r3, #19
 8012094:	d10a      	bne.n	80120ac <luaV_execute+0x2458>
 8012096:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801209a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 80120a6:	6013      	str	r3, [r2, #0]
 80120a8:	2301      	movs	r3, #1
 80120aa:	e018      	b.n	80120de <luaV_execute+0x248a>
 80120ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80120b0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	791b      	ldrb	r3, [r3, #4]
 80120b8:	2b03      	cmp	r3, #3
 80120ba:	d10f      	bne.n	80120dc <luaV_execute+0x2488>
 80120bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80120c0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	ee07 3a90 	vmov	s15, r3
 80120cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120d0:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 80120d4:	edc3 7a00 	vstr	s15, [r3]
 80120d8:	2301      	movs	r3, #1
 80120da:	e000      	b.n	80120de <luaV_execute+0x248a>
 80120dc:	2300      	movs	r3, #0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d023      	beq.n	801212a <luaV_execute+0x24d6>
 80120e2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80120e6:	3304      	adds	r3, #4
 80120e8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80120ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80120f0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80120f4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80120f8:	601a      	str	r2, [r3, #0]
 80120fa:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80120fe:	ed93 7a00 	vldr	s14, [r3]
 8012102:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8012106:	edd3 7a00 	vldr	s15, [r3]
 801210a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801210e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012112:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	edc3 7a00 	vstr	s15, [r3]
 801211c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012120:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2213      	movs	r2, #19
 8012128:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801212a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801212e:	2b00      	cmp	r3, #0
 8012130:	bf14      	ite	ne
 8012132:	2301      	movne	r3, #1
 8012134:	2300      	moveq	r3, #0
 8012136:	b2db      	uxtb	r3, r3
 8012138:	2b00      	cmp	r3, #0
 801213a:	d013      	beq.n	8012164 <luaV_execute+0x2510>
 801213c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012140:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012144:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012148:	6818      	ldr	r0, [r3, #0]
 801214a:	f7f5 f8af 	bl	80072ac <luaG_traceexec>
 801214e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012152:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012156:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	3308      	adds	r3, #8
 8012160:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012164:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012168:	1d1a      	adds	r2, r3, #4
 801216a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012174:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012178:	09db      	lsrs	r3, r3, #7
 801217a:	b2db      	uxtb	r3, r3
 801217c:	00db      	lsls	r3, r3, #3
 801217e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012182:	4413      	add	r3, r2
 8012184:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012188:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801218c:	b2db      	uxtb	r3, r3
 801218e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012192:	4a35      	ldr	r2, [pc, #212]	; (8012268 <luaV_execute+0x2614>)
 8012194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012198:	f7fd be2e 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_MULK) {
        op_arithK(L, l_muli, luai_nummul);
 801219c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80121a0:	0c1b      	lsrs	r3, r3, #16
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	00db      	lsls	r3, r3, #3
 80121a6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80121aa:	441a      	add	r2, r3
 80121ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80121b0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80121b4:	601a      	str	r2, [r3, #0]
 80121b6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80121ba:	0e1b      	lsrs	r3, r3, #24
 80121bc:	00da      	lsls	r2, r3, #3
 80121be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80121c2:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80121c6:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80121ca:	440a      	add	r2, r1
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80121d2:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	791b      	ldrb	r3, [r3, #4]
 80121da:	2b03      	cmp	r3, #3
 80121dc:	d146      	bne.n	801226c <luaV_execute+0x2618>
 80121de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80121e2:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	791b      	ldrb	r3, [r3, #4]
 80121ea:	2b03      	cmp	r3, #3
 80121ec:	d13e      	bne.n	801226c <luaV_execute+0x2618>
 80121ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80121f2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80121f6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80121fa:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 80121fe:	6812      	ldr	r2, [r2, #0]
 8012200:	6812      	ldr	r2, [r2, #0]
 8012202:	601a      	str	r2, [r3, #0]
 8012204:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012208:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 801220c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012210:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8012214:	6812      	ldr	r2, [r2, #0]
 8012216:	6812      	ldr	r2, [r2, #0]
 8012218:	601a      	str	r2, [r3, #0]
 801221a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801221e:	3304      	adds	r3, #4
 8012220:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8012224:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012228:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 801222c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012230:	601a      	str	r2, [r3, #0]
 8012232:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012236:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012240:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8012244:	6812      	ldr	r2, [r2, #0]
 8012246:	fb02 f303 	mul.w	r3, r2, r3
 801224a:	461a      	mov	r2, r3
 801224c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012250:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	601a      	str	r2, [r3, #0]
 8012258:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801225c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2203      	movs	r2, #3
 8012264:	711a      	strb	r2, [r3, #4]
 8012266:	e081      	b.n	801236c <luaV_execute+0x2718>
 8012268:	0801f5c4 	.word	0x0801f5c4
 801226c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012270:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	791b      	ldrb	r3, [r3, #4]
 8012278:	2b13      	cmp	r3, #19
 801227a:	d10a      	bne.n	8012292 <luaV_execute+0x263e>
 801227c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012280:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 801228c:	6013      	str	r3, [r2, #0]
 801228e:	2301      	movs	r3, #1
 8012290:	e018      	b.n	80122c4 <luaV_execute+0x2670>
 8012292:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012296:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	791b      	ldrb	r3, [r3, #4]
 801229e:	2b03      	cmp	r3, #3
 80122a0:	d10f      	bne.n	80122c2 <luaV_execute+0x266e>
 80122a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80122a6:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	ee07 3a90 	vmov	s15, r3
 80122b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122b6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80122ba:	edc3 7a00 	vstr	s15, [r3]
 80122be:	2301      	movs	r3, #1
 80122c0:	e000      	b.n	80122c4 <luaV_execute+0x2670>
 80122c2:	2300      	movs	r3, #0
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d051      	beq.n	801236c <luaV_execute+0x2718>
 80122c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80122cc:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	791b      	ldrb	r3, [r3, #4]
 80122d4:	2b13      	cmp	r3, #19
 80122d6:	d10a      	bne.n	80122ee <luaV_execute+0x269a>
 80122d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80122dc:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	f207 5224 	addw	r2, r7, #1316	; 0x524
 80122e8:	6013      	str	r3, [r2, #0]
 80122ea:	2301      	movs	r3, #1
 80122ec:	e018      	b.n	8012320 <luaV_execute+0x26cc>
 80122ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80122f2:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	791b      	ldrb	r3, [r3, #4]
 80122fa:	2b03      	cmp	r3, #3
 80122fc:	d10f      	bne.n	801231e <luaV_execute+0x26ca>
 80122fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012302:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	ee07 3a90 	vmov	s15, r3
 801230e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012312:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8012316:	edc3 7a00 	vstr	s15, [r3]
 801231a:	2301      	movs	r3, #1
 801231c:	e000      	b.n	8012320 <luaV_execute+0x26cc>
 801231e:	2300      	movs	r3, #0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d023      	beq.n	801236c <luaV_execute+0x2718>
 8012324:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012328:	3304      	adds	r3, #4
 801232a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801232e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012332:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012336:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801233a:	601a      	str	r2, [r3, #0]
 801233c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8012340:	ed93 7a00 	vldr	s14, [r3]
 8012344:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8012348:	edd3 7a00 	vldr	s15, [r3]
 801234c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012350:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012354:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	edc3 7a00 	vstr	s15, [r3]
 801235e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012362:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	2213      	movs	r2, #19
 801236a:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801236c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012370:	2b00      	cmp	r3, #0
 8012372:	bf14      	ite	ne
 8012374:	2301      	movne	r3, #1
 8012376:	2300      	moveq	r3, #0
 8012378:	b2db      	uxtb	r3, r3
 801237a:	2b00      	cmp	r3, #0
 801237c:	d013      	beq.n	80123a6 <luaV_execute+0x2752>
 801237e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012382:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012386:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801238a:	6818      	ldr	r0, [r3, #0]
 801238c:	f7f4 ff8e 	bl	80072ac <luaG_traceexec>
 8012390:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012394:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012398:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	3308      	adds	r3, #8
 80123a2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80123a6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80123aa:	1d1a      	adds	r2, r3, #4
 80123ac:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80123b6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80123ba:	09db      	lsrs	r3, r3, #7
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80123c4:	4413      	add	r3, r2
 80123c6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80123ca:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123d4:	4ac4      	ldr	r2, [pc, #784]	; (80126e8 <luaV_execute+0x2a94>)
 80123d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123da:	f7fd bd0d 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_MODK) {
        op_arithK(L, luaV_mod, luaV_modf);
 80123de:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80123e2:	0c1b      	lsrs	r3, r3, #16
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	00db      	lsls	r3, r3, #3
 80123e8:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80123ec:	441a      	add	r2, r3
 80123ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80123f2:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80123f6:	601a      	str	r2, [r3, #0]
 80123f8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80123fc:	0e1b      	lsrs	r3, r3, #24
 80123fe:	00da      	lsls	r2, r3, #3
 8012400:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012404:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012408:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 801240c:	440a      	add	r2, r1
 801240e:	601a      	str	r2, [r3, #0]
 8012410:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012414:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	791b      	ldrb	r3, [r3, #4]
 801241c:	2b03      	cmp	r3, #3
 801241e:	d149      	bne.n	80124b4 <luaV_execute+0x2860>
 8012420:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012424:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	791b      	ldrb	r3, [r3, #4]
 801242c:	2b03      	cmp	r3, #3
 801242e:	d141      	bne.n	80124b4 <luaV_execute+0x2860>
 8012430:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012434:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8012438:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801243c:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 8012440:	6812      	ldr	r2, [r2, #0]
 8012442:	6812      	ldr	r2, [r2, #0]
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801244a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801244e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012452:	f5a2 7267 	sub.w	r2, r2, #924	; 0x39c
 8012456:	6812      	ldr	r2, [r2, #0]
 8012458:	6812      	ldr	r2, [r2, #0]
 801245a:	601a      	str	r2, [r3, #0]
 801245c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012460:	3304      	adds	r3, #4
 8012462:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8012466:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801246a:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 801246e:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012478:	f5a3 7269 	sub.w	r2, r3, #932	; 0x3a4
 801247c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012480:	f5a3 7168 	sub.w	r1, r3, #928	; 0x3a0
 8012484:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012488:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801248c:	6812      	ldr	r2, [r2, #0]
 801248e:	6809      	ldr	r1, [r1, #0]
 8012490:	6818      	ldr	r0, [r3, #0]
 8012492:	f7fd fad1 	bl	800fa38 <luaV_mod>
 8012496:	4602      	mov	r2, r0
 8012498:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801249c:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	601a      	str	r2, [r3, #0]
 80124a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80124a8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2203      	movs	r2, #3
 80124b0:	711a      	strb	r2, [r3, #4]
 80124b2:	e086      	b.n	80125c2 <luaV_execute+0x296e>
 80124b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80124b8:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	791b      	ldrb	r3, [r3, #4]
 80124c0:	2b13      	cmp	r3, #19
 80124c2:	d10a      	bne.n	80124da <luaV_execute+0x2886>
 80124c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80124c8:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80124d4:	6013      	str	r3, [r2, #0]
 80124d6:	2301      	movs	r3, #1
 80124d8:	e018      	b.n	801250c <luaV_execute+0x28b8>
 80124da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80124de:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	791b      	ldrb	r3, [r3, #4]
 80124e6:	2b03      	cmp	r3, #3
 80124e8:	d10f      	bne.n	801250a <luaV_execute+0x28b6>
 80124ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80124ee:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	ee07 3a90 	vmov	s15, r3
 80124fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124fe:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8012502:	edc3 7a00 	vstr	s15, [r3]
 8012506:	2301      	movs	r3, #1
 8012508:	e000      	b.n	801250c <luaV_execute+0x28b8>
 801250a:	2300      	movs	r3, #0
 801250c:	2b00      	cmp	r3, #0
 801250e:	d058      	beq.n	80125c2 <luaV_execute+0x296e>
 8012510:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012514:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	791b      	ldrb	r3, [r3, #4]
 801251c:	2b13      	cmp	r3, #19
 801251e:	d10a      	bne.n	8012536 <luaV_execute+0x28e2>
 8012520:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012524:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	f207 521c 	addw	r2, r7, #1308	; 0x51c
 8012530:	6013      	str	r3, [r2, #0]
 8012532:	2301      	movs	r3, #1
 8012534:	e018      	b.n	8012568 <luaV_execute+0x2914>
 8012536:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801253a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	791b      	ldrb	r3, [r3, #4]
 8012542:	2b03      	cmp	r3, #3
 8012544:	d10f      	bne.n	8012566 <luaV_execute+0x2912>
 8012546:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801254a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	ee07 3a90 	vmov	s15, r3
 8012556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801255a:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801255e:	edc3 7a00 	vstr	s15, [r3]
 8012562:	2301      	movs	r3, #1
 8012564:	e000      	b.n	8012568 <luaV_execute+0x2914>
 8012566:	2300      	movs	r3, #0
 8012568:	2b00      	cmp	r3, #0
 801256a:	d02a      	beq.n	80125c2 <luaV_execute+0x296e>
 801256c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012570:	3304      	adds	r3, #4
 8012572:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8012576:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801257a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801257e:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012582:	601a      	str	r2, [r3, #0]
 8012584:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012588:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801258c:	f207 521c 	addw	r2, r7, #1308	; 0x51c
 8012590:	edd2 0a00 	vldr	s1, [r2]
 8012594:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8012598:	ed92 0a00 	vldr	s0, [r2]
 801259c:	6818      	ldr	r0, [r3, #0]
 801259e:	f7fd fa7f 	bl	800faa0 <luaV_modf>
 80125a2:	eef0 7a40 	vmov.f32	s15, s0
 80125a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80125aa:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	edc3 7a00 	vstr	s15, [r3]
 80125b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80125b8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2213      	movs	r2, #19
 80125c0:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80125c2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	bf14      	ite	ne
 80125ca:	2301      	movne	r3, #1
 80125cc:	2300      	moveq	r3, #0
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d013      	beq.n	80125fc <luaV_execute+0x29a8>
 80125d4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80125d8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80125dc:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80125e0:	6818      	ldr	r0, [r3, #0]
 80125e2:	f7f4 fe63 	bl	80072ac <luaG_traceexec>
 80125e6:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80125ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80125ee:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	3308      	adds	r3, #8
 80125f8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80125fc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012600:	1d1a      	adds	r2, r3, #4
 8012602:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801260c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012610:	09db      	lsrs	r3, r3, #7
 8012612:	b2db      	uxtb	r3, r3
 8012614:	00db      	lsls	r3, r3, #3
 8012616:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801261a:	4413      	add	r3, r2
 801261c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012620:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012624:	b2db      	uxtb	r3, r3
 8012626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801262a:	4a2f      	ldr	r2, [pc, #188]	; (80126e8 <luaV_execute+0x2a94>)
 801262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012630:	f7fd bbe2 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_POWK) {
        op_arithfK(L, luai_numpow);
 8012634:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012638:	0c1b      	lsrs	r3, r3, #16
 801263a:	b2db      	uxtb	r3, r3
 801263c:	00db      	lsls	r3, r3, #3
 801263e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012642:	441a      	add	r2, r3
 8012644:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012648:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801264c:	601a      	str	r2, [r3, #0]
 801264e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012652:	0e1b      	lsrs	r3, r3, #24
 8012654:	00da      	lsls	r2, r3, #3
 8012656:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801265a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801265e:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8012662:	440a      	add	r2, r1
 8012664:	601a      	str	r2, [r3, #0]
 8012666:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801266a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	791b      	ldrb	r3, [r3, #4]
 8012672:	2b13      	cmp	r3, #19
 8012674:	d10a      	bne.n	801268c <luaV_execute+0x2a38>
 8012676:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801267a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8012686:	6013      	str	r3, [r2, #0]
 8012688:	2301      	movs	r3, #1
 801268a:	e018      	b.n	80126be <luaV_execute+0x2a6a>
 801268c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012690:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	791b      	ldrb	r3, [r3, #4]
 8012698:	2b03      	cmp	r3, #3
 801269a:	d10f      	bne.n	80126bc <luaV_execute+0x2a68>
 801269c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80126a0:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	ee07 3a90 	vmov	s15, r3
 80126ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126b0:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80126b4:	edc3 7a00 	vstr	s15, [r3]
 80126b8:	2301      	movs	r3, #1
 80126ba:	e000      	b.n	80126be <luaV_execute+0x2a6a>
 80126bc:	2300      	movs	r3, #0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d067      	beq.n	8012792 <luaV_execute+0x2b3e>
 80126c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80126c6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	791b      	ldrb	r3, [r3, #4]
 80126ce:	2b13      	cmp	r3, #19
 80126d0:	d10c      	bne.n	80126ec <luaV_execute+0x2a98>
 80126d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80126d6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f207 5214 	addw	r2, r7, #1300	; 0x514
 80126e2:	6013      	str	r3, [r2, #0]
 80126e4:	2301      	movs	r3, #1
 80126e6:	e01a      	b.n	801271e <luaV_execute+0x2aca>
 80126e8:	0801f5c4 	.word	0x0801f5c4
 80126ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80126f0:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	791b      	ldrb	r3, [r3, #4]
 80126f8:	2b03      	cmp	r3, #3
 80126fa:	d10f      	bne.n	801271c <luaV_execute+0x2ac8>
 80126fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012700:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	ee07 3a90 	vmov	s15, r3
 801270c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012710:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8012714:	edc3 7a00 	vstr	s15, [r3]
 8012718:	2301      	movs	r3, #1
 801271a:	e000      	b.n	801271e <luaV_execute+0x2aca>
 801271c:	2300      	movs	r3, #0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d037      	beq.n	8012792 <luaV_execute+0x2b3e>
 8012722:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012726:	3304      	adds	r3, #4
 8012728:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801272c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012730:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8012734:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012738:	601a      	str	r2, [r3, #0]
 801273a:	f207 5314 	addw	r3, r7, #1300	; 0x514
 801273e:	edd3 7a00 	vldr	s15, [r3]
 8012742:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8012746:	eef4 7a47 	vcmp.f32	s15, s14
 801274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274e:	d106      	bne.n	801275e <luaV_execute+0x2b0a>
 8012750:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8012754:	edd3 7a00 	vldr	s15, [r3]
 8012758:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801275c:	e00b      	b.n	8012776 <luaV_execute+0x2b22>
 801275e:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8012762:	edd3 0a00 	vldr	s1, [r3]
 8012766:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 801276a:	ed93 0a00 	vldr	s0, [r3]
 801276e:	f007 ff1f 	bl	801a5b0 <powf>
 8012772:	eef0 7a40 	vmov.f32	s15, s0
 8012776:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801277a:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	edc3 7a00 	vstr	s15, [r3]
 8012784:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012788:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	2213      	movs	r2, #19
 8012790:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8012792:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012796:	2b00      	cmp	r3, #0
 8012798:	bf14      	ite	ne
 801279a:	2301      	movne	r3, #1
 801279c:	2300      	moveq	r3, #0
 801279e:	b2db      	uxtb	r3, r3
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d013      	beq.n	80127cc <luaV_execute+0x2b78>
 80127a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80127a8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80127ac:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80127b0:	6818      	ldr	r0, [r3, #0]
 80127b2:	f7f4 fd7b 	bl	80072ac <luaG_traceexec>
 80127b6:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80127ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80127be:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	3308      	adds	r3, #8
 80127c8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80127cc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80127d0:	1d1a      	adds	r2, r3, #4
 80127d2:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80127dc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80127e0:	09db      	lsrs	r3, r3, #7
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	00db      	lsls	r3, r3, #3
 80127e6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80127ea:	4413      	add	r3, r2
 80127ec:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80127f0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127fa:	4ac1      	ldr	r2, [pc, #772]	; (8012b00 <luaV_execute+0x2eac>)
 80127fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012800:	f7fd bafa 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_DIVK) {
        op_arithfK(L, luai_numdiv);
 8012804:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012808:	0c1b      	lsrs	r3, r3, #16
 801280a:	b2db      	uxtb	r3, r3
 801280c:	00db      	lsls	r3, r3, #3
 801280e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012812:	441a      	add	r2, r3
 8012814:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012818:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801281c:	601a      	str	r2, [r3, #0]
 801281e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012822:	0e1b      	lsrs	r3, r3, #24
 8012824:	00da      	lsls	r2, r3, #3
 8012826:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801282a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801282e:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8012832:	440a      	add	r2, r1
 8012834:	601a      	str	r2, [r3, #0]
 8012836:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801283a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	791b      	ldrb	r3, [r3, #4]
 8012842:	2b13      	cmp	r3, #19
 8012844:	d10a      	bne.n	801285c <luaV_execute+0x2c08>
 8012846:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801284a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8012856:	6013      	str	r3, [r2, #0]
 8012858:	2301      	movs	r3, #1
 801285a:	e018      	b.n	801288e <luaV_execute+0x2c3a>
 801285c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012860:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	791b      	ldrb	r3, [r3, #4]
 8012868:	2b03      	cmp	r3, #3
 801286a:	d10f      	bne.n	801288c <luaV_execute+0x2c38>
 801286c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012870:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	ee07 3a90 	vmov	s15, r3
 801287c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012880:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8012884:	edc3 7a00 	vstr	s15, [r3]
 8012888:	2301      	movs	r3, #1
 801288a:	e000      	b.n	801288e <luaV_execute+0x2c3a>
 801288c:	2300      	movs	r3, #0
 801288e:	2b00      	cmp	r3, #0
 8012890:	d051      	beq.n	8012936 <luaV_execute+0x2ce2>
 8012892:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012896:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	791b      	ldrb	r3, [r3, #4]
 801289e:	2b13      	cmp	r3, #19
 80128a0:	d10a      	bne.n	80128b8 <luaV_execute+0x2c64>
 80128a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80128a6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 80128b2:	6013      	str	r3, [r2, #0]
 80128b4:	2301      	movs	r3, #1
 80128b6:	e018      	b.n	80128ea <luaV_execute+0x2c96>
 80128b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80128bc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	791b      	ldrb	r3, [r3, #4]
 80128c4:	2b03      	cmp	r3, #3
 80128c6:	d10f      	bne.n	80128e8 <luaV_execute+0x2c94>
 80128c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80128cc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	ee07 3a90 	vmov	s15, r3
 80128d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128dc:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 80128e0:	edc3 7a00 	vstr	s15, [r3]
 80128e4:	2301      	movs	r3, #1
 80128e6:	e000      	b.n	80128ea <luaV_execute+0x2c96>
 80128e8:	2300      	movs	r3, #0
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d023      	beq.n	8012936 <luaV_execute+0x2ce2>
 80128ee:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80128f2:	3304      	adds	r3, #4
 80128f4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80128f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80128fc:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8012900:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 801290a:	edd3 6a00 	vldr	s13, [r3]
 801290e:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8012912:	ed93 7a00 	vldr	s14, [r3]
 8012916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801291a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801291e:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	edc3 7a00 	vstr	s15, [r3]
 8012928:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801292c:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2213      	movs	r2, #19
 8012934:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8012936:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801293a:	2b00      	cmp	r3, #0
 801293c:	bf14      	ite	ne
 801293e:	2301      	movne	r3, #1
 8012940:	2300      	moveq	r3, #0
 8012942:	b2db      	uxtb	r3, r3
 8012944:	2b00      	cmp	r3, #0
 8012946:	d013      	beq.n	8012970 <luaV_execute+0x2d1c>
 8012948:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801294c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012950:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012954:	6818      	ldr	r0, [r3, #0]
 8012956:	f7f4 fca9 	bl	80072ac <luaG_traceexec>
 801295a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801295e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012962:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	3308      	adds	r3, #8
 801296c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012970:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012974:	1d1a      	adds	r2, r3, #4
 8012976:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012980:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012984:	09db      	lsrs	r3, r3, #7
 8012986:	b2db      	uxtb	r3, r3
 8012988:	00db      	lsls	r3, r3, #3
 801298a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801298e:	4413      	add	r3, r2
 8012990:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012994:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012998:	b2db      	uxtb	r3, r3
 801299a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801299e:	4a58      	ldr	r2, [pc, #352]	; (8012b00 <luaV_execute+0x2eac>)
 80129a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129a4:	f7fd ba28 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_IDIVK) {
        op_arithK(L, luaV_idiv, luai_numidiv);
 80129a8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80129ac:	0c1b      	lsrs	r3, r3, #16
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	00db      	lsls	r3, r3, #3
 80129b2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80129b6:	441a      	add	r2, r3
 80129b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80129bc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80129c0:	601a      	str	r2, [r3, #0]
 80129c2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80129c6:	0e1b      	lsrs	r3, r3, #24
 80129c8:	00da      	lsls	r2, r3, #3
 80129ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80129ce:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80129d2:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80129d6:	440a      	add	r2, r1
 80129d8:	601a      	str	r2, [r3, #0]
 80129da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80129de:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	791b      	ldrb	r3, [r3, #4]
 80129e6:	2b03      	cmp	r3, #3
 80129e8:	d149      	bne.n	8012a7e <luaV_execute+0x2e2a>
 80129ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80129ee:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	791b      	ldrb	r3, [r3, #4]
 80129f6:	2b03      	cmp	r3, #3
 80129f8:	d141      	bne.n	8012a7e <luaV_execute+0x2e2a>
 80129fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80129fe:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8012a02:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012a06:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8012a0a:	6812      	ldr	r2, [r2, #0]
 8012a0c:	6812      	ldr	r2, [r2, #0]
 8012a0e:	601a      	str	r2, [r3, #0]
 8012a10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a14:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8012a18:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012a1c:	f5a2 725b 	sub.w	r2, r2, #876	; 0x36c
 8012a20:	6812      	ldr	r2, [r2, #0]
 8012a22:	6812      	ldr	r2, [r2, #0]
 8012a24:	601a      	str	r2, [r3, #0]
 8012a26:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012a2a:	3304      	adds	r3, #4
 8012a2c:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8012a30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a34:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8012a38:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012a3c:	601a      	str	r2, [r3, #0]
 8012a3e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a42:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8012a46:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a4a:	f5a3 715c 	sub.w	r1, r3, #880	; 0x370
 8012a4e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a52:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012a56:	6812      	ldr	r2, [r2, #0]
 8012a58:	6809      	ldr	r1, [r1, #0]
 8012a5a:	6818      	ldr	r0, [r3, #0]
 8012a5c:	f7fc ffb4 	bl	800f9c8 <luaV_idiv>
 8012a60:	4602      	mov	r2, r0
 8012a62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a66:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	601a      	str	r2, [r3, #0]
 8012a6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a72:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2203      	movs	r2, #3
 8012a7a:	711a      	strb	r2, [r3, #4]
 8012a7c:	e087      	b.n	8012b8e <luaV_execute+0x2f3a>
 8012a7e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a82:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	791b      	ldrb	r3, [r3, #4]
 8012a8a:	2b13      	cmp	r3, #19
 8012a8c:	d10a      	bne.n	8012aa4 <luaV_execute+0x2e50>
 8012a8e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a92:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8012a9e:	6013      	str	r3, [r2, #0]
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	e018      	b.n	8012ad6 <luaV_execute+0x2e82>
 8012aa4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012aa8:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	791b      	ldrb	r3, [r3, #4]
 8012ab0:	2b03      	cmp	r3, #3
 8012ab2:	d10f      	bne.n	8012ad4 <luaV_execute+0x2e80>
 8012ab4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ab8:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	ee07 3a90 	vmov	s15, r3
 8012ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ac8:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8012acc:	edc3 7a00 	vstr	s15, [r3]
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e000      	b.n	8012ad6 <luaV_execute+0x2e82>
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d059      	beq.n	8012b8e <luaV_execute+0x2f3a>
 8012ada:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ade:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	791b      	ldrb	r3, [r3, #4]
 8012ae6:	2b13      	cmp	r3, #19
 8012ae8:	d10c      	bne.n	8012b04 <luaV_execute+0x2eb0>
 8012aea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012aee:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8012afa:	6013      	str	r3, [r2, #0]
 8012afc:	2301      	movs	r3, #1
 8012afe:	e01a      	b.n	8012b36 <luaV_execute+0x2ee2>
 8012b00:	0801f5c4 	.word	0x0801f5c4
 8012b04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b08:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	791b      	ldrb	r3, [r3, #4]
 8012b10:	2b03      	cmp	r3, #3
 8012b12:	d10f      	bne.n	8012b34 <luaV_execute+0x2ee0>
 8012b14:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b18:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	ee07 3a90 	vmov	s15, r3
 8012b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b28:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8012b2c:	edc3 7a00 	vstr	s15, [r3]
 8012b30:	2301      	movs	r3, #1
 8012b32:	e000      	b.n	8012b36 <luaV_execute+0x2ee2>
 8012b34:	2300      	movs	r3, #0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d029      	beq.n	8012b8e <luaV_execute+0x2f3a>
 8012b3a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012b3e:	3304      	adds	r3, #4
 8012b40:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8012b44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b48:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012b4c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012b50:	601a      	str	r2, [r3, #0]
 8012b52:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8012b56:	ed93 7a00 	vldr	s14, [r3]
 8012b5a:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8012b5e:	edd3 7a00 	vldr	s15, [r3]
 8012b62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012b66:	eeb0 0a66 	vmov.f32	s0, s13
 8012b6a:	f007 fc27 	bl	801a3bc <floorf>
 8012b6e:	eef0 7a40 	vmov.f32	s15, s0
 8012b72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b76:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	edc3 7a00 	vstr	s15, [r3]
 8012b80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b84:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2213      	movs	r2, #19
 8012b8c:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8012b8e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	bf14      	ite	ne
 8012b96:	2301      	movne	r3, #1
 8012b98:	2300      	moveq	r3, #0
 8012b9a:	b2db      	uxtb	r3, r3
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d013      	beq.n	8012bc8 <luaV_execute+0x2f74>
 8012ba0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ba4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012ba8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012bac:	6818      	ldr	r0, [r3, #0]
 8012bae:	f7f4 fb7d 	bl	80072ac <luaG_traceexec>
 8012bb2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012bb6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012bba:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	3308      	adds	r3, #8
 8012bc4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012bc8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012bcc:	1d1a      	adds	r2, r3, #4
 8012bce:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012bd8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012bdc:	09db      	lsrs	r3, r3, #7
 8012bde:	b2db      	uxtb	r3, r3
 8012be0:	00db      	lsls	r3, r3, #3
 8012be2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012be6:	4413      	add	r3, r2
 8012be8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012bec:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012bf6:	4ab1      	ldr	r2, [pc, #708]	; (8012ebc <luaV_execute+0x3268>)
 8012bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012bfc:	f7fd b8fc 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_BANDK) {
        op_bitwiseK(L, l_band);
 8012c00:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012c04:	0c1b      	lsrs	r3, r3, #16
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	00db      	lsls	r3, r3, #3
 8012c0a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012c0e:	441a      	add	r2, r3
 8012c10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c14:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8012c18:	601a      	str	r2, [r3, #0]
 8012c1a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012c1e:	0e1b      	lsrs	r3, r3, #24
 8012c20:	00da      	lsls	r2, r3, #3
 8012c22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c26:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8012c2a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8012c2e:	440a      	add	r2, r1
 8012c30:	601a      	str	r2, [r3, #0]
 8012c32:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c36:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8012c3a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012c3e:	f5a2 7257 	sub.w	r2, r2, #860	; 0x35c
 8012c42:	6812      	ldr	r2, [r2, #0]
 8012c44:	6812      	ldr	r2, [r2, #0]
 8012c46:	601a      	str	r2, [r3, #0]
 8012c48:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c4c:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	791b      	ldrb	r3, [r3, #4]
 8012c54:	2b03      	cmp	r3, #3
 8012c56:	bf0c      	ite	eq
 8012c58:	2301      	moveq	r3, #1
 8012c5a:	2300      	movne	r3, #0
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d00c      	beq.n	8012c7c <luaV_execute+0x3028>
 8012c62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c66:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c72:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8012c76:	601a      	str	r2, [r3, #0]
 8012c78:	2301      	movs	r3, #1
 8012c7a:	e00f      	b.n	8012c9c <luaV_execute+0x3048>
 8012c7c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012c80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c84:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8012c88:	2200      	movs	r2, #0
 8012c8a:	6818      	ldr	r0, [r3, #0]
 8012c8c:	f7fb fd92 	bl	800e7b4 <luaV_tointegerns>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	bf14      	ite	ne
 8012c96:	2301      	movne	r3, #1
 8012c98:	2300      	moveq	r3, #0
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d025      	beq.n	8012cec <luaV_execute+0x3098>
 8012ca0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012ca4:	3304      	adds	r3, #4
 8012ca6:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8012caa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012cae:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8012cb2:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012cb6:	601a      	str	r2, [r3, #0]
 8012cb8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012cbc:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012cc8:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	4013      	ands	r3, r2
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012cd6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	601a      	str	r2, [r3, #0]
 8012cde:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ce2:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2203      	movs	r2, #3
 8012cea:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8012cec:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	bf14      	ite	ne
 8012cf4:	2301      	movne	r3, #1
 8012cf6:	2300      	moveq	r3, #0
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d013      	beq.n	8012d26 <luaV_execute+0x30d2>
 8012cfe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d02:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012d06:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012d0a:	6818      	ldr	r0, [r3, #0]
 8012d0c:	f7f4 face 	bl	80072ac <luaG_traceexec>
 8012d10:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012d14:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d18:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	3308      	adds	r3, #8
 8012d22:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012d26:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012d2a:	1d1a      	adds	r2, r3, #4
 8012d2c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012d36:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d3a:	09db      	lsrs	r3, r3, #7
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	00db      	lsls	r3, r3, #3
 8012d40:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012d44:	4413      	add	r3, r2
 8012d46:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012d4a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d54:	4a59      	ldr	r2, [pc, #356]	; (8012ebc <luaV_execute+0x3268>)
 8012d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d5a:	f7fd b84d 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_BORK) {
        op_bitwiseK(L, l_bor);
 8012d5e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d62:	0c1b      	lsrs	r3, r3, #16
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	00db      	lsls	r3, r3, #3
 8012d68:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012d6c:	441a      	add	r2, r3
 8012d6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d72:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012d76:	601a      	str	r2, [r3, #0]
 8012d78:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d7c:	0e1b      	lsrs	r3, r3, #24
 8012d7e:	00da      	lsls	r2, r3, #3
 8012d80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d84:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8012d88:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8012d8c:	440a      	add	r2, r1
 8012d8e:	601a      	str	r2, [r3, #0]
 8012d90:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d94:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8012d98:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012d9c:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8012da0:	6812      	ldr	r2, [r2, #0]
 8012da2:	6812      	ldr	r2, [r2, #0]
 8012da4:	601a      	str	r2, [r3, #0]
 8012da6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012daa:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	791b      	ldrb	r3, [r3, #4]
 8012db2:	2b03      	cmp	r3, #3
 8012db4:	bf0c      	ite	eq
 8012db6:	2301      	moveq	r3, #1
 8012db8:	2300      	movne	r3, #0
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d00c      	beq.n	8012dda <luaV_execute+0x3186>
 8012dc0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012dc4:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012dd0:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	e00f      	b.n	8012dfa <luaV_execute+0x31a6>
 8012dda:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8012dde:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012de2:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012de6:	2200      	movs	r2, #0
 8012de8:	6818      	ldr	r0, [r3, #0]
 8012dea:	f7fb fce3 	bl	800e7b4 <luaV_tointegerns>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	bf14      	ite	ne
 8012df4:	2301      	movne	r3, #1
 8012df6:	2300      	moveq	r3, #0
 8012df8:	b2db      	uxtb	r3, r3
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d025      	beq.n	8012e4a <luaV_execute+0x31f6>
 8012dfe:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012e02:	3304      	adds	r3, #4
 8012e04:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8012e08:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e0c:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012e10:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012e14:	601a      	str	r2, [r3, #0]
 8012e16:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e1a:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	461a      	mov	r2, r3
 8012e22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e26:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	4313      	orrs	r3, r2
 8012e2e:	461a      	mov	r2, r3
 8012e30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e34:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	601a      	str	r2, [r3, #0]
 8012e3c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e40:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2203      	movs	r2, #3
 8012e48:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8012e4a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	bf14      	ite	ne
 8012e52:	2301      	movne	r3, #1
 8012e54:	2300      	moveq	r3, #0
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d013      	beq.n	8012e84 <luaV_execute+0x3230>
 8012e5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e60:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012e64:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012e68:	6818      	ldr	r0, [r3, #0]
 8012e6a:	f7f4 fa1f 	bl	80072ac <luaG_traceexec>
 8012e6e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012e72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e76:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	3308      	adds	r3, #8
 8012e80:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012e84:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012e88:	1d1a      	adds	r2, r3, #4
 8012e8a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012e94:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012e98:	09db      	lsrs	r3, r3, #7
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	00db      	lsls	r3, r3, #3
 8012e9e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012ea2:	4413      	add	r3, r2
 8012ea4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012ea8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012eb2:	4a02      	ldr	r2, [pc, #8]	; (8012ebc <luaV_execute+0x3268>)
 8012eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012eb8:	f7fc bf9e 	b.w	800fdf8 <luaV_execute+0x1a4>
 8012ebc:	0801f5c4 	.word	0x0801f5c4
      }
      vmcase(OP_BXORK) {
        op_bitwiseK(L, l_bxor);
 8012ec0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012ec4:	0c1b      	lsrs	r3, r3, #16
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	00db      	lsls	r3, r3, #3
 8012eca:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012ece:	441a      	add	r2, r3
 8012ed0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ed4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012ed8:	601a      	str	r2, [r3, #0]
 8012eda:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012ede:	0e1b      	lsrs	r3, r3, #24
 8012ee0:	00da      	lsls	r2, r3, #3
 8012ee2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ee6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8012eea:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8012eee:	440a      	add	r2, r1
 8012ef0:	601a      	str	r2, [r3, #0]
 8012ef2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ef6:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8012efa:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012efe:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 8012f02:	6812      	ldr	r2, [r2, #0]
 8012f04:	6812      	ldr	r2, [r2, #0]
 8012f06:	601a      	str	r2, [r3, #0]
 8012f08:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f0c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	791b      	ldrb	r3, [r3, #4]
 8012f14:	2b03      	cmp	r3, #3
 8012f16:	bf0c      	ite	eq
 8012f18:	2301      	moveq	r3, #1
 8012f1a:	2300      	movne	r3, #0
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d00c      	beq.n	8012f3c <luaV_execute+0x32e8>
 8012f22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f26:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f32:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8012f36:	601a      	str	r2, [r3, #0]
 8012f38:	2301      	movs	r3, #1
 8012f3a:	e00f      	b.n	8012f5c <luaV_execute+0x3308>
 8012f3c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012f40:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f44:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012f48:	2200      	movs	r2, #0
 8012f4a:	6818      	ldr	r0, [r3, #0]
 8012f4c:	f7fb fc32 	bl	800e7b4 <luaV_tointegerns>
 8012f50:	4603      	mov	r3, r0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	bf14      	ite	ne
 8012f56:	2301      	movne	r3, #1
 8012f58:	2300      	moveq	r3, #0
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d025      	beq.n	8012fac <luaV_execute+0x3358>
 8012f60:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012f64:	3304      	adds	r3, #4
 8012f66:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8012f6a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f6e:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8012f72:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012f76:	601a      	str	r2, [r3, #0]
 8012f78:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f7c:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	461a      	mov	r2, r3
 8012f84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f88:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4053      	eors	r3, r2
 8012f90:	461a      	mov	r2, r3
 8012f92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f96:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012fa2:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2203      	movs	r2, #3
 8012faa:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8012fac:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	bf14      	ite	ne
 8012fb4:	2301      	movne	r3, #1
 8012fb6:	2300      	moveq	r3, #0
 8012fb8:	b2db      	uxtb	r3, r3
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d013      	beq.n	8012fe6 <luaV_execute+0x3392>
 8012fbe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012fc2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012fc6:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012fca:	6818      	ldr	r0, [r3, #0]
 8012fcc:	f7f4 f96e 	bl	80072ac <luaG_traceexec>
 8012fd0:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012fd4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012fd8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	3308      	adds	r3, #8
 8012fe2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012fe6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012fea:	1d1a      	adds	r2, r3, #4
 8012fec:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012ff6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012ffa:	09db      	lsrs	r3, r3, #7
 8012ffc:	b2db      	uxtb	r3, r3
 8012ffe:	00db      	lsls	r3, r3, #3
 8013000:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013004:	4413      	add	r3, r2
 8013006:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801300a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801300e:	b2db      	uxtb	r3, r3
 8013010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013014:	4aa6      	ldr	r2, [pc, #664]	; (80132b0 <luaV_execute+0x365c>)
 8013016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801301a:	f7fc beed 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SHRI) {
        TValue *rb = vRB(i);
 801301e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013022:	0c1b      	lsrs	r3, r3, #16
 8013024:	b2db      	uxtb	r3, r3
 8013026:	00db      	lsls	r3, r3, #3
 8013028:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801302c:	441a      	add	r2, r3
 801302e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013032:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8013036:	601a      	str	r2, [r3, #0]
        int ic = GETARG_sC(i);
 8013038:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801303c:	0e1b      	lsrs	r3, r3, #24
 801303e:	461a      	mov	r2, r3
 8013040:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013044:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8013048:	3a7f      	subs	r2, #127	; 0x7f
 801304a:	601a      	str	r2, [r3, #0]
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
 801304c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013050:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	791b      	ldrb	r3, [r3, #4]
 8013058:	2b03      	cmp	r3, #3
 801305a:	bf0c      	ite	eq
 801305c:	2301      	moveq	r3, #1
 801305e:	2300      	movne	r3, #0
 8013060:	b2db      	uxtb	r3, r3
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00c      	beq.n	8013080 <luaV_execute+0x342c>
 8013066:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801306a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013076:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801307a:	601a      	str	r2, [r3, #0]
 801307c:	2301      	movs	r3, #1
 801307e:	e00f      	b.n	80130a0 <luaV_execute+0x344c>
 8013080:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8013084:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013088:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801308c:	2200      	movs	r2, #0
 801308e:	6818      	ldr	r0, [r3, #0]
 8013090:	f7fb fb90 	bl	800e7b4 <luaV_tointegerns>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	bf14      	ite	ne
 801309a:	2301      	movne	r3, #1
 801309c:	2300      	moveq	r3, #0
 801309e:	b2db      	uxtb	r3, r3
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d028      	beq.n	80130f6 <luaV_execute+0x34a2>
          pc++; setivalue(s2v(ra), luaV_shiftl(ib, -ic));
 80130a4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80130a8:	3304      	adds	r3, #4
 80130aa:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80130ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130b2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80130b6:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80130ba:	601a      	str	r2, [r3, #0]
 80130bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130c0:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80130c4:	681a      	ldr	r2, [r3, #0]
 80130c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130ca:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	425b      	negs	r3, r3
 80130d2:	4619      	mov	r1, r3
 80130d4:	4610      	mov	r0, r2
 80130d6:	f7fc fd2b 	bl	800fb30 <luaV_shiftl>
 80130da:	4602      	mov	r2, r0
 80130dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130e0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	601a      	str	r2, [r3, #0]
 80130e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130ec:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2203      	movs	r2, #3
 80130f4:	711a      	strb	r2, [r3, #4]
        }
        vmbreak;
 80130f6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	bf14      	ite	ne
 80130fe:	2301      	movne	r3, #1
 8013100:	2300      	moveq	r3, #0
 8013102:	b2db      	uxtb	r3, r3
 8013104:	2b00      	cmp	r3, #0
 8013106:	d013      	beq.n	8013130 <luaV_execute+0x34dc>
 8013108:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801310c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013110:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013114:	6818      	ldr	r0, [r3, #0]
 8013116:	f7f4 f8c9 	bl	80072ac <luaG_traceexec>
 801311a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801311e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013122:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	3308      	adds	r3, #8
 801312c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013130:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013134:	1d1a      	adds	r2, r3, #4
 8013136:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013140:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013144:	09db      	lsrs	r3, r3, #7
 8013146:	b2db      	uxtb	r3, r3
 8013148:	00db      	lsls	r3, r3, #3
 801314a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801314e:	4413      	add	r3, r2
 8013150:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013154:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013158:	b2db      	uxtb	r3, r3
 801315a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801315e:	4a54      	ldr	r2, [pc, #336]	; (80132b0 <luaV_execute+0x365c>)
 8013160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013164:	f7fc be48 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SHLI) {
        TValue *rb = vRB(i);
 8013168:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801316c:	0c1b      	lsrs	r3, r3, #16
 801316e:	b2db      	uxtb	r3, r3
 8013170:	00db      	lsls	r3, r3, #3
 8013172:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013176:	441a      	add	r2, r3
 8013178:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801317c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8013180:	601a      	str	r2, [r3, #0]
        int ic = GETARG_sC(i);
 8013182:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013186:	0e1b      	lsrs	r3, r3, #24
 8013188:	461a      	mov	r2, r3
 801318a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801318e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8013192:	3a7f      	subs	r2, #127	; 0x7f
 8013194:	601a      	str	r2, [r3, #0]
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
 8013196:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801319a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	791b      	ldrb	r3, [r3, #4]
 80131a2:	2b03      	cmp	r3, #3
 80131a4:	bf0c      	ite	eq
 80131a6:	2301      	moveq	r3, #1
 80131a8:	2300      	movne	r3, #0
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00c      	beq.n	80131ca <luaV_execute+0x3576>
 80131b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80131b4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	681a      	ldr	r2, [r3, #0]
 80131bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80131c0:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 80131c4:	601a      	str	r2, [r3, #0]
 80131c6:	2301      	movs	r3, #1
 80131c8:	e00f      	b.n	80131ea <luaV_execute+0x3596>
 80131ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80131ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80131d2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80131d6:	2200      	movs	r2, #0
 80131d8:	6818      	ldr	r0, [r3, #0]
 80131da:	f7fb faeb 	bl	800e7b4 <luaV_tointegerns>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	bf14      	ite	ne
 80131e4:	2301      	movne	r3, #1
 80131e6:	2300      	moveq	r3, #0
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d026      	beq.n	801323c <luaV_execute+0x35e8>
          pc++; setivalue(s2v(ra), luaV_shiftl(ic, ib));
 80131ee:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80131f2:	3304      	adds	r3, #4
 80131f4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80131f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80131fc:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8013200:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013204:	601a      	str	r2, [r3, #0]
 8013206:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801320a:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013214:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8013218:	4611      	mov	r1, r2
 801321a:	6818      	ldr	r0, [r3, #0]
 801321c:	f7fc fc88 	bl	800fb30 <luaV_shiftl>
 8013220:	4602      	mov	r2, r0
 8013222:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013226:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	601a      	str	r2, [r3, #0]
 801322e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013232:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2203      	movs	r2, #3
 801323a:	711a      	strb	r2, [r3, #4]
        }
        vmbreak;
 801323c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013240:	2b00      	cmp	r3, #0
 8013242:	bf14      	ite	ne
 8013244:	2301      	movne	r3, #1
 8013246:	2300      	moveq	r3, #0
 8013248:	b2db      	uxtb	r3, r3
 801324a:	2b00      	cmp	r3, #0
 801324c:	d013      	beq.n	8013276 <luaV_execute+0x3622>
 801324e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013252:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013256:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801325a:	6818      	ldr	r0, [r3, #0]
 801325c:	f7f4 f826 	bl	80072ac <luaG_traceexec>
 8013260:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013264:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013268:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	3308      	adds	r3, #8
 8013272:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013276:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801327a:	1d1a      	adds	r2, r3, #4
 801327c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013286:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801328a:	09db      	lsrs	r3, r3, #7
 801328c:	b2db      	uxtb	r3, r3
 801328e:	00db      	lsls	r3, r3, #3
 8013290:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013294:	4413      	add	r3, r2
 8013296:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801329a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801329e:	b2db      	uxtb	r3, r3
 80132a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132a4:	4a02      	ldr	r2, [pc, #8]	; (80132b0 <luaV_execute+0x365c>)
 80132a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132aa:	f7fc bda5 	b.w	800fdf8 <luaV_execute+0x1a4>
 80132ae:	bf00      	nop
 80132b0:	0801f5c4 	.word	0x0801f5c4
      }
      vmcase(OP_ADD) {
        op_arith(L, l_addi, luai_numadd);
 80132b4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80132b8:	0c1b      	lsrs	r3, r3, #16
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	00db      	lsls	r3, r3, #3
 80132be:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80132c2:	441a      	add	r2, r3
 80132c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80132c8:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80132d2:	0e1b      	lsrs	r3, r3, #24
 80132d4:	00db      	lsls	r3, r3, #3
 80132d6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80132da:	441a      	add	r2, r3
 80132dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80132e0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80132e4:	601a      	str	r2, [r3, #0]
 80132e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80132ea:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	791b      	ldrb	r3, [r3, #4]
 80132f2:	2b03      	cmp	r3, #3
 80132f4:	d143      	bne.n	801337e <luaV_execute+0x372a>
 80132f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80132fa:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	791b      	ldrb	r3, [r3, #4]
 8013302:	2b03      	cmp	r3, #3
 8013304:	d13b      	bne.n	801337e <luaV_execute+0x372a>
 8013306:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801330a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801330e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013312:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8013316:	6812      	ldr	r2, [r2, #0]
 8013318:	6812      	ldr	r2, [r2, #0]
 801331a:	601a      	str	r2, [r3, #0]
 801331c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013320:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8013324:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013328:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 801332c:	6812      	ldr	r2, [r2, #0]
 801332e:	6812      	ldr	r2, [r2, #0]
 8013330:	601a      	str	r2, [r3, #0]
 8013332:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013336:	3304      	adds	r3, #4
 8013338:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801333c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013340:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8013344:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013348:	601a      	str	r2, [r3, #0]
 801334a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801334e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013358:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	4413      	add	r3, r2
 8013360:	461a      	mov	r2, r3
 8013362:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013366:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	601a      	str	r2, [r3, #0]
 801336e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013372:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2203      	movs	r2, #3
 801337a:	711a      	strb	r2, [r3, #4]
 801337c:	e07f      	b.n	801347e <luaV_execute+0x382a>
 801337e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013382:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	791b      	ldrb	r3, [r3, #4]
 801338a:	2b13      	cmp	r3, #19
 801338c:	d10a      	bne.n	80133a4 <luaV_execute+0x3750>
 801338e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013392:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 801339e:	6013      	str	r3, [r2, #0]
 80133a0:	2301      	movs	r3, #1
 80133a2:	e018      	b.n	80133d6 <luaV_execute+0x3782>
 80133a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80133a8:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	791b      	ldrb	r3, [r3, #4]
 80133b0:	2b03      	cmp	r3, #3
 80133b2:	d10f      	bne.n	80133d4 <luaV_execute+0x3780>
 80133b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80133b8:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	ee07 3a90 	vmov	s15, r3
 80133c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133c8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80133cc:	edc3 7a00 	vstr	s15, [r3]
 80133d0:	2301      	movs	r3, #1
 80133d2:	e000      	b.n	80133d6 <luaV_execute+0x3782>
 80133d4:	2300      	movs	r3, #0
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d051      	beq.n	801347e <luaV_execute+0x382a>
 80133da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80133de:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	791b      	ldrb	r3, [r3, #4]
 80133e6:	2b13      	cmp	r3, #19
 80133e8:	d10a      	bne.n	8013400 <luaV_execute+0x37ac>
 80133ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80133ee:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80133fa:	6013      	str	r3, [r2, #0]
 80133fc:	2301      	movs	r3, #1
 80133fe:	e018      	b.n	8013432 <luaV_execute+0x37de>
 8013400:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013404:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	791b      	ldrb	r3, [r3, #4]
 801340c:	2b03      	cmp	r3, #3
 801340e:	d10f      	bne.n	8013430 <luaV_execute+0x37dc>
 8013410:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013414:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	ee07 3a90 	vmov	s15, r3
 8013420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013424:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8013428:	edc3 7a00 	vstr	s15, [r3]
 801342c:	2301      	movs	r3, #1
 801342e:	e000      	b.n	8013432 <luaV_execute+0x37de>
 8013430:	2300      	movs	r3, #0
 8013432:	2b00      	cmp	r3, #0
 8013434:	d023      	beq.n	801347e <luaV_execute+0x382a>
 8013436:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801343a:	3304      	adds	r3, #4
 801343c:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013440:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013444:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8013448:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801344c:	601a      	str	r2, [r3, #0]
 801344e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8013452:	ed93 7a00 	vldr	s14, [r3]
 8013456:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801345a:	edd3 7a00 	vldr	s15, [r3]
 801345e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013462:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013466:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	edc3 7a00 	vstr	s15, [r3]
 8013470:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013474:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	2213      	movs	r2, #19
 801347c:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801347e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013482:	2b00      	cmp	r3, #0
 8013484:	bf14      	ite	ne
 8013486:	2301      	movne	r3, #1
 8013488:	2300      	moveq	r3, #0
 801348a:	b2db      	uxtb	r3, r3
 801348c:	2b00      	cmp	r3, #0
 801348e:	d013      	beq.n	80134b8 <luaV_execute+0x3864>
 8013490:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013494:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013498:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801349c:	6818      	ldr	r0, [r3, #0]
 801349e:	f7f3 ff05 	bl	80072ac <luaG_traceexec>
 80134a2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80134a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80134aa:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	3308      	adds	r3, #8
 80134b4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80134b8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80134bc:	1d1a      	adds	r2, r3, #4
 80134be:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80134c8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80134cc:	09db      	lsrs	r3, r3, #7
 80134ce:	b2db      	uxtb	r3, r3
 80134d0:	00db      	lsls	r3, r3, #3
 80134d2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80134d6:	4413      	add	r3, r2
 80134d8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80134dc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134e6:	4ac4      	ldr	r2, [pc, #784]	; (80137f8 <luaV_execute+0x3ba4>)
 80134e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134ec:	f7fc bc84 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SUB) {
        op_arith(L, l_subi, luai_numsub);
 80134f0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80134f4:	0c1b      	lsrs	r3, r3, #16
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	00db      	lsls	r3, r3, #3
 80134fa:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80134fe:	441a      	add	r2, r3
 8013500:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013504:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801350e:	0e1b      	lsrs	r3, r3, #24
 8013510:	00db      	lsls	r3, r3, #3
 8013512:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013516:	441a      	add	r2, r3
 8013518:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801351c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8013520:	601a      	str	r2, [r3, #0]
 8013522:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013526:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	791b      	ldrb	r3, [r3, #4]
 801352e:	2b03      	cmp	r3, #3
 8013530:	d143      	bne.n	80135ba <luaV_execute+0x3966>
 8013532:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013536:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	791b      	ldrb	r3, [r3, #4]
 801353e:	2b03      	cmp	r3, #3
 8013540:	d13b      	bne.n	80135ba <luaV_execute+0x3966>
 8013542:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013546:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801354a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801354e:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8013552:	6812      	ldr	r2, [r2, #0]
 8013554:	6812      	ldr	r2, [r2, #0]
 8013556:	601a      	str	r2, [r3, #0]
 8013558:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801355c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8013560:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013564:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 8013568:	6812      	ldr	r2, [r2, #0]
 801356a:	6812      	ldr	r2, [r2, #0]
 801356c:	601a      	str	r2, [r3, #0]
 801356e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013572:	3304      	adds	r3, #4
 8013574:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013578:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801357c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8013580:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013584:	601a      	str	r2, [r3, #0]
 8013586:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801358a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801358e:	681a      	ldr	r2, [r3, #0]
 8013590:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013594:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	1ad3      	subs	r3, r2, r3
 801359c:	461a      	mov	r2, r3
 801359e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135a2:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	601a      	str	r2, [r3, #0]
 80135aa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135ae:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	2203      	movs	r2, #3
 80135b6:	711a      	strb	r2, [r3, #4]
 80135b8:	e07f      	b.n	80136ba <luaV_execute+0x3a66>
 80135ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135be:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	791b      	ldrb	r3, [r3, #4]
 80135c6:	2b13      	cmp	r3, #19
 80135c8:	d10a      	bne.n	80135e0 <luaV_execute+0x398c>
 80135ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135ce:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80135da:	6013      	str	r3, [r2, #0]
 80135dc:	2301      	movs	r3, #1
 80135de:	e018      	b.n	8013612 <luaV_execute+0x39be>
 80135e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135e4:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	791b      	ldrb	r3, [r3, #4]
 80135ec:	2b03      	cmp	r3, #3
 80135ee:	d10f      	bne.n	8013610 <luaV_execute+0x39bc>
 80135f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135f4:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	ee07 3a90 	vmov	s15, r3
 8013600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013604:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8013608:	edc3 7a00 	vstr	s15, [r3]
 801360c:	2301      	movs	r3, #1
 801360e:	e000      	b.n	8013612 <luaV_execute+0x39be>
 8013610:	2300      	movs	r3, #0
 8013612:	2b00      	cmp	r3, #0
 8013614:	d051      	beq.n	80136ba <luaV_execute+0x3a66>
 8013616:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801361a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	791b      	ldrb	r3, [r3, #4]
 8013622:	2b13      	cmp	r3, #19
 8013624:	d10a      	bne.n	801363c <luaV_execute+0x39e8>
 8013626:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801362a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
 8013636:	6013      	str	r3, [r2, #0]
 8013638:	2301      	movs	r3, #1
 801363a:	e018      	b.n	801366e <luaV_execute+0x3a1a>
 801363c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013640:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	791b      	ldrb	r3, [r3, #4]
 8013648:	2b03      	cmp	r3, #3
 801364a:	d10f      	bne.n	801366c <luaV_execute+0x3a18>
 801364c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013650:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	ee07 3a90 	vmov	s15, r3
 801365c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013660:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8013664:	edc3 7a00 	vstr	s15, [r3]
 8013668:	2301      	movs	r3, #1
 801366a:	e000      	b.n	801366e <luaV_execute+0x3a1a>
 801366c:	2300      	movs	r3, #0
 801366e:	2b00      	cmp	r3, #0
 8013670:	d023      	beq.n	80136ba <luaV_execute+0x3a66>
 8013672:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013676:	3304      	adds	r3, #4
 8013678:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801367c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013680:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8013684:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 801368e:	ed93 7a00 	vldr	s14, [r3]
 8013692:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8013696:	edd3 7a00 	vldr	s15, [r3]
 801369a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801369e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80136a2:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	edc3 7a00 	vstr	s15, [r3]
 80136ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80136b0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2213      	movs	r2, #19
 80136b8:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80136ba:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80136be:	2b00      	cmp	r3, #0
 80136c0:	bf14      	ite	ne
 80136c2:	2301      	movne	r3, #1
 80136c4:	2300      	moveq	r3, #0
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d013      	beq.n	80136f4 <luaV_execute+0x3aa0>
 80136cc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80136d0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80136d4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80136d8:	6818      	ldr	r0, [r3, #0]
 80136da:	f7f3 fde7 	bl	80072ac <luaG_traceexec>
 80136de:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80136e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80136e6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	3308      	adds	r3, #8
 80136f0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80136f4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80136f8:	1d1a      	adds	r2, r3, #4
 80136fa:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013704:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013708:	09db      	lsrs	r3, r3, #7
 801370a:	b2db      	uxtb	r3, r3
 801370c:	00db      	lsls	r3, r3, #3
 801370e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013712:	4413      	add	r3, r2
 8013714:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013718:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801371c:	b2db      	uxtb	r3, r3
 801371e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013722:	4a35      	ldr	r2, [pc, #212]	; (80137f8 <luaV_execute+0x3ba4>)
 8013724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013728:	f7fc bb66 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_MUL) {
        op_arith(L, l_muli, luai_nummul);
 801372c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013730:	0c1b      	lsrs	r3, r3, #16
 8013732:	b2db      	uxtb	r3, r3
 8013734:	00db      	lsls	r3, r3, #3
 8013736:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801373a:	441a      	add	r2, r3
 801373c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013740:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801374a:	0e1b      	lsrs	r3, r3, #24
 801374c:	00db      	lsls	r3, r3, #3
 801374e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013752:	441a      	add	r2, r3
 8013754:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013758:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801375c:	601a      	str	r2, [r3, #0]
 801375e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013762:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	791b      	ldrb	r3, [r3, #4]
 801376a:	2b03      	cmp	r3, #3
 801376c:	d146      	bne.n	80137fc <luaV_execute+0x3ba8>
 801376e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013772:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	791b      	ldrb	r3, [r3, #4]
 801377a:	2b03      	cmp	r3, #3
 801377c:	d13e      	bne.n	80137fc <luaV_execute+0x3ba8>
 801377e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013782:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8013786:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801378a:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 801378e:	6812      	ldr	r2, [r2, #0]
 8013790:	6812      	ldr	r2, [r2, #0]
 8013792:	601a      	str	r2, [r3, #0]
 8013794:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013798:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801379c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80137a0:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 80137a4:	6812      	ldr	r2, [r2, #0]
 80137a6:	6812      	ldr	r2, [r2, #0]
 80137a8:	601a      	str	r2, [r3, #0]
 80137aa:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80137ae:	3304      	adds	r3, #4
 80137b0:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80137b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80137b8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80137bc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80137c0:	601a      	str	r2, [r3, #0]
 80137c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80137c6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80137d0:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 80137d4:	6812      	ldr	r2, [r2, #0]
 80137d6:	fb02 f303 	mul.w	r3, r2, r3
 80137da:	461a      	mov	r2, r3
 80137dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80137e0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	601a      	str	r2, [r3, #0]
 80137e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80137ec:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	2203      	movs	r2, #3
 80137f4:	711a      	strb	r2, [r3, #4]
 80137f6:	e081      	b.n	80138fc <luaV_execute+0x3ca8>
 80137f8:	0801f5c4 	.word	0x0801f5c4
 80137fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013800:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	791b      	ldrb	r3, [r3, #4]
 8013808:	2b13      	cmp	r3, #19
 801380a:	d10a      	bne.n	8013822 <luaV_execute+0x3bce>
 801380c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013810:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 801381c:	6013      	str	r3, [r2, #0]
 801381e:	2301      	movs	r3, #1
 8013820:	e018      	b.n	8013854 <luaV_execute+0x3c00>
 8013822:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013826:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	791b      	ldrb	r3, [r3, #4]
 801382e:	2b03      	cmp	r3, #3
 8013830:	d10f      	bne.n	8013852 <luaV_execute+0x3bfe>
 8013832:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013836:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	ee07 3a90 	vmov	s15, r3
 8013842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013846:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801384a:	edc3 7a00 	vstr	s15, [r3]
 801384e:	2301      	movs	r3, #1
 8013850:	e000      	b.n	8013854 <luaV_execute+0x3c00>
 8013852:	2300      	movs	r3, #0
 8013854:	2b00      	cmp	r3, #0
 8013856:	d051      	beq.n	80138fc <luaV_execute+0x3ca8>
 8013858:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801385c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	791b      	ldrb	r3, [r3, #4]
 8013864:	2b13      	cmp	r3, #19
 8013866:	d10a      	bne.n	801387e <luaV_execute+0x3c2a>
 8013868:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801386c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8013878:	6013      	str	r3, [r2, #0]
 801387a:	2301      	movs	r3, #1
 801387c:	e018      	b.n	80138b0 <luaV_execute+0x3c5c>
 801387e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013882:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	791b      	ldrb	r3, [r3, #4]
 801388a:	2b03      	cmp	r3, #3
 801388c:	d10f      	bne.n	80138ae <luaV_execute+0x3c5a>
 801388e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013892:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	ee07 3a90 	vmov	s15, r3
 801389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138a2:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80138a6:	edc3 7a00 	vstr	s15, [r3]
 80138aa:	2301      	movs	r3, #1
 80138ac:	e000      	b.n	80138b0 <luaV_execute+0x3c5c>
 80138ae:	2300      	movs	r3, #0
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d023      	beq.n	80138fc <luaV_execute+0x3ca8>
 80138b4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80138b8:	3304      	adds	r3, #4
 80138ba:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80138be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80138c2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80138c6:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80138ca:	601a      	str	r2, [r3, #0]
 80138cc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80138d0:	ed93 7a00 	vldr	s14, [r3]
 80138d4:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80138d8:	edd3 7a00 	vldr	s15, [r3]
 80138dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80138e4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	edc3 7a00 	vstr	s15, [r3]
 80138ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80138f2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2213      	movs	r2, #19
 80138fa:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80138fc:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013900:	2b00      	cmp	r3, #0
 8013902:	bf14      	ite	ne
 8013904:	2301      	movne	r3, #1
 8013906:	2300      	moveq	r3, #0
 8013908:	b2db      	uxtb	r3, r3
 801390a:	2b00      	cmp	r3, #0
 801390c:	d013      	beq.n	8013936 <luaV_execute+0x3ce2>
 801390e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013912:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013916:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801391a:	6818      	ldr	r0, [r3, #0]
 801391c:	f7f3 fcc6 	bl	80072ac <luaG_traceexec>
 8013920:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013924:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013928:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	3308      	adds	r3, #8
 8013932:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013936:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801393a:	1d1a      	adds	r2, r3, #4
 801393c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013946:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801394a:	09db      	lsrs	r3, r3, #7
 801394c:	b2db      	uxtb	r3, r3
 801394e:	00db      	lsls	r3, r3, #3
 8013950:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013954:	4413      	add	r3, r2
 8013956:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801395a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801395e:	b2db      	uxtb	r3, r3
 8013960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013964:	4ac4      	ldr	r2, [pc, #784]	; (8013c78 <luaV_execute+0x4024>)
 8013966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801396a:	f7fc ba45 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_MOD) {
        op_arith(L, luaV_mod, luaV_modf);
 801396e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013972:	0c1b      	lsrs	r3, r3, #16
 8013974:	b2db      	uxtb	r3, r3
 8013976:	00db      	lsls	r3, r3, #3
 8013978:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801397c:	441a      	add	r2, r3
 801397e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013982:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8013986:	601a      	str	r2, [r3, #0]
 8013988:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801398c:	0e1b      	lsrs	r3, r3, #24
 801398e:	00db      	lsls	r3, r3, #3
 8013990:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013994:	441a      	add	r2, r3
 8013996:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801399a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801399e:	601a      	str	r2, [r3, #0]
 80139a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80139a4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	791b      	ldrb	r3, [r3, #4]
 80139ac:	2b03      	cmp	r3, #3
 80139ae:	d149      	bne.n	8013a44 <luaV_execute+0x3df0>
 80139b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80139b4:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	791b      	ldrb	r3, [r3, #4]
 80139bc:	2b03      	cmp	r3, #3
 80139be:	d141      	bne.n	8013a44 <luaV_execute+0x3df0>
 80139c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80139c4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80139c8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80139cc:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 80139d0:	6812      	ldr	r2, [r2, #0]
 80139d2:	6812      	ldr	r2, [r2, #0]
 80139d4:	601a      	str	r2, [r3, #0]
 80139d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80139da:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80139de:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80139e2:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 80139e6:	6812      	ldr	r2, [r2, #0]
 80139e8:	6812      	ldr	r2, [r2, #0]
 80139ea:	601a      	str	r2, [r3, #0]
 80139ec:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80139f0:	3304      	adds	r3, #4
 80139f2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80139f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80139fa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80139fe:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013a02:	601a      	str	r2, [r3, #0]
 8013a04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a08:	f5a3 7233 	sub.w	r2, r3, #716	; 0x2cc
 8013a0c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a10:	f5a3 7132 	sub.w	r1, r3, #712	; 0x2c8
 8013a14:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a18:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013a1c:	6812      	ldr	r2, [r2, #0]
 8013a1e:	6809      	ldr	r1, [r1, #0]
 8013a20:	6818      	ldr	r0, [r3, #0]
 8013a22:	f7fc f809 	bl	800fa38 <luaV_mod>
 8013a26:	4602      	mov	r2, r0
 8013a28:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a2c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	601a      	str	r2, [r3, #0]
 8013a34:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a38:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2203      	movs	r2, #3
 8013a40:	711a      	strb	r2, [r3, #4]
 8013a42:	e086      	b.n	8013b52 <luaV_execute+0x3efe>
 8013a44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a48:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	791b      	ldrb	r3, [r3, #4]
 8013a50:	2b13      	cmp	r3, #19
 8013a52:	d10a      	bne.n	8013a6a <luaV_execute+0x3e16>
 8013a54:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a58:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8013a64:	6013      	str	r3, [r2, #0]
 8013a66:	2301      	movs	r3, #1
 8013a68:	e018      	b.n	8013a9c <luaV_execute+0x3e48>
 8013a6a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a6e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	791b      	ldrb	r3, [r3, #4]
 8013a76:	2b03      	cmp	r3, #3
 8013a78:	d10f      	bne.n	8013a9a <luaV_execute+0x3e46>
 8013a7a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a7e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	ee07 3a90 	vmov	s15, r3
 8013a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a8e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8013a92:	edc3 7a00 	vstr	s15, [r3]
 8013a96:	2301      	movs	r3, #1
 8013a98:	e000      	b.n	8013a9c <luaV_execute+0x3e48>
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d058      	beq.n	8013b52 <luaV_execute+0x3efe>
 8013aa0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013aa4:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	791b      	ldrb	r3, [r3, #4]
 8013aac:	2b13      	cmp	r3, #19
 8013aae:	d10a      	bne.n	8013ac6 <luaV_execute+0x3e72>
 8013ab0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ab4:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 8013ac0:	6013      	str	r3, [r2, #0]
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	e018      	b.n	8013af8 <luaV_execute+0x3ea4>
 8013ac6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013aca:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	791b      	ldrb	r3, [r3, #4]
 8013ad2:	2b03      	cmp	r3, #3
 8013ad4:	d10f      	bne.n	8013af6 <luaV_execute+0x3ea2>
 8013ad6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ada:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	ee07 3a90 	vmov	s15, r3
 8013ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013aea:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8013aee:	edc3 7a00 	vstr	s15, [r3]
 8013af2:	2301      	movs	r3, #1
 8013af4:	e000      	b.n	8013af8 <luaV_execute+0x3ea4>
 8013af6:	2300      	movs	r3, #0
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d02a      	beq.n	8013b52 <luaV_execute+0x3efe>
 8013afc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013b00:	3304      	adds	r3, #4
 8013b02:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013b06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b0a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8013b0e:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013b12:	601a      	str	r2, [r3, #0]
 8013b14:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b18:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013b1c:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 8013b20:	edd2 0a00 	vldr	s1, [r2]
 8013b24:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8013b28:	ed92 0a00 	vldr	s0, [r2]
 8013b2c:	6818      	ldr	r0, [r3, #0]
 8013b2e:	f7fb ffb7 	bl	800faa0 <luaV_modf>
 8013b32:	eef0 7a40 	vmov.f32	s15, s0
 8013b36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b3a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	edc3 7a00 	vstr	s15, [r3]
 8013b44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b48:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2213      	movs	r2, #19
 8013b50:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8013b52:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	bf14      	ite	ne
 8013b5a:	2301      	movne	r3, #1
 8013b5c:	2300      	moveq	r3, #0
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d013      	beq.n	8013b8c <luaV_execute+0x3f38>
 8013b64:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b68:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013b6c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013b70:	6818      	ldr	r0, [r3, #0]
 8013b72:	f7f3 fb9b 	bl	80072ac <luaG_traceexec>
 8013b76:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013b7a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b7e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	3308      	adds	r3, #8
 8013b88:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013b8c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013b90:	1d1a      	adds	r2, r3, #4
 8013b92:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013b9c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013ba0:	09db      	lsrs	r3, r3, #7
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	00db      	lsls	r3, r3, #3
 8013ba6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013baa:	4413      	add	r3, r2
 8013bac:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013bb0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bba:	4a2f      	ldr	r2, [pc, #188]	; (8013c78 <luaV_execute+0x4024>)
 8013bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bc0:	f7fc b91a 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_POW) {
        op_arithf(L, luai_numpow);
 8013bc4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013bc8:	0c1b      	lsrs	r3, r3, #16
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	00db      	lsls	r3, r3, #3
 8013bce:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013bd2:	441a      	add	r2, r3
 8013bd4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bd8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013be2:	0e1b      	lsrs	r3, r3, #24
 8013be4:	00db      	lsls	r3, r3, #3
 8013be6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013bea:	441a      	add	r2, r3
 8013bec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bf0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8013bf4:	601a      	str	r2, [r3, #0]
 8013bf6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bfa:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	791b      	ldrb	r3, [r3, #4]
 8013c02:	2b13      	cmp	r3, #19
 8013c04:	d10a      	bne.n	8013c1c <luaV_execute+0x3fc8>
 8013c06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c0a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8013c16:	6013      	str	r3, [r2, #0]
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e018      	b.n	8013c4e <luaV_execute+0x3ffa>
 8013c1c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c20:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	791b      	ldrb	r3, [r3, #4]
 8013c28:	2b03      	cmp	r3, #3
 8013c2a:	d10f      	bne.n	8013c4c <luaV_execute+0x3ff8>
 8013c2c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c30:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	ee07 3a90 	vmov	s15, r3
 8013c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c40:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8013c44:	edc3 7a00 	vstr	s15, [r3]
 8013c48:	2301      	movs	r3, #1
 8013c4a:	e000      	b.n	8013c4e <luaV_execute+0x3ffa>
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d067      	beq.n	8013d22 <luaV_execute+0x40ce>
 8013c52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c56:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	791b      	ldrb	r3, [r3, #4]
 8013c5e:	2b13      	cmp	r3, #19
 8013c60:	d10c      	bne.n	8013c7c <luaV_execute+0x4028>
 8013c62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c66:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 8013c72:	6013      	str	r3, [r2, #0]
 8013c74:	2301      	movs	r3, #1
 8013c76:	e01a      	b.n	8013cae <luaV_execute+0x405a>
 8013c78:	0801f5c4 	.word	0x0801f5c4
 8013c7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c80:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	791b      	ldrb	r3, [r3, #4]
 8013c88:	2b03      	cmp	r3, #3
 8013c8a:	d10f      	bne.n	8013cac <luaV_execute+0x4058>
 8013c8c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c90:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	ee07 3a90 	vmov	s15, r3
 8013c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ca0:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8013ca4:	edc3 7a00 	vstr	s15, [r3]
 8013ca8:	2301      	movs	r3, #1
 8013caa:	e000      	b.n	8013cae <luaV_execute+0x405a>
 8013cac:	2300      	movs	r3, #0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d037      	beq.n	8013d22 <luaV_execute+0x40ce>
 8013cb2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013cb6:	3304      	adds	r3, #4
 8013cb8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013cbc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013cc0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8013cc4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013cc8:	601a      	str	r2, [r3, #0]
 8013cca:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8013cce:	edd3 7a00 	vldr	s15, [r3]
 8013cd2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013cd6:	eef4 7a47 	vcmp.f32	s15, s14
 8013cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cde:	d106      	bne.n	8013cee <luaV_execute+0x409a>
 8013ce0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8013ce4:	edd3 7a00 	vldr	s15, [r3]
 8013ce8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013cec:	e00b      	b.n	8013d06 <luaV_execute+0x40b2>
 8013cee:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8013cf2:	edd3 0a00 	vldr	s1, [r3]
 8013cf6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8013cfa:	ed93 0a00 	vldr	s0, [r3]
 8013cfe:	f006 fc57 	bl	801a5b0 <powf>
 8013d02:	eef0 7a40 	vmov.f32	s15, s0
 8013d06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d0a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	edc3 7a00 	vstr	s15, [r3]
 8013d14:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d18:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2213      	movs	r2, #19
 8013d20:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8013d22:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	bf14      	ite	ne
 8013d2a:	2301      	movne	r3, #1
 8013d2c:	2300      	moveq	r3, #0
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d013      	beq.n	8013d5c <luaV_execute+0x4108>
 8013d34:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d38:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013d3c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013d40:	6818      	ldr	r0, [r3, #0]
 8013d42:	f7f3 fab3 	bl	80072ac <luaG_traceexec>
 8013d46:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013d4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d4e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	3308      	adds	r3, #8
 8013d58:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013d5c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013d60:	1d1a      	adds	r2, r3, #4
 8013d62:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013d6c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013d70:	09db      	lsrs	r3, r3, #7
 8013d72:	b2db      	uxtb	r3, r3
 8013d74:	00db      	lsls	r3, r3, #3
 8013d76:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013d7a:	4413      	add	r3, r2
 8013d7c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013d80:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013d84:	b2db      	uxtb	r3, r3
 8013d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d8a:	4ac1      	ldr	r2, [pc, #772]	; (8014090 <luaV_execute+0x443c>)
 8013d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d90:	f7fc b832 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_DIV) {  /* float division (always with floats) */
        op_arithf(L, luai_numdiv);
 8013d94:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013d98:	0c1b      	lsrs	r3, r3, #16
 8013d9a:	b2db      	uxtb	r3, r3
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013da2:	441a      	add	r2, r3
 8013da4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013da8:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8013dac:	601a      	str	r2, [r3, #0]
 8013dae:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013db2:	0e1b      	lsrs	r3, r3, #24
 8013db4:	00db      	lsls	r3, r3, #3
 8013db6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013dba:	441a      	add	r2, r3
 8013dbc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013dc0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8013dc4:	601a      	str	r2, [r3, #0]
 8013dc6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013dca:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	791b      	ldrb	r3, [r3, #4]
 8013dd2:	2b13      	cmp	r3, #19
 8013dd4:	d10a      	bne.n	8013dec <luaV_execute+0x4198>
 8013dd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013dda:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8013de6:	6013      	str	r3, [r2, #0]
 8013de8:	2301      	movs	r3, #1
 8013dea:	e018      	b.n	8013e1e <luaV_execute+0x41ca>
 8013dec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013df0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	791b      	ldrb	r3, [r3, #4]
 8013df8:	2b03      	cmp	r3, #3
 8013dfa:	d10f      	bne.n	8013e1c <luaV_execute+0x41c8>
 8013dfc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e00:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	ee07 3a90 	vmov	s15, r3
 8013e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e10:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8013e14:	edc3 7a00 	vstr	s15, [r3]
 8013e18:	2301      	movs	r3, #1
 8013e1a:	e000      	b.n	8013e1e <luaV_execute+0x41ca>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d051      	beq.n	8013ec6 <luaV_execute+0x4272>
 8013e22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e26:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	791b      	ldrb	r3, [r3, #4]
 8013e2e:	2b13      	cmp	r3, #19
 8013e30:	d10a      	bne.n	8013e48 <luaV_execute+0x41f4>
 8013e32:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e36:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 8013e42:	6013      	str	r3, [r2, #0]
 8013e44:	2301      	movs	r3, #1
 8013e46:	e018      	b.n	8013e7a <luaV_execute+0x4226>
 8013e48:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e4c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	791b      	ldrb	r3, [r3, #4]
 8013e54:	2b03      	cmp	r3, #3
 8013e56:	d10f      	bne.n	8013e78 <luaV_execute+0x4224>
 8013e58:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e5c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	ee07 3a90 	vmov	s15, r3
 8013e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e6c:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8013e70:	edc3 7a00 	vstr	s15, [r3]
 8013e74:	2301      	movs	r3, #1
 8013e76:	e000      	b.n	8013e7a <luaV_execute+0x4226>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d023      	beq.n	8013ec6 <luaV_execute+0x4272>
 8013e7e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013e82:	3304      	adds	r3, #4
 8013e84:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013e88:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e8c:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8013e90:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013e94:	601a      	str	r2, [r3, #0]
 8013e96:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8013e9a:	edd3 6a00 	vldr	s13, [r3]
 8013e9e:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8013ea2:	ed93 7a00 	vldr	s14, [r3]
 8013ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013eaa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013eae:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	edc3 7a00 	vstr	s15, [r3]
 8013eb8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ebc:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2213      	movs	r2, #19
 8013ec4:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8013ec6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	bf14      	ite	ne
 8013ece:	2301      	movne	r3, #1
 8013ed0:	2300      	moveq	r3, #0
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d013      	beq.n	8013f00 <luaV_execute+0x42ac>
 8013ed8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013edc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013ee0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013ee4:	6818      	ldr	r0, [r3, #0]
 8013ee6:	f7f3 f9e1 	bl	80072ac <luaG_traceexec>
 8013eea:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013eee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ef2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	3308      	adds	r3, #8
 8013efc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013f00:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013f04:	1d1a      	adds	r2, r3, #4
 8013f06:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013f10:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013f14:	09db      	lsrs	r3, r3, #7
 8013f16:	b2db      	uxtb	r3, r3
 8013f18:	00db      	lsls	r3, r3, #3
 8013f1a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013f1e:	4413      	add	r3, r2
 8013f20:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013f24:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013f28:	b2db      	uxtb	r3, r3
 8013f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f2e:	4a58      	ldr	r2, [pc, #352]	; (8014090 <luaV_execute+0x443c>)
 8013f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f34:	f7fb bf60 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_IDIV) {  /* floor division */
        op_arith(L, luaV_idiv, luai_numidiv);
 8013f38:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013f3c:	0c1b      	lsrs	r3, r3, #16
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	00db      	lsls	r3, r3, #3
 8013f42:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013f46:	441a      	add	r2, r3
 8013f48:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f4c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013f50:	601a      	str	r2, [r3, #0]
 8013f52:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013f56:	0e1b      	lsrs	r3, r3, #24
 8013f58:	00db      	lsls	r3, r3, #3
 8013f5a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013f5e:	441a      	add	r2, r3
 8013f60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f64:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8013f68:	601a      	str	r2, [r3, #0]
 8013f6a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f6e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	791b      	ldrb	r3, [r3, #4]
 8013f76:	2b03      	cmp	r3, #3
 8013f78:	d149      	bne.n	801400e <luaV_execute+0x43ba>
 8013f7a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f7e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	791b      	ldrb	r3, [r3, #4]
 8013f86:	2b03      	cmp	r3, #3
 8013f88:	d141      	bne.n	801400e <luaV_execute+0x43ba>
 8013f8a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f8e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8013f92:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013f96:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8013f9a:	6812      	ldr	r2, [r2, #0]
 8013f9c:	6812      	ldr	r2, [r2, #0]
 8013f9e:	601a      	str	r2, [r3, #0]
 8013fa0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fa4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8013fa8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013fac:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8013fb0:	6812      	ldr	r2, [r2, #0]
 8013fb2:	6812      	ldr	r2, [r2, #0]
 8013fb4:	601a      	str	r2, [r3, #0]
 8013fb6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013fba:	3304      	adds	r3, #4
 8013fbc:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013fc0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fc4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8013fc8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013fcc:	601a      	str	r2, [r3, #0]
 8013fce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fd2:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8013fd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fda:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 8013fde:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fe2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013fe6:	6812      	ldr	r2, [r2, #0]
 8013fe8:	6809      	ldr	r1, [r1, #0]
 8013fea:	6818      	ldr	r0, [r3, #0]
 8013fec:	f7fb fcec 	bl	800f9c8 <luaV_idiv>
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ff6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	601a      	str	r2, [r3, #0]
 8013ffe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014002:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	2203      	movs	r2, #3
 801400a:	711a      	strb	r2, [r3, #4]
 801400c:	e087      	b.n	801411e <luaV_execute+0x44ca>
 801400e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014012:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	791b      	ldrb	r3, [r3, #4]
 801401a:	2b13      	cmp	r3, #19
 801401c:	d10a      	bne.n	8014034 <luaV_execute+0x43e0>
 801401e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014022:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 801402e:	6013      	str	r3, [r2, #0]
 8014030:	2301      	movs	r3, #1
 8014032:	e018      	b.n	8014066 <luaV_execute+0x4412>
 8014034:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014038:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	791b      	ldrb	r3, [r3, #4]
 8014040:	2b03      	cmp	r3, #3
 8014042:	d10f      	bne.n	8014064 <luaV_execute+0x4410>
 8014044:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014048:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	ee07 3a90 	vmov	s15, r3
 8014054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014058:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 801405c:	edc3 7a00 	vstr	s15, [r3]
 8014060:	2301      	movs	r3, #1
 8014062:	e000      	b.n	8014066 <luaV_execute+0x4412>
 8014064:	2300      	movs	r3, #0
 8014066:	2b00      	cmp	r3, #0
 8014068:	d059      	beq.n	801411e <luaV_execute+0x44ca>
 801406a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801406e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	791b      	ldrb	r3, [r3, #4]
 8014076:	2b13      	cmp	r3, #19
 8014078:	d10c      	bne.n	8014094 <luaV_execute+0x4440>
 801407a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801407e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801408a:	6013      	str	r3, [r2, #0]
 801408c:	2301      	movs	r3, #1
 801408e:	e01a      	b.n	80140c6 <luaV_execute+0x4472>
 8014090:	0801f5c4 	.word	0x0801f5c4
 8014094:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014098:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	791b      	ldrb	r3, [r3, #4]
 80140a0:	2b03      	cmp	r3, #3
 80140a2:	d10f      	bne.n	80140c4 <luaV_execute+0x4470>
 80140a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80140a8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	ee07 3a90 	vmov	s15, r3
 80140b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140b8:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80140bc:	edc3 7a00 	vstr	s15, [r3]
 80140c0:	2301      	movs	r3, #1
 80140c2:	e000      	b.n	80140c6 <luaV_execute+0x4472>
 80140c4:	2300      	movs	r3, #0
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d029      	beq.n	801411e <luaV_execute+0x44ca>
 80140ca:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80140ce:	3304      	adds	r3, #4
 80140d0:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80140d4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80140d8:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80140dc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80140e6:	ed93 7a00 	vldr	s14, [r3]
 80140ea:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80140ee:	edd3 7a00 	vldr	s15, [r3]
 80140f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80140f6:	eeb0 0a66 	vmov.f32	s0, s13
 80140fa:	f006 f95f 	bl	801a3bc <floorf>
 80140fe:	eef0 7a40 	vmov.f32	s15, s0
 8014102:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014106:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	edc3 7a00 	vstr	s15, [r3]
 8014110:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014114:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2213      	movs	r2, #19
 801411c:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801411e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014122:	2b00      	cmp	r3, #0
 8014124:	bf14      	ite	ne
 8014126:	2301      	movne	r3, #1
 8014128:	2300      	moveq	r3, #0
 801412a:	b2db      	uxtb	r3, r3
 801412c:	2b00      	cmp	r3, #0
 801412e:	d013      	beq.n	8014158 <luaV_execute+0x4504>
 8014130:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014134:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014138:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801413c:	6818      	ldr	r0, [r3, #0]
 801413e:	f7f3 f8b5 	bl	80072ac <luaG_traceexec>
 8014142:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014146:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801414a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	3308      	adds	r3, #8
 8014154:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014158:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801415c:	1d1a      	adds	r2, r3, #4
 801415e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014168:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801416c:	09db      	lsrs	r3, r3, #7
 801416e:	b2db      	uxtb	r3, r3
 8014170:	00db      	lsls	r3, r3, #3
 8014172:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014176:	4413      	add	r3, r2
 8014178:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801417c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014180:	b2db      	uxtb	r3, r3
 8014182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014186:	4a9a      	ldr	r2, [pc, #616]	; (80143f0 <luaV_execute+0x479c>)
 8014188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801418c:	f7fb be34 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_BAND) {
        op_bitwise(L, l_band);
 8014190:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014194:	0c1b      	lsrs	r3, r3, #16
 8014196:	b2db      	uxtb	r3, r3
 8014198:	00db      	lsls	r3, r3, #3
 801419a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801419e:	441a      	add	r2, r3
 80141a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141a4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80141a8:	601a      	str	r2, [r3, #0]
 80141aa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80141ae:	0e1b      	lsrs	r3, r3, #24
 80141b0:	00db      	lsls	r3, r3, #3
 80141b2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80141b6:	441a      	add	r2, r3
 80141b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141bc:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80141c0:	601a      	str	r2, [r3, #0]
 80141c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141c6:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	791b      	ldrb	r3, [r3, #4]
 80141ce:	2b03      	cmp	r3, #3
 80141d0:	bf0c      	ite	eq
 80141d2:	2301      	moveq	r3, #1
 80141d4:	2300      	movne	r3, #0
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d00c      	beq.n	80141f6 <luaV_execute+0x45a2>
 80141dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141e0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	681a      	ldr	r2, [r3, #0]
 80141e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141ec:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 80141f0:	601a      	str	r2, [r3, #0]
 80141f2:	2301      	movs	r3, #1
 80141f4:	e00f      	b.n	8014216 <luaV_execute+0x45c2>
 80141f6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80141fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141fe:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8014202:	2200      	movs	r2, #0
 8014204:	6818      	ldr	r0, [r3, #0]
 8014206:	f7fa fad5 	bl	800e7b4 <luaV_tointegerns>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	bf14      	ite	ne
 8014210:	2301      	movne	r3, #1
 8014212:	2300      	moveq	r3, #0
 8014214:	b2db      	uxtb	r3, r3
 8014216:	2b00      	cmp	r3, #0
 8014218:	d051      	beq.n	80142be <luaV_execute+0x466a>
 801421a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801421e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	791b      	ldrb	r3, [r3, #4]
 8014226:	2b03      	cmp	r3, #3
 8014228:	bf0c      	ite	eq
 801422a:	2301      	moveq	r3, #1
 801422c:	2300      	movne	r3, #0
 801422e:	b2db      	uxtb	r3, r3
 8014230:	2b00      	cmp	r3, #0
 8014232:	d00c      	beq.n	801424e <luaV_execute+0x45fa>
 8014234:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014238:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014244:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014248:	601a      	str	r2, [r3, #0]
 801424a:	2301      	movs	r3, #1
 801424c:	e00f      	b.n	801426e <luaV_execute+0x461a>
 801424e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014252:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014256:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801425a:	2200      	movs	r2, #0
 801425c:	6818      	ldr	r0, [r3, #0]
 801425e:	f7fa faa9 	bl	800e7b4 <luaV_tointegerns>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	bf14      	ite	ne
 8014268:	2301      	movne	r3, #1
 801426a:	2300      	moveq	r3, #0
 801426c:	b2db      	uxtb	r3, r3
 801426e:	2b00      	cmp	r3, #0
 8014270:	d025      	beq.n	80142be <luaV_execute+0x466a>
 8014272:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014276:	3304      	adds	r3, #4
 8014278:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801427c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014280:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8014284:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014288:	601a      	str	r2, [r3, #0]
 801428a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801428e:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	461a      	mov	r2, r3
 8014296:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801429a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4013      	ands	r3, r2
 80142a2:	461a      	mov	r2, r3
 80142a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80142a8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	601a      	str	r2, [r3, #0]
 80142b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80142b4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2203      	movs	r2, #3
 80142bc:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80142be:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	bf14      	ite	ne
 80142c6:	2301      	movne	r3, #1
 80142c8:	2300      	moveq	r3, #0
 80142ca:	b2db      	uxtb	r3, r3
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d013      	beq.n	80142f8 <luaV_execute+0x46a4>
 80142d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80142d4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80142d8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80142dc:	6818      	ldr	r0, [r3, #0]
 80142de:	f7f2 ffe5 	bl	80072ac <luaG_traceexec>
 80142e2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80142e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80142ea:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	3308      	adds	r3, #8
 80142f4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80142f8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80142fc:	1d1a      	adds	r2, r3, #4
 80142fe:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014308:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801430c:	09db      	lsrs	r3, r3, #7
 801430e:	b2db      	uxtb	r3, r3
 8014310:	00db      	lsls	r3, r3, #3
 8014312:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014316:	4413      	add	r3, r2
 8014318:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801431c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014320:	b2db      	uxtb	r3, r3
 8014322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014326:	4a32      	ldr	r2, [pc, #200]	; (80143f0 <luaV_execute+0x479c>)
 8014328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801432c:	f7fb bd64 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_BOR) {
        op_bitwise(L, l_bor);
 8014330:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014334:	0c1b      	lsrs	r3, r3, #16
 8014336:	b2db      	uxtb	r3, r3
 8014338:	00db      	lsls	r3, r3, #3
 801433a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801433e:	441a      	add	r2, r3
 8014340:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014344:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8014348:	601a      	str	r2, [r3, #0]
 801434a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801434e:	0e1b      	lsrs	r3, r3, #24
 8014350:	00db      	lsls	r3, r3, #3
 8014352:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014356:	441a      	add	r2, r3
 8014358:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801435c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8014360:	601a      	str	r2, [r3, #0]
 8014362:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014366:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	791b      	ldrb	r3, [r3, #4]
 801436e:	2b03      	cmp	r3, #3
 8014370:	bf0c      	ite	eq
 8014372:	2301      	moveq	r3, #1
 8014374:	2300      	movne	r3, #0
 8014376:	b2db      	uxtb	r3, r3
 8014378:	2b00      	cmp	r3, #0
 801437a:	d00c      	beq.n	8014396 <luaV_execute+0x4742>
 801437c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014380:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801438c:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8014390:	601a      	str	r2, [r3, #0]
 8014392:	2301      	movs	r3, #1
 8014394:	e00f      	b.n	80143b6 <luaV_execute+0x4762>
 8014396:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801439a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801439e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80143a2:	2200      	movs	r2, #0
 80143a4:	6818      	ldr	r0, [r3, #0]
 80143a6:	f7fa fa05 	bl	800e7b4 <luaV_tointegerns>
 80143aa:	4603      	mov	r3, r0
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	bf14      	ite	ne
 80143b0:	2301      	movne	r3, #1
 80143b2:	2300      	moveq	r3, #0
 80143b4:	b2db      	uxtb	r3, r3
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d054      	beq.n	8014464 <luaV_execute+0x4810>
 80143ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143be:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	791b      	ldrb	r3, [r3, #4]
 80143c6:	2b03      	cmp	r3, #3
 80143c8:	bf0c      	ite	eq
 80143ca:	2301      	moveq	r3, #1
 80143cc:	2300      	movne	r3, #0
 80143ce:	b2db      	uxtb	r3, r3
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d00f      	beq.n	80143f4 <luaV_execute+0x47a0>
 80143d4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143d8:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143e4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80143e8:	601a      	str	r2, [r3, #0]
 80143ea:	2301      	movs	r3, #1
 80143ec:	e012      	b.n	8014414 <luaV_execute+0x47c0>
 80143ee:	bf00      	nop
 80143f0:	0801f5c4 	.word	0x0801f5c4
 80143f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80143f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143fc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8014400:	2200      	movs	r2, #0
 8014402:	6818      	ldr	r0, [r3, #0]
 8014404:	f7fa f9d6 	bl	800e7b4 <luaV_tointegerns>
 8014408:	4603      	mov	r3, r0
 801440a:	2b00      	cmp	r3, #0
 801440c:	bf14      	ite	ne
 801440e:	2301      	movne	r3, #1
 8014410:	2300      	moveq	r3, #0
 8014412:	b2db      	uxtb	r3, r3
 8014414:	2b00      	cmp	r3, #0
 8014416:	d025      	beq.n	8014464 <luaV_execute+0x4810>
 8014418:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801441c:	3304      	adds	r3, #4
 801441e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014422:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014426:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801442a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801442e:	601a      	str	r2, [r3, #0]
 8014430:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014434:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	461a      	mov	r2, r3
 801443c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014440:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4313      	orrs	r3, r2
 8014448:	461a      	mov	r2, r3
 801444a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801444e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	601a      	str	r2, [r3, #0]
 8014456:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801445a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2203      	movs	r2, #3
 8014462:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8014464:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014468:	2b00      	cmp	r3, #0
 801446a:	bf14      	ite	ne
 801446c:	2301      	movne	r3, #1
 801446e:	2300      	moveq	r3, #0
 8014470:	b2db      	uxtb	r3, r3
 8014472:	2b00      	cmp	r3, #0
 8014474:	d013      	beq.n	801449e <luaV_execute+0x484a>
 8014476:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801447a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801447e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014482:	6818      	ldr	r0, [r3, #0]
 8014484:	f7f2 ff12 	bl	80072ac <luaG_traceexec>
 8014488:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801448c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014490:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	3308      	adds	r3, #8
 801449a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801449e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80144a2:	1d1a      	adds	r2, r3, #4
 80144a4:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80144ae:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80144b2:	09db      	lsrs	r3, r3, #7
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	00db      	lsls	r3, r3, #3
 80144b8:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80144bc:	4413      	add	r3, r2
 80144be:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80144c2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144cc:	4a99      	ldr	r2, [pc, #612]	; (8014734 <luaV_execute+0x4ae0>)
 80144ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144d2:	f7fb bc91 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_BXOR) {
        op_bitwise(L, l_bxor);
 80144d6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80144da:	0c1b      	lsrs	r3, r3, #16
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	00db      	lsls	r3, r3, #3
 80144e0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80144e4:	441a      	add	r2, r3
 80144e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80144ea:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80144ee:	601a      	str	r2, [r3, #0]
 80144f0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80144f4:	0e1b      	lsrs	r3, r3, #24
 80144f6:	00db      	lsls	r3, r3, #3
 80144f8:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80144fc:	441a      	add	r2, r3
 80144fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014502:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8014506:	601a      	str	r2, [r3, #0]
 8014508:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801450c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	791b      	ldrb	r3, [r3, #4]
 8014514:	2b03      	cmp	r3, #3
 8014516:	bf0c      	ite	eq
 8014518:	2301      	moveq	r3, #1
 801451a:	2300      	movne	r3, #0
 801451c:	b2db      	uxtb	r3, r3
 801451e:	2b00      	cmp	r3, #0
 8014520:	d00c      	beq.n	801453c <luaV_execute+0x48e8>
 8014522:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014526:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014532:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8014536:	601a      	str	r2, [r3, #0]
 8014538:	2301      	movs	r3, #1
 801453a:	e00f      	b.n	801455c <luaV_execute+0x4908>
 801453c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8014540:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014544:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8014548:	2200      	movs	r2, #0
 801454a:	6818      	ldr	r0, [r3, #0]
 801454c:	f7fa f932 	bl	800e7b4 <luaV_tointegerns>
 8014550:	4603      	mov	r3, r0
 8014552:	2b00      	cmp	r3, #0
 8014554:	bf14      	ite	ne
 8014556:	2301      	movne	r3, #1
 8014558:	2300      	moveq	r3, #0
 801455a:	b2db      	uxtb	r3, r3
 801455c:	2b00      	cmp	r3, #0
 801455e:	d051      	beq.n	8014604 <luaV_execute+0x49b0>
 8014560:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014564:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	791b      	ldrb	r3, [r3, #4]
 801456c:	2b03      	cmp	r3, #3
 801456e:	bf0c      	ite	eq
 8014570:	2301      	moveq	r3, #1
 8014572:	2300      	movne	r3, #0
 8014574:	b2db      	uxtb	r3, r3
 8014576:	2b00      	cmp	r3, #0
 8014578:	d00c      	beq.n	8014594 <luaV_execute+0x4940>
 801457a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801457e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801458a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 801458e:	601a      	str	r2, [r3, #0]
 8014590:	2301      	movs	r3, #1
 8014592:	e00f      	b.n	80145b4 <luaV_execute+0x4960>
 8014594:	f107 0120 	add.w	r1, r7, #32
 8014598:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801459c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80145a0:	2200      	movs	r2, #0
 80145a2:	6818      	ldr	r0, [r3, #0]
 80145a4:	f7fa f906 	bl	800e7b4 <luaV_tointegerns>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	bf14      	ite	ne
 80145ae:	2301      	movne	r3, #1
 80145b0:	2300      	moveq	r3, #0
 80145b2:	b2db      	uxtb	r3, r3
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d025      	beq.n	8014604 <luaV_execute+0x49b0>
 80145b8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80145bc:	3304      	adds	r3, #4
 80145be:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80145c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145c6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80145ca:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80145ce:	601a      	str	r2, [r3, #0]
 80145d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145d4:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	461a      	mov	r2, r3
 80145dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145e0:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	4053      	eors	r3, r2
 80145e8:	461a      	mov	r2, r3
 80145ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145ee:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	601a      	str	r2, [r3, #0]
 80145f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145fa:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2203      	movs	r2, #3
 8014602:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8014604:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014608:	2b00      	cmp	r3, #0
 801460a:	bf14      	ite	ne
 801460c:	2301      	movne	r3, #1
 801460e:	2300      	moveq	r3, #0
 8014610:	b2db      	uxtb	r3, r3
 8014612:	2b00      	cmp	r3, #0
 8014614:	d013      	beq.n	801463e <luaV_execute+0x49ea>
 8014616:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801461a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801461e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014622:	6818      	ldr	r0, [r3, #0]
 8014624:	f7f2 fe42 	bl	80072ac <luaG_traceexec>
 8014628:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801462c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014630:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	3308      	adds	r3, #8
 801463a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801463e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014642:	1d1a      	adds	r2, r3, #4
 8014644:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801464e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014652:	09db      	lsrs	r3, r3, #7
 8014654:	b2db      	uxtb	r3, r3
 8014656:	00db      	lsls	r3, r3, #3
 8014658:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801465c:	4413      	add	r3, r2
 801465e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014662:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014666:	b2db      	uxtb	r3, r3
 8014668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801466c:	4a31      	ldr	r2, [pc, #196]	; (8014734 <luaV_execute+0x4ae0>)
 801466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014672:	f7fb bbc1 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SHR) {
        op_bitwise(L, luaV_shiftr);
 8014676:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801467a:	0c1b      	lsrs	r3, r3, #16
 801467c:	b2db      	uxtb	r3, r3
 801467e:	00db      	lsls	r3, r3, #3
 8014680:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014684:	441a      	add	r2, r3
 8014686:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801468a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801468e:	601a      	str	r2, [r3, #0]
 8014690:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014694:	0e1b      	lsrs	r3, r3, #24
 8014696:	00db      	lsls	r3, r3, #3
 8014698:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801469c:	441a      	add	r2, r3
 801469e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80146a2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80146a6:	601a      	str	r2, [r3, #0]
 80146a8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80146ac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	791b      	ldrb	r3, [r3, #4]
 80146b4:	2b03      	cmp	r3, #3
 80146b6:	bf0c      	ite	eq
 80146b8:	2301      	moveq	r3, #1
 80146ba:	2300      	movne	r3, #0
 80146bc:	b2db      	uxtb	r3, r3
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d00c      	beq.n	80146dc <luaV_execute+0x4a88>
 80146c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80146c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	681a      	ldr	r2, [r3, #0]
 80146ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80146d2:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80146d6:	601a      	str	r2, [r3, #0]
 80146d8:	2301      	movs	r3, #1
 80146da:	e00f      	b.n	80146fc <luaV_execute+0x4aa8>
 80146dc:	f107 011c 	add.w	r1, r7, #28
 80146e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80146e4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80146e8:	2200      	movs	r2, #0
 80146ea:	6818      	ldr	r0, [r3, #0]
 80146ec:	f7fa f862 	bl	800e7b4 <luaV_tointegerns>
 80146f0:	4603      	mov	r3, r0
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	bf14      	ite	ne
 80146f6:	2301      	movne	r3, #1
 80146f8:	2300      	moveq	r3, #0
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d056      	beq.n	80147ae <luaV_execute+0x4b5a>
 8014700:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014704:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	791b      	ldrb	r3, [r3, #4]
 801470c:	2b03      	cmp	r3, #3
 801470e:	bf0c      	ite	eq
 8014710:	2301      	moveq	r3, #1
 8014712:	2300      	movne	r3, #0
 8014714:	b2db      	uxtb	r3, r3
 8014716:	2b00      	cmp	r3, #0
 8014718:	d00e      	beq.n	8014738 <luaV_execute+0x4ae4>
 801471a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801471e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801472a:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801472e:	601a      	str	r2, [r3, #0]
 8014730:	2301      	movs	r3, #1
 8014732:	e011      	b.n	8014758 <luaV_execute+0x4b04>
 8014734:	0801f5c4 	.word	0x0801f5c4
 8014738:	f107 0118 	add.w	r1, r7, #24
 801473c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014740:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8014744:	2200      	movs	r2, #0
 8014746:	6818      	ldr	r0, [r3, #0]
 8014748:	f7fa f834 	bl	800e7b4 <luaV_tointegerns>
 801474c:	4603      	mov	r3, r0
 801474e:	2b00      	cmp	r3, #0
 8014750:	bf14      	ite	ne
 8014752:	2301      	movne	r3, #1
 8014754:	2300      	moveq	r3, #0
 8014756:	b2db      	uxtb	r3, r3
 8014758:	2b00      	cmp	r3, #0
 801475a:	d028      	beq.n	80147ae <luaV_execute+0x4b5a>
 801475c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014760:	3304      	adds	r3, #4
 8014762:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014766:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801476a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801476e:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014772:	601a      	str	r2, [r3, #0]
 8014774:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014778:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014782:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	425b      	negs	r3, r3
 801478a:	4619      	mov	r1, r3
 801478c:	4610      	mov	r0, r2
 801478e:	f7fb f9cf 	bl	800fb30 <luaV_shiftl>
 8014792:	4602      	mov	r2, r0
 8014794:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014798:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	601a      	str	r2, [r3, #0]
 80147a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80147a4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2203      	movs	r2, #3
 80147ac:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80147ae:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	bf14      	ite	ne
 80147b6:	2301      	movne	r3, #1
 80147b8:	2300      	moveq	r3, #0
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d013      	beq.n	80147e8 <luaV_execute+0x4b94>
 80147c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80147c4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80147c8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80147cc:	6818      	ldr	r0, [r3, #0]
 80147ce:	f7f2 fd6d 	bl	80072ac <luaG_traceexec>
 80147d2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80147d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80147da:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	3308      	adds	r3, #8
 80147e4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80147e8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80147ec:	1d1a      	adds	r2, r3, #4
 80147ee:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80147f8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80147fc:	09db      	lsrs	r3, r3, #7
 80147fe:	b2db      	uxtb	r3, r3
 8014800:	00db      	lsls	r3, r3, #3
 8014802:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014806:	4413      	add	r3, r2
 8014808:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801480c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014810:	b2db      	uxtb	r3, r3
 8014812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014816:	4aba      	ldr	r2, [pc, #744]	; (8014b00 <luaV_execute+0x4eac>)
 8014818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801481c:	f7fb baec 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SHL) {
        op_bitwise(L, luaV_shiftl);
 8014820:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014824:	0c1b      	lsrs	r3, r3, #16
 8014826:	b2db      	uxtb	r3, r3
 8014828:	00db      	lsls	r3, r3, #3
 801482a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801482e:	441a      	add	r2, r3
 8014830:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014834:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8014838:	601a      	str	r2, [r3, #0]
 801483a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801483e:	0e1b      	lsrs	r3, r3, #24
 8014840:	00db      	lsls	r3, r3, #3
 8014842:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014846:	441a      	add	r2, r3
 8014848:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801484c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8014850:	601a      	str	r2, [r3, #0]
 8014852:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014856:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	791b      	ldrb	r3, [r3, #4]
 801485e:	2b03      	cmp	r3, #3
 8014860:	bf0c      	ite	eq
 8014862:	2301      	moveq	r3, #1
 8014864:	2300      	movne	r3, #0
 8014866:	b2db      	uxtb	r3, r3
 8014868:	2b00      	cmp	r3, #0
 801486a:	d00c      	beq.n	8014886 <luaV_execute+0x4c32>
 801486c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014870:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	681a      	ldr	r2, [r3, #0]
 8014878:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801487c:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8014880:	601a      	str	r2, [r3, #0]
 8014882:	2301      	movs	r3, #1
 8014884:	e00f      	b.n	80148a6 <luaV_execute+0x4c52>
 8014886:	f107 0114 	add.w	r1, r7, #20
 801488a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801488e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8014892:	2200      	movs	r2, #0
 8014894:	6818      	ldr	r0, [r3, #0]
 8014896:	f7f9 ff8d 	bl	800e7b4 <luaV_tointegerns>
 801489a:	4603      	mov	r3, r0
 801489c:	2b00      	cmp	r3, #0
 801489e:	bf14      	ite	ne
 80148a0:	2301      	movne	r3, #1
 80148a2:	2300      	moveq	r3, #0
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d053      	beq.n	8014952 <luaV_execute+0x4cfe>
 80148aa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80148ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	791b      	ldrb	r3, [r3, #4]
 80148b6:	2b03      	cmp	r3, #3
 80148b8:	bf0c      	ite	eq
 80148ba:	2301      	moveq	r3, #1
 80148bc:	2300      	movne	r3, #0
 80148be:	b2db      	uxtb	r3, r3
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d00c      	beq.n	80148de <luaV_execute+0x4c8a>
 80148c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80148c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	681a      	ldr	r2, [r3, #0]
 80148d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80148d4:	f5a3 63ae 	sub.w	r3, r3, #1392	; 0x570
 80148d8:	601a      	str	r2, [r3, #0]
 80148da:	2301      	movs	r3, #1
 80148dc:	e00f      	b.n	80148fe <luaV_execute+0x4caa>
 80148de:	f107 0110 	add.w	r1, r7, #16
 80148e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80148e6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80148ea:	2200      	movs	r2, #0
 80148ec:	6818      	ldr	r0, [r3, #0]
 80148ee:	f7f9 ff61 	bl	800e7b4 <luaV_tointegerns>
 80148f2:	4603      	mov	r3, r0
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	bf14      	ite	ne
 80148f8:	2301      	movne	r3, #1
 80148fa:	2300      	moveq	r3, #0
 80148fc:	b2db      	uxtb	r3, r3
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d027      	beq.n	8014952 <luaV_execute+0x4cfe>
 8014902:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014906:	3304      	adds	r3, #4
 8014908:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801490c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014910:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014914:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014918:	601a      	str	r2, [r3, #0]
 801491a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801491e:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014928:	f5a3 63ae 	sub.w	r3, r3, #1392	; 0x570
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	4619      	mov	r1, r3
 8014930:	4610      	mov	r0, r2
 8014932:	f7fb f8fd 	bl	800fb30 <luaV_shiftl>
 8014936:	4602      	mov	r2, r0
 8014938:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801493c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	601a      	str	r2, [r3, #0]
 8014944:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014948:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2203      	movs	r2, #3
 8014950:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8014952:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014956:	2b00      	cmp	r3, #0
 8014958:	bf14      	ite	ne
 801495a:	2301      	movne	r3, #1
 801495c:	2300      	moveq	r3, #0
 801495e:	b2db      	uxtb	r3, r3
 8014960:	2b00      	cmp	r3, #0
 8014962:	d013      	beq.n	801498c <luaV_execute+0x4d38>
 8014964:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014968:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801496c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014970:	6818      	ldr	r0, [r3, #0]
 8014972:	f7f2 fc9b 	bl	80072ac <luaG_traceexec>
 8014976:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801497a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801497e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	3308      	adds	r3, #8
 8014988:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801498c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014990:	1d1a      	adds	r2, r3, #4
 8014992:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801499c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80149a0:	09db      	lsrs	r3, r3, #7
 80149a2:	b2db      	uxtb	r3, r3
 80149a4:	00db      	lsls	r3, r3, #3
 80149a6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80149aa:	4413      	add	r3, r2
 80149ac:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80149b0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149ba:	4a51      	ldr	r2, [pc, #324]	; (8014b00 <luaV_execute+0x4eac>)
 80149bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149c0:	f7fb ba1a 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_MMBIN) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
 80149c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80149c8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80149cc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80149d0:	f852 2c08 	ldr.w	r2, [r2, #-8]
 80149d4:	601a      	str	r2, [r3, #0]
        TValue *rb = vRB(i);
 80149d6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80149da:	0c1b      	lsrs	r3, r3, #16
 80149dc:	b2db      	uxtb	r3, r3
 80149de:	00db      	lsls	r3, r3, #3
 80149e0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80149e4:	441a      	add	r2, r3
 80149e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80149ea:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80149ee:	601a      	str	r2, [r3, #0]
        TMS tm = (TMS)GETARG_C(i);
 80149f0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80149f4:	0e1a      	lsrs	r2, r3, #24
 80149f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80149fa:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80149fe:	701a      	strb	r2, [r3, #0]
        StkId result = RA(pi);
 8014a00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a04:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	09db      	lsrs	r3, r3, #7
 8014a0c:	b2db      	uxtb	r3, r3
 8014a0e:	00da      	lsls	r2, r3, #3
 8014a10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a14:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8014a18:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8014a1c:	440a      	add	r2, r1
 8014a1e:	601a      	str	r2, [r3, #0]
        lua_assert(OP_ADD <= GET_OPCODE(pi) && GET_OPCODE(pi) <= OP_SHR);
        Protect(luaT_trybinTM(L, s2v(ra), rb, result, tm));
 8014a20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a24:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8014a2e:	611a      	str	r2, [r3, #16]
 8014a30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a34:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	685a      	ldr	r2, [r3, #4]
 8014a3c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a40:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	60da      	str	r2, [r3, #12]
 8014a48:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 8014a4c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a50:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8014a54:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014a58:	f5a2 7212 	sub.w	r2, r2, #584	; 0x248
 8014a5c:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8014a60:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 8014a64:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8014a68:	f2a1 2149 	subw	r1, r1, #585	; 0x249
 8014a6c:	7809      	ldrb	r1, [r1, #0]
 8014a6e:	9100      	str	r1, [sp, #0]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	6812      	ldr	r2, [r2, #0]
 8014a74:	4621      	mov	r1, r4
 8014a76:	6800      	ldr	r0, [r0, #0]
 8014a78:	f7f9 fbf2 	bl	800e260 <luaT_trybinTM>
 8014a7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a80:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	695b      	ldr	r3, [r3, #20]
 8014a88:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8014a8c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	bf14      	ite	ne
 8014a94:	2301      	movne	r3, #1
 8014a96:	2300      	moveq	r3, #0
 8014a98:	b2db      	uxtb	r3, r3
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d013      	beq.n	8014ac6 <luaV_execute+0x4e72>
 8014a9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014aa2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014aa6:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014aaa:	6818      	ldr	r0, [r3, #0]
 8014aac:	f7f2 fbfe 	bl	80072ac <luaG_traceexec>
 8014ab0:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014ab4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ab8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	3308      	adds	r3, #8
 8014ac2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014ac6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014aca:	1d1a      	adds	r2, r3, #4
 8014acc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014ad6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014ada:	09db      	lsrs	r3, r3, #7
 8014adc:	b2db      	uxtb	r3, r3
 8014ade:	00db      	lsls	r3, r3, #3
 8014ae0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014ae4:	4413      	add	r3, r2
 8014ae6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014aea:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014aee:	b2db      	uxtb	r3, r3
 8014af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014af4:	4a02      	ldr	r2, [pc, #8]	; (8014b00 <luaV_execute+0x4eac>)
 8014af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014afa:	f7fb b97d 	b.w	800fdf8 <luaV_execute+0x1a4>
 8014afe:	bf00      	nop
 8014b00:	0801f5c4 	.word	0x0801f5c4
      }
      vmcase(OP_MMBINI) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
 8014b04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b08:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8014b0c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8014b10:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8014b14:	601a      	str	r2, [r3, #0]
        int imm = GETARG_sB(i);
 8014b16:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014b1a:	0c1b      	lsrs	r3, r3, #16
 8014b1c:	b2da      	uxtb	r2, r3
 8014b1e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b22:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8014b26:	3a7f      	subs	r2, #127	; 0x7f
 8014b28:	601a      	str	r2, [r3, #0]
        TMS tm = (TMS)GETARG_C(i);
 8014b2a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014b2e:	0e1a      	lsrs	r2, r3, #24
 8014b30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b34:	f2a3 2335 	subw	r3, r3, #565	; 0x235
 8014b38:	701a      	strb	r2, [r3, #0]
        int flip = GETARG_k(i);
 8014b3a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014b3e:	0bdb      	lsrs	r3, r3, #15
 8014b40:	461a      	mov	r2, r3
 8014b42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b46:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8014b4a:	f002 0201 	and.w	r2, r2, #1
 8014b4e:	601a      	str	r2, [r3, #0]
        StkId result = RA(pi);
 8014b50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b54:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	09db      	lsrs	r3, r3, #7
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	00da      	lsls	r2, r3, #3
 8014b60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b64:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8014b68:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8014b6c:	440a      	add	r2, r1
 8014b6e:	601a      	str	r2, [r3, #0]
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
 8014b70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b74:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8014b7e:	611a      	str	r2, [r3, #16]
 8014b80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b84:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	685a      	ldr	r2, [r3, #4]
 8014b8c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b90:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	60da      	str	r2, [r3, #12]
 8014b98:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 8014b9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ba0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8014ba4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014ba8:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8014bac:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8014bb0:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 8014bb4:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8014bb8:	f2a1 2135 	subw	r1, r1, #565	; 0x235
 8014bbc:	7809      	ldrb	r1, [r1, #0]
 8014bbe:	9101      	str	r1, [sp, #4]
 8014bc0:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8014bc4:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
 8014bc8:	6809      	ldr	r1, [r1, #0]
 8014bca:	9100      	str	r1, [sp, #0]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	6812      	ldr	r2, [r2, #0]
 8014bd0:	4621      	mov	r1, r4
 8014bd2:	6800      	ldr	r0, [r0, #0]
 8014bd4:	f7f9 fbd1 	bl	800e37a <luaT_trybiniTM>
 8014bd8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014bdc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	695b      	ldr	r3, [r3, #20]
 8014be4:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8014be8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	bf14      	ite	ne
 8014bf0:	2301      	movne	r3, #1
 8014bf2:	2300      	moveq	r3, #0
 8014bf4:	b2db      	uxtb	r3, r3
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d013      	beq.n	8014c22 <luaV_execute+0x4fce>
 8014bfa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014bfe:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014c02:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014c06:	6818      	ldr	r0, [r3, #0]
 8014c08:	f7f2 fb50 	bl	80072ac <luaG_traceexec>
 8014c0c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014c10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c14:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	3308      	adds	r3, #8
 8014c1e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014c22:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014c26:	1d1a      	adds	r2, r3, #4
 8014c28:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014c32:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014c36:	09db      	lsrs	r3, r3, #7
 8014c38:	b2db      	uxtb	r3, r3
 8014c3a:	00db      	lsls	r3, r3, #3
 8014c3c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014c40:	4413      	add	r3, r2
 8014c42:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014c46:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014c4a:	b2db      	uxtb	r3, r3
 8014c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c50:	4a9c      	ldr	r2, [pc, #624]	; (8014ec4 <luaV_execute+0x5270>)
 8014c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c56:	f7fb b8cf 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_MMBINK) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
 8014c5a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c5e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014c62:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8014c66:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8014c6a:	601a      	str	r2, [r3, #0]
        TValue *imm = KB(i);
 8014c6c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014c70:	0c1b      	lsrs	r3, r3, #16
 8014c72:	b2db      	uxtb	r3, r3
 8014c74:	00da      	lsls	r2, r3, #3
 8014c76:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c7a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014c7e:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8014c82:	440a      	add	r2, r1
 8014c84:	601a      	str	r2, [r3, #0]
        TMS tm = (TMS)GETARG_C(i);
 8014c86:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014c8a:	0e1a      	lsrs	r2, r3, #24
 8014c8c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c90:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 8014c94:	701a      	strb	r2, [r3, #0]
        int flip = GETARG_k(i);
 8014c96:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014c9a:	0bdb      	lsrs	r3, r3, #15
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ca2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014ca6:	f002 0201 	and.w	r2, r2, #1
 8014caa:	601a      	str	r2, [r3, #0]
        StkId result = RA(pi);
 8014cac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014cb0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	09db      	lsrs	r3, r3, #7
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	00da      	lsls	r2, r3, #3
 8014cbc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014cc0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014cc4:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8014cc8:	440a      	add	r2, r1
 8014cca:	601a      	str	r2, [r3, #0]
        Protect(luaT_trybinassocTM(L, s2v(ra), imm, flip, result, tm));
 8014ccc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014cd0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8014cda:	611a      	str	r2, [r3, #16]
 8014cdc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ce0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	685a      	ldr	r2, [r3, #4]
 8014ce8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014cec:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	60da      	str	r2, [r3, #12]
 8014cf4:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 8014cf8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014cfc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014d00:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014d04:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8014d08:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8014d0c:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 8014d10:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8014d14:	f2a1 2121 	subw	r1, r1, #545	; 0x221
 8014d18:	7809      	ldrb	r1, [r1, #0]
 8014d1a:	9101      	str	r1, [sp, #4]
 8014d1c:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8014d20:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 8014d24:	6809      	ldr	r1, [r1, #0]
 8014d26:	9100      	str	r1, [sp, #0]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	6812      	ldr	r2, [r2, #0]
 8014d2c:	4621      	mov	r1, r4
 8014d2e:	6800      	ldr	r0, [r0, #0]
 8014d30:	f7f9 fb04 	bl	800e33c <luaT_trybinassocTM>
 8014d34:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014d38:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	695b      	ldr	r3, [r3, #20]
 8014d40:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8014d44:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	bf14      	ite	ne
 8014d4c:	2301      	movne	r3, #1
 8014d4e:	2300      	moveq	r3, #0
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d013      	beq.n	8014d7e <luaV_execute+0x512a>
 8014d56:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014d5a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014d5e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014d62:	6818      	ldr	r0, [r3, #0]
 8014d64:	f7f2 faa2 	bl	80072ac <luaG_traceexec>
 8014d68:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014d6c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014d70:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	3308      	adds	r3, #8
 8014d7a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014d7e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014d82:	1d1a      	adds	r2, r3, #4
 8014d84:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014d8e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014d92:	09db      	lsrs	r3, r3, #7
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014d9c:	4413      	add	r3, r2
 8014d9e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014da2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014da6:	b2db      	uxtb	r3, r3
 8014da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dac:	4a45      	ldr	r2, [pc, #276]	; (8014ec4 <luaV_execute+0x5270>)
 8014dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014db2:	f7fb b821 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_UNM) {
        TValue *rb = vRB(i);
 8014db6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014dba:	0c1b      	lsrs	r3, r3, #16
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	00db      	lsls	r3, r3, #3
 8014dc0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014dc4:	441a      	add	r2, r3
 8014dc6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014dca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014dce:	601a      	str	r2, [r3, #0]
        lua_Number nb;
        if (ttisinteger(rb)) {
 8014dd0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014dd4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	791b      	ldrb	r3, [r3, #4]
 8014ddc:	2b03      	cmp	r3, #3
 8014dde:	d126      	bne.n	8014e2e <luaV_execute+0x51da>
          lua_Integer ib = ivalue(rb);
 8014de0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014de4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014de8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014dec:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8014df0:	6812      	ldr	r2, [r2, #0]
 8014df2:	6812      	ldr	r2, [r2, #0]
 8014df4:	601a      	str	r2, [r3, #0]
          setivalue(s2v(ra), intop(-, 0, ib));
 8014df6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014dfa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8014dfe:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014e02:	601a      	str	r2, [r3, #0]
 8014e04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e08:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	425b      	negs	r3, r3
 8014e10:	461a      	mov	r2, r3
 8014e12:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e16:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	601a      	str	r2, [r3, #0]
 8014e1e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e22:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2203      	movs	r2, #3
 8014e2a:	711a      	strb	r2, [r3, #4]
 8014e2c:	e07d      	b.n	8014f2a <luaV_execute+0x52d6>
        }
        else if (tonumberns(rb, nb)) {
 8014e2e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e32:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	791b      	ldrb	r3, [r3, #4]
 8014e3a:	2b13      	cmp	r3, #19
 8014e3c:	d10a      	bne.n	8014e54 <luaV_execute+0x5200>
 8014e3e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e42:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8014e4e:	6013      	str	r3, [r2, #0]
 8014e50:	2301      	movs	r3, #1
 8014e52:	e018      	b.n	8014e86 <luaV_execute+0x5232>
 8014e54:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e58:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	791b      	ldrb	r3, [r3, #4]
 8014e60:	2b03      	cmp	r3, #3
 8014e62:	d10f      	bne.n	8014e84 <luaV_execute+0x5230>
 8014e64:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e68:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	ee07 3a90 	vmov	s15, r3
 8014e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e78:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8014e7c:	edc3 7a00 	vstr	s15, [r3]
 8014e80:	2301      	movs	r3, #1
 8014e82:	e000      	b.n	8014e86 <luaV_execute+0x5232>
 8014e84:	2300      	movs	r3, #0
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d01e      	beq.n	8014ec8 <luaV_execute+0x5274>
          setfltvalue(s2v(ra), luai_numunm(L, nb));
 8014e8a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e8e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8014e92:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014e96:	601a      	str	r2, [r3, #0]
 8014e98:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8014e9c:	edd3 7a00 	vldr	s15, [r3]
 8014ea0:	eef1 7a67 	vneg.f32	s15, s15
 8014ea4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ea8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	edc3 7a00 	vstr	s15, [r3]
 8014eb2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014eb6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	2213      	movs	r2, #19
 8014ebe:	711a      	strb	r2, [r3, #4]
 8014ec0:	e033      	b.n	8014f2a <luaV_execute+0x52d6>
 8014ec2:	bf00      	nop
 8014ec4:	0801f5c4 	.word	0x0801f5c4
        }
        else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_UNM));
 8014ec8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ecc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8014ed6:	611a      	str	r2, [r3, #16]
 8014ed8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014edc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	685a      	ldr	r2, [r3, #4]
 8014ee4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ee8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	60da      	str	r2, [r3, #12]
 8014ef0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ef4:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8014ef8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014efc:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 8014f00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f04:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8014f08:	2312      	movs	r3, #18
 8014f0a:	9300      	str	r3, [sp, #0]
 8014f0c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8014f10:	6812      	ldr	r2, [r2, #0]
 8014f12:	6809      	ldr	r1, [r1, #0]
 8014f14:	6800      	ldr	r0, [r0, #0]
 8014f16:	f7f9 f9a3 	bl	800e260 <luaT_trybinTM>
 8014f1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f1e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	695b      	ldr	r3, [r3, #20]
 8014f26:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8014f2a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	bf14      	ite	ne
 8014f32:	2301      	movne	r3, #1
 8014f34:	2300      	moveq	r3, #0
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d013      	beq.n	8014f64 <luaV_execute+0x5310>
 8014f3c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f40:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014f44:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014f48:	6818      	ldr	r0, [r3, #0]
 8014f4a:	f7f2 f9af 	bl	80072ac <luaG_traceexec>
 8014f4e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014f52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f56:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	3308      	adds	r3, #8
 8014f60:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014f64:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014f68:	1d1a      	adds	r2, r3, #4
 8014f6a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014f74:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014f78:	09db      	lsrs	r3, r3, #7
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	00db      	lsls	r3, r3, #3
 8014f7e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014f82:	4413      	add	r3, r2
 8014f84:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014f88:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f92:	4ac5      	ldr	r2, [pc, #788]	; (80152a8 <luaV_execute+0x5654>)
 8014f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f98:	f7fa bf2e 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_BNOT) {
        TValue *rb = vRB(i);
 8014f9c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014fa0:	0c1b      	lsrs	r3, r3, #16
 8014fa2:	b2db      	uxtb	r3, r3
 8014fa4:	00db      	lsls	r3, r3, #3
 8014fa6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014faa:	441a      	add	r2, r3
 8014fac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014fb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8014fb4:	601a      	str	r2, [r3, #0]
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
 8014fb6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014fba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	791b      	ldrb	r3, [r3, #4]
 8014fc2:	2b03      	cmp	r3, #3
 8014fc4:	bf0c      	ite	eq
 8014fc6:	2301      	moveq	r3, #1
 8014fc8:	2300      	movne	r3, #0
 8014fca:	b2db      	uxtb	r3, r3
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d00c      	beq.n	8014fea <luaV_execute+0x5396>
 8014fd0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014fd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014fe0:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8014fe4:	601a      	str	r2, [r3, #0]
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e00f      	b.n	801500a <luaV_execute+0x53b6>
 8014fea:	f107 010c 	add.w	r1, r7, #12
 8014fee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ff2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	6818      	ldr	r0, [r3, #0]
 8014ffa:	f7f9 fbdb 	bl	800e7b4 <luaV_tointegerns>
 8014ffe:	4603      	mov	r3, r0
 8015000:	2b00      	cmp	r3, #0
 8015002:	bf14      	ite	ne
 8015004:	2301      	movne	r3, #1
 8015006:	2300      	moveq	r3, #0
 8015008:	b2db      	uxtb	r3, r3
 801500a:	2b00      	cmp	r3, #0
 801500c:	d01a      	beq.n	8015044 <luaV_execute+0x53f0>
          setivalue(s2v(ra), intop(^, ~l_castS2U(0), ib));
 801500e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015012:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8015016:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801501a:	601a      	str	r2, [r3, #0]
 801501c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015020:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	43da      	mvns	r2, r3
 8015028:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801502c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	601a      	str	r2, [r3, #0]
 8015034:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015038:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2203      	movs	r2, #3
 8015040:	711a      	strb	r2, [r3, #4]
 8015042:	e030      	b.n	80150a6 <luaV_execute+0x5452>
        }
        else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_BNOT));
 8015044:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015048:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015052:	611a      	str	r2, [r3, #16]
 8015054:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015058:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	685a      	ldr	r2, [r3, #4]
 8015060:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015064:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	60da      	str	r2, [r3, #12]
 801506c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015070:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8015074:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015078:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 801507c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015080:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8015084:	2313      	movs	r3, #19
 8015086:	9300      	str	r3, [sp, #0]
 8015088:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801508c:	6812      	ldr	r2, [r2, #0]
 801508e:	6809      	ldr	r1, [r1, #0]
 8015090:	6800      	ldr	r0, [r0, #0]
 8015092:	f7f9 f8e5 	bl	800e260 <luaT_trybinTM>
 8015096:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801509a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	695b      	ldr	r3, [r3, #20]
 80150a2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80150a6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	bf14      	ite	ne
 80150ae:	2301      	movne	r3, #1
 80150b0:	2300      	moveq	r3, #0
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d013      	beq.n	80150e0 <luaV_execute+0x548c>
 80150b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80150bc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80150c0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80150c4:	6818      	ldr	r0, [r3, #0]
 80150c6:	f7f2 f8f1 	bl	80072ac <luaG_traceexec>
 80150ca:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80150ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80150d2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	3308      	adds	r3, #8
 80150dc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80150e0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80150e4:	1d1a      	adds	r2, r3, #4
 80150e6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80150f0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80150f4:	09db      	lsrs	r3, r3, #7
 80150f6:	b2db      	uxtb	r3, r3
 80150f8:	00db      	lsls	r3, r3, #3
 80150fa:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80150fe:	4413      	add	r3, r2
 8015100:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015104:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015108:	b2db      	uxtb	r3, r3
 801510a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801510e:	4a66      	ldr	r2, [pc, #408]	; (80152a8 <luaV_execute+0x5654>)
 8015110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015114:	f7fa be70 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_NOT) {
        TValue *rb = vRB(i);
 8015118:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801511c:	0c1b      	lsrs	r3, r3, #16
 801511e:	b2db      	uxtb	r3, r3
 8015120:	00db      	lsls	r3, r3, #3
 8015122:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015126:	441a      	add	r2, r3
 8015128:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801512c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8015130:	601a      	str	r2, [r3, #0]
        if (l_isfalse(rb))
 8015132:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015136:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	791b      	ldrb	r3, [r3, #4]
 801513e:	2b01      	cmp	r3, #1
 8015140:	d009      	beq.n	8015156 <luaV_execute+0x5502>
 8015142:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015146:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	791b      	ldrb	r3, [r3, #4]
 801514e:	f003 030f 	and.w	r3, r3, #15
 8015152:	2b00      	cmp	r3, #0
 8015154:	d104      	bne.n	8015160 <luaV_execute+0x550c>
          setbtvalue(s2v(ra));
 8015156:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801515a:	2211      	movs	r2, #17
 801515c:	711a      	strb	r2, [r3, #4]
 801515e:	e003      	b.n	8015168 <luaV_execute+0x5514>
        else
          setbfvalue(s2v(ra));
 8015160:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015164:	2201      	movs	r2, #1
 8015166:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8015168:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801516c:	2b00      	cmp	r3, #0
 801516e:	bf14      	ite	ne
 8015170:	2301      	movne	r3, #1
 8015172:	2300      	moveq	r3, #0
 8015174:	b2db      	uxtb	r3, r3
 8015176:	2b00      	cmp	r3, #0
 8015178:	d013      	beq.n	80151a2 <luaV_execute+0x554e>
 801517a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801517e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015182:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015186:	6818      	ldr	r0, [r3, #0]
 8015188:	f7f2 f890 	bl	80072ac <luaG_traceexec>
 801518c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015190:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015194:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	3308      	adds	r3, #8
 801519e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80151a2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80151a6:	1d1a      	adds	r2, r3, #4
 80151a8:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80151b2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80151b6:	09db      	lsrs	r3, r3, #7
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	00db      	lsls	r3, r3, #3
 80151bc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80151c0:	4413      	add	r3, r2
 80151c2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80151c6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151d0:	4a35      	ldr	r2, [pc, #212]	; (80152a8 <luaV_execute+0x5654>)
 80151d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151d6:	f7fa be0f 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LEN) {
        Protect(luaV_objlen(L, ra, vRB(i)));
 80151da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80151de:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80151e8:	611a      	str	r2, [r3, #16]
 80151ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80151ee:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	685a      	ldr	r2, [r3, #4]
 80151f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80151fa:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	60da      	str	r2, [r3, #12]
 8015202:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015206:	0c1b      	lsrs	r3, r3, #16
 8015208:	b2db      	uxtb	r3, r3
 801520a:	00db      	lsls	r3, r3, #3
 801520c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015210:	4413      	add	r3, r2
 8015212:	461a      	mov	r2, r3
 8015214:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015218:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801521c:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8015220:	6818      	ldr	r0, [r3, #0]
 8015222:	f7fa fb53 	bl	800f8cc <luaV_objlen>
 8015226:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801522a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	695b      	ldr	r3, [r3, #20]
 8015232:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8015236:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801523a:	2b00      	cmp	r3, #0
 801523c:	bf14      	ite	ne
 801523e:	2301      	movne	r3, #1
 8015240:	2300      	moveq	r3, #0
 8015242:	b2db      	uxtb	r3, r3
 8015244:	2b00      	cmp	r3, #0
 8015246:	d013      	beq.n	8015270 <luaV_execute+0x561c>
 8015248:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801524c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015250:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015254:	6818      	ldr	r0, [r3, #0]
 8015256:	f7f2 f829 	bl	80072ac <luaG_traceexec>
 801525a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801525e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015262:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	3308      	adds	r3, #8
 801526c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015270:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015274:	1d1a      	adds	r2, r3, #4
 8015276:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015280:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015284:	09db      	lsrs	r3, r3, #7
 8015286:	b2db      	uxtb	r3, r3
 8015288:	00db      	lsls	r3, r3, #3
 801528a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801528e:	4413      	add	r3, r2
 8015290:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015294:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015298:	b2db      	uxtb	r3, r3
 801529a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801529e:	4a02      	ldr	r2, [pc, #8]	; (80152a8 <luaV_execute+0x5654>)
 80152a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152a4:	f7fa bda8 	b.w	800fdf8 <luaV_execute+0x1a4>
 80152a8:	0801f5c4 	.word	0x0801f5c4
      }
      vmcase(OP_CONCAT) {
        int n = GETARG_B(i);  /* number of elements to concatenate */
 80152ac:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80152b0:	0c1b      	lsrs	r3, r3, #16
 80152b2:	461a      	mov	r2, r3
 80152b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80152bc:	b2d2      	uxtb	r2, r2
 80152be:	601a      	str	r2, [r3, #0]
        L->top = ra + n;  /* mark the end of concat operands */
 80152c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80152d0:	441a      	add	r2, r3
 80152d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152d6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	60da      	str	r2, [r3, #12]
        ProtectNT(luaV_concat(L, n));
 80152de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152e2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80152ec:	611a      	str	r2, [r3, #16]
 80152ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152f2:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80152f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152fa:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80152fe:	6811      	ldr	r1, [r2, #0]
 8015300:	6818      	ldr	r0, [r3, #0]
 8015302:	f7fa f9b5 	bl	800f670 <luaV_concat>
 8015306:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801530a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	695b      	ldr	r3, [r3, #20]
 8015312:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        checkGC(L, L->top); /* 'luaV_concat' ensures correct top */
 8015316:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801531a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	691b      	ldr	r3, [r3, #16]
 8015322:	68db      	ldr	r3, [r3, #12]
 8015324:	2b00      	cmp	r3, #0
 8015326:	dd22      	ble.n	801536e <luaV_execute+0x571a>
 8015328:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801532c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015336:	611a      	str	r2, [r3, #16]
 8015338:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801533c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	68da      	ldr	r2, [r3, #12]
 8015344:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015348:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	60da      	str	r2, [r3, #12]
 8015350:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015354:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015358:	6818      	ldr	r0, [r3, #0]
 801535a:	f7f5 fd7d 	bl	800ae58 <luaC_step>
 801535e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015362:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	695b      	ldr	r3, [r3, #20]
 801536a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801536e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015372:	2b00      	cmp	r3, #0
 8015374:	bf14      	ite	ne
 8015376:	2301      	movne	r3, #1
 8015378:	2300      	moveq	r3, #0
 801537a:	b2db      	uxtb	r3, r3
 801537c:	2b00      	cmp	r3, #0
 801537e:	d013      	beq.n	80153a8 <luaV_execute+0x5754>
 8015380:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015384:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015388:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801538c:	6818      	ldr	r0, [r3, #0]
 801538e:	f7f1 ff8d 	bl	80072ac <luaG_traceexec>
 8015392:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015396:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801539a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	3308      	adds	r3, #8
 80153a4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80153a8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80153ac:	1d1a      	adds	r2, r3, #4
 80153ae:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80153b8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80153bc:	09db      	lsrs	r3, r3, #7
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	00db      	lsls	r3, r3, #3
 80153c2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80153c6:	4413      	add	r3, r2
 80153c8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80153cc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153d6:	4aab      	ldr	r2, [pc, #684]	; (8015684 <luaV_execute+0x5a30>)
 80153d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153dc:	f7fa bd0c 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_CLOSE) {
        Protect(luaF_close(L, ra, LUA_OK, 1));
 80153e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80153e4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80153ee:	611a      	str	r2, [r3, #16]
 80153f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80153f4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	685a      	ldr	r2, [r3, #4]
 80153fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015400:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	60da      	str	r2, [r3, #12]
 8015408:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801540c:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8015410:	2301      	movs	r3, #1
 8015412:	2200      	movs	r2, #0
 8015414:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8015418:	6800      	ldr	r0, [r0, #0]
 801541a:	f7f3 f9b6 	bl	800878a <luaF_close>
 801541e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015422:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	695b      	ldr	r3, [r3, #20]
 801542a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801542e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015432:	2b00      	cmp	r3, #0
 8015434:	bf14      	ite	ne
 8015436:	2301      	movne	r3, #1
 8015438:	2300      	moveq	r3, #0
 801543a:	b2db      	uxtb	r3, r3
 801543c:	2b00      	cmp	r3, #0
 801543e:	d013      	beq.n	8015468 <luaV_execute+0x5814>
 8015440:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015444:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015448:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801544c:	6818      	ldr	r0, [r3, #0]
 801544e:	f7f1 ff2d 	bl	80072ac <luaG_traceexec>
 8015452:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015456:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801545a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	3308      	adds	r3, #8
 8015464:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015468:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801546c:	1d1a      	adds	r2, r3, #4
 801546e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015478:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801547c:	09db      	lsrs	r3, r3, #7
 801547e:	b2db      	uxtb	r3, r3
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015486:	4413      	add	r3, r2
 8015488:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801548c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015490:	b2db      	uxtb	r3, r3
 8015492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015496:	4a7b      	ldr	r2, [pc, #492]	; (8015684 <luaV_execute+0x5a30>)
 8015498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801549c:	f7fa bcac 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_TBC) {
        /* create new to-be-closed upvalue */
        halfProtect(luaF_newtbcupval(L, ra));
 80154a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154a4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80154ae:	611a      	str	r2, [r3, #16]
 80154b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154b4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	685a      	ldr	r2, [r3, #4]
 80154bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154c0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	60da      	str	r2, [r3, #12]
 80154c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154cc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80154d0:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80154d4:	6818      	ldr	r0, [r3, #0]
 80154d6:	f7f3 f88b 	bl	80085f0 <luaF_newtbcupval>
        vmbreak;
 80154da:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80154de:	2b00      	cmp	r3, #0
 80154e0:	bf14      	ite	ne
 80154e2:	2301      	movne	r3, #1
 80154e4:	2300      	moveq	r3, #0
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d013      	beq.n	8015514 <luaV_execute+0x58c0>
 80154ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154f0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80154f4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80154f8:	6818      	ldr	r0, [r3, #0]
 80154fa:	f7f1 fed7 	bl	80072ac <luaG_traceexec>
 80154fe:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015502:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015506:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	3308      	adds	r3, #8
 8015510:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015514:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015518:	1d1a      	adds	r2, r3, #4
 801551a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015524:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015528:	09db      	lsrs	r3, r3, #7
 801552a:	b2db      	uxtb	r3, r3
 801552c:	00db      	lsls	r3, r3, #3
 801552e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015532:	4413      	add	r3, r2
 8015534:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015538:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801553c:	b2db      	uxtb	r3, r3
 801553e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015542:	4a50      	ldr	r2, [pc, #320]	; (8015684 <luaV_execute+0x5a30>)
 8015544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015548:	f7fa bc56 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_JMP) {
        dojump(ci, i, 0);
 801554c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015550:	09db      	lsrs	r3, r3, #7
 8015552:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8015556:	3301      	adds	r3, #1
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801555e:	4413      	add	r3, r2
 8015560:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015564:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015568:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	695b      	ldr	r3, [r3, #20]
 8015570:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8015574:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015578:	2b00      	cmp	r3, #0
 801557a:	bf14      	ite	ne
 801557c:	2301      	movne	r3, #1
 801557e:	2300      	moveq	r3, #0
 8015580:	b2db      	uxtb	r3, r3
 8015582:	2b00      	cmp	r3, #0
 8015584:	d013      	beq.n	80155ae <luaV_execute+0x595a>
 8015586:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801558a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801558e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015592:	6818      	ldr	r0, [r3, #0]
 8015594:	f7f1 fe8a 	bl	80072ac <luaG_traceexec>
 8015598:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801559c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80155a0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	3308      	adds	r3, #8
 80155aa:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80155ae:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80155b2:	1d1a      	adds	r2, r3, #4
 80155b4:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80155be:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80155c2:	09db      	lsrs	r3, r3, #7
 80155c4:	b2db      	uxtb	r3, r3
 80155c6:	00db      	lsls	r3, r3, #3
 80155c8:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80155cc:	4413      	add	r3, r2
 80155ce:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80155d2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80155d6:	b2db      	uxtb	r3, r3
 80155d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155dc:	4a29      	ldr	r2, [pc, #164]	; (8015684 <luaV_execute+0x5a30>)
 80155de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155e2:	f7fa bc09 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_EQ) {
        int cond;
        TValue *rb = vRB(i);
 80155e6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80155ea:	0c1b      	lsrs	r3, r3, #16
 80155ec:	b2db      	uxtb	r3, r3
 80155ee:	00db      	lsls	r3, r3, #3
 80155f0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80155f4:	441a      	add	r2, r3
 80155f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80155fa:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80155fe:	601a      	str	r2, [r3, #0]
        Protect(cond = luaV_equalobj(L, s2v(ra), rb));
 8015600:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015604:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801560e:	611a      	str	r2, [r3, #16]
 8015610:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015614:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	685a      	ldr	r2, [r3, #4]
 801561c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015620:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	60da      	str	r2, [r3, #12]
 8015628:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801562c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015630:	f5a3 74fa 	sub.w	r4, r3, #500	; 0x1f4
 8015634:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015638:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 801563c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015640:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015644:	6812      	ldr	r2, [r2, #0]
 8015646:	6818      	ldr	r0, [r3, #0]
 8015648:	f7f9 fe52 	bl	800f2f0 <luaV_equalobj>
 801564c:	6020      	str	r0, [r4, #0]
 801564e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015652:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	695b      	ldr	r3, [r3, #20]
 801565a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        docondjump();
 801565e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015662:	0bdb      	lsrs	r3, r3, #15
 8015664:	f003 0301 	and.w	r3, r3, #1
 8015668:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801566c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8015670:	6812      	ldr	r2, [r2, #0]
 8015672:	429a      	cmp	r2, r3
 8015674:	d008      	beq.n	8015688 <luaV_execute+0x5a34>
 8015676:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801567a:	3304      	adds	r3, #4
 801567c:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015680:	e021      	b.n	80156c6 <luaV_execute+0x5a72>
 8015682:	bf00      	nop
 8015684:	0801f5c4 	.word	0x0801f5c4
 8015688:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801568c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8015690:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015694:	6812      	ldr	r2, [r2, #0]
 8015696:	601a      	str	r2, [r3, #0]
 8015698:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801569c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	09db      	lsrs	r3, r3, #7
 80156a4:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80156a8:	3302      	adds	r3, #2
 80156aa:	009b      	lsls	r3, r3, #2
 80156ac:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80156b0:	4413      	add	r3, r2
 80156b2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80156b6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156ba:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	695b      	ldr	r3, [r3, #20]
 80156c2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80156c6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	bf14      	ite	ne
 80156ce:	2301      	movne	r3, #1
 80156d0:	2300      	moveq	r3, #0
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d013      	beq.n	8015700 <luaV_execute+0x5aac>
 80156d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156dc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80156e0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80156e4:	6818      	ldr	r0, [r3, #0]
 80156e6:	f7f1 fde1 	bl	80072ac <luaG_traceexec>
 80156ea:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80156ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156f2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	3308      	adds	r3, #8
 80156fc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015700:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015704:	1d1a      	adds	r2, r3, #4
 8015706:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015710:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015714:	09db      	lsrs	r3, r3, #7
 8015716:	b2db      	uxtb	r3, r3
 8015718:	00db      	lsls	r3, r3, #3
 801571a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801571e:	4413      	add	r3, r2
 8015720:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015724:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015728:	b2db      	uxtb	r3, r3
 801572a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801572e:	4ac6      	ldr	r2, [pc, #792]	; (8015a48 <luaV_execute+0x5df4>)
 8015730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015734:	f7fa bb60 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LT) {
        op_order(L, l_lti, LTnum, lessthanothers);
 8015738:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801573c:	0c1b      	lsrs	r3, r3, #16
 801573e:	b2db      	uxtb	r3, r3
 8015740:	00db      	lsls	r3, r3, #3
 8015742:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015746:	441a      	add	r2, r3
 8015748:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801574c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8015750:	601a      	str	r2, [r3, #0]
 8015752:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015756:	791b      	ldrb	r3, [r3, #4]
 8015758:	2b03      	cmp	r3, #3
 801575a:	d12c      	bne.n	80157b6 <luaV_execute+0x5b62>
 801575c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015760:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	791b      	ldrb	r3, [r3, #4]
 8015768:	2b03      	cmp	r3, #3
 801576a:	d124      	bne.n	80157b6 <luaV_execute+0x5b62>
 801576c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015770:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8015774:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015778:	6812      	ldr	r2, [r2, #0]
 801577a:	601a      	str	r2, [r3, #0]
 801577c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015780:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8015784:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015788:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 801578c:	6812      	ldr	r2, [r2, #0]
 801578e:	6812      	ldr	r2, [r2, #0]
 8015790:	601a      	str	r2, [r3, #0]
 8015792:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015796:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 801579a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801579e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80157a2:	6812      	ldr	r2, [r2, #0]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	429a      	cmp	r2, r3
 80157a8:	bfb4      	ite	lt
 80157aa:	2301      	movlt	r3, #1
 80157ac:	2300      	movge	r3, #0
 80157ae:	b2db      	uxtb	r3, r3
 80157b0:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 80157b4:	e049      	b.n	801584a <luaV_execute+0x5bf6>
 80157b6:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80157ba:	791b      	ldrb	r3, [r3, #4]
 80157bc:	f003 030f 	and.w	r3, r3, #15
 80157c0:	2b03      	cmp	r3, #3
 80157c2:	d116      	bne.n	80157f2 <luaV_execute+0x5b9e>
 80157c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80157c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	791b      	ldrb	r3, [r3, #4]
 80157d0:	f003 030f 	and.w	r3, r3, #15
 80157d4:	2b03      	cmp	r3, #3
 80157d6:	d10c      	bne.n	80157f2 <luaV_execute+0x5b9e>
 80157d8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80157dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80157e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80157e4:	6819      	ldr	r1, [r3, #0]
 80157e6:	4610      	mov	r0, r2
 80157e8:	f7f9 fca2 	bl	800f130 <LTnum>
 80157ec:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
 80157f0:	e02b      	b.n	801584a <luaV_execute+0x5bf6>
 80157f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80157f6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015800:	611a      	str	r2, [r3, #16]
 8015802:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015806:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	685a      	ldr	r2, [r3, #4]
 801580e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015812:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	60da      	str	r2, [r3, #12]
 801581a:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801581e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015822:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8015826:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801582a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801582e:	6812      	ldr	r2, [r2, #0]
 8015830:	6818      	ldr	r0, [r3, #0]
 8015832:	f7f9 fd05 	bl	800f240 <lessthanothers>
 8015836:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
 801583a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801583e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	695b      	ldr	r3, [r3, #20]
 8015846:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801584a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801584e:	0bdb      	lsrs	r3, r3, #15
 8015850:	f003 0301 	and.w	r3, r3, #1
 8015854:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8015858:	429a      	cmp	r2, r3
 801585a:	d005      	beq.n	8015868 <luaV_execute+0x5c14>
 801585c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015860:	3304      	adds	r3, #4
 8015862:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015866:	e01e      	b.n	80158a6 <luaV_execute+0x5c52>
 8015868:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801586c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8015870:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015874:	6812      	ldr	r2, [r2, #0]
 8015876:	601a      	str	r2, [r3, #0]
 8015878:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801587c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	09db      	lsrs	r3, r3, #7
 8015884:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8015888:	3302      	adds	r3, #2
 801588a:	009b      	lsls	r3, r3, #2
 801588c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015890:	4413      	add	r3, r2
 8015892:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015896:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801589a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	695b      	ldr	r3, [r3, #20]
 80158a2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80158a6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	bf14      	ite	ne
 80158ae:	2301      	movne	r3, #1
 80158b0:	2300      	moveq	r3, #0
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d013      	beq.n	80158e0 <luaV_execute+0x5c8c>
 80158b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80158bc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80158c0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80158c4:	6818      	ldr	r0, [r3, #0]
 80158c6:	f7f1 fcf1 	bl	80072ac <luaG_traceexec>
 80158ca:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80158ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80158d2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	3308      	adds	r3, #8
 80158dc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80158e0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80158e4:	1d1a      	adds	r2, r3, #4
 80158e6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80158f0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80158f4:	09db      	lsrs	r3, r3, #7
 80158f6:	b2db      	uxtb	r3, r3
 80158f8:	00db      	lsls	r3, r3, #3
 80158fa:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80158fe:	4413      	add	r3, r2
 8015900:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015904:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015908:	b2db      	uxtb	r3, r3
 801590a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801590e:	4a4e      	ldr	r2, [pc, #312]	; (8015a48 <luaV_execute+0x5df4>)
 8015910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015914:	f7fa ba70 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LE) {
        op_order(L, l_lei, LEnum, lessequalothers);
 8015918:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801591c:	0c1b      	lsrs	r3, r3, #16
 801591e:	b2db      	uxtb	r3, r3
 8015920:	00db      	lsls	r3, r3, #3
 8015922:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015926:	441a      	add	r2, r3
 8015928:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801592c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8015930:	601a      	str	r2, [r3, #0]
 8015932:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015936:	791b      	ldrb	r3, [r3, #4]
 8015938:	2b03      	cmp	r3, #3
 801593a:	d12c      	bne.n	8015996 <luaV_execute+0x5d42>
 801593c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015940:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	791b      	ldrb	r3, [r3, #4]
 8015948:	2b03      	cmp	r3, #3
 801594a:	d124      	bne.n	8015996 <luaV_execute+0x5d42>
 801594c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015950:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015954:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015958:	6812      	ldr	r2, [r2, #0]
 801595a:	601a      	str	r2, [r3, #0]
 801595c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015960:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015964:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015968:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 801596c:	6812      	ldr	r2, [r2, #0]
 801596e:	6812      	ldr	r2, [r2, #0]
 8015970:	601a      	str	r2, [r3, #0]
 8015972:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015976:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 801597a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801597e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015982:	6812      	ldr	r2, [r2, #0]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	429a      	cmp	r2, r3
 8015988:	bfd4      	ite	le
 801598a:	2301      	movle	r3, #1
 801598c:	2300      	movgt	r3, #0
 801598e:	b2db      	uxtb	r3, r3
 8015990:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8015994:	e049      	b.n	8015a2a <luaV_execute+0x5dd6>
 8015996:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801599a:	791b      	ldrb	r3, [r3, #4]
 801599c:	f003 030f 	and.w	r3, r3, #15
 80159a0:	2b03      	cmp	r3, #3
 80159a2:	d116      	bne.n	80159d2 <luaV_execute+0x5d7e>
 80159a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159a8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	791b      	ldrb	r3, [r3, #4]
 80159b0:	f003 030f 	and.w	r3, r3, #15
 80159b4:	2b03      	cmp	r3, #3
 80159b6:	d10c      	bne.n	80159d2 <luaV_execute+0x5d7e>
 80159b8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80159bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80159c4:	6819      	ldr	r1, [r3, #0]
 80159c6:	4610      	mov	r0, r2
 80159c8:	f7f9 fbf6 	bl	800f1b8 <LEnum>
 80159cc:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
 80159d0:	e02b      	b.n	8015a2a <luaV_execute+0x5dd6>
 80159d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159d6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80159e0:	611a      	str	r2, [r3, #16]
 80159e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159e6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	685a      	ldr	r2, [r3, #4]
 80159ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159f2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	60da      	str	r2, [r3, #12]
 80159fa:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80159fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a02:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8015a06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a0a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015a0e:	6812      	ldr	r2, [r2, #0]
 8015a10:	6818      	ldr	r0, [r3, #0]
 8015a12:	f7f9 fc3f 	bl	800f294 <lessequalothers>
 8015a16:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
 8015a1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a1e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	695b      	ldr	r3, [r3, #20]
 8015a26:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8015a2a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015a2e:	0bdb      	lsrs	r3, r3, #15
 8015a30:	f003 0301 	and.w	r3, r3, #1
 8015a34:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	d007      	beq.n	8015a4c <luaV_execute+0x5df8>
 8015a3c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015a40:	3304      	adds	r3, #4
 8015a42:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015a46:	e020      	b.n	8015a8a <luaV_execute+0x5e36>
 8015a48:	0801f5c4 	.word	0x0801f5c4
 8015a4c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a50:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8015a54:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015a58:	6812      	ldr	r2, [r2, #0]
 8015a5a:	601a      	str	r2, [r3, #0]
 8015a5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a60:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	09db      	lsrs	r3, r3, #7
 8015a68:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8015a6c:	3302      	adds	r3, #2
 8015a6e:	009b      	lsls	r3, r3, #2
 8015a70:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015a74:	4413      	add	r3, r2
 8015a76:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015a7a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a7e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	695b      	ldr	r3, [r3, #20]
 8015a86:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8015a8a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	bf14      	ite	ne
 8015a92:	2301      	movne	r3, #1
 8015a94:	2300      	moveq	r3, #0
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d013      	beq.n	8015ac4 <luaV_execute+0x5e70>
 8015a9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015aa0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015aa4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015aa8:	6818      	ldr	r0, [r3, #0]
 8015aaa:	f7f1 fbff 	bl	80072ac <luaG_traceexec>
 8015aae:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015ab2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ab6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	3308      	adds	r3, #8
 8015ac0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015ac4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015ac8:	1d1a      	adds	r2, r3, #4
 8015aca:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015ad4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015ad8:	09db      	lsrs	r3, r3, #7
 8015ada:	b2db      	uxtb	r3, r3
 8015adc:	00db      	lsls	r3, r3, #3
 8015ade:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015ae2:	4413      	add	r3, r2
 8015ae4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015ae8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015aec:	b2db      	uxtb	r3, r3
 8015aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015af2:	4ac1      	ldr	r2, [pc, #772]	; (8015df8 <luaV_execute+0x61a4>)
 8015af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015af8:	f7fa b97e 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_EQK) {
        TValue *rb = KB(i);
 8015afc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015b00:	0c1b      	lsrs	r3, r3, #16
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	00da      	lsls	r2, r3, #3
 8015b06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b0a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015b0e:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8015b12:	440a      	add	r2, r1
 8015b14:	601a      	str	r2, [r3, #0]
        /* basic types do not use '__eq'; we can use raw equality */
        int cond = luaV_rawequalobj(s2v(ra), rb);
 8015b16:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8015b1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b1e:	f5a3 74e4 	sub.w	r4, r3, #456	; 0x1c8
 8015b22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	f7f9 fbdf 	bl	800f2f0 <luaV_equalobj>
 8015b32:	6020      	str	r0, [r4, #0]
        docondjump();
 8015b34:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015b38:	0bdb      	lsrs	r3, r3, #15
 8015b3a:	f003 0301 	and.w	r3, r3, #1
 8015b3e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015b42:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8015b46:	6812      	ldr	r2, [r2, #0]
 8015b48:	429a      	cmp	r2, r3
 8015b4a:	d005      	beq.n	8015b58 <luaV_execute+0x5f04>
 8015b4c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015b50:	3304      	adds	r3, #4
 8015b52:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015b56:	e01e      	b.n	8015b96 <luaV_execute+0x5f42>
 8015b58:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b5c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8015b60:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015b64:	6812      	ldr	r2, [r2, #0]
 8015b66:	601a      	str	r2, [r3, #0]
 8015b68:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b6c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	09db      	lsrs	r3, r3, #7
 8015b74:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8015b78:	3302      	adds	r3, #2
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015b80:	4413      	add	r3, r2
 8015b82:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015b86:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b8a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	695b      	ldr	r3, [r3, #20]
 8015b92:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8015b96:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	bf14      	ite	ne
 8015b9e:	2301      	movne	r3, #1
 8015ba0:	2300      	moveq	r3, #0
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d013      	beq.n	8015bd0 <luaV_execute+0x5f7c>
 8015ba8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015bac:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015bb0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015bb4:	6818      	ldr	r0, [r3, #0]
 8015bb6:	f7f1 fb79 	bl	80072ac <luaG_traceexec>
 8015bba:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015bbe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015bc2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	3308      	adds	r3, #8
 8015bcc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015bd0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015bd4:	1d1a      	adds	r2, r3, #4
 8015bd6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015be0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015be4:	09db      	lsrs	r3, r3, #7
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	00db      	lsls	r3, r3, #3
 8015bea:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015bee:	4413      	add	r3, r2
 8015bf0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015bf4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bfe:	4a7e      	ldr	r2, [pc, #504]	; (8015df8 <luaV_execute+0x61a4>)
 8015c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c04:	f7fa b8f8 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_EQI) {
        int cond;
        int im = GETARG_sB(i);
 8015c08:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015c0c:	0c1b      	lsrs	r3, r3, #16
 8015c0e:	b2da      	uxtb	r2, r3
 8015c10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015c18:	3a7f      	subs	r2, #127	; 0x7f
 8015c1a:	601a      	str	r2, [r3, #0]
        if (ttisinteger(s2v(ra)))
 8015c1c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015c20:	791b      	ldrb	r3, [r3, #4]
 8015c22:	2b03      	cmp	r3, #3
 8015c24:	d10f      	bne.n	8015c46 <luaV_execute+0x5ff2>
          cond = (ivalue(s2v(ra)) == im);
 8015c26:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015c30:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8015c34:	6812      	ldr	r2, [r2, #0]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	bf0c      	ite	eq
 8015c3a:	2301      	moveq	r3, #1
 8015c3c:	2300      	movne	r3, #0
 8015c3e:	b2db      	uxtb	r3, r3
 8015c40:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8015c44:	e01f      	b.n	8015c86 <luaV_execute+0x6032>
        else if (ttisfloat(s2v(ra)))
 8015c46:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015c4a:	791b      	ldrb	r3, [r3, #4]
 8015c4c:	2b13      	cmp	r3, #19
 8015c4e:	d117      	bne.n	8015c80 <luaV_execute+0x602c>
          cond = luai_numeq(fltvalue(s2v(ra)), cast_num(im));
 8015c50:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015c54:	ed93 7a00 	vldr	s14, [r3]
 8015c58:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c5c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	ee07 3a90 	vmov	s15, r3
 8015c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c6a:	eeb4 7a67 	vcmp.f32	s14, s15
 8015c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c72:	bf0c      	ite	eq
 8015c74:	2301      	moveq	r3, #1
 8015c76:	2300      	movne	r3, #0
 8015c78:	b2db      	uxtb	r3, r3
 8015c7a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8015c7e:	e002      	b.n	8015c86 <luaV_execute+0x6032>
        else
          cond = 0;  /* other types cannot be equal to a number */
 8015c80:	2300      	movs	r3, #0
 8015c82:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
        docondjump();
 8015c86:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015c8a:	0bdb      	lsrs	r3, r3, #15
 8015c8c:	f003 0301 	and.w	r3, r3, #1
 8015c90:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d005      	beq.n	8015ca4 <luaV_execute+0x6050>
 8015c98:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015c9c:	3304      	adds	r3, #4
 8015c9e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015ca2:	e01e      	b.n	8015ce2 <luaV_execute+0x608e>
 8015ca4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ca8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015cac:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015cb0:	6812      	ldr	r2, [r2, #0]
 8015cb2:	601a      	str	r2, [r3, #0]
 8015cb4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015cb8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	09db      	lsrs	r3, r3, #7
 8015cc0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8015cc4:	3302      	adds	r3, #2
 8015cc6:	009b      	lsls	r3, r3, #2
 8015cc8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015ccc:	4413      	add	r3, r2
 8015cce:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015cd2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015cd6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	695b      	ldr	r3, [r3, #20]
 8015cde:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8015ce2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	bf14      	ite	ne
 8015cea:	2301      	movne	r3, #1
 8015cec:	2300      	moveq	r3, #0
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d013      	beq.n	8015d1c <luaV_execute+0x60c8>
 8015cf4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015cf8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015cfc:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015d00:	6818      	ldr	r0, [r3, #0]
 8015d02:	f7f1 fad3 	bl	80072ac <luaG_traceexec>
 8015d06:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015d0a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015d0e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	3308      	adds	r3, #8
 8015d18:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015d1c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015d20:	1d1a      	adds	r2, r3, #4
 8015d22:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015d2c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015d30:	09db      	lsrs	r3, r3, #7
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	00db      	lsls	r3, r3, #3
 8015d36:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015d3a:	4413      	add	r3, r2
 8015d3c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015d40:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d4a:	4a2b      	ldr	r2, [pc, #172]	; (8015df8 <luaV_execute+0x61a4>)
 8015d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d50:	f7fa b852 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LTI) {
        op_orderI(L, l_lti, luai_numlt, 0, TM_LT);
 8015d54:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015d58:	0c1b      	lsrs	r3, r3, #16
 8015d5a:	b2da      	uxtb	r2, r3
 8015d5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015d60:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015d64:	3a7f      	subs	r2, #127	; 0x7f
 8015d66:	601a      	str	r2, [r3, #0]
 8015d68:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015d6c:	791b      	ldrb	r3, [r3, #4]
 8015d6e:	2b03      	cmp	r3, #3
 8015d70:	d10f      	bne.n	8015d92 <luaV_execute+0x613e>
 8015d72:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015d7c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8015d80:	6812      	ldr	r2, [r2, #0]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	bfcc      	ite	gt
 8015d86:	2301      	movgt	r3, #1
 8015d88:	2300      	movle	r3, #0
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8015d90:	e071      	b.n	8015e76 <luaV_execute+0x6222>
 8015d92:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015d96:	791b      	ldrb	r3, [r3, #4]
 8015d98:	2b13      	cmp	r3, #19
 8015d9a:	d12f      	bne.n	8015dfc <luaV_execute+0x61a8>
 8015d9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015da0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8015da4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015da8:	6812      	ldr	r2, [r2, #0]
 8015daa:	601a      	str	r2, [r3, #0]
 8015dac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015db0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8015db4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015db8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8015dbc:	6812      	ldr	r2, [r2, #0]
 8015dbe:	ee07 2a90 	vmov	s15, r2
 8015dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dc6:	edc3 7a00 	vstr	s15, [r3]
 8015dca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015dce:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8015dd2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015dd6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8015dda:	ed92 7a00 	vldr	s14, [r2]
 8015dde:	edd3 7a00 	vldr	s15, [r3]
 8015de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dea:	bf4c      	ite	mi
 8015dec:	2301      	movmi	r3, #1
 8015dee:	2300      	movpl	r3, #0
 8015df0:	b2db      	uxtb	r3, r3
 8015df2:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8015df6:	e03e      	b.n	8015e76 <luaV_execute+0x6222>
 8015df8:	0801f5c4 	.word	0x0801f5c4
 8015dfc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015e00:	0e1a      	lsrs	r2, r3, #24
 8015e02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015e0a:	601a      	str	r2, [r3, #0]
 8015e0c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e10:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015e1a:	611a      	str	r2, [r3, #16]
 8015e1c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e20:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	685a      	ldr	r2, [r3, #4]
 8015e28:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e2c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	60da      	str	r2, [r3, #12]
 8015e34:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8015e38:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e3c:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8015e40:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e44:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8015e48:	2314      	movs	r3, #20
 8015e4a:	9301      	str	r3, [sp, #4]
 8015e4c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	9300      	str	r3, [sp, #0]
 8015e58:	2300      	movs	r3, #0
 8015e5a:	6812      	ldr	r2, [r2, #0]
 8015e5c:	6800      	ldr	r0, [r0, #0]
 8015e5e:	f7f8 fad9 	bl	800e414 <luaT_callorderiTM>
 8015e62:	f8c7 04b8 	str.w	r0, [r7, #1208]	; 0x4b8
 8015e66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e6a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	695b      	ldr	r3, [r3, #20]
 8015e72:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8015e76:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015e7a:	0bdb      	lsrs	r3, r3, #15
 8015e7c:	f003 0301 	and.w	r3, r3, #1
 8015e80:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8015e84:	429a      	cmp	r2, r3
 8015e86:	d005      	beq.n	8015e94 <luaV_execute+0x6240>
 8015e88:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015e8c:	3304      	adds	r3, #4
 8015e8e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015e92:	e01e      	b.n	8015ed2 <luaV_execute+0x627e>
 8015e94:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8015e9c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015ea0:	6812      	ldr	r2, [r2, #0]
 8015ea2:	601a      	str	r2, [r3, #0]
 8015ea4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ea8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	09db      	lsrs	r3, r3, #7
 8015eb0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8015eb4:	3302      	adds	r3, #2
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8015ebc:	4413      	add	r3, r2
 8015ebe:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015ec2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ec6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	695b      	ldr	r3, [r3, #20]
 8015ece:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8015ed2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	bf14      	ite	ne
 8015eda:	2301      	movne	r3, #1
 8015edc:	2300      	moveq	r3, #0
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d013      	beq.n	8015f0c <luaV_execute+0x62b8>
 8015ee4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ee8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015eec:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015ef0:	6818      	ldr	r0, [r3, #0]
 8015ef2:	f7f1 f9db 	bl	80072ac <luaG_traceexec>
 8015ef6:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015efa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015efe:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	3308      	adds	r3, #8
 8015f08:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015f0c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015f10:	1d1a      	adds	r2, r3, #4
 8015f12:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015f1c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015f20:	09db      	lsrs	r3, r3, #7
 8015f22:	b2db      	uxtb	r3, r3
 8015f24:	00db      	lsls	r3, r3, #3
 8015f26:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015f2a:	4413      	add	r3, r2
 8015f2c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015f30:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015f34:	b2db      	uxtb	r3, r3
 8015f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f3a:	4acc      	ldr	r2, [pc, #816]	; (801626c <luaV_execute+0x6618>)
 8015f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f40:	f7f9 bf5a 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_LEI) {
        op_orderI(L, l_lei, luai_numle, 0, TM_LE);
 8015f44:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015f48:	0c1b      	lsrs	r3, r3, #16
 8015f4a:	b2da      	uxtb	r2, r3
 8015f4c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f50:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8015f54:	3a7f      	subs	r2, #127	; 0x7f
 8015f56:	601a      	str	r2, [r3, #0]
 8015f58:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015f5c:	791b      	ldrb	r3, [r3, #4]
 8015f5e:	2b03      	cmp	r3, #3
 8015f60:	d10f      	bne.n	8015f82 <luaV_execute+0x632e>
 8015f62:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015f6c:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8015f70:	6812      	ldr	r2, [r2, #0]
 8015f72:	429a      	cmp	r2, r3
 8015f74:	bfac      	ite	ge
 8015f76:	2301      	movge	r3, #1
 8015f78:	2300      	movlt	r3, #0
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8015f80:	e06f      	b.n	8016062 <luaV_execute+0x640e>
 8015f82:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8015f86:	791b      	ldrb	r3, [r3, #4]
 8015f88:	2b13      	cmp	r3, #19
 8015f8a:	d12d      	bne.n	8015fe8 <luaV_execute+0x6394>
 8015f8c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015f94:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015f98:	6812      	ldr	r2, [r2, #0]
 8015f9a:	601a      	str	r2, [r3, #0]
 8015f9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015fa0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015fa4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015fa8:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8015fac:	6812      	ldr	r2, [r2, #0]
 8015fae:	ee07 2a90 	vmov	s15, r2
 8015fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fb6:	edc3 7a00 	vstr	s15, [r3]
 8015fba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015fbe:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8015fc2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015fc6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015fca:	ed92 7a00 	vldr	s14, [r2]
 8015fce:	edd3 7a00 	vldr	s15, [r3]
 8015fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fda:	bf94      	ite	ls
 8015fdc:	2301      	movls	r3, #1
 8015fde:	2300      	movhi	r3, #0
 8015fe0:	b2db      	uxtb	r3, r3
 8015fe2:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8015fe6:	e03c      	b.n	8016062 <luaV_execute+0x640e>
 8015fe8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015fec:	0e1a      	lsrs	r2, r3, #24
 8015fee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ff2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8015ff6:	601a      	str	r2, [r3, #0]
 8015ff8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ffc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016006:	611a      	str	r2, [r3, #16]
 8016008:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801600c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	685a      	ldr	r2, [r3, #4]
 8016014:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016018:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	60da      	str	r2, [r3, #12]
 8016020:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8016024:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016028:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 801602c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016030:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8016034:	2315      	movs	r3, #21
 8016036:	9301      	str	r3, [sp, #4]
 8016038:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801603c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	9300      	str	r3, [sp, #0]
 8016044:	2300      	movs	r3, #0
 8016046:	6812      	ldr	r2, [r2, #0]
 8016048:	6800      	ldr	r0, [r0, #0]
 801604a:	f7f8 f9e3 	bl	800e414 <luaT_callorderiTM>
 801604e:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4
 8016052:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016056:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	695b      	ldr	r3, [r3, #20]
 801605e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8016062:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016066:	0bdb      	lsrs	r3, r3, #15
 8016068:	f003 0301 	and.w	r3, r3, #1
 801606c:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8016070:	429a      	cmp	r2, r3
 8016072:	d005      	beq.n	8016080 <luaV_execute+0x642c>
 8016074:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016078:	3304      	adds	r3, #4
 801607a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801607e:	e01e      	b.n	80160be <luaV_execute+0x646a>
 8016080:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016084:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016088:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801608c:	6812      	ldr	r2, [r2, #0]
 801608e:	601a      	str	r2, [r3, #0]
 8016090:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016094:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	09db      	lsrs	r3, r3, #7
 801609c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80160a0:	3302      	adds	r3, #2
 80160a2:	009b      	lsls	r3, r3, #2
 80160a4:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80160a8:	4413      	add	r3, r2
 80160aa:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80160ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80160b2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	695b      	ldr	r3, [r3, #20]
 80160ba:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80160be:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	bf14      	ite	ne
 80160c6:	2301      	movne	r3, #1
 80160c8:	2300      	moveq	r3, #0
 80160ca:	b2db      	uxtb	r3, r3
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d013      	beq.n	80160f8 <luaV_execute+0x64a4>
 80160d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80160d4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80160d8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80160dc:	6818      	ldr	r0, [r3, #0]
 80160de:	f7f1 f8e5 	bl	80072ac <luaG_traceexec>
 80160e2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80160e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80160ea:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	3308      	adds	r3, #8
 80160f4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80160f8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80160fc:	1d1a      	adds	r2, r3, #4
 80160fe:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016108:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801610c:	09db      	lsrs	r3, r3, #7
 801610e:	b2db      	uxtb	r3, r3
 8016110:	00db      	lsls	r3, r3, #3
 8016112:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016116:	4413      	add	r3, r2
 8016118:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801611c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016120:	b2db      	uxtb	r3, r3
 8016122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016126:	4a51      	ldr	r2, [pc, #324]	; (801626c <luaV_execute+0x6618>)
 8016128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801612c:	f7f9 be64 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_GTI) {
        op_orderI(L, l_gti, luai_numgt, 1, TM_LT);
 8016130:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016134:	0c1b      	lsrs	r3, r3, #16
 8016136:	b2da      	uxtb	r2, r3
 8016138:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801613c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8016140:	3a7f      	subs	r2, #127	; 0x7f
 8016142:	601a      	str	r2, [r3, #0]
 8016144:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016148:	791b      	ldrb	r3, [r3, #4]
 801614a:	2b03      	cmp	r3, #3
 801614c:	d10f      	bne.n	801616e <luaV_execute+0x651a>
 801614e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016158:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 801615c:	6812      	ldr	r2, [r2, #0]
 801615e:	429a      	cmp	r2, r3
 8016160:	bfb4      	ite	lt
 8016162:	2301      	movlt	r3, #1
 8016164:	2300      	movge	r3, #0
 8016166:	b2db      	uxtb	r3, r3
 8016168:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 801616c:	e06f      	b.n	801624e <luaV_execute+0x65fa>
 801616e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016172:	791b      	ldrb	r3, [r3, #4]
 8016174:	2b13      	cmp	r3, #19
 8016176:	d12d      	bne.n	80161d4 <luaV_execute+0x6580>
 8016178:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801617c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016180:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016184:	6812      	ldr	r2, [r2, #0]
 8016186:	601a      	str	r2, [r3, #0]
 8016188:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801618c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8016190:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016194:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8016198:	6812      	ldr	r2, [r2, #0]
 801619a:	ee07 2a90 	vmov	s15, r2
 801619e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161a2:	edc3 7a00 	vstr	s15, [r3]
 80161a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161aa:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80161ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80161b6:	ed92 7a00 	vldr	s14, [r2]
 80161ba:	edd3 7a00 	vldr	s15, [r3]
 80161be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80161c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c6:	bfcc      	ite	gt
 80161c8:	2301      	movgt	r3, #1
 80161ca:	2300      	movle	r3, #0
 80161cc:	b2db      	uxtb	r3, r3
 80161ce:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80161d2:	e03c      	b.n	801624e <luaV_execute+0x65fa>
 80161d4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80161d8:	0e1a      	lsrs	r2, r3, #24
 80161da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80161e2:	601a      	str	r2, [r3, #0]
 80161e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161e8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80161f2:	611a      	str	r2, [r3, #16]
 80161f4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161f8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	685a      	ldr	r2, [r3, #4]
 8016200:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016204:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	60da      	str	r2, [r3, #12]
 801620c:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8016210:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016214:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8016218:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801621c:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8016220:	2314      	movs	r3, #20
 8016222:	9301      	str	r3, [sp, #4]
 8016224:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016228:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	9300      	str	r3, [sp, #0]
 8016230:	2301      	movs	r3, #1
 8016232:	6812      	ldr	r2, [r2, #0]
 8016234:	6800      	ldr	r0, [r0, #0]
 8016236:	f7f8 f8ed 	bl	800e414 <luaT_callorderiTM>
 801623a:	f8c7 04b0 	str.w	r0, [r7, #1200]	; 0x4b0
 801623e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016242:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	695b      	ldr	r3, [r3, #20]
 801624a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801624e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016252:	0bdb      	lsrs	r3, r3, #15
 8016254:	f003 0301 	and.w	r3, r3, #1
 8016258:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 801625c:	429a      	cmp	r2, r3
 801625e:	d007      	beq.n	8016270 <luaV_execute+0x661c>
 8016260:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016264:	3304      	adds	r3, #4
 8016266:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801626a:	e020      	b.n	80162ae <luaV_execute+0x665a>
 801626c:	0801f5c4 	.word	0x0801f5c4
 8016270:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016274:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8016278:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801627c:	6812      	ldr	r2, [r2, #0]
 801627e:	601a      	str	r2, [r3, #0]
 8016280:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016284:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	09db      	lsrs	r3, r3, #7
 801628c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8016290:	3302      	adds	r3, #2
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016298:	4413      	add	r3, r2
 801629a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801629e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80162a2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	695b      	ldr	r3, [r3, #20]
 80162aa:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80162ae:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	bf14      	ite	ne
 80162b6:	2301      	movne	r3, #1
 80162b8:	2300      	moveq	r3, #0
 80162ba:	b2db      	uxtb	r3, r3
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d013      	beq.n	80162e8 <luaV_execute+0x6694>
 80162c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80162c4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80162c8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80162cc:	6818      	ldr	r0, [r3, #0]
 80162ce:	f7f0 ffed 	bl	80072ac <luaG_traceexec>
 80162d2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80162d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80162da:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	3308      	adds	r3, #8
 80162e4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80162e8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80162ec:	1d1a      	adds	r2, r3, #4
 80162ee:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80162f8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80162fc:	09db      	lsrs	r3, r3, #7
 80162fe:	b2db      	uxtb	r3, r3
 8016300:	00db      	lsls	r3, r3, #3
 8016302:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016306:	4413      	add	r3, r2
 8016308:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801630c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016310:	b2db      	uxtb	r3, r3
 8016312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016316:	4abc      	ldr	r2, [pc, #752]	; (8016608 <luaV_execute+0x69b4>)
 8016318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801631c:	f7f9 bd6c 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_GEI) {
        op_orderI(L, l_gei, luai_numge, 1, TM_LE);
 8016320:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016324:	0c1b      	lsrs	r3, r3, #16
 8016326:	b2da      	uxtb	r2, r3
 8016328:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801632c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8016330:	3a7f      	subs	r2, #127	; 0x7f
 8016332:	601a      	str	r2, [r3, #0]
 8016334:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016338:	791b      	ldrb	r3, [r3, #4]
 801633a:	2b03      	cmp	r3, #3
 801633c:	d10f      	bne.n	801635e <luaV_execute+0x670a>
 801633e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016348:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 801634c:	6812      	ldr	r2, [r2, #0]
 801634e:	429a      	cmp	r2, r3
 8016350:	bfd4      	ite	le
 8016352:	2301      	movle	r3, #1
 8016354:	2300      	movgt	r3, #0
 8016356:	b2db      	uxtb	r3, r3
 8016358:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 801635c:	e06f      	b.n	801643e <luaV_execute+0x67ea>
 801635e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016362:	791b      	ldrb	r3, [r3, #4]
 8016364:	2b13      	cmp	r3, #19
 8016366:	d12d      	bne.n	80163c4 <luaV_execute+0x6770>
 8016368:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801636c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016370:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016374:	6812      	ldr	r2, [r2, #0]
 8016376:	601a      	str	r2, [r3, #0]
 8016378:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801637c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8016380:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016384:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 8016388:	6812      	ldr	r2, [r2, #0]
 801638a:	ee07 2a90 	vmov	s15, r2
 801638e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016392:	edc3 7a00 	vstr	s15, [r3]
 8016396:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801639a:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 801639e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163a2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80163a6:	ed92 7a00 	vldr	s14, [r2]
 80163aa:	edd3 7a00 	vldr	s15, [r3]
 80163ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80163b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b6:	bfac      	ite	ge
 80163b8:	2301      	movge	r3, #1
 80163ba:	2300      	movlt	r3, #0
 80163bc:	b2db      	uxtb	r3, r3
 80163be:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80163c2:	e03c      	b.n	801643e <luaV_execute+0x67ea>
 80163c4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80163c8:	0e1a      	lsrs	r2, r3, #24
 80163ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80163d2:	601a      	str	r2, [r3, #0]
 80163d4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163d8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80163e2:	611a      	str	r2, [r3, #16]
 80163e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163e8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	685a      	ldr	r2, [r3, #4]
 80163f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163f4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	60da      	str	r2, [r3, #12]
 80163fc:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8016400:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016404:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8016408:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801640c:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8016410:	2315      	movs	r3, #21
 8016412:	9301      	str	r3, [sp, #4]
 8016414:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016418:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	9300      	str	r3, [sp, #0]
 8016420:	2301      	movs	r3, #1
 8016422:	6812      	ldr	r2, [r2, #0]
 8016424:	6800      	ldr	r0, [r0, #0]
 8016426:	f7f7 fff5 	bl	800e414 <luaT_callorderiTM>
 801642a:	f8c7 04ac 	str.w	r0, [r7, #1196]	; 0x4ac
 801642e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016432:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	695b      	ldr	r3, [r3, #20]
 801643a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801643e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016442:	0bdb      	lsrs	r3, r3, #15
 8016444:	f003 0301 	and.w	r3, r3, #1
 8016448:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 801644c:	429a      	cmp	r2, r3
 801644e:	d005      	beq.n	801645c <luaV_execute+0x6808>
 8016450:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016454:	3304      	adds	r3, #4
 8016456:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801645a:	e01e      	b.n	801649a <luaV_execute+0x6846>
 801645c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016460:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8016464:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016468:	6812      	ldr	r2, [r2, #0]
 801646a:	601a      	str	r2, [r3, #0]
 801646c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016470:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	09db      	lsrs	r3, r3, #7
 8016478:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 801647c:	3302      	adds	r3, #2
 801647e:	009b      	lsls	r3, r3, #2
 8016480:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016484:	4413      	add	r3, r2
 8016486:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801648a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801648e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	695b      	ldr	r3, [r3, #20]
 8016496:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801649a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801649e:	2b00      	cmp	r3, #0
 80164a0:	bf14      	ite	ne
 80164a2:	2301      	movne	r3, #1
 80164a4:	2300      	moveq	r3, #0
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d013      	beq.n	80164d4 <luaV_execute+0x6880>
 80164ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80164b0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80164b4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80164b8:	6818      	ldr	r0, [r3, #0]
 80164ba:	f7f0 fef7 	bl	80072ac <luaG_traceexec>
 80164be:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80164c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80164c6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	3308      	adds	r3, #8
 80164d0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80164d4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80164d8:	1d1a      	adds	r2, r3, #4
 80164da:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80164e4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80164e8:	09db      	lsrs	r3, r3, #7
 80164ea:	b2db      	uxtb	r3, r3
 80164ec:	00db      	lsls	r3, r3, #3
 80164ee:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80164f2:	4413      	add	r3, r2
 80164f4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80164f8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80164fc:	b2db      	uxtb	r3, r3
 80164fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016502:	4a41      	ldr	r2, [pc, #260]	; (8016608 <luaV_execute+0x69b4>)
 8016504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016508:	f7f9 bc76 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_TEST) {
        int cond = !l_isfalse(s2v(ra));
 801650c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016510:	791b      	ldrb	r3, [r3, #4]
 8016512:	2b01      	cmp	r3, #1
 8016514:	d008      	beq.n	8016528 <luaV_execute+0x68d4>
 8016516:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801651a:	791b      	ldrb	r3, [r3, #4]
 801651c:	f003 030f 	and.w	r3, r3, #15
 8016520:	2b00      	cmp	r3, #0
 8016522:	d001      	beq.n	8016528 <luaV_execute+0x68d4>
 8016524:	2201      	movs	r2, #1
 8016526:	e000      	b.n	801652a <luaV_execute+0x68d6>
 8016528:	2200      	movs	r2, #0
 801652a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801652e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8016532:	601a      	str	r2, [r3, #0]
        docondjump();
 8016534:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016538:	0bdb      	lsrs	r3, r3, #15
 801653a:	f003 0301 	and.w	r3, r3, #1
 801653e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016542:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8016546:	6812      	ldr	r2, [r2, #0]
 8016548:	429a      	cmp	r2, r3
 801654a:	d005      	beq.n	8016558 <luaV_execute+0x6904>
 801654c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016550:	3304      	adds	r3, #4
 8016552:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8016556:	e01e      	b.n	8016596 <luaV_execute+0x6942>
 8016558:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801655c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8016560:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016564:	6812      	ldr	r2, [r2, #0]
 8016566:	601a      	str	r2, [r3, #0]
 8016568:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801656c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	09db      	lsrs	r3, r3, #7
 8016574:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8016578:	3302      	adds	r3, #2
 801657a:	009b      	lsls	r3, r3, #2
 801657c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016580:	4413      	add	r3, r2
 8016582:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8016586:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801658a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	695b      	ldr	r3, [r3, #20]
 8016592:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8016596:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801659a:	2b00      	cmp	r3, #0
 801659c:	bf14      	ite	ne
 801659e:	2301      	movne	r3, #1
 80165a0:	2300      	moveq	r3, #0
 80165a2:	b2db      	uxtb	r3, r3
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d013      	beq.n	80165d0 <luaV_execute+0x697c>
 80165a8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80165ac:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80165b0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80165b4:	6818      	ldr	r0, [r3, #0]
 80165b6:	f7f0 fe79 	bl	80072ac <luaG_traceexec>
 80165ba:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80165be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80165c2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	3308      	adds	r3, #8
 80165cc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80165d0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80165d4:	1d1a      	adds	r2, r3, #4
 80165d6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80165e0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80165e4:	09db      	lsrs	r3, r3, #7
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	00db      	lsls	r3, r3, #3
 80165ea:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80165ee:	4413      	add	r3, r2
 80165f0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80165f4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80165f8:	b2db      	uxtb	r3, r3
 80165fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165fe:	4a02      	ldr	r2, [pc, #8]	; (8016608 <luaV_execute+0x69b4>)
 8016600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016604:	f7f9 bbf8 	b.w	800fdf8 <luaV_execute+0x1a4>
 8016608:	0801f5c4 	.word	0x0801f5c4
      }
      vmcase(OP_TESTSET) {
        TValue *rb = vRB(i);
 801660c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016610:	0c1b      	lsrs	r3, r3, #16
 8016612:	b2db      	uxtb	r3, r3
 8016614:	00db      	lsls	r3, r3, #3
 8016616:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801661a:	441a      	add	r2, r3
 801661c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016620:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8016624:	601a      	str	r2, [r3, #0]
        if (l_isfalse(rb) == GETARG_k(i))
 8016626:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801662a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	791b      	ldrb	r3, [r3, #4]
 8016632:	2b01      	cmp	r3, #1
 8016634:	d009      	beq.n	801664a <luaV_execute+0x69f6>
 8016636:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801663a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	791b      	ldrb	r3, [r3, #4]
 8016642:	f003 030f 	and.w	r3, r3, #15
 8016646:	2b00      	cmp	r3, #0
 8016648:	d101      	bne.n	801664e <luaV_execute+0x69fa>
 801664a:	2301      	movs	r3, #1
 801664c:	e000      	b.n	8016650 <luaV_execute+0x69fc>
 801664e:	2300      	movs	r3, #0
 8016650:	f003 0301 	and.w	r3, r3, #1
 8016654:	b2db      	uxtb	r3, r3
 8016656:	f083 0301 	eor.w	r3, r3, #1
 801665a:	b2da      	uxtb	r2, r3
 801665c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016660:	0bdb      	lsrs	r3, r3, #15
 8016662:	f003 0301 	and.w	r3, r3, #1
 8016666:	b2db      	uxtb	r3, r3
 8016668:	4053      	eors	r3, r2
 801666a:	b2db      	uxtb	r3, r3
 801666c:	2b00      	cmp	r3, #0
 801666e:	d005      	beq.n	801667c <luaV_execute+0x6a28>
          pc++;
 8016670:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016674:	3304      	adds	r3, #4
 8016676:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801667a:	e047      	b.n	801670c <luaV_execute+0x6ab8>
        else {
          setobj2s(L, ra, rb);
 801667c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016680:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8016684:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016688:	601a      	str	r2, [r3, #0]
 801668a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801668e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016692:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016696:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 801669a:	6812      	ldr	r2, [r2, #0]
 801669c:	601a      	str	r2, [r3, #0]
 801669e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166a2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80166ac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80166b0:	6812      	ldr	r2, [r2, #0]
 80166b2:	6812      	ldr	r2, [r2, #0]
 80166b4:	601a      	str	r2, [r3, #0]
 80166b6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166ba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	791a      	ldrb	r2, [r3, #4]
 80166c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166c6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	711a      	strb	r2, [r3, #4]
          donextjump(ci);
 80166ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80166d6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80166da:	6812      	ldr	r2, [r2, #0]
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	09db      	lsrs	r3, r3, #7
 80166ea:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80166ee:	3302      	adds	r3, #2
 80166f0:	009b      	lsls	r3, r3, #2
 80166f2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80166f6:	4413      	add	r3, r2
 80166f8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80166fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016700:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	695b      	ldr	r3, [r3, #20]
 8016708:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        }
        vmbreak;
 801670c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016710:	2b00      	cmp	r3, #0
 8016712:	bf14      	ite	ne
 8016714:	2301      	movne	r3, #1
 8016716:	2300      	moveq	r3, #0
 8016718:	b2db      	uxtb	r3, r3
 801671a:	2b00      	cmp	r3, #0
 801671c:	d013      	beq.n	8016746 <luaV_execute+0x6af2>
 801671e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016722:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016726:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801672a:	6818      	ldr	r0, [r3, #0]
 801672c:	f7f0 fdbe 	bl	80072ac <luaG_traceexec>
 8016730:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016734:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016738:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	3308      	adds	r3, #8
 8016742:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016746:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801674a:	1d1a      	adds	r2, r3, #4
 801674c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016756:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801675a:	09db      	lsrs	r3, r3, #7
 801675c:	b2db      	uxtb	r3, r3
 801675e:	00db      	lsls	r3, r3, #3
 8016760:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016764:	4413      	add	r3, r2
 8016766:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801676a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801676e:	b2db      	uxtb	r3, r3
 8016770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016774:	4aa6      	ldr	r2, [pc, #664]	; (8016a10 <luaV_execute+0x6dbc>)
 8016776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801677a:	f7f9 bb3d 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_CALL) {
        CallInfo *newci;
        int b = GETARG_B(i);
 801677e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016782:	0c1b      	lsrs	r3, r3, #16
 8016784:	461a      	mov	r2, r3
 8016786:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801678a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801678e:	b2d2      	uxtb	r2, r2
 8016790:	601a      	str	r2, [r3, #0]
        int nresults = GETARG_C(i) - 1;
 8016792:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016796:	0e1b      	lsrs	r3, r3, #24
 8016798:	461a      	mov	r2, r3
 801679a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801679e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80167a2:	3a01      	subs	r2, #1
 80167a4:	601a      	str	r2, [r3, #0]
        if (b != 0)  /* fixed number of arguments? */
 80167a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167aa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d00e      	beq.n	80167d2 <luaV_execute+0x6b7e>
          L->top = ra + b;  /* top signals number of arguments */
 80167b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	00db      	lsls	r3, r3, #3
 80167c0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80167c4:	441a      	add	r2, r3
 80167c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167ca:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	60da      	str	r2, [r3, #12]
        /* else previous instruction set top */
        savepc(L);  /* in case of errors */
 80167d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167d6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80167e0:	611a      	str	r2, [r3, #16]
        if ((newci = luaD_precall(L, ra, nresults)) == NULL)
 80167e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167e6:	f5a3 74a8 	sub.w	r4, r3, #336	; 0x150
 80167ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167ee:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80167f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167f6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80167fa:	6812      	ldr	r2, [r2, #0]
 80167fc:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8016800:	6818      	ldr	r0, [r3, #0]
 8016802:	f7f1 fc56 	bl	80080b2 <luaD_precall>
 8016806:	6020      	str	r0, [r4, #0]
 8016808:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801680c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d111      	bne.n	801683a <luaV_execute+0x6be6>
          updatetrap(ci);  /* C call; nothing else to be done */
 8016816:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801681a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	695b      	ldr	r3, [r3, #20]
 8016822:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        else {  /* Lua call: run function in this same C frame */
          ci = newci;
          goto startfunc;
        }
        vmbreak;
 8016826:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801682a:	2b00      	cmp	r3, #0
 801682c:	bf14      	ite	ne
 801682e:	2301      	movne	r3, #1
 8016830:	2300      	moveq	r3, #0
 8016832:	b2db      	uxtb	r3, r3
 8016834:	2b00      	cmp	r3, #0
 8016836:	d020      	beq.n	801687a <luaV_execute+0x6c26>
 8016838:	e00b      	b.n	8016852 <luaV_execute+0x6bfe>
          ci = newci;
 801683a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801683e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016842:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016846:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 801684a:	6812      	ldr	r2, [r2, #0]
 801684c:	601a      	str	r2, [r3, #0]
          goto startfunc;
 801684e:	f7f9 ba0f 	b.w	800fc70 <luaV_execute+0x1c>
        vmbreak;
 8016852:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016856:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801685a:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801685e:	6818      	ldr	r0, [r3, #0]
 8016860:	f7f0 fd24 	bl	80072ac <luaG_traceexec>
 8016864:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016868:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801686c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	3308      	adds	r3, #8
 8016876:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801687a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801687e:	1d1a      	adds	r2, r3, #4
 8016880:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801688a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801688e:	09db      	lsrs	r3, r3, #7
 8016890:	b2db      	uxtb	r3, r3
 8016892:	00db      	lsls	r3, r3, #3
 8016894:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016898:	4413      	add	r3, r2
 801689a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801689e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168a8:	4a59      	ldr	r2, [pc, #356]	; (8016a10 <luaV_execute+0x6dbc>)
 80168aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168ae:	f7f9 baa3 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_TAILCALL) {
        int b = GETARG_B(i);  /* number of arguments + 1 (function) */
 80168b2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80168b6:	0c1b      	lsrs	r3, r3, #16
 80168b8:	b2db      	uxtb	r3, r3
 80168ba:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
        int n;  /* number of results when calling a C function */
        int nparams1 = GETARG_C(i);
 80168be:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80168c2:	0e1a      	lsrs	r2, r3, #24
 80168c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80168cc:	601a      	str	r2, [r3, #0]
        /* delta is virtual 'func' - real 'func' (vararg functions) */
        int delta = (nparams1) ? ci->u.l.nextraargs + nparams1 : 0;
 80168ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d00c      	beq.n	80168f6 <luaV_execute+0x6ca2>
 80168dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168e0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	699a      	ldr	r2, [r3, #24]
 80168e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	4413      	add	r3, r2
 80168f4:	e000      	b.n	80168f8 <luaV_execute+0x6ca4>
 80168f6:	2300      	movs	r3, #0
 80168f8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80168fc:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8016900:	6013      	str	r3, [r2, #0]
        if (b != 0)
 8016902:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8016906:	2b00      	cmp	r3, #0
 8016908:	d00c      	beq.n	8016924 <luaV_execute+0x6cd0>
          L->top = ra + b;
 801690a:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 801690e:	00db      	lsls	r3, r3, #3
 8016910:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016914:	441a      	add	r2, r3
 8016916:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801691a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	60da      	str	r2, [r3, #12]
 8016922:	e00b      	b.n	801693c <luaV_execute+0x6ce8>
        else  /* previous instruction set top */
          b = cast_int(L->top - ra);
 8016924:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016928:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	68da      	ldr	r2, [r3, #12]
 8016930:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016934:	1ad3      	subs	r3, r2, r3
 8016936:	10db      	asrs	r3, r3, #3
 8016938:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
        savepc(ci);  /* several calls here can raise errors */
 801693c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016940:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801694a:	611a      	str	r2, [r3, #16]
        if (TESTARG_k(i)) {
 801694c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016954:	2b00      	cmp	r3, #0
 8016956:	d008      	beq.n	801696a <luaV_execute+0x6d16>
          luaF_closeupval(L, base);  /* close upvalues from current call */
 8016958:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801695c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016960:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016964:	6818      	ldr	r0, [r3, #0]
 8016966:	f7f1 fe95 	bl	8008694 <luaF_closeupval>
          lua_assert(L->tbclist < base);  /* no pending tbc variables */
          lua_assert(base == ci->func + 1);
        }
        if ((n = luaD_pretailcall(L, ci, ra, b, delta)) < 0)  /* Lua function? */
 801696a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801696e:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
 8016972:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016976:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 801697a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801697e:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8016982:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016986:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	9300      	str	r3, [sp, #0]
 801698e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8016992:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016996:	6809      	ldr	r1, [r1, #0]
 8016998:	6800      	ldr	r0, [r0, #0]
 801699a:	f7f1 facd 	bl	8007f38 <luaD_pretailcall>
 801699e:	6020      	str	r0, [r4, #0]
 80169a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169a4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	da01      	bge.n	80169b2 <luaV_execute+0x6d5e>
          goto startfunc;  /* execute the callee */
 80169ae:	f7f9 b95f 	b.w	800fc70 <luaV_execute+0x1c>
        else {  /* C function? */
          ci->func -= delta;  /* restore 'func' (if vararg) */
 80169b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169b6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	681a      	ldr	r2, [r3, #0]
 80169be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169c2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	00db      	lsls	r3, r3, #3
 80169ca:	425b      	negs	r3, r3
 80169cc:	441a      	add	r2, r3
 80169ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169d2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	601a      	str	r2, [r3, #0]
          luaD_poscall(L, ci, n);  /* finish caller */
 80169da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169de:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 80169e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169e6:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 80169ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169ee:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80169f2:	6812      	ldr	r2, [r2, #0]
 80169f4:	6809      	ldr	r1, [r1, #0]
 80169f6:	6818      	ldr	r0, [r3, #0]
 80169f8:	f7f1 f9e1 	bl	8007dbe <luaD_poscall>
          updatetrap(ci);  /* 'luaD_poscall' can change hooks */
 80169fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a00:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	695b      	ldr	r3, [r3, #20]
 8016a08:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
          goto ret;  /* caller returns after the tail call */
 8016a0c:	e1d7      	b.n	8016dbe <luaV_execute+0x716a>
 8016a0e:	bf00      	nop
 8016a10:	0801f5c4 	.word	0x0801f5c4
        }
      }
      vmcase(OP_RETURN) {
        int n = GETARG_B(i) - 1;  /* number of results */
 8016a14:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016a18:	0c1b      	lsrs	r3, r3, #16
 8016a1a:	b2db      	uxtb	r3, r3
 8016a1c:	3b01      	subs	r3, #1
 8016a1e:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
        int nparams1 = GETARG_C(i);
 8016a22:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016a26:	0e1a      	lsrs	r2, r3, #24
 8016a28:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a2c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016a30:	601a      	str	r2, [r3, #0]
        if (n < 0)  /* not fixed? */
 8016a32:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	da0b      	bge.n	8016a52 <luaV_execute+0x6dfe>
          n = cast_int(L->top - ra);  /* get what is available */
 8016a3a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a3e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	68da      	ldr	r2, [r3, #12]
 8016a46:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016a4a:	1ad3      	subs	r3, r2, r3
 8016a4c:	10db      	asrs	r3, r3, #3
 8016a4e:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
        savepc(ci);
 8016a52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a56:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016a60:	611a      	str	r2, [r3, #16]
        if (TESTARG_k(i)) {  /* may there be open upvalues? */
 8016a62:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d051      	beq.n	8016b12 <luaV_execute+0x6ebe>
          ci->u2.nres = n;  /* save number of returns */
 8016a6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a72:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8016a7c:	61da      	str	r2, [r3, #28]
          if (L->top < ci->top)
 8016a7e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a82:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	68da      	ldr	r2, [r3, #12]
 8016a8a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a8e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	685b      	ldr	r3, [r3, #4]
 8016a96:	429a      	cmp	r2, r3
 8016a98:	d20b      	bcs.n	8016ab2 <luaV_execute+0x6e5e>
            L->top = ci->top;
 8016a9a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a9e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	685a      	ldr	r2, [r3, #4]
 8016aa6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016aaa:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	60da      	str	r2, [r3, #12]
          luaF_close(L, base, CLOSEKTOP, 1);
 8016ab2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ab6:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8016aba:	2301      	movs	r3, #1
 8016abc:	f04f 32ff 	mov.w	r2, #4294967295
 8016ac0:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016ac4:	6800      	ldr	r0, [r0, #0]
 8016ac6:	f7f1 fe60 	bl	800878a <luaF_close>
          updatetrap(ci);
 8016aca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ace:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	695b      	ldr	r3, [r3, #20]
 8016ad6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
          updatestack(ci);
 8016ada:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	bf14      	ite	ne
 8016ae2:	2301      	movne	r3, #1
 8016ae4:	2300      	moveq	r3, #0
 8016ae6:	b2db      	uxtb	r3, r3
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d012      	beq.n	8016b12 <luaV_execute+0x6ebe>
 8016aec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016af0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	3308      	adds	r3, #8
 8016afa:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016afe:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016b02:	09db      	lsrs	r3, r3, #7
 8016b04:	b2db      	uxtb	r3, r3
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016b0c:	4413      	add	r3, r2
 8016b0e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
        }
        if (nparams1)  /* vararg function? */
 8016b12:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d01a      	beq.n	8016b56 <luaV_execute+0x6f02>
          ci->func -= ci->u.l.nextraargs + nparams1;
 8016b20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b24:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	681a      	ldr	r2, [r3, #0]
 8016b2c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b30:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	6999      	ldr	r1, [r3, #24]
 8016b38:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b3c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	440b      	add	r3, r1
 8016b44:	00db      	lsls	r3, r3, #3
 8016b46:	425b      	negs	r3, r3
 8016b48:	441a      	add	r2, r3
 8016b4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b4e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	601a      	str	r2, [r3, #0]
        L->top = ra + n;  /* set call for 'luaD_poscall' */
 8016b56:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8016b5a:	00db      	lsls	r3, r3, #3
 8016b5c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016b60:	441a      	add	r2, r3
 8016b62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b66:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	60da      	str	r2, [r3, #12]
        luaD_poscall(L, ci, n);
 8016b6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b72:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8016b76:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b7a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016b7e:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8016b82:	6809      	ldr	r1, [r1, #0]
 8016b84:	6818      	ldr	r0, [r3, #0]
 8016b86:	f7f1 f91a 	bl	8007dbe <luaD_poscall>
        updatetrap(ci);  /* 'luaD_poscall' can change hooks */
 8016b8a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b8e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	695b      	ldr	r3, [r3, #20]
 8016b96:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        goto ret;
 8016b9a:	e110      	b.n	8016dbe <luaV_execute+0x716a>
      }
      vmcase(OP_RETURN0) {
        if (l_unlikely(L->hookmask)) {
 8016b9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ba0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	bf14      	ite	ne
 8016bac:	2301      	movne	r3, #1
 8016bae:	2300      	moveq	r3, #0
 8016bb0:	b2db      	uxtb	r3, r3
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d020      	beq.n	8016bf8 <luaV_execute+0x6fa4>
          L->top = ra;
 8016bb6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016bba:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016bc4:	60da      	str	r2, [r3, #12]
          savepc(ci);
 8016bc6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016bca:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016bd4:	611a      	str	r2, [r3, #16]
          luaD_poscall(L, ci, 0);  /* no hurry... */
 8016bd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016bda:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8016bde:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016be2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016be6:	2200      	movs	r2, #0
 8016be8:	6809      	ldr	r1, [r1, #0]
 8016bea:	6818      	ldr	r0, [r3, #0]
 8016bec:	f7f1 f8e7 	bl	8007dbe <luaD_poscall>
          trap = 1;
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
          L->ci = ci->previous;  /* back to caller */
          L->top = base - 1;
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
            setnilvalue(s2v(L->top++));  /* all results are nil */
        }
        goto ret;
 8016bf6:	e0e2      	b.n	8016dbe <luaV_execute+0x716a>
          L->ci = ci->previous;  /* back to caller */
 8016bf8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016bfc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	689a      	ldr	r2, [r3, #8]
 8016c04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c08:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	615a      	str	r2, [r3, #20]
          L->top = base - 1;
 8016c10:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8016c14:	f1a3 0208 	sub.w	r2, r3, #8
 8016c18:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c1c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	60da      	str	r2, [r3, #12]
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
 8016c24:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c28:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016c32:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8016c36:	e014      	b.n	8016c62 <luaV_execute+0x700e>
            setnilvalue(s2v(L->top++));  /* all results are nil */
 8016c38:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c3c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	68db      	ldr	r3, [r3, #12]
 8016c44:	f103 0108 	add.w	r1, r3, #8
 8016c48:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016c4c:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8016c50:	6812      	ldr	r2, [r2, #0]
 8016c52:	60d1      	str	r1, [r2, #12]
 8016c54:	2200      	movs	r2, #0
 8016c56:	711a      	strb	r2, [r3, #4]
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
 8016c58:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8016c5c:	3b01      	subs	r3, #1
 8016c5e:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8016c62:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	bfcc      	ite	gt
 8016c6a:	2301      	movgt	r3, #1
 8016c6c:	2300      	movle	r3, #0
 8016c6e:	b2db      	uxtb	r3, r3
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d1e1      	bne.n	8016c38 <luaV_execute+0x6fe4>
        goto ret;
 8016c74:	e0a3      	b.n	8016dbe <luaV_execute+0x716a>
      }
      vmcase(OP_RETURN1) {
        if (l_unlikely(L->hookmask)) {
 8016c76:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c7a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	bf14      	ite	ne
 8016c86:	2301      	movne	r3, #1
 8016c88:	2300      	moveq	r3, #0
 8016c8a:	b2db      	uxtb	r3, r3
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d022      	beq.n	8016cd6 <luaV_execute+0x7082>
          L->top = ra + 1;
 8016c90:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016c94:	f103 0208 	add.w	r2, r3, #8
 8016c98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c9c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	60da      	str	r2, [r3, #12]
          savepc(ci);
 8016ca4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ca8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016cb2:	611a      	str	r2, [r3, #16]
          luaD_poscall(L, ci, 1);  /* no hurry... */
 8016cb4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cb8:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8016cbc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cc0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016cc4:	2201      	movs	r2, #1
 8016cc6:	6809      	ldr	r1, [r1, #0]
 8016cc8:	6818      	ldr	r0, [r3, #0]
 8016cca:	f7f1 f878 	bl	8007dbe <luaD_poscall>
          trap = 1;
 8016cce:	2301      	movs	r3, #1
 8016cd0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8016cd4:	e073      	b.n	8016dbe <luaV_execute+0x716a>
        }
        else {  /* do the 'poscall' here */
          int nres = ci->nresults;
 8016cd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cda:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016ce4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          L->ci = ci->previous;  /* back to caller */
 8016ce8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cec:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	689a      	ldr	r2, [r3, #8]
 8016cf4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cf8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	615a      	str	r2, [r3, #20]
          if (nres == 0)
 8016d00:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d10a      	bne.n	8016d1e <luaV_execute+0x70ca>
            L->top = base - 1;  /* asked for no results */
 8016d08:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8016d0c:	f1a3 0208 	sub.w	r2, r3, #8
 8016d10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d14:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	60da      	str	r2, [r3, #12]
 8016d1c:	e04f      	b.n	8016dbe <luaV_execute+0x716a>
          else {
            setobjs2s(L, base - 1, ra);  /* at least this result */
 8016d1e:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8016d22:	f1a3 0208 	sub.w	r2, r3, #8
 8016d26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016d2e:	601a      	str	r2, [r3, #0]
 8016d30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8016d38:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016d3c:	601a      	str	r2, [r3, #0]
 8016d3e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016d4c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8016d50:	6812      	ldr	r2, [r2, #0]
 8016d52:	6812      	ldr	r2, [r2, #0]
 8016d54:	601a      	str	r2, [r3, #0]
 8016d56:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d5a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	791a      	ldrb	r2, [r3, #4]
 8016d62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	711a      	strb	r2, [r3, #4]
            L->top = base;
 8016d6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d72:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016d7c:	60da      	str	r2, [r3, #12]
            for (; l_unlikely(nres > 1); nres--)
 8016d7e:	e014      	b.n	8016daa <luaV_execute+0x7156>
              setnilvalue(s2v(L->top++));  /* complete missing results */
 8016d80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d84:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	68db      	ldr	r3, [r3, #12]
 8016d8c:	f103 0108 	add.w	r1, r3, #8
 8016d90:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016d94:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8016d98:	6812      	ldr	r2, [r2, #0]
 8016d9a:	60d1      	str	r1, [r2, #12]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	711a      	strb	r2, [r3, #4]
            for (; l_unlikely(nres > 1); nres--)
 8016da0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8016da4:	3b01      	subs	r3, #1
 8016da6:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8016daa:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8016dae:	2b01      	cmp	r3, #1
 8016db0:	bfcc      	ite	gt
 8016db2:	2301      	movgt	r3, #1
 8016db4:	2300      	movle	r3, #0
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d1e1      	bne.n	8016d80 <luaV_execute+0x712c>
          }
        }
       ret:  /* return from a Lua function */
 8016dbc:	bf00      	nop
        if (ci->callstatus & CIST_FRESH)
 8016dbe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016dc2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016dca:	f003 0304 	and.w	r3, r3, #4
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	f040 8523 	bne.w	801781a <luaV_execute+0x7bc6>
          return;  /* end this frame */
        else {
          ci = ci->previous;
 8016dd4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016dd8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016ddc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016de0:	f5a2 62b0 	sub.w	r2, r2, #1408	; 0x580
 8016de4:	6812      	ldr	r2, [r2, #0]
 8016de6:	6892      	ldr	r2, [r2, #8]
 8016de8:	601a      	str	r2, [r3, #0]
          goto returning;  /* continue running caller in this frame */
 8016dea:	f7f8 bf49 	b.w	800fc80 <luaV_execute+0x2c>
        }
      }
      vmcase(OP_FORLOOP) {
        if (ttisinteger(s2v(ra + 2))) {  /* integer loop? */
 8016dee:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016df2:	3310      	adds	r3, #16
 8016df4:	791b      	ldrb	r3, [r3, #4]
 8016df6:	2b03      	cmp	r3, #3
 8016df8:	f040 8081 	bne.w	8016efe <luaV_execute+0x72aa>
          lua_Unsigned count = l_castS2U(ivalue(s2v(ra + 1)));
 8016dfc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016e00:	3308      	adds	r3, #8
 8016e02:	681a      	ldr	r2, [r3, #0]
 8016e04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8016e0c:	601a      	str	r2, [r3, #0]
          if (count > 0) {  /* still more iterations? */
 8016e0e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e12:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	f000 8081 	beq.w	8016f20 <luaV_execute+0x72cc>
            lua_Integer step = ivalue(s2v(ra + 2));
 8016e1e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016e22:	f103 0210 	add.w	r2, r3, #16
 8016e26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016e2e:	6812      	ldr	r2, [r2, #0]
 8016e30:	601a      	str	r2, [r3, #0]
            lua_Integer idx = ivalue(s2v(ra));  /* internal index */
 8016e32:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016e3a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016e3e:	6812      	ldr	r2, [r2, #0]
 8016e40:	601a      	str	r2, [r3, #0]
            chgivalue(s2v(ra + 1), count - 1);  /* update counter */
 8016e42:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016e46:	f103 0208 	add.w	r2, r3, #8
 8016e4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e4e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8016e52:	601a      	str	r2, [r3, #0]
 8016e54:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	3b01      	subs	r3, #1
 8016e60:	461a      	mov	r2, r3
 8016e62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e66:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	601a      	str	r2, [r3, #0]
            idx = intop(+, idx, step);  /* add step to index */
 8016e6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016e76:	681a      	ldr	r2, [r3, #0]
 8016e78:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	441a      	add	r2, r3
 8016e84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016e8c:	601a      	str	r2, [r3, #0]
            chgivalue(s2v(ra), idx);  /* update internal index */
 8016e8e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016e96:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016e9a:	601a      	str	r2, [r3, #0]
 8016e9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ea0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016eaa:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8016eae:	6812      	ldr	r2, [r2, #0]
 8016eb0:	601a      	str	r2, [r3, #0]
            setivalue(s2v(ra + 3), idx);  /* and control variable */
 8016eb2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8016eb6:	f103 0218 	add.w	r2, r3, #24
 8016eba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016ec2:	601a      	str	r2, [r3, #0]
 8016ec4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016ed2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8016ed6:	6812      	ldr	r2, [r2, #0]
 8016ed8:	601a      	str	r2, [r3, #0]
 8016eda:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	2203      	movs	r2, #3
 8016ee6:	711a      	strb	r2, [r3, #4]
            pc -= GETARG_Bx(i);  /* jump back */
 8016ee8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016eec:	0bdb      	lsrs	r3, r3, #15
 8016eee:	009b      	lsls	r3, r3, #2
 8016ef0:	425b      	negs	r3, r3
 8016ef2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016ef6:	4413      	add	r3, r2
 8016ef8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8016efc:	e010      	b.n	8016f20 <luaV_execute+0x72cc>
          }
        }
        else if (floatforloop(ra))  /* float loop */
 8016efe:	f8d7 056c 	ldr.w	r0, [r7, #1388]	; 0x56c
 8016f02:	f7f7 fe11 	bl	800eb28 <floatforloop>
 8016f06:	4603      	mov	r3, r0
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d009      	beq.n	8016f20 <luaV_execute+0x72cc>
          pc -= GETARG_Bx(i);  /* jump back */
 8016f0c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016f10:	0bdb      	lsrs	r3, r3, #15
 8016f12:	009b      	lsls	r3, r3, #2
 8016f14:	425b      	negs	r3, r3
 8016f16:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016f1a:	4413      	add	r3, r2
 8016f1c:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        updatetrap(ci);  /* allows a signal to break the loop */
 8016f20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f24:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	695b      	ldr	r3, [r3, #20]
 8016f2c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8016f30:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	bf14      	ite	ne
 8016f38:	2301      	movne	r3, #1
 8016f3a:	2300      	moveq	r3, #0
 8016f3c:	b2db      	uxtb	r3, r3
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d013      	beq.n	8016f6a <luaV_execute+0x7316>
 8016f42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f46:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016f4a:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016f4e:	6818      	ldr	r0, [r3, #0]
 8016f50:	f7f0 f9ac 	bl	80072ac <luaG_traceexec>
 8016f54:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016f58:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f5c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	3308      	adds	r3, #8
 8016f66:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016f6a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016f6e:	1d1a      	adds	r2, r3, #4
 8016f70:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016f7a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016f7e:	09db      	lsrs	r3, r3, #7
 8016f80:	b2db      	uxtb	r3, r3
 8016f82:	00db      	lsls	r3, r3, #3
 8016f84:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016f88:	4413      	add	r3, r2
 8016f8a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016f8e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f98:	4ac5      	ldr	r2, [pc, #788]	; (80172b0 <luaV_execute+0x765c>)
 8016f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f9e:	f7f8 bf2b 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_FORPREP) {
        savestate(L, ci);  /* in case of errors */
 8016fa2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016fa6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016fb0:	611a      	str	r2, [r3, #16]
 8016fb2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016fb6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	685a      	ldr	r2, [r3, #4]
 8016fbe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016fc2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	60da      	str	r2, [r3, #12]
        if (forprep(L, ra))
 8016fca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016fce:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016fd2:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8016fd6:	6818      	ldr	r0, [r3, #0]
 8016fd8:	f7f7 fc96 	bl	800e908 <forprep>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d009      	beq.n	8016ff6 <luaV_execute+0x73a2>
          pc += GETARG_Bx(i) + 1;  /* skip the loop */
 8016fe2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016fe6:	0bdb      	lsrs	r3, r3, #15
 8016fe8:	3301      	adds	r3, #1
 8016fea:	009b      	lsls	r3, r3, #2
 8016fec:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016ff0:	4413      	add	r3, r2
 8016ff2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        vmbreak;
 8016ff6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	bf14      	ite	ne
 8016ffe:	2301      	movne	r3, #1
 8017000:	2300      	moveq	r3, #0
 8017002:	b2db      	uxtb	r3, r3
 8017004:	2b00      	cmp	r3, #0
 8017006:	d013      	beq.n	8017030 <luaV_execute+0x73dc>
 8017008:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801700c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017010:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017014:	6818      	ldr	r0, [r3, #0]
 8017016:	f7f0 f949 	bl	80072ac <luaG_traceexec>
 801701a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801701e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017022:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	3308      	adds	r3, #8
 801702c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017030:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017034:	1d1a      	adds	r2, r3, #4
 8017036:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8017040:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017044:	09db      	lsrs	r3, r3, #7
 8017046:	b2db      	uxtb	r3, r3
 8017048:	00db      	lsls	r3, r3, #3
 801704a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801704e:	4413      	add	r3, r2
 8017050:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017054:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017058:	b2db      	uxtb	r3, r3
 801705a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801705e:	4a94      	ldr	r2, [pc, #592]	; (80172b0 <luaV_execute+0x765c>)
 8017060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017064:	f7f8 bec8 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_TFORPREP) {
        /* create to-be-closed upvalue (if needed) */
        halfProtect(luaF_newtbcupval(L, ra + 3));
 8017068:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801706c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017076:	611a      	str	r2, [r3, #16]
 8017078:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801707c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	685a      	ldr	r2, [r3, #4]
 8017084:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017088:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	60da      	str	r2, [r3, #12]
 8017090:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017094:	f103 0218 	add.w	r2, r3, #24
 8017098:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801709c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80170a0:	4611      	mov	r1, r2
 80170a2:	6818      	ldr	r0, [r3, #0]
 80170a4:	f7f1 faa4 	bl	80085f0 <luaF_newtbcupval>
        pc += GETARG_Bx(i);
 80170a8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80170ac:	0bdb      	lsrs	r3, r3, #15
 80170ae:	009b      	lsls	r3, r3, #2
 80170b0:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80170b4:	4413      	add	r3, r2
 80170b6:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        i = *(pc++);  /* go to next instruction */
 80170ba:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80170be:	1d1a      	adds	r2, r3, #4
 80170c0:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
        lua_assert(GET_OPCODE(i) == OP_TFORCALL && ra == RA(i));
        goto l_tforcall;
 80170ca:	e7ff      	b.n	80170cc <luaV_execute+0x7478>
           'ra + 2' has the control variable, and 'ra + 3' has the
           to-be-closed variable. The call will use the stack after
           these values (starting at 'ra + 4')
        */
        /* push function, state, and control variable */
        memcpy(ra + 4, ra, 3 * sizeof(*ra));
 80170cc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80170d0:	3320      	adds	r3, #32
 80170d2:	2218      	movs	r2, #24
 80170d4:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80170d8:	4618      	mov	r0, r3
 80170da:	f004 fa19 	bl	801b510 <memcpy>
        L->top = ra + 4 + 3;
 80170de:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80170e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80170e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80170ea:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	60da      	str	r2, [r3, #12]
        ProtectNT(luaD_call(L, ra + 4, GETARG_C(i)));  /* do the call */
 80170f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80170f6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017100:	611a      	str	r2, [r3, #16]
 8017102:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017106:	f103 0120 	add.w	r1, r3, #32
 801710a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801710e:	0e1b      	lsrs	r3, r3, #24
 8017110:	461a      	mov	r2, r3
 8017112:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017116:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801711a:	6818      	ldr	r0, [r3, #0]
 801711c:	f7f1 f88a 	bl	8008234 <luaD_call>
 8017120:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017124:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	695b      	ldr	r3, [r3, #20]
 801712c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        updatestack(ci);  /* stack may have changed */
 8017130:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017134:	2b00      	cmp	r3, #0
 8017136:	bf14      	ite	ne
 8017138:	2301      	movne	r3, #1
 801713a:	2300      	moveq	r3, #0
 801713c:	b2db      	uxtb	r3, r3
 801713e:	2b00      	cmp	r3, #0
 8017140:	d012      	beq.n	8017168 <luaV_execute+0x7514>
 8017142:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017146:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	3308      	adds	r3, #8
 8017150:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017154:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017158:	09db      	lsrs	r3, r3, #7
 801715a:	b2db      	uxtb	r3, r3
 801715c:	00db      	lsls	r3, r3, #3
 801715e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017162:	4413      	add	r3, r2
 8017164:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
        i = *(pc++);  /* go to next instruction */
 8017168:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801716c:	1d1a      	adds	r2, r3, #4
 801716e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
        lua_assert(GET_OPCODE(i) == OP_TFORLOOP && ra == RA(i));
        goto l_tforloop;
 8017178:	e7ff      	b.n	801717a <luaV_execute+0x7526>
      }
      vmcase(OP_TFORLOOP) {
        l_tforloop:
        if (!ttisnil(s2v(ra + 4))) {  /* continue loop? */
 801717a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801717e:	3320      	adds	r3, #32
 8017180:	791b      	ldrb	r3, [r3, #4]
 8017182:	f003 030f 	and.w	r3, r3, #15
 8017186:	2b00      	cmp	r3, #0
 8017188:	d033      	beq.n	80171f2 <luaV_execute+0x759e>
          setobjs2s(L, ra + 2, ra + 4);  /* save control variable */
 801718a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801718e:	f103 0210 	add.w	r2, r3, #16
 8017192:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017196:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801719a:	601a      	str	r2, [r3, #0]
 801719c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80171a0:	f103 0220 	add.w	r2, r3, #32
 80171a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80171ac:	601a      	str	r2, [r3, #0]
 80171ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80171bc:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80171c0:	6812      	ldr	r2, [r2, #0]
 80171c2:	6812      	ldr	r2, [r2, #0]
 80171c4:	601a      	str	r2, [r3, #0]
 80171c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	791a      	ldrb	r2, [r3, #4]
 80171d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	711a      	strb	r2, [r3, #4]
          pc -= GETARG_Bx(i);  /* jump back */
 80171de:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80171e2:	0bdb      	lsrs	r3, r3, #15
 80171e4:	009b      	lsls	r3, r3, #2
 80171e6:	425b      	negs	r3, r3
 80171e8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80171ec:	4413      	add	r3, r2
 80171ee:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        }
        vmbreak;
 80171f2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	bf14      	ite	ne
 80171fa:	2301      	movne	r3, #1
 80171fc:	2300      	moveq	r3, #0
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	2b00      	cmp	r3, #0
 8017202:	d013      	beq.n	801722c <luaV_execute+0x75d8>
 8017204:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017208:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801720c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017210:	6818      	ldr	r0, [r3, #0]
 8017212:	f7f0 f84b 	bl	80072ac <luaG_traceexec>
 8017216:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801721a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801721e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	3308      	adds	r3, #8
 8017228:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801722c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017230:	1d1a      	adds	r2, r3, #4
 8017232:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801723c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017240:	09db      	lsrs	r3, r3, #7
 8017242:	b2db      	uxtb	r3, r3
 8017244:	00db      	lsls	r3, r3, #3
 8017246:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801724a:	4413      	add	r3, r2
 801724c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017250:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017254:	b2db      	uxtb	r3, r3
 8017256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801725a:	4a15      	ldr	r2, [pc, #84]	; (80172b0 <luaV_execute+0x765c>)
 801725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017260:	f7f8 bdca 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETLIST) {
        int n = GETARG_B(i);
 8017264:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017268:	0c1b      	lsrs	r3, r3, #16
 801726a:	b2db      	uxtb	r3, r3
 801726c:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
        unsigned int last = GETARG_C(i);
 8017270:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017274:	0e1b      	lsrs	r3, r3, #24
 8017276:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
        Table *h = hvalue(s2v(ra));
 801727a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017284:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8017288:	601a      	str	r2, [r3, #0]
        if (n == 0)
 801728a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 801728e:	2b00      	cmp	r3, #0
 8017290:	d110      	bne.n	80172b4 <luaV_execute+0x7660>
          n = cast_int(L->top - ra) - 1;  /* get up to the top */
 8017292:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017296:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	68da      	ldr	r2, [r3, #12]
 801729e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80172a2:	1ad3      	subs	r3, r2, r3
 80172a4:	10db      	asrs	r3, r3, #3
 80172a6:	3b01      	subs	r3, #1
 80172a8:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 80172ac:	e00e      	b.n	80172cc <luaV_execute+0x7678>
 80172ae:	bf00      	nop
 80172b0:	0801f5c4 	.word	0x0801f5c4
        else
          L->top = ci->top;  /* correct top in case of emergency GC */
 80172b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80172b8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	685a      	ldr	r2, [r3, #4]
 80172c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80172c4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	60da      	str	r2, [r3, #12]
        last += n;
 80172cc:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80172d0:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 80172d4:	4413      	add	r3, r2
 80172d6:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
        if (TESTARG_k(i)) {
 80172da:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80172de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d00f      	beq.n	8017306 <luaV_execute+0x76b2>
          last += GETARG_Ax(*pc) * (MAXARG_C + 1);
 80172e6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	09db      	lsrs	r3, r3, #7
 80172ee:	021b      	lsls	r3, r3, #8
 80172f0:	461a      	mov	r2, r3
 80172f2:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80172f6:	4413      	add	r3, r2
 80172f8:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
          pc++;
 80172fc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017300:	3304      	adds	r3, #4
 8017302:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        }
        if (last > luaH_realasize(h))  /* needs more space? */
 8017306:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801730a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801730e:	6818      	ldr	r0, [r3, #0]
 8017310:	f7f5 fe28 	bl	800cf64 <luaH_realasize>
 8017314:	4602      	mov	r2, r0
 8017316:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 801731a:	4293      	cmp	r3, r2
 801731c:	f240 8084 	bls.w	8017428 <luaV_execute+0x77d4>
          luaH_resizearray(L, h, last);  /* preallocate it at once */
 8017320:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017324:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 8017328:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801732c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017330:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8017334:	6809      	ldr	r1, [r1, #0]
 8017336:	6818      	ldr	r0, [r3, #0]
 8017338:	f7f6 f923 	bl	800d582 <luaH_resizearray>
        for (; n > 0; n--) {
 801733c:	e074      	b.n	8017428 <luaV_execute+0x77d4>
          TValue *val = s2v(ra + n);
 801733e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8017342:	00db      	lsls	r3, r3, #3
 8017344:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8017348:	441a      	add	r2, r3
 801734a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801734e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017352:	601a      	str	r2, [r3, #0]
          setobj2t(L, &h->array[last - 1], val);
 8017354:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017358:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	68d9      	ldr	r1, [r3, #12]
 8017360:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8017364:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017368:	3b01      	subs	r3, #1
 801736a:	00da      	lsls	r2, r3, #3
 801736c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017374:	440a      	add	r2, r1
 8017376:	601a      	str	r2, [r3, #0]
 8017378:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801737c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017380:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8017384:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8017388:	6812      	ldr	r2, [r2, #0]
 801738a:	601a      	str	r2, [r3, #0]
 801738c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801739a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 801739e:	6812      	ldr	r2, [r2, #0]
 80173a0:	6812      	ldr	r2, [r2, #0]
 80173a2:	601a      	str	r2, [r3, #0]
 80173a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80173a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	791a      	ldrb	r2, [r3, #4]
 80173b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80173b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	711a      	strb	r2, [r3, #4]
          last--;
 80173bc:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80173c0:	3b01      	subs	r3, #1
 80173c2:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
          luaC_barrierback(L, obj2gco(h), val);
 80173c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80173ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	791b      	ldrb	r3, [r3, #4]
 80173d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d021      	beq.n	801741e <luaV_execute+0x77ca>
 80173da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80173de:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	795b      	ldrb	r3, [r3, #5]
 80173e6:	f003 0320 	and.w	r3, r3, #32
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d017      	beq.n	801741e <luaV_execute+0x77ca>
 80173ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80173f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	795b      	ldrb	r3, [r3, #5]
 80173fc:	f003 0318 	and.w	r3, r3, #24
 8017400:	2b00      	cmp	r3, #0
 8017402:	d00c      	beq.n	801741e <luaV_execute+0x77ca>
 8017404:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017408:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801740c:	681a      	ldr	r2, [r3, #0]
 801740e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017412:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017416:	4611      	mov	r1, r2
 8017418:	6818      	ldr	r0, [r3, #0]
 801741a:	f7f1 fb71 	bl	8008b00 <luaC_barrierback_>
        for (; n > 0; n--) {
 801741e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8017422:	3b01      	subs	r3, #1
 8017424:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8017428:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 801742c:	2b00      	cmp	r3, #0
 801742e:	dc86      	bgt.n	801733e <luaV_execute+0x76ea>
        }
        vmbreak;
 8017430:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017434:	2b00      	cmp	r3, #0
 8017436:	bf14      	ite	ne
 8017438:	2301      	movne	r3, #1
 801743a:	2300      	moveq	r3, #0
 801743c:	b2db      	uxtb	r3, r3
 801743e:	2b00      	cmp	r3, #0
 8017440:	d013      	beq.n	801746a <luaV_execute+0x7816>
 8017442:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017446:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801744a:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801744e:	6818      	ldr	r0, [r3, #0]
 8017450:	f7ef ff2c 	bl	80072ac <luaG_traceexec>
 8017454:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8017458:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801745c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	3308      	adds	r3, #8
 8017466:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801746a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801746e:	1d1a      	adds	r2, r3, #4
 8017470:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801747a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801747e:	09db      	lsrs	r3, r3, #7
 8017480:	b2db      	uxtb	r3, r3
 8017482:	00db      	lsls	r3, r3, #3
 8017484:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017488:	4413      	add	r3, r2
 801748a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801748e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017492:	b2db      	uxtb	r3, r3
 8017494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017498:	4ac2      	ldr	r2, [pc, #776]	; (80177a4 <luaV_execute+0x7b50>)
 801749a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801749e:	f7f8 bcab 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_CLOSURE) {
        Proto *p = cl->p->p[GETARG_Bx(i)];
 80174a2:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80174a6:	68db      	ldr	r3, [r3, #12]
 80174a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80174aa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80174ae:	0bdb      	lsrs	r3, r3, #15
 80174b0:	009b      	lsls	r3, r3, #2
 80174b2:	4413      	add	r3, r2
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
        halfProtect(pushclosure(L, p, cl->upvals, base, ra));
 80174ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80174be:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80174c8:	611a      	str	r2, [r3, #16]
 80174ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80174ce:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	685a      	ldr	r2, [r3, #4]
 80174d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80174da:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	60da      	str	r2, [r3, #12]
 80174e2:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80174e6:	f103 0210 	add.w	r2, r3, #16
 80174ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80174ee:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 80174f2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80174f6:	9300      	str	r3, [sp, #0]
 80174f8:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80174fc:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 8017500:	6800      	ldr	r0, [r0, #0]
 8017502:	f7f8 fb37 	bl	800fb74 <pushclosure>
        checkGC(L, ra + 1);
 8017506:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801750a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	691b      	ldr	r3, [r3, #16]
 8017512:	68db      	ldr	r3, [r3, #12]
 8017514:	2b00      	cmp	r3, #0
 8017516:	dd20      	ble.n	801755a <luaV_execute+0x7906>
 8017518:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801751c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017526:	611a      	str	r2, [r3, #16]
 8017528:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801752c:	f103 0208 	add.w	r2, r3, #8
 8017530:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017534:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	60da      	str	r2, [r3, #12]
 801753c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017540:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017544:	6818      	ldr	r0, [r3, #0]
 8017546:	f7f3 fc87 	bl	800ae58 <luaC_step>
 801754a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801754e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	695b      	ldr	r3, [r3, #20]
 8017556:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801755a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801755e:	2b00      	cmp	r3, #0
 8017560:	bf14      	ite	ne
 8017562:	2301      	movne	r3, #1
 8017564:	2300      	moveq	r3, #0
 8017566:	b2db      	uxtb	r3, r3
 8017568:	2b00      	cmp	r3, #0
 801756a:	d013      	beq.n	8017594 <luaV_execute+0x7940>
 801756c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017570:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017574:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017578:	6818      	ldr	r0, [r3, #0]
 801757a:	f7ef fe97 	bl	80072ac <luaG_traceexec>
 801757e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8017582:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017586:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	3308      	adds	r3, #8
 8017590:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017594:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017598:	1d1a      	adds	r2, r3, #4
 801759a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80175a4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80175a8:	09db      	lsrs	r3, r3, #7
 80175aa:	b2db      	uxtb	r3, r3
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80175b2:	4413      	add	r3, r2
 80175b4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80175b8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80175bc:	b2db      	uxtb	r3, r3
 80175be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175c2:	4a78      	ldr	r2, [pc, #480]	; (80177a4 <luaV_execute+0x7b50>)
 80175c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80175c8:	f7f8 bc16 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_VARARG) {
        int n = GETARG_C(i) - 1;  /* required results */
 80175cc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80175d0:	0e1b      	lsrs	r3, r3, #24
 80175d2:	3b01      	subs	r3, #1
 80175d4:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
        Protect(luaT_getvarargs(L, ci, ra, n));
 80175d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80175dc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80175e6:	611a      	str	r2, [r3, #16]
 80175e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80175ec:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	685a      	ldr	r2, [r3, #4]
 80175f4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80175f8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	60da      	str	r2, [r3, #12]
 8017600:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017604:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8017608:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801760c:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8017610:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8017614:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8017618:	6809      	ldr	r1, [r1, #0]
 801761a:	6800      	ldr	r0, [r0, #0]
 801761c:	f7f6 ffaf 	bl	800e57e <luaT_getvarargs>
 8017620:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017624:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	695b      	ldr	r3, [r3, #20]
 801762c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8017630:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017634:	2b00      	cmp	r3, #0
 8017636:	bf14      	ite	ne
 8017638:	2301      	movne	r3, #1
 801763a:	2300      	moveq	r3, #0
 801763c:	b2db      	uxtb	r3, r3
 801763e:	2b00      	cmp	r3, #0
 8017640:	d013      	beq.n	801766a <luaV_execute+0x7a16>
 8017642:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017646:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801764a:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801764e:	6818      	ldr	r0, [r3, #0]
 8017650:	f7ef fe2c 	bl	80072ac <luaG_traceexec>
 8017654:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8017658:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801765c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	3308      	adds	r3, #8
 8017666:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801766a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801766e:	1d1a      	adds	r2, r3, #4
 8017670:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801767a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801767e:	09db      	lsrs	r3, r3, #7
 8017680:	b2db      	uxtb	r3, r3
 8017682:	00db      	lsls	r3, r3, #3
 8017684:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017688:	4413      	add	r3, r2
 801768a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801768e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017692:	b2db      	uxtb	r3, r3
 8017694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017698:	4a42      	ldr	r2, [pc, #264]	; (80177a4 <luaV_execute+0x7b50>)
 801769a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801769e:	f7f8 bbab 	b.w	800fdf8 <luaV_execute+0x1a4>
      }
      vmcase(OP_VARARGPREP) {
        ProtectNT(luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p));
 80176a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80176a6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80176b0:	611a      	str	r2, [r3, #16]
 80176b2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80176b6:	09db      	lsrs	r3, r3, #7
 80176b8:	b2d9      	uxtb	r1, r3
 80176ba:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80176be:	68db      	ldr	r3, [r3, #12]
 80176c0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80176c4:	f5a2 62b0 	sub.w	r2, r2, #1408	; 0x580
 80176c8:	f507 60b0 	add.w	r0, r7, #1408	; 0x580
 80176cc:	f2a0 507c 	subw	r0, r0, #1404	; 0x57c
 80176d0:	6812      	ldr	r2, [r2, #0]
 80176d2:	6800      	ldr	r0, [r0, #0]
 80176d4:	f7f6 fed8 	bl	800e488 <luaT_adjustvarargs>
 80176d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80176dc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	695b      	ldr	r3, [r3, #20]
 80176e4:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        if (l_unlikely(trap)) {  /* previous "Protect" updated trap */
 80176e8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	bf14      	ite	ne
 80176f0:	2301      	movne	r3, #1
 80176f2:	2300      	moveq	r3, #0
 80176f4:	b2db      	uxtb	r3, r3
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d012      	beq.n	8017720 <luaV_execute+0x7acc>
          luaD_hookcall(L, ci);
 80176fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80176fe:	f5a3 62b0 	sub.w	r2, r3, #1408	; 0x580
 8017702:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017706:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801770a:	6811      	ldr	r1, [r2, #0]
 801770c:	6818      	ldr	r0, [r3, #0]
 801770e:	f7f0 f999 	bl	8007a44 <luaD_hookcall>
          L->oldpc = 1;  /* next opcode will be seen as a "new" line */
 8017712:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017716:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2201      	movs	r2, #1
 801771e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        updatebase(ci);  /* function has new base after adjustment */
 8017720:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017724:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	3308      	adds	r3, #8
 801772e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
        vmbreak;
 8017732:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017736:	2b00      	cmp	r3, #0
 8017738:	bf14      	ite	ne
 801773a:	2301      	movne	r3, #1
 801773c:	2300      	moveq	r3, #0
 801773e:	b2db      	uxtb	r3, r3
 8017740:	2b00      	cmp	r3, #0
 8017742:	d013      	beq.n	801776c <luaV_execute+0x7b18>
 8017744:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017748:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801774c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017750:	6818      	ldr	r0, [r3, #0]
 8017752:	f7ef fdab 	bl	80072ac <luaG_traceexec>
 8017756:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801775a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801775e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	3308      	adds	r3, #8
 8017768:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801776c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017770:	1d1a      	adds	r2, r3, #4
 8017772:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801777c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017780:	09db      	lsrs	r3, r3, #7
 8017782:	b2db      	uxtb	r3, r3
 8017784:	00db      	lsls	r3, r3, #3
 8017786:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801778a:	4413      	add	r3, r2
 801778c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017790:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017794:	b2db      	uxtb	r3, r3
 8017796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801779a:	4a02      	ldr	r2, [pc, #8]	; (80177a4 <luaV_execute+0x7b50>)
 801779c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80177a0:	f7f8 bb2a 	b.w	800fdf8 <luaV_execute+0x1a4>
 80177a4:	0801f5c4 	.word	0x0801f5c4
      }
      vmcase(OP_EXTRAARG) {
        lua_assert(0);
        vmbreak;
 80177a8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	bf14      	ite	ne
 80177b0:	2301      	movne	r3, #1
 80177b2:	2300      	moveq	r3, #0
 80177b4:	b2db      	uxtb	r3, r3
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d013      	beq.n	80177e2 <luaV_execute+0x7b8e>
 80177ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80177be:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80177c2:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80177c6:	6818      	ldr	r0, [r3, #0]
 80177c8:	f7ef fd70 	bl	80072ac <luaG_traceexec>
 80177cc:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80177d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80177d4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	3308      	adds	r3, #8
 80177de:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80177e2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80177e6:	1d1a      	adds	r2, r3, #4
 80177e8:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80177f2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80177f6:	09db      	lsrs	r3, r3, #7
 80177f8:	b2db      	uxtb	r3, r3
 80177fa:	00db      	lsls	r3, r3, #3
 80177fc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017800:	4413      	add	r3, r2
 8017802:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017806:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801780a:	b2db      	uxtb	r3, r3
 801780c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017810:	4a04      	ldr	r2, [pc, #16]	; (8017824 <luaV_execute+0x7bd0>)
 8017812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017816:	f7f8 baef 	b.w	800fdf8 <luaV_execute+0x1a4>
          return;  /* end this frame */
 801781a:	bf00      	nop
      }
    }
  }
}
 801781c:	f207 5784 	addw	r7, r7, #1412	; 0x584
 8017820:	46bd      	mov	sp, r7
 8017822:	bd90      	pop	{r4, r7, pc}
 8017824:	0801f5c4 	.word	0x0801f5c4

08017828 <__NVIC_SetPriority>:
{
 8017828:	b480      	push	{r7}
 801782a:	b083      	sub	sp, #12
 801782c:	af00      	add	r7, sp, #0
 801782e:	4603      	mov	r3, r0
 8017830:	6039      	str	r1, [r7, #0]
 8017832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017838:	2b00      	cmp	r3, #0
 801783a:	db0a      	blt.n	8017852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	b2da      	uxtb	r2, r3
 8017840:	490c      	ldr	r1, [pc, #48]	; (8017874 <__NVIC_SetPriority+0x4c>)
 8017842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017846:	0112      	lsls	r2, r2, #4
 8017848:	b2d2      	uxtb	r2, r2
 801784a:	440b      	add	r3, r1
 801784c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017850:	e00a      	b.n	8017868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	b2da      	uxtb	r2, r3
 8017856:	4908      	ldr	r1, [pc, #32]	; (8017878 <__NVIC_SetPriority+0x50>)
 8017858:	79fb      	ldrb	r3, [r7, #7]
 801785a:	f003 030f 	and.w	r3, r3, #15
 801785e:	3b04      	subs	r3, #4
 8017860:	0112      	lsls	r2, r2, #4
 8017862:	b2d2      	uxtb	r2, r2
 8017864:	440b      	add	r3, r1
 8017866:	761a      	strb	r2, [r3, #24]
}
 8017868:	bf00      	nop
 801786a:	370c      	adds	r7, #12
 801786c:	46bd      	mov	sp, r7
 801786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017872:	4770      	bx	lr
 8017874:	e000e100 	.word	0xe000e100
 8017878:	e000ed00 	.word	0xe000ed00

0801787c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801787c:	b580      	push	{r7, lr}
 801787e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8017880:	4b05      	ldr	r3, [pc, #20]	; (8017898 <SysTick_Handler+0x1c>)
 8017882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017884:	f001 fd28 	bl	80192d8 <xTaskGetSchedulerState>
 8017888:	4603      	mov	r3, r0
 801788a:	2b01      	cmp	r3, #1
 801788c:	d001      	beq.n	8017892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801788e:	f002 fb13 	bl	8019eb8 <xPortSysTickHandler>
  }
}
 8017892:	bf00      	nop
 8017894:	bd80      	pop	{r7, pc}
 8017896:	bf00      	nop
 8017898:	e000e010 	.word	0xe000e010

0801789c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801789c:	b580      	push	{r7, lr}
 801789e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80178a0:	2100      	movs	r1, #0
 80178a2:	f06f 0004 	mvn.w	r0, #4
 80178a6:	f7ff ffbf 	bl	8017828 <__NVIC_SetPriority>
#endif
}
 80178aa:	bf00      	nop
 80178ac:	bd80      	pop	{r7, pc}
	...

080178b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80178b0:	b480      	push	{r7}
 80178b2:	b083      	sub	sp, #12
 80178b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80178b6:	f3ef 8305 	mrs	r3, IPSR
 80178ba:	603b      	str	r3, [r7, #0]
  return(result);
 80178bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d003      	beq.n	80178ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80178c2:	f06f 0305 	mvn.w	r3, #5
 80178c6:	607b      	str	r3, [r7, #4]
 80178c8:	e00c      	b.n	80178e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80178ca:	4b0a      	ldr	r3, [pc, #40]	; (80178f4 <osKernelInitialize+0x44>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d105      	bne.n	80178de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80178d2:	4b08      	ldr	r3, [pc, #32]	; (80178f4 <osKernelInitialize+0x44>)
 80178d4:	2201      	movs	r2, #1
 80178d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80178d8:	2300      	movs	r3, #0
 80178da:	607b      	str	r3, [r7, #4]
 80178dc:	e002      	b.n	80178e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80178de:	f04f 33ff 	mov.w	r3, #4294967295
 80178e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80178e4:	687b      	ldr	r3, [r7, #4]
}
 80178e6:	4618      	mov	r0, r3
 80178e8:	370c      	adds	r7, #12
 80178ea:	46bd      	mov	sp, r7
 80178ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f0:	4770      	bx	lr
 80178f2:	bf00      	nop
 80178f4:	20000af4 	.word	0x20000af4

080178f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b082      	sub	sp, #8
 80178fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80178fe:	f3ef 8305 	mrs	r3, IPSR
 8017902:	603b      	str	r3, [r7, #0]
  return(result);
 8017904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017906:	2b00      	cmp	r3, #0
 8017908:	d003      	beq.n	8017912 <osKernelStart+0x1a>
    stat = osErrorISR;
 801790a:	f06f 0305 	mvn.w	r3, #5
 801790e:	607b      	str	r3, [r7, #4]
 8017910:	e010      	b.n	8017934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017912:	4b0b      	ldr	r3, [pc, #44]	; (8017940 <osKernelStart+0x48>)
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	2b01      	cmp	r3, #1
 8017918:	d109      	bne.n	801792e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801791a:	f7ff ffbf 	bl	801789c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801791e:	4b08      	ldr	r3, [pc, #32]	; (8017940 <osKernelStart+0x48>)
 8017920:	2202      	movs	r2, #2
 8017922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017924:	f001 f87c 	bl	8018a20 <vTaskStartScheduler>
      stat = osOK;
 8017928:	2300      	movs	r3, #0
 801792a:	607b      	str	r3, [r7, #4]
 801792c:	e002      	b.n	8017934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801792e:	f04f 33ff 	mov.w	r3, #4294967295
 8017932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017934:	687b      	ldr	r3, [r7, #4]
}
 8017936:	4618      	mov	r0, r3
 8017938:	3708      	adds	r7, #8
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}
 801793e:	bf00      	nop
 8017940:	20000af4 	.word	0x20000af4

08017944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017944:	b580      	push	{r7, lr}
 8017946:	b08e      	sub	sp, #56	; 0x38
 8017948:	af04      	add	r7, sp, #16
 801794a:	60f8      	str	r0, [r7, #12]
 801794c:	60b9      	str	r1, [r7, #8]
 801794e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017950:	2300      	movs	r3, #0
 8017952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017954:	f3ef 8305 	mrs	r3, IPSR
 8017958:	617b      	str	r3, [r7, #20]
  return(result);
 801795a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801795c:	2b00      	cmp	r3, #0
 801795e:	d17e      	bne.n	8017a5e <osThreadNew+0x11a>
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d07b      	beq.n	8017a5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017966:	2380      	movs	r3, #128	; 0x80
 8017968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801796a:	2318      	movs	r3, #24
 801796c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801796e:	2300      	movs	r3, #0
 8017970:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017972:	f04f 33ff 	mov.w	r3, #4294967295
 8017976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d045      	beq.n	8017a0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d002      	beq.n	801798c <osThreadNew+0x48>
        name = attr->name;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	699b      	ldr	r3, [r3, #24]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d002      	beq.n	801799a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	699b      	ldr	r3, [r3, #24]
 8017998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801799a:	69fb      	ldr	r3, [r7, #28]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d008      	beq.n	80179b2 <osThreadNew+0x6e>
 80179a0:	69fb      	ldr	r3, [r7, #28]
 80179a2:	2b38      	cmp	r3, #56	; 0x38
 80179a4:	d805      	bhi.n	80179b2 <osThreadNew+0x6e>
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	f003 0301 	and.w	r3, r3, #1
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d001      	beq.n	80179b6 <osThreadNew+0x72>
        return (NULL);
 80179b2:	2300      	movs	r3, #0
 80179b4:	e054      	b.n	8017a60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	695b      	ldr	r3, [r3, #20]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d003      	beq.n	80179c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	695b      	ldr	r3, [r3, #20]
 80179c2:	089b      	lsrs	r3, r3, #2
 80179c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	689b      	ldr	r3, [r3, #8]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d00e      	beq.n	80179ec <osThreadNew+0xa8>
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	68db      	ldr	r3, [r3, #12]
 80179d2:	2bbb      	cmp	r3, #187	; 0xbb
 80179d4:	d90a      	bls.n	80179ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d006      	beq.n	80179ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	695b      	ldr	r3, [r3, #20]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d002      	beq.n	80179ec <osThreadNew+0xa8>
        mem = 1;
 80179e6:	2301      	movs	r3, #1
 80179e8:	61bb      	str	r3, [r7, #24]
 80179ea:	e010      	b.n	8017a0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	689b      	ldr	r3, [r3, #8]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d10c      	bne.n	8017a0e <osThreadNew+0xca>
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	68db      	ldr	r3, [r3, #12]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d108      	bne.n	8017a0e <osThreadNew+0xca>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	691b      	ldr	r3, [r3, #16]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d104      	bne.n	8017a0e <osThreadNew+0xca>
          mem = 0;
 8017a04:	2300      	movs	r3, #0
 8017a06:	61bb      	str	r3, [r7, #24]
 8017a08:	e001      	b.n	8017a0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017a0e:	69bb      	ldr	r3, [r7, #24]
 8017a10:	2b01      	cmp	r3, #1
 8017a12:	d110      	bne.n	8017a36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017a1c:	9202      	str	r2, [sp, #8]
 8017a1e:	9301      	str	r3, [sp, #4]
 8017a20:	69fb      	ldr	r3, [r7, #28]
 8017a22:	9300      	str	r3, [sp, #0]
 8017a24:	68bb      	ldr	r3, [r7, #8]
 8017a26:	6a3a      	ldr	r2, [r7, #32]
 8017a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a2a:	68f8      	ldr	r0, [r7, #12]
 8017a2c:	f000 fe0c 	bl	8018648 <xTaskCreateStatic>
 8017a30:	4603      	mov	r3, r0
 8017a32:	613b      	str	r3, [r7, #16]
 8017a34:	e013      	b.n	8017a5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017a36:	69bb      	ldr	r3, [r7, #24]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d110      	bne.n	8017a5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	b29a      	uxth	r2, r3
 8017a40:	f107 0310 	add.w	r3, r7, #16
 8017a44:	9301      	str	r3, [sp, #4]
 8017a46:	69fb      	ldr	r3, [r7, #28]
 8017a48:	9300      	str	r3, [sp, #0]
 8017a4a:	68bb      	ldr	r3, [r7, #8]
 8017a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a4e:	68f8      	ldr	r0, [r7, #12]
 8017a50:	f000 fe57 	bl	8018702 <xTaskCreate>
 8017a54:	4603      	mov	r3, r0
 8017a56:	2b01      	cmp	r3, #1
 8017a58:	d001      	beq.n	8017a5e <osThreadNew+0x11a>
            hTask = NULL;
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017a5e:	693b      	ldr	r3, [r7, #16]
}
 8017a60:	4618      	mov	r0, r3
 8017a62:	3728      	adds	r7, #40	; 0x28
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}

08017a68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b084      	sub	sp, #16
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017a70:	f3ef 8305 	mrs	r3, IPSR
 8017a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8017a76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d003      	beq.n	8017a84 <osDelay+0x1c>
    stat = osErrorISR;
 8017a7c:	f06f 0305 	mvn.w	r3, #5
 8017a80:	60fb      	str	r3, [r7, #12]
 8017a82:	e007      	b.n	8017a94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017a84:	2300      	movs	r3, #0
 8017a86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d002      	beq.n	8017a94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8017a8e:	6878      	ldr	r0, [r7, #4]
 8017a90:	f000 ff92 	bl	80189b8 <vTaskDelay>
    }
  }

  return (stat);
 8017a94:	68fb      	ldr	r3, [r7, #12]
}
 8017a96:	4618      	mov	r0, r3
 8017a98:	3710      	adds	r7, #16
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}
	...

08017aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017aa0:	b480      	push	{r7}
 8017aa2:	b085      	sub	sp, #20
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	60f8      	str	r0, [r7, #12]
 8017aa8:	60b9      	str	r1, [r7, #8]
 8017aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	4a07      	ldr	r2, [pc, #28]	; (8017acc <vApplicationGetIdleTaskMemory+0x2c>)
 8017ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017ab2:	68bb      	ldr	r3, [r7, #8]
 8017ab4:	4a06      	ldr	r2, [pc, #24]	; (8017ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8017ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2280      	movs	r2, #128	; 0x80
 8017abc:	601a      	str	r2, [r3, #0]
}
 8017abe:	bf00      	nop
 8017ac0:	3714      	adds	r7, #20
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac8:	4770      	bx	lr
 8017aca:	bf00      	nop
 8017acc:	20000af8 	.word	0x20000af8
 8017ad0:	20000bb4 	.word	0x20000bb4

08017ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017ad4:	b480      	push	{r7}
 8017ad6:	b085      	sub	sp, #20
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	60f8      	str	r0, [r7, #12]
 8017adc:	60b9      	str	r1, [r7, #8]
 8017ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	4a07      	ldr	r2, [pc, #28]	; (8017b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8017ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	4a06      	ldr	r2, [pc, #24]	; (8017b04 <vApplicationGetTimerTaskMemory+0x30>)
 8017aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017af2:	601a      	str	r2, [r3, #0]
}
 8017af4:	bf00      	nop
 8017af6:	3714      	adds	r7, #20
 8017af8:	46bd      	mov	sp, r7
 8017afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afe:	4770      	bx	lr
 8017b00:	20000db4 	.word	0x20000db4
 8017b04:	20000e70 	.word	0x20000e70

08017b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017b08:	b480      	push	{r7}
 8017b0a:	b083      	sub	sp, #12
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f103 0208 	add.w	r2, r3, #8
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8017b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	f103 0208 	add.w	r2, r3, #8
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	f103 0208 	add.w	r2, r3, #8
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	2200      	movs	r2, #0
 8017b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017b3c:	bf00      	nop
 8017b3e:	370c      	adds	r7, #12
 8017b40:	46bd      	mov	sp, r7
 8017b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b46:	4770      	bx	lr

08017b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017b48:	b480      	push	{r7}
 8017b4a:	b083      	sub	sp, #12
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	2200      	movs	r2, #0
 8017b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017b56:	bf00      	nop
 8017b58:	370c      	adds	r7, #12
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b60:	4770      	bx	lr

08017b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017b62:	b480      	push	{r7}
 8017b64:	b085      	sub	sp, #20
 8017b66:	af00      	add	r7, sp, #0
 8017b68:	6078      	str	r0, [r7, #4]
 8017b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	685b      	ldr	r3, [r3, #4]
 8017b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	68fa      	ldr	r2, [r7, #12]
 8017b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	689a      	ldr	r2, [r3, #8]
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	689b      	ldr	r3, [r3, #8]
 8017b84:	683a      	ldr	r2, [r7, #0]
 8017b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	683a      	ldr	r2, [r7, #0]
 8017b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	1c5a      	adds	r2, r3, #1
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	601a      	str	r2, [r3, #0]
}
 8017b9e:	bf00      	nop
 8017ba0:	3714      	adds	r7, #20
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba8:	4770      	bx	lr

08017baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017baa:	b480      	push	{r7}
 8017bac:	b085      	sub	sp, #20
 8017bae:	af00      	add	r7, sp, #0
 8017bb0:	6078      	str	r0, [r7, #4]
 8017bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017bb4:	683b      	ldr	r3, [r7, #0]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bc0:	d103      	bne.n	8017bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	691b      	ldr	r3, [r3, #16]
 8017bc6:	60fb      	str	r3, [r7, #12]
 8017bc8:	e00c      	b.n	8017be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	3308      	adds	r3, #8
 8017bce:	60fb      	str	r3, [r7, #12]
 8017bd0:	e002      	b.n	8017bd8 <vListInsert+0x2e>
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	685b      	ldr	r3, [r3, #4]
 8017bd6:	60fb      	str	r3, [r7, #12]
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	685b      	ldr	r3, [r3, #4]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	68ba      	ldr	r2, [r7, #8]
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d2f6      	bcs.n	8017bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	685a      	ldr	r2, [r3, #4]
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	685b      	ldr	r3, [r3, #4]
 8017bf0:	683a      	ldr	r2, [r7, #0]
 8017bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017bf4:	683b      	ldr	r3, [r7, #0]
 8017bf6:	68fa      	ldr	r2, [r7, #12]
 8017bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	683a      	ldr	r2, [r7, #0]
 8017bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017c00:	683b      	ldr	r3, [r7, #0]
 8017c02:	687a      	ldr	r2, [r7, #4]
 8017c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	1c5a      	adds	r2, r3, #1
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	601a      	str	r2, [r3, #0]
}
 8017c10:	bf00      	nop
 8017c12:	3714      	adds	r7, #20
 8017c14:	46bd      	mov	sp, r7
 8017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1a:	4770      	bx	lr

08017c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017c1c:	b480      	push	{r7}
 8017c1e:	b085      	sub	sp, #20
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	691b      	ldr	r3, [r3, #16]
 8017c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	685b      	ldr	r3, [r3, #4]
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	6892      	ldr	r2, [r2, #8]
 8017c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	689b      	ldr	r3, [r3, #8]
 8017c38:	687a      	ldr	r2, [r7, #4]
 8017c3a:	6852      	ldr	r2, [r2, #4]
 8017c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	685b      	ldr	r3, [r3, #4]
 8017c42:	687a      	ldr	r2, [r7, #4]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d103      	bne.n	8017c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	689a      	ldr	r2, [r3, #8]
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2200      	movs	r2, #0
 8017c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	1e5a      	subs	r2, r3, #1
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	681b      	ldr	r3, [r3, #0]
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3714      	adds	r7, #20
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6e:	4770      	bx	lr

08017c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
 8017c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d10a      	bne.n	8017c9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c88:	f383 8811 	msr	BASEPRI, r3
 8017c8c:	f3bf 8f6f 	isb	sy
 8017c90:	f3bf 8f4f 	dsb	sy
 8017c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017c96:	bf00      	nop
 8017c98:	e7fe      	b.n	8017c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017c9a:	f002 f87b 	bl	8019d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	681a      	ldr	r2, [r3, #0]
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ca6:	68f9      	ldr	r1, [r7, #12]
 8017ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017caa:	fb01 f303 	mul.w	r3, r1, r3
 8017cae:	441a      	add	r2, r3
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	681a      	ldr	r2, [r3, #0]
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	681a      	ldr	r2, [r3, #0]
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cca:	3b01      	subs	r3, #1
 8017ccc:	68f9      	ldr	r1, [r7, #12]
 8017cce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017cd0:	fb01 f303 	mul.w	r3, r1, r3
 8017cd4:	441a      	add	r2, r3
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	22ff      	movs	r2, #255	; 0xff
 8017cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	22ff      	movs	r2, #255	; 0xff
 8017ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d114      	bne.n	8017d1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	691b      	ldr	r3, [r3, #16]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d01a      	beq.n	8017d2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	3310      	adds	r3, #16
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f001 f929 	bl	8018f54 <xTaskRemoveFromEventList>
 8017d02:	4603      	mov	r3, r0
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d012      	beq.n	8017d2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017d08:	4b0c      	ldr	r3, [pc, #48]	; (8017d3c <xQueueGenericReset+0xcc>)
 8017d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d0e:	601a      	str	r2, [r3, #0]
 8017d10:	f3bf 8f4f 	dsb	sy
 8017d14:	f3bf 8f6f 	isb	sy
 8017d18:	e009      	b.n	8017d2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	3310      	adds	r3, #16
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f7ff fef2 	bl	8017b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	3324      	adds	r3, #36	; 0x24
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f7ff feed 	bl	8017b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017d2e:	f002 f861 	bl	8019df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017d32:	2301      	movs	r3, #1
}
 8017d34:	4618      	mov	r0, r3
 8017d36:	3710      	adds	r7, #16
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}
 8017d3c:	e000ed04 	.word	0xe000ed04

08017d40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b08e      	sub	sp, #56	; 0x38
 8017d44:	af02      	add	r7, sp, #8
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	607a      	str	r2, [r7, #4]
 8017d4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d10a      	bne.n	8017d6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d58:	f383 8811 	msr	BASEPRI, r3
 8017d5c:	f3bf 8f6f 	isb	sy
 8017d60:	f3bf 8f4f 	dsb	sy
 8017d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017d66:	bf00      	nop
 8017d68:	e7fe      	b.n	8017d68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017d6a:	683b      	ldr	r3, [r7, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d10a      	bne.n	8017d86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d74:	f383 8811 	msr	BASEPRI, r3
 8017d78:	f3bf 8f6f 	isb	sy
 8017d7c:	f3bf 8f4f 	dsb	sy
 8017d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017d82:	bf00      	nop
 8017d84:	e7fe      	b.n	8017d84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d002      	beq.n	8017d92 <xQueueGenericCreateStatic+0x52>
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d001      	beq.n	8017d96 <xQueueGenericCreateStatic+0x56>
 8017d92:	2301      	movs	r3, #1
 8017d94:	e000      	b.n	8017d98 <xQueueGenericCreateStatic+0x58>
 8017d96:	2300      	movs	r3, #0
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d10a      	bne.n	8017db2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017da0:	f383 8811 	msr	BASEPRI, r3
 8017da4:	f3bf 8f6f 	isb	sy
 8017da8:	f3bf 8f4f 	dsb	sy
 8017dac:	623b      	str	r3, [r7, #32]
}
 8017dae:	bf00      	nop
 8017db0:	e7fe      	b.n	8017db0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d102      	bne.n	8017dbe <xQueueGenericCreateStatic+0x7e>
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d101      	bne.n	8017dc2 <xQueueGenericCreateStatic+0x82>
 8017dbe:	2301      	movs	r3, #1
 8017dc0:	e000      	b.n	8017dc4 <xQueueGenericCreateStatic+0x84>
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d10a      	bne.n	8017dde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dcc:	f383 8811 	msr	BASEPRI, r3
 8017dd0:	f3bf 8f6f 	isb	sy
 8017dd4:	f3bf 8f4f 	dsb	sy
 8017dd8:	61fb      	str	r3, [r7, #28]
}
 8017dda:	bf00      	nop
 8017ddc:	e7fe      	b.n	8017ddc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017dde:	2350      	movs	r3, #80	; 0x50
 8017de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017de2:	697b      	ldr	r3, [r7, #20]
 8017de4:	2b50      	cmp	r3, #80	; 0x50
 8017de6:	d00a      	beq.n	8017dfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dec:	f383 8811 	msr	BASEPRI, r3
 8017df0:	f3bf 8f6f 	isb	sy
 8017df4:	f3bf 8f4f 	dsb	sy
 8017df8:	61bb      	str	r3, [r7, #24]
}
 8017dfa:	bf00      	nop
 8017dfc:	e7fe      	b.n	8017dfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017dfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d00d      	beq.n	8017e26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0c:	2201      	movs	r2, #1
 8017e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017e12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e18:	9300      	str	r3, [sp, #0]
 8017e1a:	4613      	mov	r3, r2
 8017e1c:	687a      	ldr	r2, [r7, #4]
 8017e1e:	68b9      	ldr	r1, [r7, #8]
 8017e20:	68f8      	ldr	r0, [r7, #12]
 8017e22:	f000 f805 	bl	8017e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	3730      	adds	r7, #48	; 0x30
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}

08017e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b084      	sub	sp, #16
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	607a      	str	r2, [r7, #4]
 8017e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017e3e:	68bb      	ldr	r3, [r7, #8]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d103      	bne.n	8017e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017e44:	69bb      	ldr	r3, [r7, #24]
 8017e46:	69ba      	ldr	r2, [r7, #24]
 8017e48:	601a      	str	r2, [r3, #0]
 8017e4a:	e002      	b.n	8017e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017e4c:	69bb      	ldr	r3, [r7, #24]
 8017e4e:	687a      	ldr	r2, [r7, #4]
 8017e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017e52:	69bb      	ldr	r3, [r7, #24]
 8017e54:	68fa      	ldr	r2, [r7, #12]
 8017e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017e58:	69bb      	ldr	r3, [r7, #24]
 8017e5a:	68ba      	ldr	r2, [r7, #8]
 8017e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017e5e:	2101      	movs	r1, #1
 8017e60:	69b8      	ldr	r0, [r7, #24]
 8017e62:	f7ff ff05 	bl	8017c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017e66:	69bb      	ldr	r3, [r7, #24]
 8017e68:	78fa      	ldrb	r2, [r7, #3]
 8017e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017e6e:	bf00      	nop
 8017e70:	3710      	adds	r7, #16
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}
	...

08017e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b08e      	sub	sp, #56	; 0x38
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	60f8      	str	r0, [r7, #12]
 8017e80:	60b9      	str	r1, [r7, #8]
 8017e82:	607a      	str	r2, [r7, #4]
 8017e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017e86:	2300      	movs	r3, #0
 8017e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d10a      	bne.n	8017eaa <xQueueGenericSend+0x32>
	__asm volatile
 8017e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e98:	f383 8811 	msr	BASEPRI, r3
 8017e9c:	f3bf 8f6f 	isb	sy
 8017ea0:	f3bf 8f4f 	dsb	sy
 8017ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017ea6:	bf00      	nop
 8017ea8:	e7fe      	b.n	8017ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d103      	bne.n	8017eb8 <xQueueGenericSend+0x40>
 8017eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d101      	bne.n	8017ebc <xQueueGenericSend+0x44>
 8017eb8:	2301      	movs	r3, #1
 8017eba:	e000      	b.n	8017ebe <xQueueGenericSend+0x46>
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d10a      	bne.n	8017ed8 <xQueueGenericSend+0x60>
	__asm volatile
 8017ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ec6:	f383 8811 	msr	BASEPRI, r3
 8017eca:	f3bf 8f6f 	isb	sy
 8017ece:	f3bf 8f4f 	dsb	sy
 8017ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017ed4:	bf00      	nop
 8017ed6:	e7fe      	b.n	8017ed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	2b02      	cmp	r3, #2
 8017edc:	d103      	bne.n	8017ee6 <xQueueGenericSend+0x6e>
 8017ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ee2:	2b01      	cmp	r3, #1
 8017ee4:	d101      	bne.n	8017eea <xQueueGenericSend+0x72>
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	e000      	b.n	8017eec <xQueueGenericSend+0x74>
 8017eea:	2300      	movs	r3, #0
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d10a      	bne.n	8017f06 <xQueueGenericSend+0x8e>
	__asm volatile
 8017ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ef4:	f383 8811 	msr	BASEPRI, r3
 8017ef8:	f3bf 8f6f 	isb	sy
 8017efc:	f3bf 8f4f 	dsb	sy
 8017f00:	623b      	str	r3, [r7, #32]
}
 8017f02:	bf00      	nop
 8017f04:	e7fe      	b.n	8017f04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017f06:	f001 f9e7 	bl	80192d8 <xTaskGetSchedulerState>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d102      	bne.n	8017f16 <xQueueGenericSend+0x9e>
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d101      	bne.n	8017f1a <xQueueGenericSend+0xa2>
 8017f16:	2301      	movs	r3, #1
 8017f18:	e000      	b.n	8017f1c <xQueueGenericSend+0xa4>
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d10a      	bne.n	8017f36 <xQueueGenericSend+0xbe>
	__asm volatile
 8017f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f24:	f383 8811 	msr	BASEPRI, r3
 8017f28:	f3bf 8f6f 	isb	sy
 8017f2c:	f3bf 8f4f 	dsb	sy
 8017f30:	61fb      	str	r3, [r7, #28]
}
 8017f32:	bf00      	nop
 8017f34:	e7fe      	b.n	8017f34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017f36:	f001 ff2d 	bl	8019d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d302      	bcc.n	8017f4c <xQueueGenericSend+0xd4>
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	2b02      	cmp	r3, #2
 8017f4a:	d129      	bne.n	8017fa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017f4c:	683a      	ldr	r2, [r7, #0]
 8017f4e:	68b9      	ldr	r1, [r7, #8]
 8017f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f52:	f000 fa0b 	bl	801836c <prvCopyDataToQueue>
 8017f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d010      	beq.n	8017f82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f62:	3324      	adds	r3, #36	; 0x24
 8017f64:	4618      	mov	r0, r3
 8017f66:	f000 fff5 	bl	8018f54 <xTaskRemoveFromEventList>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d013      	beq.n	8017f98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017f70:	4b3f      	ldr	r3, [pc, #252]	; (8018070 <xQueueGenericSend+0x1f8>)
 8017f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f76:	601a      	str	r2, [r3, #0]
 8017f78:	f3bf 8f4f 	dsb	sy
 8017f7c:	f3bf 8f6f 	isb	sy
 8017f80:	e00a      	b.n	8017f98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d007      	beq.n	8017f98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017f88:	4b39      	ldr	r3, [pc, #228]	; (8018070 <xQueueGenericSend+0x1f8>)
 8017f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f8e:	601a      	str	r2, [r3, #0]
 8017f90:	f3bf 8f4f 	dsb	sy
 8017f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017f98:	f001 ff2c 	bl	8019df4 <vPortExitCritical>
				return pdPASS;
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	e063      	b.n	8018068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d103      	bne.n	8017fae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017fa6:	f001 ff25 	bl	8019df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017faa:	2300      	movs	r3, #0
 8017fac:	e05c      	b.n	8018068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d106      	bne.n	8017fc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017fb4:	f107 0314 	add.w	r3, r7, #20
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f001 f82f 	bl	801901c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017fc2:	f001 ff17 	bl	8019df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017fc6:	f000 fd9b 	bl	8018b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017fca:	f001 fee3 	bl	8019d94 <vPortEnterCritical>
 8017fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017fd4:	b25b      	sxtb	r3, r3
 8017fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fda:	d103      	bne.n	8017fe4 <xQueueGenericSend+0x16c>
 8017fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fde:	2200      	movs	r2, #0
 8017fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017fea:	b25b      	sxtb	r3, r3
 8017fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ff0:	d103      	bne.n	8017ffa <xQueueGenericSend+0x182>
 8017ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017ffa:	f001 fefb 	bl	8019df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017ffe:	1d3a      	adds	r2, r7, #4
 8018000:	f107 0314 	add.w	r3, r7, #20
 8018004:	4611      	mov	r1, r2
 8018006:	4618      	mov	r0, r3
 8018008:	f001 f81e 	bl	8019048 <xTaskCheckForTimeOut>
 801800c:	4603      	mov	r3, r0
 801800e:	2b00      	cmp	r3, #0
 8018010:	d124      	bne.n	801805c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018014:	f000 faa2 	bl	801855c <prvIsQueueFull>
 8018018:	4603      	mov	r3, r0
 801801a:	2b00      	cmp	r3, #0
 801801c:	d018      	beq.n	8018050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018020:	3310      	adds	r3, #16
 8018022:	687a      	ldr	r2, [r7, #4]
 8018024:	4611      	mov	r1, r2
 8018026:	4618      	mov	r0, r3
 8018028:	f000 ff44 	bl	8018eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801802c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801802e:	f000 fa2d 	bl	801848c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018032:	f000 fd73 	bl	8018b1c <xTaskResumeAll>
 8018036:	4603      	mov	r3, r0
 8018038:	2b00      	cmp	r3, #0
 801803a:	f47f af7c 	bne.w	8017f36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801803e:	4b0c      	ldr	r3, [pc, #48]	; (8018070 <xQueueGenericSend+0x1f8>)
 8018040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018044:	601a      	str	r2, [r3, #0]
 8018046:	f3bf 8f4f 	dsb	sy
 801804a:	f3bf 8f6f 	isb	sy
 801804e:	e772      	b.n	8017f36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018052:	f000 fa1b 	bl	801848c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018056:	f000 fd61 	bl	8018b1c <xTaskResumeAll>
 801805a:	e76c      	b.n	8017f36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801805c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801805e:	f000 fa15 	bl	801848c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018062:	f000 fd5b 	bl	8018b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018068:	4618      	mov	r0, r3
 801806a:	3738      	adds	r7, #56	; 0x38
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}
 8018070:	e000ed04 	.word	0xe000ed04

08018074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018074:	b580      	push	{r7, lr}
 8018076:	b090      	sub	sp, #64	; 0x40
 8018078:	af00      	add	r7, sp, #0
 801807a:	60f8      	str	r0, [r7, #12]
 801807c:	60b9      	str	r1, [r7, #8]
 801807e:	607a      	str	r2, [r7, #4]
 8018080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8018086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018088:	2b00      	cmp	r3, #0
 801808a:	d10a      	bne.n	80180a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018090:	f383 8811 	msr	BASEPRI, r3
 8018094:	f3bf 8f6f 	isb	sy
 8018098:	f3bf 8f4f 	dsb	sy
 801809c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801809e:	bf00      	nop
 80180a0:	e7fe      	b.n	80180a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80180a2:	68bb      	ldr	r3, [r7, #8]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d103      	bne.n	80180b0 <xQueueGenericSendFromISR+0x3c>
 80180a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d101      	bne.n	80180b4 <xQueueGenericSendFromISR+0x40>
 80180b0:	2301      	movs	r3, #1
 80180b2:	e000      	b.n	80180b6 <xQueueGenericSendFromISR+0x42>
 80180b4:	2300      	movs	r3, #0
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d10a      	bne.n	80180d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80180ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180be:	f383 8811 	msr	BASEPRI, r3
 80180c2:	f3bf 8f6f 	isb	sy
 80180c6:	f3bf 8f4f 	dsb	sy
 80180ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80180cc:	bf00      	nop
 80180ce:	e7fe      	b.n	80180ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80180d0:	683b      	ldr	r3, [r7, #0]
 80180d2:	2b02      	cmp	r3, #2
 80180d4:	d103      	bne.n	80180de <xQueueGenericSendFromISR+0x6a>
 80180d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180da:	2b01      	cmp	r3, #1
 80180dc:	d101      	bne.n	80180e2 <xQueueGenericSendFromISR+0x6e>
 80180de:	2301      	movs	r3, #1
 80180e0:	e000      	b.n	80180e4 <xQueueGenericSendFromISR+0x70>
 80180e2:	2300      	movs	r3, #0
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d10a      	bne.n	80180fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80180e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180ec:	f383 8811 	msr	BASEPRI, r3
 80180f0:	f3bf 8f6f 	isb	sy
 80180f4:	f3bf 8f4f 	dsb	sy
 80180f8:	623b      	str	r3, [r7, #32]
}
 80180fa:	bf00      	nop
 80180fc:	e7fe      	b.n	80180fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80180fe:	f001 ff2b 	bl	8019f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018102:	f3ef 8211 	mrs	r2, BASEPRI
 8018106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801810a:	f383 8811 	msr	BASEPRI, r3
 801810e:	f3bf 8f6f 	isb	sy
 8018112:	f3bf 8f4f 	dsb	sy
 8018116:	61fa      	str	r2, [r7, #28]
 8018118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801811a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801811c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018126:	429a      	cmp	r2, r3
 8018128:	d302      	bcc.n	8018130 <xQueueGenericSendFromISR+0xbc>
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	2b02      	cmp	r3, #2
 801812e:	d12f      	bne.n	8018190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801813e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018140:	683a      	ldr	r2, [r7, #0]
 8018142:	68b9      	ldr	r1, [r7, #8]
 8018144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018146:	f000 f911 	bl	801836c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801814a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018152:	d112      	bne.n	801817a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018158:	2b00      	cmp	r3, #0
 801815a:	d016      	beq.n	801818a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801815e:	3324      	adds	r3, #36	; 0x24
 8018160:	4618      	mov	r0, r3
 8018162:	f000 fef7 	bl	8018f54 <xTaskRemoveFromEventList>
 8018166:	4603      	mov	r3, r0
 8018168:	2b00      	cmp	r3, #0
 801816a:	d00e      	beq.n	801818a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d00b      	beq.n	801818a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2201      	movs	r2, #1
 8018176:	601a      	str	r2, [r3, #0]
 8018178:	e007      	b.n	801818a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801817a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801817e:	3301      	adds	r3, #1
 8018180:	b2db      	uxtb	r3, r3
 8018182:	b25a      	sxtb	r2, r3
 8018184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801818a:	2301      	movs	r3, #1
 801818c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801818e:	e001      	b.n	8018194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018190:	2300      	movs	r3, #0
 8018192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018196:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018198:	697b      	ldr	r3, [r7, #20]
 801819a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801819e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80181a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80181a2:	4618      	mov	r0, r3
 80181a4:	3740      	adds	r7, #64	; 0x40
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd80      	pop	{r7, pc}
	...

080181ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b08c      	sub	sp, #48	; 0x30
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	60f8      	str	r0, [r7, #12]
 80181b4:	60b9      	str	r1, [r7, #8]
 80181b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80181b8:	2300      	movs	r3, #0
 80181ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80181c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d10a      	bne.n	80181dc <xQueueReceive+0x30>
	__asm volatile
 80181c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ca:	f383 8811 	msr	BASEPRI, r3
 80181ce:	f3bf 8f6f 	isb	sy
 80181d2:	f3bf 8f4f 	dsb	sy
 80181d6:	623b      	str	r3, [r7, #32]
}
 80181d8:	bf00      	nop
 80181da:	e7fe      	b.n	80181da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d103      	bne.n	80181ea <xQueueReceive+0x3e>
 80181e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d101      	bne.n	80181ee <xQueueReceive+0x42>
 80181ea:	2301      	movs	r3, #1
 80181ec:	e000      	b.n	80181f0 <xQueueReceive+0x44>
 80181ee:	2300      	movs	r3, #0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d10a      	bne.n	801820a <xQueueReceive+0x5e>
	__asm volatile
 80181f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f8:	f383 8811 	msr	BASEPRI, r3
 80181fc:	f3bf 8f6f 	isb	sy
 8018200:	f3bf 8f4f 	dsb	sy
 8018204:	61fb      	str	r3, [r7, #28]
}
 8018206:	bf00      	nop
 8018208:	e7fe      	b.n	8018208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801820a:	f001 f865 	bl	80192d8 <xTaskGetSchedulerState>
 801820e:	4603      	mov	r3, r0
 8018210:	2b00      	cmp	r3, #0
 8018212:	d102      	bne.n	801821a <xQueueReceive+0x6e>
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d101      	bne.n	801821e <xQueueReceive+0x72>
 801821a:	2301      	movs	r3, #1
 801821c:	e000      	b.n	8018220 <xQueueReceive+0x74>
 801821e:	2300      	movs	r3, #0
 8018220:	2b00      	cmp	r3, #0
 8018222:	d10a      	bne.n	801823a <xQueueReceive+0x8e>
	__asm volatile
 8018224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018228:	f383 8811 	msr	BASEPRI, r3
 801822c:	f3bf 8f6f 	isb	sy
 8018230:	f3bf 8f4f 	dsb	sy
 8018234:	61bb      	str	r3, [r7, #24]
}
 8018236:	bf00      	nop
 8018238:	e7fe      	b.n	8018238 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801823a:	f001 fdab 	bl	8019d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018246:	2b00      	cmp	r3, #0
 8018248:	d01f      	beq.n	801828a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801824a:	68b9      	ldr	r1, [r7, #8]
 801824c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801824e:	f000 f8f7 	bl	8018440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018254:	1e5a      	subs	r2, r3, #1
 8018256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801825c:	691b      	ldr	r3, [r3, #16]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d00f      	beq.n	8018282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018264:	3310      	adds	r3, #16
 8018266:	4618      	mov	r0, r3
 8018268:	f000 fe74 	bl	8018f54 <xTaskRemoveFromEventList>
 801826c:	4603      	mov	r3, r0
 801826e:	2b00      	cmp	r3, #0
 8018270:	d007      	beq.n	8018282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018272:	4b3d      	ldr	r3, [pc, #244]	; (8018368 <xQueueReceive+0x1bc>)
 8018274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018278:	601a      	str	r2, [r3, #0]
 801827a:	f3bf 8f4f 	dsb	sy
 801827e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018282:	f001 fdb7 	bl	8019df4 <vPortExitCritical>
				return pdPASS;
 8018286:	2301      	movs	r3, #1
 8018288:	e069      	b.n	801835e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d103      	bne.n	8018298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018290:	f001 fdb0 	bl	8019df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018294:	2300      	movs	r3, #0
 8018296:	e062      	b.n	801835e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801829a:	2b00      	cmp	r3, #0
 801829c:	d106      	bne.n	80182ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801829e:	f107 0310 	add.w	r3, r7, #16
 80182a2:	4618      	mov	r0, r3
 80182a4:	f000 feba 	bl	801901c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80182a8:	2301      	movs	r3, #1
 80182aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80182ac:	f001 fda2 	bl	8019df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80182b0:	f000 fc26 	bl	8018b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80182b4:	f001 fd6e 	bl	8019d94 <vPortEnterCritical>
 80182b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80182be:	b25b      	sxtb	r3, r3
 80182c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182c4:	d103      	bne.n	80182ce <xQueueReceive+0x122>
 80182c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c8:	2200      	movs	r2, #0
 80182ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80182ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80182d4:	b25b      	sxtb	r3, r3
 80182d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182da:	d103      	bne.n	80182e4 <xQueueReceive+0x138>
 80182dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182de:	2200      	movs	r2, #0
 80182e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80182e4:	f001 fd86 	bl	8019df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80182e8:	1d3a      	adds	r2, r7, #4
 80182ea:	f107 0310 	add.w	r3, r7, #16
 80182ee:	4611      	mov	r1, r2
 80182f0:	4618      	mov	r0, r3
 80182f2:	f000 fea9 	bl	8019048 <xTaskCheckForTimeOut>
 80182f6:	4603      	mov	r3, r0
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d123      	bne.n	8018344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182fe:	f000 f917 	bl	8018530 <prvIsQueueEmpty>
 8018302:	4603      	mov	r3, r0
 8018304:	2b00      	cmp	r3, #0
 8018306:	d017      	beq.n	8018338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801830a:	3324      	adds	r3, #36	; 0x24
 801830c:	687a      	ldr	r2, [r7, #4]
 801830e:	4611      	mov	r1, r2
 8018310:	4618      	mov	r0, r3
 8018312:	f000 fdcf 	bl	8018eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018318:	f000 f8b8 	bl	801848c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801831c:	f000 fbfe 	bl	8018b1c <xTaskResumeAll>
 8018320:	4603      	mov	r3, r0
 8018322:	2b00      	cmp	r3, #0
 8018324:	d189      	bne.n	801823a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8018326:	4b10      	ldr	r3, [pc, #64]	; (8018368 <xQueueReceive+0x1bc>)
 8018328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801832c:	601a      	str	r2, [r3, #0]
 801832e:	f3bf 8f4f 	dsb	sy
 8018332:	f3bf 8f6f 	isb	sy
 8018336:	e780      	b.n	801823a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801833a:	f000 f8a7 	bl	801848c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801833e:	f000 fbed 	bl	8018b1c <xTaskResumeAll>
 8018342:	e77a      	b.n	801823a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018346:	f000 f8a1 	bl	801848c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801834a:	f000 fbe7 	bl	8018b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801834e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018350:	f000 f8ee 	bl	8018530 <prvIsQueueEmpty>
 8018354:	4603      	mov	r3, r0
 8018356:	2b00      	cmp	r3, #0
 8018358:	f43f af6f 	beq.w	801823a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801835c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801835e:	4618      	mov	r0, r3
 8018360:	3730      	adds	r7, #48	; 0x30
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
 8018366:	bf00      	nop
 8018368:	e000ed04 	.word	0xe000ed04

0801836c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b086      	sub	sp, #24
 8018370:	af00      	add	r7, sp, #0
 8018372:	60f8      	str	r0, [r7, #12]
 8018374:	60b9      	str	r1, [r7, #8]
 8018376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018378:	2300      	movs	r3, #0
 801837a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018386:	2b00      	cmp	r3, #0
 8018388:	d10d      	bne.n	80183a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d14d      	bne.n	801842e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	689b      	ldr	r3, [r3, #8]
 8018396:	4618      	mov	r0, r3
 8018398:	f000 ffbc 	bl	8019314 <xTaskPriorityDisinherit>
 801839c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	2200      	movs	r2, #0
 80183a2:	609a      	str	r2, [r3, #8]
 80183a4:	e043      	b.n	801842e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d119      	bne.n	80183e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	6858      	ldr	r0, [r3, #4]
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183b4:	461a      	mov	r2, r3
 80183b6:	68b9      	ldr	r1, [r7, #8]
 80183b8:	f003 f8aa 	bl	801b510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	685a      	ldr	r2, [r3, #4]
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183c4:	441a      	add	r2, r3
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	685a      	ldr	r2, [r3, #4]
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	689b      	ldr	r3, [r3, #8]
 80183d2:	429a      	cmp	r2, r3
 80183d4:	d32b      	bcc.n	801842e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	681a      	ldr	r2, [r3, #0]
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	605a      	str	r2, [r3, #4]
 80183de:	e026      	b.n	801842e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	68d8      	ldr	r0, [r3, #12]
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183e8:	461a      	mov	r2, r3
 80183ea:	68b9      	ldr	r1, [r7, #8]
 80183ec:	f003 f890 	bl	801b510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	68da      	ldr	r2, [r3, #12]
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183f8:	425b      	negs	r3, r3
 80183fa:	441a      	add	r2, r3
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	68da      	ldr	r2, [r3, #12]
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	429a      	cmp	r2, r3
 801840a:	d207      	bcs.n	801841c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	689a      	ldr	r2, [r3, #8]
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018414:	425b      	negs	r3, r3
 8018416:	441a      	add	r2, r3
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2b02      	cmp	r3, #2
 8018420:	d105      	bne.n	801842e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018422:	693b      	ldr	r3, [r7, #16]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d002      	beq.n	801842e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018428:	693b      	ldr	r3, [r7, #16]
 801842a:	3b01      	subs	r3, #1
 801842c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	1c5a      	adds	r2, r3, #1
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018436:	697b      	ldr	r3, [r7, #20]
}
 8018438:	4618      	mov	r0, r3
 801843a:	3718      	adds	r7, #24
 801843c:	46bd      	mov	sp, r7
 801843e:	bd80      	pop	{r7, pc}

08018440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b082      	sub	sp, #8
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801844e:	2b00      	cmp	r3, #0
 8018450:	d018      	beq.n	8018484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	68da      	ldr	r2, [r3, #12]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801845a:	441a      	add	r2, r3
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	68da      	ldr	r2, [r3, #12]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	689b      	ldr	r3, [r3, #8]
 8018468:	429a      	cmp	r2, r3
 801846a:	d303      	bcc.n	8018474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681a      	ldr	r2, [r3, #0]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	68d9      	ldr	r1, [r3, #12]
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801847c:	461a      	mov	r2, r3
 801847e:	6838      	ldr	r0, [r7, #0]
 8018480:	f003 f846 	bl	801b510 <memcpy>
	}
}
 8018484:	bf00      	nop
 8018486:	3708      	adds	r7, #8
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}

0801848c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b084      	sub	sp, #16
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018494:	f001 fc7e 	bl	8019d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801849e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80184a0:	e011      	b.n	80184c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d012      	beq.n	80184d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	3324      	adds	r3, #36	; 0x24
 80184ae:	4618      	mov	r0, r3
 80184b0:	f000 fd50 	bl	8018f54 <xTaskRemoveFromEventList>
 80184b4:	4603      	mov	r3, r0
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d001      	beq.n	80184be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80184ba:	f000 fe27 	bl	801910c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80184be:	7bfb      	ldrb	r3, [r7, #15]
 80184c0:	3b01      	subs	r3, #1
 80184c2:	b2db      	uxtb	r3, r3
 80184c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80184c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	dce9      	bgt.n	80184a2 <prvUnlockQueue+0x16>
 80184ce:	e000      	b.n	80184d2 <prvUnlockQueue+0x46>
					break;
 80184d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	22ff      	movs	r2, #255	; 0xff
 80184d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80184da:	f001 fc8b 	bl	8019df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80184de:	f001 fc59 	bl	8019d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80184e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80184ea:	e011      	b.n	8018510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	691b      	ldr	r3, [r3, #16]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d012      	beq.n	801851a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	3310      	adds	r3, #16
 80184f8:	4618      	mov	r0, r3
 80184fa:	f000 fd2b 	bl	8018f54 <xTaskRemoveFromEventList>
 80184fe:	4603      	mov	r3, r0
 8018500:	2b00      	cmp	r3, #0
 8018502:	d001      	beq.n	8018508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018504:	f000 fe02 	bl	801910c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018508:	7bbb      	ldrb	r3, [r7, #14]
 801850a:	3b01      	subs	r3, #1
 801850c:	b2db      	uxtb	r3, r3
 801850e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018514:	2b00      	cmp	r3, #0
 8018516:	dce9      	bgt.n	80184ec <prvUnlockQueue+0x60>
 8018518:	e000      	b.n	801851c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801851a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	22ff      	movs	r2, #255	; 0xff
 8018520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018524:	f001 fc66 	bl	8019df4 <vPortExitCritical>
}
 8018528:	bf00      	nop
 801852a:	3710      	adds	r7, #16
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}

08018530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b084      	sub	sp, #16
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018538:	f001 fc2c 	bl	8019d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018540:	2b00      	cmp	r3, #0
 8018542:	d102      	bne.n	801854a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018544:	2301      	movs	r3, #1
 8018546:	60fb      	str	r3, [r7, #12]
 8018548:	e001      	b.n	801854e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801854a:	2300      	movs	r3, #0
 801854c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801854e:	f001 fc51 	bl	8019df4 <vPortExitCritical>

	return xReturn;
 8018552:	68fb      	ldr	r3, [r7, #12]
}
 8018554:	4618      	mov	r0, r3
 8018556:	3710      	adds	r7, #16
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}

0801855c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b084      	sub	sp, #16
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018564:	f001 fc16 	bl	8019d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018570:	429a      	cmp	r2, r3
 8018572:	d102      	bne.n	801857a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018574:	2301      	movs	r3, #1
 8018576:	60fb      	str	r3, [r7, #12]
 8018578:	e001      	b.n	801857e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801857a:	2300      	movs	r3, #0
 801857c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801857e:	f001 fc39 	bl	8019df4 <vPortExitCritical>

	return xReturn;
 8018582:	68fb      	ldr	r3, [r7, #12]
}
 8018584:	4618      	mov	r0, r3
 8018586:	3710      	adds	r7, #16
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}

0801858c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801858c:	b480      	push	{r7}
 801858e:	b085      	sub	sp, #20
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018596:	2300      	movs	r3, #0
 8018598:	60fb      	str	r3, [r7, #12]
 801859a:	e014      	b.n	80185c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801859c:	4a0f      	ldr	r2, [pc, #60]	; (80185dc <vQueueAddToRegistry+0x50>)
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d10b      	bne.n	80185c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80185a8:	490c      	ldr	r1, [pc, #48]	; (80185dc <vQueueAddToRegistry+0x50>)
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	683a      	ldr	r2, [r7, #0]
 80185ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80185b2:	4a0a      	ldr	r2, [pc, #40]	; (80185dc <vQueueAddToRegistry+0x50>)
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	00db      	lsls	r3, r3, #3
 80185b8:	4413      	add	r3, r2
 80185ba:	687a      	ldr	r2, [r7, #4]
 80185bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80185be:	e006      	b.n	80185ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	3301      	adds	r3, #1
 80185c4:	60fb      	str	r3, [r7, #12]
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	2b07      	cmp	r3, #7
 80185ca:	d9e7      	bls.n	801859c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80185cc:	bf00      	nop
 80185ce:	bf00      	nop
 80185d0:	3714      	adds	r7, #20
 80185d2:	46bd      	mov	sp, r7
 80185d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d8:	4770      	bx	lr
 80185da:	bf00      	nop
 80185dc:	20001270 	.word	0x20001270

080185e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b086      	sub	sp, #24
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	60f8      	str	r0, [r7, #12]
 80185e8:	60b9      	str	r1, [r7, #8]
 80185ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80185f0:	f001 fbd0 	bl	8019d94 <vPortEnterCritical>
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80185fa:	b25b      	sxtb	r3, r3
 80185fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018600:	d103      	bne.n	801860a <vQueueWaitForMessageRestricted+0x2a>
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	2200      	movs	r2, #0
 8018606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018610:	b25b      	sxtb	r3, r3
 8018612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018616:	d103      	bne.n	8018620 <vQueueWaitForMessageRestricted+0x40>
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	2200      	movs	r2, #0
 801861c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018620:	f001 fbe8 	bl	8019df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018628:	2b00      	cmp	r3, #0
 801862a:	d106      	bne.n	801863a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	3324      	adds	r3, #36	; 0x24
 8018630:	687a      	ldr	r2, [r7, #4]
 8018632:	68b9      	ldr	r1, [r7, #8]
 8018634:	4618      	mov	r0, r3
 8018636:	f000 fc61 	bl	8018efc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801863a:	6978      	ldr	r0, [r7, #20]
 801863c:	f7ff ff26 	bl	801848c <prvUnlockQueue>
	}
 8018640:	bf00      	nop
 8018642:	3718      	adds	r7, #24
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}

08018648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018648:	b580      	push	{r7, lr}
 801864a:	b08e      	sub	sp, #56	; 0x38
 801864c:	af04      	add	r7, sp, #16
 801864e:	60f8      	str	r0, [r7, #12]
 8018650:	60b9      	str	r1, [r7, #8]
 8018652:	607a      	str	r2, [r7, #4]
 8018654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018658:	2b00      	cmp	r3, #0
 801865a:	d10a      	bne.n	8018672 <xTaskCreateStatic+0x2a>
	__asm volatile
 801865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018660:	f383 8811 	msr	BASEPRI, r3
 8018664:	f3bf 8f6f 	isb	sy
 8018668:	f3bf 8f4f 	dsb	sy
 801866c:	623b      	str	r3, [r7, #32]
}
 801866e:	bf00      	nop
 8018670:	e7fe      	b.n	8018670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018674:	2b00      	cmp	r3, #0
 8018676:	d10a      	bne.n	801868e <xTaskCreateStatic+0x46>
	__asm volatile
 8018678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801867c:	f383 8811 	msr	BASEPRI, r3
 8018680:	f3bf 8f6f 	isb	sy
 8018684:	f3bf 8f4f 	dsb	sy
 8018688:	61fb      	str	r3, [r7, #28]
}
 801868a:	bf00      	nop
 801868c:	e7fe      	b.n	801868c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801868e:	23bc      	movs	r3, #188	; 0xbc
 8018690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018692:	693b      	ldr	r3, [r7, #16]
 8018694:	2bbc      	cmp	r3, #188	; 0xbc
 8018696:	d00a      	beq.n	80186ae <xTaskCreateStatic+0x66>
	__asm volatile
 8018698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801869c:	f383 8811 	msr	BASEPRI, r3
 80186a0:	f3bf 8f6f 	isb	sy
 80186a4:	f3bf 8f4f 	dsb	sy
 80186a8:	61bb      	str	r3, [r7, #24]
}
 80186aa:	bf00      	nop
 80186ac:	e7fe      	b.n	80186ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80186ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80186b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d01e      	beq.n	80186f4 <xTaskCreateStatic+0xac>
 80186b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d01b      	beq.n	80186f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80186bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80186c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80186c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80186c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186c8:	2202      	movs	r2, #2
 80186ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80186ce:	2300      	movs	r3, #0
 80186d0:	9303      	str	r3, [sp, #12]
 80186d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d4:	9302      	str	r3, [sp, #8]
 80186d6:	f107 0314 	add.w	r3, r7, #20
 80186da:	9301      	str	r3, [sp, #4]
 80186dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186de:	9300      	str	r3, [sp, #0]
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	687a      	ldr	r2, [r7, #4]
 80186e4:	68b9      	ldr	r1, [r7, #8]
 80186e6:	68f8      	ldr	r0, [r7, #12]
 80186e8:	f000 f850 	bl	801878c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80186ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186ee:	f000 f8f3 	bl	80188d8 <prvAddNewTaskToReadyList>
 80186f2:	e001      	b.n	80186f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80186f4:	2300      	movs	r3, #0
 80186f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80186f8:	697b      	ldr	r3, [r7, #20]
	}
 80186fa:	4618      	mov	r0, r3
 80186fc:	3728      	adds	r7, #40	; 0x28
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}

08018702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018702:	b580      	push	{r7, lr}
 8018704:	b08c      	sub	sp, #48	; 0x30
 8018706:	af04      	add	r7, sp, #16
 8018708:	60f8      	str	r0, [r7, #12]
 801870a:	60b9      	str	r1, [r7, #8]
 801870c:	603b      	str	r3, [r7, #0]
 801870e:	4613      	mov	r3, r2
 8018710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018712:	88fb      	ldrh	r3, [r7, #6]
 8018714:	009b      	lsls	r3, r3, #2
 8018716:	4618      	mov	r0, r3
 8018718:	f001 fc5e 	bl	8019fd8 <pvPortMalloc>
 801871c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801871e:	697b      	ldr	r3, [r7, #20]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d00e      	beq.n	8018742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018724:	20bc      	movs	r0, #188	; 0xbc
 8018726:	f001 fc57 	bl	8019fd8 <pvPortMalloc>
 801872a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d003      	beq.n	801873a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018732:	69fb      	ldr	r3, [r7, #28]
 8018734:	697a      	ldr	r2, [r7, #20]
 8018736:	631a      	str	r2, [r3, #48]	; 0x30
 8018738:	e005      	b.n	8018746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801873a:	6978      	ldr	r0, [r7, #20]
 801873c:	f001 fd18 	bl	801a170 <vPortFree>
 8018740:	e001      	b.n	8018746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018742:	2300      	movs	r3, #0
 8018744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018746:	69fb      	ldr	r3, [r7, #28]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d017      	beq.n	801877c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801874c:	69fb      	ldr	r3, [r7, #28]
 801874e:	2200      	movs	r2, #0
 8018750:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018754:	88fa      	ldrh	r2, [r7, #6]
 8018756:	2300      	movs	r3, #0
 8018758:	9303      	str	r3, [sp, #12]
 801875a:	69fb      	ldr	r3, [r7, #28]
 801875c:	9302      	str	r3, [sp, #8]
 801875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018760:	9301      	str	r3, [sp, #4]
 8018762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018764:	9300      	str	r3, [sp, #0]
 8018766:	683b      	ldr	r3, [r7, #0]
 8018768:	68b9      	ldr	r1, [r7, #8]
 801876a:	68f8      	ldr	r0, [r7, #12]
 801876c:	f000 f80e 	bl	801878c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018770:	69f8      	ldr	r0, [r7, #28]
 8018772:	f000 f8b1 	bl	80188d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018776:	2301      	movs	r3, #1
 8018778:	61bb      	str	r3, [r7, #24]
 801877a:	e002      	b.n	8018782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801877c:	f04f 33ff 	mov.w	r3, #4294967295
 8018780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018782:	69bb      	ldr	r3, [r7, #24]
	}
 8018784:	4618      	mov	r0, r3
 8018786:	3720      	adds	r7, #32
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}

0801878c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b088      	sub	sp, #32
 8018790:	af00      	add	r7, sp, #0
 8018792:	60f8      	str	r0, [r7, #12]
 8018794:	60b9      	str	r1, [r7, #8]
 8018796:	607a      	str	r2, [r7, #4]
 8018798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801879c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	009b      	lsls	r3, r3, #2
 80187a2:	461a      	mov	r2, r3
 80187a4:	21a5      	movs	r1, #165	; 0xa5
 80187a6:	f002 fec1 	bl	801b52c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80187aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80187b4:	3b01      	subs	r3, #1
 80187b6:	009b      	lsls	r3, r3, #2
 80187b8:	4413      	add	r3, r2
 80187ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80187bc:	69bb      	ldr	r3, [r7, #24]
 80187be:	f023 0307 	bic.w	r3, r3, #7
 80187c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80187c4:	69bb      	ldr	r3, [r7, #24]
 80187c6:	f003 0307 	and.w	r3, r3, #7
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d00a      	beq.n	80187e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80187ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187d2:	f383 8811 	msr	BASEPRI, r3
 80187d6:	f3bf 8f6f 	isb	sy
 80187da:	f3bf 8f4f 	dsb	sy
 80187de:	617b      	str	r3, [r7, #20]
}
 80187e0:	bf00      	nop
 80187e2:	e7fe      	b.n	80187e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80187e4:	68bb      	ldr	r3, [r7, #8]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d01f      	beq.n	801882a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80187ea:	2300      	movs	r3, #0
 80187ec:	61fb      	str	r3, [r7, #28]
 80187ee:	e012      	b.n	8018816 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80187f0:	68ba      	ldr	r2, [r7, #8]
 80187f2:	69fb      	ldr	r3, [r7, #28]
 80187f4:	4413      	add	r3, r2
 80187f6:	7819      	ldrb	r1, [r3, #0]
 80187f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187fa:	69fb      	ldr	r3, [r7, #28]
 80187fc:	4413      	add	r3, r2
 80187fe:	3334      	adds	r3, #52	; 0x34
 8018800:	460a      	mov	r2, r1
 8018802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018804:	68ba      	ldr	r2, [r7, #8]
 8018806:	69fb      	ldr	r3, [r7, #28]
 8018808:	4413      	add	r3, r2
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d006      	beq.n	801881e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018810:	69fb      	ldr	r3, [r7, #28]
 8018812:	3301      	adds	r3, #1
 8018814:	61fb      	str	r3, [r7, #28]
 8018816:	69fb      	ldr	r3, [r7, #28]
 8018818:	2b0f      	cmp	r3, #15
 801881a:	d9e9      	bls.n	80187f0 <prvInitialiseNewTask+0x64>
 801881c:	e000      	b.n	8018820 <prvInitialiseNewTask+0x94>
			{
				break;
 801881e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018822:	2200      	movs	r2, #0
 8018824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018828:	e003      	b.n	8018832 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801882c:	2200      	movs	r2, #0
 801882e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018834:	2b37      	cmp	r3, #55	; 0x37
 8018836:	d901      	bls.n	801883c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018838:	2337      	movs	r3, #55	; 0x37
 801883a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801883e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801884a:	2200      	movs	r2, #0
 801884c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018850:	3304      	adds	r3, #4
 8018852:	4618      	mov	r0, r3
 8018854:	f7ff f978 	bl	8017b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801885a:	3318      	adds	r3, #24
 801885c:	4618      	mov	r0, r3
 801885e:	f7ff f973 	bl	8017b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801886a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801887a:	2200      	movs	r2, #0
 801887c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018882:	2200      	movs	r2, #0
 8018884:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8018888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801888a:	3354      	adds	r3, #84	; 0x54
 801888c:	2260      	movs	r2, #96	; 0x60
 801888e:	2100      	movs	r1, #0
 8018890:	4618      	mov	r0, r3
 8018892:	f002 fe4b 	bl	801b52c <memset>
 8018896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018898:	4a0c      	ldr	r2, [pc, #48]	; (80188cc <prvInitialiseNewTask+0x140>)
 801889a:	659a      	str	r2, [r3, #88]	; 0x58
 801889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801889e:	4a0c      	ldr	r2, [pc, #48]	; (80188d0 <prvInitialiseNewTask+0x144>)
 80188a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80188a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a4:	4a0b      	ldr	r2, [pc, #44]	; (80188d4 <prvInitialiseNewTask+0x148>)
 80188a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80188a8:	683a      	ldr	r2, [r7, #0]
 80188aa:	68f9      	ldr	r1, [r7, #12]
 80188ac:	69b8      	ldr	r0, [r7, #24]
 80188ae:	f001 f941 	bl	8019b34 <pxPortInitialiseStack>
 80188b2:	4602      	mov	r2, r0
 80188b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80188b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d002      	beq.n	80188c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80188be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188c4:	bf00      	nop
 80188c6:	3720      	adds	r7, #32
 80188c8:	46bd      	mov	sp, r7
 80188ca:	bd80      	pop	{r7, pc}
 80188cc:	0801f854 	.word	0x0801f854
 80188d0:	0801f874 	.word	0x0801f874
 80188d4:	0801f834 	.word	0x0801f834

080188d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b082      	sub	sp, #8
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80188e0:	f001 fa58 	bl	8019d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80188e4:	4b2d      	ldr	r3, [pc, #180]	; (801899c <prvAddNewTaskToReadyList+0xc4>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	3301      	adds	r3, #1
 80188ea:	4a2c      	ldr	r2, [pc, #176]	; (801899c <prvAddNewTaskToReadyList+0xc4>)
 80188ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80188ee:	4b2c      	ldr	r3, [pc, #176]	; (80189a0 <prvAddNewTaskToReadyList+0xc8>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d109      	bne.n	801890a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80188f6:	4a2a      	ldr	r2, [pc, #168]	; (80189a0 <prvAddNewTaskToReadyList+0xc8>)
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80188fc:	4b27      	ldr	r3, [pc, #156]	; (801899c <prvAddNewTaskToReadyList+0xc4>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	2b01      	cmp	r3, #1
 8018902:	d110      	bne.n	8018926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018904:	f000 fc26 	bl	8019154 <prvInitialiseTaskLists>
 8018908:	e00d      	b.n	8018926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801890a:	4b26      	ldr	r3, [pc, #152]	; (80189a4 <prvAddNewTaskToReadyList+0xcc>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d109      	bne.n	8018926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018912:	4b23      	ldr	r3, [pc, #140]	; (80189a0 <prvAddNewTaskToReadyList+0xc8>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801891c:	429a      	cmp	r2, r3
 801891e:	d802      	bhi.n	8018926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018920:	4a1f      	ldr	r2, [pc, #124]	; (80189a0 <prvAddNewTaskToReadyList+0xc8>)
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018926:	4b20      	ldr	r3, [pc, #128]	; (80189a8 <prvAddNewTaskToReadyList+0xd0>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	3301      	adds	r3, #1
 801892c:	4a1e      	ldr	r2, [pc, #120]	; (80189a8 <prvAddNewTaskToReadyList+0xd0>)
 801892e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018930:	4b1d      	ldr	r3, [pc, #116]	; (80189a8 <prvAddNewTaskToReadyList+0xd0>)
 8018932:	681a      	ldr	r2, [r3, #0]
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801893c:	4b1b      	ldr	r3, [pc, #108]	; (80189ac <prvAddNewTaskToReadyList+0xd4>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	429a      	cmp	r2, r3
 8018942:	d903      	bls.n	801894c <prvAddNewTaskToReadyList+0x74>
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018948:	4a18      	ldr	r2, [pc, #96]	; (80189ac <prvAddNewTaskToReadyList+0xd4>)
 801894a:	6013      	str	r3, [r2, #0]
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018950:	4613      	mov	r3, r2
 8018952:	009b      	lsls	r3, r3, #2
 8018954:	4413      	add	r3, r2
 8018956:	009b      	lsls	r3, r3, #2
 8018958:	4a15      	ldr	r2, [pc, #84]	; (80189b0 <prvAddNewTaskToReadyList+0xd8>)
 801895a:	441a      	add	r2, r3
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	3304      	adds	r3, #4
 8018960:	4619      	mov	r1, r3
 8018962:	4610      	mov	r0, r2
 8018964:	f7ff f8fd 	bl	8017b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018968:	f001 fa44 	bl	8019df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801896c:	4b0d      	ldr	r3, [pc, #52]	; (80189a4 <prvAddNewTaskToReadyList+0xcc>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d00e      	beq.n	8018992 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018974:	4b0a      	ldr	r3, [pc, #40]	; (80189a0 <prvAddNewTaskToReadyList+0xc8>)
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801897e:	429a      	cmp	r2, r3
 8018980:	d207      	bcs.n	8018992 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018982:	4b0c      	ldr	r3, [pc, #48]	; (80189b4 <prvAddNewTaskToReadyList+0xdc>)
 8018984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018988:	601a      	str	r2, [r3, #0]
 801898a:	f3bf 8f4f 	dsb	sy
 801898e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018992:	bf00      	nop
 8018994:	3708      	adds	r7, #8
 8018996:	46bd      	mov	sp, r7
 8018998:	bd80      	pop	{r7, pc}
 801899a:	bf00      	nop
 801899c:	20001784 	.word	0x20001784
 80189a0:	200012b0 	.word	0x200012b0
 80189a4:	20001790 	.word	0x20001790
 80189a8:	200017a0 	.word	0x200017a0
 80189ac:	2000178c 	.word	0x2000178c
 80189b0:	200012b4 	.word	0x200012b4
 80189b4:	e000ed04 	.word	0xe000ed04

080189b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b084      	sub	sp, #16
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80189c0:	2300      	movs	r3, #0
 80189c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d017      	beq.n	80189fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80189ca:	4b13      	ldr	r3, [pc, #76]	; (8018a18 <vTaskDelay+0x60>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d00a      	beq.n	80189e8 <vTaskDelay+0x30>
	__asm volatile
 80189d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189d6:	f383 8811 	msr	BASEPRI, r3
 80189da:	f3bf 8f6f 	isb	sy
 80189de:	f3bf 8f4f 	dsb	sy
 80189e2:	60bb      	str	r3, [r7, #8]
}
 80189e4:	bf00      	nop
 80189e6:	e7fe      	b.n	80189e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80189e8:	f000 f88a 	bl	8018b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80189ec:	2100      	movs	r1, #0
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f000 fcfe 	bl	80193f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80189f4:	f000 f892 	bl	8018b1c <xTaskResumeAll>
 80189f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d107      	bne.n	8018a10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018a00:	4b06      	ldr	r3, [pc, #24]	; (8018a1c <vTaskDelay+0x64>)
 8018a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a06:	601a      	str	r2, [r3, #0]
 8018a08:	f3bf 8f4f 	dsb	sy
 8018a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018a10:	bf00      	nop
 8018a12:	3710      	adds	r7, #16
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd80      	pop	{r7, pc}
 8018a18:	200017ac 	.word	0x200017ac
 8018a1c:	e000ed04 	.word	0xe000ed04

08018a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b08a      	sub	sp, #40	; 0x28
 8018a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018a26:	2300      	movs	r3, #0
 8018a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018a2e:	463a      	mov	r2, r7
 8018a30:	1d39      	adds	r1, r7, #4
 8018a32:	f107 0308 	add.w	r3, r7, #8
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7ff f832 	bl	8017aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018a3c:	6839      	ldr	r1, [r7, #0]
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	68ba      	ldr	r2, [r7, #8]
 8018a42:	9202      	str	r2, [sp, #8]
 8018a44:	9301      	str	r3, [sp, #4]
 8018a46:	2300      	movs	r3, #0
 8018a48:	9300      	str	r3, [sp, #0]
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	460a      	mov	r2, r1
 8018a4e:	4924      	ldr	r1, [pc, #144]	; (8018ae0 <vTaskStartScheduler+0xc0>)
 8018a50:	4824      	ldr	r0, [pc, #144]	; (8018ae4 <vTaskStartScheduler+0xc4>)
 8018a52:	f7ff fdf9 	bl	8018648 <xTaskCreateStatic>
 8018a56:	4603      	mov	r3, r0
 8018a58:	4a23      	ldr	r2, [pc, #140]	; (8018ae8 <vTaskStartScheduler+0xc8>)
 8018a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018a5c:	4b22      	ldr	r3, [pc, #136]	; (8018ae8 <vTaskStartScheduler+0xc8>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d002      	beq.n	8018a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018a64:	2301      	movs	r3, #1
 8018a66:	617b      	str	r3, [r7, #20]
 8018a68:	e001      	b.n	8018a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	2b01      	cmp	r3, #1
 8018a72:	d102      	bne.n	8018a7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018a74:	f000 fd10 	bl	8019498 <xTimerCreateTimerTask>
 8018a78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018a7a:	697b      	ldr	r3, [r7, #20]
 8018a7c:	2b01      	cmp	r3, #1
 8018a7e:	d11b      	bne.n	8018ab8 <vTaskStartScheduler+0x98>
	__asm volatile
 8018a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a84:	f383 8811 	msr	BASEPRI, r3
 8018a88:	f3bf 8f6f 	isb	sy
 8018a8c:	f3bf 8f4f 	dsb	sy
 8018a90:	613b      	str	r3, [r7, #16]
}
 8018a92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018a94:	4b15      	ldr	r3, [pc, #84]	; (8018aec <vTaskStartScheduler+0xcc>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	3354      	adds	r3, #84	; 0x54
 8018a9a:	4a15      	ldr	r2, [pc, #84]	; (8018af0 <vTaskStartScheduler+0xd0>)
 8018a9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018a9e:	4b15      	ldr	r3, [pc, #84]	; (8018af4 <vTaskStartScheduler+0xd4>)
 8018aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8018aa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018aa6:	4b14      	ldr	r3, [pc, #80]	; (8018af8 <vTaskStartScheduler+0xd8>)
 8018aa8:	2201      	movs	r2, #1
 8018aaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018aac:	4b13      	ldr	r3, [pc, #76]	; (8018afc <vTaskStartScheduler+0xdc>)
 8018aae:	2200      	movs	r2, #0
 8018ab0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018ab2:	f001 f8cd 	bl	8019c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018ab6:	e00e      	b.n	8018ad6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018ab8:	697b      	ldr	r3, [r7, #20]
 8018aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018abe:	d10a      	bne.n	8018ad6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8018ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac4:	f383 8811 	msr	BASEPRI, r3
 8018ac8:	f3bf 8f6f 	isb	sy
 8018acc:	f3bf 8f4f 	dsb	sy
 8018ad0:	60fb      	str	r3, [r7, #12]
}
 8018ad2:	bf00      	nop
 8018ad4:	e7fe      	b.n	8018ad4 <vTaskStartScheduler+0xb4>
}
 8018ad6:	bf00      	nop
 8018ad8:	3718      	adds	r7, #24
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}
 8018ade:	bf00      	nop
 8018ae0:	0801f1a0 	.word	0x0801f1a0
 8018ae4:	08019125 	.word	0x08019125
 8018ae8:	200017a8 	.word	0x200017a8
 8018aec:	200012b0 	.word	0x200012b0
 8018af0:	20000010 	.word	0x20000010
 8018af4:	200017a4 	.word	0x200017a4
 8018af8:	20001790 	.word	0x20001790
 8018afc:	20001788 	.word	0x20001788

08018b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018b00:	b480      	push	{r7}
 8018b02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018b04:	4b04      	ldr	r3, [pc, #16]	; (8018b18 <vTaskSuspendAll+0x18>)
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	3301      	adds	r3, #1
 8018b0a:	4a03      	ldr	r2, [pc, #12]	; (8018b18 <vTaskSuspendAll+0x18>)
 8018b0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018b0e:	bf00      	nop
 8018b10:	46bd      	mov	sp, r7
 8018b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b16:	4770      	bx	lr
 8018b18:	200017ac 	.word	0x200017ac

08018b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b084      	sub	sp, #16
 8018b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018b22:	2300      	movs	r3, #0
 8018b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018b26:	2300      	movs	r3, #0
 8018b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018b2a:	4b42      	ldr	r3, [pc, #264]	; (8018c34 <xTaskResumeAll+0x118>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d10a      	bne.n	8018b48 <xTaskResumeAll+0x2c>
	__asm volatile
 8018b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b36:	f383 8811 	msr	BASEPRI, r3
 8018b3a:	f3bf 8f6f 	isb	sy
 8018b3e:	f3bf 8f4f 	dsb	sy
 8018b42:	603b      	str	r3, [r7, #0]
}
 8018b44:	bf00      	nop
 8018b46:	e7fe      	b.n	8018b46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018b48:	f001 f924 	bl	8019d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018b4c:	4b39      	ldr	r3, [pc, #228]	; (8018c34 <xTaskResumeAll+0x118>)
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	3b01      	subs	r3, #1
 8018b52:	4a38      	ldr	r2, [pc, #224]	; (8018c34 <xTaskResumeAll+0x118>)
 8018b54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b56:	4b37      	ldr	r3, [pc, #220]	; (8018c34 <xTaskResumeAll+0x118>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d162      	bne.n	8018c24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018b5e:	4b36      	ldr	r3, [pc, #216]	; (8018c38 <xTaskResumeAll+0x11c>)
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d05e      	beq.n	8018c24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018b66:	e02f      	b.n	8018bc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b68:	4b34      	ldr	r3, [pc, #208]	; (8018c3c <xTaskResumeAll+0x120>)
 8018b6a:	68db      	ldr	r3, [r3, #12]
 8018b6c:	68db      	ldr	r3, [r3, #12]
 8018b6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	3318      	adds	r3, #24
 8018b74:	4618      	mov	r0, r3
 8018b76:	f7ff f851 	bl	8017c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	3304      	adds	r3, #4
 8018b7e:	4618      	mov	r0, r3
 8018b80:	f7ff f84c 	bl	8017c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b88:	4b2d      	ldr	r3, [pc, #180]	; (8018c40 <xTaskResumeAll+0x124>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	d903      	bls.n	8018b98 <xTaskResumeAll+0x7c>
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b94:	4a2a      	ldr	r2, [pc, #168]	; (8018c40 <xTaskResumeAll+0x124>)
 8018b96:	6013      	str	r3, [r2, #0]
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b9c:	4613      	mov	r3, r2
 8018b9e:	009b      	lsls	r3, r3, #2
 8018ba0:	4413      	add	r3, r2
 8018ba2:	009b      	lsls	r3, r3, #2
 8018ba4:	4a27      	ldr	r2, [pc, #156]	; (8018c44 <xTaskResumeAll+0x128>)
 8018ba6:	441a      	add	r2, r3
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	3304      	adds	r3, #4
 8018bac:	4619      	mov	r1, r3
 8018bae:	4610      	mov	r0, r2
 8018bb0:	f7fe ffd7 	bl	8017b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bb8:	4b23      	ldr	r3, [pc, #140]	; (8018c48 <xTaskResumeAll+0x12c>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bbe:	429a      	cmp	r2, r3
 8018bc0:	d302      	bcc.n	8018bc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018bc2:	4b22      	ldr	r3, [pc, #136]	; (8018c4c <xTaskResumeAll+0x130>)
 8018bc4:	2201      	movs	r2, #1
 8018bc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018bc8:	4b1c      	ldr	r3, [pc, #112]	; (8018c3c <xTaskResumeAll+0x120>)
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d1cb      	bne.n	8018b68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d001      	beq.n	8018bda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018bd6:	f000 fb5f 	bl	8019298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018bda:	4b1d      	ldr	r3, [pc, #116]	; (8018c50 <xTaskResumeAll+0x134>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d010      	beq.n	8018c08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018be6:	f000 f847 	bl	8018c78 <xTaskIncrementTick>
 8018bea:	4603      	mov	r3, r0
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d002      	beq.n	8018bf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018bf0:	4b16      	ldr	r3, [pc, #88]	; (8018c4c <xTaskResumeAll+0x130>)
 8018bf2:	2201      	movs	r2, #1
 8018bf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	3b01      	subs	r3, #1
 8018bfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d1f1      	bne.n	8018be6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018c02:	4b13      	ldr	r3, [pc, #76]	; (8018c50 <xTaskResumeAll+0x134>)
 8018c04:	2200      	movs	r2, #0
 8018c06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018c08:	4b10      	ldr	r3, [pc, #64]	; (8018c4c <xTaskResumeAll+0x130>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d009      	beq.n	8018c24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018c10:	2301      	movs	r3, #1
 8018c12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018c14:	4b0f      	ldr	r3, [pc, #60]	; (8018c54 <xTaskResumeAll+0x138>)
 8018c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c1a:	601a      	str	r2, [r3, #0]
 8018c1c:	f3bf 8f4f 	dsb	sy
 8018c20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018c24:	f001 f8e6 	bl	8019df4 <vPortExitCritical>

	return xAlreadyYielded;
 8018c28:	68bb      	ldr	r3, [r7, #8]
}
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	3710      	adds	r7, #16
 8018c2e:	46bd      	mov	sp, r7
 8018c30:	bd80      	pop	{r7, pc}
 8018c32:	bf00      	nop
 8018c34:	200017ac 	.word	0x200017ac
 8018c38:	20001784 	.word	0x20001784
 8018c3c:	20001744 	.word	0x20001744
 8018c40:	2000178c 	.word	0x2000178c
 8018c44:	200012b4 	.word	0x200012b4
 8018c48:	200012b0 	.word	0x200012b0
 8018c4c:	20001798 	.word	0x20001798
 8018c50:	20001794 	.word	0x20001794
 8018c54:	e000ed04 	.word	0xe000ed04

08018c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018c58:	b480      	push	{r7}
 8018c5a:	b083      	sub	sp, #12
 8018c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018c5e:	4b05      	ldr	r3, [pc, #20]	; (8018c74 <xTaskGetTickCount+0x1c>)
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018c64:	687b      	ldr	r3, [r7, #4]
}
 8018c66:	4618      	mov	r0, r3
 8018c68:	370c      	adds	r7, #12
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c70:	4770      	bx	lr
 8018c72:	bf00      	nop
 8018c74:	20001788 	.word	0x20001788

08018c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b086      	sub	sp, #24
 8018c7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018c82:	4b4f      	ldr	r3, [pc, #316]	; (8018dc0 <xTaskIncrementTick+0x148>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	f040 808f 	bne.w	8018daa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018c8c:	4b4d      	ldr	r3, [pc, #308]	; (8018dc4 <xTaskIncrementTick+0x14c>)
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	3301      	adds	r3, #1
 8018c92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018c94:	4a4b      	ldr	r2, [pc, #300]	; (8018dc4 <xTaskIncrementTick+0x14c>)
 8018c96:	693b      	ldr	r3, [r7, #16]
 8018c98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018c9a:	693b      	ldr	r3, [r7, #16]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d120      	bne.n	8018ce2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018ca0:	4b49      	ldr	r3, [pc, #292]	; (8018dc8 <xTaskIncrementTick+0x150>)
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d00a      	beq.n	8018cc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8018caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cae:	f383 8811 	msr	BASEPRI, r3
 8018cb2:	f3bf 8f6f 	isb	sy
 8018cb6:	f3bf 8f4f 	dsb	sy
 8018cba:	603b      	str	r3, [r7, #0]
}
 8018cbc:	bf00      	nop
 8018cbe:	e7fe      	b.n	8018cbe <xTaskIncrementTick+0x46>
 8018cc0:	4b41      	ldr	r3, [pc, #260]	; (8018dc8 <xTaskIncrementTick+0x150>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	60fb      	str	r3, [r7, #12]
 8018cc6:	4b41      	ldr	r3, [pc, #260]	; (8018dcc <xTaskIncrementTick+0x154>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	4a3f      	ldr	r2, [pc, #252]	; (8018dc8 <xTaskIncrementTick+0x150>)
 8018ccc:	6013      	str	r3, [r2, #0]
 8018cce:	4a3f      	ldr	r2, [pc, #252]	; (8018dcc <xTaskIncrementTick+0x154>)
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	6013      	str	r3, [r2, #0]
 8018cd4:	4b3e      	ldr	r3, [pc, #248]	; (8018dd0 <xTaskIncrementTick+0x158>)
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	3301      	adds	r3, #1
 8018cda:	4a3d      	ldr	r2, [pc, #244]	; (8018dd0 <xTaskIncrementTick+0x158>)
 8018cdc:	6013      	str	r3, [r2, #0]
 8018cde:	f000 fadb 	bl	8019298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018ce2:	4b3c      	ldr	r3, [pc, #240]	; (8018dd4 <xTaskIncrementTick+0x15c>)
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	693a      	ldr	r2, [r7, #16]
 8018ce8:	429a      	cmp	r2, r3
 8018cea:	d349      	bcc.n	8018d80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018cec:	4b36      	ldr	r3, [pc, #216]	; (8018dc8 <xTaskIncrementTick+0x150>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d104      	bne.n	8018d00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cf6:	4b37      	ldr	r3, [pc, #220]	; (8018dd4 <xTaskIncrementTick+0x15c>)
 8018cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8018cfc:	601a      	str	r2, [r3, #0]
					break;
 8018cfe:	e03f      	b.n	8018d80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d00:	4b31      	ldr	r3, [pc, #196]	; (8018dc8 <xTaskIncrementTick+0x150>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	68db      	ldr	r3, [r3, #12]
 8018d06:	68db      	ldr	r3, [r3, #12]
 8018d08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018d0a:	68bb      	ldr	r3, [r7, #8]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018d10:	693a      	ldr	r2, [r7, #16]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	429a      	cmp	r2, r3
 8018d16:	d203      	bcs.n	8018d20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018d18:	4a2e      	ldr	r2, [pc, #184]	; (8018dd4 <xTaskIncrementTick+0x15c>)
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018d1e:	e02f      	b.n	8018d80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	3304      	adds	r3, #4
 8018d24:	4618      	mov	r0, r3
 8018d26:	f7fe ff79 	bl	8017c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018d2a:	68bb      	ldr	r3, [r7, #8]
 8018d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d004      	beq.n	8018d3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	3318      	adds	r3, #24
 8018d36:	4618      	mov	r0, r3
 8018d38:	f7fe ff70 	bl	8017c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d40:	4b25      	ldr	r3, [pc, #148]	; (8018dd8 <xTaskIncrementTick+0x160>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	429a      	cmp	r2, r3
 8018d46:	d903      	bls.n	8018d50 <xTaskIncrementTick+0xd8>
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d4c:	4a22      	ldr	r2, [pc, #136]	; (8018dd8 <xTaskIncrementTick+0x160>)
 8018d4e:	6013      	str	r3, [r2, #0]
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d54:	4613      	mov	r3, r2
 8018d56:	009b      	lsls	r3, r3, #2
 8018d58:	4413      	add	r3, r2
 8018d5a:	009b      	lsls	r3, r3, #2
 8018d5c:	4a1f      	ldr	r2, [pc, #124]	; (8018ddc <xTaskIncrementTick+0x164>)
 8018d5e:	441a      	add	r2, r3
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	3304      	adds	r3, #4
 8018d64:	4619      	mov	r1, r3
 8018d66:	4610      	mov	r0, r2
 8018d68:	f7fe fefb 	bl	8017b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d70:	4b1b      	ldr	r3, [pc, #108]	; (8018de0 <xTaskIncrementTick+0x168>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d3b8      	bcc.n	8018cec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018d7e:	e7b5      	b.n	8018cec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018d80:	4b17      	ldr	r3, [pc, #92]	; (8018de0 <xTaskIncrementTick+0x168>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d86:	4915      	ldr	r1, [pc, #84]	; (8018ddc <xTaskIncrementTick+0x164>)
 8018d88:	4613      	mov	r3, r2
 8018d8a:	009b      	lsls	r3, r3, #2
 8018d8c:	4413      	add	r3, r2
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	440b      	add	r3, r1
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	2b01      	cmp	r3, #1
 8018d96:	d901      	bls.n	8018d9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018d98:	2301      	movs	r3, #1
 8018d9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018d9c:	4b11      	ldr	r3, [pc, #68]	; (8018de4 <xTaskIncrementTick+0x16c>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d007      	beq.n	8018db4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018da4:	2301      	movs	r3, #1
 8018da6:	617b      	str	r3, [r7, #20]
 8018da8:	e004      	b.n	8018db4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018daa:	4b0f      	ldr	r3, [pc, #60]	; (8018de8 <xTaskIncrementTick+0x170>)
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	3301      	adds	r3, #1
 8018db0:	4a0d      	ldr	r2, [pc, #52]	; (8018de8 <xTaskIncrementTick+0x170>)
 8018db2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018db4:	697b      	ldr	r3, [r7, #20]
}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3718      	adds	r7, #24
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bd80      	pop	{r7, pc}
 8018dbe:	bf00      	nop
 8018dc0:	200017ac 	.word	0x200017ac
 8018dc4:	20001788 	.word	0x20001788
 8018dc8:	2000173c 	.word	0x2000173c
 8018dcc:	20001740 	.word	0x20001740
 8018dd0:	2000179c 	.word	0x2000179c
 8018dd4:	200017a4 	.word	0x200017a4
 8018dd8:	2000178c 	.word	0x2000178c
 8018ddc:	200012b4 	.word	0x200012b4
 8018de0:	200012b0 	.word	0x200012b0
 8018de4:	20001798 	.word	0x20001798
 8018de8:	20001794 	.word	0x20001794

08018dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018dec:	b480      	push	{r7}
 8018dee:	b085      	sub	sp, #20
 8018df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018df2:	4b2a      	ldr	r3, [pc, #168]	; (8018e9c <vTaskSwitchContext+0xb0>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d003      	beq.n	8018e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018dfa:	4b29      	ldr	r3, [pc, #164]	; (8018ea0 <vTaskSwitchContext+0xb4>)
 8018dfc:	2201      	movs	r2, #1
 8018dfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018e00:	e046      	b.n	8018e90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8018e02:	4b27      	ldr	r3, [pc, #156]	; (8018ea0 <vTaskSwitchContext+0xb4>)
 8018e04:	2200      	movs	r2, #0
 8018e06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e08:	4b26      	ldr	r3, [pc, #152]	; (8018ea4 <vTaskSwitchContext+0xb8>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	60fb      	str	r3, [r7, #12]
 8018e0e:	e010      	b.n	8018e32 <vTaskSwitchContext+0x46>
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d10a      	bne.n	8018e2c <vTaskSwitchContext+0x40>
	__asm volatile
 8018e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e1a:	f383 8811 	msr	BASEPRI, r3
 8018e1e:	f3bf 8f6f 	isb	sy
 8018e22:	f3bf 8f4f 	dsb	sy
 8018e26:	607b      	str	r3, [r7, #4]
}
 8018e28:	bf00      	nop
 8018e2a:	e7fe      	b.n	8018e2a <vTaskSwitchContext+0x3e>
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	3b01      	subs	r3, #1
 8018e30:	60fb      	str	r3, [r7, #12]
 8018e32:	491d      	ldr	r1, [pc, #116]	; (8018ea8 <vTaskSwitchContext+0xbc>)
 8018e34:	68fa      	ldr	r2, [r7, #12]
 8018e36:	4613      	mov	r3, r2
 8018e38:	009b      	lsls	r3, r3, #2
 8018e3a:	4413      	add	r3, r2
 8018e3c:	009b      	lsls	r3, r3, #2
 8018e3e:	440b      	add	r3, r1
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d0e4      	beq.n	8018e10 <vTaskSwitchContext+0x24>
 8018e46:	68fa      	ldr	r2, [r7, #12]
 8018e48:	4613      	mov	r3, r2
 8018e4a:	009b      	lsls	r3, r3, #2
 8018e4c:	4413      	add	r3, r2
 8018e4e:	009b      	lsls	r3, r3, #2
 8018e50:	4a15      	ldr	r2, [pc, #84]	; (8018ea8 <vTaskSwitchContext+0xbc>)
 8018e52:	4413      	add	r3, r2
 8018e54:	60bb      	str	r3, [r7, #8]
 8018e56:	68bb      	ldr	r3, [r7, #8]
 8018e58:	685b      	ldr	r3, [r3, #4]
 8018e5a:	685a      	ldr	r2, [r3, #4]
 8018e5c:	68bb      	ldr	r3, [r7, #8]
 8018e5e:	605a      	str	r2, [r3, #4]
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	685a      	ldr	r2, [r3, #4]
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	3308      	adds	r3, #8
 8018e68:	429a      	cmp	r2, r3
 8018e6a:	d104      	bne.n	8018e76 <vTaskSwitchContext+0x8a>
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	685b      	ldr	r3, [r3, #4]
 8018e70:	685a      	ldr	r2, [r3, #4]
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	605a      	str	r2, [r3, #4]
 8018e76:	68bb      	ldr	r3, [r7, #8]
 8018e78:	685b      	ldr	r3, [r3, #4]
 8018e7a:	68db      	ldr	r3, [r3, #12]
 8018e7c:	4a0b      	ldr	r2, [pc, #44]	; (8018eac <vTaskSwitchContext+0xc0>)
 8018e7e:	6013      	str	r3, [r2, #0]
 8018e80:	4a08      	ldr	r2, [pc, #32]	; (8018ea4 <vTaskSwitchContext+0xb8>)
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018e86:	4b09      	ldr	r3, [pc, #36]	; (8018eac <vTaskSwitchContext+0xc0>)
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	3354      	adds	r3, #84	; 0x54
 8018e8c:	4a08      	ldr	r2, [pc, #32]	; (8018eb0 <vTaskSwitchContext+0xc4>)
 8018e8e:	6013      	str	r3, [r2, #0]
}
 8018e90:	bf00      	nop
 8018e92:	3714      	adds	r7, #20
 8018e94:	46bd      	mov	sp, r7
 8018e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9a:	4770      	bx	lr
 8018e9c:	200017ac 	.word	0x200017ac
 8018ea0:	20001798 	.word	0x20001798
 8018ea4:	2000178c 	.word	0x2000178c
 8018ea8:	200012b4 	.word	0x200012b4
 8018eac:	200012b0 	.word	0x200012b0
 8018eb0:	20000010 	.word	0x20000010

08018eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b084      	sub	sp, #16
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	6078      	str	r0, [r7, #4]
 8018ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d10a      	bne.n	8018eda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ec8:	f383 8811 	msr	BASEPRI, r3
 8018ecc:	f3bf 8f6f 	isb	sy
 8018ed0:	f3bf 8f4f 	dsb	sy
 8018ed4:	60fb      	str	r3, [r7, #12]
}
 8018ed6:	bf00      	nop
 8018ed8:	e7fe      	b.n	8018ed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018eda:	4b07      	ldr	r3, [pc, #28]	; (8018ef8 <vTaskPlaceOnEventList+0x44>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	3318      	adds	r3, #24
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	6878      	ldr	r0, [r7, #4]
 8018ee4:	f7fe fe61 	bl	8017baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018ee8:	2101      	movs	r1, #1
 8018eea:	6838      	ldr	r0, [r7, #0]
 8018eec:	f000 fa80 	bl	80193f0 <prvAddCurrentTaskToDelayedList>
}
 8018ef0:	bf00      	nop
 8018ef2:	3710      	adds	r7, #16
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}
 8018ef8:	200012b0 	.word	0x200012b0

08018efc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b086      	sub	sp, #24
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d10a      	bne.n	8018f24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f12:	f383 8811 	msr	BASEPRI, r3
 8018f16:	f3bf 8f6f 	isb	sy
 8018f1a:	f3bf 8f4f 	dsb	sy
 8018f1e:	617b      	str	r3, [r7, #20]
}
 8018f20:	bf00      	nop
 8018f22:	e7fe      	b.n	8018f22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018f24:	4b0a      	ldr	r3, [pc, #40]	; (8018f50 <vTaskPlaceOnEventListRestricted+0x54>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	3318      	adds	r3, #24
 8018f2a:	4619      	mov	r1, r3
 8018f2c:	68f8      	ldr	r0, [r7, #12]
 8018f2e:	f7fe fe18 	bl	8017b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d002      	beq.n	8018f3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018f38:	f04f 33ff 	mov.w	r3, #4294967295
 8018f3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018f3e:	6879      	ldr	r1, [r7, #4]
 8018f40:	68b8      	ldr	r0, [r7, #8]
 8018f42:	f000 fa55 	bl	80193f0 <prvAddCurrentTaskToDelayedList>
	}
 8018f46:	bf00      	nop
 8018f48:	3718      	adds	r7, #24
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}
 8018f4e:	bf00      	nop
 8018f50:	200012b0 	.word	0x200012b0

08018f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b086      	sub	sp, #24
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	68db      	ldr	r3, [r3, #12]
 8018f60:	68db      	ldr	r3, [r3, #12]
 8018f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018f64:	693b      	ldr	r3, [r7, #16]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d10a      	bne.n	8018f80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f6e:	f383 8811 	msr	BASEPRI, r3
 8018f72:	f3bf 8f6f 	isb	sy
 8018f76:	f3bf 8f4f 	dsb	sy
 8018f7a:	60fb      	str	r3, [r7, #12]
}
 8018f7c:	bf00      	nop
 8018f7e:	e7fe      	b.n	8018f7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018f80:	693b      	ldr	r3, [r7, #16]
 8018f82:	3318      	adds	r3, #24
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7fe fe49 	bl	8017c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018f8a:	4b1e      	ldr	r3, [pc, #120]	; (8019004 <xTaskRemoveFromEventList+0xb0>)
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d11d      	bne.n	8018fce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018f92:	693b      	ldr	r3, [r7, #16]
 8018f94:	3304      	adds	r3, #4
 8018f96:	4618      	mov	r0, r3
 8018f98:	f7fe fe40 	bl	8017c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018f9c:	693b      	ldr	r3, [r7, #16]
 8018f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fa0:	4b19      	ldr	r3, [pc, #100]	; (8019008 <xTaskRemoveFromEventList+0xb4>)
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	429a      	cmp	r2, r3
 8018fa6:	d903      	bls.n	8018fb0 <xTaskRemoveFromEventList+0x5c>
 8018fa8:	693b      	ldr	r3, [r7, #16]
 8018faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fac:	4a16      	ldr	r2, [pc, #88]	; (8019008 <xTaskRemoveFromEventList+0xb4>)
 8018fae:	6013      	str	r3, [r2, #0]
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fb4:	4613      	mov	r3, r2
 8018fb6:	009b      	lsls	r3, r3, #2
 8018fb8:	4413      	add	r3, r2
 8018fba:	009b      	lsls	r3, r3, #2
 8018fbc:	4a13      	ldr	r2, [pc, #76]	; (801900c <xTaskRemoveFromEventList+0xb8>)
 8018fbe:	441a      	add	r2, r3
 8018fc0:	693b      	ldr	r3, [r7, #16]
 8018fc2:	3304      	adds	r3, #4
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	4610      	mov	r0, r2
 8018fc8:	f7fe fdcb 	bl	8017b62 <vListInsertEnd>
 8018fcc:	e005      	b.n	8018fda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018fce:	693b      	ldr	r3, [r7, #16]
 8018fd0:	3318      	adds	r3, #24
 8018fd2:	4619      	mov	r1, r3
 8018fd4:	480e      	ldr	r0, [pc, #56]	; (8019010 <xTaskRemoveFromEventList+0xbc>)
 8018fd6:	f7fe fdc4 	bl	8017b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018fda:	693b      	ldr	r3, [r7, #16]
 8018fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fde:	4b0d      	ldr	r3, [pc, #52]	; (8019014 <xTaskRemoveFromEventList+0xc0>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d905      	bls.n	8018ff4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018fe8:	2301      	movs	r3, #1
 8018fea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018fec:	4b0a      	ldr	r3, [pc, #40]	; (8019018 <xTaskRemoveFromEventList+0xc4>)
 8018fee:	2201      	movs	r2, #1
 8018ff0:	601a      	str	r2, [r3, #0]
 8018ff2:	e001      	b.n	8018ff8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018ff8:	697b      	ldr	r3, [r7, #20]
}
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	3718      	adds	r7, #24
 8018ffe:	46bd      	mov	sp, r7
 8019000:	bd80      	pop	{r7, pc}
 8019002:	bf00      	nop
 8019004:	200017ac 	.word	0x200017ac
 8019008:	2000178c 	.word	0x2000178c
 801900c:	200012b4 	.word	0x200012b4
 8019010:	20001744 	.word	0x20001744
 8019014:	200012b0 	.word	0x200012b0
 8019018:	20001798 	.word	0x20001798

0801901c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801901c:	b480      	push	{r7}
 801901e:	b083      	sub	sp, #12
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019024:	4b06      	ldr	r3, [pc, #24]	; (8019040 <vTaskInternalSetTimeOutState+0x24>)
 8019026:	681a      	ldr	r2, [r3, #0]
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801902c:	4b05      	ldr	r3, [pc, #20]	; (8019044 <vTaskInternalSetTimeOutState+0x28>)
 801902e:	681a      	ldr	r2, [r3, #0]
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	605a      	str	r2, [r3, #4]
}
 8019034:	bf00      	nop
 8019036:	370c      	adds	r7, #12
 8019038:	46bd      	mov	sp, r7
 801903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903e:	4770      	bx	lr
 8019040:	2000179c 	.word	0x2000179c
 8019044:	20001788 	.word	0x20001788

08019048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b088      	sub	sp, #32
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d10a      	bne.n	801906e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801905c:	f383 8811 	msr	BASEPRI, r3
 8019060:	f3bf 8f6f 	isb	sy
 8019064:	f3bf 8f4f 	dsb	sy
 8019068:	613b      	str	r3, [r7, #16]
}
 801906a:	bf00      	nop
 801906c:	e7fe      	b.n	801906c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d10a      	bne.n	801908a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019078:	f383 8811 	msr	BASEPRI, r3
 801907c:	f3bf 8f6f 	isb	sy
 8019080:	f3bf 8f4f 	dsb	sy
 8019084:	60fb      	str	r3, [r7, #12]
}
 8019086:	bf00      	nop
 8019088:	e7fe      	b.n	8019088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801908a:	f000 fe83 	bl	8019d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801908e:	4b1d      	ldr	r3, [pc, #116]	; (8019104 <xTaskCheckForTimeOut+0xbc>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	685b      	ldr	r3, [r3, #4]
 8019098:	69ba      	ldr	r2, [r7, #24]
 801909a:	1ad3      	subs	r3, r2, r3
 801909c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801909e:	683b      	ldr	r3, [r7, #0]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190a6:	d102      	bne.n	80190ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80190a8:	2300      	movs	r3, #0
 80190aa:	61fb      	str	r3, [r7, #28]
 80190ac:	e023      	b.n	80190f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	681a      	ldr	r2, [r3, #0]
 80190b2:	4b15      	ldr	r3, [pc, #84]	; (8019108 <xTaskCheckForTimeOut+0xc0>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d007      	beq.n	80190ca <xTaskCheckForTimeOut+0x82>
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	685b      	ldr	r3, [r3, #4]
 80190be:	69ba      	ldr	r2, [r7, #24]
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d302      	bcc.n	80190ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80190c4:	2301      	movs	r3, #1
 80190c6:	61fb      	str	r3, [r7, #28]
 80190c8:	e015      	b.n	80190f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	697a      	ldr	r2, [r7, #20]
 80190d0:	429a      	cmp	r2, r3
 80190d2:	d20b      	bcs.n	80190ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	681a      	ldr	r2, [r3, #0]
 80190d8:	697b      	ldr	r3, [r7, #20]
 80190da:	1ad2      	subs	r2, r2, r3
 80190dc:	683b      	ldr	r3, [r7, #0]
 80190de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80190e0:	6878      	ldr	r0, [r7, #4]
 80190e2:	f7ff ff9b 	bl	801901c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80190e6:	2300      	movs	r3, #0
 80190e8:	61fb      	str	r3, [r7, #28]
 80190ea:	e004      	b.n	80190f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80190ec:	683b      	ldr	r3, [r7, #0]
 80190ee:	2200      	movs	r2, #0
 80190f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80190f2:	2301      	movs	r3, #1
 80190f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80190f6:	f000 fe7d 	bl	8019df4 <vPortExitCritical>

	return xReturn;
 80190fa:	69fb      	ldr	r3, [r7, #28]
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3720      	adds	r7, #32
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}
 8019104:	20001788 	.word	0x20001788
 8019108:	2000179c 	.word	0x2000179c

0801910c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801910c:	b480      	push	{r7}
 801910e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019110:	4b03      	ldr	r3, [pc, #12]	; (8019120 <vTaskMissedYield+0x14>)
 8019112:	2201      	movs	r2, #1
 8019114:	601a      	str	r2, [r3, #0]
}
 8019116:	bf00      	nop
 8019118:	46bd      	mov	sp, r7
 801911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911e:	4770      	bx	lr
 8019120:	20001798 	.word	0x20001798

08019124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b082      	sub	sp, #8
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801912c:	f000 f852 	bl	80191d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019130:	4b06      	ldr	r3, [pc, #24]	; (801914c <prvIdleTask+0x28>)
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	2b01      	cmp	r3, #1
 8019136:	d9f9      	bls.n	801912c <prvIdleTask+0x8>
			{
				taskYIELD();
 8019138:	4b05      	ldr	r3, [pc, #20]	; (8019150 <prvIdleTask+0x2c>)
 801913a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801913e:	601a      	str	r2, [r3, #0]
 8019140:	f3bf 8f4f 	dsb	sy
 8019144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019148:	e7f0      	b.n	801912c <prvIdleTask+0x8>
 801914a:	bf00      	nop
 801914c:	200012b4 	.word	0x200012b4
 8019150:	e000ed04 	.word	0xe000ed04

08019154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801915a:	2300      	movs	r3, #0
 801915c:	607b      	str	r3, [r7, #4]
 801915e:	e00c      	b.n	801917a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019160:	687a      	ldr	r2, [r7, #4]
 8019162:	4613      	mov	r3, r2
 8019164:	009b      	lsls	r3, r3, #2
 8019166:	4413      	add	r3, r2
 8019168:	009b      	lsls	r3, r3, #2
 801916a:	4a12      	ldr	r2, [pc, #72]	; (80191b4 <prvInitialiseTaskLists+0x60>)
 801916c:	4413      	add	r3, r2
 801916e:	4618      	mov	r0, r3
 8019170:	f7fe fcca 	bl	8017b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	3301      	adds	r3, #1
 8019178:	607b      	str	r3, [r7, #4]
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	2b37      	cmp	r3, #55	; 0x37
 801917e:	d9ef      	bls.n	8019160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019180:	480d      	ldr	r0, [pc, #52]	; (80191b8 <prvInitialiseTaskLists+0x64>)
 8019182:	f7fe fcc1 	bl	8017b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019186:	480d      	ldr	r0, [pc, #52]	; (80191bc <prvInitialiseTaskLists+0x68>)
 8019188:	f7fe fcbe 	bl	8017b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801918c:	480c      	ldr	r0, [pc, #48]	; (80191c0 <prvInitialiseTaskLists+0x6c>)
 801918e:	f7fe fcbb 	bl	8017b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019192:	480c      	ldr	r0, [pc, #48]	; (80191c4 <prvInitialiseTaskLists+0x70>)
 8019194:	f7fe fcb8 	bl	8017b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019198:	480b      	ldr	r0, [pc, #44]	; (80191c8 <prvInitialiseTaskLists+0x74>)
 801919a:	f7fe fcb5 	bl	8017b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801919e:	4b0b      	ldr	r3, [pc, #44]	; (80191cc <prvInitialiseTaskLists+0x78>)
 80191a0:	4a05      	ldr	r2, [pc, #20]	; (80191b8 <prvInitialiseTaskLists+0x64>)
 80191a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80191a4:	4b0a      	ldr	r3, [pc, #40]	; (80191d0 <prvInitialiseTaskLists+0x7c>)
 80191a6:	4a05      	ldr	r2, [pc, #20]	; (80191bc <prvInitialiseTaskLists+0x68>)
 80191a8:	601a      	str	r2, [r3, #0]
}
 80191aa:	bf00      	nop
 80191ac:	3708      	adds	r7, #8
 80191ae:	46bd      	mov	sp, r7
 80191b0:	bd80      	pop	{r7, pc}
 80191b2:	bf00      	nop
 80191b4:	200012b4 	.word	0x200012b4
 80191b8:	20001714 	.word	0x20001714
 80191bc:	20001728 	.word	0x20001728
 80191c0:	20001744 	.word	0x20001744
 80191c4:	20001758 	.word	0x20001758
 80191c8:	20001770 	.word	0x20001770
 80191cc:	2000173c 	.word	0x2000173c
 80191d0:	20001740 	.word	0x20001740

080191d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b082      	sub	sp, #8
 80191d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80191da:	e019      	b.n	8019210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80191dc:	f000 fdda 	bl	8019d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80191e0:	4b10      	ldr	r3, [pc, #64]	; (8019224 <prvCheckTasksWaitingTermination+0x50>)
 80191e2:	68db      	ldr	r3, [r3, #12]
 80191e4:	68db      	ldr	r3, [r3, #12]
 80191e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	3304      	adds	r3, #4
 80191ec:	4618      	mov	r0, r3
 80191ee:	f7fe fd15 	bl	8017c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80191f2:	4b0d      	ldr	r3, [pc, #52]	; (8019228 <prvCheckTasksWaitingTermination+0x54>)
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	3b01      	subs	r3, #1
 80191f8:	4a0b      	ldr	r2, [pc, #44]	; (8019228 <prvCheckTasksWaitingTermination+0x54>)
 80191fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80191fc:	4b0b      	ldr	r3, [pc, #44]	; (801922c <prvCheckTasksWaitingTermination+0x58>)
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	3b01      	subs	r3, #1
 8019202:	4a0a      	ldr	r2, [pc, #40]	; (801922c <prvCheckTasksWaitingTermination+0x58>)
 8019204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019206:	f000 fdf5 	bl	8019df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801920a:	6878      	ldr	r0, [r7, #4]
 801920c:	f000 f810 	bl	8019230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019210:	4b06      	ldr	r3, [pc, #24]	; (801922c <prvCheckTasksWaitingTermination+0x58>)
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d1e1      	bne.n	80191dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019218:	bf00      	nop
 801921a:	bf00      	nop
 801921c:	3708      	adds	r7, #8
 801921e:	46bd      	mov	sp, r7
 8019220:	bd80      	pop	{r7, pc}
 8019222:	bf00      	nop
 8019224:	20001758 	.word	0x20001758
 8019228:	20001784 	.word	0x20001784
 801922c:	2000176c 	.word	0x2000176c

08019230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019230:	b580      	push	{r7, lr}
 8019232:	b084      	sub	sp, #16
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	3354      	adds	r3, #84	; 0x54
 801923c:	4618      	mov	r0, r3
 801923e:	f002 fda9 	bl	801bd94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8019248:	2b00      	cmp	r3, #0
 801924a:	d108      	bne.n	801925e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019250:	4618      	mov	r0, r3
 8019252:	f000 ff8d 	bl	801a170 <vPortFree>
				vPortFree( pxTCB );
 8019256:	6878      	ldr	r0, [r7, #4]
 8019258:	f000 ff8a 	bl	801a170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801925c:	e018      	b.n	8019290 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8019264:	2b01      	cmp	r3, #1
 8019266:	d103      	bne.n	8019270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8019268:	6878      	ldr	r0, [r7, #4]
 801926a:	f000 ff81 	bl	801a170 <vPortFree>
	}
 801926e:	e00f      	b.n	8019290 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8019276:	2b02      	cmp	r3, #2
 8019278:	d00a      	beq.n	8019290 <prvDeleteTCB+0x60>
	__asm volatile
 801927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801927e:	f383 8811 	msr	BASEPRI, r3
 8019282:	f3bf 8f6f 	isb	sy
 8019286:	f3bf 8f4f 	dsb	sy
 801928a:	60fb      	str	r3, [r7, #12]
}
 801928c:	bf00      	nop
 801928e:	e7fe      	b.n	801928e <prvDeleteTCB+0x5e>
	}
 8019290:	bf00      	nop
 8019292:	3710      	adds	r7, #16
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}

08019298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019298:	b480      	push	{r7}
 801929a:	b083      	sub	sp, #12
 801929c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801929e:	4b0c      	ldr	r3, [pc, #48]	; (80192d0 <prvResetNextTaskUnblockTime+0x38>)
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d104      	bne.n	80192b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80192a8:	4b0a      	ldr	r3, [pc, #40]	; (80192d4 <prvResetNextTaskUnblockTime+0x3c>)
 80192aa:	f04f 32ff 	mov.w	r2, #4294967295
 80192ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80192b0:	e008      	b.n	80192c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80192b2:	4b07      	ldr	r3, [pc, #28]	; (80192d0 <prvResetNextTaskUnblockTime+0x38>)
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	68db      	ldr	r3, [r3, #12]
 80192b8:	68db      	ldr	r3, [r3, #12]
 80192ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	685b      	ldr	r3, [r3, #4]
 80192c0:	4a04      	ldr	r2, [pc, #16]	; (80192d4 <prvResetNextTaskUnblockTime+0x3c>)
 80192c2:	6013      	str	r3, [r2, #0]
}
 80192c4:	bf00      	nop
 80192c6:	370c      	adds	r7, #12
 80192c8:	46bd      	mov	sp, r7
 80192ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ce:	4770      	bx	lr
 80192d0:	2000173c 	.word	0x2000173c
 80192d4:	200017a4 	.word	0x200017a4

080192d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80192d8:	b480      	push	{r7}
 80192da:	b083      	sub	sp, #12
 80192dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80192de:	4b0b      	ldr	r3, [pc, #44]	; (801930c <xTaskGetSchedulerState+0x34>)
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d102      	bne.n	80192ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80192e6:	2301      	movs	r3, #1
 80192e8:	607b      	str	r3, [r7, #4]
 80192ea:	e008      	b.n	80192fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80192ec:	4b08      	ldr	r3, [pc, #32]	; (8019310 <xTaskGetSchedulerState+0x38>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d102      	bne.n	80192fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80192f4:	2302      	movs	r3, #2
 80192f6:	607b      	str	r3, [r7, #4]
 80192f8:	e001      	b.n	80192fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80192fa:	2300      	movs	r3, #0
 80192fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80192fe:	687b      	ldr	r3, [r7, #4]
	}
 8019300:	4618      	mov	r0, r3
 8019302:	370c      	adds	r7, #12
 8019304:	46bd      	mov	sp, r7
 8019306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930a:	4770      	bx	lr
 801930c:	20001790 	.word	0x20001790
 8019310:	200017ac 	.word	0x200017ac

08019314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019314:	b580      	push	{r7, lr}
 8019316:	b086      	sub	sp, #24
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019320:	2300      	movs	r3, #0
 8019322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d056      	beq.n	80193d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801932a:	4b2e      	ldr	r3, [pc, #184]	; (80193e4 <xTaskPriorityDisinherit+0xd0>)
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	693a      	ldr	r2, [r7, #16]
 8019330:	429a      	cmp	r2, r3
 8019332:	d00a      	beq.n	801934a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019338:	f383 8811 	msr	BASEPRI, r3
 801933c:	f3bf 8f6f 	isb	sy
 8019340:	f3bf 8f4f 	dsb	sy
 8019344:	60fb      	str	r3, [r7, #12]
}
 8019346:	bf00      	nop
 8019348:	e7fe      	b.n	8019348 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801934a:	693b      	ldr	r3, [r7, #16]
 801934c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801934e:	2b00      	cmp	r3, #0
 8019350:	d10a      	bne.n	8019368 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019356:	f383 8811 	msr	BASEPRI, r3
 801935a:	f3bf 8f6f 	isb	sy
 801935e:	f3bf 8f4f 	dsb	sy
 8019362:	60bb      	str	r3, [r7, #8]
}
 8019364:	bf00      	nop
 8019366:	e7fe      	b.n	8019366 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801936c:	1e5a      	subs	r2, r3, #1
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801937a:	429a      	cmp	r2, r3
 801937c:	d02c      	beq.n	80193d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801937e:	693b      	ldr	r3, [r7, #16]
 8019380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019382:	2b00      	cmp	r3, #0
 8019384:	d128      	bne.n	80193d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019386:	693b      	ldr	r3, [r7, #16]
 8019388:	3304      	adds	r3, #4
 801938a:	4618      	mov	r0, r3
 801938c:	f7fe fc46 	bl	8017c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019394:	693b      	ldr	r3, [r7, #16]
 8019396:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019398:	693b      	ldr	r3, [r7, #16]
 801939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801939c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80193a4:	693b      	ldr	r3, [r7, #16]
 80193a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193a8:	4b0f      	ldr	r3, [pc, #60]	; (80193e8 <xTaskPriorityDisinherit+0xd4>)
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	429a      	cmp	r2, r3
 80193ae:	d903      	bls.n	80193b8 <xTaskPriorityDisinherit+0xa4>
 80193b0:	693b      	ldr	r3, [r7, #16]
 80193b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193b4:	4a0c      	ldr	r2, [pc, #48]	; (80193e8 <xTaskPriorityDisinherit+0xd4>)
 80193b6:	6013      	str	r3, [r2, #0]
 80193b8:	693b      	ldr	r3, [r7, #16]
 80193ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193bc:	4613      	mov	r3, r2
 80193be:	009b      	lsls	r3, r3, #2
 80193c0:	4413      	add	r3, r2
 80193c2:	009b      	lsls	r3, r3, #2
 80193c4:	4a09      	ldr	r2, [pc, #36]	; (80193ec <xTaskPriorityDisinherit+0xd8>)
 80193c6:	441a      	add	r2, r3
 80193c8:	693b      	ldr	r3, [r7, #16]
 80193ca:	3304      	adds	r3, #4
 80193cc:	4619      	mov	r1, r3
 80193ce:	4610      	mov	r0, r2
 80193d0:	f7fe fbc7 	bl	8017b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80193d4:	2301      	movs	r3, #1
 80193d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80193d8:	697b      	ldr	r3, [r7, #20]
	}
 80193da:	4618      	mov	r0, r3
 80193dc:	3718      	adds	r7, #24
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}
 80193e2:	bf00      	nop
 80193e4:	200012b0 	.word	0x200012b0
 80193e8:	2000178c 	.word	0x2000178c
 80193ec:	200012b4 	.word	0x200012b4

080193f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b084      	sub	sp, #16
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	6078      	str	r0, [r7, #4]
 80193f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80193fa:	4b21      	ldr	r3, [pc, #132]	; (8019480 <prvAddCurrentTaskToDelayedList+0x90>)
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019400:	4b20      	ldr	r3, [pc, #128]	; (8019484 <prvAddCurrentTaskToDelayedList+0x94>)
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	3304      	adds	r3, #4
 8019406:	4618      	mov	r0, r3
 8019408:	f7fe fc08 	bl	8017c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019412:	d10a      	bne.n	801942a <prvAddCurrentTaskToDelayedList+0x3a>
 8019414:	683b      	ldr	r3, [r7, #0]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d007      	beq.n	801942a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801941a:	4b1a      	ldr	r3, [pc, #104]	; (8019484 <prvAddCurrentTaskToDelayedList+0x94>)
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	3304      	adds	r3, #4
 8019420:	4619      	mov	r1, r3
 8019422:	4819      	ldr	r0, [pc, #100]	; (8019488 <prvAddCurrentTaskToDelayedList+0x98>)
 8019424:	f7fe fb9d 	bl	8017b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019428:	e026      	b.n	8019478 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801942a:	68fa      	ldr	r2, [r7, #12]
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	4413      	add	r3, r2
 8019430:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019432:	4b14      	ldr	r3, [pc, #80]	; (8019484 <prvAddCurrentTaskToDelayedList+0x94>)
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	68ba      	ldr	r2, [r7, #8]
 8019438:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801943a:	68ba      	ldr	r2, [r7, #8]
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	429a      	cmp	r2, r3
 8019440:	d209      	bcs.n	8019456 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019442:	4b12      	ldr	r3, [pc, #72]	; (801948c <prvAddCurrentTaskToDelayedList+0x9c>)
 8019444:	681a      	ldr	r2, [r3, #0]
 8019446:	4b0f      	ldr	r3, [pc, #60]	; (8019484 <prvAddCurrentTaskToDelayedList+0x94>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	3304      	adds	r3, #4
 801944c:	4619      	mov	r1, r3
 801944e:	4610      	mov	r0, r2
 8019450:	f7fe fbab 	bl	8017baa <vListInsert>
}
 8019454:	e010      	b.n	8019478 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019456:	4b0e      	ldr	r3, [pc, #56]	; (8019490 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019458:	681a      	ldr	r2, [r3, #0]
 801945a:	4b0a      	ldr	r3, [pc, #40]	; (8019484 <prvAddCurrentTaskToDelayedList+0x94>)
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	3304      	adds	r3, #4
 8019460:	4619      	mov	r1, r3
 8019462:	4610      	mov	r0, r2
 8019464:	f7fe fba1 	bl	8017baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019468:	4b0a      	ldr	r3, [pc, #40]	; (8019494 <prvAddCurrentTaskToDelayedList+0xa4>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	68ba      	ldr	r2, [r7, #8]
 801946e:	429a      	cmp	r2, r3
 8019470:	d202      	bcs.n	8019478 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019472:	4a08      	ldr	r2, [pc, #32]	; (8019494 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019474:	68bb      	ldr	r3, [r7, #8]
 8019476:	6013      	str	r3, [r2, #0]
}
 8019478:	bf00      	nop
 801947a:	3710      	adds	r7, #16
 801947c:	46bd      	mov	sp, r7
 801947e:	bd80      	pop	{r7, pc}
 8019480:	20001788 	.word	0x20001788
 8019484:	200012b0 	.word	0x200012b0
 8019488:	20001770 	.word	0x20001770
 801948c:	20001740 	.word	0x20001740
 8019490:	2000173c 	.word	0x2000173c
 8019494:	200017a4 	.word	0x200017a4

08019498 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b08a      	sub	sp, #40	; 0x28
 801949c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801949e:	2300      	movs	r3, #0
 80194a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80194a2:	f000 fb07 	bl	8019ab4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80194a6:	4b1c      	ldr	r3, [pc, #112]	; (8019518 <xTimerCreateTimerTask+0x80>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d021      	beq.n	80194f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80194ae:	2300      	movs	r3, #0
 80194b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80194b2:	2300      	movs	r3, #0
 80194b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80194b6:	1d3a      	adds	r2, r7, #4
 80194b8:	f107 0108 	add.w	r1, r7, #8
 80194bc:	f107 030c 	add.w	r3, r7, #12
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7fe fb07 	bl	8017ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80194c6:	6879      	ldr	r1, [r7, #4]
 80194c8:	68bb      	ldr	r3, [r7, #8]
 80194ca:	68fa      	ldr	r2, [r7, #12]
 80194cc:	9202      	str	r2, [sp, #8]
 80194ce:	9301      	str	r3, [sp, #4]
 80194d0:	2302      	movs	r3, #2
 80194d2:	9300      	str	r3, [sp, #0]
 80194d4:	2300      	movs	r3, #0
 80194d6:	460a      	mov	r2, r1
 80194d8:	4910      	ldr	r1, [pc, #64]	; (801951c <xTimerCreateTimerTask+0x84>)
 80194da:	4811      	ldr	r0, [pc, #68]	; (8019520 <xTimerCreateTimerTask+0x88>)
 80194dc:	f7ff f8b4 	bl	8018648 <xTaskCreateStatic>
 80194e0:	4603      	mov	r3, r0
 80194e2:	4a10      	ldr	r2, [pc, #64]	; (8019524 <xTimerCreateTimerTask+0x8c>)
 80194e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80194e6:	4b0f      	ldr	r3, [pc, #60]	; (8019524 <xTimerCreateTimerTask+0x8c>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d001      	beq.n	80194f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80194ee:	2301      	movs	r3, #1
 80194f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d10a      	bne.n	801950e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80194f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194fc:	f383 8811 	msr	BASEPRI, r3
 8019500:	f3bf 8f6f 	isb	sy
 8019504:	f3bf 8f4f 	dsb	sy
 8019508:	613b      	str	r3, [r7, #16]
}
 801950a:	bf00      	nop
 801950c:	e7fe      	b.n	801950c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801950e:	697b      	ldr	r3, [r7, #20]
}
 8019510:	4618      	mov	r0, r3
 8019512:	3718      	adds	r7, #24
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	200017e0 	.word	0x200017e0
 801951c:	0801f1a8 	.word	0x0801f1a8
 8019520:	0801965d 	.word	0x0801965d
 8019524:	200017e4 	.word	0x200017e4

08019528 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b08a      	sub	sp, #40	; 0x28
 801952c:	af00      	add	r7, sp, #0
 801952e:	60f8      	str	r0, [r7, #12]
 8019530:	60b9      	str	r1, [r7, #8]
 8019532:	607a      	str	r2, [r7, #4]
 8019534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019536:	2300      	movs	r3, #0
 8019538:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d10a      	bne.n	8019556 <xTimerGenericCommand+0x2e>
	__asm volatile
 8019540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019544:	f383 8811 	msr	BASEPRI, r3
 8019548:	f3bf 8f6f 	isb	sy
 801954c:	f3bf 8f4f 	dsb	sy
 8019550:	623b      	str	r3, [r7, #32]
}
 8019552:	bf00      	nop
 8019554:	e7fe      	b.n	8019554 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019556:	4b1a      	ldr	r3, [pc, #104]	; (80195c0 <xTimerGenericCommand+0x98>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d02a      	beq.n	80195b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801956a:	68bb      	ldr	r3, [r7, #8]
 801956c:	2b05      	cmp	r3, #5
 801956e:	dc18      	bgt.n	80195a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019570:	f7ff feb2 	bl	80192d8 <xTaskGetSchedulerState>
 8019574:	4603      	mov	r3, r0
 8019576:	2b02      	cmp	r3, #2
 8019578:	d109      	bne.n	801958e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801957a:	4b11      	ldr	r3, [pc, #68]	; (80195c0 <xTimerGenericCommand+0x98>)
 801957c:	6818      	ldr	r0, [r3, #0]
 801957e:	f107 0110 	add.w	r1, r7, #16
 8019582:	2300      	movs	r3, #0
 8019584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019586:	f7fe fc77 	bl	8017e78 <xQueueGenericSend>
 801958a:	6278      	str	r0, [r7, #36]	; 0x24
 801958c:	e012      	b.n	80195b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801958e:	4b0c      	ldr	r3, [pc, #48]	; (80195c0 <xTimerGenericCommand+0x98>)
 8019590:	6818      	ldr	r0, [r3, #0]
 8019592:	f107 0110 	add.w	r1, r7, #16
 8019596:	2300      	movs	r3, #0
 8019598:	2200      	movs	r2, #0
 801959a:	f7fe fc6d 	bl	8017e78 <xQueueGenericSend>
 801959e:	6278      	str	r0, [r7, #36]	; 0x24
 80195a0:	e008      	b.n	80195b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80195a2:	4b07      	ldr	r3, [pc, #28]	; (80195c0 <xTimerGenericCommand+0x98>)
 80195a4:	6818      	ldr	r0, [r3, #0]
 80195a6:	f107 0110 	add.w	r1, r7, #16
 80195aa:	2300      	movs	r3, #0
 80195ac:	683a      	ldr	r2, [r7, #0]
 80195ae:	f7fe fd61 	bl	8018074 <xQueueGenericSendFromISR>
 80195b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80195b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80195b6:	4618      	mov	r0, r3
 80195b8:	3728      	adds	r7, #40	; 0x28
 80195ba:	46bd      	mov	sp, r7
 80195bc:	bd80      	pop	{r7, pc}
 80195be:	bf00      	nop
 80195c0:	200017e0 	.word	0x200017e0

080195c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b088      	sub	sp, #32
 80195c8:	af02      	add	r7, sp, #8
 80195ca:	6078      	str	r0, [r7, #4]
 80195cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195ce:	4b22      	ldr	r3, [pc, #136]	; (8019658 <prvProcessExpiredTimer+0x94>)
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	68db      	ldr	r3, [r3, #12]
 80195d4:	68db      	ldr	r3, [r3, #12]
 80195d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80195d8:	697b      	ldr	r3, [r7, #20]
 80195da:	3304      	adds	r3, #4
 80195dc:	4618      	mov	r0, r3
 80195de:	f7fe fb1d 	bl	8017c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80195e2:	697b      	ldr	r3, [r7, #20]
 80195e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80195e8:	f003 0304 	and.w	r3, r3, #4
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d022      	beq.n	8019636 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	699a      	ldr	r2, [r3, #24]
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	18d1      	adds	r1, r2, r3
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	683a      	ldr	r2, [r7, #0]
 80195fc:	6978      	ldr	r0, [r7, #20]
 80195fe:	f000 f8d1 	bl	80197a4 <prvInsertTimerInActiveList>
 8019602:	4603      	mov	r3, r0
 8019604:	2b00      	cmp	r3, #0
 8019606:	d01f      	beq.n	8019648 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019608:	2300      	movs	r3, #0
 801960a:	9300      	str	r3, [sp, #0]
 801960c:	2300      	movs	r3, #0
 801960e:	687a      	ldr	r2, [r7, #4]
 8019610:	2100      	movs	r1, #0
 8019612:	6978      	ldr	r0, [r7, #20]
 8019614:	f7ff ff88 	bl	8019528 <xTimerGenericCommand>
 8019618:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801961a:	693b      	ldr	r3, [r7, #16]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d113      	bne.n	8019648 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019624:	f383 8811 	msr	BASEPRI, r3
 8019628:	f3bf 8f6f 	isb	sy
 801962c:	f3bf 8f4f 	dsb	sy
 8019630:	60fb      	str	r3, [r7, #12]
}
 8019632:	bf00      	nop
 8019634:	e7fe      	b.n	8019634 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019636:	697b      	ldr	r3, [r7, #20]
 8019638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801963c:	f023 0301 	bic.w	r3, r3, #1
 8019640:	b2da      	uxtb	r2, r3
 8019642:	697b      	ldr	r3, [r7, #20]
 8019644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019648:	697b      	ldr	r3, [r7, #20]
 801964a:	6a1b      	ldr	r3, [r3, #32]
 801964c:	6978      	ldr	r0, [r7, #20]
 801964e:	4798      	blx	r3
}
 8019650:	bf00      	nop
 8019652:	3718      	adds	r7, #24
 8019654:	46bd      	mov	sp, r7
 8019656:	bd80      	pop	{r7, pc}
 8019658:	200017d8 	.word	0x200017d8

0801965c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b084      	sub	sp, #16
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019664:	f107 0308 	add.w	r3, r7, #8
 8019668:	4618      	mov	r0, r3
 801966a:	f000 f857 	bl	801971c <prvGetNextExpireTime>
 801966e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	4619      	mov	r1, r3
 8019674:	68f8      	ldr	r0, [r7, #12]
 8019676:	f000 f803 	bl	8019680 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801967a:	f000 f8d5 	bl	8019828 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801967e:	e7f1      	b.n	8019664 <prvTimerTask+0x8>

08019680 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b084      	sub	sp, #16
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
 8019688:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801968a:	f7ff fa39 	bl	8018b00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801968e:	f107 0308 	add.w	r3, r7, #8
 8019692:	4618      	mov	r0, r3
 8019694:	f000 f866 	bl	8019764 <prvSampleTimeNow>
 8019698:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d130      	bne.n	8019702 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80196a0:	683b      	ldr	r3, [r7, #0]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d10a      	bne.n	80196bc <prvProcessTimerOrBlockTask+0x3c>
 80196a6:	687a      	ldr	r2, [r7, #4]
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	429a      	cmp	r2, r3
 80196ac:	d806      	bhi.n	80196bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80196ae:	f7ff fa35 	bl	8018b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80196b2:	68f9      	ldr	r1, [r7, #12]
 80196b4:	6878      	ldr	r0, [r7, #4]
 80196b6:	f7ff ff85 	bl	80195c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80196ba:	e024      	b.n	8019706 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80196bc:	683b      	ldr	r3, [r7, #0]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d008      	beq.n	80196d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80196c2:	4b13      	ldr	r3, [pc, #76]	; (8019710 <prvProcessTimerOrBlockTask+0x90>)
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d101      	bne.n	80196d0 <prvProcessTimerOrBlockTask+0x50>
 80196cc:	2301      	movs	r3, #1
 80196ce:	e000      	b.n	80196d2 <prvProcessTimerOrBlockTask+0x52>
 80196d0:	2300      	movs	r3, #0
 80196d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80196d4:	4b0f      	ldr	r3, [pc, #60]	; (8019714 <prvProcessTimerOrBlockTask+0x94>)
 80196d6:	6818      	ldr	r0, [r3, #0]
 80196d8:	687a      	ldr	r2, [r7, #4]
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	1ad3      	subs	r3, r2, r3
 80196de:	683a      	ldr	r2, [r7, #0]
 80196e0:	4619      	mov	r1, r3
 80196e2:	f7fe ff7d 	bl	80185e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80196e6:	f7ff fa19 	bl	8018b1c <xTaskResumeAll>
 80196ea:	4603      	mov	r3, r0
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d10a      	bne.n	8019706 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80196f0:	4b09      	ldr	r3, [pc, #36]	; (8019718 <prvProcessTimerOrBlockTask+0x98>)
 80196f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80196f6:	601a      	str	r2, [r3, #0]
 80196f8:	f3bf 8f4f 	dsb	sy
 80196fc:	f3bf 8f6f 	isb	sy
}
 8019700:	e001      	b.n	8019706 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019702:	f7ff fa0b 	bl	8018b1c <xTaskResumeAll>
}
 8019706:	bf00      	nop
 8019708:	3710      	adds	r7, #16
 801970a:	46bd      	mov	sp, r7
 801970c:	bd80      	pop	{r7, pc}
 801970e:	bf00      	nop
 8019710:	200017dc 	.word	0x200017dc
 8019714:	200017e0 	.word	0x200017e0
 8019718:	e000ed04 	.word	0xe000ed04

0801971c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801971c:	b480      	push	{r7}
 801971e:	b085      	sub	sp, #20
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019724:	4b0e      	ldr	r3, [pc, #56]	; (8019760 <prvGetNextExpireTime+0x44>)
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d101      	bne.n	8019732 <prvGetNextExpireTime+0x16>
 801972e:	2201      	movs	r2, #1
 8019730:	e000      	b.n	8019734 <prvGetNextExpireTime+0x18>
 8019732:	2200      	movs	r2, #0
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d105      	bne.n	801974c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019740:	4b07      	ldr	r3, [pc, #28]	; (8019760 <prvGetNextExpireTime+0x44>)
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	68db      	ldr	r3, [r3, #12]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	60fb      	str	r3, [r7, #12]
 801974a:	e001      	b.n	8019750 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801974c:	2300      	movs	r3, #0
 801974e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019750:	68fb      	ldr	r3, [r7, #12]
}
 8019752:	4618      	mov	r0, r3
 8019754:	3714      	adds	r7, #20
 8019756:	46bd      	mov	sp, r7
 8019758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975c:	4770      	bx	lr
 801975e:	bf00      	nop
 8019760:	200017d8 	.word	0x200017d8

08019764 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b084      	sub	sp, #16
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801976c:	f7ff fa74 	bl	8018c58 <xTaskGetTickCount>
 8019770:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019772:	4b0b      	ldr	r3, [pc, #44]	; (80197a0 <prvSampleTimeNow+0x3c>)
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	68fa      	ldr	r2, [r7, #12]
 8019778:	429a      	cmp	r2, r3
 801977a:	d205      	bcs.n	8019788 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801977c:	f000 f936 	bl	80199ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2201      	movs	r2, #1
 8019784:	601a      	str	r2, [r3, #0]
 8019786:	e002      	b.n	801978e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	2200      	movs	r2, #0
 801978c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801978e:	4a04      	ldr	r2, [pc, #16]	; (80197a0 <prvSampleTimeNow+0x3c>)
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019794:	68fb      	ldr	r3, [r7, #12]
}
 8019796:	4618      	mov	r0, r3
 8019798:	3710      	adds	r7, #16
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}
 801979e:	bf00      	nop
 80197a0:	200017e8 	.word	0x200017e8

080197a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b086      	sub	sp, #24
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	60f8      	str	r0, [r7, #12]
 80197ac:	60b9      	str	r1, [r7, #8]
 80197ae:	607a      	str	r2, [r7, #4]
 80197b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80197b2:	2300      	movs	r3, #0
 80197b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	68ba      	ldr	r2, [r7, #8]
 80197ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	68fa      	ldr	r2, [r7, #12]
 80197c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80197c2:	68ba      	ldr	r2, [r7, #8]
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	429a      	cmp	r2, r3
 80197c8:	d812      	bhi.n	80197f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80197ca:	687a      	ldr	r2, [r7, #4]
 80197cc:	683b      	ldr	r3, [r7, #0]
 80197ce:	1ad2      	subs	r2, r2, r3
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	699b      	ldr	r3, [r3, #24]
 80197d4:	429a      	cmp	r2, r3
 80197d6:	d302      	bcc.n	80197de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80197d8:	2301      	movs	r3, #1
 80197da:	617b      	str	r3, [r7, #20]
 80197dc:	e01b      	b.n	8019816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80197de:	4b10      	ldr	r3, [pc, #64]	; (8019820 <prvInsertTimerInActiveList+0x7c>)
 80197e0:	681a      	ldr	r2, [r3, #0]
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	3304      	adds	r3, #4
 80197e6:	4619      	mov	r1, r3
 80197e8:	4610      	mov	r0, r2
 80197ea:	f7fe f9de 	bl	8017baa <vListInsert>
 80197ee:	e012      	b.n	8019816 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80197f0:	687a      	ldr	r2, [r7, #4]
 80197f2:	683b      	ldr	r3, [r7, #0]
 80197f4:	429a      	cmp	r2, r3
 80197f6:	d206      	bcs.n	8019806 <prvInsertTimerInActiveList+0x62>
 80197f8:	68ba      	ldr	r2, [r7, #8]
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	429a      	cmp	r2, r3
 80197fe:	d302      	bcc.n	8019806 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019800:	2301      	movs	r3, #1
 8019802:	617b      	str	r3, [r7, #20]
 8019804:	e007      	b.n	8019816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019806:	4b07      	ldr	r3, [pc, #28]	; (8019824 <prvInsertTimerInActiveList+0x80>)
 8019808:	681a      	ldr	r2, [r3, #0]
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	3304      	adds	r3, #4
 801980e:	4619      	mov	r1, r3
 8019810:	4610      	mov	r0, r2
 8019812:	f7fe f9ca 	bl	8017baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019816:	697b      	ldr	r3, [r7, #20]
}
 8019818:	4618      	mov	r0, r3
 801981a:	3718      	adds	r7, #24
 801981c:	46bd      	mov	sp, r7
 801981e:	bd80      	pop	{r7, pc}
 8019820:	200017dc 	.word	0x200017dc
 8019824:	200017d8 	.word	0x200017d8

08019828 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b08e      	sub	sp, #56	; 0x38
 801982c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801982e:	e0ca      	b.n	80199c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2b00      	cmp	r3, #0
 8019834:	da18      	bge.n	8019868 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019836:	1d3b      	adds	r3, r7, #4
 8019838:	3304      	adds	r3, #4
 801983a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801983e:	2b00      	cmp	r3, #0
 8019840:	d10a      	bne.n	8019858 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019846:	f383 8811 	msr	BASEPRI, r3
 801984a:	f3bf 8f6f 	isb	sy
 801984e:	f3bf 8f4f 	dsb	sy
 8019852:	61fb      	str	r3, [r7, #28]
}
 8019854:	bf00      	nop
 8019856:	e7fe      	b.n	8019856 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801985e:	6850      	ldr	r0, [r2, #4]
 8019860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019862:	6892      	ldr	r2, [r2, #8]
 8019864:	4611      	mov	r1, r2
 8019866:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	2b00      	cmp	r3, #0
 801986c:	f2c0 80aa 	blt.w	80199c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019876:	695b      	ldr	r3, [r3, #20]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d004      	beq.n	8019886 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801987e:	3304      	adds	r3, #4
 8019880:	4618      	mov	r0, r3
 8019882:	f7fe f9cb 	bl	8017c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019886:	463b      	mov	r3, r7
 8019888:	4618      	mov	r0, r3
 801988a:	f7ff ff6b 	bl	8019764 <prvSampleTimeNow>
 801988e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	2b09      	cmp	r3, #9
 8019894:	f200 8097 	bhi.w	80199c6 <prvProcessReceivedCommands+0x19e>
 8019898:	a201      	add	r2, pc, #4	; (adr r2, 80198a0 <prvProcessReceivedCommands+0x78>)
 801989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801989e:	bf00      	nop
 80198a0:	080198c9 	.word	0x080198c9
 80198a4:	080198c9 	.word	0x080198c9
 80198a8:	080198c9 	.word	0x080198c9
 80198ac:	0801993d 	.word	0x0801993d
 80198b0:	08019951 	.word	0x08019951
 80198b4:	0801999b 	.word	0x0801999b
 80198b8:	080198c9 	.word	0x080198c9
 80198bc:	080198c9 	.word	0x080198c9
 80198c0:	0801993d 	.word	0x0801993d
 80198c4:	08019951 	.word	0x08019951
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80198c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198ce:	f043 0301 	orr.w	r3, r3, #1
 80198d2:	b2da      	uxtb	r2, r3
 80198d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80198da:	68ba      	ldr	r2, [r7, #8]
 80198dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198de:	699b      	ldr	r3, [r3, #24]
 80198e0:	18d1      	adds	r1, r2, r3
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198e8:	f7ff ff5c 	bl	80197a4 <prvInsertTimerInActiveList>
 80198ec:	4603      	mov	r3, r0
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d069      	beq.n	80199c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80198f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198f4:	6a1b      	ldr	r3, [r3, #32]
 80198f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80198fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019900:	f003 0304 	and.w	r3, r3, #4
 8019904:	2b00      	cmp	r3, #0
 8019906:	d05e      	beq.n	80199c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019908:	68ba      	ldr	r2, [r7, #8]
 801990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801990c:	699b      	ldr	r3, [r3, #24]
 801990e:	441a      	add	r2, r3
 8019910:	2300      	movs	r3, #0
 8019912:	9300      	str	r3, [sp, #0]
 8019914:	2300      	movs	r3, #0
 8019916:	2100      	movs	r1, #0
 8019918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801991a:	f7ff fe05 	bl	8019528 <xTimerGenericCommand>
 801991e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019920:	6a3b      	ldr	r3, [r7, #32]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d14f      	bne.n	80199c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801992a:	f383 8811 	msr	BASEPRI, r3
 801992e:	f3bf 8f6f 	isb	sy
 8019932:	f3bf 8f4f 	dsb	sy
 8019936:	61bb      	str	r3, [r7, #24]
}
 8019938:	bf00      	nop
 801993a:	e7fe      	b.n	801993a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801993e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019942:	f023 0301 	bic.w	r3, r3, #1
 8019946:	b2da      	uxtb	r2, r3
 8019948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801994a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801994e:	e03a      	b.n	80199c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019956:	f043 0301 	orr.w	r3, r3, #1
 801995a:	b2da      	uxtb	r2, r3
 801995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801995e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019962:	68ba      	ldr	r2, [r7, #8]
 8019964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019966:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801996a:	699b      	ldr	r3, [r3, #24]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d10a      	bne.n	8019986 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019974:	f383 8811 	msr	BASEPRI, r3
 8019978:	f3bf 8f6f 	isb	sy
 801997c:	f3bf 8f4f 	dsb	sy
 8019980:	617b      	str	r3, [r7, #20]
}
 8019982:	bf00      	nop
 8019984:	e7fe      	b.n	8019984 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019988:	699a      	ldr	r2, [r3, #24]
 801998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801998c:	18d1      	adds	r1, r2, r3
 801998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019994:	f7ff ff06 	bl	80197a4 <prvInsertTimerInActiveList>
					break;
 8019998:	e015      	b.n	80199c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801999c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80199a0:	f003 0302 	and.w	r3, r3, #2
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d103      	bne.n	80199b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80199a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80199aa:	f000 fbe1 	bl	801a170 <vPortFree>
 80199ae:	e00a      	b.n	80199c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80199b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80199b6:	f023 0301 	bic.w	r3, r3, #1
 80199ba:	b2da      	uxtb	r2, r3
 80199bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80199c2:	e000      	b.n	80199c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80199c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80199c6:	4b08      	ldr	r3, [pc, #32]	; (80199e8 <prvProcessReceivedCommands+0x1c0>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	1d39      	adds	r1, r7, #4
 80199cc:	2200      	movs	r2, #0
 80199ce:	4618      	mov	r0, r3
 80199d0:	f7fe fbec 	bl	80181ac <xQueueReceive>
 80199d4:	4603      	mov	r3, r0
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	f47f af2a 	bne.w	8019830 <prvProcessReceivedCommands+0x8>
	}
}
 80199dc:	bf00      	nop
 80199de:	bf00      	nop
 80199e0:	3730      	adds	r7, #48	; 0x30
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}
 80199e6:	bf00      	nop
 80199e8:	200017e0 	.word	0x200017e0

080199ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b088      	sub	sp, #32
 80199f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80199f2:	e048      	b.n	8019a86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80199f4:	4b2d      	ldr	r3, [pc, #180]	; (8019aac <prvSwitchTimerLists+0xc0>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	68db      	ldr	r3, [r3, #12]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80199fe:	4b2b      	ldr	r3, [pc, #172]	; (8019aac <prvSwitchTimerLists+0xc0>)
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	68db      	ldr	r3, [r3, #12]
 8019a04:	68db      	ldr	r3, [r3, #12]
 8019a06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	3304      	adds	r3, #4
 8019a0c:	4618      	mov	r0, r3
 8019a0e:	f7fe f905 	bl	8017c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	6a1b      	ldr	r3, [r3, #32]
 8019a16:	68f8      	ldr	r0, [r7, #12]
 8019a18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a20:	f003 0304 	and.w	r3, r3, #4
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d02e      	beq.n	8019a86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	699b      	ldr	r3, [r3, #24]
 8019a2c:	693a      	ldr	r2, [r7, #16]
 8019a2e:	4413      	add	r3, r2
 8019a30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019a32:	68ba      	ldr	r2, [r7, #8]
 8019a34:	693b      	ldr	r3, [r7, #16]
 8019a36:	429a      	cmp	r2, r3
 8019a38:	d90e      	bls.n	8019a58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	68ba      	ldr	r2, [r7, #8]
 8019a3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	68fa      	ldr	r2, [r7, #12]
 8019a44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019a46:	4b19      	ldr	r3, [pc, #100]	; (8019aac <prvSwitchTimerLists+0xc0>)
 8019a48:	681a      	ldr	r2, [r3, #0]
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	3304      	adds	r3, #4
 8019a4e:	4619      	mov	r1, r3
 8019a50:	4610      	mov	r0, r2
 8019a52:	f7fe f8aa 	bl	8017baa <vListInsert>
 8019a56:	e016      	b.n	8019a86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019a58:	2300      	movs	r3, #0
 8019a5a:	9300      	str	r3, [sp, #0]
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	693a      	ldr	r2, [r7, #16]
 8019a60:	2100      	movs	r1, #0
 8019a62:	68f8      	ldr	r0, [r7, #12]
 8019a64:	f7ff fd60 	bl	8019528 <xTimerGenericCommand>
 8019a68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d10a      	bne.n	8019a86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a74:	f383 8811 	msr	BASEPRI, r3
 8019a78:	f3bf 8f6f 	isb	sy
 8019a7c:	f3bf 8f4f 	dsb	sy
 8019a80:	603b      	str	r3, [r7, #0]
}
 8019a82:	bf00      	nop
 8019a84:	e7fe      	b.n	8019a84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019a86:	4b09      	ldr	r3, [pc, #36]	; (8019aac <prvSwitchTimerLists+0xc0>)
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d1b1      	bne.n	80199f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019a90:	4b06      	ldr	r3, [pc, #24]	; (8019aac <prvSwitchTimerLists+0xc0>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019a96:	4b06      	ldr	r3, [pc, #24]	; (8019ab0 <prvSwitchTimerLists+0xc4>)
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	4a04      	ldr	r2, [pc, #16]	; (8019aac <prvSwitchTimerLists+0xc0>)
 8019a9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019a9e:	4a04      	ldr	r2, [pc, #16]	; (8019ab0 <prvSwitchTimerLists+0xc4>)
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	6013      	str	r3, [r2, #0]
}
 8019aa4:	bf00      	nop
 8019aa6:	3718      	adds	r7, #24
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}
 8019aac:	200017d8 	.word	0x200017d8
 8019ab0:	200017dc 	.word	0x200017dc

08019ab4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b082      	sub	sp, #8
 8019ab8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019aba:	f000 f96b 	bl	8019d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019abe:	4b15      	ldr	r3, [pc, #84]	; (8019b14 <prvCheckForValidListAndQueue+0x60>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d120      	bne.n	8019b08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019ac6:	4814      	ldr	r0, [pc, #80]	; (8019b18 <prvCheckForValidListAndQueue+0x64>)
 8019ac8:	f7fe f81e 	bl	8017b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019acc:	4813      	ldr	r0, [pc, #76]	; (8019b1c <prvCheckForValidListAndQueue+0x68>)
 8019ace:	f7fe f81b 	bl	8017b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019ad2:	4b13      	ldr	r3, [pc, #76]	; (8019b20 <prvCheckForValidListAndQueue+0x6c>)
 8019ad4:	4a10      	ldr	r2, [pc, #64]	; (8019b18 <prvCheckForValidListAndQueue+0x64>)
 8019ad6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019ad8:	4b12      	ldr	r3, [pc, #72]	; (8019b24 <prvCheckForValidListAndQueue+0x70>)
 8019ada:	4a10      	ldr	r2, [pc, #64]	; (8019b1c <prvCheckForValidListAndQueue+0x68>)
 8019adc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019ade:	2300      	movs	r3, #0
 8019ae0:	9300      	str	r3, [sp, #0]
 8019ae2:	4b11      	ldr	r3, [pc, #68]	; (8019b28 <prvCheckForValidListAndQueue+0x74>)
 8019ae4:	4a11      	ldr	r2, [pc, #68]	; (8019b2c <prvCheckForValidListAndQueue+0x78>)
 8019ae6:	2110      	movs	r1, #16
 8019ae8:	200a      	movs	r0, #10
 8019aea:	f7fe f929 	bl	8017d40 <xQueueGenericCreateStatic>
 8019aee:	4603      	mov	r3, r0
 8019af0:	4a08      	ldr	r2, [pc, #32]	; (8019b14 <prvCheckForValidListAndQueue+0x60>)
 8019af2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019af4:	4b07      	ldr	r3, [pc, #28]	; (8019b14 <prvCheckForValidListAndQueue+0x60>)
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d005      	beq.n	8019b08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019afc:	4b05      	ldr	r3, [pc, #20]	; (8019b14 <prvCheckForValidListAndQueue+0x60>)
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	490b      	ldr	r1, [pc, #44]	; (8019b30 <prvCheckForValidListAndQueue+0x7c>)
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7fe fd42 	bl	801858c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019b08:	f000 f974 	bl	8019df4 <vPortExitCritical>
}
 8019b0c:	bf00      	nop
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}
 8019b12:	bf00      	nop
 8019b14:	200017e0 	.word	0x200017e0
 8019b18:	200017b0 	.word	0x200017b0
 8019b1c:	200017c4 	.word	0x200017c4
 8019b20:	200017d8 	.word	0x200017d8
 8019b24:	200017dc 	.word	0x200017dc
 8019b28:	2000188c 	.word	0x2000188c
 8019b2c:	200017ec 	.word	0x200017ec
 8019b30:	0801f1b0 	.word	0x0801f1b0

08019b34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019b34:	b480      	push	{r7}
 8019b36:	b085      	sub	sp, #20
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	60f8      	str	r0, [r7, #12]
 8019b3c:	60b9      	str	r1, [r7, #8]
 8019b3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	3b04      	subs	r3, #4
 8019b44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	3b04      	subs	r3, #4
 8019b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019b54:	68bb      	ldr	r3, [r7, #8]
 8019b56:	f023 0201 	bic.w	r2, r3, #1
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	3b04      	subs	r3, #4
 8019b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019b64:	4a0c      	ldr	r2, [pc, #48]	; (8019b98 <pxPortInitialiseStack+0x64>)
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	3b14      	subs	r3, #20
 8019b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019b70:	687a      	ldr	r2, [r7, #4]
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	3b04      	subs	r3, #4
 8019b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	f06f 0202 	mvn.w	r2, #2
 8019b82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	3b20      	subs	r3, #32
 8019b88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019b8a:	68fb      	ldr	r3, [r7, #12]
}
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	3714      	adds	r7, #20
 8019b90:	46bd      	mov	sp, r7
 8019b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b96:	4770      	bx	lr
 8019b98:	08019b9d 	.word	0x08019b9d

08019b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019b9c:	b480      	push	{r7}
 8019b9e:	b085      	sub	sp, #20
 8019ba0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019ba6:	4b12      	ldr	r3, [pc, #72]	; (8019bf0 <prvTaskExitError+0x54>)
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bae:	d00a      	beq.n	8019bc6 <prvTaskExitError+0x2a>
	__asm volatile
 8019bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bb4:	f383 8811 	msr	BASEPRI, r3
 8019bb8:	f3bf 8f6f 	isb	sy
 8019bbc:	f3bf 8f4f 	dsb	sy
 8019bc0:	60fb      	str	r3, [r7, #12]
}
 8019bc2:	bf00      	nop
 8019bc4:	e7fe      	b.n	8019bc4 <prvTaskExitError+0x28>
	__asm volatile
 8019bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bca:	f383 8811 	msr	BASEPRI, r3
 8019bce:	f3bf 8f6f 	isb	sy
 8019bd2:	f3bf 8f4f 	dsb	sy
 8019bd6:	60bb      	str	r3, [r7, #8]
}
 8019bd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019bda:	bf00      	nop
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d0fc      	beq.n	8019bdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019be2:	bf00      	nop
 8019be4:	bf00      	nop
 8019be6:	3714      	adds	r7, #20
 8019be8:	46bd      	mov	sp, r7
 8019bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bee:	4770      	bx	lr
 8019bf0:	2000000c 	.word	0x2000000c
	...

08019c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019c00:	4b07      	ldr	r3, [pc, #28]	; (8019c20 <pxCurrentTCBConst2>)
 8019c02:	6819      	ldr	r1, [r3, #0]
 8019c04:	6808      	ldr	r0, [r1, #0]
 8019c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c0a:	f380 8809 	msr	PSP, r0
 8019c0e:	f3bf 8f6f 	isb	sy
 8019c12:	f04f 0000 	mov.w	r0, #0
 8019c16:	f380 8811 	msr	BASEPRI, r0
 8019c1a:	4770      	bx	lr
 8019c1c:	f3af 8000 	nop.w

08019c20 <pxCurrentTCBConst2>:
 8019c20:	200012b0 	.word	0x200012b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019c24:	bf00      	nop
 8019c26:	bf00      	nop

08019c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019c28:	4808      	ldr	r0, [pc, #32]	; (8019c4c <prvPortStartFirstTask+0x24>)
 8019c2a:	6800      	ldr	r0, [r0, #0]
 8019c2c:	6800      	ldr	r0, [r0, #0]
 8019c2e:	f380 8808 	msr	MSP, r0
 8019c32:	f04f 0000 	mov.w	r0, #0
 8019c36:	f380 8814 	msr	CONTROL, r0
 8019c3a:	b662      	cpsie	i
 8019c3c:	b661      	cpsie	f
 8019c3e:	f3bf 8f4f 	dsb	sy
 8019c42:	f3bf 8f6f 	isb	sy
 8019c46:	df00      	svc	0
 8019c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019c4a:	bf00      	nop
 8019c4c:	e000ed08 	.word	0xe000ed08

08019c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b086      	sub	sp, #24
 8019c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019c56:	4b46      	ldr	r3, [pc, #280]	; (8019d70 <xPortStartScheduler+0x120>)
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	4a46      	ldr	r2, [pc, #280]	; (8019d74 <xPortStartScheduler+0x124>)
 8019c5c:	4293      	cmp	r3, r2
 8019c5e:	d10a      	bne.n	8019c76 <xPortStartScheduler+0x26>
	__asm volatile
 8019c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c64:	f383 8811 	msr	BASEPRI, r3
 8019c68:	f3bf 8f6f 	isb	sy
 8019c6c:	f3bf 8f4f 	dsb	sy
 8019c70:	613b      	str	r3, [r7, #16]
}
 8019c72:	bf00      	nop
 8019c74:	e7fe      	b.n	8019c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019c76:	4b3e      	ldr	r3, [pc, #248]	; (8019d70 <xPortStartScheduler+0x120>)
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	4a3f      	ldr	r2, [pc, #252]	; (8019d78 <xPortStartScheduler+0x128>)
 8019c7c:	4293      	cmp	r3, r2
 8019c7e:	d10a      	bne.n	8019c96 <xPortStartScheduler+0x46>
	__asm volatile
 8019c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c84:	f383 8811 	msr	BASEPRI, r3
 8019c88:	f3bf 8f6f 	isb	sy
 8019c8c:	f3bf 8f4f 	dsb	sy
 8019c90:	60fb      	str	r3, [r7, #12]
}
 8019c92:	bf00      	nop
 8019c94:	e7fe      	b.n	8019c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019c96:	4b39      	ldr	r3, [pc, #228]	; (8019d7c <xPortStartScheduler+0x12c>)
 8019c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	781b      	ldrb	r3, [r3, #0]
 8019c9e:	b2db      	uxtb	r3, r3
 8019ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019ca2:	697b      	ldr	r3, [r7, #20]
 8019ca4:	22ff      	movs	r2, #255	; 0xff
 8019ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019ca8:	697b      	ldr	r3, [r7, #20]
 8019caa:	781b      	ldrb	r3, [r3, #0]
 8019cac:	b2db      	uxtb	r3, r3
 8019cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019cb0:	78fb      	ldrb	r3, [r7, #3]
 8019cb2:	b2db      	uxtb	r3, r3
 8019cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019cb8:	b2da      	uxtb	r2, r3
 8019cba:	4b31      	ldr	r3, [pc, #196]	; (8019d80 <xPortStartScheduler+0x130>)
 8019cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019cbe:	4b31      	ldr	r3, [pc, #196]	; (8019d84 <xPortStartScheduler+0x134>)
 8019cc0:	2207      	movs	r2, #7
 8019cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019cc4:	e009      	b.n	8019cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019cc6:	4b2f      	ldr	r3, [pc, #188]	; (8019d84 <xPortStartScheduler+0x134>)
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	3b01      	subs	r3, #1
 8019ccc:	4a2d      	ldr	r2, [pc, #180]	; (8019d84 <xPortStartScheduler+0x134>)
 8019cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019cd0:	78fb      	ldrb	r3, [r7, #3]
 8019cd2:	b2db      	uxtb	r3, r3
 8019cd4:	005b      	lsls	r3, r3, #1
 8019cd6:	b2db      	uxtb	r3, r3
 8019cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019cda:	78fb      	ldrb	r3, [r7, #3]
 8019cdc:	b2db      	uxtb	r3, r3
 8019cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019ce2:	2b80      	cmp	r3, #128	; 0x80
 8019ce4:	d0ef      	beq.n	8019cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019ce6:	4b27      	ldr	r3, [pc, #156]	; (8019d84 <xPortStartScheduler+0x134>)
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	f1c3 0307 	rsb	r3, r3, #7
 8019cee:	2b04      	cmp	r3, #4
 8019cf0:	d00a      	beq.n	8019d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8019cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cf6:	f383 8811 	msr	BASEPRI, r3
 8019cfa:	f3bf 8f6f 	isb	sy
 8019cfe:	f3bf 8f4f 	dsb	sy
 8019d02:	60bb      	str	r3, [r7, #8]
}
 8019d04:	bf00      	nop
 8019d06:	e7fe      	b.n	8019d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019d08:	4b1e      	ldr	r3, [pc, #120]	; (8019d84 <xPortStartScheduler+0x134>)
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	021b      	lsls	r3, r3, #8
 8019d0e:	4a1d      	ldr	r2, [pc, #116]	; (8019d84 <xPortStartScheduler+0x134>)
 8019d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019d12:	4b1c      	ldr	r3, [pc, #112]	; (8019d84 <xPortStartScheduler+0x134>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019d1a:	4a1a      	ldr	r2, [pc, #104]	; (8019d84 <xPortStartScheduler+0x134>)
 8019d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	b2da      	uxtb	r2, r3
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019d26:	4b18      	ldr	r3, [pc, #96]	; (8019d88 <xPortStartScheduler+0x138>)
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	4a17      	ldr	r2, [pc, #92]	; (8019d88 <xPortStartScheduler+0x138>)
 8019d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019d32:	4b15      	ldr	r3, [pc, #84]	; (8019d88 <xPortStartScheduler+0x138>)
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	4a14      	ldr	r2, [pc, #80]	; (8019d88 <xPortStartScheduler+0x138>)
 8019d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019d3e:	f000 f8dd 	bl	8019efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019d42:	4b12      	ldr	r3, [pc, #72]	; (8019d8c <xPortStartScheduler+0x13c>)
 8019d44:	2200      	movs	r2, #0
 8019d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019d48:	f000 f8fc 	bl	8019f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019d4c:	4b10      	ldr	r3, [pc, #64]	; (8019d90 <xPortStartScheduler+0x140>)
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	4a0f      	ldr	r2, [pc, #60]	; (8019d90 <xPortStartScheduler+0x140>)
 8019d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019d58:	f7ff ff66 	bl	8019c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019d5c:	f7ff f846 	bl	8018dec <vTaskSwitchContext>
	prvTaskExitError();
 8019d60:	f7ff ff1c 	bl	8019b9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019d64:	2300      	movs	r3, #0
}
 8019d66:	4618      	mov	r0, r3
 8019d68:	3718      	adds	r7, #24
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd80      	pop	{r7, pc}
 8019d6e:	bf00      	nop
 8019d70:	e000ed00 	.word	0xe000ed00
 8019d74:	410fc271 	.word	0x410fc271
 8019d78:	410fc270 	.word	0x410fc270
 8019d7c:	e000e400 	.word	0xe000e400
 8019d80:	200018dc 	.word	0x200018dc
 8019d84:	200018e0 	.word	0x200018e0
 8019d88:	e000ed20 	.word	0xe000ed20
 8019d8c:	2000000c 	.word	0x2000000c
 8019d90:	e000ef34 	.word	0xe000ef34

08019d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019d94:	b480      	push	{r7}
 8019d96:	b083      	sub	sp, #12
 8019d98:	af00      	add	r7, sp, #0
	__asm volatile
 8019d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d9e:	f383 8811 	msr	BASEPRI, r3
 8019da2:	f3bf 8f6f 	isb	sy
 8019da6:	f3bf 8f4f 	dsb	sy
 8019daa:	607b      	str	r3, [r7, #4]
}
 8019dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019dae:	4b0f      	ldr	r3, [pc, #60]	; (8019dec <vPortEnterCritical+0x58>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	3301      	adds	r3, #1
 8019db4:	4a0d      	ldr	r2, [pc, #52]	; (8019dec <vPortEnterCritical+0x58>)
 8019db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019db8:	4b0c      	ldr	r3, [pc, #48]	; (8019dec <vPortEnterCritical+0x58>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	2b01      	cmp	r3, #1
 8019dbe:	d10f      	bne.n	8019de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019dc0:	4b0b      	ldr	r3, [pc, #44]	; (8019df0 <vPortEnterCritical+0x5c>)
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	b2db      	uxtb	r3, r3
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d00a      	beq.n	8019de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8019dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dce:	f383 8811 	msr	BASEPRI, r3
 8019dd2:	f3bf 8f6f 	isb	sy
 8019dd6:	f3bf 8f4f 	dsb	sy
 8019dda:	603b      	str	r3, [r7, #0]
}
 8019ddc:	bf00      	nop
 8019dde:	e7fe      	b.n	8019dde <vPortEnterCritical+0x4a>
	}
}
 8019de0:	bf00      	nop
 8019de2:	370c      	adds	r7, #12
 8019de4:	46bd      	mov	sp, r7
 8019de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dea:	4770      	bx	lr
 8019dec:	2000000c 	.word	0x2000000c
 8019df0:	e000ed04 	.word	0xe000ed04

08019df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019df4:	b480      	push	{r7}
 8019df6:	b083      	sub	sp, #12
 8019df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019dfa:	4b12      	ldr	r3, [pc, #72]	; (8019e44 <vPortExitCritical+0x50>)
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d10a      	bne.n	8019e18 <vPortExitCritical+0x24>
	__asm volatile
 8019e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e06:	f383 8811 	msr	BASEPRI, r3
 8019e0a:	f3bf 8f6f 	isb	sy
 8019e0e:	f3bf 8f4f 	dsb	sy
 8019e12:	607b      	str	r3, [r7, #4]
}
 8019e14:	bf00      	nop
 8019e16:	e7fe      	b.n	8019e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019e18:	4b0a      	ldr	r3, [pc, #40]	; (8019e44 <vPortExitCritical+0x50>)
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	3b01      	subs	r3, #1
 8019e1e:	4a09      	ldr	r2, [pc, #36]	; (8019e44 <vPortExitCritical+0x50>)
 8019e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019e22:	4b08      	ldr	r3, [pc, #32]	; (8019e44 <vPortExitCritical+0x50>)
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d105      	bne.n	8019e36 <vPortExitCritical+0x42>
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019e2e:	683b      	ldr	r3, [r7, #0]
 8019e30:	f383 8811 	msr	BASEPRI, r3
}
 8019e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019e36:	bf00      	nop
 8019e38:	370c      	adds	r7, #12
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e40:	4770      	bx	lr
 8019e42:	bf00      	nop
 8019e44:	2000000c 	.word	0x2000000c
	...

08019e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019e50:	f3ef 8009 	mrs	r0, PSP
 8019e54:	f3bf 8f6f 	isb	sy
 8019e58:	4b15      	ldr	r3, [pc, #84]	; (8019eb0 <pxCurrentTCBConst>)
 8019e5a:	681a      	ldr	r2, [r3, #0]
 8019e5c:	f01e 0f10 	tst.w	lr, #16
 8019e60:	bf08      	it	eq
 8019e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e6a:	6010      	str	r0, [r2, #0]
 8019e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019e74:	f380 8811 	msr	BASEPRI, r0
 8019e78:	f3bf 8f4f 	dsb	sy
 8019e7c:	f3bf 8f6f 	isb	sy
 8019e80:	f7fe ffb4 	bl	8018dec <vTaskSwitchContext>
 8019e84:	f04f 0000 	mov.w	r0, #0
 8019e88:	f380 8811 	msr	BASEPRI, r0
 8019e8c:	bc09      	pop	{r0, r3}
 8019e8e:	6819      	ldr	r1, [r3, #0]
 8019e90:	6808      	ldr	r0, [r1, #0]
 8019e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e96:	f01e 0f10 	tst.w	lr, #16
 8019e9a:	bf08      	it	eq
 8019e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019ea0:	f380 8809 	msr	PSP, r0
 8019ea4:	f3bf 8f6f 	isb	sy
 8019ea8:	4770      	bx	lr
 8019eaa:	bf00      	nop
 8019eac:	f3af 8000 	nop.w

08019eb0 <pxCurrentTCBConst>:
 8019eb0:	200012b0 	.word	0x200012b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019eb4:	bf00      	nop
 8019eb6:	bf00      	nop

08019eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b082      	sub	sp, #8
 8019ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8019ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ec2:	f383 8811 	msr	BASEPRI, r3
 8019ec6:	f3bf 8f6f 	isb	sy
 8019eca:	f3bf 8f4f 	dsb	sy
 8019ece:	607b      	str	r3, [r7, #4]
}
 8019ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019ed2:	f7fe fed1 	bl	8018c78 <xTaskIncrementTick>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d003      	beq.n	8019ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019edc:	4b06      	ldr	r3, [pc, #24]	; (8019ef8 <xPortSysTickHandler+0x40>)
 8019ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019ee2:	601a      	str	r2, [r3, #0]
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019ee8:	683b      	ldr	r3, [r7, #0]
 8019eea:	f383 8811 	msr	BASEPRI, r3
}
 8019eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019ef0:	bf00      	nop
 8019ef2:	3708      	adds	r7, #8
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bd80      	pop	{r7, pc}
 8019ef8:	e000ed04 	.word	0xe000ed04

08019efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019efc:	b480      	push	{r7}
 8019efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019f00:	4b0b      	ldr	r3, [pc, #44]	; (8019f30 <vPortSetupTimerInterrupt+0x34>)
 8019f02:	2200      	movs	r2, #0
 8019f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019f06:	4b0b      	ldr	r3, [pc, #44]	; (8019f34 <vPortSetupTimerInterrupt+0x38>)
 8019f08:	2200      	movs	r2, #0
 8019f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019f0c:	4b0a      	ldr	r3, [pc, #40]	; (8019f38 <vPortSetupTimerInterrupt+0x3c>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	4a0a      	ldr	r2, [pc, #40]	; (8019f3c <vPortSetupTimerInterrupt+0x40>)
 8019f12:	fba2 2303 	umull	r2, r3, r2, r3
 8019f16:	099b      	lsrs	r3, r3, #6
 8019f18:	4a09      	ldr	r2, [pc, #36]	; (8019f40 <vPortSetupTimerInterrupt+0x44>)
 8019f1a:	3b01      	subs	r3, #1
 8019f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019f1e:	4b04      	ldr	r3, [pc, #16]	; (8019f30 <vPortSetupTimerInterrupt+0x34>)
 8019f20:	2207      	movs	r2, #7
 8019f22:	601a      	str	r2, [r3, #0]
}
 8019f24:	bf00      	nop
 8019f26:	46bd      	mov	sp, r7
 8019f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f2c:	4770      	bx	lr
 8019f2e:	bf00      	nop
 8019f30:	e000e010 	.word	0xe000e010
 8019f34:	e000e018 	.word	0xe000e018
 8019f38:	20000000 	.word	0x20000000
 8019f3c:	10624dd3 	.word	0x10624dd3
 8019f40:	e000e014 	.word	0xe000e014

08019f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019f54 <vPortEnableVFP+0x10>
 8019f48:	6801      	ldr	r1, [r0, #0]
 8019f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019f4e:	6001      	str	r1, [r0, #0]
 8019f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019f52:	bf00      	nop
 8019f54:	e000ed88 	.word	0xe000ed88

08019f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019f58:	b480      	push	{r7}
 8019f5a:	b085      	sub	sp, #20
 8019f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019f5e:	f3ef 8305 	mrs	r3, IPSR
 8019f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	2b0f      	cmp	r3, #15
 8019f68:	d914      	bls.n	8019f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019f6a:	4a17      	ldr	r2, [pc, #92]	; (8019fc8 <vPortValidateInterruptPriority+0x70>)
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	4413      	add	r3, r2
 8019f70:	781b      	ldrb	r3, [r3, #0]
 8019f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019f74:	4b15      	ldr	r3, [pc, #84]	; (8019fcc <vPortValidateInterruptPriority+0x74>)
 8019f76:	781b      	ldrb	r3, [r3, #0]
 8019f78:	7afa      	ldrb	r2, [r7, #11]
 8019f7a:	429a      	cmp	r2, r3
 8019f7c:	d20a      	bcs.n	8019f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f82:	f383 8811 	msr	BASEPRI, r3
 8019f86:	f3bf 8f6f 	isb	sy
 8019f8a:	f3bf 8f4f 	dsb	sy
 8019f8e:	607b      	str	r3, [r7, #4]
}
 8019f90:	bf00      	nop
 8019f92:	e7fe      	b.n	8019f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019f94:	4b0e      	ldr	r3, [pc, #56]	; (8019fd0 <vPortValidateInterruptPriority+0x78>)
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019f9c:	4b0d      	ldr	r3, [pc, #52]	; (8019fd4 <vPortValidateInterruptPriority+0x7c>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	429a      	cmp	r2, r3
 8019fa2:	d90a      	bls.n	8019fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fa8:	f383 8811 	msr	BASEPRI, r3
 8019fac:	f3bf 8f6f 	isb	sy
 8019fb0:	f3bf 8f4f 	dsb	sy
 8019fb4:	603b      	str	r3, [r7, #0]
}
 8019fb6:	bf00      	nop
 8019fb8:	e7fe      	b.n	8019fb8 <vPortValidateInterruptPriority+0x60>
	}
 8019fba:	bf00      	nop
 8019fbc:	3714      	adds	r7, #20
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc4:	4770      	bx	lr
 8019fc6:	bf00      	nop
 8019fc8:	e000e3f0 	.word	0xe000e3f0
 8019fcc:	200018dc 	.word	0x200018dc
 8019fd0:	e000ed0c 	.word	0xe000ed0c
 8019fd4:	200018e0 	.word	0x200018e0

08019fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b08a      	sub	sp, #40	; 0x28
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019fe4:	f7fe fd8c 	bl	8018b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019fe8:	4b5b      	ldr	r3, [pc, #364]	; (801a158 <pvPortMalloc+0x180>)
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d101      	bne.n	8019ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019ff0:	f000 f920 	bl	801a234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019ff4:	4b59      	ldr	r3, [pc, #356]	; (801a15c <pvPortMalloc+0x184>)
 8019ff6:	681a      	ldr	r2, [r3, #0]
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	4013      	ands	r3, r2
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	f040 8093 	bne.w	801a128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d01d      	beq.n	801a044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a008:	2208      	movs	r2, #8
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	4413      	add	r3, r2
 801a00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	f003 0307 	and.w	r3, r3, #7
 801a016:	2b00      	cmp	r3, #0
 801a018:	d014      	beq.n	801a044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	f023 0307 	bic.w	r3, r3, #7
 801a020:	3308      	adds	r3, #8
 801a022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	f003 0307 	and.w	r3, r3, #7
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d00a      	beq.n	801a044 <pvPortMalloc+0x6c>
	__asm volatile
 801a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a032:	f383 8811 	msr	BASEPRI, r3
 801a036:	f3bf 8f6f 	isb	sy
 801a03a:	f3bf 8f4f 	dsb	sy
 801a03e:	617b      	str	r3, [r7, #20]
}
 801a040:	bf00      	nop
 801a042:	e7fe      	b.n	801a042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	2b00      	cmp	r3, #0
 801a048:	d06e      	beq.n	801a128 <pvPortMalloc+0x150>
 801a04a:	4b45      	ldr	r3, [pc, #276]	; (801a160 <pvPortMalloc+0x188>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	687a      	ldr	r2, [r7, #4]
 801a050:	429a      	cmp	r2, r3
 801a052:	d869      	bhi.n	801a128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a054:	4b43      	ldr	r3, [pc, #268]	; (801a164 <pvPortMalloc+0x18c>)
 801a056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a058:	4b42      	ldr	r3, [pc, #264]	; (801a164 <pvPortMalloc+0x18c>)
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a05e:	e004      	b.n	801a06a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a06c:	685b      	ldr	r3, [r3, #4]
 801a06e:	687a      	ldr	r2, [r7, #4]
 801a070:	429a      	cmp	r2, r3
 801a072:	d903      	bls.n	801a07c <pvPortMalloc+0xa4>
 801a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d1f1      	bne.n	801a060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a07c:	4b36      	ldr	r3, [pc, #216]	; (801a158 <pvPortMalloc+0x180>)
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a082:	429a      	cmp	r2, r3
 801a084:	d050      	beq.n	801a128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a086:	6a3b      	ldr	r3, [r7, #32]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	2208      	movs	r2, #8
 801a08c:	4413      	add	r3, r2
 801a08e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a092:	681a      	ldr	r2, [r3, #0]
 801a094:	6a3b      	ldr	r3, [r7, #32]
 801a096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a09a:	685a      	ldr	r2, [r3, #4]
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	1ad2      	subs	r2, r2, r3
 801a0a0:	2308      	movs	r3, #8
 801a0a2:	005b      	lsls	r3, r3, #1
 801a0a4:	429a      	cmp	r2, r3
 801a0a6:	d91f      	bls.n	801a0e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	4413      	add	r3, r2
 801a0ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a0b0:	69bb      	ldr	r3, [r7, #24]
 801a0b2:	f003 0307 	and.w	r3, r3, #7
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d00a      	beq.n	801a0d0 <pvPortMalloc+0xf8>
	__asm volatile
 801a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0be:	f383 8811 	msr	BASEPRI, r3
 801a0c2:	f3bf 8f6f 	isb	sy
 801a0c6:	f3bf 8f4f 	dsb	sy
 801a0ca:	613b      	str	r3, [r7, #16]
}
 801a0cc:	bf00      	nop
 801a0ce:	e7fe      	b.n	801a0ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0d2:	685a      	ldr	r2, [r3, #4]
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	1ad2      	subs	r2, r2, r3
 801a0d8:	69bb      	ldr	r3, [r7, #24]
 801a0da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0de:	687a      	ldr	r2, [r7, #4]
 801a0e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a0e2:	69b8      	ldr	r0, [r7, #24]
 801a0e4:	f000 f908 	bl	801a2f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a0e8:	4b1d      	ldr	r3, [pc, #116]	; (801a160 <pvPortMalloc+0x188>)
 801a0ea:	681a      	ldr	r2, [r3, #0]
 801a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ee:	685b      	ldr	r3, [r3, #4]
 801a0f0:	1ad3      	subs	r3, r2, r3
 801a0f2:	4a1b      	ldr	r2, [pc, #108]	; (801a160 <pvPortMalloc+0x188>)
 801a0f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a0f6:	4b1a      	ldr	r3, [pc, #104]	; (801a160 <pvPortMalloc+0x188>)
 801a0f8:	681a      	ldr	r2, [r3, #0]
 801a0fa:	4b1b      	ldr	r3, [pc, #108]	; (801a168 <pvPortMalloc+0x190>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	429a      	cmp	r2, r3
 801a100:	d203      	bcs.n	801a10a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a102:	4b17      	ldr	r3, [pc, #92]	; (801a160 <pvPortMalloc+0x188>)
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	4a18      	ldr	r2, [pc, #96]	; (801a168 <pvPortMalloc+0x190>)
 801a108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10c:	685a      	ldr	r2, [r3, #4]
 801a10e:	4b13      	ldr	r3, [pc, #76]	; (801a15c <pvPortMalloc+0x184>)
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	431a      	orrs	r2, r3
 801a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a11a:	2200      	movs	r2, #0
 801a11c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a11e:	4b13      	ldr	r3, [pc, #76]	; (801a16c <pvPortMalloc+0x194>)
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	3301      	adds	r3, #1
 801a124:	4a11      	ldr	r2, [pc, #68]	; (801a16c <pvPortMalloc+0x194>)
 801a126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a128:	f7fe fcf8 	bl	8018b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a12c:	69fb      	ldr	r3, [r7, #28]
 801a12e:	f003 0307 	and.w	r3, r3, #7
 801a132:	2b00      	cmp	r3, #0
 801a134:	d00a      	beq.n	801a14c <pvPortMalloc+0x174>
	__asm volatile
 801a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a13a:	f383 8811 	msr	BASEPRI, r3
 801a13e:	f3bf 8f6f 	isb	sy
 801a142:	f3bf 8f4f 	dsb	sy
 801a146:	60fb      	str	r3, [r7, #12]
}
 801a148:	bf00      	nop
 801a14a:	e7fe      	b.n	801a14a <pvPortMalloc+0x172>
	return pvReturn;
 801a14c:	69fb      	ldr	r3, [r7, #28]
}
 801a14e:	4618      	mov	r0, r3
 801a150:	3728      	adds	r7, #40	; 0x28
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}
 801a156:	bf00      	nop
 801a158:	200054ec 	.word	0x200054ec
 801a15c:	20005500 	.word	0x20005500
 801a160:	200054f0 	.word	0x200054f0
 801a164:	200054e4 	.word	0x200054e4
 801a168:	200054f4 	.word	0x200054f4
 801a16c:	200054f8 	.word	0x200054f8

0801a170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a170:	b580      	push	{r7, lr}
 801a172:	b086      	sub	sp, #24
 801a174:	af00      	add	r7, sp, #0
 801a176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d04d      	beq.n	801a21e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a182:	2308      	movs	r3, #8
 801a184:	425b      	negs	r3, r3
 801a186:	697a      	ldr	r2, [r7, #20]
 801a188:	4413      	add	r3, r2
 801a18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a18c:	697b      	ldr	r3, [r7, #20]
 801a18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a190:	693b      	ldr	r3, [r7, #16]
 801a192:	685a      	ldr	r2, [r3, #4]
 801a194:	4b24      	ldr	r3, [pc, #144]	; (801a228 <vPortFree+0xb8>)
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	4013      	ands	r3, r2
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d10a      	bne.n	801a1b4 <vPortFree+0x44>
	__asm volatile
 801a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1a2:	f383 8811 	msr	BASEPRI, r3
 801a1a6:	f3bf 8f6f 	isb	sy
 801a1aa:	f3bf 8f4f 	dsb	sy
 801a1ae:	60fb      	str	r3, [r7, #12]
}
 801a1b0:	bf00      	nop
 801a1b2:	e7fe      	b.n	801a1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a1b4:	693b      	ldr	r3, [r7, #16]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d00a      	beq.n	801a1d2 <vPortFree+0x62>
	__asm volatile
 801a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1c0:	f383 8811 	msr	BASEPRI, r3
 801a1c4:	f3bf 8f6f 	isb	sy
 801a1c8:	f3bf 8f4f 	dsb	sy
 801a1cc:	60bb      	str	r3, [r7, #8]
}
 801a1ce:	bf00      	nop
 801a1d0:	e7fe      	b.n	801a1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a1d2:	693b      	ldr	r3, [r7, #16]
 801a1d4:	685a      	ldr	r2, [r3, #4]
 801a1d6:	4b14      	ldr	r3, [pc, #80]	; (801a228 <vPortFree+0xb8>)
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	4013      	ands	r3, r2
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d01e      	beq.n	801a21e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a1e0:	693b      	ldr	r3, [r7, #16]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d11a      	bne.n	801a21e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a1e8:	693b      	ldr	r3, [r7, #16]
 801a1ea:	685a      	ldr	r2, [r3, #4]
 801a1ec:	4b0e      	ldr	r3, [pc, #56]	; (801a228 <vPortFree+0xb8>)
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	43db      	mvns	r3, r3
 801a1f2:	401a      	ands	r2, r3
 801a1f4:	693b      	ldr	r3, [r7, #16]
 801a1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a1f8:	f7fe fc82 	bl	8018b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a1fc:	693b      	ldr	r3, [r7, #16]
 801a1fe:	685a      	ldr	r2, [r3, #4]
 801a200:	4b0a      	ldr	r3, [pc, #40]	; (801a22c <vPortFree+0xbc>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	4413      	add	r3, r2
 801a206:	4a09      	ldr	r2, [pc, #36]	; (801a22c <vPortFree+0xbc>)
 801a208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a20a:	6938      	ldr	r0, [r7, #16]
 801a20c:	f000 f874 	bl	801a2f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a210:	4b07      	ldr	r3, [pc, #28]	; (801a230 <vPortFree+0xc0>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	3301      	adds	r3, #1
 801a216:	4a06      	ldr	r2, [pc, #24]	; (801a230 <vPortFree+0xc0>)
 801a218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a21a:	f7fe fc7f 	bl	8018b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a21e:	bf00      	nop
 801a220:	3718      	adds	r7, #24
 801a222:	46bd      	mov	sp, r7
 801a224:	bd80      	pop	{r7, pc}
 801a226:	bf00      	nop
 801a228:	20005500 	.word	0x20005500
 801a22c:	200054f0 	.word	0x200054f0
 801a230:	200054fc 	.word	0x200054fc

0801a234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a234:	b480      	push	{r7}
 801a236:	b085      	sub	sp, #20
 801a238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a23a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a23e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a240:	4b27      	ldr	r3, [pc, #156]	; (801a2e0 <prvHeapInit+0xac>)
 801a242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	f003 0307 	and.w	r3, r3, #7
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d00c      	beq.n	801a268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	3307      	adds	r3, #7
 801a252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	f023 0307 	bic.w	r3, r3, #7
 801a25a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a25c:	68ba      	ldr	r2, [r7, #8]
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	1ad3      	subs	r3, r2, r3
 801a262:	4a1f      	ldr	r2, [pc, #124]	; (801a2e0 <prvHeapInit+0xac>)
 801a264:	4413      	add	r3, r2
 801a266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a26c:	4a1d      	ldr	r2, [pc, #116]	; (801a2e4 <prvHeapInit+0xb0>)
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a272:	4b1c      	ldr	r3, [pc, #112]	; (801a2e4 <prvHeapInit+0xb0>)
 801a274:	2200      	movs	r2, #0
 801a276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	68ba      	ldr	r2, [r7, #8]
 801a27c:	4413      	add	r3, r2
 801a27e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a280:	2208      	movs	r2, #8
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	1a9b      	subs	r3, r3, r2
 801a286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	f023 0307 	bic.w	r3, r3, #7
 801a28e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	4a15      	ldr	r2, [pc, #84]	; (801a2e8 <prvHeapInit+0xb4>)
 801a294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a296:	4b14      	ldr	r3, [pc, #80]	; (801a2e8 <prvHeapInit+0xb4>)
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	2200      	movs	r2, #0
 801a29c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a29e:	4b12      	ldr	r3, [pc, #72]	; (801a2e8 <prvHeapInit+0xb4>)
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a2aa:	683b      	ldr	r3, [r7, #0]
 801a2ac:	68fa      	ldr	r2, [r7, #12]
 801a2ae:	1ad2      	subs	r2, r2, r3
 801a2b0:	683b      	ldr	r3, [r7, #0]
 801a2b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a2b4:	4b0c      	ldr	r3, [pc, #48]	; (801a2e8 <prvHeapInit+0xb4>)
 801a2b6:	681a      	ldr	r2, [r3, #0]
 801a2b8:	683b      	ldr	r3, [r7, #0]
 801a2ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a2bc:	683b      	ldr	r3, [r7, #0]
 801a2be:	685b      	ldr	r3, [r3, #4]
 801a2c0:	4a0a      	ldr	r2, [pc, #40]	; (801a2ec <prvHeapInit+0xb8>)
 801a2c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	685b      	ldr	r3, [r3, #4]
 801a2c8:	4a09      	ldr	r2, [pc, #36]	; (801a2f0 <prvHeapInit+0xbc>)
 801a2ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a2cc:	4b09      	ldr	r3, [pc, #36]	; (801a2f4 <prvHeapInit+0xc0>)
 801a2ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a2d2:	601a      	str	r2, [r3, #0]
}
 801a2d4:	bf00      	nop
 801a2d6:	3714      	adds	r7, #20
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2de:	4770      	bx	lr
 801a2e0:	200018e4 	.word	0x200018e4
 801a2e4:	200054e4 	.word	0x200054e4
 801a2e8:	200054ec 	.word	0x200054ec
 801a2ec:	200054f4 	.word	0x200054f4
 801a2f0:	200054f0 	.word	0x200054f0
 801a2f4:	20005500 	.word	0x20005500

0801a2f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a2f8:	b480      	push	{r7}
 801a2fa:	b085      	sub	sp, #20
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a300:	4b28      	ldr	r3, [pc, #160]	; (801a3a4 <prvInsertBlockIntoFreeList+0xac>)
 801a302:	60fb      	str	r3, [r7, #12]
 801a304:	e002      	b.n	801a30c <prvInsertBlockIntoFreeList+0x14>
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	60fb      	str	r3, [r7, #12]
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	687a      	ldr	r2, [r7, #4]
 801a312:	429a      	cmp	r2, r3
 801a314:	d8f7      	bhi.n	801a306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	685b      	ldr	r3, [r3, #4]
 801a31e:	68ba      	ldr	r2, [r7, #8]
 801a320:	4413      	add	r3, r2
 801a322:	687a      	ldr	r2, [r7, #4]
 801a324:	429a      	cmp	r2, r3
 801a326:	d108      	bne.n	801a33a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	685a      	ldr	r2, [r3, #4]
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	685b      	ldr	r3, [r3, #4]
 801a330:	441a      	add	r2, r3
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	685b      	ldr	r3, [r3, #4]
 801a342:	68ba      	ldr	r2, [r7, #8]
 801a344:	441a      	add	r2, r3
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	429a      	cmp	r2, r3
 801a34c:	d118      	bne.n	801a380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	681a      	ldr	r2, [r3, #0]
 801a352:	4b15      	ldr	r3, [pc, #84]	; (801a3a8 <prvInsertBlockIntoFreeList+0xb0>)
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	429a      	cmp	r2, r3
 801a358:	d00d      	beq.n	801a376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	685a      	ldr	r2, [r3, #4]
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	685b      	ldr	r3, [r3, #4]
 801a364:	441a      	add	r2, r3
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	681a      	ldr	r2, [r3, #0]
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	601a      	str	r2, [r3, #0]
 801a374:	e008      	b.n	801a388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a376:	4b0c      	ldr	r3, [pc, #48]	; (801a3a8 <prvInsertBlockIntoFreeList+0xb0>)
 801a378:	681a      	ldr	r2, [r3, #0]
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	601a      	str	r2, [r3, #0]
 801a37e:	e003      	b.n	801a388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	681a      	ldr	r2, [r3, #0]
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a388:	68fa      	ldr	r2, [r7, #12]
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	429a      	cmp	r2, r3
 801a38e:	d002      	beq.n	801a396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	687a      	ldr	r2, [r7, #4]
 801a394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a396:	bf00      	nop
 801a398:	3714      	adds	r7, #20
 801a39a:	46bd      	mov	sp, r7
 801a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a0:	4770      	bx	lr
 801a3a2:	bf00      	nop
 801a3a4:	200054e4 	.word	0x200054e4
 801a3a8:	200054ec 	.word	0x200054ec

0801a3ac <vLuaTask>:
#include "lua.h"
#include "lauxlib.h"
#include "lualib.h"

void vLuaTask(void *argument)
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b084      	sub	sp, #16
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	6078      	str	r0, [r7, #4]

	 lua_State *L = luaL_newstate();
 801a3b4:	f7ec f838 	bl	8006428 <luaL_newstate>
 801a3b8:	60f8      	str	r0, [r7, #12]

	 while(1)
 801a3ba:	e7fe      	b.n	801a3ba <vLuaTask+0xe>

0801a3bc <floorf>:
 801a3bc:	ee10 3a10 	vmov	r3, s0
 801a3c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a3c4:	3a7f      	subs	r2, #127	; 0x7f
 801a3c6:	2a16      	cmp	r2, #22
 801a3c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a3cc:	dc2a      	bgt.n	801a424 <floorf+0x68>
 801a3ce:	2a00      	cmp	r2, #0
 801a3d0:	da11      	bge.n	801a3f6 <floorf+0x3a>
 801a3d2:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a434 <floorf+0x78>
 801a3d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a3da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3e2:	dd05      	ble.n	801a3f0 <floorf+0x34>
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	da23      	bge.n	801a430 <floorf+0x74>
 801a3e8:	4a13      	ldr	r2, [pc, #76]	; (801a438 <floorf+0x7c>)
 801a3ea:	2900      	cmp	r1, #0
 801a3ec:	bf18      	it	ne
 801a3ee:	4613      	movne	r3, r2
 801a3f0:	ee00 3a10 	vmov	s0, r3
 801a3f4:	4770      	bx	lr
 801a3f6:	4911      	ldr	r1, [pc, #68]	; (801a43c <floorf+0x80>)
 801a3f8:	4111      	asrs	r1, r2
 801a3fa:	420b      	tst	r3, r1
 801a3fc:	d0fa      	beq.n	801a3f4 <floorf+0x38>
 801a3fe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a434 <floorf+0x78>
 801a402:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a406:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a40e:	ddef      	ble.n	801a3f0 <floorf+0x34>
 801a410:	2b00      	cmp	r3, #0
 801a412:	bfbe      	ittt	lt
 801a414:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801a418:	fa40 f202 	asrlt.w	r2, r0, r2
 801a41c:	189b      	addlt	r3, r3, r2
 801a41e:	ea23 0301 	bic.w	r3, r3, r1
 801a422:	e7e5      	b.n	801a3f0 <floorf+0x34>
 801a424:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a428:	d3e4      	bcc.n	801a3f4 <floorf+0x38>
 801a42a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a42e:	4770      	bx	lr
 801a430:	2300      	movs	r3, #0
 801a432:	e7dd      	b.n	801a3f0 <floorf+0x34>
 801a434:	7149f2ca 	.word	0x7149f2ca
 801a438:	bf800000 	.word	0xbf800000
 801a43c:	007fffff 	.word	0x007fffff

0801a440 <frexpf>:
 801a440:	ee10 3a10 	vmov	r3, s0
 801a444:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a448:	2100      	movs	r1, #0
 801a44a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a44e:	6001      	str	r1, [r0, #0]
 801a450:	da19      	bge.n	801a486 <frexpf+0x46>
 801a452:	b1c2      	cbz	r2, 801a486 <frexpf+0x46>
 801a454:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a458:	d10a      	bne.n	801a470 <frexpf+0x30>
 801a45a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801a488 <frexpf+0x48>
 801a45e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a462:	f06f 0118 	mvn.w	r1, #24
 801a466:	ee17 3a90 	vmov	r3, s15
 801a46a:	6001      	str	r1, [r0, #0]
 801a46c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a470:	6801      	ldr	r1, [r0, #0]
 801a472:	15d2      	asrs	r2, r2, #23
 801a474:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a478:	3a7e      	subs	r2, #126	; 0x7e
 801a47a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801a47e:	440a      	add	r2, r1
 801a480:	ee00 3a10 	vmov	s0, r3
 801a484:	6002      	str	r2, [r0, #0]
 801a486:	4770      	bx	lr
 801a488:	4c000000 	.word	0x4c000000

0801a48c <scalbnf>:
 801a48c:	ee10 3a10 	vmov	r3, s0
 801a490:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a494:	d025      	beq.n	801a4e2 <scalbnf+0x56>
 801a496:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a49a:	d302      	bcc.n	801a4a2 <scalbnf+0x16>
 801a49c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a4a0:	4770      	bx	lr
 801a4a2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a4a6:	d122      	bne.n	801a4ee <scalbnf+0x62>
 801a4a8:	4b2a      	ldr	r3, [pc, #168]	; (801a554 <scalbnf+0xc8>)
 801a4aa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a558 <scalbnf+0xcc>
 801a4ae:	4298      	cmp	r0, r3
 801a4b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a4b4:	db16      	blt.n	801a4e4 <scalbnf+0x58>
 801a4b6:	ee10 3a10 	vmov	r3, s0
 801a4ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a4be:	3a19      	subs	r2, #25
 801a4c0:	4402      	add	r2, r0
 801a4c2:	2afe      	cmp	r2, #254	; 0xfe
 801a4c4:	dd15      	ble.n	801a4f2 <scalbnf+0x66>
 801a4c6:	ee10 3a10 	vmov	r3, s0
 801a4ca:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a55c <scalbnf+0xd0>
 801a4ce:	eddf 6a24 	vldr	s13, [pc, #144]	; 801a560 <scalbnf+0xd4>
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	eeb0 7a67 	vmov.f32	s14, s15
 801a4d8:	bfb8      	it	lt
 801a4da:	eef0 7a66 	vmovlt.f32	s15, s13
 801a4de:	ee27 0a27 	vmul.f32	s0, s14, s15
 801a4e2:	4770      	bx	lr
 801a4e4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a564 <scalbnf+0xd8>
 801a4e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a4ec:	4770      	bx	lr
 801a4ee:	0dd2      	lsrs	r2, r2, #23
 801a4f0:	e7e6      	b.n	801a4c0 <scalbnf+0x34>
 801a4f2:	2a00      	cmp	r2, #0
 801a4f4:	dd06      	ble.n	801a504 <scalbnf+0x78>
 801a4f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a4fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a4fe:	ee00 3a10 	vmov	s0, r3
 801a502:	4770      	bx	lr
 801a504:	f112 0f16 	cmn.w	r2, #22
 801a508:	da1a      	bge.n	801a540 <scalbnf+0xb4>
 801a50a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a50e:	4298      	cmp	r0, r3
 801a510:	ee10 3a10 	vmov	r3, s0
 801a514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a518:	dd0a      	ble.n	801a530 <scalbnf+0xa4>
 801a51a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801a55c <scalbnf+0xd0>
 801a51e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801a560 <scalbnf+0xd4>
 801a522:	eef0 7a40 	vmov.f32	s15, s0
 801a526:	2b00      	cmp	r3, #0
 801a528:	bf18      	it	ne
 801a52a:	eeb0 0a47 	vmovne.f32	s0, s14
 801a52e:	e7db      	b.n	801a4e8 <scalbnf+0x5c>
 801a530:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a564 <scalbnf+0xd8>
 801a534:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a568 <scalbnf+0xdc>
 801a538:	eef0 7a40 	vmov.f32	s15, s0
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	e7f3      	b.n	801a528 <scalbnf+0x9c>
 801a540:	3219      	adds	r2, #25
 801a542:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a546:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a54a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a56c <scalbnf+0xe0>
 801a54e:	ee07 3a10 	vmov	s14, r3
 801a552:	e7c4      	b.n	801a4de <scalbnf+0x52>
 801a554:	ffff3cb0 	.word	0xffff3cb0
 801a558:	4c000000 	.word	0x4c000000
 801a55c:	7149f2ca 	.word	0x7149f2ca
 801a560:	f149f2ca 	.word	0xf149f2ca
 801a564:	0da24260 	.word	0x0da24260
 801a568:	8da24260 	.word	0x8da24260
 801a56c:	33000000 	.word	0x33000000

0801a570 <fmodf>:
 801a570:	b508      	push	{r3, lr}
 801a572:	ed2d 8b02 	vpush	{d8}
 801a576:	eef0 8a40 	vmov.f32	s17, s0
 801a57a:	eeb0 8a60 	vmov.f32	s16, s1
 801a57e:	f000 f86f 	bl	801a660 <__ieee754_fmodf>
 801a582:	eef4 8a48 	vcmp.f32	s17, s16
 801a586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a58a:	d60c      	bvs.n	801a5a6 <fmodf+0x36>
 801a58c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801a5ac <fmodf+0x3c>
 801a590:	eeb4 8a68 	vcmp.f32	s16, s17
 801a594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a598:	d105      	bne.n	801a5a6 <fmodf+0x36>
 801a59a:	f000 fbf9 	bl	801ad90 <__errno>
 801a59e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a5a2:	2321      	movs	r3, #33	; 0x21
 801a5a4:	6003      	str	r3, [r0, #0]
 801a5a6:	ecbd 8b02 	vpop	{d8}
 801a5aa:	bd08      	pop	{r3, pc}
 801a5ac:	00000000 	.word	0x00000000

0801a5b0 <powf>:
 801a5b0:	b508      	push	{r3, lr}
 801a5b2:	ed2d 8b04 	vpush	{d8-d9}
 801a5b6:	eeb0 8a60 	vmov.f32	s16, s1
 801a5ba:	eeb0 9a40 	vmov.f32	s18, s0
 801a5be:	f000 f8d1 	bl	801a764 <__ieee754_powf>
 801a5c2:	eeb4 8a48 	vcmp.f32	s16, s16
 801a5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ca:	eef0 8a40 	vmov.f32	s17, s0
 801a5ce:	d63e      	bvs.n	801a64e <powf+0x9e>
 801a5d0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801a5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5d8:	d112      	bne.n	801a600 <powf+0x50>
 801a5da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5e2:	d039      	beq.n	801a658 <powf+0xa8>
 801a5e4:	eeb0 0a48 	vmov.f32	s0, s16
 801a5e8:	f000 fbb7 	bl	801ad5a <finitef>
 801a5ec:	b378      	cbz	r0, 801a64e <powf+0x9e>
 801a5ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5f6:	d52a      	bpl.n	801a64e <powf+0x9e>
 801a5f8:	f000 fbca 	bl	801ad90 <__errno>
 801a5fc:	2322      	movs	r3, #34	; 0x22
 801a5fe:	e014      	b.n	801a62a <powf+0x7a>
 801a600:	f000 fbab 	bl	801ad5a <finitef>
 801a604:	b998      	cbnz	r0, 801a62e <powf+0x7e>
 801a606:	eeb0 0a49 	vmov.f32	s0, s18
 801a60a:	f000 fba6 	bl	801ad5a <finitef>
 801a60e:	b170      	cbz	r0, 801a62e <powf+0x7e>
 801a610:	eeb0 0a48 	vmov.f32	s0, s16
 801a614:	f000 fba1 	bl	801ad5a <finitef>
 801a618:	b148      	cbz	r0, 801a62e <powf+0x7e>
 801a61a:	eef4 8a68 	vcmp.f32	s17, s17
 801a61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a622:	d7e9      	bvc.n	801a5f8 <powf+0x48>
 801a624:	f000 fbb4 	bl	801ad90 <__errno>
 801a628:	2321      	movs	r3, #33	; 0x21
 801a62a:	6003      	str	r3, [r0, #0]
 801a62c:	e00f      	b.n	801a64e <powf+0x9e>
 801a62e:	eef5 8a40 	vcmp.f32	s17, #0.0
 801a632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a636:	d10a      	bne.n	801a64e <powf+0x9e>
 801a638:	eeb0 0a49 	vmov.f32	s0, s18
 801a63c:	f000 fb8d 	bl	801ad5a <finitef>
 801a640:	b128      	cbz	r0, 801a64e <powf+0x9e>
 801a642:	eeb0 0a48 	vmov.f32	s0, s16
 801a646:	f000 fb88 	bl	801ad5a <finitef>
 801a64a:	2800      	cmp	r0, #0
 801a64c:	d1d4      	bne.n	801a5f8 <powf+0x48>
 801a64e:	eeb0 0a68 	vmov.f32	s0, s17
 801a652:	ecbd 8b04 	vpop	{d8-d9}
 801a656:	bd08      	pop	{r3, pc}
 801a658:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a65c:	e7f7      	b.n	801a64e <powf+0x9e>
	...

0801a660 <__ieee754_fmodf>:
 801a660:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a662:	ee10 5a90 	vmov	r5, s1
 801a666:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 801a66a:	d009      	beq.n	801a680 <__ieee754_fmodf+0x20>
 801a66c:	ee10 2a10 	vmov	r2, s0
 801a670:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801a674:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a678:	da02      	bge.n	801a680 <__ieee754_fmodf+0x20>
 801a67a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801a67e:	dd04      	ble.n	801a68a <__ieee754_fmodf+0x2a>
 801a680:	ee60 0a20 	vmul.f32	s1, s0, s1
 801a684:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801a688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a68a:	42a3      	cmp	r3, r4
 801a68c:	dbfc      	blt.n	801a688 <__ieee754_fmodf+0x28>
 801a68e:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 801a692:	d105      	bne.n	801a6a0 <__ieee754_fmodf+0x40>
 801a694:	4b32      	ldr	r3, [pc, #200]	; (801a760 <__ieee754_fmodf+0x100>)
 801a696:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 801a69a:	ed93 0a00 	vldr	s0, [r3]
 801a69e:	e7f3      	b.n	801a688 <__ieee754_fmodf+0x28>
 801a6a0:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 801a6a4:	d13f      	bne.n	801a726 <__ieee754_fmodf+0xc6>
 801a6a6:	0219      	lsls	r1, r3, #8
 801a6a8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 801a6ac:	2900      	cmp	r1, #0
 801a6ae:	dc37      	bgt.n	801a720 <__ieee754_fmodf+0xc0>
 801a6b0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 801a6b4:	d13d      	bne.n	801a732 <__ieee754_fmodf+0xd2>
 801a6b6:	0227      	lsls	r7, r4, #8
 801a6b8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 801a6bc:	2f00      	cmp	r7, #0
 801a6be:	da35      	bge.n	801a72c <__ieee754_fmodf+0xcc>
 801a6c0:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801a6c4:	bfbb      	ittet	lt
 801a6c6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801a6ca:	1a12      	sublt	r2, r2, r0
 801a6cc:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801a6d0:	4093      	lsllt	r3, r2
 801a6d2:	bfa8      	it	ge
 801a6d4:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801a6d8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801a6dc:	bfb5      	itete	lt
 801a6de:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801a6e2:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 801a6e6:	1a52      	sublt	r2, r2, r1
 801a6e8:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 801a6ec:	bfb8      	it	lt
 801a6ee:	4094      	lsllt	r4, r2
 801a6f0:	1a40      	subs	r0, r0, r1
 801a6f2:	1b1a      	subs	r2, r3, r4
 801a6f4:	bb00      	cbnz	r0, 801a738 <__ieee754_fmodf+0xd8>
 801a6f6:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 801a6fa:	bf38      	it	cc
 801a6fc:	4613      	movcc	r3, r2
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d0c8      	beq.n	801a694 <__ieee754_fmodf+0x34>
 801a702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801a706:	db1f      	blt.n	801a748 <__ieee754_fmodf+0xe8>
 801a708:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801a70c:	db1f      	blt.n	801a74e <__ieee754_fmodf+0xee>
 801a70e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801a712:	317f      	adds	r1, #127	; 0x7f
 801a714:	4333      	orrs	r3, r6
 801a716:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801a71a:	ee00 3a10 	vmov	s0, r3
 801a71e:	e7b3      	b.n	801a688 <__ieee754_fmodf+0x28>
 801a720:	3801      	subs	r0, #1
 801a722:	0049      	lsls	r1, r1, #1
 801a724:	e7c2      	b.n	801a6ac <__ieee754_fmodf+0x4c>
 801a726:	15d8      	asrs	r0, r3, #23
 801a728:	387f      	subs	r0, #127	; 0x7f
 801a72a:	e7c1      	b.n	801a6b0 <__ieee754_fmodf+0x50>
 801a72c:	3901      	subs	r1, #1
 801a72e:	007f      	lsls	r7, r7, #1
 801a730:	e7c4      	b.n	801a6bc <__ieee754_fmodf+0x5c>
 801a732:	15e1      	asrs	r1, r4, #23
 801a734:	397f      	subs	r1, #127	; 0x7f
 801a736:	e7c3      	b.n	801a6c0 <__ieee754_fmodf+0x60>
 801a738:	2a00      	cmp	r2, #0
 801a73a:	da02      	bge.n	801a742 <__ieee754_fmodf+0xe2>
 801a73c:	005b      	lsls	r3, r3, #1
 801a73e:	3801      	subs	r0, #1
 801a740:	e7d7      	b.n	801a6f2 <__ieee754_fmodf+0x92>
 801a742:	d0a7      	beq.n	801a694 <__ieee754_fmodf+0x34>
 801a744:	0053      	lsls	r3, r2, #1
 801a746:	e7fa      	b.n	801a73e <__ieee754_fmodf+0xde>
 801a748:	005b      	lsls	r3, r3, #1
 801a74a:	3901      	subs	r1, #1
 801a74c:	e7d9      	b.n	801a702 <__ieee754_fmodf+0xa2>
 801a74e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 801a752:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801a756:	3182      	adds	r1, #130	; 0x82
 801a758:	410b      	asrs	r3, r1
 801a75a:	4333      	orrs	r3, r6
 801a75c:	e7dd      	b.n	801a71a <__ieee754_fmodf+0xba>
 801a75e:	bf00      	nop
 801a760:	0801f710 	.word	0x0801f710

0801a764 <__ieee754_powf>:
 801a764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a768:	ee10 4a90 	vmov	r4, s1
 801a76c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801a770:	ed2d 8b02 	vpush	{d8}
 801a774:	ee10 6a10 	vmov	r6, s0
 801a778:	eeb0 8a40 	vmov.f32	s16, s0
 801a77c:	eef0 8a60 	vmov.f32	s17, s1
 801a780:	d10c      	bne.n	801a79c <__ieee754_powf+0x38>
 801a782:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 801a786:	0076      	lsls	r6, r6, #1
 801a788:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 801a78c:	f240 8296 	bls.w	801acbc <__ieee754_powf+0x558>
 801a790:	ee38 0a28 	vadd.f32	s0, s16, s17
 801a794:	ecbd 8b02 	vpop	{d8}
 801a798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a79c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801a7a0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a7a4:	dcf4      	bgt.n	801a790 <__ieee754_powf+0x2c>
 801a7a6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801a7aa:	dd08      	ble.n	801a7be <__ieee754_powf+0x5a>
 801a7ac:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 801a7b0:	d1ee      	bne.n	801a790 <__ieee754_powf+0x2c>
 801a7b2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801a7b6:	0064      	lsls	r4, r4, #1
 801a7b8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801a7bc:	e7e6      	b.n	801a78c <__ieee754_powf+0x28>
 801a7be:	2e00      	cmp	r6, #0
 801a7c0:	da20      	bge.n	801a804 <__ieee754_powf+0xa0>
 801a7c2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801a7c6:	da2d      	bge.n	801a824 <__ieee754_powf+0xc0>
 801a7c8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801a7cc:	f2c0 827f 	blt.w	801acce <__ieee754_powf+0x56a>
 801a7d0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801a7d4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801a7d8:	fa48 f703 	asr.w	r7, r8, r3
 801a7dc:	fa07 f303 	lsl.w	r3, r7, r3
 801a7e0:	4543      	cmp	r3, r8
 801a7e2:	f040 8274 	bne.w	801acce <__ieee754_powf+0x56a>
 801a7e6:	f007 0701 	and.w	r7, r7, #1
 801a7ea:	f1c7 0702 	rsb	r7, r7, #2
 801a7ee:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801a7f2:	d11f      	bne.n	801a834 <__ieee754_powf+0xd0>
 801a7f4:	2c00      	cmp	r4, #0
 801a7f6:	f280 8267 	bge.w	801acc8 <__ieee754_powf+0x564>
 801a7fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a7fe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801a802:	e7c7      	b.n	801a794 <__ieee754_powf+0x30>
 801a804:	2700      	movs	r7, #0
 801a806:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801a80a:	d1f0      	bne.n	801a7ee <__ieee754_powf+0x8a>
 801a80c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801a810:	f000 8254 	beq.w	801acbc <__ieee754_powf+0x558>
 801a814:	dd08      	ble.n	801a828 <__ieee754_powf+0xc4>
 801a816:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 801ab20 <__ieee754_powf+0x3bc>
 801a81a:	2c00      	cmp	r4, #0
 801a81c:	bfa8      	it	ge
 801a81e:	eeb0 0a68 	vmovge.f32	s0, s17
 801a822:	e7b7      	b.n	801a794 <__ieee754_powf+0x30>
 801a824:	2702      	movs	r7, #2
 801a826:	e7ee      	b.n	801a806 <__ieee754_powf+0xa2>
 801a828:	2c00      	cmp	r4, #0
 801a82a:	f280 824a 	bge.w	801acc2 <__ieee754_powf+0x55e>
 801a82e:	eeb1 0a68 	vneg.f32	s0, s17
 801a832:	e7af      	b.n	801a794 <__ieee754_powf+0x30>
 801a834:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801a838:	d102      	bne.n	801a840 <__ieee754_powf+0xdc>
 801a83a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801a83e:	e7a9      	b.n	801a794 <__ieee754_powf+0x30>
 801a840:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801a844:	eeb0 0a48 	vmov.f32	s0, s16
 801a848:	d107      	bne.n	801a85a <__ieee754_powf+0xf6>
 801a84a:	2e00      	cmp	r6, #0
 801a84c:	db05      	blt.n	801a85a <__ieee754_powf+0xf6>
 801a84e:	ecbd 8b02 	vpop	{d8}
 801a852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a856:	f000 ba53 	b.w	801ad00 <__ieee754_sqrtf>
 801a85a:	f000 fa77 	bl	801ad4c <fabsf>
 801a85e:	b125      	cbz	r5, 801a86a <__ieee754_powf+0x106>
 801a860:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 801a864:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801a868:	d116      	bne.n	801a898 <__ieee754_powf+0x134>
 801a86a:	2c00      	cmp	r4, #0
 801a86c:	bfbc      	itt	lt
 801a86e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801a872:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801a876:	2e00      	cmp	r6, #0
 801a878:	da8c      	bge.n	801a794 <__ieee754_powf+0x30>
 801a87a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801a87e:	ea55 0307 	orrs.w	r3, r5, r7
 801a882:	d104      	bne.n	801a88e <__ieee754_powf+0x12a>
 801a884:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a888:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a88c:	e782      	b.n	801a794 <__ieee754_powf+0x30>
 801a88e:	2f01      	cmp	r7, #1
 801a890:	d180      	bne.n	801a794 <__ieee754_powf+0x30>
 801a892:	eeb1 0a40 	vneg.f32	s0, s0
 801a896:	e77d      	b.n	801a794 <__ieee754_powf+0x30>
 801a898:	0ff0      	lsrs	r0, r6, #31
 801a89a:	3801      	subs	r0, #1
 801a89c:	ea57 0300 	orrs.w	r3, r7, r0
 801a8a0:	d104      	bne.n	801a8ac <__ieee754_powf+0x148>
 801a8a2:	ee38 8a48 	vsub.f32	s16, s16, s16
 801a8a6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801a8aa:	e773      	b.n	801a794 <__ieee754_powf+0x30>
 801a8ac:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801a8b0:	dd74      	ble.n	801a99c <__ieee754_powf+0x238>
 801a8b2:	4b9c      	ldr	r3, [pc, #624]	; (801ab24 <__ieee754_powf+0x3c0>)
 801a8b4:	429d      	cmp	r5, r3
 801a8b6:	dc08      	bgt.n	801a8ca <__ieee754_powf+0x166>
 801a8b8:	2c00      	cmp	r4, #0
 801a8ba:	da0b      	bge.n	801a8d4 <__ieee754_powf+0x170>
 801a8bc:	2000      	movs	r0, #0
 801a8be:	ecbd 8b02 	vpop	{d8}
 801a8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a8c6:	f000 ba3b 	b.w	801ad40 <__math_oflowf>
 801a8ca:	4b97      	ldr	r3, [pc, #604]	; (801ab28 <__ieee754_powf+0x3c4>)
 801a8cc:	429d      	cmp	r5, r3
 801a8ce:	dd08      	ble.n	801a8e2 <__ieee754_powf+0x17e>
 801a8d0:	2c00      	cmp	r4, #0
 801a8d2:	dcf3      	bgt.n	801a8bc <__ieee754_powf+0x158>
 801a8d4:	2000      	movs	r0, #0
 801a8d6:	ecbd 8b02 	vpop	{d8}
 801a8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a8de:	f000 ba29 	b.w	801ad34 <__math_uflowf>
 801a8e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a8e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a8ea:	eddf 6a90 	vldr	s13, [pc, #576]	; 801ab2c <__ieee754_powf+0x3c8>
 801a8ee:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801a8f2:	eee0 6a67 	vfms.f32	s13, s0, s15
 801a8f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a8fa:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801a8fe:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a902:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a906:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801ab30 <__ieee754_powf+0x3cc>
 801a90a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801a90e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 801ab34 <__ieee754_powf+0x3d0>
 801a912:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a916:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801ab38 <__ieee754_powf+0x3d4>
 801a91a:	eef0 6a67 	vmov.f32	s13, s15
 801a91e:	eee0 6a07 	vfma.f32	s13, s0, s14
 801a922:	ee16 3a90 	vmov	r3, s13
 801a926:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801a92a:	f023 030f 	bic.w	r3, r3, #15
 801a92e:	ee00 3a90 	vmov	s1, r3
 801a932:	eee0 0a47 	vfms.f32	s1, s0, s14
 801a936:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a93a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801a93e:	f024 040f 	bic.w	r4, r4, #15
 801a942:	ee07 4a10 	vmov	s14, r4
 801a946:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801a94a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801a94e:	ee07 3a90 	vmov	s15, r3
 801a952:	eee7 0a27 	vfma.f32	s1, s14, s15
 801a956:	3f01      	subs	r7, #1
 801a958:	ea57 0200 	orrs.w	r2, r7, r0
 801a95c:	ee07 4a10 	vmov	s14, r4
 801a960:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a964:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801a968:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801a96c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801a970:	ee17 4a10 	vmov	r4, s14
 801a974:	bf08      	it	eq
 801a976:	eeb0 8a40 	vmoveq.f32	s16, s0
 801a97a:	2c00      	cmp	r4, #0
 801a97c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801a980:	f340 817e 	ble.w	801ac80 <__ieee754_powf+0x51c>
 801a984:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801a988:	f340 80f8 	ble.w	801ab7c <__ieee754_powf+0x418>
 801a98c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a994:	bf4c      	ite	mi
 801a996:	2001      	movmi	r0, #1
 801a998:	2000      	movpl	r0, #0
 801a99a:	e790      	b.n	801a8be <__ieee754_powf+0x15a>
 801a99c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 801a9a0:	bf01      	itttt	eq
 801a9a2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801ab3c <__ieee754_powf+0x3d8>
 801a9a6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801a9aa:	f06f 0217 	mvneq.w	r2, #23
 801a9ae:	ee17 5a90 	vmoveq	r5, s15
 801a9b2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801a9b6:	bf18      	it	ne
 801a9b8:	2200      	movne	r2, #0
 801a9ba:	3b7f      	subs	r3, #127	; 0x7f
 801a9bc:	4413      	add	r3, r2
 801a9be:	4a60      	ldr	r2, [pc, #384]	; (801ab40 <__ieee754_powf+0x3dc>)
 801a9c0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801a9c4:	4295      	cmp	r5, r2
 801a9c6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801a9ca:	dd06      	ble.n	801a9da <__ieee754_powf+0x276>
 801a9cc:	4a5d      	ldr	r2, [pc, #372]	; (801ab44 <__ieee754_powf+0x3e0>)
 801a9ce:	4295      	cmp	r5, r2
 801a9d0:	f340 80a4 	ble.w	801ab1c <__ieee754_powf+0x3b8>
 801a9d4:	3301      	adds	r3, #1
 801a9d6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801a9da:	2500      	movs	r5, #0
 801a9dc:	4a5a      	ldr	r2, [pc, #360]	; (801ab48 <__ieee754_powf+0x3e4>)
 801a9de:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801a9e2:	ee07 1a90 	vmov	s15, r1
 801a9e6:	ed92 7a00 	vldr	s14, [r2]
 801a9ea:	4a58      	ldr	r2, [pc, #352]	; (801ab4c <__ieee754_powf+0x3e8>)
 801a9ec:	ee37 6a27 	vadd.f32	s12, s14, s15
 801a9f0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801a9f4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801a9f8:	1049      	asrs	r1, r1, #1
 801a9fa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801a9fe:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801aa02:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801aa06:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801aa0a:	ee06 1a10 	vmov	s12, r1
 801aa0e:	ee65 4a26 	vmul.f32	s9, s10, s13
 801aa12:	ee36 7a47 	vsub.f32	s14, s12, s14
 801aa16:	ee14 6a90 	vmov	r6, s9
 801aa1a:	4016      	ands	r6, r2
 801aa1c:	ee05 6a90 	vmov	s11, r6
 801aa20:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801aa24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa28:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801ab50 <__ieee754_powf+0x3ec>
 801aa2c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801aa30:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801aa34:	ee25 6a26 	vmul.f32	s12, s10, s13
 801aa38:	eddf 6a46 	vldr	s13, [pc, #280]	; 801ab54 <__ieee754_powf+0x3f0>
 801aa3c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801aa40:	eddf 6a45 	vldr	s13, [pc, #276]	; 801ab58 <__ieee754_powf+0x3f4>
 801aa44:	eee7 6a27 	vfma.f32	s13, s14, s15
 801aa48:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801ab2c <__ieee754_powf+0x3c8>
 801aa4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801aa50:	eddf 6a42 	vldr	s13, [pc, #264]	; 801ab5c <__ieee754_powf+0x3f8>
 801aa54:	eee7 6a27 	vfma.f32	s13, s14, s15
 801aa58:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801ab60 <__ieee754_powf+0x3fc>
 801aa5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801aa60:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801aa64:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801aa68:	ee66 6a86 	vmul.f32	s13, s13, s12
 801aa6c:	eee5 6a07 	vfma.f32	s13, s10, s14
 801aa70:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801aa74:	eef0 7a45 	vmov.f32	s15, s10
 801aa78:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801aa7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa80:	ee17 1a90 	vmov	r1, s15
 801aa84:	4011      	ands	r1, r2
 801aa86:	ee07 1a90 	vmov	s15, r1
 801aa8a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801aa8e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801aa92:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801aa96:	ee27 7a24 	vmul.f32	s14, s14, s9
 801aa9a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801aa9e:	eeb0 6a47 	vmov.f32	s12, s14
 801aaa2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801aaa6:	ee16 1a10 	vmov	r1, s12
 801aaaa:	4011      	ands	r1, r2
 801aaac:	ee06 1a90 	vmov	s13, r1
 801aab0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801aab4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801ab64 <__ieee754_powf+0x400>
 801aab8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801ab68 <__ieee754_powf+0x404>
 801aabc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801aac0:	ee06 1a10 	vmov	s12, r1
 801aac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801aac8:	eddf 7a28 	vldr	s15, [pc, #160]	; 801ab6c <__ieee754_powf+0x408>
 801aacc:	4928      	ldr	r1, [pc, #160]	; (801ab70 <__ieee754_powf+0x40c>)
 801aace:	eea6 7a27 	vfma.f32	s14, s12, s15
 801aad2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801aad6:	edd1 7a00 	vldr	s15, [r1]
 801aada:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aade:	ee07 3a90 	vmov	s15, r3
 801aae2:	4b24      	ldr	r3, [pc, #144]	; (801ab74 <__ieee754_powf+0x410>)
 801aae4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801aae8:	eef0 7a47 	vmov.f32	s15, s14
 801aaec:	eee6 7a25 	vfma.f32	s15, s12, s11
 801aaf0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801aaf4:	edd5 0a00 	vldr	s1, [r5]
 801aaf8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801aafc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab00:	ee17 3a90 	vmov	r3, s15
 801ab04:	4013      	ands	r3, r2
 801ab06:	ee07 3a90 	vmov	s15, r3
 801ab0a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ab0e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801ab12:	eee6 6a65 	vfms.f32	s13, s12, s11
 801ab16:	ee77 7a66 	vsub.f32	s15, s14, s13
 801ab1a:	e70e      	b.n	801a93a <__ieee754_powf+0x1d6>
 801ab1c:	2501      	movs	r5, #1
 801ab1e:	e75d      	b.n	801a9dc <__ieee754_powf+0x278>
 801ab20:	00000000 	.word	0x00000000
 801ab24:	3f7ffff3 	.word	0x3f7ffff3
 801ab28:	3f800007 	.word	0x3f800007
 801ab2c:	3eaaaaab 	.word	0x3eaaaaab
 801ab30:	3fb8aa3b 	.word	0x3fb8aa3b
 801ab34:	36eca570 	.word	0x36eca570
 801ab38:	3fb8aa00 	.word	0x3fb8aa00
 801ab3c:	4b800000 	.word	0x4b800000
 801ab40:	001cc471 	.word	0x001cc471
 801ab44:	005db3d6 	.word	0x005db3d6
 801ab48:	0801f718 	.word	0x0801f718
 801ab4c:	fffff000 	.word	0xfffff000
 801ab50:	3e6c3255 	.word	0x3e6c3255
 801ab54:	3e53f142 	.word	0x3e53f142
 801ab58:	3e8ba305 	.word	0x3e8ba305
 801ab5c:	3edb6db7 	.word	0x3edb6db7
 801ab60:	3f19999a 	.word	0x3f19999a
 801ab64:	3f76384f 	.word	0x3f76384f
 801ab68:	3f763800 	.word	0x3f763800
 801ab6c:	369dc3a0 	.word	0x369dc3a0
 801ab70:	0801f728 	.word	0x0801f728
 801ab74:	0801f720 	.word	0x0801f720
 801ab78:	3338aa3c 	.word	0x3338aa3c
 801ab7c:	f040 8095 	bne.w	801acaa <__ieee754_powf+0x546>
 801ab80:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801ab78 <__ieee754_powf+0x414>
 801ab84:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ab88:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801ab8c:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ab90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab94:	f73f aefa 	bgt.w	801a98c <__ieee754_powf+0x228>
 801ab98:	15db      	asrs	r3, r3, #23
 801ab9a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801ab9e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801aba2:	4103      	asrs	r3, r0
 801aba4:	4423      	add	r3, r4
 801aba6:	494b      	ldr	r1, [pc, #300]	; (801acd4 <__ieee754_powf+0x570>)
 801aba8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801abac:	3a7f      	subs	r2, #127	; 0x7f
 801abae:	4111      	asrs	r1, r2
 801abb0:	ea23 0101 	bic.w	r1, r3, r1
 801abb4:	ee07 1a10 	vmov	s14, r1
 801abb8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801abbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801abc0:	f1c2 0217 	rsb	r2, r2, #23
 801abc4:	4110      	asrs	r0, r2
 801abc6:	2c00      	cmp	r4, #0
 801abc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801abcc:	bfb8      	it	lt
 801abce:	4240      	neglt	r0, r0
 801abd0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801abd4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 801acd8 <__ieee754_powf+0x574>
 801abd8:	eddf 6a40 	vldr	s13, [pc, #256]	; 801acdc <__ieee754_powf+0x578>
 801abdc:	ee17 3a10 	vmov	r3, s14
 801abe0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801abe4:	f023 030f 	bic.w	r3, r3, #15
 801abe8:	ee07 3a10 	vmov	s14, r3
 801abec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801abf0:	ee27 0a00 	vmul.f32	s0, s14, s0
 801abf4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801abf8:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ace0 <__ieee754_powf+0x57c>
 801abfc:	eea0 0aa7 	vfma.f32	s0, s1, s15
 801ac00:	eef0 7a40 	vmov.f32	s15, s0
 801ac04:	eee7 7a26 	vfma.f32	s15, s14, s13
 801ac08:	eeb0 6a67 	vmov.f32	s12, s15
 801ac0c:	eea7 6a66 	vfms.f32	s12, s14, s13
 801ac10:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801ac14:	ee30 0a46 	vsub.f32	s0, s0, s12
 801ac18:	eddf 6a32 	vldr	s13, [pc, #200]	; 801ace4 <__ieee754_powf+0x580>
 801ac1c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 801ace8 <__ieee754_powf+0x584>
 801ac20:	eee7 6a06 	vfma.f32	s13, s14, s12
 801ac24:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801acec <__ieee754_powf+0x588>
 801ac28:	eea6 6a87 	vfma.f32	s12, s13, s14
 801ac2c:	eddf 6a30 	vldr	s13, [pc, #192]	; 801acf0 <__ieee754_powf+0x58c>
 801ac30:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ac34:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801acf4 <__ieee754_powf+0x590>
 801ac38:	eea6 6a87 	vfma.f32	s12, s13, s14
 801ac3c:	eef0 6a67 	vmov.f32	s13, s15
 801ac40:	eee6 6a47 	vfms.f32	s13, s12, s14
 801ac44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801ac48:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801ac4c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801ac50:	eea7 0a80 	vfma.f32	s0, s15, s0
 801ac54:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801ac58:	ee37 0a40 	vsub.f32	s0, s14, s0
 801ac5c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ac60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ac64:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ac68:	ee10 3a10 	vmov	r3, s0
 801ac6c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801ac70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ac74:	da1f      	bge.n	801acb6 <__ieee754_powf+0x552>
 801ac76:	f7ff fc09 	bl	801a48c <scalbnf>
 801ac7a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ac7e:	e589      	b.n	801a794 <__ieee754_powf+0x30>
 801ac80:	4a1d      	ldr	r2, [pc, #116]	; (801acf8 <__ieee754_powf+0x594>)
 801ac82:	4293      	cmp	r3, r2
 801ac84:	dd07      	ble.n	801ac96 <__ieee754_powf+0x532>
 801ac86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ac8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac8e:	bf4c      	ite	mi
 801ac90:	2001      	movmi	r0, #1
 801ac92:	2000      	movpl	r0, #0
 801ac94:	e61f      	b.n	801a8d6 <__ieee754_powf+0x172>
 801ac96:	d108      	bne.n	801acaa <__ieee754_powf+0x546>
 801ac98:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ac9c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801aca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aca4:	f6ff af78 	blt.w	801ab98 <__ieee754_powf+0x434>
 801aca8:	e7ed      	b.n	801ac86 <__ieee754_powf+0x522>
 801acaa:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801acae:	f73f af73 	bgt.w	801ab98 <__ieee754_powf+0x434>
 801acb2:	2000      	movs	r0, #0
 801acb4:	e78c      	b.n	801abd0 <__ieee754_powf+0x46c>
 801acb6:	ee00 3a10 	vmov	s0, r3
 801acba:	e7de      	b.n	801ac7a <__ieee754_powf+0x516>
 801acbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801acc0:	e568      	b.n	801a794 <__ieee754_powf+0x30>
 801acc2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801acfc <__ieee754_powf+0x598>
 801acc6:	e565      	b.n	801a794 <__ieee754_powf+0x30>
 801acc8:	eeb0 0a48 	vmov.f32	s0, s16
 801accc:	e562      	b.n	801a794 <__ieee754_powf+0x30>
 801acce:	2700      	movs	r7, #0
 801acd0:	e58d      	b.n	801a7ee <__ieee754_powf+0x8a>
 801acd2:	bf00      	nop
 801acd4:	007fffff 	.word	0x007fffff
 801acd8:	35bfbe8c 	.word	0x35bfbe8c
 801acdc:	3f317200 	.word	0x3f317200
 801ace0:	3f317218 	.word	0x3f317218
 801ace4:	b5ddea0e 	.word	0xb5ddea0e
 801ace8:	3331bb4c 	.word	0x3331bb4c
 801acec:	388ab355 	.word	0x388ab355
 801acf0:	bb360b61 	.word	0xbb360b61
 801acf4:	3e2aaaab 	.word	0x3e2aaaab
 801acf8:	43160000 	.word	0x43160000
 801acfc:	00000000 	.word	0x00000000

0801ad00 <__ieee754_sqrtf>:
 801ad00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801ad04:	4770      	bx	lr

0801ad06 <with_errnof>:
 801ad06:	b513      	push	{r0, r1, r4, lr}
 801ad08:	4604      	mov	r4, r0
 801ad0a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ad0e:	f000 f83f 	bl	801ad90 <__errno>
 801ad12:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ad16:	6004      	str	r4, [r0, #0]
 801ad18:	b002      	add	sp, #8
 801ad1a:	bd10      	pop	{r4, pc}

0801ad1c <xflowf>:
 801ad1c:	b130      	cbz	r0, 801ad2c <xflowf+0x10>
 801ad1e:	eef1 7a40 	vneg.f32	s15, s0
 801ad22:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ad26:	2022      	movs	r0, #34	; 0x22
 801ad28:	f7ff bfed 	b.w	801ad06 <with_errnof>
 801ad2c:	eef0 7a40 	vmov.f32	s15, s0
 801ad30:	e7f7      	b.n	801ad22 <xflowf+0x6>
	...

0801ad34 <__math_uflowf>:
 801ad34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ad3c <__math_uflowf+0x8>
 801ad38:	f7ff bff0 	b.w	801ad1c <xflowf>
 801ad3c:	10000000 	.word	0x10000000

0801ad40 <__math_oflowf>:
 801ad40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ad48 <__math_oflowf+0x8>
 801ad44:	f7ff bfea 	b.w	801ad1c <xflowf>
 801ad48:	70000000 	.word	0x70000000

0801ad4c <fabsf>:
 801ad4c:	ee10 3a10 	vmov	r3, s0
 801ad50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ad54:	ee00 3a10 	vmov	s0, r3
 801ad58:	4770      	bx	lr

0801ad5a <finitef>:
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ad60:	9801      	ldr	r0, [sp, #4]
 801ad62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ad66:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801ad6a:	bfac      	ite	ge
 801ad6c:	2000      	movge	r0, #0
 801ad6e:	2001      	movlt	r0, #1
 801ad70:	b002      	add	sp, #8
 801ad72:	4770      	bx	lr

0801ad74 <nanf>:
 801ad74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ad7c <nanf+0x8>
 801ad78:	4770      	bx	lr
 801ad7a:	bf00      	nop
 801ad7c:	7fc00000 	.word	0x7fc00000

0801ad80 <abort>:
 801ad80:	b508      	push	{r3, lr}
 801ad82:	2006      	movs	r0, #6
 801ad84:	f001 f89a 	bl	801bebc <raise>
 801ad88:	2001      	movs	r0, #1
 801ad8a:	f7e7 fd07 	bl	800279c <_exit>
	...

0801ad90 <__errno>:
 801ad90:	4b01      	ldr	r3, [pc, #4]	; (801ad98 <__errno+0x8>)
 801ad92:	6818      	ldr	r0, [r3, #0]
 801ad94:	4770      	bx	lr
 801ad96:	bf00      	nop
 801ad98:	20000010 	.word	0x20000010

0801ad9c <__sflush_r>:
 801ad9c:	898a      	ldrh	r2, [r1, #12]
 801ad9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ada2:	4605      	mov	r5, r0
 801ada4:	0710      	lsls	r0, r2, #28
 801ada6:	460c      	mov	r4, r1
 801ada8:	d458      	bmi.n	801ae5c <__sflush_r+0xc0>
 801adaa:	684b      	ldr	r3, [r1, #4]
 801adac:	2b00      	cmp	r3, #0
 801adae:	dc05      	bgt.n	801adbc <__sflush_r+0x20>
 801adb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	dc02      	bgt.n	801adbc <__sflush_r+0x20>
 801adb6:	2000      	movs	r0, #0
 801adb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801adbe:	2e00      	cmp	r6, #0
 801adc0:	d0f9      	beq.n	801adb6 <__sflush_r+0x1a>
 801adc2:	2300      	movs	r3, #0
 801adc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801adc8:	682f      	ldr	r7, [r5, #0]
 801adca:	602b      	str	r3, [r5, #0]
 801adcc:	d032      	beq.n	801ae34 <__sflush_r+0x98>
 801adce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801add0:	89a3      	ldrh	r3, [r4, #12]
 801add2:	075a      	lsls	r2, r3, #29
 801add4:	d505      	bpl.n	801ade2 <__sflush_r+0x46>
 801add6:	6863      	ldr	r3, [r4, #4]
 801add8:	1ac0      	subs	r0, r0, r3
 801adda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801addc:	b10b      	cbz	r3, 801ade2 <__sflush_r+0x46>
 801adde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ade0:	1ac0      	subs	r0, r0, r3
 801ade2:	2300      	movs	r3, #0
 801ade4:	4602      	mov	r2, r0
 801ade6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ade8:	6a21      	ldr	r1, [r4, #32]
 801adea:	4628      	mov	r0, r5
 801adec:	47b0      	blx	r6
 801adee:	1c43      	adds	r3, r0, #1
 801adf0:	89a3      	ldrh	r3, [r4, #12]
 801adf2:	d106      	bne.n	801ae02 <__sflush_r+0x66>
 801adf4:	6829      	ldr	r1, [r5, #0]
 801adf6:	291d      	cmp	r1, #29
 801adf8:	d82c      	bhi.n	801ae54 <__sflush_r+0xb8>
 801adfa:	4a2a      	ldr	r2, [pc, #168]	; (801aea4 <__sflush_r+0x108>)
 801adfc:	40ca      	lsrs	r2, r1
 801adfe:	07d6      	lsls	r6, r2, #31
 801ae00:	d528      	bpl.n	801ae54 <__sflush_r+0xb8>
 801ae02:	2200      	movs	r2, #0
 801ae04:	6062      	str	r2, [r4, #4]
 801ae06:	04d9      	lsls	r1, r3, #19
 801ae08:	6922      	ldr	r2, [r4, #16]
 801ae0a:	6022      	str	r2, [r4, #0]
 801ae0c:	d504      	bpl.n	801ae18 <__sflush_r+0x7c>
 801ae0e:	1c42      	adds	r2, r0, #1
 801ae10:	d101      	bne.n	801ae16 <__sflush_r+0x7a>
 801ae12:	682b      	ldr	r3, [r5, #0]
 801ae14:	b903      	cbnz	r3, 801ae18 <__sflush_r+0x7c>
 801ae16:	6560      	str	r0, [r4, #84]	; 0x54
 801ae18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae1a:	602f      	str	r7, [r5, #0]
 801ae1c:	2900      	cmp	r1, #0
 801ae1e:	d0ca      	beq.n	801adb6 <__sflush_r+0x1a>
 801ae20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ae24:	4299      	cmp	r1, r3
 801ae26:	d002      	beq.n	801ae2e <__sflush_r+0x92>
 801ae28:	4628      	mov	r0, r5
 801ae2a:	f000 fb87 	bl	801b53c <_free_r>
 801ae2e:	2000      	movs	r0, #0
 801ae30:	6360      	str	r0, [r4, #52]	; 0x34
 801ae32:	e7c1      	b.n	801adb8 <__sflush_r+0x1c>
 801ae34:	6a21      	ldr	r1, [r4, #32]
 801ae36:	2301      	movs	r3, #1
 801ae38:	4628      	mov	r0, r5
 801ae3a:	47b0      	blx	r6
 801ae3c:	1c41      	adds	r1, r0, #1
 801ae3e:	d1c7      	bne.n	801add0 <__sflush_r+0x34>
 801ae40:	682b      	ldr	r3, [r5, #0]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d0c4      	beq.n	801add0 <__sflush_r+0x34>
 801ae46:	2b1d      	cmp	r3, #29
 801ae48:	d001      	beq.n	801ae4e <__sflush_r+0xb2>
 801ae4a:	2b16      	cmp	r3, #22
 801ae4c:	d101      	bne.n	801ae52 <__sflush_r+0xb6>
 801ae4e:	602f      	str	r7, [r5, #0]
 801ae50:	e7b1      	b.n	801adb6 <__sflush_r+0x1a>
 801ae52:	89a3      	ldrh	r3, [r4, #12]
 801ae54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae58:	81a3      	strh	r3, [r4, #12]
 801ae5a:	e7ad      	b.n	801adb8 <__sflush_r+0x1c>
 801ae5c:	690f      	ldr	r7, [r1, #16]
 801ae5e:	2f00      	cmp	r7, #0
 801ae60:	d0a9      	beq.n	801adb6 <__sflush_r+0x1a>
 801ae62:	0793      	lsls	r3, r2, #30
 801ae64:	680e      	ldr	r6, [r1, #0]
 801ae66:	bf08      	it	eq
 801ae68:	694b      	ldreq	r3, [r1, #20]
 801ae6a:	600f      	str	r7, [r1, #0]
 801ae6c:	bf18      	it	ne
 801ae6e:	2300      	movne	r3, #0
 801ae70:	eba6 0807 	sub.w	r8, r6, r7
 801ae74:	608b      	str	r3, [r1, #8]
 801ae76:	f1b8 0f00 	cmp.w	r8, #0
 801ae7a:	dd9c      	ble.n	801adb6 <__sflush_r+0x1a>
 801ae7c:	6a21      	ldr	r1, [r4, #32]
 801ae7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ae80:	4643      	mov	r3, r8
 801ae82:	463a      	mov	r2, r7
 801ae84:	4628      	mov	r0, r5
 801ae86:	47b0      	blx	r6
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	dc06      	bgt.n	801ae9a <__sflush_r+0xfe>
 801ae8c:	89a3      	ldrh	r3, [r4, #12]
 801ae8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae92:	81a3      	strh	r3, [r4, #12]
 801ae94:	f04f 30ff 	mov.w	r0, #4294967295
 801ae98:	e78e      	b.n	801adb8 <__sflush_r+0x1c>
 801ae9a:	4407      	add	r7, r0
 801ae9c:	eba8 0800 	sub.w	r8, r8, r0
 801aea0:	e7e9      	b.n	801ae76 <__sflush_r+0xda>
 801aea2:	bf00      	nop
 801aea4:	20400001 	.word	0x20400001

0801aea8 <_fflush_r>:
 801aea8:	b538      	push	{r3, r4, r5, lr}
 801aeaa:	690b      	ldr	r3, [r1, #16]
 801aeac:	4605      	mov	r5, r0
 801aeae:	460c      	mov	r4, r1
 801aeb0:	b913      	cbnz	r3, 801aeb8 <_fflush_r+0x10>
 801aeb2:	2500      	movs	r5, #0
 801aeb4:	4628      	mov	r0, r5
 801aeb6:	bd38      	pop	{r3, r4, r5, pc}
 801aeb8:	b118      	cbz	r0, 801aec2 <_fflush_r+0x1a>
 801aeba:	6983      	ldr	r3, [r0, #24]
 801aebc:	b90b      	cbnz	r3, 801aec2 <_fflush_r+0x1a>
 801aebe:	f000 f899 	bl	801aff4 <__sinit>
 801aec2:	4b14      	ldr	r3, [pc, #80]	; (801af14 <_fflush_r+0x6c>)
 801aec4:	429c      	cmp	r4, r3
 801aec6:	d11b      	bne.n	801af00 <_fflush_r+0x58>
 801aec8:	686c      	ldr	r4, [r5, #4]
 801aeca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d0ef      	beq.n	801aeb2 <_fflush_r+0xa>
 801aed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aed4:	07d0      	lsls	r0, r2, #31
 801aed6:	d404      	bmi.n	801aee2 <_fflush_r+0x3a>
 801aed8:	0599      	lsls	r1, r3, #22
 801aeda:	d402      	bmi.n	801aee2 <_fflush_r+0x3a>
 801aedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aede:	f000 fa7e 	bl	801b3de <__retarget_lock_acquire_recursive>
 801aee2:	4628      	mov	r0, r5
 801aee4:	4621      	mov	r1, r4
 801aee6:	f7ff ff59 	bl	801ad9c <__sflush_r>
 801aeea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aeec:	07da      	lsls	r2, r3, #31
 801aeee:	4605      	mov	r5, r0
 801aef0:	d4e0      	bmi.n	801aeb4 <_fflush_r+0xc>
 801aef2:	89a3      	ldrh	r3, [r4, #12]
 801aef4:	059b      	lsls	r3, r3, #22
 801aef6:	d4dd      	bmi.n	801aeb4 <_fflush_r+0xc>
 801aef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aefa:	f000 fa71 	bl	801b3e0 <__retarget_lock_release_recursive>
 801aefe:	e7d9      	b.n	801aeb4 <_fflush_r+0xc>
 801af00:	4b05      	ldr	r3, [pc, #20]	; (801af18 <_fflush_r+0x70>)
 801af02:	429c      	cmp	r4, r3
 801af04:	d101      	bne.n	801af0a <_fflush_r+0x62>
 801af06:	68ac      	ldr	r4, [r5, #8]
 801af08:	e7df      	b.n	801aeca <_fflush_r+0x22>
 801af0a:	4b04      	ldr	r3, [pc, #16]	; (801af1c <_fflush_r+0x74>)
 801af0c:	429c      	cmp	r4, r3
 801af0e:	bf08      	it	eq
 801af10:	68ec      	ldreq	r4, [r5, #12]
 801af12:	e7da      	b.n	801aeca <_fflush_r+0x22>
 801af14:	0801f854 	.word	0x0801f854
 801af18:	0801f874 	.word	0x0801f874
 801af1c:	0801f834 	.word	0x0801f834

0801af20 <fflush>:
 801af20:	4601      	mov	r1, r0
 801af22:	b920      	cbnz	r0, 801af2e <fflush+0xe>
 801af24:	4b04      	ldr	r3, [pc, #16]	; (801af38 <fflush+0x18>)
 801af26:	4905      	ldr	r1, [pc, #20]	; (801af3c <fflush+0x1c>)
 801af28:	6818      	ldr	r0, [r3, #0]
 801af2a:	f000 b9a1 	b.w	801b270 <_fwalk_reent>
 801af2e:	4b04      	ldr	r3, [pc, #16]	; (801af40 <fflush+0x20>)
 801af30:	6818      	ldr	r0, [r3, #0]
 801af32:	f7ff bfb9 	b.w	801aea8 <_fflush_r>
 801af36:	bf00      	nop
 801af38:	0801f894 	.word	0x0801f894
 801af3c:	0801aea9 	.word	0x0801aea9
 801af40:	20000010 	.word	0x20000010

0801af44 <std>:
 801af44:	2300      	movs	r3, #0
 801af46:	b510      	push	{r4, lr}
 801af48:	4604      	mov	r4, r0
 801af4a:	e9c0 3300 	strd	r3, r3, [r0]
 801af4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801af52:	6083      	str	r3, [r0, #8]
 801af54:	8181      	strh	r1, [r0, #12]
 801af56:	6643      	str	r3, [r0, #100]	; 0x64
 801af58:	81c2      	strh	r2, [r0, #14]
 801af5a:	6183      	str	r3, [r0, #24]
 801af5c:	4619      	mov	r1, r3
 801af5e:	2208      	movs	r2, #8
 801af60:	305c      	adds	r0, #92	; 0x5c
 801af62:	f000 fae3 	bl	801b52c <memset>
 801af66:	4b05      	ldr	r3, [pc, #20]	; (801af7c <std+0x38>)
 801af68:	6263      	str	r3, [r4, #36]	; 0x24
 801af6a:	4b05      	ldr	r3, [pc, #20]	; (801af80 <std+0x3c>)
 801af6c:	62a3      	str	r3, [r4, #40]	; 0x28
 801af6e:	4b05      	ldr	r3, [pc, #20]	; (801af84 <std+0x40>)
 801af70:	62e3      	str	r3, [r4, #44]	; 0x2c
 801af72:	4b05      	ldr	r3, [pc, #20]	; (801af88 <std+0x44>)
 801af74:	6224      	str	r4, [r4, #32]
 801af76:	6323      	str	r3, [r4, #48]	; 0x30
 801af78:	bd10      	pop	{r4, pc}
 801af7a:	bf00      	nop
 801af7c:	0801bf5d 	.word	0x0801bf5d
 801af80:	0801bf7f 	.word	0x0801bf7f
 801af84:	0801bfb7 	.word	0x0801bfb7
 801af88:	0801bfdb 	.word	0x0801bfdb

0801af8c <_cleanup_r>:
 801af8c:	4901      	ldr	r1, [pc, #4]	; (801af94 <_cleanup_r+0x8>)
 801af8e:	f000 b96f 	b.w	801b270 <_fwalk_reent>
 801af92:	bf00      	nop
 801af94:	0801aea9 	.word	0x0801aea9

0801af98 <__sfmoreglue>:
 801af98:	b570      	push	{r4, r5, r6, lr}
 801af9a:	2268      	movs	r2, #104	; 0x68
 801af9c:	1e4d      	subs	r5, r1, #1
 801af9e:	4355      	muls	r5, r2
 801afa0:	460e      	mov	r6, r1
 801afa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801afa6:	f000 fb35 	bl	801b614 <_malloc_r>
 801afaa:	4604      	mov	r4, r0
 801afac:	b140      	cbz	r0, 801afc0 <__sfmoreglue+0x28>
 801afae:	2100      	movs	r1, #0
 801afb0:	e9c0 1600 	strd	r1, r6, [r0]
 801afb4:	300c      	adds	r0, #12
 801afb6:	60a0      	str	r0, [r4, #8]
 801afb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801afbc:	f000 fab6 	bl	801b52c <memset>
 801afc0:	4620      	mov	r0, r4
 801afc2:	bd70      	pop	{r4, r5, r6, pc}

0801afc4 <__sfp_lock_acquire>:
 801afc4:	4801      	ldr	r0, [pc, #4]	; (801afcc <__sfp_lock_acquire+0x8>)
 801afc6:	f000 ba0a 	b.w	801b3de <__retarget_lock_acquire_recursive>
 801afca:	bf00      	nop
 801afcc:	20005505 	.word	0x20005505

0801afd0 <__sfp_lock_release>:
 801afd0:	4801      	ldr	r0, [pc, #4]	; (801afd8 <__sfp_lock_release+0x8>)
 801afd2:	f000 ba05 	b.w	801b3e0 <__retarget_lock_release_recursive>
 801afd6:	bf00      	nop
 801afd8:	20005505 	.word	0x20005505

0801afdc <__sinit_lock_acquire>:
 801afdc:	4801      	ldr	r0, [pc, #4]	; (801afe4 <__sinit_lock_acquire+0x8>)
 801afde:	f000 b9fe 	b.w	801b3de <__retarget_lock_acquire_recursive>
 801afe2:	bf00      	nop
 801afe4:	20005506 	.word	0x20005506

0801afe8 <__sinit_lock_release>:
 801afe8:	4801      	ldr	r0, [pc, #4]	; (801aff0 <__sinit_lock_release+0x8>)
 801afea:	f000 b9f9 	b.w	801b3e0 <__retarget_lock_release_recursive>
 801afee:	bf00      	nop
 801aff0:	20005506 	.word	0x20005506

0801aff4 <__sinit>:
 801aff4:	b510      	push	{r4, lr}
 801aff6:	4604      	mov	r4, r0
 801aff8:	f7ff fff0 	bl	801afdc <__sinit_lock_acquire>
 801affc:	69a3      	ldr	r3, [r4, #24]
 801affe:	b11b      	cbz	r3, 801b008 <__sinit+0x14>
 801b000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b004:	f7ff bff0 	b.w	801afe8 <__sinit_lock_release>
 801b008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b00c:	6523      	str	r3, [r4, #80]	; 0x50
 801b00e:	4b13      	ldr	r3, [pc, #76]	; (801b05c <__sinit+0x68>)
 801b010:	4a13      	ldr	r2, [pc, #76]	; (801b060 <__sinit+0x6c>)
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	62a2      	str	r2, [r4, #40]	; 0x28
 801b016:	42a3      	cmp	r3, r4
 801b018:	bf04      	itt	eq
 801b01a:	2301      	moveq	r3, #1
 801b01c:	61a3      	streq	r3, [r4, #24]
 801b01e:	4620      	mov	r0, r4
 801b020:	f000 f820 	bl	801b064 <__sfp>
 801b024:	6060      	str	r0, [r4, #4]
 801b026:	4620      	mov	r0, r4
 801b028:	f000 f81c 	bl	801b064 <__sfp>
 801b02c:	60a0      	str	r0, [r4, #8]
 801b02e:	4620      	mov	r0, r4
 801b030:	f000 f818 	bl	801b064 <__sfp>
 801b034:	2200      	movs	r2, #0
 801b036:	60e0      	str	r0, [r4, #12]
 801b038:	2104      	movs	r1, #4
 801b03a:	6860      	ldr	r0, [r4, #4]
 801b03c:	f7ff ff82 	bl	801af44 <std>
 801b040:	68a0      	ldr	r0, [r4, #8]
 801b042:	2201      	movs	r2, #1
 801b044:	2109      	movs	r1, #9
 801b046:	f7ff ff7d 	bl	801af44 <std>
 801b04a:	68e0      	ldr	r0, [r4, #12]
 801b04c:	2202      	movs	r2, #2
 801b04e:	2112      	movs	r1, #18
 801b050:	f7ff ff78 	bl	801af44 <std>
 801b054:	2301      	movs	r3, #1
 801b056:	61a3      	str	r3, [r4, #24]
 801b058:	e7d2      	b.n	801b000 <__sinit+0xc>
 801b05a:	bf00      	nop
 801b05c:	0801f894 	.word	0x0801f894
 801b060:	0801af8d 	.word	0x0801af8d

0801b064 <__sfp>:
 801b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b066:	4607      	mov	r7, r0
 801b068:	f7ff ffac 	bl	801afc4 <__sfp_lock_acquire>
 801b06c:	4b1e      	ldr	r3, [pc, #120]	; (801b0e8 <__sfp+0x84>)
 801b06e:	681e      	ldr	r6, [r3, #0]
 801b070:	69b3      	ldr	r3, [r6, #24]
 801b072:	b913      	cbnz	r3, 801b07a <__sfp+0x16>
 801b074:	4630      	mov	r0, r6
 801b076:	f7ff ffbd 	bl	801aff4 <__sinit>
 801b07a:	3648      	adds	r6, #72	; 0x48
 801b07c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b080:	3b01      	subs	r3, #1
 801b082:	d503      	bpl.n	801b08c <__sfp+0x28>
 801b084:	6833      	ldr	r3, [r6, #0]
 801b086:	b30b      	cbz	r3, 801b0cc <__sfp+0x68>
 801b088:	6836      	ldr	r6, [r6, #0]
 801b08a:	e7f7      	b.n	801b07c <__sfp+0x18>
 801b08c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b090:	b9d5      	cbnz	r5, 801b0c8 <__sfp+0x64>
 801b092:	4b16      	ldr	r3, [pc, #88]	; (801b0ec <__sfp+0x88>)
 801b094:	60e3      	str	r3, [r4, #12]
 801b096:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b09a:	6665      	str	r5, [r4, #100]	; 0x64
 801b09c:	f000 f99e 	bl	801b3dc <__retarget_lock_init_recursive>
 801b0a0:	f7ff ff96 	bl	801afd0 <__sfp_lock_release>
 801b0a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b0a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b0ac:	6025      	str	r5, [r4, #0]
 801b0ae:	61a5      	str	r5, [r4, #24]
 801b0b0:	2208      	movs	r2, #8
 801b0b2:	4629      	mov	r1, r5
 801b0b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b0b8:	f000 fa38 	bl	801b52c <memset>
 801b0bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b0c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b0c4:	4620      	mov	r0, r4
 801b0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0c8:	3468      	adds	r4, #104	; 0x68
 801b0ca:	e7d9      	b.n	801b080 <__sfp+0x1c>
 801b0cc:	2104      	movs	r1, #4
 801b0ce:	4638      	mov	r0, r7
 801b0d0:	f7ff ff62 	bl	801af98 <__sfmoreglue>
 801b0d4:	4604      	mov	r4, r0
 801b0d6:	6030      	str	r0, [r6, #0]
 801b0d8:	2800      	cmp	r0, #0
 801b0da:	d1d5      	bne.n	801b088 <__sfp+0x24>
 801b0dc:	f7ff ff78 	bl	801afd0 <__sfp_lock_release>
 801b0e0:	230c      	movs	r3, #12
 801b0e2:	603b      	str	r3, [r7, #0]
 801b0e4:	e7ee      	b.n	801b0c4 <__sfp+0x60>
 801b0e6:	bf00      	nop
 801b0e8:	0801f894 	.word	0x0801f894
 801b0ec:	ffff0001 	.word	0xffff0001

0801b0f0 <fiprintf>:
 801b0f0:	b40e      	push	{r1, r2, r3}
 801b0f2:	b503      	push	{r0, r1, lr}
 801b0f4:	4601      	mov	r1, r0
 801b0f6:	ab03      	add	r3, sp, #12
 801b0f8:	4805      	ldr	r0, [pc, #20]	; (801b110 <fiprintf+0x20>)
 801b0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0fe:	6800      	ldr	r0, [r0, #0]
 801b100:	9301      	str	r3, [sp, #4]
 801b102:	f000 fb25 	bl	801b750 <_vfiprintf_r>
 801b106:	b002      	add	sp, #8
 801b108:	f85d eb04 	ldr.w	lr, [sp], #4
 801b10c:	b003      	add	sp, #12
 801b10e:	4770      	bx	lr
 801b110:	20000010 	.word	0x20000010

0801b114 <_fputc_r>:
 801b114:	b570      	push	{r4, r5, r6, lr}
 801b116:	460e      	mov	r6, r1
 801b118:	4614      	mov	r4, r2
 801b11a:	4605      	mov	r5, r0
 801b11c:	b118      	cbz	r0, 801b126 <_fputc_r+0x12>
 801b11e:	6983      	ldr	r3, [r0, #24]
 801b120:	b90b      	cbnz	r3, 801b126 <_fputc_r+0x12>
 801b122:	f7ff ff67 	bl	801aff4 <__sinit>
 801b126:	4b14      	ldr	r3, [pc, #80]	; (801b178 <_fputc_r+0x64>)
 801b128:	429c      	cmp	r4, r3
 801b12a:	d11a      	bne.n	801b162 <_fputc_r+0x4e>
 801b12c:	686c      	ldr	r4, [r5, #4]
 801b12e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b130:	07d8      	lsls	r0, r3, #31
 801b132:	d405      	bmi.n	801b140 <_fputc_r+0x2c>
 801b134:	89a3      	ldrh	r3, [r4, #12]
 801b136:	0599      	lsls	r1, r3, #22
 801b138:	d402      	bmi.n	801b140 <_fputc_r+0x2c>
 801b13a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b13c:	f000 f94f 	bl	801b3de <__retarget_lock_acquire_recursive>
 801b140:	4622      	mov	r2, r4
 801b142:	4628      	mov	r0, r5
 801b144:	4631      	mov	r1, r6
 801b146:	f000 fdc7 	bl	801bcd8 <_putc_r>
 801b14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b14c:	07da      	lsls	r2, r3, #31
 801b14e:	4605      	mov	r5, r0
 801b150:	d405      	bmi.n	801b15e <_fputc_r+0x4a>
 801b152:	89a3      	ldrh	r3, [r4, #12]
 801b154:	059b      	lsls	r3, r3, #22
 801b156:	d402      	bmi.n	801b15e <_fputc_r+0x4a>
 801b158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b15a:	f000 f941 	bl	801b3e0 <__retarget_lock_release_recursive>
 801b15e:	4628      	mov	r0, r5
 801b160:	bd70      	pop	{r4, r5, r6, pc}
 801b162:	4b06      	ldr	r3, [pc, #24]	; (801b17c <_fputc_r+0x68>)
 801b164:	429c      	cmp	r4, r3
 801b166:	d101      	bne.n	801b16c <_fputc_r+0x58>
 801b168:	68ac      	ldr	r4, [r5, #8]
 801b16a:	e7e0      	b.n	801b12e <_fputc_r+0x1a>
 801b16c:	4b04      	ldr	r3, [pc, #16]	; (801b180 <_fputc_r+0x6c>)
 801b16e:	429c      	cmp	r4, r3
 801b170:	bf08      	it	eq
 801b172:	68ec      	ldreq	r4, [r5, #12]
 801b174:	e7db      	b.n	801b12e <_fputc_r+0x1a>
 801b176:	bf00      	nop
 801b178:	0801f854 	.word	0x0801f854
 801b17c:	0801f874 	.word	0x0801f874
 801b180:	0801f834 	.word	0x0801f834

0801b184 <fputc>:
 801b184:	4b02      	ldr	r3, [pc, #8]	; (801b190 <fputc+0xc>)
 801b186:	460a      	mov	r2, r1
 801b188:	4601      	mov	r1, r0
 801b18a:	6818      	ldr	r0, [r3, #0]
 801b18c:	f7ff bfc2 	b.w	801b114 <_fputc_r>
 801b190:	20000010 	.word	0x20000010

0801b194 <_fputs_r>:
 801b194:	b570      	push	{r4, r5, r6, lr}
 801b196:	460e      	mov	r6, r1
 801b198:	4614      	mov	r4, r2
 801b19a:	4605      	mov	r5, r0
 801b19c:	b118      	cbz	r0, 801b1a6 <_fputs_r+0x12>
 801b19e:	6983      	ldr	r3, [r0, #24]
 801b1a0:	b90b      	cbnz	r3, 801b1a6 <_fputs_r+0x12>
 801b1a2:	f7ff ff27 	bl	801aff4 <__sinit>
 801b1a6:	4b2b      	ldr	r3, [pc, #172]	; (801b254 <_fputs_r+0xc0>)
 801b1a8:	429c      	cmp	r4, r3
 801b1aa:	d11e      	bne.n	801b1ea <_fputs_r+0x56>
 801b1ac:	686c      	ldr	r4, [r5, #4]
 801b1ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1b0:	07da      	lsls	r2, r3, #31
 801b1b2:	d405      	bmi.n	801b1c0 <_fputs_r+0x2c>
 801b1b4:	89a3      	ldrh	r3, [r4, #12]
 801b1b6:	059b      	lsls	r3, r3, #22
 801b1b8:	d402      	bmi.n	801b1c0 <_fputs_r+0x2c>
 801b1ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1bc:	f000 f90f 	bl	801b3de <__retarget_lock_acquire_recursive>
 801b1c0:	89a3      	ldrh	r3, [r4, #12]
 801b1c2:	0718      	lsls	r0, r3, #28
 801b1c4:	d51b      	bpl.n	801b1fe <_fputs_r+0x6a>
 801b1c6:	6923      	ldr	r3, [r4, #16]
 801b1c8:	b1cb      	cbz	r3, 801b1fe <_fputs_r+0x6a>
 801b1ca:	3e01      	subs	r6, #1
 801b1cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b1d0:	bb39      	cbnz	r1, 801b222 <_fputs_r+0x8e>
 801b1d2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801b1d4:	f015 0501 	ands.w	r5, r5, #1
 801b1d8:	d139      	bne.n	801b24e <_fputs_r+0xba>
 801b1da:	89a3      	ldrh	r3, [r4, #12]
 801b1dc:	0599      	lsls	r1, r3, #22
 801b1de:	d402      	bmi.n	801b1e6 <_fputs_r+0x52>
 801b1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1e2:	f000 f8fd 	bl	801b3e0 <__retarget_lock_release_recursive>
 801b1e6:	4628      	mov	r0, r5
 801b1e8:	bd70      	pop	{r4, r5, r6, pc}
 801b1ea:	4b1b      	ldr	r3, [pc, #108]	; (801b258 <_fputs_r+0xc4>)
 801b1ec:	429c      	cmp	r4, r3
 801b1ee:	d101      	bne.n	801b1f4 <_fputs_r+0x60>
 801b1f0:	68ac      	ldr	r4, [r5, #8]
 801b1f2:	e7dc      	b.n	801b1ae <_fputs_r+0x1a>
 801b1f4:	4b19      	ldr	r3, [pc, #100]	; (801b25c <_fputs_r+0xc8>)
 801b1f6:	429c      	cmp	r4, r3
 801b1f8:	bf08      	it	eq
 801b1fa:	68ec      	ldreq	r4, [r5, #12]
 801b1fc:	e7d7      	b.n	801b1ae <_fputs_r+0x1a>
 801b1fe:	4621      	mov	r1, r4
 801b200:	4628      	mov	r0, r5
 801b202:	f001 fe4f 	bl	801cea4 <__swsetup_r>
 801b206:	2800      	cmp	r0, #0
 801b208:	d0df      	beq.n	801b1ca <_fputs_r+0x36>
 801b20a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b20c:	07da      	lsls	r2, r3, #31
 801b20e:	d405      	bmi.n	801b21c <_fputs_r+0x88>
 801b210:	89a3      	ldrh	r3, [r4, #12]
 801b212:	059b      	lsls	r3, r3, #22
 801b214:	d402      	bmi.n	801b21c <_fputs_r+0x88>
 801b216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b218:	f000 f8e2 	bl	801b3e0 <__retarget_lock_release_recursive>
 801b21c:	f04f 35ff 	mov.w	r5, #4294967295
 801b220:	e7e1      	b.n	801b1e6 <_fputs_r+0x52>
 801b222:	68a3      	ldr	r3, [r4, #8]
 801b224:	3b01      	subs	r3, #1
 801b226:	2b00      	cmp	r3, #0
 801b228:	60a3      	str	r3, [r4, #8]
 801b22a:	da04      	bge.n	801b236 <_fputs_r+0xa2>
 801b22c:	69a2      	ldr	r2, [r4, #24]
 801b22e:	4293      	cmp	r3, r2
 801b230:	db06      	blt.n	801b240 <_fputs_r+0xac>
 801b232:	290a      	cmp	r1, #10
 801b234:	d004      	beq.n	801b240 <_fputs_r+0xac>
 801b236:	6823      	ldr	r3, [r4, #0]
 801b238:	1c5a      	adds	r2, r3, #1
 801b23a:	6022      	str	r2, [r4, #0]
 801b23c:	7019      	strb	r1, [r3, #0]
 801b23e:	e7c5      	b.n	801b1cc <_fputs_r+0x38>
 801b240:	4622      	mov	r2, r4
 801b242:	4628      	mov	r0, r5
 801b244:	f001 fdbc 	bl	801cdc0 <__swbuf_r>
 801b248:	3001      	adds	r0, #1
 801b24a:	d1bf      	bne.n	801b1cc <_fputs_r+0x38>
 801b24c:	e7dd      	b.n	801b20a <_fputs_r+0x76>
 801b24e:	460d      	mov	r5, r1
 801b250:	e7c9      	b.n	801b1e6 <_fputs_r+0x52>
 801b252:	bf00      	nop
 801b254:	0801f854 	.word	0x0801f854
 801b258:	0801f874 	.word	0x0801f874
 801b25c:	0801f834 	.word	0x0801f834

0801b260 <fputs>:
 801b260:	4b02      	ldr	r3, [pc, #8]	; (801b26c <fputs+0xc>)
 801b262:	460a      	mov	r2, r1
 801b264:	4601      	mov	r1, r0
 801b266:	6818      	ldr	r0, [r3, #0]
 801b268:	f7ff bf94 	b.w	801b194 <_fputs_r>
 801b26c:	20000010 	.word	0x20000010

0801b270 <_fwalk_reent>:
 801b270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b274:	4606      	mov	r6, r0
 801b276:	4688      	mov	r8, r1
 801b278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b27c:	2700      	movs	r7, #0
 801b27e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b282:	f1b9 0901 	subs.w	r9, r9, #1
 801b286:	d505      	bpl.n	801b294 <_fwalk_reent+0x24>
 801b288:	6824      	ldr	r4, [r4, #0]
 801b28a:	2c00      	cmp	r4, #0
 801b28c:	d1f7      	bne.n	801b27e <_fwalk_reent+0xe>
 801b28e:	4638      	mov	r0, r7
 801b290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b294:	89ab      	ldrh	r3, [r5, #12]
 801b296:	2b01      	cmp	r3, #1
 801b298:	d907      	bls.n	801b2aa <_fwalk_reent+0x3a>
 801b29a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b29e:	3301      	adds	r3, #1
 801b2a0:	d003      	beq.n	801b2aa <_fwalk_reent+0x3a>
 801b2a2:	4629      	mov	r1, r5
 801b2a4:	4630      	mov	r0, r6
 801b2a6:	47c0      	blx	r8
 801b2a8:	4307      	orrs	r7, r0
 801b2aa:	3568      	adds	r5, #104	; 0x68
 801b2ac:	e7e9      	b.n	801b282 <_fwalk_reent+0x12>
	...

0801b2b0 <_fwrite_r>:
 801b2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2b4:	9c08      	ldr	r4, [sp, #32]
 801b2b6:	468a      	mov	sl, r1
 801b2b8:	4690      	mov	r8, r2
 801b2ba:	fb02 f903 	mul.w	r9, r2, r3
 801b2be:	4605      	mov	r5, r0
 801b2c0:	b118      	cbz	r0, 801b2ca <_fwrite_r+0x1a>
 801b2c2:	6983      	ldr	r3, [r0, #24]
 801b2c4:	b90b      	cbnz	r3, 801b2ca <_fwrite_r+0x1a>
 801b2c6:	f7ff fe95 	bl	801aff4 <__sinit>
 801b2ca:	4b26      	ldr	r3, [pc, #152]	; (801b364 <_fwrite_r+0xb4>)
 801b2cc:	429c      	cmp	r4, r3
 801b2ce:	d123      	bne.n	801b318 <_fwrite_r+0x68>
 801b2d0:	686c      	ldr	r4, [r5, #4]
 801b2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2d4:	07de      	lsls	r6, r3, #31
 801b2d6:	d405      	bmi.n	801b2e4 <_fwrite_r+0x34>
 801b2d8:	89a3      	ldrh	r3, [r4, #12]
 801b2da:	0598      	lsls	r0, r3, #22
 801b2dc:	d402      	bmi.n	801b2e4 <_fwrite_r+0x34>
 801b2de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2e0:	f000 f87d 	bl	801b3de <__retarget_lock_acquire_recursive>
 801b2e4:	89a3      	ldrh	r3, [r4, #12]
 801b2e6:	0719      	lsls	r1, r3, #28
 801b2e8:	d520      	bpl.n	801b32c <_fwrite_r+0x7c>
 801b2ea:	6923      	ldr	r3, [r4, #16]
 801b2ec:	b1f3      	cbz	r3, 801b32c <_fwrite_r+0x7c>
 801b2ee:	2600      	movs	r6, #0
 801b2f0:	454e      	cmp	r6, r9
 801b2f2:	d029      	beq.n	801b348 <_fwrite_r+0x98>
 801b2f4:	68a7      	ldr	r7, [r4, #8]
 801b2f6:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801b2fa:	3f01      	subs	r7, #1
 801b2fc:	2f00      	cmp	r7, #0
 801b2fe:	60a7      	str	r7, [r4, #8]
 801b300:	da04      	bge.n	801b30c <_fwrite_r+0x5c>
 801b302:	69a3      	ldr	r3, [r4, #24]
 801b304:	429f      	cmp	r7, r3
 801b306:	db19      	blt.n	801b33c <_fwrite_r+0x8c>
 801b308:	290a      	cmp	r1, #10
 801b30a:	d017      	beq.n	801b33c <_fwrite_r+0x8c>
 801b30c:	6823      	ldr	r3, [r4, #0]
 801b30e:	1c5a      	adds	r2, r3, #1
 801b310:	6022      	str	r2, [r4, #0]
 801b312:	7019      	strb	r1, [r3, #0]
 801b314:	3601      	adds	r6, #1
 801b316:	e7eb      	b.n	801b2f0 <_fwrite_r+0x40>
 801b318:	4b13      	ldr	r3, [pc, #76]	; (801b368 <_fwrite_r+0xb8>)
 801b31a:	429c      	cmp	r4, r3
 801b31c:	d101      	bne.n	801b322 <_fwrite_r+0x72>
 801b31e:	68ac      	ldr	r4, [r5, #8]
 801b320:	e7d7      	b.n	801b2d2 <_fwrite_r+0x22>
 801b322:	4b12      	ldr	r3, [pc, #72]	; (801b36c <_fwrite_r+0xbc>)
 801b324:	429c      	cmp	r4, r3
 801b326:	bf08      	it	eq
 801b328:	68ec      	ldreq	r4, [r5, #12]
 801b32a:	e7d2      	b.n	801b2d2 <_fwrite_r+0x22>
 801b32c:	4621      	mov	r1, r4
 801b32e:	4628      	mov	r0, r5
 801b330:	f001 fdb8 	bl	801cea4 <__swsetup_r>
 801b334:	2800      	cmp	r0, #0
 801b336:	d0da      	beq.n	801b2ee <_fwrite_r+0x3e>
 801b338:	2600      	movs	r6, #0
 801b33a:	e005      	b.n	801b348 <_fwrite_r+0x98>
 801b33c:	4622      	mov	r2, r4
 801b33e:	4628      	mov	r0, r5
 801b340:	f001 fd3e 	bl	801cdc0 <__swbuf_r>
 801b344:	3001      	adds	r0, #1
 801b346:	d1e5      	bne.n	801b314 <_fwrite_r+0x64>
 801b348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b34a:	07da      	lsls	r2, r3, #31
 801b34c:	d405      	bmi.n	801b35a <_fwrite_r+0xaa>
 801b34e:	89a3      	ldrh	r3, [r4, #12]
 801b350:	059b      	lsls	r3, r3, #22
 801b352:	d402      	bmi.n	801b35a <_fwrite_r+0xaa>
 801b354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b356:	f000 f843 	bl	801b3e0 <__retarget_lock_release_recursive>
 801b35a:	fbb6 f0f8 	udiv	r0, r6, r8
 801b35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b362:	bf00      	nop
 801b364:	0801f854 	.word	0x0801f854
 801b368:	0801f874 	.word	0x0801f874
 801b36c:	0801f834 	.word	0x0801f834

0801b370 <fwrite>:
 801b370:	b507      	push	{r0, r1, r2, lr}
 801b372:	9300      	str	r3, [sp, #0]
 801b374:	4613      	mov	r3, r2
 801b376:	460a      	mov	r2, r1
 801b378:	4601      	mov	r1, r0
 801b37a:	4803      	ldr	r0, [pc, #12]	; (801b388 <fwrite+0x18>)
 801b37c:	6800      	ldr	r0, [r0, #0]
 801b37e:	f7ff ff97 	bl	801b2b0 <_fwrite_r>
 801b382:	b003      	add	sp, #12
 801b384:	f85d fb04 	ldr.w	pc, [sp], #4
 801b388:	20000010 	.word	0x20000010

0801b38c <__libc_init_array>:
 801b38c:	b570      	push	{r4, r5, r6, lr}
 801b38e:	4d0d      	ldr	r5, [pc, #52]	; (801b3c4 <__libc_init_array+0x38>)
 801b390:	4c0d      	ldr	r4, [pc, #52]	; (801b3c8 <__libc_init_array+0x3c>)
 801b392:	1b64      	subs	r4, r4, r5
 801b394:	10a4      	asrs	r4, r4, #2
 801b396:	2600      	movs	r6, #0
 801b398:	42a6      	cmp	r6, r4
 801b39a:	d109      	bne.n	801b3b0 <__libc_init_array+0x24>
 801b39c:	4d0b      	ldr	r5, [pc, #44]	; (801b3cc <__libc_init_array+0x40>)
 801b39e:	4c0c      	ldr	r4, [pc, #48]	; (801b3d0 <__libc_init_array+0x44>)
 801b3a0:	f003 f886 	bl	801e4b0 <_init>
 801b3a4:	1b64      	subs	r4, r4, r5
 801b3a6:	10a4      	asrs	r4, r4, #2
 801b3a8:	2600      	movs	r6, #0
 801b3aa:	42a6      	cmp	r6, r4
 801b3ac:	d105      	bne.n	801b3ba <__libc_init_array+0x2e>
 801b3ae:	bd70      	pop	{r4, r5, r6, pc}
 801b3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3b4:	4798      	blx	r3
 801b3b6:	3601      	adds	r6, #1
 801b3b8:	e7ee      	b.n	801b398 <__libc_init_array+0xc>
 801b3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3be:	4798      	blx	r3
 801b3c0:	3601      	adds	r6, #1
 801b3c2:	e7f2      	b.n	801b3aa <__libc_init_array+0x1e>
 801b3c4:	0801fb6c 	.word	0x0801fb6c
 801b3c8:	0801fb6c 	.word	0x0801fb6c
 801b3cc:	0801fb6c 	.word	0x0801fb6c
 801b3d0:	0801fb70 	.word	0x0801fb70

0801b3d4 <localeconv>:
 801b3d4:	4800      	ldr	r0, [pc, #0]	; (801b3d8 <localeconv+0x4>)
 801b3d6:	4770      	bx	lr
 801b3d8:	20000164 	.word	0x20000164

0801b3dc <__retarget_lock_init_recursive>:
 801b3dc:	4770      	bx	lr

0801b3de <__retarget_lock_acquire_recursive>:
 801b3de:	4770      	bx	lr

0801b3e0 <__retarget_lock_release_recursive>:
 801b3e0:	4770      	bx	lr

0801b3e2 <__swhatbuf_r>:
 801b3e2:	b570      	push	{r4, r5, r6, lr}
 801b3e4:	460e      	mov	r6, r1
 801b3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3ea:	2900      	cmp	r1, #0
 801b3ec:	b096      	sub	sp, #88	; 0x58
 801b3ee:	4614      	mov	r4, r2
 801b3f0:	461d      	mov	r5, r3
 801b3f2:	da08      	bge.n	801b406 <__swhatbuf_r+0x24>
 801b3f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	602a      	str	r2, [r5, #0]
 801b3fc:	061a      	lsls	r2, r3, #24
 801b3fe:	d410      	bmi.n	801b422 <__swhatbuf_r+0x40>
 801b400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b404:	e00e      	b.n	801b424 <__swhatbuf_r+0x42>
 801b406:	466a      	mov	r2, sp
 801b408:	f001 fde8 	bl	801cfdc <_fstat_r>
 801b40c:	2800      	cmp	r0, #0
 801b40e:	dbf1      	blt.n	801b3f4 <__swhatbuf_r+0x12>
 801b410:	9a01      	ldr	r2, [sp, #4]
 801b412:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b416:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b41a:	425a      	negs	r2, r3
 801b41c:	415a      	adcs	r2, r3
 801b41e:	602a      	str	r2, [r5, #0]
 801b420:	e7ee      	b.n	801b400 <__swhatbuf_r+0x1e>
 801b422:	2340      	movs	r3, #64	; 0x40
 801b424:	2000      	movs	r0, #0
 801b426:	6023      	str	r3, [r4, #0]
 801b428:	b016      	add	sp, #88	; 0x58
 801b42a:	bd70      	pop	{r4, r5, r6, pc}

0801b42c <__smakebuf_r>:
 801b42c:	898b      	ldrh	r3, [r1, #12]
 801b42e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b430:	079d      	lsls	r5, r3, #30
 801b432:	4606      	mov	r6, r0
 801b434:	460c      	mov	r4, r1
 801b436:	d507      	bpl.n	801b448 <__smakebuf_r+0x1c>
 801b438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b43c:	6023      	str	r3, [r4, #0]
 801b43e:	6123      	str	r3, [r4, #16]
 801b440:	2301      	movs	r3, #1
 801b442:	6163      	str	r3, [r4, #20]
 801b444:	b002      	add	sp, #8
 801b446:	bd70      	pop	{r4, r5, r6, pc}
 801b448:	ab01      	add	r3, sp, #4
 801b44a:	466a      	mov	r2, sp
 801b44c:	f7ff ffc9 	bl	801b3e2 <__swhatbuf_r>
 801b450:	9900      	ldr	r1, [sp, #0]
 801b452:	4605      	mov	r5, r0
 801b454:	4630      	mov	r0, r6
 801b456:	f000 f8dd 	bl	801b614 <_malloc_r>
 801b45a:	b948      	cbnz	r0, 801b470 <__smakebuf_r+0x44>
 801b45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b460:	059a      	lsls	r2, r3, #22
 801b462:	d4ef      	bmi.n	801b444 <__smakebuf_r+0x18>
 801b464:	f023 0303 	bic.w	r3, r3, #3
 801b468:	f043 0302 	orr.w	r3, r3, #2
 801b46c:	81a3      	strh	r3, [r4, #12]
 801b46e:	e7e3      	b.n	801b438 <__smakebuf_r+0xc>
 801b470:	4b0d      	ldr	r3, [pc, #52]	; (801b4a8 <__smakebuf_r+0x7c>)
 801b472:	62b3      	str	r3, [r6, #40]	; 0x28
 801b474:	89a3      	ldrh	r3, [r4, #12]
 801b476:	6020      	str	r0, [r4, #0]
 801b478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b47c:	81a3      	strh	r3, [r4, #12]
 801b47e:	9b00      	ldr	r3, [sp, #0]
 801b480:	6163      	str	r3, [r4, #20]
 801b482:	9b01      	ldr	r3, [sp, #4]
 801b484:	6120      	str	r0, [r4, #16]
 801b486:	b15b      	cbz	r3, 801b4a0 <__smakebuf_r+0x74>
 801b488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b48c:	4630      	mov	r0, r6
 801b48e:	f002 f939 	bl	801d704 <_isatty_r>
 801b492:	b128      	cbz	r0, 801b4a0 <__smakebuf_r+0x74>
 801b494:	89a3      	ldrh	r3, [r4, #12]
 801b496:	f023 0303 	bic.w	r3, r3, #3
 801b49a:	f043 0301 	orr.w	r3, r3, #1
 801b49e:	81a3      	strh	r3, [r4, #12]
 801b4a0:	89a0      	ldrh	r0, [r4, #12]
 801b4a2:	4305      	orrs	r5, r0
 801b4a4:	81a5      	strh	r5, [r4, #12]
 801b4a6:	e7cd      	b.n	801b444 <__smakebuf_r+0x18>
 801b4a8:	0801af8d 	.word	0x0801af8d

0801b4ac <malloc>:
 801b4ac:	4b02      	ldr	r3, [pc, #8]	; (801b4b8 <malloc+0xc>)
 801b4ae:	4601      	mov	r1, r0
 801b4b0:	6818      	ldr	r0, [r3, #0]
 801b4b2:	f000 b8af 	b.w	801b614 <_malloc_r>
 801b4b6:	bf00      	nop
 801b4b8:	20000010 	.word	0x20000010

0801b4bc <free>:
 801b4bc:	4b02      	ldr	r3, [pc, #8]	; (801b4c8 <free+0xc>)
 801b4be:	4601      	mov	r1, r0
 801b4c0:	6818      	ldr	r0, [r3, #0]
 801b4c2:	f000 b83b 	b.w	801b53c <_free_r>
 801b4c6:	bf00      	nop
 801b4c8:	20000010 	.word	0x20000010

0801b4cc <__ascii_mbtowc>:
 801b4cc:	b082      	sub	sp, #8
 801b4ce:	b901      	cbnz	r1, 801b4d2 <__ascii_mbtowc+0x6>
 801b4d0:	a901      	add	r1, sp, #4
 801b4d2:	b142      	cbz	r2, 801b4e6 <__ascii_mbtowc+0x1a>
 801b4d4:	b14b      	cbz	r3, 801b4ea <__ascii_mbtowc+0x1e>
 801b4d6:	7813      	ldrb	r3, [r2, #0]
 801b4d8:	600b      	str	r3, [r1, #0]
 801b4da:	7812      	ldrb	r2, [r2, #0]
 801b4dc:	1e10      	subs	r0, r2, #0
 801b4de:	bf18      	it	ne
 801b4e0:	2001      	movne	r0, #1
 801b4e2:	b002      	add	sp, #8
 801b4e4:	4770      	bx	lr
 801b4e6:	4610      	mov	r0, r2
 801b4e8:	e7fb      	b.n	801b4e2 <__ascii_mbtowc+0x16>
 801b4ea:	f06f 0001 	mvn.w	r0, #1
 801b4ee:	e7f8      	b.n	801b4e2 <__ascii_mbtowc+0x16>

0801b4f0 <memcmp>:
 801b4f0:	b510      	push	{r4, lr}
 801b4f2:	3901      	subs	r1, #1
 801b4f4:	4402      	add	r2, r0
 801b4f6:	4290      	cmp	r0, r2
 801b4f8:	d101      	bne.n	801b4fe <memcmp+0xe>
 801b4fa:	2000      	movs	r0, #0
 801b4fc:	e005      	b.n	801b50a <memcmp+0x1a>
 801b4fe:	7803      	ldrb	r3, [r0, #0]
 801b500:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b504:	42a3      	cmp	r3, r4
 801b506:	d001      	beq.n	801b50c <memcmp+0x1c>
 801b508:	1b18      	subs	r0, r3, r4
 801b50a:	bd10      	pop	{r4, pc}
 801b50c:	3001      	adds	r0, #1
 801b50e:	e7f2      	b.n	801b4f6 <memcmp+0x6>

0801b510 <memcpy>:
 801b510:	440a      	add	r2, r1
 801b512:	4291      	cmp	r1, r2
 801b514:	f100 33ff 	add.w	r3, r0, #4294967295
 801b518:	d100      	bne.n	801b51c <memcpy+0xc>
 801b51a:	4770      	bx	lr
 801b51c:	b510      	push	{r4, lr}
 801b51e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b522:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b526:	4291      	cmp	r1, r2
 801b528:	d1f9      	bne.n	801b51e <memcpy+0xe>
 801b52a:	bd10      	pop	{r4, pc}

0801b52c <memset>:
 801b52c:	4402      	add	r2, r0
 801b52e:	4603      	mov	r3, r0
 801b530:	4293      	cmp	r3, r2
 801b532:	d100      	bne.n	801b536 <memset+0xa>
 801b534:	4770      	bx	lr
 801b536:	f803 1b01 	strb.w	r1, [r3], #1
 801b53a:	e7f9      	b.n	801b530 <memset+0x4>

0801b53c <_free_r>:
 801b53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b53e:	2900      	cmp	r1, #0
 801b540:	d044      	beq.n	801b5cc <_free_r+0x90>
 801b542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b546:	9001      	str	r0, [sp, #4]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	f1a1 0404 	sub.w	r4, r1, #4
 801b54e:	bfb8      	it	lt
 801b550:	18e4      	addlt	r4, r4, r3
 801b552:	f002 f913 	bl	801d77c <__malloc_lock>
 801b556:	4a1e      	ldr	r2, [pc, #120]	; (801b5d0 <_free_r+0x94>)
 801b558:	9801      	ldr	r0, [sp, #4]
 801b55a:	6813      	ldr	r3, [r2, #0]
 801b55c:	b933      	cbnz	r3, 801b56c <_free_r+0x30>
 801b55e:	6063      	str	r3, [r4, #4]
 801b560:	6014      	str	r4, [r2, #0]
 801b562:	b003      	add	sp, #12
 801b564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b568:	f002 b90e 	b.w	801d788 <__malloc_unlock>
 801b56c:	42a3      	cmp	r3, r4
 801b56e:	d908      	bls.n	801b582 <_free_r+0x46>
 801b570:	6825      	ldr	r5, [r4, #0]
 801b572:	1961      	adds	r1, r4, r5
 801b574:	428b      	cmp	r3, r1
 801b576:	bf01      	itttt	eq
 801b578:	6819      	ldreq	r1, [r3, #0]
 801b57a:	685b      	ldreq	r3, [r3, #4]
 801b57c:	1949      	addeq	r1, r1, r5
 801b57e:	6021      	streq	r1, [r4, #0]
 801b580:	e7ed      	b.n	801b55e <_free_r+0x22>
 801b582:	461a      	mov	r2, r3
 801b584:	685b      	ldr	r3, [r3, #4]
 801b586:	b10b      	cbz	r3, 801b58c <_free_r+0x50>
 801b588:	42a3      	cmp	r3, r4
 801b58a:	d9fa      	bls.n	801b582 <_free_r+0x46>
 801b58c:	6811      	ldr	r1, [r2, #0]
 801b58e:	1855      	adds	r5, r2, r1
 801b590:	42a5      	cmp	r5, r4
 801b592:	d10b      	bne.n	801b5ac <_free_r+0x70>
 801b594:	6824      	ldr	r4, [r4, #0]
 801b596:	4421      	add	r1, r4
 801b598:	1854      	adds	r4, r2, r1
 801b59a:	42a3      	cmp	r3, r4
 801b59c:	6011      	str	r1, [r2, #0]
 801b59e:	d1e0      	bne.n	801b562 <_free_r+0x26>
 801b5a0:	681c      	ldr	r4, [r3, #0]
 801b5a2:	685b      	ldr	r3, [r3, #4]
 801b5a4:	6053      	str	r3, [r2, #4]
 801b5a6:	4421      	add	r1, r4
 801b5a8:	6011      	str	r1, [r2, #0]
 801b5aa:	e7da      	b.n	801b562 <_free_r+0x26>
 801b5ac:	d902      	bls.n	801b5b4 <_free_r+0x78>
 801b5ae:	230c      	movs	r3, #12
 801b5b0:	6003      	str	r3, [r0, #0]
 801b5b2:	e7d6      	b.n	801b562 <_free_r+0x26>
 801b5b4:	6825      	ldr	r5, [r4, #0]
 801b5b6:	1961      	adds	r1, r4, r5
 801b5b8:	428b      	cmp	r3, r1
 801b5ba:	bf04      	itt	eq
 801b5bc:	6819      	ldreq	r1, [r3, #0]
 801b5be:	685b      	ldreq	r3, [r3, #4]
 801b5c0:	6063      	str	r3, [r4, #4]
 801b5c2:	bf04      	itt	eq
 801b5c4:	1949      	addeq	r1, r1, r5
 801b5c6:	6021      	streq	r1, [r4, #0]
 801b5c8:	6054      	str	r4, [r2, #4]
 801b5ca:	e7ca      	b.n	801b562 <_free_r+0x26>
 801b5cc:	b003      	add	sp, #12
 801b5ce:	bd30      	pop	{r4, r5, pc}
 801b5d0:	20005508 	.word	0x20005508

0801b5d4 <sbrk_aligned>:
 801b5d4:	b570      	push	{r4, r5, r6, lr}
 801b5d6:	4e0e      	ldr	r6, [pc, #56]	; (801b610 <sbrk_aligned+0x3c>)
 801b5d8:	460c      	mov	r4, r1
 801b5da:	6831      	ldr	r1, [r6, #0]
 801b5dc:	4605      	mov	r5, r0
 801b5de:	b911      	cbnz	r1, 801b5e6 <sbrk_aligned+0x12>
 801b5e0:	f000 fc34 	bl	801be4c <_sbrk_r>
 801b5e4:	6030      	str	r0, [r6, #0]
 801b5e6:	4621      	mov	r1, r4
 801b5e8:	4628      	mov	r0, r5
 801b5ea:	f000 fc2f 	bl	801be4c <_sbrk_r>
 801b5ee:	1c43      	adds	r3, r0, #1
 801b5f0:	d00a      	beq.n	801b608 <sbrk_aligned+0x34>
 801b5f2:	1cc4      	adds	r4, r0, #3
 801b5f4:	f024 0403 	bic.w	r4, r4, #3
 801b5f8:	42a0      	cmp	r0, r4
 801b5fa:	d007      	beq.n	801b60c <sbrk_aligned+0x38>
 801b5fc:	1a21      	subs	r1, r4, r0
 801b5fe:	4628      	mov	r0, r5
 801b600:	f000 fc24 	bl	801be4c <_sbrk_r>
 801b604:	3001      	adds	r0, #1
 801b606:	d101      	bne.n	801b60c <sbrk_aligned+0x38>
 801b608:	f04f 34ff 	mov.w	r4, #4294967295
 801b60c:	4620      	mov	r0, r4
 801b60e:	bd70      	pop	{r4, r5, r6, pc}
 801b610:	2000550c 	.word	0x2000550c

0801b614 <_malloc_r>:
 801b614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b618:	1ccd      	adds	r5, r1, #3
 801b61a:	f025 0503 	bic.w	r5, r5, #3
 801b61e:	3508      	adds	r5, #8
 801b620:	2d0c      	cmp	r5, #12
 801b622:	bf38      	it	cc
 801b624:	250c      	movcc	r5, #12
 801b626:	2d00      	cmp	r5, #0
 801b628:	4607      	mov	r7, r0
 801b62a:	db01      	blt.n	801b630 <_malloc_r+0x1c>
 801b62c:	42a9      	cmp	r1, r5
 801b62e:	d905      	bls.n	801b63c <_malloc_r+0x28>
 801b630:	230c      	movs	r3, #12
 801b632:	603b      	str	r3, [r7, #0]
 801b634:	2600      	movs	r6, #0
 801b636:	4630      	mov	r0, r6
 801b638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b63c:	4e2e      	ldr	r6, [pc, #184]	; (801b6f8 <_malloc_r+0xe4>)
 801b63e:	f002 f89d 	bl	801d77c <__malloc_lock>
 801b642:	6833      	ldr	r3, [r6, #0]
 801b644:	461c      	mov	r4, r3
 801b646:	bb34      	cbnz	r4, 801b696 <_malloc_r+0x82>
 801b648:	4629      	mov	r1, r5
 801b64a:	4638      	mov	r0, r7
 801b64c:	f7ff ffc2 	bl	801b5d4 <sbrk_aligned>
 801b650:	1c43      	adds	r3, r0, #1
 801b652:	4604      	mov	r4, r0
 801b654:	d14d      	bne.n	801b6f2 <_malloc_r+0xde>
 801b656:	6834      	ldr	r4, [r6, #0]
 801b658:	4626      	mov	r6, r4
 801b65a:	2e00      	cmp	r6, #0
 801b65c:	d140      	bne.n	801b6e0 <_malloc_r+0xcc>
 801b65e:	6823      	ldr	r3, [r4, #0]
 801b660:	4631      	mov	r1, r6
 801b662:	4638      	mov	r0, r7
 801b664:	eb04 0803 	add.w	r8, r4, r3
 801b668:	f000 fbf0 	bl	801be4c <_sbrk_r>
 801b66c:	4580      	cmp	r8, r0
 801b66e:	d13a      	bne.n	801b6e6 <_malloc_r+0xd2>
 801b670:	6821      	ldr	r1, [r4, #0]
 801b672:	3503      	adds	r5, #3
 801b674:	1a6d      	subs	r5, r5, r1
 801b676:	f025 0503 	bic.w	r5, r5, #3
 801b67a:	3508      	adds	r5, #8
 801b67c:	2d0c      	cmp	r5, #12
 801b67e:	bf38      	it	cc
 801b680:	250c      	movcc	r5, #12
 801b682:	4629      	mov	r1, r5
 801b684:	4638      	mov	r0, r7
 801b686:	f7ff ffa5 	bl	801b5d4 <sbrk_aligned>
 801b68a:	3001      	adds	r0, #1
 801b68c:	d02b      	beq.n	801b6e6 <_malloc_r+0xd2>
 801b68e:	6823      	ldr	r3, [r4, #0]
 801b690:	442b      	add	r3, r5
 801b692:	6023      	str	r3, [r4, #0]
 801b694:	e00e      	b.n	801b6b4 <_malloc_r+0xa0>
 801b696:	6822      	ldr	r2, [r4, #0]
 801b698:	1b52      	subs	r2, r2, r5
 801b69a:	d41e      	bmi.n	801b6da <_malloc_r+0xc6>
 801b69c:	2a0b      	cmp	r2, #11
 801b69e:	d916      	bls.n	801b6ce <_malloc_r+0xba>
 801b6a0:	1961      	adds	r1, r4, r5
 801b6a2:	42a3      	cmp	r3, r4
 801b6a4:	6025      	str	r5, [r4, #0]
 801b6a6:	bf18      	it	ne
 801b6a8:	6059      	strne	r1, [r3, #4]
 801b6aa:	6863      	ldr	r3, [r4, #4]
 801b6ac:	bf08      	it	eq
 801b6ae:	6031      	streq	r1, [r6, #0]
 801b6b0:	5162      	str	r2, [r4, r5]
 801b6b2:	604b      	str	r3, [r1, #4]
 801b6b4:	4638      	mov	r0, r7
 801b6b6:	f104 060b 	add.w	r6, r4, #11
 801b6ba:	f002 f865 	bl	801d788 <__malloc_unlock>
 801b6be:	f026 0607 	bic.w	r6, r6, #7
 801b6c2:	1d23      	adds	r3, r4, #4
 801b6c4:	1af2      	subs	r2, r6, r3
 801b6c6:	d0b6      	beq.n	801b636 <_malloc_r+0x22>
 801b6c8:	1b9b      	subs	r3, r3, r6
 801b6ca:	50a3      	str	r3, [r4, r2]
 801b6cc:	e7b3      	b.n	801b636 <_malloc_r+0x22>
 801b6ce:	6862      	ldr	r2, [r4, #4]
 801b6d0:	42a3      	cmp	r3, r4
 801b6d2:	bf0c      	ite	eq
 801b6d4:	6032      	streq	r2, [r6, #0]
 801b6d6:	605a      	strne	r2, [r3, #4]
 801b6d8:	e7ec      	b.n	801b6b4 <_malloc_r+0xa0>
 801b6da:	4623      	mov	r3, r4
 801b6dc:	6864      	ldr	r4, [r4, #4]
 801b6de:	e7b2      	b.n	801b646 <_malloc_r+0x32>
 801b6e0:	4634      	mov	r4, r6
 801b6e2:	6876      	ldr	r6, [r6, #4]
 801b6e4:	e7b9      	b.n	801b65a <_malloc_r+0x46>
 801b6e6:	230c      	movs	r3, #12
 801b6e8:	603b      	str	r3, [r7, #0]
 801b6ea:	4638      	mov	r0, r7
 801b6ec:	f002 f84c 	bl	801d788 <__malloc_unlock>
 801b6f0:	e7a1      	b.n	801b636 <_malloc_r+0x22>
 801b6f2:	6025      	str	r5, [r4, #0]
 801b6f4:	e7de      	b.n	801b6b4 <_malloc_r+0xa0>
 801b6f6:	bf00      	nop
 801b6f8:	20005508 	.word	0x20005508

0801b6fc <__sfputc_r>:
 801b6fc:	6893      	ldr	r3, [r2, #8]
 801b6fe:	3b01      	subs	r3, #1
 801b700:	2b00      	cmp	r3, #0
 801b702:	b410      	push	{r4}
 801b704:	6093      	str	r3, [r2, #8]
 801b706:	da08      	bge.n	801b71a <__sfputc_r+0x1e>
 801b708:	6994      	ldr	r4, [r2, #24]
 801b70a:	42a3      	cmp	r3, r4
 801b70c:	db01      	blt.n	801b712 <__sfputc_r+0x16>
 801b70e:	290a      	cmp	r1, #10
 801b710:	d103      	bne.n	801b71a <__sfputc_r+0x1e>
 801b712:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b716:	f001 bb53 	b.w	801cdc0 <__swbuf_r>
 801b71a:	6813      	ldr	r3, [r2, #0]
 801b71c:	1c58      	adds	r0, r3, #1
 801b71e:	6010      	str	r0, [r2, #0]
 801b720:	7019      	strb	r1, [r3, #0]
 801b722:	4608      	mov	r0, r1
 801b724:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b728:	4770      	bx	lr

0801b72a <__sfputs_r>:
 801b72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b72c:	4606      	mov	r6, r0
 801b72e:	460f      	mov	r7, r1
 801b730:	4614      	mov	r4, r2
 801b732:	18d5      	adds	r5, r2, r3
 801b734:	42ac      	cmp	r4, r5
 801b736:	d101      	bne.n	801b73c <__sfputs_r+0x12>
 801b738:	2000      	movs	r0, #0
 801b73a:	e007      	b.n	801b74c <__sfputs_r+0x22>
 801b73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b740:	463a      	mov	r2, r7
 801b742:	4630      	mov	r0, r6
 801b744:	f7ff ffda 	bl	801b6fc <__sfputc_r>
 801b748:	1c43      	adds	r3, r0, #1
 801b74a:	d1f3      	bne.n	801b734 <__sfputs_r+0xa>
 801b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b750 <_vfiprintf_r>:
 801b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b754:	460d      	mov	r5, r1
 801b756:	b09d      	sub	sp, #116	; 0x74
 801b758:	4614      	mov	r4, r2
 801b75a:	4698      	mov	r8, r3
 801b75c:	4606      	mov	r6, r0
 801b75e:	b118      	cbz	r0, 801b768 <_vfiprintf_r+0x18>
 801b760:	6983      	ldr	r3, [r0, #24]
 801b762:	b90b      	cbnz	r3, 801b768 <_vfiprintf_r+0x18>
 801b764:	f7ff fc46 	bl	801aff4 <__sinit>
 801b768:	4b89      	ldr	r3, [pc, #548]	; (801b990 <_vfiprintf_r+0x240>)
 801b76a:	429d      	cmp	r5, r3
 801b76c:	d11b      	bne.n	801b7a6 <_vfiprintf_r+0x56>
 801b76e:	6875      	ldr	r5, [r6, #4]
 801b770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b772:	07d9      	lsls	r1, r3, #31
 801b774:	d405      	bmi.n	801b782 <_vfiprintf_r+0x32>
 801b776:	89ab      	ldrh	r3, [r5, #12]
 801b778:	059a      	lsls	r2, r3, #22
 801b77a:	d402      	bmi.n	801b782 <_vfiprintf_r+0x32>
 801b77c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b77e:	f7ff fe2e 	bl	801b3de <__retarget_lock_acquire_recursive>
 801b782:	89ab      	ldrh	r3, [r5, #12]
 801b784:	071b      	lsls	r3, r3, #28
 801b786:	d501      	bpl.n	801b78c <_vfiprintf_r+0x3c>
 801b788:	692b      	ldr	r3, [r5, #16]
 801b78a:	b9eb      	cbnz	r3, 801b7c8 <_vfiprintf_r+0x78>
 801b78c:	4629      	mov	r1, r5
 801b78e:	4630      	mov	r0, r6
 801b790:	f001 fb88 	bl	801cea4 <__swsetup_r>
 801b794:	b1c0      	cbz	r0, 801b7c8 <_vfiprintf_r+0x78>
 801b796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b798:	07dc      	lsls	r4, r3, #31
 801b79a:	d50e      	bpl.n	801b7ba <_vfiprintf_r+0x6a>
 801b79c:	f04f 30ff 	mov.w	r0, #4294967295
 801b7a0:	b01d      	add	sp, #116	; 0x74
 801b7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7a6:	4b7b      	ldr	r3, [pc, #492]	; (801b994 <_vfiprintf_r+0x244>)
 801b7a8:	429d      	cmp	r5, r3
 801b7aa:	d101      	bne.n	801b7b0 <_vfiprintf_r+0x60>
 801b7ac:	68b5      	ldr	r5, [r6, #8]
 801b7ae:	e7df      	b.n	801b770 <_vfiprintf_r+0x20>
 801b7b0:	4b79      	ldr	r3, [pc, #484]	; (801b998 <_vfiprintf_r+0x248>)
 801b7b2:	429d      	cmp	r5, r3
 801b7b4:	bf08      	it	eq
 801b7b6:	68f5      	ldreq	r5, [r6, #12]
 801b7b8:	e7da      	b.n	801b770 <_vfiprintf_r+0x20>
 801b7ba:	89ab      	ldrh	r3, [r5, #12]
 801b7bc:	0598      	lsls	r0, r3, #22
 801b7be:	d4ed      	bmi.n	801b79c <_vfiprintf_r+0x4c>
 801b7c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b7c2:	f7ff fe0d 	bl	801b3e0 <__retarget_lock_release_recursive>
 801b7c6:	e7e9      	b.n	801b79c <_vfiprintf_r+0x4c>
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	9309      	str	r3, [sp, #36]	; 0x24
 801b7cc:	2320      	movs	r3, #32
 801b7ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b7d2:	f8cd 800c 	str.w	r8, [sp, #12]
 801b7d6:	2330      	movs	r3, #48	; 0x30
 801b7d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b99c <_vfiprintf_r+0x24c>
 801b7dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b7e0:	f04f 0901 	mov.w	r9, #1
 801b7e4:	4623      	mov	r3, r4
 801b7e6:	469a      	mov	sl, r3
 801b7e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b7ec:	b10a      	cbz	r2, 801b7f2 <_vfiprintf_r+0xa2>
 801b7ee:	2a25      	cmp	r2, #37	; 0x25
 801b7f0:	d1f9      	bne.n	801b7e6 <_vfiprintf_r+0x96>
 801b7f2:	ebba 0b04 	subs.w	fp, sl, r4
 801b7f6:	d00b      	beq.n	801b810 <_vfiprintf_r+0xc0>
 801b7f8:	465b      	mov	r3, fp
 801b7fa:	4622      	mov	r2, r4
 801b7fc:	4629      	mov	r1, r5
 801b7fe:	4630      	mov	r0, r6
 801b800:	f7ff ff93 	bl	801b72a <__sfputs_r>
 801b804:	3001      	adds	r0, #1
 801b806:	f000 80aa 	beq.w	801b95e <_vfiprintf_r+0x20e>
 801b80a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b80c:	445a      	add	r2, fp
 801b80e:	9209      	str	r2, [sp, #36]	; 0x24
 801b810:	f89a 3000 	ldrb.w	r3, [sl]
 801b814:	2b00      	cmp	r3, #0
 801b816:	f000 80a2 	beq.w	801b95e <_vfiprintf_r+0x20e>
 801b81a:	2300      	movs	r3, #0
 801b81c:	f04f 32ff 	mov.w	r2, #4294967295
 801b820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b824:	f10a 0a01 	add.w	sl, sl, #1
 801b828:	9304      	str	r3, [sp, #16]
 801b82a:	9307      	str	r3, [sp, #28]
 801b82c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b830:	931a      	str	r3, [sp, #104]	; 0x68
 801b832:	4654      	mov	r4, sl
 801b834:	2205      	movs	r2, #5
 801b836:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b83a:	4858      	ldr	r0, [pc, #352]	; (801b99c <_vfiprintf_r+0x24c>)
 801b83c:	f7e4 fcc8 	bl	80001d0 <memchr>
 801b840:	9a04      	ldr	r2, [sp, #16]
 801b842:	b9d8      	cbnz	r0, 801b87c <_vfiprintf_r+0x12c>
 801b844:	06d1      	lsls	r1, r2, #27
 801b846:	bf44      	itt	mi
 801b848:	2320      	movmi	r3, #32
 801b84a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b84e:	0713      	lsls	r3, r2, #28
 801b850:	bf44      	itt	mi
 801b852:	232b      	movmi	r3, #43	; 0x2b
 801b854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b858:	f89a 3000 	ldrb.w	r3, [sl]
 801b85c:	2b2a      	cmp	r3, #42	; 0x2a
 801b85e:	d015      	beq.n	801b88c <_vfiprintf_r+0x13c>
 801b860:	9a07      	ldr	r2, [sp, #28]
 801b862:	4654      	mov	r4, sl
 801b864:	2000      	movs	r0, #0
 801b866:	f04f 0c0a 	mov.w	ip, #10
 801b86a:	4621      	mov	r1, r4
 801b86c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b870:	3b30      	subs	r3, #48	; 0x30
 801b872:	2b09      	cmp	r3, #9
 801b874:	d94e      	bls.n	801b914 <_vfiprintf_r+0x1c4>
 801b876:	b1b0      	cbz	r0, 801b8a6 <_vfiprintf_r+0x156>
 801b878:	9207      	str	r2, [sp, #28]
 801b87a:	e014      	b.n	801b8a6 <_vfiprintf_r+0x156>
 801b87c:	eba0 0308 	sub.w	r3, r0, r8
 801b880:	fa09 f303 	lsl.w	r3, r9, r3
 801b884:	4313      	orrs	r3, r2
 801b886:	9304      	str	r3, [sp, #16]
 801b888:	46a2      	mov	sl, r4
 801b88a:	e7d2      	b.n	801b832 <_vfiprintf_r+0xe2>
 801b88c:	9b03      	ldr	r3, [sp, #12]
 801b88e:	1d19      	adds	r1, r3, #4
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	9103      	str	r1, [sp, #12]
 801b894:	2b00      	cmp	r3, #0
 801b896:	bfbb      	ittet	lt
 801b898:	425b      	neglt	r3, r3
 801b89a:	f042 0202 	orrlt.w	r2, r2, #2
 801b89e:	9307      	strge	r3, [sp, #28]
 801b8a0:	9307      	strlt	r3, [sp, #28]
 801b8a2:	bfb8      	it	lt
 801b8a4:	9204      	strlt	r2, [sp, #16]
 801b8a6:	7823      	ldrb	r3, [r4, #0]
 801b8a8:	2b2e      	cmp	r3, #46	; 0x2e
 801b8aa:	d10c      	bne.n	801b8c6 <_vfiprintf_r+0x176>
 801b8ac:	7863      	ldrb	r3, [r4, #1]
 801b8ae:	2b2a      	cmp	r3, #42	; 0x2a
 801b8b0:	d135      	bne.n	801b91e <_vfiprintf_r+0x1ce>
 801b8b2:	9b03      	ldr	r3, [sp, #12]
 801b8b4:	1d1a      	adds	r2, r3, #4
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	9203      	str	r2, [sp, #12]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	bfb8      	it	lt
 801b8be:	f04f 33ff 	movlt.w	r3, #4294967295
 801b8c2:	3402      	adds	r4, #2
 801b8c4:	9305      	str	r3, [sp, #20]
 801b8c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b9ac <_vfiprintf_r+0x25c>
 801b8ca:	7821      	ldrb	r1, [r4, #0]
 801b8cc:	2203      	movs	r2, #3
 801b8ce:	4650      	mov	r0, sl
 801b8d0:	f7e4 fc7e 	bl	80001d0 <memchr>
 801b8d4:	b140      	cbz	r0, 801b8e8 <_vfiprintf_r+0x198>
 801b8d6:	2340      	movs	r3, #64	; 0x40
 801b8d8:	eba0 000a 	sub.w	r0, r0, sl
 801b8dc:	fa03 f000 	lsl.w	r0, r3, r0
 801b8e0:	9b04      	ldr	r3, [sp, #16]
 801b8e2:	4303      	orrs	r3, r0
 801b8e4:	3401      	adds	r4, #1
 801b8e6:	9304      	str	r3, [sp, #16]
 801b8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8ec:	482c      	ldr	r0, [pc, #176]	; (801b9a0 <_vfiprintf_r+0x250>)
 801b8ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b8f2:	2206      	movs	r2, #6
 801b8f4:	f7e4 fc6c 	bl	80001d0 <memchr>
 801b8f8:	2800      	cmp	r0, #0
 801b8fa:	d03f      	beq.n	801b97c <_vfiprintf_r+0x22c>
 801b8fc:	4b29      	ldr	r3, [pc, #164]	; (801b9a4 <_vfiprintf_r+0x254>)
 801b8fe:	bb1b      	cbnz	r3, 801b948 <_vfiprintf_r+0x1f8>
 801b900:	9b03      	ldr	r3, [sp, #12]
 801b902:	3307      	adds	r3, #7
 801b904:	f023 0307 	bic.w	r3, r3, #7
 801b908:	3308      	adds	r3, #8
 801b90a:	9303      	str	r3, [sp, #12]
 801b90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b90e:	443b      	add	r3, r7
 801b910:	9309      	str	r3, [sp, #36]	; 0x24
 801b912:	e767      	b.n	801b7e4 <_vfiprintf_r+0x94>
 801b914:	fb0c 3202 	mla	r2, ip, r2, r3
 801b918:	460c      	mov	r4, r1
 801b91a:	2001      	movs	r0, #1
 801b91c:	e7a5      	b.n	801b86a <_vfiprintf_r+0x11a>
 801b91e:	2300      	movs	r3, #0
 801b920:	3401      	adds	r4, #1
 801b922:	9305      	str	r3, [sp, #20]
 801b924:	4619      	mov	r1, r3
 801b926:	f04f 0c0a 	mov.w	ip, #10
 801b92a:	4620      	mov	r0, r4
 801b92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b930:	3a30      	subs	r2, #48	; 0x30
 801b932:	2a09      	cmp	r2, #9
 801b934:	d903      	bls.n	801b93e <_vfiprintf_r+0x1ee>
 801b936:	2b00      	cmp	r3, #0
 801b938:	d0c5      	beq.n	801b8c6 <_vfiprintf_r+0x176>
 801b93a:	9105      	str	r1, [sp, #20]
 801b93c:	e7c3      	b.n	801b8c6 <_vfiprintf_r+0x176>
 801b93e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b942:	4604      	mov	r4, r0
 801b944:	2301      	movs	r3, #1
 801b946:	e7f0      	b.n	801b92a <_vfiprintf_r+0x1da>
 801b948:	ab03      	add	r3, sp, #12
 801b94a:	9300      	str	r3, [sp, #0]
 801b94c:	462a      	mov	r2, r5
 801b94e:	4b16      	ldr	r3, [pc, #88]	; (801b9a8 <_vfiprintf_r+0x258>)
 801b950:	a904      	add	r1, sp, #16
 801b952:	4630      	mov	r0, r6
 801b954:	f3af 8000 	nop.w
 801b958:	4607      	mov	r7, r0
 801b95a:	1c78      	adds	r0, r7, #1
 801b95c:	d1d6      	bne.n	801b90c <_vfiprintf_r+0x1bc>
 801b95e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b960:	07d9      	lsls	r1, r3, #31
 801b962:	d405      	bmi.n	801b970 <_vfiprintf_r+0x220>
 801b964:	89ab      	ldrh	r3, [r5, #12]
 801b966:	059a      	lsls	r2, r3, #22
 801b968:	d402      	bmi.n	801b970 <_vfiprintf_r+0x220>
 801b96a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b96c:	f7ff fd38 	bl	801b3e0 <__retarget_lock_release_recursive>
 801b970:	89ab      	ldrh	r3, [r5, #12]
 801b972:	065b      	lsls	r3, r3, #25
 801b974:	f53f af12 	bmi.w	801b79c <_vfiprintf_r+0x4c>
 801b978:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b97a:	e711      	b.n	801b7a0 <_vfiprintf_r+0x50>
 801b97c:	ab03      	add	r3, sp, #12
 801b97e:	9300      	str	r3, [sp, #0]
 801b980:	462a      	mov	r2, r5
 801b982:	4b09      	ldr	r3, [pc, #36]	; (801b9a8 <_vfiprintf_r+0x258>)
 801b984:	a904      	add	r1, sp, #16
 801b986:	4630      	mov	r0, r6
 801b988:	f000 f880 	bl	801ba8c <_printf_i>
 801b98c:	e7e4      	b.n	801b958 <_vfiprintf_r+0x208>
 801b98e:	bf00      	nop
 801b990:	0801f854 	.word	0x0801f854
 801b994:	0801f874 	.word	0x0801f874
 801b998:	0801f834 	.word	0x0801f834
 801b99c:	0801f8a2 	.word	0x0801f8a2
 801b9a0:	0801f8ac 	.word	0x0801f8ac
 801b9a4:	00000000 	.word	0x00000000
 801b9a8:	0801b72b 	.word	0x0801b72b
 801b9ac:	0801f8a8 	.word	0x0801f8a8

0801b9b0 <_printf_common>:
 801b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9b4:	4616      	mov	r6, r2
 801b9b6:	4699      	mov	r9, r3
 801b9b8:	688a      	ldr	r2, [r1, #8]
 801b9ba:	690b      	ldr	r3, [r1, #16]
 801b9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b9c0:	4293      	cmp	r3, r2
 801b9c2:	bfb8      	it	lt
 801b9c4:	4613      	movlt	r3, r2
 801b9c6:	6033      	str	r3, [r6, #0]
 801b9c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b9cc:	4607      	mov	r7, r0
 801b9ce:	460c      	mov	r4, r1
 801b9d0:	b10a      	cbz	r2, 801b9d6 <_printf_common+0x26>
 801b9d2:	3301      	adds	r3, #1
 801b9d4:	6033      	str	r3, [r6, #0]
 801b9d6:	6823      	ldr	r3, [r4, #0]
 801b9d8:	0699      	lsls	r1, r3, #26
 801b9da:	bf42      	ittt	mi
 801b9dc:	6833      	ldrmi	r3, [r6, #0]
 801b9de:	3302      	addmi	r3, #2
 801b9e0:	6033      	strmi	r3, [r6, #0]
 801b9e2:	6825      	ldr	r5, [r4, #0]
 801b9e4:	f015 0506 	ands.w	r5, r5, #6
 801b9e8:	d106      	bne.n	801b9f8 <_printf_common+0x48>
 801b9ea:	f104 0a19 	add.w	sl, r4, #25
 801b9ee:	68e3      	ldr	r3, [r4, #12]
 801b9f0:	6832      	ldr	r2, [r6, #0]
 801b9f2:	1a9b      	subs	r3, r3, r2
 801b9f4:	42ab      	cmp	r3, r5
 801b9f6:	dc26      	bgt.n	801ba46 <_printf_common+0x96>
 801b9f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b9fc:	1e13      	subs	r3, r2, #0
 801b9fe:	6822      	ldr	r2, [r4, #0]
 801ba00:	bf18      	it	ne
 801ba02:	2301      	movne	r3, #1
 801ba04:	0692      	lsls	r2, r2, #26
 801ba06:	d42b      	bmi.n	801ba60 <_printf_common+0xb0>
 801ba08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ba0c:	4649      	mov	r1, r9
 801ba0e:	4638      	mov	r0, r7
 801ba10:	47c0      	blx	r8
 801ba12:	3001      	adds	r0, #1
 801ba14:	d01e      	beq.n	801ba54 <_printf_common+0xa4>
 801ba16:	6823      	ldr	r3, [r4, #0]
 801ba18:	68e5      	ldr	r5, [r4, #12]
 801ba1a:	6832      	ldr	r2, [r6, #0]
 801ba1c:	f003 0306 	and.w	r3, r3, #6
 801ba20:	2b04      	cmp	r3, #4
 801ba22:	bf08      	it	eq
 801ba24:	1aad      	subeq	r5, r5, r2
 801ba26:	68a3      	ldr	r3, [r4, #8]
 801ba28:	6922      	ldr	r2, [r4, #16]
 801ba2a:	bf0c      	ite	eq
 801ba2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba30:	2500      	movne	r5, #0
 801ba32:	4293      	cmp	r3, r2
 801ba34:	bfc4      	itt	gt
 801ba36:	1a9b      	subgt	r3, r3, r2
 801ba38:	18ed      	addgt	r5, r5, r3
 801ba3a:	2600      	movs	r6, #0
 801ba3c:	341a      	adds	r4, #26
 801ba3e:	42b5      	cmp	r5, r6
 801ba40:	d11a      	bne.n	801ba78 <_printf_common+0xc8>
 801ba42:	2000      	movs	r0, #0
 801ba44:	e008      	b.n	801ba58 <_printf_common+0xa8>
 801ba46:	2301      	movs	r3, #1
 801ba48:	4652      	mov	r2, sl
 801ba4a:	4649      	mov	r1, r9
 801ba4c:	4638      	mov	r0, r7
 801ba4e:	47c0      	blx	r8
 801ba50:	3001      	adds	r0, #1
 801ba52:	d103      	bne.n	801ba5c <_printf_common+0xac>
 801ba54:	f04f 30ff 	mov.w	r0, #4294967295
 801ba58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba5c:	3501      	adds	r5, #1
 801ba5e:	e7c6      	b.n	801b9ee <_printf_common+0x3e>
 801ba60:	18e1      	adds	r1, r4, r3
 801ba62:	1c5a      	adds	r2, r3, #1
 801ba64:	2030      	movs	r0, #48	; 0x30
 801ba66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ba6a:	4422      	add	r2, r4
 801ba6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ba70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ba74:	3302      	adds	r3, #2
 801ba76:	e7c7      	b.n	801ba08 <_printf_common+0x58>
 801ba78:	2301      	movs	r3, #1
 801ba7a:	4622      	mov	r2, r4
 801ba7c:	4649      	mov	r1, r9
 801ba7e:	4638      	mov	r0, r7
 801ba80:	47c0      	blx	r8
 801ba82:	3001      	adds	r0, #1
 801ba84:	d0e6      	beq.n	801ba54 <_printf_common+0xa4>
 801ba86:	3601      	adds	r6, #1
 801ba88:	e7d9      	b.n	801ba3e <_printf_common+0x8e>
	...

0801ba8c <_printf_i>:
 801ba8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba90:	7e0f      	ldrb	r7, [r1, #24]
 801ba92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ba94:	2f78      	cmp	r7, #120	; 0x78
 801ba96:	4691      	mov	r9, r2
 801ba98:	4680      	mov	r8, r0
 801ba9a:	460c      	mov	r4, r1
 801ba9c:	469a      	mov	sl, r3
 801ba9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801baa2:	d807      	bhi.n	801bab4 <_printf_i+0x28>
 801baa4:	2f62      	cmp	r7, #98	; 0x62
 801baa6:	d80a      	bhi.n	801babe <_printf_i+0x32>
 801baa8:	2f00      	cmp	r7, #0
 801baaa:	f000 80d8 	beq.w	801bc5e <_printf_i+0x1d2>
 801baae:	2f58      	cmp	r7, #88	; 0x58
 801bab0:	f000 80a3 	beq.w	801bbfa <_printf_i+0x16e>
 801bab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801babc:	e03a      	b.n	801bb34 <_printf_i+0xa8>
 801babe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bac2:	2b15      	cmp	r3, #21
 801bac4:	d8f6      	bhi.n	801bab4 <_printf_i+0x28>
 801bac6:	a101      	add	r1, pc, #4	; (adr r1, 801bacc <_printf_i+0x40>)
 801bac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bacc:	0801bb25 	.word	0x0801bb25
 801bad0:	0801bb39 	.word	0x0801bb39
 801bad4:	0801bab5 	.word	0x0801bab5
 801bad8:	0801bab5 	.word	0x0801bab5
 801badc:	0801bab5 	.word	0x0801bab5
 801bae0:	0801bab5 	.word	0x0801bab5
 801bae4:	0801bb39 	.word	0x0801bb39
 801bae8:	0801bab5 	.word	0x0801bab5
 801baec:	0801bab5 	.word	0x0801bab5
 801baf0:	0801bab5 	.word	0x0801bab5
 801baf4:	0801bab5 	.word	0x0801bab5
 801baf8:	0801bc45 	.word	0x0801bc45
 801bafc:	0801bb69 	.word	0x0801bb69
 801bb00:	0801bc27 	.word	0x0801bc27
 801bb04:	0801bab5 	.word	0x0801bab5
 801bb08:	0801bab5 	.word	0x0801bab5
 801bb0c:	0801bc67 	.word	0x0801bc67
 801bb10:	0801bab5 	.word	0x0801bab5
 801bb14:	0801bb69 	.word	0x0801bb69
 801bb18:	0801bab5 	.word	0x0801bab5
 801bb1c:	0801bab5 	.word	0x0801bab5
 801bb20:	0801bc2f 	.word	0x0801bc2f
 801bb24:	682b      	ldr	r3, [r5, #0]
 801bb26:	1d1a      	adds	r2, r3, #4
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	602a      	str	r2, [r5, #0]
 801bb2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bb30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bb34:	2301      	movs	r3, #1
 801bb36:	e0a3      	b.n	801bc80 <_printf_i+0x1f4>
 801bb38:	6820      	ldr	r0, [r4, #0]
 801bb3a:	6829      	ldr	r1, [r5, #0]
 801bb3c:	0606      	lsls	r6, r0, #24
 801bb3e:	f101 0304 	add.w	r3, r1, #4
 801bb42:	d50a      	bpl.n	801bb5a <_printf_i+0xce>
 801bb44:	680e      	ldr	r6, [r1, #0]
 801bb46:	602b      	str	r3, [r5, #0]
 801bb48:	2e00      	cmp	r6, #0
 801bb4a:	da03      	bge.n	801bb54 <_printf_i+0xc8>
 801bb4c:	232d      	movs	r3, #45	; 0x2d
 801bb4e:	4276      	negs	r6, r6
 801bb50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb54:	485e      	ldr	r0, [pc, #376]	; (801bcd0 <_printf_i+0x244>)
 801bb56:	230a      	movs	r3, #10
 801bb58:	e019      	b.n	801bb8e <_printf_i+0x102>
 801bb5a:	680e      	ldr	r6, [r1, #0]
 801bb5c:	602b      	str	r3, [r5, #0]
 801bb5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bb62:	bf18      	it	ne
 801bb64:	b236      	sxthne	r6, r6
 801bb66:	e7ef      	b.n	801bb48 <_printf_i+0xbc>
 801bb68:	682b      	ldr	r3, [r5, #0]
 801bb6a:	6820      	ldr	r0, [r4, #0]
 801bb6c:	1d19      	adds	r1, r3, #4
 801bb6e:	6029      	str	r1, [r5, #0]
 801bb70:	0601      	lsls	r1, r0, #24
 801bb72:	d501      	bpl.n	801bb78 <_printf_i+0xec>
 801bb74:	681e      	ldr	r6, [r3, #0]
 801bb76:	e002      	b.n	801bb7e <_printf_i+0xf2>
 801bb78:	0646      	lsls	r6, r0, #25
 801bb7a:	d5fb      	bpl.n	801bb74 <_printf_i+0xe8>
 801bb7c:	881e      	ldrh	r6, [r3, #0]
 801bb7e:	4854      	ldr	r0, [pc, #336]	; (801bcd0 <_printf_i+0x244>)
 801bb80:	2f6f      	cmp	r7, #111	; 0x6f
 801bb82:	bf0c      	ite	eq
 801bb84:	2308      	moveq	r3, #8
 801bb86:	230a      	movne	r3, #10
 801bb88:	2100      	movs	r1, #0
 801bb8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb8e:	6865      	ldr	r5, [r4, #4]
 801bb90:	60a5      	str	r5, [r4, #8]
 801bb92:	2d00      	cmp	r5, #0
 801bb94:	bfa2      	ittt	ge
 801bb96:	6821      	ldrge	r1, [r4, #0]
 801bb98:	f021 0104 	bicge.w	r1, r1, #4
 801bb9c:	6021      	strge	r1, [r4, #0]
 801bb9e:	b90e      	cbnz	r6, 801bba4 <_printf_i+0x118>
 801bba0:	2d00      	cmp	r5, #0
 801bba2:	d04d      	beq.n	801bc40 <_printf_i+0x1b4>
 801bba4:	4615      	mov	r5, r2
 801bba6:	fbb6 f1f3 	udiv	r1, r6, r3
 801bbaa:	fb03 6711 	mls	r7, r3, r1, r6
 801bbae:	5dc7      	ldrb	r7, [r0, r7]
 801bbb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bbb4:	4637      	mov	r7, r6
 801bbb6:	42bb      	cmp	r3, r7
 801bbb8:	460e      	mov	r6, r1
 801bbba:	d9f4      	bls.n	801bba6 <_printf_i+0x11a>
 801bbbc:	2b08      	cmp	r3, #8
 801bbbe:	d10b      	bne.n	801bbd8 <_printf_i+0x14c>
 801bbc0:	6823      	ldr	r3, [r4, #0]
 801bbc2:	07de      	lsls	r6, r3, #31
 801bbc4:	d508      	bpl.n	801bbd8 <_printf_i+0x14c>
 801bbc6:	6923      	ldr	r3, [r4, #16]
 801bbc8:	6861      	ldr	r1, [r4, #4]
 801bbca:	4299      	cmp	r1, r3
 801bbcc:	bfde      	ittt	le
 801bbce:	2330      	movle	r3, #48	; 0x30
 801bbd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bbd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bbd8:	1b52      	subs	r2, r2, r5
 801bbda:	6122      	str	r2, [r4, #16]
 801bbdc:	f8cd a000 	str.w	sl, [sp]
 801bbe0:	464b      	mov	r3, r9
 801bbe2:	aa03      	add	r2, sp, #12
 801bbe4:	4621      	mov	r1, r4
 801bbe6:	4640      	mov	r0, r8
 801bbe8:	f7ff fee2 	bl	801b9b0 <_printf_common>
 801bbec:	3001      	adds	r0, #1
 801bbee:	d14c      	bne.n	801bc8a <_printf_i+0x1fe>
 801bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 801bbf4:	b004      	add	sp, #16
 801bbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbfa:	4835      	ldr	r0, [pc, #212]	; (801bcd0 <_printf_i+0x244>)
 801bbfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bc00:	6829      	ldr	r1, [r5, #0]
 801bc02:	6823      	ldr	r3, [r4, #0]
 801bc04:	f851 6b04 	ldr.w	r6, [r1], #4
 801bc08:	6029      	str	r1, [r5, #0]
 801bc0a:	061d      	lsls	r5, r3, #24
 801bc0c:	d514      	bpl.n	801bc38 <_printf_i+0x1ac>
 801bc0e:	07df      	lsls	r7, r3, #31
 801bc10:	bf44      	itt	mi
 801bc12:	f043 0320 	orrmi.w	r3, r3, #32
 801bc16:	6023      	strmi	r3, [r4, #0]
 801bc18:	b91e      	cbnz	r6, 801bc22 <_printf_i+0x196>
 801bc1a:	6823      	ldr	r3, [r4, #0]
 801bc1c:	f023 0320 	bic.w	r3, r3, #32
 801bc20:	6023      	str	r3, [r4, #0]
 801bc22:	2310      	movs	r3, #16
 801bc24:	e7b0      	b.n	801bb88 <_printf_i+0xfc>
 801bc26:	6823      	ldr	r3, [r4, #0]
 801bc28:	f043 0320 	orr.w	r3, r3, #32
 801bc2c:	6023      	str	r3, [r4, #0]
 801bc2e:	2378      	movs	r3, #120	; 0x78
 801bc30:	4828      	ldr	r0, [pc, #160]	; (801bcd4 <_printf_i+0x248>)
 801bc32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bc36:	e7e3      	b.n	801bc00 <_printf_i+0x174>
 801bc38:	0659      	lsls	r1, r3, #25
 801bc3a:	bf48      	it	mi
 801bc3c:	b2b6      	uxthmi	r6, r6
 801bc3e:	e7e6      	b.n	801bc0e <_printf_i+0x182>
 801bc40:	4615      	mov	r5, r2
 801bc42:	e7bb      	b.n	801bbbc <_printf_i+0x130>
 801bc44:	682b      	ldr	r3, [r5, #0]
 801bc46:	6826      	ldr	r6, [r4, #0]
 801bc48:	6961      	ldr	r1, [r4, #20]
 801bc4a:	1d18      	adds	r0, r3, #4
 801bc4c:	6028      	str	r0, [r5, #0]
 801bc4e:	0635      	lsls	r5, r6, #24
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	d501      	bpl.n	801bc58 <_printf_i+0x1cc>
 801bc54:	6019      	str	r1, [r3, #0]
 801bc56:	e002      	b.n	801bc5e <_printf_i+0x1d2>
 801bc58:	0670      	lsls	r0, r6, #25
 801bc5a:	d5fb      	bpl.n	801bc54 <_printf_i+0x1c8>
 801bc5c:	8019      	strh	r1, [r3, #0]
 801bc5e:	2300      	movs	r3, #0
 801bc60:	6123      	str	r3, [r4, #16]
 801bc62:	4615      	mov	r5, r2
 801bc64:	e7ba      	b.n	801bbdc <_printf_i+0x150>
 801bc66:	682b      	ldr	r3, [r5, #0]
 801bc68:	1d1a      	adds	r2, r3, #4
 801bc6a:	602a      	str	r2, [r5, #0]
 801bc6c:	681d      	ldr	r5, [r3, #0]
 801bc6e:	6862      	ldr	r2, [r4, #4]
 801bc70:	2100      	movs	r1, #0
 801bc72:	4628      	mov	r0, r5
 801bc74:	f7e4 faac 	bl	80001d0 <memchr>
 801bc78:	b108      	cbz	r0, 801bc7e <_printf_i+0x1f2>
 801bc7a:	1b40      	subs	r0, r0, r5
 801bc7c:	6060      	str	r0, [r4, #4]
 801bc7e:	6863      	ldr	r3, [r4, #4]
 801bc80:	6123      	str	r3, [r4, #16]
 801bc82:	2300      	movs	r3, #0
 801bc84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc88:	e7a8      	b.n	801bbdc <_printf_i+0x150>
 801bc8a:	6923      	ldr	r3, [r4, #16]
 801bc8c:	462a      	mov	r2, r5
 801bc8e:	4649      	mov	r1, r9
 801bc90:	4640      	mov	r0, r8
 801bc92:	47d0      	blx	sl
 801bc94:	3001      	adds	r0, #1
 801bc96:	d0ab      	beq.n	801bbf0 <_printf_i+0x164>
 801bc98:	6823      	ldr	r3, [r4, #0]
 801bc9a:	079b      	lsls	r3, r3, #30
 801bc9c:	d413      	bmi.n	801bcc6 <_printf_i+0x23a>
 801bc9e:	68e0      	ldr	r0, [r4, #12]
 801bca0:	9b03      	ldr	r3, [sp, #12]
 801bca2:	4298      	cmp	r0, r3
 801bca4:	bfb8      	it	lt
 801bca6:	4618      	movlt	r0, r3
 801bca8:	e7a4      	b.n	801bbf4 <_printf_i+0x168>
 801bcaa:	2301      	movs	r3, #1
 801bcac:	4632      	mov	r2, r6
 801bcae:	4649      	mov	r1, r9
 801bcb0:	4640      	mov	r0, r8
 801bcb2:	47d0      	blx	sl
 801bcb4:	3001      	adds	r0, #1
 801bcb6:	d09b      	beq.n	801bbf0 <_printf_i+0x164>
 801bcb8:	3501      	adds	r5, #1
 801bcba:	68e3      	ldr	r3, [r4, #12]
 801bcbc:	9903      	ldr	r1, [sp, #12]
 801bcbe:	1a5b      	subs	r3, r3, r1
 801bcc0:	42ab      	cmp	r3, r5
 801bcc2:	dcf2      	bgt.n	801bcaa <_printf_i+0x21e>
 801bcc4:	e7eb      	b.n	801bc9e <_printf_i+0x212>
 801bcc6:	2500      	movs	r5, #0
 801bcc8:	f104 0619 	add.w	r6, r4, #25
 801bccc:	e7f5      	b.n	801bcba <_printf_i+0x22e>
 801bcce:	bf00      	nop
 801bcd0:	0801f8b3 	.word	0x0801f8b3
 801bcd4:	0801f8c4 	.word	0x0801f8c4

0801bcd8 <_putc_r>:
 801bcd8:	b570      	push	{r4, r5, r6, lr}
 801bcda:	460d      	mov	r5, r1
 801bcdc:	4614      	mov	r4, r2
 801bcde:	4606      	mov	r6, r0
 801bce0:	b118      	cbz	r0, 801bcea <_putc_r+0x12>
 801bce2:	6983      	ldr	r3, [r0, #24]
 801bce4:	b90b      	cbnz	r3, 801bcea <_putc_r+0x12>
 801bce6:	f7ff f985 	bl	801aff4 <__sinit>
 801bcea:	4b1c      	ldr	r3, [pc, #112]	; (801bd5c <_putc_r+0x84>)
 801bcec:	429c      	cmp	r4, r3
 801bcee:	d124      	bne.n	801bd3a <_putc_r+0x62>
 801bcf0:	6874      	ldr	r4, [r6, #4]
 801bcf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bcf4:	07d8      	lsls	r0, r3, #31
 801bcf6:	d405      	bmi.n	801bd04 <_putc_r+0x2c>
 801bcf8:	89a3      	ldrh	r3, [r4, #12]
 801bcfa:	0599      	lsls	r1, r3, #22
 801bcfc:	d402      	bmi.n	801bd04 <_putc_r+0x2c>
 801bcfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd00:	f7ff fb6d 	bl	801b3de <__retarget_lock_acquire_recursive>
 801bd04:	68a3      	ldr	r3, [r4, #8]
 801bd06:	3b01      	subs	r3, #1
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	60a3      	str	r3, [r4, #8]
 801bd0c:	da05      	bge.n	801bd1a <_putc_r+0x42>
 801bd0e:	69a2      	ldr	r2, [r4, #24]
 801bd10:	4293      	cmp	r3, r2
 801bd12:	db1c      	blt.n	801bd4e <_putc_r+0x76>
 801bd14:	b2eb      	uxtb	r3, r5
 801bd16:	2b0a      	cmp	r3, #10
 801bd18:	d019      	beq.n	801bd4e <_putc_r+0x76>
 801bd1a:	6823      	ldr	r3, [r4, #0]
 801bd1c:	1c5a      	adds	r2, r3, #1
 801bd1e:	6022      	str	r2, [r4, #0]
 801bd20:	701d      	strb	r5, [r3, #0]
 801bd22:	b2ed      	uxtb	r5, r5
 801bd24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd26:	07da      	lsls	r2, r3, #31
 801bd28:	d405      	bmi.n	801bd36 <_putc_r+0x5e>
 801bd2a:	89a3      	ldrh	r3, [r4, #12]
 801bd2c:	059b      	lsls	r3, r3, #22
 801bd2e:	d402      	bmi.n	801bd36 <_putc_r+0x5e>
 801bd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd32:	f7ff fb55 	bl	801b3e0 <__retarget_lock_release_recursive>
 801bd36:	4628      	mov	r0, r5
 801bd38:	bd70      	pop	{r4, r5, r6, pc}
 801bd3a:	4b09      	ldr	r3, [pc, #36]	; (801bd60 <_putc_r+0x88>)
 801bd3c:	429c      	cmp	r4, r3
 801bd3e:	d101      	bne.n	801bd44 <_putc_r+0x6c>
 801bd40:	68b4      	ldr	r4, [r6, #8]
 801bd42:	e7d6      	b.n	801bcf2 <_putc_r+0x1a>
 801bd44:	4b07      	ldr	r3, [pc, #28]	; (801bd64 <_putc_r+0x8c>)
 801bd46:	429c      	cmp	r4, r3
 801bd48:	bf08      	it	eq
 801bd4a:	68f4      	ldreq	r4, [r6, #12]
 801bd4c:	e7d1      	b.n	801bcf2 <_putc_r+0x1a>
 801bd4e:	4629      	mov	r1, r5
 801bd50:	4622      	mov	r2, r4
 801bd52:	4630      	mov	r0, r6
 801bd54:	f001 f834 	bl	801cdc0 <__swbuf_r>
 801bd58:	4605      	mov	r5, r0
 801bd5a:	e7e3      	b.n	801bd24 <_putc_r+0x4c>
 801bd5c:	0801f854 	.word	0x0801f854
 801bd60:	0801f874 	.word	0x0801f874
 801bd64:	0801f834 	.word	0x0801f834

0801bd68 <realloc>:
 801bd68:	4b02      	ldr	r3, [pc, #8]	; (801bd74 <realloc+0xc>)
 801bd6a:	460a      	mov	r2, r1
 801bd6c:	4601      	mov	r1, r0
 801bd6e:	6818      	ldr	r0, [r3, #0]
 801bd70:	f002 b9e7 	b.w	801e142 <_realloc_r>
 801bd74:	20000010 	.word	0x20000010

0801bd78 <cleanup_glue>:
 801bd78:	b538      	push	{r3, r4, r5, lr}
 801bd7a:	460c      	mov	r4, r1
 801bd7c:	6809      	ldr	r1, [r1, #0]
 801bd7e:	4605      	mov	r5, r0
 801bd80:	b109      	cbz	r1, 801bd86 <cleanup_glue+0xe>
 801bd82:	f7ff fff9 	bl	801bd78 <cleanup_glue>
 801bd86:	4621      	mov	r1, r4
 801bd88:	4628      	mov	r0, r5
 801bd8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd8e:	f7ff bbd5 	b.w	801b53c <_free_r>
	...

0801bd94 <_reclaim_reent>:
 801bd94:	4b2c      	ldr	r3, [pc, #176]	; (801be48 <_reclaim_reent+0xb4>)
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	4283      	cmp	r3, r0
 801bd9a:	b570      	push	{r4, r5, r6, lr}
 801bd9c:	4604      	mov	r4, r0
 801bd9e:	d051      	beq.n	801be44 <_reclaim_reent+0xb0>
 801bda0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801bda2:	b143      	cbz	r3, 801bdb6 <_reclaim_reent+0x22>
 801bda4:	68db      	ldr	r3, [r3, #12]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d14a      	bne.n	801be40 <_reclaim_reent+0xac>
 801bdaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bdac:	6819      	ldr	r1, [r3, #0]
 801bdae:	b111      	cbz	r1, 801bdb6 <_reclaim_reent+0x22>
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	f7ff fbc3 	bl	801b53c <_free_r>
 801bdb6:	6961      	ldr	r1, [r4, #20]
 801bdb8:	b111      	cbz	r1, 801bdc0 <_reclaim_reent+0x2c>
 801bdba:	4620      	mov	r0, r4
 801bdbc:	f7ff fbbe 	bl	801b53c <_free_r>
 801bdc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bdc2:	b111      	cbz	r1, 801bdca <_reclaim_reent+0x36>
 801bdc4:	4620      	mov	r0, r4
 801bdc6:	f7ff fbb9 	bl	801b53c <_free_r>
 801bdca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bdcc:	b111      	cbz	r1, 801bdd4 <_reclaim_reent+0x40>
 801bdce:	4620      	mov	r0, r4
 801bdd0:	f7ff fbb4 	bl	801b53c <_free_r>
 801bdd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bdd6:	b111      	cbz	r1, 801bdde <_reclaim_reent+0x4a>
 801bdd8:	4620      	mov	r0, r4
 801bdda:	f7ff fbaf 	bl	801b53c <_free_r>
 801bdde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bde0:	b111      	cbz	r1, 801bde8 <_reclaim_reent+0x54>
 801bde2:	4620      	mov	r0, r4
 801bde4:	f7ff fbaa 	bl	801b53c <_free_r>
 801bde8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801bdea:	b111      	cbz	r1, 801bdf2 <_reclaim_reent+0x5e>
 801bdec:	4620      	mov	r0, r4
 801bdee:	f7ff fba5 	bl	801b53c <_free_r>
 801bdf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801bdf4:	b111      	cbz	r1, 801bdfc <_reclaim_reent+0x68>
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	f7ff fba0 	bl	801b53c <_free_r>
 801bdfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bdfe:	b111      	cbz	r1, 801be06 <_reclaim_reent+0x72>
 801be00:	4620      	mov	r0, r4
 801be02:	f7ff fb9b 	bl	801b53c <_free_r>
 801be06:	69a3      	ldr	r3, [r4, #24]
 801be08:	b1e3      	cbz	r3, 801be44 <_reclaim_reent+0xb0>
 801be0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801be0c:	4620      	mov	r0, r4
 801be0e:	4798      	blx	r3
 801be10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801be12:	b1b9      	cbz	r1, 801be44 <_reclaim_reent+0xb0>
 801be14:	4620      	mov	r0, r4
 801be16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be1a:	f7ff bfad 	b.w	801bd78 <cleanup_glue>
 801be1e:	5949      	ldr	r1, [r1, r5]
 801be20:	b941      	cbnz	r1, 801be34 <_reclaim_reent+0xa0>
 801be22:	3504      	adds	r5, #4
 801be24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801be26:	2d80      	cmp	r5, #128	; 0x80
 801be28:	68d9      	ldr	r1, [r3, #12]
 801be2a:	d1f8      	bne.n	801be1e <_reclaim_reent+0x8a>
 801be2c:	4620      	mov	r0, r4
 801be2e:	f7ff fb85 	bl	801b53c <_free_r>
 801be32:	e7ba      	b.n	801bdaa <_reclaim_reent+0x16>
 801be34:	680e      	ldr	r6, [r1, #0]
 801be36:	4620      	mov	r0, r4
 801be38:	f7ff fb80 	bl	801b53c <_free_r>
 801be3c:	4631      	mov	r1, r6
 801be3e:	e7ef      	b.n	801be20 <_reclaim_reent+0x8c>
 801be40:	2500      	movs	r5, #0
 801be42:	e7ef      	b.n	801be24 <_reclaim_reent+0x90>
 801be44:	bd70      	pop	{r4, r5, r6, pc}
 801be46:	bf00      	nop
 801be48:	20000010 	.word	0x20000010

0801be4c <_sbrk_r>:
 801be4c:	b538      	push	{r3, r4, r5, lr}
 801be4e:	4d06      	ldr	r5, [pc, #24]	; (801be68 <_sbrk_r+0x1c>)
 801be50:	2300      	movs	r3, #0
 801be52:	4604      	mov	r4, r0
 801be54:	4608      	mov	r0, r1
 801be56:	602b      	str	r3, [r5, #0]
 801be58:	f7e6 fd18 	bl	800288c <_sbrk>
 801be5c:	1c43      	adds	r3, r0, #1
 801be5e:	d102      	bne.n	801be66 <_sbrk_r+0x1a>
 801be60:	682b      	ldr	r3, [r5, #0]
 801be62:	b103      	cbz	r3, 801be66 <_sbrk_r+0x1a>
 801be64:	6023      	str	r3, [r4, #0]
 801be66:	bd38      	pop	{r3, r4, r5, pc}
 801be68:	20005510 	.word	0x20005510

0801be6c <_raise_r>:
 801be6c:	291f      	cmp	r1, #31
 801be6e:	b538      	push	{r3, r4, r5, lr}
 801be70:	4604      	mov	r4, r0
 801be72:	460d      	mov	r5, r1
 801be74:	d904      	bls.n	801be80 <_raise_r+0x14>
 801be76:	2316      	movs	r3, #22
 801be78:	6003      	str	r3, [r0, #0]
 801be7a:	f04f 30ff 	mov.w	r0, #4294967295
 801be7e:	bd38      	pop	{r3, r4, r5, pc}
 801be80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801be82:	b112      	cbz	r2, 801be8a <_raise_r+0x1e>
 801be84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801be88:	b94b      	cbnz	r3, 801be9e <_raise_r+0x32>
 801be8a:	4620      	mov	r0, r4
 801be8c:	f000 f830 	bl	801bef0 <_getpid_r>
 801be90:	462a      	mov	r2, r5
 801be92:	4601      	mov	r1, r0
 801be94:	4620      	mov	r0, r4
 801be96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801be9a:	f000 b817 	b.w	801becc <_kill_r>
 801be9e:	2b01      	cmp	r3, #1
 801bea0:	d00a      	beq.n	801beb8 <_raise_r+0x4c>
 801bea2:	1c59      	adds	r1, r3, #1
 801bea4:	d103      	bne.n	801beae <_raise_r+0x42>
 801bea6:	2316      	movs	r3, #22
 801bea8:	6003      	str	r3, [r0, #0]
 801beaa:	2001      	movs	r0, #1
 801beac:	e7e7      	b.n	801be7e <_raise_r+0x12>
 801beae:	2400      	movs	r4, #0
 801beb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801beb4:	4628      	mov	r0, r5
 801beb6:	4798      	blx	r3
 801beb8:	2000      	movs	r0, #0
 801beba:	e7e0      	b.n	801be7e <_raise_r+0x12>

0801bebc <raise>:
 801bebc:	4b02      	ldr	r3, [pc, #8]	; (801bec8 <raise+0xc>)
 801bebe:	4601      	mov	r1, r0
 801bec0:	6818      	ldr	r0, [r3, #0]
 801bec2:	f7ff bfd3 	b.w	801be6c <_raise_r>
 801bec6:	bf00      	nop
 801bec8:	20000010 	.word	0x20000010

0801becc <_kill_r>:
 801becc:	b538      	push	{r3, r4, r5, lr}
 801bece:	4d07      	ldr	r5, [pc, #28]	; (801beec <_kill_r+0x20>)
 801bed0:	2300      	movs	r3, #0
 801bed2:	4604      	mov	r4, r0
 801bed4:	4608      	mov	r0, r1
 801bed6:	4611      	mov	r1, r2
 801bed8:	602b      	str	r3, [r5, #0]
 801beda:	f7e6 fc4f 	bl	800277c <_kill>
 801bede:	1c43      	adds	r3, r0, #1
 801bee0:	d102      	bne.n	801bee8 <_kill_r+0x1c>
 801bee2:	682b      	ldr	r3, [r5, #0]
 801bee4:	b103      	cbz	r3, 801bee8 <_kill_r+0x1c>
 801bee6:	6023      	str	r3, [r4, #0]
 801bee8:	bd38      	pop	{r3, r4, r5, pc}
 801beea:	bf00      	nop
 801beec:	20005510 	.word	0x20005510

0801bef0 <_getpid_r>:
 801bef0:	f7e6 bc3c 	b.w	800276c <_getpid>

0801bef4 <sniprintf>:
 801bef4:	b40c      	push	{r2, r3}
 801bef6:	b530      	push	{r4, r5, lr}
 801bef8:	4b17      	ldr	r3, [pc, #92]	; (801bf58 <sniprintf+0x64>)
 801befa:	1e0c      	subs	r4, r1, #0
 801befc:	681d      	ldr	r5, [r3, #0]
 801befe:	b09d      	sub	sp, #116	; 0x74
 801bf00:	da08      	bge.n	801bf14 <sniprintf+0x20>
 801bf02:	238b      	movs	r3, #139	; 0x8b
 801bf04:	602b      	str	r3, [r5, #0]
 801bf06:	f04f 30ff 	mov.w	r0, #4294967295
 801bf0a:	b01d      	add	sp, #116	; 0x74
 801bf0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bf10:	b002      	add	sp, #8
 801bf12:	4770      	bx	lr
 801bf14:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bf18:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bf1c:	bf14      	ite	ne
 801bf1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bf22:	4623      	moveq	r3, r4
 801bf24:	9304      	str	r3, [sp, #16]
 801bf26:	9307      	str	r3, [sp, #28]
 801bf28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bf2c:	9002      	str	r0, [sp, #8]
 801bf2e:	9006      	str	r0, [sp, #24]
 801bf30:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bf36:	ab21      	add	r3, sp, #132	; 0x84
 801bf38:	a902      	add	r1, sp, #8
 801bf3a:	4628      	mov	r0, r5
 801bf3c:	9301      	str	r3, [sp, #4]
 801bf3e:	f002 f98b 	bl	801e258 <_svfiprintf_r>
 801bf42:	1c43      	adds	r3, r0, #1
 801bf44:	bfbc      	itt	lt
 801bf46:	238b      	movlt	r3, #139	; 0x8b
 801bf48:	602b      	strlt	r3, [r5, #0]
 801bf4a:	2c00      	cmp	r4, #0
 801bf4c:	d0dd      	beq.n	801bf0a <sniprintf+0x16>
 801bf4e:	9b02      	ldr	r3, [sp, #8]
 801bf50:	2200      	movs	r2, #0
 801bf52:	701a      	strb	r2, [r3, #0]
 801bf54:	e7d9      	b.n	801bf0a <sniprintf+0x16>
 801bf56:	bf00      	nop
 801bf58:	20000010 	.word	0x20000010

0801bf5c <__sread>:
 801bf5c:	b510      	push	{r4, lr}
 801bf5e:	460c      	mov	r4, r1
 801bf60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf64:	f002 fa78 	bl	801e458 <_read_r>
 801bf68:	2800      	cmp	r0, #0
 801bf6a:	bfab      	itete	ge
 801bf6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bf6e:	89a3      	ldrhlt	r3, [r4, #12]
 801bf70:	181b      	addge	r3, r3, r0
 801bf72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bf76:	bfac      	ite	ge
 801bf78:	6563      	strge	r3, [r4, #84]	; 0x54
 801bf7a:	81a3      	strhlt	r3, [r4, #12]
 801bf7c:	bd10      	pop	{r4, pc}

0801bf7e <__swrite>:
 801bf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf82:	461f      	mov	r7, r3
 801bf84:	898b      	ldrh	r3, [r1, #12]
 801bf86:	05db      	lsls	r3, r3, #23
 801bf88:	4605      	mov	r5, r0
 801bf8a:	460c      	mov	r4, r1
 801bf8c:	4616      	mov	r6, r2
 801bf8e:	d505      	bpl.n	801bf9c <__swrite+0x1e>
 801bf90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf94:	2302      	movs	r3, #2
 801bf96:	2200      	movs	r2, #0
 801bf98:	f001 fbc4 	bl	801d724 <_lseek_r>
 801bf9c:	89a3      	ldrh	r3, [r4, #12]
 801bf9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bfa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bfa6:	81a3      	strh	r3, [r4, #12]
 801bfa8:	4632      	mov	r2, r6
 801bfaa:	463b      	mov	r3, r7
 801bfac:	4628      	mov	r0, r5
 801bfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bfb2:	f000 bf65 	b.w	801ce80 <_write_r>

0801bfb6 <__sseek>:
 801bfb6:	b510      	push	{r4, lr}
 801bfb8:	460c      	mov	r4, r1
 801bfba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfbe:	f001 fbb1 	bl	801d724 <_lseek_r>
 801bfc2:	1c43      	adds	r3, r0, #1
 801bfc4:	89a3      	ldrh	r3, [r4, #12]
 801bfc6:	bf15      	itete	ne
 801bfc8:	6560      	strne	r0, [r4, #84]	; 0x54
 801bfca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bfce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bfd2:	81a3      	strheq	r3, [r4, #12]
 801bfd4:	bf18      	it	ne
 801bfd6:	81a3      	strhne	r3, [r4, #12]
 801bfd8:	bd10      	pop	{r4, pc}

0801bfda <__sclose>:
 801bfda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfde:	f000 bfed 	b.w	801cfbc <_close_r>

0801bfe2 <strchr>:
 801bfe2:	b2c9      	uxtb	r1, r1
 801bfe4:	4603      	mov	r3, r0
 801bfe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfea:	b11a      	cbz	r2, 801bff4 <strchr+0x12>
 801bfec:	428a      	cmp	r2, r1
 801bfee:	d1f9      	bne.n	801bfe4 <strchr+0x2>
 801bff0:	4618      	mov	r0, r3
 801bff2:	4770      	bx	lr
 801bff4:	2900      	cmp	r1, #0
 801bff6:	bf18      	it	ne
 801bff8:	2300      	movne	r3, #0
 801bffa:	e7f9      	b.n	801bff0 <strchr+0xe>

0801bffc <strcoll>:
 801bffc:	f7e4 b946 	b.w	800028c <strcmp>

0801c000 <strcpy>:
 801c000:	4603      	mov	r3, r0
 801c002:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c006:	f803 2b01 	strb.w	r2, [r3], #1
 801c00a:	2a00      	cmp	r2, #0
 801c00c:	d1f9      	bne.n	801c002 <strcpy+0x2>
 801c00e:	4770      	bx	lr

0801c010 <strncmp>:
 801c010:	b510      	push	{r4, lr}
 801c012:	b17a      	cbz	r2, 801c034 <strncmp+0x24>
 801c014:	4603      	mov	r3, r0
 801c016:	3901      	subs	r1, #1
 801c018:	1884      	adds	r4, r0, r2
 801c01a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c01e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c022:	4290      	cmp	r0, r2
 801c024:	d101      	bne.n	801c02a <strncmp+0x1a>
 801c026:	42a3      	cmp	r3, r4
 801c028:	d101      	bne.n	801c02e <strncmp+0x1e>
 801c02a:	1a80      	subs	r0, r0, r2
 801c02c:	bd10      	pop	{r4, pc}
 801c02e:	2800      	cmp	r0, #0
 801c030:	d1f3      	bne.n	801c01a <strncmp+0xa>
 801c032:	e7fa      	b.n	801c02a <strncmp+0x1a>
 801c034:	4610      	mov	r0, r2
 801c036:	e7f9      	b.n	801c02c <strncmp+0x1c>

0801c038 <strpbrk>:
 801c038:	b570      	push	{r4, r5, r6, lr}
 801c03a:	7803      	ldrb	r3, [r0, #0]
 801c03c:	b1a3      	cbz	r3, 801c068 <strpbrk+0x30>
 801c03e:	4603      	mov	r3, r0
 801c040:	460c      	mov	r4, r1
 801c042:	4618      	mov	r0, r3
 801c044:	f813 5b01 	ldrb.w	r5, [r3], #1
 801c048:	b14d      	cbz	r5, 801c05e <strpbrk+0x26>
 801c04a:	460a      	mov	r2, r1
 801c04c:	e001      	b.n	801c052 <strpbrk+0x1a>
 801c04e:	42ae      	cmp	r6, r5
 801c050:	d009      	beq.n	801c066 <strpbrk+0x2e>
 801c052:	4614      	mov	r4, r2
 801c054:	f812 6b01 	ldrb.w	r6, [r2], #1
 801c058:	2e00      	cmp	r6, #0
 801c05a:	d1f8      	bne.n	801c04e <strpbrk+0x16>
 801c05c:	e7f1      	b.n	801c042 <strpbrk+0xa>
 801c05e:	7823      	ldrb	r3, [r4, #0]
 801c060:	2b00      	cmp	r3, #0
 801c062:	bf08      	it	eq
 801c064:	2000      	moveq	r0, #0
 801c066:	bd70      	pop	{r4, r5, r6, pc}
 801c068:	4618      	mov	r0, r3
 801c06a:	e7fc      	b.n	801c066 <strpbrk+0x2e>

0801c06c <strspn>:
 801c06c:	b570      	push	{r4, r5, r6, lr}
 801c06e:	4603      	mov	r3, r0
 801c070:	461e      	mov	r6, r3
 801c072:	f813 4b01 	ldrb.w	r4, [r3], #1
 801c076:	b13c      	cbz	r4, 801c088 <strspn+0x1c>
 801c078:	1e4a      	subs	r2, r1, #1
 801c07a:	e001      	b.n	801c080 <strspn+0x14>
 801c07c:	42a5      	cmp	r5, r4
 801c07e:	d0f7      	beq.n	801c070 <strspn+0x4>
 801c080:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801c084:	2d00      	cmp	r5, #0
 801c086:	d1f9      	bne.n	801c07c <strspn+0x10>
 801c088:	1a30      	subs	r0, r6, r0
 801c08a:	bd70      	pop	{r4, r5, r6, pc}

0801c08c <sulp>:
 801c08c:	b570      	push	{r4, r5, r6, lr}
 801c08e:	4604      	mov	r4, r0
 801c090:	460d      	mov	r5, r1
 801c092:	ec45 4b10 	vmov	d0, r4, r5
 801c096:	4616      	mov	r6, r2
 801c098:	f001 feee 	bl	801de78 <__ulp>
 801c09c:	ec51 0b10 	vmov	r0, r1, d0
 801c0a0:	b17e      	cbz	r6, 801c0c2 <sulp+0x36>
 801c0a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c0a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	dd09      	ble.n	801c0c2 <sulp+0x36>
 801c0ae:	051b      	lsls	r3, r3, #20
 801c0b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c0b4:	2400      	movs	r4, #0
 801c0b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c0ba:	4622      	mov	r2, r4
 801c0bc:	462b      	mov	r3, r5
 801c0be:	f7e4 fab3 	bl	8000628 <__aeabi_dmul>
 801c0c2:	bd70      	pop	{r4, r5, r6, pc}
 801c0c4:	0000      	movs	r0, r0
	...

0801c0c8 <_strtod_l>:
 801c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0cc:	ed2d 8b02 	vpush	{d8}
 801c0d0:	b09d      	sub	sp, #116	; 0x74
 801c0d2:	461f      	mov	r7, r3
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	9318      	str	r3, [sp, #96]	; 0x60
 801c0d8:	4ba2      	ldr	r3, [pc, #648]	; (801c364 <_strtod_l+0x29c>)
 801c0da:	9213      	str	r2, [sp, #76]	; 0x4c
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	9305      	str	r3, [sp, #20]
 801c0e0:	4604      	mov	r4, r0
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	4688      	mov	r8, r1
 801c0e6:	f7e4 f8db 	bl	80002a0 <strlen>
 801c0ea:	f04f 0a00 	mov.w	sl, #0
 801c0ee:	4605      	mov	r5, r0
 801c0f0:	f04f 0b00 	mov.w	fp, #0
 801c0f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c0fa:	781a      	ldrb	r2, [r3, #0]
 801c0fc:	2a2b      	cmp	r2, #43	; 0x2b
 801c0fe:	d04e      	beq.n	801c19e <_strtod_l+0xd6>
 801c100:	d83b      	bhi.n	801c17a <_strtod_l+0xb2>
 801c102:	2a0d      	cmp	r2, #13
 801c104:	d834      	bhi.n	801c170 <_strtod_l+0xa8>
 801c106:	2a08      	cmp	r2, #8
 801c108:	d834      	bhi.n	801c174 <_strtod_l+0xac>
 801c10a:	2a00      	cmp	r2, #0
 801c10c:	d03e      	beq.n	801c18c <_strtod_l+0xc4>
 801c10e:	2300      	movs	r3, #0
 801c110:	930a      	str	r3, [sp, #40]	; 0x28
 801c112:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c114:	7833      	ldrb	r3, [r6, #0]
 801c116:	2b30      	cmp	r3, #48	; 0x30
 801c118:	f040 80b0 	bne.w	801c27c <_strtod_l+0x1b4>
 801c11c:	7873      	ldrb	r3, [r6, #1]
 801c11e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c122:	2b58      	cmp	r3, #88	; 0x58
 801c124:	d168      	bne.n	801c1f8 <_strtod_l+0x130>
 801c126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c128:	9301      	str	r3, [sp, #4]
 801c12a:	ab18      	add	r3, sp, #96	; 0x60
 801c12c:	9702      	str	r7, [sp, #8]
 801c12e:	9300      	str	r3, [sp, #0]
 801c130:	4a8d      	ldr	r2, [pc, #564]	; (801c368 <_strtod_l+0x2a0>)
 801c132:	ab19      	add	r3, sp, #100	; 0x64
 801c134:	a917      	add	r1, sp, #92	; 0x5c
 801c136:	4620      	mov	r0, r4
 801c138:	f000 ffca 	bl	801d0d0 <__gethex>
 801c13c:	f010 0707 	ands.w	r7, r0, #7
 801c140:	4605      	mov	r5, r0
 801c142:	d005      	beq.n	801c150 <_strtod_l+0x88>
 801c144:	2f06      	cmp	r7, #6
 801c146:	d12c      	bne.n	801c1a2 <_strtod_l+0xda>
 801c148:	3601      	adds	r6, #1
 801c14a:	2300      	movs	r3, #0
 801c14c:	9617      	str	r6, [sp, #92]	; 0x5c
 801c14e:	930a      	str	r3, [sp, #40]	; 0x28
 801c150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c152:	2b00      	cmp	r3, #0
 801c154:	f040 8590 	bne.w	801cc78 <_strtod_l+0xbb0>
 801c158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c15a:	b1eb      	cbz	r3, 801c198 <_strtod_l+0xd0>
 801c15c:	4652      	mov	r2, sl
 801c15e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c162:	ec43 2b10 	vmov	d0, r2, r3
 801c166:	b01d      	add	sp, #116	; 0x74
 801c168:	ecbd 8b02 	vpop	{d8}
 801c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c170:	2a20      	cmp	r2, #32
 801c172:	d1cc      	bne.n	801c10e <_strtod_l+0x46>
 801c174:	3301      	adds	r3, #1
 801c176:	9317      	str	r3, [sp, #92]	; 0x5c
 801c178:	e7be      	b.n	801c0f8 <_strtod_l+0x30>
 801c17a:	2a2d      	cmp	r2, #45	; 0x2d
 801c17c:	d1c7      	bne.n	801c10e <_strtod_l+0x46>
 801c17e:	2201      	movs	r2, #1
 801c180:	920a      	str	r2, [sp, #40]	; 0x28
 801c182:	1c5a      	adds	r2, r3, #1
 801c184:	9217      	str	r2, [sp, #92]	; 0x5c
 801c186:	785b      	ldrb	r3, [r3, #1]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d1c2      	bne.n	801c112 <_strtod_l+0x4a>
 801c18c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c18e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c192:	2b00      	cmp	r3, #0
 801c194:	f040 856e 	bne.w	801cc74 <_strtod_l+0xbac>
 801c198:	4652      	mov	r2, sl
 801c19a:	465b      	mov	r3, fp
 801c19c:	e7e1      	b.n	801c162 <_strtod_l+0x9a>
 801c19e:	2200      	movs	r2, #0
 801c1a0:	e7ee      	b.n	801c180 <_strtod_l+0xb8>
 801c1a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c1a4:	b13a      	cbz	r2, 801c1b6 <_strtod_l+0xee>
 801c1a6:	2135      	movs	r1, #53	; 0x35
 801c1a8:	a81a      	add	r0, sp, #104	; 0x68
 801c1aa:	f001 ff70 	bl	801e08e <__copybits>
 801c1ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	f001 fb2f 	bl	801d814 <_Bfree>
 801c1b6:	3f01      	subs	r7, #1
 801c1b8:	2f04      	cmp	r7, #4
 801c1ba:	d806      	bhi.n	801c1ca <_strtod_l+0x102>
 801c1bc:	e8df f007 	tbb	[pc, r7]
 801c1c0:	1714030a 	.word	0x1714030a
 801c1c4:	0a          	.byte	0x0a
 801c1c5:	00          	.byte	0x00
 801c1c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801c1ca:	0728      	lsls	r0, r5, #28
 801c1cc:	d5c0      	bpl.n	801c150 <_strtod_l+0x88>
 801c1ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c1d2:	e7bd      	b.n	801c150 <_strtod_l+0x88>
 801c1d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801c1d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c1da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c1de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c1e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c1e6:	e7f0      	b.n	801c1ca <_strtod_l+0x102>
 801c1e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801c36c <_strtod_l+0x2a4>
 801c1ec:	e7ed      	b.n	801c1ca <_strtod_l+0x102>
 801c1ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c1f2:	f04f 3aff 	mov.w	sl, #4294967295
 801c1f6:	e7e8      	b.n	801c1ca <_strtod_l+0x102>
 801c1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c1fa:	1c5a      	adds	r2, r3, #1
 801c1fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c1fe:	785b      	ldrb	r3, [r3, #1]
 801c200:	2b30      	cmp	r3, #48	; 0x30
 801c202:	d0f9      	beq.n	801c1f8 <_strtod_l+0x130>
 801c204:	2b00      	cmp	r3, #0
 801c206:	d0a3      	beq.n	801c150 <_strtod_l+0x88>
 801c208:	2301      	movs	r3, #1
 801c20a:	f04f 0900 	mov.w	r9, #0
 801c20e:	9304      	str	r3, [sp, #16]
 801c210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c212:	9308      	str	r3, [sp, #32]
 801c214:	f8cd 901c 	str.w	r9, [sp, #28]
 801c218:	464f      	mov	r7, r9
 801c21a:	220a      	movs	r2, #10
 801c21c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c21e:	7806      	ldrb	r6, [r0, #0]
 801c220:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c224:	b2d9      	uxtb	r1, r3
 801c226:	2909      	cmp	r1, #9
 801c228:	d92a      	bls.n	801c280 <_strtod_l+0x1b8>
 801c22a:	9905      	ldr	r1, [sp, #20]
 801c22c:	462a      	mov	r2, r5
 801c22e:	f7ff feef 	bl	801c010 <strncmp>
 801c232:	b398      	cbz	r0, 801c29c <_strtod_l+0x1d4>
 801c234:	2000      	movs	r0, #0
 801c236:	4632      	mov	r2, r6
 801c238:	463d      	mov	r5, r7
 801c23a:	9005      	str	r0, [sp, #20]
 801c23c:	4603      	mov	r3, r0
 801c23e:	2a65      	cmp	r2, #101	; 0x65
 801c240:	d001      	beq.n	801c246 <_strtod_l+0x17e>
 801c242:	2a45      	cmp	r2, #69	; 0x45
 801c244:	d118      	bne.n	801c278 <_strtod_l+0x1b0>
 801c246:	b91d      	cbnz	r5, 801c250 <_strtod_l+0x188>
 801c248:	9a04      	ldr	r2, [sp, #16]
 801c24a:	4302      	orrs	r2, r0
 801c24c:	d09e      	beq.n	801c18c <_strtod_l+0xc4>
 801c24e:	2500      	movs	r5, #0
 801c250:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c254:	f108 0201 	add.w	r2, r8, #1
 801c258:	9217      	str	r2, [sp, #92]	; 0x5c
 801c25a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c25e:	2a2b      	cmp	r2, #43	; 0x2b
 801c260:	d075      	beq.n	801c34e <_strtod_l+0x286>
 801c262:	2a2d      	cmp	r2, #45	; 0x2d
 801c264:	d07b      	beq.n	801c35e <_strtod_l+0x296>
 801c266:	f04f 0c00 	mov.w	ip, #0
 801c26a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c26e:	2909      	cmp	r1, #9
 801c270:	f240 8082 	bls.w	801c378 <_strtod_l+0x2b0>
 801c274:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c278:	2600      	movs	r6, #0
 801c27a:	e09d      	b.n	801c3b8 <_strtod_l+0x2f0>
 801c27c:	2300      	movs	r3, #0
 801c27e:	e7c4      	b.n	801c20a <_strtod_l+0x142>
 801c280:	2f08      	cmp	r7, #8
 801c282:	bfd8      	it	le
 801c284:	9907      	ldrle	r1, [sp, #28]
 801c286:	f100 0001 	add.w	r0, r0, #1
 801c28a:	bfda      	itte	le
 801c28c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c290:	9307      	strle	r3, [sp, #28]
 801c292:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c296:	3701      	adds	r7, #1
 801c298:	9017      	str	r0, [sp, #92]	; 0x5c
 801c29a:	e7bf      	b.n	801c21c <_strtod_l+0x154>
 801c29c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c29e:	195a      	adds	r2, r3, r5
 801c2a0:	9217      	str	r2, [sp, #92]	; 0x5c
 801c2a2:	5d5a      	ldrb	r2, [r3, r5]
 801c2a4:	2f00      	cmp	r7, #0
 801c2a6:	d037      	beq.n	801c318 <_strtod_l+0x250>
 801c2a8:	9005      	str	r0, [sp, #20]
 801c2aa:	463d      	mov	r5, r7
 801c2ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c2b0:	2b09      	cmp	r3, #9
 801c2b2:	d912      	bls.n	801c2da <_strtod_l+0x212>
 801c2b4:	2301      	movs	r3, #1
 801c2b6:	e7c2      	b.n	801c23e <_strtod_l+0x176>
 801c2b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2ba:	1c5a      	adds	r2, r3, #1
 801c2bc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c2be:	785a      	ldrb	r2, [r3, #1]
 801c2c0:	3001      	adds	r0, #1
 801c2c2:	2a30      	cmp	r2, #48	; 0x30
 801c2c4:	d0f8      	beq.n	801c2b8 <_strtod_l+0x1f0>
 801c2c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c2ca:	2b08      	cmp	r3, #8
 801c2cc:	f200 84d9 	bhi.w	801cc82 <_strtod_l+0xbba>
 801c2d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2d2:	9005      	str	r0, [sp, #20]
 801c2d4:	2000      	movs	r0, #0
 801c2d6:	9308      	str	r3, [sp, #32]
 801c2d8:	4605      	mov	r5, r0
 801c2da:	3a30      	subs	r2, #48	; 0x30
 801c2dc:	f100 0301 	add.w	r3, r0, #1
 801c2e0:	d014      	beq.n	801c30c <_strtod_l+0x244>
 801c2e2:	9905      	ldr	r1, [sp, #20]
 801c2e4:	4419      	add	r1, r3
 801c2e6:	9105      	str	r1, [sp, #20]
 801c2e8:	462b      	mov	r3, r5
 801c2ea:	eb00 0e05 	add.w	lr, r0, r5
 801c2ee:	210a      	movs	r1, #10
 801c2f0:	4573      	cmp	r3, lr
 801c2f2:	d113      	bne.n	801c31c <_strtod_l+0x254>
 801c2f4:	182b      	adds	r3, r5, r0
 801c2f6:	2b08      	cmp	r3, #8
 801c2f8:	f105 0501 	add.w	r5, r5, #1
 801c2fc:	4405      	add	r5, r0
 801c2fe:	dc1c      	bgt.n	801c33a <_strtod_l+0x272>
 801c300:	9907      	ldr	r1, [sp, #28]
 801c302:	230a      	movs	r3, #10
 801c304:	fb03 2301 	mla	r3, r3, r1, r2
 801c308:	9307      	str	r3, [sp, #28]
 801c30a:	2300      	movs	r3, #0
 801c30c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c30e:	1c51      	adds	r1, r2, #1
 801c310:	9117      	str	r1, [sp, #92]	; 0x5c
 801c312:	7852      	ldrb	r2, [r2, #1]
 801c314:	4618      	mov	r0, r3
 801c316:	e7c9      	b.n	801c2ac <_strtod_l+0x1e4>
 801c318:	4638      	mov	r0, r7
 801c31a:	e7d2      	b.n	801c2c2 <_strtod_l+0x1fa>
 801c31c:	2b08      	cmp	r3, #8
 801c31e:	dc04      	bgt.n	801c32a <_strtod_l+0x262>
 801c320:	9e07      	ldr	r6, [sp, #28]
 801c322:	434e      	muls	r6, r1
 801c324:	9607      	str	r6, [sp, #28]
 801c326:	3301      	adds	r3, #1
 801c328:	e7e2      	b.n	801c2f0 <_strtod_l+0x228>
 801c32a:	f103 0c01 	add.w	ip, r3, #1
 801c32e:	f1bc 0f10 	cmp.w	ip, #16
 801c332:	bfd8      	it	le
 801c334:	fb01 f909 	mulle.w	r9, r1, r9
 801c338:	e7f5      	b.n	801c326 <_strtod_l+0x25e>
 801c33a:	2d10      	cmp	r5, #16
 801c33c:	bfdc      	itt	le
 801c33e:	230a      	movle	r3, #10
 801c340:	fb03 2909 	mlale	r9, r3, r9, r2
 801c344:	e7e1      	b.n	801c30a <_strtod_l+0x242>
 801c346:	2300      	movs	r3, #0
 801c348:	9305      	str	r3, [sp, #20]
 801c34a:	2301      	movs	r3, #1
 801c34c:	e77c      	b.n	801c248 <_strtod_l+0x180>
 801c34e:	f04f 0c00 	mov.w	ip, #0
 801c352:	f108 0202 	add.w	r2, r8, #2
 801c356:	9217      	str	r2, [sp, #92]	; 0x5c
 801c358:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c35c:	e785      	b.n	801c26a <_strtod_l+0x1a2>
 801c35e:	f04f 0c01 	mov.w	ip, #1
 801c362:	e7f6      	b.n	801c352 <_strtod_l+0x28a>
 801c364:	0801f9e8 	.word	0x0801f9e8
 801c368:	0801f8e4 	.word	0x0801f8e4
 801c36c:	7ff00000 	.word	0x7ff00000
 801c370:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c372:	1c51      	adds	r1, r2, #1
 801c374:	9117      	str	r1, [sp, #92]	; 0x5c
 801c376:	7852      	ldrb	r2, [r2, #1]
 801c378:	2a30      	cmp	r2, #48	; 0x30
 801c37a:	d0f9      	beq.n	801c370 <_strtod_l+0x2a8>
 801c37c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c380:	2908      	cmp	r1, #8
 801c382:	f63f af79 	bhi.w	801c278 <_strtod_l+0x1b0>
 801c386:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c38a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c38c:	9206      	str	r2, [sp, #24]
 801c38e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c390:	1c51      	adds	r1, r2, #1
 801c392:	9117      	str	r1, [sp, #92]	; 0x5c
 801c394:	7852      	ldrb	r2, [r2, #1]
 801c396:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c39a:	2e09      	cmp	r6, #9
 801c39c:	d937      	bls.n	801c40e <_strtod_l+0x346>
 801c39e:	9e06      	ldr	r6, [sp, #24]
 801c3a0:	1b89      	subs	r1, r1, r6
 801c3a2:	2908      	cmp	r1, #8
 801c3a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c3a8:	dc02      	bgt.n	801c3b0 <_strtod_l+0x2e8>
 801c3aa:	4576      	cmp	r6, lr
 801c3ac:	bfa8      	it	ge
 801c3ae:	4676      	movge	r6, lr
 801c3b0:	f1bc 0f00 	cmp.w	ip, #0
 801c3b4:	d000      	beq.n	801c3b8 <_strtod_l+0x2f0>
 801c3b6:	4276      	negs	r6, r6
 801c3b8:	2d00      	cmp	r5, #0
 801c3ba:	d14d      	bne.n	801c458 <_strtod_l+0x390>
 801c3bc:	9904      	ldr	r1, [sp, #16]
 801c3be:	4301      	orrs	r1, r0
 801c3c0:	f47f aec6 	bne.w	801c150 <_strtod_l+0x88>
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	f47f aee1 	bne.w	801c18c <_strtod_l+0xc4>
 801c3ca:	2a69      	cmp	r2, #105	; 0x69
 801c3cc:	d027      	beq.n	801c41e <_strtod_l+0x356>
 801c3ce:	dc24      	bgt.n	801c41a <_strtod_l+0x352>
 801c3d0:	2a49      	cmp	r2, #73	; 0x49
 801c3d2:	d024      	beq.n	801c41e <_strtod_l+0x356>
 801c3d4:	2a4e      	cmp	r2, #78	; 0x4e
 801c3d6:	f47f aed9 	bne.w	801c18c <_strtod_l+0xc4>
 801c3da:	499f      	ldr	r1, [pc, #636]	; (801c658 <_strtod_l+0x590>)
 801c3dc:	a817      	add	r0, sp, #92	; 0x5c
 801c3de:	f001 f8cf 	bl	801d580 <__match>
 801c3e2:	2800      	cmp	r0, #0
 801c3e4:	f43f aed2 	beq.w	801c18c <_strtod_l+0xc4>
 801c3e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c3ea:	781b      	ldrb	r3, [r3, #0]
 801c3ec:	2b28      	cmp	r3, #40	; 0x28
 801c3ee:	d12d      	bne.n	801c44c <_strtod_l+0x384>
 801c3f0:	499a      	ldr	r1, [pc, #616]	; (801c65c <_strtod_l+0x594>)
 801c3f2:	aa1a      	add	r2, sp, #104	; 0x68
 801c3f4:	a817      	add	r0, sp, #92	; 0x5c
 801c3f6:	f001 f8d7 	bl	801d5a8 <__hexnan>
 801c3fa:	2805      	cmp	r0, #5
 801c3fc:	d126      	bne.n	801c44c <_strtod_l+0x384>
 801c3fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c400:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801c404:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c408:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c40c:	e6a0      	b.n	801c150 <_strtod_l+0x88>
 801c40e:	210a      	movs	r1, #10
 801c410:	fb01 2e0e 	mla	lr, r1, lr, r2
 801c414:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c418:	e7b9      	b.n	801c38e <_strtod_l+0x2c6>
 801c41a:	2a6e      	cmp	r2, #110	; 0x6e
 801c41c:	e7db      	b.n	801c3d6 <_strtod_l+0x30e>
 801c41e:	4990      	ldr	r1, [pc, #576]	; (801c660 <_strtod_l+0x598>)
 801c420:	a817      	add	r0, sp, #92	; 0x5c
 801c422:	f001 f8ad 	bl	801d580 <__match>
 801c426:	2800      	cmp	r0, #0
 801c428:	f43f aeb0 	beq.w	801c18c <_strtod_l+0xc4>
 801c42c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c42e:	498d      	ldr	r1, [pc, #564]	; (801c664 <_strtod_l+0x59c>)
 801c430:	3b01      	subs	r3, #1
 801c432:	a817      	add	r0, sp, #92	; 0x5c
 801c434:	9317      	str	r3, [sp, #92]	; 0x5c
 801c436:	f001 f8a3 	bl	801d580 <__match>
 801c43a:	b910      	cbnz	r0, 801c442 <_strtod_l+0x37a>
 801c43c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c43e:	3301      	adds	r3, #1
 801c440:	9317      	str	r3, [sp, #92]	; 0x5c
 801c442:	f8df b230 	ldr.w	fp, [pc, #560]	; 801c674 <_strtod_l+0x5ac>
 801c446:	f04f 0a00 	mov.w	sl, #0
 801c44a:	e681      	b.n	801c150 <_strtod_l+0x88>
 801c44c:	4886      	ldr	r0, [pc, #536]	; (801c668 <_strtod_l+0x5a0>)
 801c44e:	f002 f817 	bl	801e480 <nan>
 801c452:	ec5b ab10 	vmov	sl, fp, d0
 801c456:	e67b      	b.n	801c150 <_strtod_l+0x88>
 801c458:	9b05      	ldr	r3, [sp, #20]
 801c45a:	9807      	ldr	r0, [sp, #28]
 801c45c:	1af3      	subs	r3, r6, r3
 801c45e:	2f00      	cmp	r7, #0
 801c460:	bf08      	it	eq
 801c462:	462f      	moveq	r7, r5
 801c464:	2d10      	cmp	r5, #16
 801c466:	9306      	str	r3, [sp, #24]
 801c468:	46a8      	mov	r8, r5
 801c46a:	bfa8      	it	ge
 801c46c:	f04f 0810 	movge.w	r8, #16
 801c470:	f7e4 f860 	bl	8000534 <__aeabi_ui2d>
 801c474:	2d09      	cmp	r5, #9
 801c476:	4682      	mov	sl, r0
 801c478:	468b      	mov	fp, r1
 801c47a:	dd13      	ble.n	801c4a4 <_strtod_l+0x3dc>
 801c47c:	4b7b      	ldr	r3, [pc, #492]	; (801c66c <_strtod_l+0x5a4>)
 801c47e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c482:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c486:	f7e4 f8cf 	bl	8000628 <__aeabi_dmul>
 801c48a:	4682      	mov	sl, r0
 801c48c:	4648      	mov	r0, r9
 801c48e:	468b      	mov	fp, r1
 801c490:	f7e4 f850 	bl	8000534 <__aeabi_ui2d>
 801c494:	4602      	mov	r2, r0
 801c496:	460b      	mov	r3, r1
 801c498:	4650      	mov	r0, sl
 801c49a:	4659      	mov	r1, fp
 801c49c:	f7e3 ff0e 	bl	80002bc <__adddf3>
 801c4a0:	4682      	mov	sl, r0
 801c4a2:	468b      	mov	fp, r1
 801c4a4:	2d0f      	cmp	r5, #15
 801c4a6:	dc38      	bgt.n	801c51a <_strtod_l+0x452>
 801c4a8:	9b06      	ldr	r3, [sp, #24]
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	f43f ae50 	beq.w	801c150 <_strtod_l+0x88>
 801c4b0:	dd24      	ble.n	801c4fc <_strtod_l+0x434>
 801c4b2:	2b16      	cmp	r3, #22
 801c4b4:	dc0b      	bgt.n	801c4ce <_strtod_l+0x406>
 801c4b6:	496d      	ldr	r1, [pc, #436]	; (801c66c <_strtod_l+0x5a4>)
 801c4b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4c0:	4652      	mov	r2, sl
 801c4c2:	465b      	mov	r3, fp
 801c4c4:	f7e4 f8b0 	bl	8000628 <__aeabi_dmul>
 801c4c8:	4682      	mov	sl, r0
 801c4ca:	468b      	mov	fp, r1
 801c4cc:	e640      	b.n	801c150 <_strtod_l+0x88>
 801c4ce:	9a06      	ldr	r2, [sp, #24]
 801c4d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801c4d4:	4293      	cmp	r3, r2
 801c4d6:	db20      	blt.n	801c51a <_strtod_l+0x452>
 801c4d8:	4c64      	ldr	r4, [pc, #400]	; (801c66c <_strtod_l+0x5a4>)
 801c4da:	f1c5 050f 	rsb	r5, r5, #15
 801c4de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c4e2:	4652      	mov	r2, sl
 801c4e4:	465b      	mov	r3, fp
 801c4e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4ea:	f7e4 f89d 	bl	8000628 <__aeabi_dmul>
 801c4ee:	9b06      	ldr	r3, [sp, #24]
 801c4f0:	1b5d      	subs	r5, r3, r5
 801c4f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c4f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c4fa:	e7e3      	b.n	801c4c4 <_strtod_l+0x3fc>
 801c4fc:	9b06      	ldr	r3, [sp, #24]
 801c4fe:	3316      	adds	r3, #22
 801c500:	db0b      	blt.n	801c51a <_strtod_l+0x452>
 801c502:	9b05      	ldr	r3, [sp, #20]
 801c504:	1b9e      	subs	r6, r3, r6
 801c506:	4b59      	ldr	r3, [pc, #356]	; (801c66c <_strtod_l+0x5a4>)
 801c508:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801c50c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c510:	4650      	mov	r0, sl
 801c512:	4659      	mov	r1, fp
 801c514:	f7e4 f9b2 	bl	800087c <__aeabi_ddiv>
 801c518:	e7d6      	b.n	801c4c8 <_strtod_l+0x400>
 801c51a:	9b06      	ldr	r3, [sp, #24]
 801c51c:	eba5 0808 	sub.w	r8, r5, r8
 801c520:	4498      	add	r8, r3
 801c522:	f1b8 0f00 	cmp.w	r8, #0
 801c526:	dd74      	ble.n	801c612 <_strtod_l+0x54a>
 801c528:	f018 030f 	ands.w	r3, r8, #15
 801c52c:	d00a      	beq.n	801c544 <_strtod_l+0x47c>
 801c52e:	494f      	ldr	r1, [pc, #316]	; (801c66c <_strtod_l+0x5a4>)
 801c530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c534:	4652      	mov	r2, sl
 801c536:	465b      	mov	r3, fp
 801c538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c53c:	f7e4 f874 	bl	8000628 <__aeabi_dmul>
 801c540:	4682      	mov	sl, r0
 801c542:	468b      	mov	fp, r1
 801c544:	f038 080f 	bics.w	r8, r8, #15
 801c548:	d04f      	beq.n	801c5ea <_strtod_l+0x522>
 801c54a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c54e:	dd22      	ble.n	801c596 <_strtod_l+0x4ce>
 801c550:	2500      	movs	r5, #0
 801c552:	462e      	mov	r6, r5
 801c554:	9507      	str	r5, [sp, #28]
 801c556:	9505      	str	r5, [sp, #20]
 801c558:	2322      	movs	r3, #34	; 0x22
 801c55a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801c674 <_strtod_l+0x5ac>
 801c55e:	6023      	str	r3, [r4, #0]
 801c560:	f04f 0a00 	mov.w	sl, #0
 801c564:	9b07      	ldr	r3, [sp, #28]
 801c566:	2b00      	cmp	r3, #0
 801c568:	f43f adf2 	beq.w	801c150 <_strtod_l+0x88>
 801c56c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c56e:	4620      	mov	r0, r4
 801c570:	f001 f950 	bl	801d814 <_Bfree>
 801c574:	9905      	ldr	r1, [sp, #20]
 801c576:	4620      	mov	r0, r4
 801c578:	f001 f94c 	bl	801d814 <_Bfree>
 801c57c:	4631      	mov	r1, r6
 801c57e:	4620      	mov	r0, r4
 801c580:	f001 f948 	bl	801d814 <_Bfree>
 801c584:	9907      	ldr	r1, [sp, #28]
 801c586:	4620      	mov	r0, r4
 801c588:	f001 f944 	bl	801d814 <_Bfree>
 801c58c:	4629      	mov	r1, r5
 801c58e:	4620      	mov	r0, r4
 801c590:	f001 f940 	bl	801d814 <_Bfree>
 801c594:	e5dc      	b.n	801c150 <_strtod_l+0x88>
 801c596:	4b36      	ldr	r3, [pc, #216]	; (801c670 <_strtod_l+0x5a8>)
 801c598:	9304      	str	r3, [sp, #16]
 801c59a:	2300      	movs	r3, #0
 801c59c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c5a0:	4650      	mov	r0, sl
 801c5a2:	4659      	mov	r1, fp
 801c5a4:	4699      	mov	r9, r3
 801c5a6:	f1b8 0f01 	cmp.w	r8, #1
 801c5aa:	dc21      	bgt.n	801c5f0 <_strtod_l+0x528>
 801c5ac:	b10b      	cbz	r3, 801c5b2 <_strtod_l+0x4ea>
 801c5ae:	4682      	mov	sl, r0
 801c5b0:	468b      	mov	fp, r1
 801c5b2:	4b2f      	ldr	r3, [pc, #188]	; (801c670 <_strtod_l+0x5a8>)
 801c5b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c5b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c5bc:	4652      	mov	r2, sl
 801c5be:	465b      	mov	r3, fp
 801c5c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c5c4:	f7e4 f830 	bl	8000628 <__aeabi_dmul>
 801c5c8:	4b2a      	ldr	r3, [pc, #168]	; (801c674 <_strtod_l+0x5ac>)
 801c5ca:	460a      	mov	r2, r1
 801c5cc:	400b      	ands	r3, r1
 801c5ce:	492a      	ldr	r1, [pc, #168]	; (801c678 <_strtod_l+0x5b0>)
 801c5d0:	428b      	cmp	r3, r1
 801c5d2:	4682      	mov	sl, r0
 801c5d4:	d8bc      	bhi.n	801c550 <_strtod_l+0x488>
 801c5d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c5da:	428b      	cmp	r3, r1
 801c5dc:	bf86      	itte	hi
 801c5de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801c67c <_strtod_l+0x5b4>
 801c5e2:	f04f 3aff 	movhi.w	sl, #4294967295
 801c5e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	9304      	str	r3, [sp, #16]
 801c5ee:	e084      	b.n	801c6fa <_strtod_l+0x632>
 801c5f0:	f018 0f01 	tst.w	r8, #1
 801c5f4:	d005      	beq.n	801c602 <_strtod_l+0x53a>
 801c5f6:	9b04      	ldr	r3, [sp, #16]
 801c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5fc:	f7e4 f814 	bl	8000628 <__aeabi_dmul>
 801c600:	2301      	movs	r3, #1
 801c602:	9a04      	ldr	r2, [sp, #16]
 801c604:	3208      	adds	r2, #8
 801c606:	f109 0901 	add.w	r9, r9, #1
 801c60a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c60e:	9204      	str	r2, [sp, #16]
 801c610:	e7c9      	b.n	801c5a6 <_strtod_l+0x4de>
 801c612:	d0ea      	beq.n	801c5ea <_strtod_l+0x522>
 801c614:	f1c8 0800 	rsb	r8, r8, #0
 801c618:	f018 020f 	ands.w	r2, r8, #15
 801c61c:	d00a      	beq.n	801c634 <_strtod_l+0x56c>
 801c61e:	4b13      	ldr	r3, [pc, #76]	; (801c66c <_strtod_l+0x5a4>)
 801c620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c624:	4650      	mov	r0, sl
 801c626:	4659      	mov	r1, fp
 801c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c62c:	f7e4 f926 	bl	800087c <__aeabi_ddiv>
 801c630:	4682      	mov	sl, r0
 801c632:	468b      	mov	fp, r1
 801c634:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c638:	d0d7      	beq.n	801c5ea <_strtod_l+0x522>
 801c63a:	f1b8 0f1f 	cmp.w	r8, #31
 801c63e:	dd1f      	ble.n	801c680 <_strtod_l+0x5b8>
 801c640:	2500      	movs	r5, #0
 801c642:	462e      	mov	r6, r5
 801c644:	9507      	str	r5, [sp, #28]
 801c646:	9505      	str	r5, [sp, #20]
 801c648:	2322      	movs	r3, #34	; 0x22
 801c64a:	f04f 0a00 	mov.w	sl, #0
 801c64e:	f04f 0b00 	mov.w	fp, #0
 801c652:	6023      	str	r3, [r4, #0]
 801c654:	e786      	b.n	801c564 <_strtod_l+0x49c>
 801c656:	bf00      	nop
 801c658:	0801f8de 	.word	0x0801f8de
 801c65c:	0801f8f8 	.word	0x0801f8f8
 801c660:	0801f8d5 	.word	0x0801f8d5
 801c664:	0801f8d8 	.word	0x0801f8d8
 801c668:	0801f973 	.word	0x0801f973
 801c66c:	0801fa90 	.word	0x0801fa90
 801c670:	0801fa68 	.word	0x0801fa68
 801c674:	7ff00000 	.word	0x7ff00000
 801c678:	7ca00000 	.word	0x7ca00000
 801c67c:	7fefffff 	.word	0x7fefffff
 801c680:	f018 0310 	ands.w	r3, r8, #16
 801c684:	bf18      	it	ne
 801c686:	236a      	movne	r3, #106	; 0x6a
 801c688:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801ca38 <_strtod_l+0x970>
 801c68c:	9304      	str	r3, [sp, #16]
 801c68e:	4650      	mov	r0, sl
 801c690:	4659      	mov	r1, fp
 801c692:	2300      	movs	r3, #0
 801c694:	f018 0f01 	tst.w	r8, #1
 801c698:	d004      	beq.n	801c6a4 <_strtod_l+0x5dc>
 801c69a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c69e:	f7e3 ffc3 	bl	8000628 <__aeabi_dmul>
 801c6a2:	2301      	movs	r3, #1
 801c6a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c6a8:	f109 0908 	add.w	r9, r9, #8
 801c6ac:	d1f2      	bne.n	801c694 <_strtod_l+0x5cc>
 801c6ae:	b10b      	cbz	r3, 801c6b4 <_strtod_l+0x5ec>
 801c6b0:	4682      	mov	sl, r0
 801c6b2:	468b      	mov	fp, r1
 801c6b4:	9b04      	ldr	r3, [sp, #16]
 801c6b6:	b1c3      	cbz	r3, 801c6ea <_strtod_l+0x622>
 801c6b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c6bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	4659      	mov	r1, fp
 801c6c4:	dd11      	ble.n	801c6ea <_strtod_l+0x622>
 801c6c6:	2b1f      	cmp	r3, #31
 801c6c8:	f340 8124 	ble.w	801c914 <_strtod_l+0x84c>
 801c6cc:	2b34      	cmp	r3, #52	; 0x34
 801c6ce:	bfde      	ittt	le
 801c6d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801c6d4:	f04f 33ff 	movle.w	r3, #4294967295
 801c6d8:	fa03 f202 	lslle.w	r2, r3, r2
 801c6dc:	f04f 0a00 	mov.w	sl, #0
 801c6e0:	bfcc      	ite	gt
 801c6e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c6e6:	ea02 0b01 	andle.w	fp, r2, r1
 801c6ea:	2200      	movs	r2, #0
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	4650      	mov	r0, sl
 801c6f0:	4659      	mov	r1, fp
 801c6f2:	f7e4 fa01 	bl	8000af8 <__aeabi_dcmpeq>
 801c6f6:	2800      	cmp	r0, #0
 801c6f8:	d1a2      	bne.n	801c640 <_strtod_l+0x578>
 801c6fa:	9b07      	ldr	r3, [sp, #28]
 801c6fc:	9300      	str	r3, [sp, #0]
 801c6fe:	9908      	ldr	r1, [sp, #32]
 801c700:	462b      	mov	r3, r5
 801c702:	463a      	mov	r2, r7
 801c704:	4620      	mov	r0, r4
 801c706:	f001 f8ed 	bl	801d8e4 <__s2b>
 801c70a:	9007      	str	r0, [sp, #28]
 801c70c:	2800      	cmp	r0, #0
 801c70e:	f43f af1f 	beq.w	801c550 <_strtod_l+0x488>
 801c712:	9b05      	ldr	r3, [sp, #20]
 801c714:	1b9e      	subs	r6, r3, r6
 801c716:	9b06      	ldr	r3, [sp, #24]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	bfb4      	ite	lt
 801c71c:	4633      	movlt	r3, r6
 801c71e:	2300      	movge	r3, #0
 801c720:	930c      	str	r3, [sp, #48]	; 0x30
 801c722:	9b06      	ldr	r3, [sp, #24]
 801c724:	2500      	movs	r5, #0
 801c726:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c72a:	9312      	str	r3, [sp, #72]	; 0x48
 801c72c:	462e      	mov	r6, r5
 801c72e:	9b07      	ldr	r3, [sp, #28]
 801c730:	4620      	mov	r0, r4
 801c732:	6859      	ldr	r1, [r3, #4]
 801c734:	f001 f82e 	bl	801d794 <_Balloc>
 801c738:	9005      	str	r0, [sp, #20]
 801c73a:	2800      	cmp	r0, #0
 801c73c:	f43f af0c 	beq.w	801c558 <_strtod_l+0x490>
 801c740:	9b07      	ldr	r3, [sp, #28]
 801c742:	691a      	ldr	r2, [r3, #16]
 801c744:	3202      	adds	r2, #2
 801c746:	f103 010c 	add.w	r1, r3, #12
 801c74a:	0092      	lsls	r2, r2, #2
 801c74c:	300c      	adds	r0, #12
 801c74e:	f7fe fedf 	bl	801b510 <memcpy>
 801c752:	ec4b ab10 	vmov	d0, sl, fp
 801c756:	aa1a      	add	r2, sp, #104	; 0x68
 801c758:	a919      	add	r1, sp, #100	; 0x64
 801c75a:	4620      	mov	r0, r4
 801c75c:	f001 fc08 	bl	801df70 <__d2b>
 801c760:	ec4b ab18 	vmov	d8, sl, fp
 801c764:	9018      	str	r0, [sp, #96]	; 0x60
 801c766:	2800      	cmp	r0, #0
 801c768:	f43f aef6 	beq.w	801c558 <_strtod_l+0x490>
 801c76c:	2101      	movs	r1, #1
 801c76e:	4620      	mov	r0, r4
 801c770:	f001 f952 	bl	801da18 <__i2b>
 801c774:	4606      	mov	r6, r0
 801c776:	2800      	cmp	r0, #0
 801c778:	f43f aeee 	beq.w	801c558 <_strtod_l+0x490>
 801c77c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c77e:	9904      	ldr	r1, [sp, #16]
 801c780:	2b00      	cmp	r3, #0
 801c782:	bfab      	itete	ge
 801c784:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801c786:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801c788:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801c78a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801c78e:	bfac      	ite	ge
 801c790:	eb03 0902 	addge.w	r9, r3, r2
 801c794:	1ad7      	sublt	r7, r2, r3
 801c796:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c798:	eba3 0801 	sub.w	r8, r3, r1
 801c79c:	4490      	add	r8, r2
 801c79e:	4ba1      	ldr	r3, [pc, #644]	; (801ca24 <_strtod_l+0x95c>)
 801c7a0:	f108 38ff 	add.w	r8, r8, #4294967295
 801c7a4:	4598      	cmp	r8, r3
 801c7a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c7aa:	f280 80c7 	bge.w	801c93c <_strtod_l+0x874>
 801c7ae:	eba3 0308 	sub.w	r3, r3, r8
 801c7b2:	2b1f      	cmp	r3, #31
 801c7b4:	eba2 0203 	sub.w	r2, r2, r3
 801c7b8:	f04f 0101 	mov.w	r1, #1
 801c7bc:	f300 80b1 	bgt.w	801c922 <_strtod_l+0x85a>
 801c7c0:	fa01 f303 	lsl.w	r3, r1, r3
 801c7c4:	930d      	str	r3, [sp, #52]	; 0x34
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	9308      	str	r3, [sp, #32]
 801c7ca:	eb09 0802 	add.w	r8, r9, r2
 801c7ce:	9b04      	ldr	r3, [sp, #16]
 801c7d0:	45c1      	cmp	r9, r8
 801c7d2:	4417      	add	r7, r2
 801c7d4:	441f      	add	r7, r3
 801c7d6:	464b      	mov	r3, r9
 801c7d8:	bfa8      	it	ge
 801c7da:	4643      	movge	r3, r8
 801c7dc:	42bb      	cmp	r3, r7
 801c7de:	bfa8      	it	ge
 801c7e0:	463b      	movge	r3, r7
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	bfc2      	ittt	gt
 801c7e6:	eba8 0803 	subgt.w	r8, r8, r3
 801c7ea:	1aff      	subgt	r7, r7, r3
 801c7ec:	eba9 0903 	subgt.w	r9, r9, r3
 801c7f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	dd17      	ble.n	801c826 <_strtod_l+0x75e>
 801c7f6:	4631      	mov	r1, r6
 801c7f8:	461a      	mov	r2, r3
 801c7fa:	4620      	mov	r0, r4
 801c7fc:	f001 f9cc 	bl	801db98 <__pow5mult>
 801c800:	4606      	mov	r6, r0
 801c802:	2800      	cmp	r0, #0
 801c804:	f43f aea8 	beq.w	801c558 <_strtod_l+0x490>
 801c808:	4601      	mov	r1, r0
 801c80a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c80c:	4620      	mov	r0, r4
 801c80e:	f001 f919 	bl	801da44 <__multiply>
 801c812:	900b      	str	r0, [sp, #44]	; 0x2c
 801c814:	2800      	cmp	r0, #0
 801c816:	f43f ae9f 	beq.w	801c558 <_strtod_l+0x490>
 801c81a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c81c:	4620      	mov	r0, r4
 801c81e:	f000 fff9 	bl	801d814 <_Bfree>
 801c822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c824:	9318      	str	r3, [sp, #96]	; 0x60
 801c826:	f1b8 0f00 	cmp.w	r8, #0
 801c82a:	f300 808c 	bgt.w	801c946 <_strtod_l+0x87e>
 801c82e:	9b06      	ldr	r3, [sp, #24]
 801c830:	2b00      	cmp	r3, #0
 801c832:	dd08      	ble.n	801c846 <_strtod_l+0x77e>
 801c834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c836:	9905      	ldr	r1, [sp, #20]
 801c838:	4620      	mov	r0, r4
 801c83a:	f001 f9ad 	bl	801db98 <__pow5mult>
 801c83e:	9005      	str	r0, [sp, #20]
 801c840:	2800      	cmp	r0, #0
 801c842:	f43f ae89 	beq.w	801c558 <_strtod_l+0x490>
 801c846:	2f00      	cmp	r7, #0
 801c848:	dd08      	ble.n	801c85c <_strtod_l+0x794>
 801c84a:	9905      	ldr	r1, [sp, #20]
 801c84c:	463a      	mov	r2, r7
 801c84e:	4620      	mov	r0, r4
 801c850:	f001 f9fc 	bl	801dc4c <__lshift>
 801c854:	9005      	str	r0, [sp, #20]
 801c856:	2800      	cmp	r0, #0
 801c858:	f43f ae7e 	beq.w	801c558 <_strtod_l+0x490>
 801c85c:	f1b9 0f00 	cmp.w	r9, #0
 801c860:	dd08      	ble.n	801c874 <_strtod_l+0x7ac>
 801c862:	4631      	mov	r1, r6
 801c864:	464a      	mov	r2, r9
 801c866:	4620      	mov	r0, r4
 801c868:	f001 f9f0 	bl	801dc4c <__lshift>
 801c86c:	4606      	mov	r6, r0
 801c86e:	2800      	cmp	r0, #0
 801c870:	f43f ae72 	beq.w	801c558 <_strtod_l+0x490>
 801c874:	9a05      	ldr	r2, [sp, #20]
 801c876:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c878:	4620      	mov	r0, r4
 801c87a:	f001 fa73 	bl	801dd64 <__mdiff>
 801c87e:	4605      	mov	r5, r0
 801c880:	2800      	cmp	r0, #0
 801c882:	f43f ae69 	beq.w	801c558 <_strtod_l+0x490>
 801c886:	68c3      	ldr	r3, [r0, #12]
 801c888:	930b      	str	r3, [sp, #44]	; 0x2c
 801c88a:	2300      	movs	r3, #0
 801c88c:	60c3      	str	r3, [r0, #12]
 801c88e:	4631      	mov	r1, r6
 801c890:	f001 fa4c 	bl	801dd2c <__mcmp>
 801c894:	2800      	cmp	r0, #0
 801c896:	da60      	bge.n	801c95a <_strtod_l+0x892>
 801c898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c89a:	ea53 030a 	orrs.w	r3, r3, sl
 801c89e:	f040 8082 	bne.w	801c9a6 <_strtod_l+0x8de>
 801c8a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d17d      	bne.n	801c9a6 <_strtod_l+0x8de>
 801c8aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c8ae:	0d1b      	lsrs	r3, r3, #20
 801c8b0:	051b      	lsls	r3, r3, #20
 801c8b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c8b6:	d976      	bls.n	801c9a6 <_strtod_l+0x8de>
 801c8b8:	696b      	ldr	r3, [r5, #20]
 801c8ba:	b913      	cbnz	r3, 801c8c2 <_strtod_l+0x7fa>
 801c8bc:	692b      	ldr	r3, [r5, #16]
 801c8be:	2b01      	cmp	r3, #1
 801c8c0:	dd71      	ble.n	801c9a6 <_strtod_l+0x8de>
 801c8c2:	4629      	mov	r1, r5
 801c8c4:	2201      	movs	r2, #1
 801c8c6:	4620      	mov	r0, r4
 801c8c8:	f001 f9c0 	bl	801dc4c <__lshift>
 801c8cc:	4631      	mov	r1, r6
 801c8ce:	4605      	mov	r5, r0
 801c8d0:	f001 fa2c 	bl	801dd2c <__mcmp>
 801c8d4:	2800      	cmp	r0, #0
 801c8d6:	dd66      	ble.n	801c9a6 <_strtod_l+0x8de>
 801c8d8:	9904      	ldr	r1, [sp, #16]
 801c8da:	4a53      	ldr	r2, [pc, #332]	; (801ca28 <_strtod_l+0x960>)
 801c8dc:	465b      	mov	r3, fp
 801c8de:	2900      	cmp	r1, #0
 801c8e0:	f000 8081 	beq.w	801c9e6 <_strtod_l+0x91e>
 801c8e4:	ea02 010b 	and.w	r1, r2, fp
 801c8e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c8ec:	dc7b      	bgt.n	801c9e6 <_strtod_l+0x91e>
 801c8ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c8f2:	f77f aea9 	ble.w	801c648 <_strtod_l+0x580>
 801c8f6:	4b4d      	ldr	r3, [pc, #308]	; (801ca2c <_strtod_l+0x964>)
 801c8f8:	4650      	mov	r0, sl
 801c8fa:	4659      	mov	r1, fp
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	f7e3 fe93 	bl	8000628 <__aeabi_dmul>
 801c902:	460b      	mov	r3, r1
 801c904:	4303      	orrs	r3, r0
 801c906:	bf08      	it	eq
 801c908:	2322      	moveq	r3, #34	; 0x22
 801c90a:	4682      	mov	sl, r0
 801c90c:	468b      	mov	fp, r1
 801c90e:	bf08      	it	eq
 801c910:	6023      	streq	r3, [r4, #0]
 801c912:	e62b      	b.n	801c56c <_strtod_l+0x4a4>
 801c914:	f04f 32ff 	mov.w	r2, #4294967295
 801c918:	fa02 f303 	lsl.w	r3, r2, r3
 801c91c:	ea03 0a0a 	and.w	sl, r3, sl
 801c920:	e6e3      	b.n	801c6ea <_strtod_l+0x622>
 801c922:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c926:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c92a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c92e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c932:	fa01 f308 	lsl.w	r3, r1, r8
 801c936:	9308      	str	r3, [sp, #32]
 801c938:	910d      	str	r1, [sp, #52]	; 0x34
 801c93a:	e746      	b.n	801c7ca <_strtod_l+0x702>
 801c93c:	2300      	movs	r3, #0
 801c93e:	9308      	str	r3, [sp, #32]
 801c940:	2301      	movs	r3, #1
 801c942:	930d      	str	r3, [sp, #52]	; 0x34
 801c944:	e741      	b.n	801c7ca <_strtod_l+0x702>
 801c946:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c948:	4642      	mov	r2, r8
 801c94a:	4620      	mov	r0, r4
 801c94c:	f001 f97e 	bl	801dc4c <__lshift>
 801c950:	9018      	str	r0, [sp, #96]	; 0x60
 801c952:	2800      	cmp	r0, #0
 801c954:	f47f af6b 	bne.w	801c82e <_strtod_l+0x766>
 801c958:	e5fe      	b.n	801c558 <_strtod_l+0x490>
 801c95a:	465f      	mov	r7, fp
 801c95c:	d16e      	bne.n	801ca3c <_strtod_l+0x974>
 801c95e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c960:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c964:	b342      	cbz	r2, 801c9b8 <_strtod_l+0x8f0>
 801c966:	4a32      	ldr	r2, [pc, #200]	; (801ca30 <_strtod_l+0x968>)
 801c968:	4293      	cmp	r3, r2
 801c96a:	d128      	bne.n	801c9be <_strtod_l+0x8f6>
 801c96c:	9b04      	ldr	r3, [sp, #16]
 801c96e:	4651      	mov	r1, sl
 801c970:	b1eb      	cbz	r3, 801c9ae <_strtod_l+0x8e6>
 801c972:	4b2d      	ldr	r3, [pc, #180]	; (801ca28 <_strtod_l+0x960>)
 801c974:	403b      	ands	r3, r7
 801c976:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c97a:	f04f 32ff 	mov.w	r2, #4294967295
 801c97e:	d819      	bhi.n	801c9b4 <_strtod_l+0x8ec>
 801c980:	0d1b      	lsrs	r3, r3, #20
 801c982:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c986:	fa02 f303 	lsl.w	r3, r2, r3
 801c98a:	4299      	cmp	r1, r3
 801c98c:	d117      	bne.n	801c9be <_strtod_l+0x8f6>
 801c98e:	4b29      	ldr	r3, [pc, #164]	; (801ca34 <_strtod_l+0x96c>)
 801c990:	429f      	cmp	r7, r3
 801c992:	d102      	bne.n	801c99a <_strtod_l+0x8d2>
 801c994:	3101      	adds	r1, #1
 801c996:	f43f addf 	beq.w	801c558 <_strtod_l+0x490>
 801c99a:	4b23      	ldr	r3, [pc, #140]	; (801ca28 <_strtod_l+0x960>)
 801c99c:	403b      	ands	r3, r7
 801c99e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c9a2:	f04f 0a00 	mov.w	sl, #0
 801c9a6:	9b04      	ldr	r3, [sp, #16]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d1a4      	bne.n	801c8f6 <_strtod_l+0x82e>
 801c9ac:	e5de      	b.n	801c56c <_strtod_l+0x4a4>
 801c9ae:	f04f 33ff 	mov.w	r3, #4294967295
 801c9b2:	e7ea      	b.n	801c98a <_strtod_l+0x8c2>
 801c9b4:	4613      	mov	r3, r2
 801c9b6:	e7e8      	b.n	801c98a <_strtod_l+0x8c2>
 801c9b8:	ea53 030a 	orrs.w	r3, r3, sl
 801c9bc:	d08c      	beq.n	801c8d8 <_strtod_l+0x810>
 801c9be:	9b08      	ldr	r3, [sp, #32]
 801c9c0:	b1db      	cbz	r3, 801c9fa <_strtod_l+0x932>
 801c9c2:	423b      	tst	r3, r7
 801c9c4:	d0ef      	beq.n	801c9a6 <_strtod_l+0x8de>
 801c9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c9c8:	9a04      	ldr	r2, [sp, #16]
 801c9ca:	4650      	mov	r0, sl
 801c9cc:	4659      	mov	r1, fp
 801c9ce:	b1c3      	cbz	r3, 801ca02 <_strtod_l+0x93a>
 801c9d0:	f7ff fb5c 	bl	801c08c <sulp>
 801c9d4:	4602      	mov	r2, r0
 801c9d6:	460b      	mov	r3, r1
 801c9d8:	ec51 0b18 	vmov	r0, r1, d8
 801c9dc:	f7e3 fc6e 	bl	80002bc <__adddf3>
 801c9e0:	4682      	mov	sl, r0
 801c9e2:	468b      	mov	fp, r1
 801c9e4:	e7df      	b.n	801c9a6 <_strtod_l+0x8de>
 801c9e6:	4013      	ands	r3, r2
 801c9e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c9ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c9f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c9f4:	f04f 3aff 	mov.w	sl, #4294967295
 801c9f8:	e7d5      	b.n	801c9a6 <_strtod_l+0x8de>
 801c9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c9fc:	ea13 0f0a 	tst.w	r3, sl
 801ca00:	e7e0      	b.n	801c9c4 <_strtod_l+0x8fc>
 801ca02:	f7ff fb43 	bl	801c08c <sulp>
 801ca06:	4602      	mov	r2, r0
 801ca08:	460b      	mov	r3, r1
 801ca0a:	ec51 0b18 	vmov	r0, r1, d8
 801ca0e:	f7e3 fc53 	bl	80002b8 <__aeabi_dsub>
 801ca12:	2200      	movs	r2, #0
 801ca14:	2300      	movs	r3, #0
 801ca16:	4682      	mov	sl, r0
 801ca18:	468b      	mov	fp, r1
 801ca1a:	f7e4 f86d 	bl	8000af8 <__aeabi_dcmpeq>
 801ca1e:	2800      	cmp	r0, #0
 801ca20:	d0c1      	beq.n	801c9a6 <_strtod_l+0x8de>
 801ca22:	e611      	b.n	801c648 <_strtod_l+0x580>
 801ca24:	fffffc02 	.word	0xfffffc02
 801ca28:	7ff00000 	.word	0x7ff00000
 801ca2c:	39500000 	.word	0x39500000
 801ca30:	000fffff 	.word	0x000fffff
 801ca34:	7fefffff 	.word	0x7fefffff
 801ca38:	0801f910 	.word	0x0801f910
 801ca3c:	4631      	mov	r1, r6
 801ca3e:	4628      	mov	r0, r5
 801ca40:	f001 faf2 	bl	801e028 <__ratio>
 801ca44:	ec59 8b10 	vmov	r8, r9, d0
 801ca48:	ee10 0a10 	vmov	r0, s0
 801ca4c:	2200      	movs	r2, #0
 801ca4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ca52:	4649      	mov	r1, r9
 801ca54:	f7e4 f864 	bl	8000b20 <__aeabi_dcmple>
 801ca58:	2800      	cmp	r0, #0
 801ca5a:	d07a      	beq.n	801cb52 <_strtod_l+0xa8a>
 801ca5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d04a      	beq.n	801caf8 <_strtod_l+0xa30>
 801ca62:	4b95      	ldr	r3, [pc, #596]	; (801ccb8 <_strtod_l+0xbf0>)
 801ca64:	2200      	movs	r2, #0
 801ca66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ca6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ccb8 <_strtod_l+0xbf0>
 801ca6e:	f04f 0800 	mov.w	r8, #0
 801ca72:	4b92      	ldr	r3, [pc, #584]	; (801ccbc <_strtod_l+0xbf4>)
 801ca74:	403b      	ands	r3, r7
 801ca76:	930d      	str	r3, [sp, #52]	; 0x34
 801ca78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ca7a:	4b91      	ldr	r3, [pc, #580]	; (801ccc0 <_strtod_l+0xbf8>)
 801ca7c:	429a      	cmp	r2, r3
 801ca7e:	f040 80b0 	bne.w	801cbe2 <_strtod_l+0xb1a>
 801ca82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ca86:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801ca8a:	ec4b ab10 	vmov	d0, sl, fp
 801ca8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ca92:	f001 f9f1 	bl	801de78 <__ulp>
 801ca96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ca9a:	ec53 2b10 	vmov	r2, r3, d0
 801ca9e:	f7e3 fdc3 	bl	8000628 <__aeabi_dmul>
 801caa2:	4652      	mov	r2, sl
 801caa4:	465b      	mov	r3, fp
 801caa6:	f7e3 fc09 	bl	80002bc <__adddf3>
 801caaa:	460b      	mov	r3, r1
 801caac:	4983      	ldr	r1, [pc, #524]	; (801ccbc <_strtod_l+0xbf4>)
 801caae:	4a85      	ldr	r2, [pc, #532]	; (801ccc4 <_strtod_l+0xbfc>)
 801cab0:	4019      	ands	r1, r3
 801cab2:	4291      	cmp	r1, r2
 801cab4:	4682      	mov	sl, r0
 801cab6:	d960      	bls.n	801cb7a <_strtod_l+0xab2>
 801cab8:	ee18 3a90 	vmov	r3, s17
 801cabc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cac0:	4293      	cmp	r3, r2
 801cac2:	d104      	bne.n	801cace <_strtod_l+0xa06>
 801cac4:	ee18 3a10 	vmov	r3, s16
 801cac8:	3301      	adds	r3, #1
 801caca:	f43f ad45 	beq.w	801c558 <_strtod_l+0x490>
 801cace:	f8df b200 	ldr.w	fp, [pc, #512]	; 801ccd0 <_strtod_l+0xc08>
 801cad2:	f04f 3aff 	mov.w	sl, #4294967295
 801cad6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cad8:	4620      	mov	r0, r4
 801cada:	f000 fe9b 	bl	801d814 <_Bfree>
 801cade:	9905      	ldr	r1, [sp, #20]
 801cae0:	4620      	mov	r0, r4
 801cae2:	f000 fe97 	bl	801d814 <_Bfree>
 801cae6:	4631      	mov	r1, r6
 801cae8:	4620      	mov	r0, r4
 801caea:	f000 fe93 	bl	801d814 <_Bfree>
 801caee:	4629      	mov	r1, r5
 801caf0:	4620      	mov	r0, r4
 801caf2:	f000 fe8f 	bl	801d814 <_Bfree>
 801caf6:	e61a      	b.n	801c72e <_strtod_l+0x666>
 801caf8:	f1ba 0f00 	cmp.w	sl, #0
 801cafc:	d11b      	bne.n	801cb36 <_strtod_l+0xa6e>
 801cafe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cb02:	b9f3      	cbnz	r3, 801cb42 <_strtod_l+0xa7a>
 801cb04:	4b6c      	ldr	r3, [pc, #432]	; (801ccb8 <_strtod_l+0xbf0>)
 801cb06:	2200      	movs	r2, #0
 801cb08:	4640      	mov	r0, r8
 801cb0a:	4649      	mov	r1, r9
 801cb0c:	f7e3 fffe 	bl	8000b0c <__aeabi_dcmplt>
 801cb10:	b9d0      	cbnz	r0, 801cb48 <_strtod_l+0xa80>
 801cb12:	4640      	mov	r0, r8
 801cb14:	4649      	mov	r1, r9
 801cb16:	4b6c      	ldr	r3, [pc, #432]	; (801ccc8 <_strtod_l+0xc00>)
 801cb18:	2200      	movs	r2, #0
 801cb1a:	f7e3 fd85 	bl	8000628 <__aeabi_dmul>
 801cb1e:	4680      	mov	r8, r0
 801cb20:	4689      	mov	r9, r1
 801cb22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801cb26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801cb2a:	9315      	str	r3, [sp, #84]	; 0x54
 801cb2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801cb30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb34:	e79d      	b.n	801ca72 <_strtod_l+0x9aa>
 801cb36:	f1ba 0f01 	cmp.w	sl, #1
 801cb3a:	d102      	bne.n	801cb42 <_strtod_l+0xa7a>
 801cb3c:	2f00      	cmp	r7, #0
 801cb3e:	f43f ad83 	beq.w	801c648 <_strtod_l+0x580>
 801cb42:	4b62      	ldr	r3, [pc, #392]	; (801cccc <_strtod_l+0xc04>)
 801cb44:	2200      	movs	r2, #0
 801cb46:	e78e      	b.n	801ca66 <_strtod_l+0x99e>
 801cb48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801ccc8 <_strtod_l+0xc00>
 801cb4c:	f04f 0800 	mov.w	r8, #0
 801cb50:	e7e7      	b.n	801cb22 <_strtod_l+0xa5a>
 801cb52:	4b5d      	ldr	r3, [pc, #372]	; (801ccc8 <_strtod_l+0xc00>)
 801cb54:	4640      	mov	r0, r8
 801cb56:	4649      	mov	r1, r9
 801cb58:	2200      	movs	r2, #0
 801cb5a:	f7e3 fd65 	bl	8000628 <__aeabi_dmul>
 801cb5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb60:	4680      	mov	r8, r0
 801cb62:	4689      	mov	r9, r1
 801cb64:	b933      	cbnz	r3, 801cb74 <_strtod_l+0xaac>
 801cb66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cb6a:	900e      	str	r0, [sp, #56]	; 0x38
 801cb6c:	930f      	str	r3, [sp, #60]	; 0x3c
 801cb6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801cb72:	e7dd      	b.n	801cb30 <_strtod_l+0xa68>
 801cb74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801cb78:	e7f9      	b.n	801cb6e <_strtod_l+0xaa6>
 801cb7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801cb7e:	9b04      	ldr	r3, [sp, #16]
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d1a8      	bne.n	801cad6 <_strtod_l+0xa0e>
 801cb84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cb88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cb8a:	0d1b      	lsrs	r3, r3, #20
 801cb8c:	051b      	lsls	r3, r3, #20
 801cb8e:	429a      	cmp	r2, r3
 801cb90:	d1a1      	bne.n	801cad6 <_strtod_l+0xa0e>
 801cb92:	4640      	mov	r0, r8
 801cb94:	4649      	mov	r1, r9
 801cb96:	f7e4 f87f 	bl	8000c98 <__aeabi_d2lz>
 801cb9a:	f7e3 fd17 	bl	80005cc <__aeabi_l2d>
 801cb9e:	4602      	mov	r2, r0
 801cba0:	460b      	mov	r3, r1
 801cba2:	4640      	mov	r0, r8
 801cba4:	4649      	mov	r1, r9
 801cba6:	f7e3 fb87 	bl	80002b8 <__aeabi_dsub>
 801cbaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cbac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cbb0:	ea43 030a 	orr.w	r3, r3, sl
 801cbb4:	4313      	orrs	r3, r2
 801cbb6:	4680      	mov	r8, r0
 801cbb8:	4689      	mov	r9, r1
 801cbba:	d055      	beq.n	801cc68 <_strtod_l+0xba0>
 801cbbc:	a336      	add	r3, pc, #216	; (adr r3, 801cc98 <_strtod_l+0xbd0>)
 801cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc2:	f7e3 ffa3 	bl	8000b0c <__aeabi_dcmplt>
 801cbc6:	2800      	cmp	r0, #0
 801cbc8:	f47f acd0 	bne.w	801c56c <_strtod_l+0x4a4>
 801cbcc:	a334      	add	r3, pc, #208	; (adr r3, 801cca0 <_strtod_l+0xbd8>)
 801cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbd2:	4640      	mov	r0, r8
 801cbd4:	4649      	mov	r1, r9
 801cbd6:	f7e3 ffb7 	bl	8000b48 <__aeabi_dcmpgt>
 801cbda:	2800      	cmp	r0, #0
 801cbdc:	f43f af7b 	beq.w	801cad6 <_strtod_l+0xa0e>
 801cbe0:	e4c4      	b.n	801c56c <_strtod_l+0x4a4>
 801cbe2:	9b04      	ldr	r3, [sp, #16]
 801cbe4:	b333      	cbz	r3, 801cc34 <_strtod_l+0xb6c>
 801cbe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cbe8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cbec:	d822      	bhi.n	801cc34 <_strtod_l+0xb6c>
 801cbee:	a32e      	add	r3, pc, #184	; (adr r3, 801cca8 <_strtod_l+0xbe0>)
 801cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf4:	4640      	mov	r0, r8
 801cbf6:	4649      	mov	r1, r9
 801cbf8:	f7e3 ff92 	bl	8000b20 <__aeabi_dcmple>
 801cbfc:	b1a0      	cbz	r0, 801cc28 <_strtod_l+0xb60>
 801cbfe:	4649      	mov	r1, r9
 801cc00:	4640      	mov	r0, r8
 801cc02:	f7e3 ffc1 	bl	8000b88 <__aeabi_d2uiz>
 801cc06:	2801      	cmp	r0, #1
 801cc08:	bf38      	it	cc
 801cc0a:	2001      	movcc	r0, #1
 801cc0c:	f7e3 fc92 	bl	8000534 <__aeabi_ui2d>
 801cc10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc12:	4680      	mov	r8, r0
 801cc14:	4689      	mov	r9, r1
 801cc16:	bb23      	cbnz	r3, 801cc62 <_strtod_l+0xb9a>
 801cc18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cc1c:	9010      	str	r0, [sp, #64]	; 0x40
 801cc1e:	9311      	str	r3, [sp, #68]	; 0x44
 801cc20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cc24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cc30:	1a9b      	subs	r3, r3, r2
 801cc32:	9309      	str	r3, [sp, #36]	; 0x24
 801cc34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cc38:	eeb0 0a48 	vmov.f32	s0, s16
 801cc3c:	eef0 0a68 	vmov.f32	s1, s17
 801cc40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cc44:	f001 f918 	bl	801de78 <__ulp>
 801cc48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cc4c:	ec53 2b10 	vmov	r2, r3, d0
 801cc50:	f7e3 fcea 	bl	8000628 <__aeabi_dmul>
 801cc54:	ec53 2b18 	vmov	r2, r3, d8
 801cc58:	f7e3 fb30 	bl	80002bc <__adddf3>
 801cc5c:	4682      	mov	sl, r0
 801cc5e:	468b      	mov	fp, r1
 801cc60:	e78d      	b.n	801cb7e <_strtod_l+0xab6>
 801cc62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801cc66:	e7db      	b.n	801cc20 <_strtod_l+0xb58>
 801cc68:	a311      	add	r3, pc, #68	; (adr r3, 801ccb0 <_strtod_l+0xbe8>)
 801cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc6e:	f7e3 ff4d 	bl	8000b0c <__aeabi_dcmplt>
 801cc72:	e7b2      	b.n	801cbda <_strtod_l+0xb12>
 801cc74:	2300      	movs	r3, #0
 801cc76:	930a      	str	r3, [sp, #40]	; 0x28
 801cc78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cc7c:	6013      	str	r3, [r2, #0]
 801cc7e:	f7ff ba6b 	b.w	801c158 <_strtod_l+0x90>
 801cc82:	2a65      	cmp	r2, #101	; 0x65
 801cc84:	f43f ab5f 	beq.w	801c346 <_strtod_l+0x27e>
 801cc88:	2a45      	cmp	r2, #69	; 0x45
 801cc8a:	f43f ab5c 	beq.w	801c346 <_strtod_l+0x27e>
 801cc8e:	2301      	movs	r3, #1
 801cc90:	f7ff bb94 	b.w	801c3bc <_strtod_l+0x2f4>
 801cc94:	f3af 8000 	nop.w
 801cc98:	94a03595 	.word	0x94a03595
 801cc9c:	3fdfffff 	.word	0x3fdfffff
 801cca0:	35afe535 	.word	0x35afe535
 801cca4:	3fe00000 	.word	0x3fe00000
 801cca8:	ffc00000 	.word	0xffc00000
 801ccac:	41dfffff 	.word	0x41dfffff
 801ccb0:	94a03595 	.word	0x94a03595
 801ccb4:	3fcfffff 	.word	0x3fcfffff
 801ccb8:	3ff00000 	.word	0x3ff00000
 801ccbc:	7ff00000 	.word	0x7ff00000
 801ccc0:	7fe00000 	.word	0x7fe00000
 801ccc4:	7c9fffff 	.word	0x7c9fffff
 801ccc8:	3fe00000 	.word	0x3fe00000
 801cccc:	bff00000 	.word	0xbff00000
 801ccd0:	7fefffff 	.word	0x7fefffff

0801ccd4 <strtof>:
 801ccd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccd8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801cd88 <strtof+0xb4>
 801ccdc:	4b26      	ldr	r3, [pc, #152]	; (801cd78 <strtof+0xa4>)
 801ccde:	460a      	mov	r2, r1
 801cce0:	ed2d 8b02 	vpush	{d8}
 801cce4:	4601      	mov	r1, r0
 801cce6:	f8d8 0000 	ldr.w	r0, [r8]
 801ccea:	f7ff f9ed 	bl	801c0c8 <_strtod_l>
 801ccee:	ec55 4b10 	vmov	r4, r5, d0
 801ccf2:	ee10 2a10 	vmov	r2, s0
 801ccf6:	ee10 0a10 	vmov	r0, s0
 801ccfa:	462b      	mov	r3, r5
 801ccfc:	4629      	mov	r1, r5
 801ccfe:	f7e3 ff2d 	bl	8000b5c <__aeabi_dcmpun>
 801cd02:	b190      	cbz	r0, 801cd2a <strtof+0x56>
 801cd04:	2d00      	cmp	r5, #0
 801cd06:	481d      	ldr	r0, [pc, #116]	; (801cd7c <strtof+0xa8>)
 801cd08:	da09      	bge.n	801cd1e <strtof+0x4a>
 801cd0a:	f7fe f833 	bl	801ad74 <nanf>
 801cd0e:	eeb1 8a40 	vneg.f32	s16, s0
 801cd12:	eeb0 0a48 	vmov.f32	s0, s16
 801cd16:	ecbd 8b02 	vpop	{d8}
 801cd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd1e:	ecbd 8b02 	vpop	{d8}
 801cd22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd26:	f7fe b825 	b.w	801ad74 <nanf>
 801cd2a:	4620      	mov	r0, r4
 801cd2c:	4629      	mov	r1, r5
 801cd2e:	f7e3 ff4b 	bl	8000bc8 <__aeabi_d2f>
 801cd32:	ee08 0a10 	vmov	s16, r0
 801cd36:	eddf 7a12 	vldr	s15, [pc, #72]	; 801cd80 <strtof+0xac>
 801cd3a:	eeb0 7ac8 	vabs.f32	s14, s16
 801cd3e:	eeb4 7a67 	vcmp.f32	s14, s15
 801cd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd46:	dde4      	ble.n	801cd12 <strtof+0x3e>
 801cd48:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801cd4c:	4b0d      	ldr	r3, [pc, #52]	; (801cd84 <strtof+0xb0>)
 801cd4e:	f04f 32ff 	mov.w	r2, #4294967295
 801cd52:	4620      	mov	r0, r4
 801cd54:	4639      	mov	r1, r7
 801cd56:	f7e3 ff01 	bl	8000b5c <__aeabi_dcmpun>
 801cd5a:	b940      	cbnz	r0, 801cd6e <strtof+0x9a>
 801cd5c:	4b09      	ldr	r3, [pc, #36]	; (801cd84 <strtof+0xb0>)
 801cd5e:	f04f 32ff 	mov.w	r2, #4294967295
 801cd62:	4620      	mov	r0, r4
 801cd64:	4639      	mov	r1, r7
 801cd66:	f7e3 fedb 	bl	8000b20 <__aeabi_dcmple>
 801cd6a:	2800      	cmp	r0, #0
 801cd6c:	d0d1      	beq.n	801cd12 <strtof+0x3e>
 801cd6e:	f8d8 3000 	ldr.w	r3, [r8]
 801cd72:	2222      	movs	r2, #34	; 0x22
 801cd74:	601a      	str	r2, [r3, #0]
 801cd76:	e7cc      	b.n	801cd12 <strtof+0x3e>
 801cd78:	20000074 	.word	0x20000074
 801cd7c:	0801f973 	.word	0x0801f973
 801cd80:	7f7fffff 	.word	0x7f7fffff
 801cd84:	7fefffff 	.word	0x7fefffff
 801cd88:	20000010 	.word	0x20000010

0801cd8c <time>:
 801cd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd8e:	4b0b      	ldr	r3, [pc, #44]	; (801cdbc <time+0x30>)
 801cd90:	2200      	movs	r2, #0
 801cd92:	4669      	mov	r1, sp
 801cd94:	4604      	mov	r4, r0
 801cd96:	6818      	ldr	r0, [r3, #0]
 801cd98:	f000 fca2 	bl	801d6e0 <_gettimeofday_r>
 801cd9c:	2800      	cmp	r0, #0
 801cd9e:	bfbe      	ittt	lt
 801cda0:	f04f 32ff 	movlt.w	r2, #4294967295
 801cda4:	f04f 33ff 	movlt.w	r3, #4294967295
 801cda8:	e9cd 2300 	strdlt	r2, r3, [sp]
 801cdac:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cdb0:	b10c      	cbz	r4, 801cdb6 <time+0x2a>
 801cdb2:	e9c4 0100 	strd	r0, r1, [r4]
 801cdb6:	b004      	add	sp, #16
 801cdb8:	bd10      	pop	{r4, pc}
 801cdba:	bf00      	nop
 801cdbc:	20000010 	.word	0x20000010

0801cdc0 <__swbuf_r>:
 801cdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdc2:	460e      	mov	r6, r1
 801cdc4:	4614      	mov	r4, r2
 801cdc6:	4605      	mov	r5, r0
 801cdc8:	b118      	cbz	r0, 801cdd2 <__swbuf_r+0x12>
 801cdca:	6983      	ldr	r3, [r0, #24]
 801cdcc:	b90b      	cbnz	r3, 801cdd2 <__swbuf_r+0x12>
 801cdce:	f7fe f911 	bl	801aff4 <__sinit>
 801cdd2:	4b21      	ldr	r3, [pc, #132]	; (801ce58 <__swbuf_r+0x98>)
 801cdd4:	429c      	cmp	r4, r3
 801cdd6:	d12b      	bne.n	801ce30 <__swbuf_r+0x70>
 801cdd8:	686c      	ldr	r4, [r5, #4]
 801cdda:	69a3      	ldr	r3, [r4, #24]
 801cddc:	60a3      	str	r3, [r4, #8]
 801cdde:	89a3      	ldrh	r3, [r4, #12]
 801cde0:	071a      	lsls	r2, r3, #28
 801cde2:	d52f      	bpl.n	801ce44 <__swbuf_r+0x84>
 801cde4:	6923      	ldr	r3, [r4, #16]
 801cde6:	b36b      	cbz	r3, 801ce44 <__swbuf_r+0x84>
 801cde8:	6923      	ldr	r3, [r4, #16]
 801cdea:	6820      	ldr	r0, [r4, #0]
 801cdec:	1ac0      	subs	r0, r0, r3
 801cdee:	6963      	ldr	r3, [r4, #20]
 801cdf0:	b2f6      	uxtb	r6, r6
 801cdf2:	4283      	cmp	r3, r0
 801cdf4:	4637      	mov	r7, r6
 801cdf6:	dc04      	bgt.n	801ce02 <__swbuf_r+0x42>
 801cdf8:	4621      	mov	r1, r4
 801cdfa:	4628      	mov	r0, r5
 801cdfc:	f7fe f854 	bl	801aea8 <_fflush_r>
 801ce00:	bb30      	cbnz	r0, 801ce50 <__swbuf_r+0x90>
 801ce02:	68a3      	ldr	r3, [r4, #8]
 801ce04:	3b01      	subs	r3, #1
 801ce06:	60a3      	str	r3, [r4, #8]
 801ce08:	6823      	ldr	r3, [r4, #0]
 801ce0a:	1c5a      	adds	r2, r3, #1
 801ce0c:	6022      	str	r2, [r4, #0]
 801ce0e:	701e      	strb	r6, [r3, #0]
 801ce10:	6963      	ldr	r3, [r4, #20]
 801ce12:	3001      	adds	r0, #1
 801ce14:	4283      	cmp	r3, r0
 801ce16:	d004      	beq.n	801ce22 <__swbuf_r+0x62>
 801ce18:	89a3      	ldrh	r3, [r4, #12]
 801ce1a:	07db      	lsls	r3, r3, #31
 801ce1c:	d506      	bpl.n	801ce2c <__swbuf_r+0x6c>
 801ce1e:	2e0a      	cmp	r6, #10
 801ce20:	d104      	bne.n	801ce2c <__swbuf_r+0x6c>
 801ce22:	4621      	mov	r1, r4
 801ce24:	4628      	mov	r0, r5
 801ce26:	f7fe f83f 	bl	801aea8 <_fflush_r>
 801ce2a:	b988      	cbnz	r0, 801ce50 <__swbuf_r+0x90>
 801ce2c:	4638      	mov	r0, r7
 801ce2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce30:	4b0a      	ldr	r3, [pc, #40]	; (801ce5c <__swbuf_r+0x9c>)
 801ce32:	429c      	cmp	r4, r3
 801ce34:	d101      	bne.n	801ce3a <__swbuf_r+0x7a>
 801ce36:	68ac      	ldr	r4, [r5, #8]
 801ce38:	e7cf      	b.n	801cdda <__swbuf_r+0x1a>
 801ce3a:	4b09      	ldr	r3, [pc, #36]	; (801ce60 <__swbuf_r+0xa0>)
 801ce3c:	429c      	cmp	r4, r3
 801ce3e:	bf08      	it	eq
 801ce40:	68ec      	ldreq	r4, [r5, #12]
 801ce42:	e7ca      	b.n	801cdda <__swbuf_r+0x1a>
 801ce44:	4621      	mov	r1, r4
 801ce46:	4628      	mov	r0, r5
 801ce48:	f000 f82c 	bl	801cea4 <__swsetup_r>
 801ce4c:	2800      	cmp	r0, #0
 801ce4e:	d0cb      	beq.n	801cde8 <__swbuf_r+0x28>
 801ce50:	f04f 37ff 	mov.w	r7, #4294967295
 801ce54:	e7ea      	b.n	801ce2c <__swbuf_r+0x6c>
 801ce56:	bf00      	nop
 801ce58:	0801f854 	.word	0x0801f854
 801ce5c:	0801f874 	.word	0x0801f874
 801ce60:	0801f834 	.word	0x0801f834

0801ce64 <__ascii_wctomb>:
 801ce64:	b149      	cbz	r1, 801ce7a <__ascii_wctomb+0x16>
 801ce66:	2aff      	cmp	r2, #255	; 0xff
 801ce68:	bf85      	ittet	hi
 801ce6a:	238a      	movhi	r3, #138	; 0x8a
 801ce6c:	6003      	strhi	r3, [r0, #0]
 801ce6e:	700a      	strbls	r2, [r1, #0]
 801ce70:	f04f 30ff 	movhi.w	r0, #4294967295
 801ce74:	bf98      	it	ls
 801ce76:	2001      	movls	r0, #1
 801ce78:	4770      	bx	lr
 801ce7a:	4608      	mov	r0, r1
 801ce7c:	4770      	bx	lr
	...

0801ce80 <_write_r>:
 801ce80:	b538      	push	{r3, r4, r5, lr}
 801ce82:	4d07      	ldr	r5, [pc, #28]	; (801cea0 <_write_r+0x20>)
 801ce84:	4604      	mov	r4, r0
 801ce86:	4608      	mov	r0, r1
 801ce88:	4611      	mov	r1, r2
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	602a      	str	r2, [r5, #0]
 801ce8e:	461a      	mov	r2, r3
 801ce90:	f7e5 fcab 	bl	80027ea <_write>
 801ce94:	1c43      	adds	r3, r0, #1
 801ce96:	d102      	bne.n	801ce9e <_write_r+0x1e>
 801ce98:	682b      	ldr	r3, [r5, #0]
 801ce9a:	b103      	cbz	r3, 801ce9e <_write_r+0x1e>
 801ce9c:	6023      	str	r3, [r4, #0]
 801ce9e:	bd38      	pop	{r3, r4, r5, pc}
 801cea0:	20005510 	.word	0x20005510

0801cea4 <__swsetup_r>:
 801cea4:	4b32      	ldr	r3, [pc, #200]	; (801cf70 <__swsetup_r+0xcc>)
 801cea6:	b570      	push	{r4, r5, r6, lr}
 801cea8:	681d      	ldr	r5, [r3, #0]
 801ceaa:	4606      	mov	r6, r0
 801ceac:	460c      	mov	r4, r1
 801ceae:	b125      	cbz	r5, 801ceba <__swsetup_r+0x16>
 801ceb0:	69ab      	ldr	r3, [r5, #24]
 801ceb2:	b913      	cbnz	r3, 801ceba <__swsetup_r+0x16>
 801ceb4:	4628      	mov	r0, r5
 801ceb6:	f7fe f89d 	bl	801aff4 <__sinit>
 801ceba:	4b2e      	ldr	r3, [pc, #184]	; (801cf74 <__swsetup_r+0xd0>)
 801cebc:	429c      	cmp	r4, r3
 801cebe:	d10f      	bne.n	801cee0 <__swsetup_r+0x3c>
 801cec0:	686c      	ldr	r4, [r5, #4]
 801cec2:	89a3      	ldrh	r3, [r4, #12]
 801cec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cec8:	0719      	lsls	r1, r3, #28
 801ceca:	d42c      	bmi.n	801cf26 <__swsetup_r+0x82>
 801cecc:	06dd      	lsls	r5, r3, #27
 801cece:	d411      	bmi.n	801cef4 <__swsetup_r+0x50>
 801ced0:	2309      	movs	r3, #9
 801ced2:	6033      	str	r3, [r6, #0]
 801ced4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ced8:	81a3      	strh	r3, [r4, #12]
 801ceda:	f04f 30ff 	mov.w	r0, #4294967295
 801cede:	e03e      	b.n	801cf5e <__swsetup_r+0xba>
 801cee0:	4b25      	ldr	r3, [pc, #148]	; (801cf78 <__swsetup_r+0xd4>)
 801cee2:	429c      	cmp	r4, r3
 801cee4:	d101      	bne.n	801ceea <__swsetup_r+0x46>
 801cee6:	68ac      	ldr	r4, [r5, #8]
 801cee8:	e7eb      	b.n	801cec2 <__swsetup_r+0x1e>
 801ceea:	4b24      	ldr	r3, [pc, #144]	; (801cf7c <__swsetup_r+0xd8>)
 801ceec:	429c      	cmp	r4, r3
 801ceee:	bf08      	it	eq
 801cef0:	68ec      	ldreq	r4, [r5, #12]
 801cef2:	e7e6      	b.n	801cec2 <__swsetup_r+0x1e>
 801cef4:	0758      	lsls	r0, r3, #29
 801cef6:	d512      	bpl.n	801cf1e <__swsetup_r+0x7a>
 801cef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cefa:	b141      	cbz	r1, 801cf0e <__swsetup_r+0x6a>
 801cefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cf00:	4299      	cmp	r1, r3
 801cf02:	d002      	beq.n	801cf0a <__swsetup_r+0x66>
 801cf04:	4630      	mov	r0, r6
 801cf06:	f7fe fb19 	bl	801b53c <_free_r>
 801cf0a:	2300      	movs	r3, #0
 801cf0c:	6363      	str	r3, [r4, #52]	; 0x34
 801cf0e:	89a3      	ldrh	r3, [r4, #12]
 801cf10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cf14:	81a3      	strh	r3, [r4, #12]
 801cf16:	2300      	movs	r3, #0
 801cf18:	6063      	str	r3, [r4, #4]
 801cf1a:	6923      	ldr	r3, [r4, #16]
 801cf1c:	6023      	str	r3, [r4, #0]
 801cf1e:	89a3      	ldrh	r3, [r4, #12]
 801cf20:	f043 0308 	orr.w	r3, r3, #8
 801cf24:	81a3      	strh	r3, [r4, #12]
 801cf26:	6923      	ldr	r3, [r4, #16]
 801cf28:	b94b      	cbnz	r3, 801cf3e <__swsetup_r+0x9a>
 801cf2a:	89a3      	ldrh	r3, [r4, #12]
 801cf2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cf30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf34:	d003      	beq.n	801cf3e <__swsetup_r+0x9a>
 801cf36:	4621      	mov	r1, r4
 801cf38:	4630      	mov	r0, r6
 801cf3a:	f7fe fa77 	bl	801b42c <__smakebuf_r>
 801cf3e:	89a0      	ldrh	r0, [r4, #12]
 801cf40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cf44:	f010 0301 	ands.w	r3, r0, #1
 801cf48:	d00a      	beq.n	801cf60 <__swsetup_r+0xbc>
 801cf4a:	2300      	movs	r3, #0
 801cf4c:	60a3      	str	r3, [r4, #8]
 801cf4e:	6963      	ldr	r3, [r4, #20]
 801cf50:	425b      	negs	r3, r3
 801cf52:	61a3      	str	r3, [r4, #24]
 801cf54:	6923      	ldr	r3, [r4, #16]
 801cf56:	b943      	cbnz	r3, 801cf6a <__swsetup_r+0xc6>
 801cf58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cf5c:	d1ba      	bne.n	801ced4 <__swsetup_r+0x30>
 801cf5e:	bd70      	pop	{r4, r5, r6, pc}
 801cf60:	0781      	lsls	r1, r0, #30
 801cf62:	bf58      	it	pl
 801cf64:	6963      	ldrpl	r3, [r4, #20]
 801cf66:	60a3      	str	r3, [r4, #8]
 801cf68:	e7f4      	b.n	801cf54 <__swsetup_r+0xb0>
 801cf6a:	2000      	movs	r0, #0
 801cf6c:	e7f7      	b.n	801cf5e <__swsetup_r+0xba>
 801cf6e:	bf00      	nop
 801cf70:	20000010 	.word	0x20000010
 801cf74:	0801f854 	.word	0x0801f854
 801cf78:	0801f874 	.word	0x0801f874
 801cf7c:	0801f834 	.word	0x0801f834

0801cf80 <__assert_func>:
 801cf80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cf82:	4614      	mov	r4, r2
 801cf84:	461a      	mov	r2, r3
 801cf86:	4b09      	ldr	r3, [pc, #36]	; (801cfac <__assert_func+0x2c>)
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	4605      	mov	r5, r0
 801cf8c:	68d8      	ldr	r0, [r3, #12]
 801cf8e:	b14c      	cbz	r4, 801cfa4 <__assert_func+0x24>
 801cf90:	4b07      	ldr	r3, [pc, #28]	; (801cfb0 <__assert_func+0x30>)
 801cf92:	9100      	str	r1, [sp, #0]
 801cf94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cf98:	4906      	ldr	r1, [pc, #24]	; (801cfb4 <__assert_func+0x34>)
 801cf9a:	462b      	mov	r3, r5
 801cf9c:	f7fe f8a8 	bl	801b0f0 <fiprintf>
 801cfa0:	f7fd feee 	bl	801ad80 <abort>
 801cfa4:	4b04      	ldr	r3, [pc, #16]	; (801cfb8 <__assert_func+0x38>)
 801cfa6:	461c      	mov	r4, r3
 801cfa8:	e7f3      	b.n	801cf92 <__assert_func+0x12>
 801cfaa:	bf00      	nop
 801cfac:	20000010 	.word	0x20000010
 801cfb0:	0801f938 	.word	0x0801f938
 801cfb4:	0801f945 	.word	0x0801f945
 801cfb8:	0801f973 	.word	0x0801f973

0801cfbc <_close_r>:
 801cfbc:	b538      	push	{r3, r4, r5, lr}
 801cfbe:	4d06      	ldr	r5, [pc, #24]	; (801cfd8 <_close_r+0x1c>)
 801cfc0:	2300      	movs	r3, #0
 801cfc2:	4604      	mov	r4, r0
 801cfc4:	4608      	mov	r0, r1
 801cfc6:	602b      	str	r3, [r5, #0]
 801cfc8:	f7e5 fc2b 	bl	8002822 <_close>
 801cfcc:	1c43      	adds	r3, r0, #1
 801cfce:	d102      	bne.n	801cfd6 <_close_r+0x1a>
 801cfd0:	682b      	ldr	r3, [r5, #0]
 801cfd2:	b103      	cbz	r3, 801cfd6 <_close_r+0x1a>
 801cfd4:	6023      	str	r3, [r4, #0]
 801cfd6:	bd38      	pop	{r3, r4, r5, pc}
 801cfd8:	20005510 	.word	0x20005510

0801cfdc <_fstat_r>:
 801cfdc:	b538      	push	{r3, r4, r5, lr}
 801cfde:	4d07      	ldr	r5, [pc, #28]	; (801cffc <_fstat_r+0x20>)
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	4604      	mov	r4, r0
 801cfe4:	4608      	mov	r0, r1
 801cfe6:	4611      	mov	r1, r2
 801cfe8:	602b      	str	r3, [r5, #0]
 801cfea:	f7e5 fc26 	bl	800283a <_fstat>
 801cfee:	1c43      	adds	r3, r0, #1
 801cff0:	d102      	bne.n	801cff8 <_fstat_r+0x1c>
 801cff2:	682b      	ldr	r3, [r5, #0]
 801cff4:	b103      	cbz	r3, 801cff8 <_fstat_r+0x1c>
 801cff6:	6023      	str	r3, [r4, #0]
 801cff8:	bd38      	pop	{r3, r4, r5, pc}
 801cffa:	bf00      	nop
 801cffc:	20005510 	.word	0x20005510

0801d000 <rshift>:
 801d000:	6903      	ldr	r3, [r0, #16]
 801d002:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d00a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d00e:	f100 0414 	add.w	r4, r0, #20
 801d012:	dd45      	ble.n	801d0a0 <rshift+0xa0>
 801d014:	f011 011f 	ands.w	r1, r1, #31
 801d018:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d01c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d020:	d10c      	bne.n	801d03c <rshift+0x3c>
 801d022:	f100 0710 	add.w	r7, r0, #16
 801d026:	4629      	mov	r1, r5
 801d028:	42b1      	cmp	r1, r6
 801d02a:	d334      	bcc.n	801d096 <rshift+0x96>
 801d02c:	1a9b      	subs	r3, r3, r2
 801d02e:	009b      	lsls	r3, r3, #2
 801d030:	1eea      	subs	r2, r5, #3
 801d032:	4296      	cmp	r6, r2
 801d034:	bf38      	it	cc
 801d036:	2300      	movcc	r3, #0
 801d038:	4423      	add	r3, r4
 801d03a:	e015      	b.n	801d068 <rshift+0x68>
 801d03c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d040:	f1c1 0820 	rsb	r8, r1, #32
 801d044:	40cf      	lsrs	r7, r1
 801d046:	f105 0e04 	add.w	lr, r5, #4
 801d04a:	46a1      	mov	r9, r4
 801d04c:	4576      	cmp	r6, lr
 801d04e:	46f4      	mov	ip, lr
 801d050:	d815      	bhi.n	801d07e <rshift+0x7e>
 801d052:	1a9a      	subs	r2, r3, r2
 801d054:	0092      	lsls	r2, r2, #2
 801d056:	3a04      	subs	r2, #4
 801d058:	3501      	adds	r5, #1
 801d05a:	42ae      	cmp	r6, r5
 801d05c:	bf38      	it	cc
 801d05e:	2200      	movcc	r2, #0
 801d060:	18a3      	adds	r3, r4, r2
 801d062:	50a7      	str	r7, [r4, r2]
 801d064:	b107      	cbz	r7, 801d068 <rshift+0x68>
 801d066:	3304      	adds	r3, #4
 801d068:	1b1a      	subs	r2, r3, r4
 801d06a:	42a3      	cmp	r3, r4
 801d06c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d070:	bf08      	it	eq
 801d072:	2300      	moveq	r3, #0
 801d074:	6102      	str	r2, [r0, #16]
 801d076:	bf08      	it	eq
 801d078:	6143      	streq	r3, [r0, #20]
 801d07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d07e:	f8dc c000 	ldr.w	ip, [ip]
 801d082:	fa0c fc08 	lsl.w	ip, ip, r8
 801d086:	ea4c 0707 	orr.w	r7, ip, r7
 801d08a:	f849 7b04 	str.w	r7, [r9], #4
 801d08e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d092:	40cf      	lsrs	r7, r1
 801d094:	e7da      	b.n	801d04c <rshift+0x4c>
 801d096:	f851 cb04 	ldr.w	ip, [r1], #4
 801d09a:	f847 cf04 	str.w	ip, [r7, #4]!
 801d09e:	e7c3      	b.n	801d028 <rshift+0x28>
 801d0a0:	4623      	mov	r3, r4
 801d0a2:	e7e1      	b.n	801d068 <rshift+0x68>

0801d0a4 <__hexdig_fun>:
 801d0a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d0a8:	2b09      	cmp	r3, #9
 801d0aa:	d802      	bhi.n	801d0b2 <__hexdig_fun+0xe>
 801d0ac:	3820      	subs	r0, #32
 801d0ae:	b2c0      	uxtb	r0, r0
 801d0b0:	4770      	bx	lr
 801d0b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d0b6:	2b05      	cmp	r3, #5
 801d0b8:	d801      	bhi.n	801d0be <__hexdig_fun+0x1a>
 801d0ba:	3847      	subs	r0, #71	; 0x47
 801d0bc:	e7f7      	b.n	801d0ae <__hexdig_fun+0xa>
 801d0be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d0c2:	2b05      	cmp	r3, #5
 801d0c4:	d801      	bhi.n	801d0ca <__hexdig_fun+0x26>
 801d0c6:	3827      	subs	r0, #39	; 0x27
 801d0c8:	e7f1      	b.n	801d0ae <__hexdig_fun+0xa>
 801d0ca:	2000      	movs	r0, #0
 801d0cc:	4770      	bx	lr
	...

0801d0d0 <__gethex>:
 801d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d4:	ed2d 8b02 	vpush	{d8}
 801d0d8:	b089      	sub	sp, #36	; 0x24
 801d0da:	ee08 0a10 	vmov	s16, r0
 801d0de:	9304      	str	r3, [sp, #16]
 801d0e0:	4bb4      	ldr	r3, [pc, #720]	; (801d3b4 <__gethex+0x2e4>)
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	9301      	str	r3, [sp, #4]
 801d0e6:	4618      	mov	r0, r3
 801d0e8:	468b      	mov	fp, r1
 801d0ea:	4690      	mov	r8, r2
 801d0ec:	f7e3 f8d8 	bl	80002a0 <strlen>
 801d0f0:	9b01      	ldr	r3, [sp, #4]
 801d0f2:	f8db 2000 	ldr.w	r2, [fp]
 801d0f6:	4403      	add	r3, r0
 801d0f8:	4682      	mov	sl, r0
 801d0fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d0fe:	9305      	str	r3, [sp, #20]
 801d100:	1c93      	adds	r3, r2, #2
 801d102:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d106:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d10a:	32fe      	adds	r2, #254	; 0xfe
 801d10c:	18d1      	adds	r1, r2, r3
 801d10e:	461f      	mov	r7, r3
 801d110:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d114:	9100      	str	r1, [sp, #0]
 801d116:	2830      	cmp	r0, #48	; 0x30
 801d118:	d0f8      	beq.n	801d10c <__gethex+0x3c>
 801d11a:	f7ff ffc3 	bl	801d0a4 <__hexdig_fun>
 801d11e:	4604      	mov	r4, r0
 801d120:	2800      	cmp	r0, #0
 801d122:	d13a      	bne.n	801d19a <__gethex+0xca>
 801d124:	9901      	ldr	r1, [sp, #4]
 801d126:	4652      	mov	r2, sl
 801d128:	4638      	mov	r0, r7
 801d12a:	f7fe ff71 	bl	801c010 <strncmp>
 801d12e:	4605      	mov	r5, r0
 801d130:	2800      	cmp	r0, #0
 801d132:	d168      	bne.n	801d206 <__gethex+0x136>
 801d134:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d138:	eb07 060a 	add.w	r6, r7, sl
 801d13c:	f7ff ffb2 	bl	801d0a4 <__hexdig_fun>
 801d140:	2800      	cmp	r0, #0
 801d142:	d062      	beq.n	801d20a <__gethex+0x13a>
 801d144:	4633      	mov	r3, r6
 801d146:	7818      	ldrb	r0, [r3, #0]
 801d148:	2830      	cmp	r0, #48	; 0x30
 801d14a:	461f      	mov	r7, r3
 801d14c:	f103 0301 	add.w	r3, r3, #1
 801d150:	d0f9      	beq.n	801d146 <__gethex+0x76>
 801d152:	f7ff ffa7 	bl	801d0a4 <__hexdig_fun>
 801d156:	2301      	movs	r3, #1
 801d158:	fab0 f480 	clz	r4, r0
 801d15c:	0964      	lsrs	r4, r4, #5
 801d15e:	4635      	mov	r5, r6
 801d160:	9300      	str	r3, [sp, #0]
 801d162:	463a      	mov	r2, r7
 801d164:	4616      	mov	r6, r2
 801d166:	3201      	adds	r2, #1
 801d168:	7830      	ldrb	r0, [r6, #0]
 801d16a:	f7ff ff9b 	bl	801d0a4 <__hexdig_fun>
 801d16e:	2800      	cmp	r0, #0
 801d170:	d1f8      	bne.n	801d164 <__gethex+0x94>
 801d172:	9901      	ldr	r1, [sp, #4]
 801d174:	4652      	mov	r2, sl
 801d176:	4630      	mov	r0, r6
 801d178:	f7fe ff4a 	bl	801c010 <strncmp>
 801d17c:	b980      	cbnz	r0, 801d1a0 <__gethex+0xd0>
 801d17e:	b94d      	cbnz	r5, 801d194 <__gethex+0xc4>
 801d180:	eb06 050a 	add.w	r5, r6, sl
 801d184:	462a      	mov	r2, r5
 801d186:	4616      	mov	r6, r2
 801d188:	3201      	adds	r2, #1
 801d18a:	7830      	ldrb	r0, [r6, #0]
 801d18c:	f7ff ff8a 	bl	801d0a4 <__hexdig_fun>
 801d190:	2800      	cmp	r0, #0
 801d192:	d1f8      	bne.n	801d186 <__gethex+0xb6>
 801d194:	1bad      	subs	r5, r5, r6
 801d196:	00ad      	lsls	r5, r5, #2
 801d198:	e004      	b.n	801d1a4 <__gethex+0xd4>
 801d19a:	2400      	movs	r4, #0
 801d19c:	4625      	mov	r5, r4
 801d19e:	e7e0      	b.n	801d162 <__gethex+0x92>
 801d1a0:	2d00      	cmp	r5, #0
 801d1a2:	d1f7      	bne.n	801d194 <__gethex+0xc4>
 801d1a4:	7833      	ldrb	r3, [r6, #0]
 801d1a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d1aa:	2b50      	cmp	r3, #80	; 0x50
 801d1ac:	d13b      	bne.n	801d226 <__gethex+0x156>
 801d1ae:	7873      	ldrb	r3, [r6, #1]
 801d1b0:	2b2b      	cmp	r3, #43	; 0x2b
 801d1b2:	d02c      	beq.n	801d20e <__gethex+0x13e>
 801d1b4:	2b2d      	cmp	r3, #45	; 0x2d
 801d1b6:	d02e      	beq.n	801d216 <__gethex+0x146>
 801d1b8:	1c71      	adds	r1, r6, #1
 801d1ba:	f04f 0900 	mov.w	r9, #0
 801d1be:	7808      	ldrb	r0, [r1, #0]
 801d1c0:	f7ff ff70 	bl	801d0a4 <__hexdig_fun>
 801d1c4:	1e43      	subs	r3, r0, #1
 801d1c6:	b2db      	uxtb	r3, r3
 801d1c8:	2b18      	cmp	r3, #24
 801d1ca:	d82c      	bhi.n	801d226 <__gethex+0x156>
 801d1cc:	f1a0 0210 	sub.w	r2, r0, #16
 801d1d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d1d4:	f7ff ff66 	bl	801d0a4 <__hexdig_fun>
 801d1d8:	1e43      	subs	r3, r0, #1
 801d1da:	b2db      	uxtb	r3, r3
 801d1dc:	2b18      	cmp	r3, #24
 801d1de:	d91d      	bls.n	801d21c <__gethex+0x14c>
 801d1e0:	f1b9 0f00 	cmp.w	r9, #0
 801d1e4:	d000      	beq.n	801d1e8 <__gethex+0x118>
 801d1e6:	4252      	negs	r2, r2
 801d1e8:	4415      	add	r5, r2
 801d1ea:	f8cb 1000 	str.w	r1, [fp]
 801d1ee:	b1e4      	cbz	r4, 801d22a <__gethex+0x15a>
 801d1f0:	9b00      	ldr	r3, [sp, #0]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	bf14      	ite	ne
 801d1f6:	2700      	movne	r7, #0
 801d1f8:	2706      	moveq	r7, #6
 801d1fa:	4638      	mov	r0, r7
 801d1fc:	b009      	add	sp, #36	; 0x24
 801d1fe:	ecbd 8b02 	vpop	{d8}
 801d202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d206:	463e      	mov	r6, r7
 801d208:	4625      	mov	r5, r4
 801d20a:	2401      	movs	r4, #1
 801d20c:	e7ca      	b.n	801d1a4 <__gethex+0xd4>
 801d20e:	f04f 0900 	mov.w	r9, #0
 801d212:	1cb1      	adds	r1, r6, #2
 801d214:	e7d3      	b.n	801d1be <__gethex+0xee>
 801d216:	f04f 0901 	mov.w	r9, #1
 801d21a:	e7fa      	b.n	801d212 <__gethex+0x142>
 801d21c:	230a      	movs	r3, #10
 801d21e:	fb03 0202 	mla	r2, r3, r2, r0
 801d222:	3a10      	subs	r2, #16
 801d224:	e7d4      	b.n	801d1d0 <__gethex+0x100>
 801d226:	4631      	mov	r1, r6
 801d228:	e7df      	b.n	801d1ea <__gethex+0x11a>
 801d22a:	1bf3      	subs	r3, r6, r7
 801d22c:	3b01      	subs	r3, #1
 801d22e:	4621      	mov	r1, r4
 801d230:	2b07      	cmp	r3, #7
 801d232:	dc0b      	bgt.n	801d24c <__gethex+0x17c>
 801d234:	ee18 0a10 	vmov	r0, s16
 801d238:	f000 faac 	bl	801d794 <_Balloc>
 801d23c:	4604      	mov	r4, r0
 801d23e:	b940      	cbnz	r0, 801d252 <__gethex+0x182>
 801d240:	4b5d      	ldr	r3, [pc, #372]	; (801d3b8 <__gethex+0x2e8>)
 801d242:	4602      	mov	r2, r0
 801d244:	21de      	movs	r1, #222	; 0xde
 801d246:	485d      	ldr	r0, [pc, #372]	; (801d3bc <__gethex+0x2ec>)
 801d248:	f7ff fe9a 	bl	801cf80 <__assert_func>
 801d24c:	3101      	adds	r1, #1
 801d24e:	105b      	asrs	r3, r3, #1
 801d250:	e7ee      	b.n	801d230 <__gethex+0x160>
 801d252:	f100 0914 	add.w	r9, r0, #20
 801d256:	f04f 0b00 	mov.w	fp, #0
 801d25a:	f1ca 0301 	rsb	r3, sl, #1
 801d25e:	f8cd 9008 	str.w	r9, [sp, #8]
 801d262:	f8cd b000 	str.w	fp, [sp]
 801d266:	9306      	str	r3, [sp, #24]
 801d268:	42b7      	cmp	r7, r6
 801d26a:	d340      	bcc.n	801d2ee <__gethex+0x21e>
 801d26c:	9802      	ldr	r0, [sp, #8]
 801d26e:	9b00      	ldr	r3, [sp, #0]
 801d270:	f840 3b04 	str.w	r3, [r0], #4
 801d274:	eba0 0009 	sub.w	r0, r0, r9
 801d278:	1080      	asrs	r0, r0, #2
 801d27a:	0146      	lsls	r6, r0, #5
 801d27c:	6120      	str	r0, [r4, #16]
 801d27e:	4618      	mov	r0, r3
 801d280:	f000 fb7a 	bl	801d978 <__hi0bits>
 801d284:	1a30      	subs	r0, r6, r0
 801d286:	f8d8 6000 	ldr.w	r6, [r8]
 801d28a:	42b0      	cmp	r0, r6
 801d28c:	dd63      	ble.n	801d356 <__gethex+0x286>
 801d28e:	1b87      	subs	r7, r0, r6
 801d290:	4639      	mov	r1, r7
 801d292:	4620      	mov	r0, r4
 801d294:	f000 ff1e 	bl	801e0d4 <__any_on>
 801d298:	4682      	mov	sl, r0
 801d29a:	b1a8      	cbz	r0, 801d2c8 <__gethex+0x1f8>
 801d29c:	1e7b      	subs	r3, r7, #1
 801d29e:	1159      	asrs	r1, r3, #5
 801d2a0:	f003 021f 	and.w	r2, r3, #31
 801d2a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d2a8:	f04f 0a01 	mov.w	sl, #1
 801d2ac:	fa0a f202 	lsl.w	r2, sl, r2
 801d2b0:	420a      	tst	r2, r1
 801d2b2:	d009      	beq.n	801d2c8 <__gethex+0x1f8>
 801d2b4:	4553      	cmp	r3, sl
 801d2b6:	dd05      	ble.n	801d2c4 <__gethex+0x1f4>
 801d2b8:	1eb9      	subs	r1, r7, #2
 801d2ba:	4620      	mov	r0, r4
 801d2bc:	f000 ff0a 	bl	801e0d4 <__any_on>
 801d2c0:	2800      	cmp	r0, #0
 801d2c2:	d145      	bne.n	801d350 <__gethex+0x280>
 801d2c4:	f04f 0a02 	mov.w	sl, #2
 801d2c8:	4639      	mov	r1, r7
 801d2ca:	4620      	mov	r0, r4
 801d2cc:	f7ff fe98 	bl	801d000 <rshift>
 801d2d0:	443d      	add	r5, r7
 801d2d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d2d6:	42ab      	cmp	r3, r5
 801d2d8:	da4c      	bge.n	801d374 <__gethex+0x2a4>
 801d2da:	ee18 0a10 	vmov	r0, s16
 801d2de:	4621      	mov	r1, r4
 801d2e0:	f000 fa98 	bl	801d814 <_Bfree>
 801d2e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d2e6:	2300      	movs	r3, #0
 801d2e8:	6013      	str	r3, [r2, #0]
 801d2ea:	27a3      	movs	r7, #163	; 0xa3
 801d2ec:	e785      	b.n	801d1fa <__gethex+0x12a>
 801d2ee:	1e73      	subs	r3, r6, #1
 801d2f0:	9a05      	ldr	r2, [sp, #20]
 801d2f2:	9303      	str	r3, [sp, #12]
 801d2f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d2f8:	4293      	cmp	r3, r2
 801d2fa:	d019      	beq.n	801d330 <__gethex+0x260>
 801d2fc:	f1bb 0f20 	cmp.w	fp, #32
 801d300:	d107      	bne.n	801d312 <__gethex+0x242>
 801d302:	9b02      	ldr	r3, [sp, #8]
 801d304:	9a00      	ldr	r2, [sp, #0]
 801d306:	f843 2b04 	str.w	r2, [r3], #4
 801d30a:	9302      	str	r3, [sp, #8]
 801d30c:	2300      	movs	r3, #0
 801d30e:	9300      	str	r3, [sp, #0]
 801d310:	469b      	mov	fp, r3
 801d312:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d316:	f7ff fec5 	bl	801d0a4 <__hexdig_fun>
 801d31a:	9b00      	ldr	r3, [sp, #0]
 801d31c:	f000 000f 	and.w	r0, r0, #15
 801d320:	fa00 f00b 	lsl.w	r0, r0, fp
 801d324:	4303      	orrs	r3, r0
 801d326:	9300      	str	r3, [sp, #0]
 801d328:	f10b 0b04 	add.w	fp, fp, #4
 801d32c:	9b03      	ldr	r3, [sp, #12]
 801d32e:	e00d      	b.n	801d34c <__gethex+0x27c>
 801d330:	9b03      	ldr	r3, [sp, #12]
 801d332:	9a06      	ldr	r2, [sp, #24]
 801d334:	4413      	add	r3, r2
 801d336:	42bb      	cmp	r3, r7
 801d338:	d3e0      	bcc.n	801d2fc <__gethex+0x22c>
 801d33a:	4618      	mov	r0, r3
 801d33c:	9901      	ldr	r1, [sp, #4]
 801d33e:	9307      	str	r3, [sp, #28]
 801d340:	4652      	mov	r2, sl
 801d342:	f7fe fe65 	bl	801c010 <strncmp>
 801d346:	9b07      	ldr	r3, [sp, #28]
 801d348:	2800      	cmp	r0, #0
 801d34a:	d1d7      	bne.n	801d2fc <__gethex+0x22c>
 801d34c:	461e      	mov	r6, r3
 801d34e:	e78b      	b.n	801d268 <__gethex+0x198>
 801d350:	f04f 0a03 	mov.w	sl, #3
 801d354:	e7b8      	b.n	801d2c8 <__gethex+0x1f8>
 801d356:	da0a      	bge.n	801d36e <__gethex+0x29e>
 801d358:	1a37      	subs	r7, r6, r0
 801d35a:	4621      	mov	r1, r4
 801d35c:	ee18 0a10 	vmov	r0, s16
 801d360:	463a      	mov	r2, r7
 801d362:	f000 fc73 	bl	801dc4c <__lshift>
 801d366:	1bed      	subs	r5, r5, r7
 801d368:	4604      	mov	r4, r0
 801d36a:	f100 0914 	add.w	r9, r0, #20
 801d36e:	f04f 0a00 	mov.w	sl, #0
 801d372:	e7ae      	b.n	801d2d2 <__gethex+0x202>
 801d374:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d378:	42a8      	cmp	r0, r5
 801d37a:	dd72      	ble.n	801d462 <__gethex+0x392>
 801d37c:	1b45      	subs	r5, r0, r5
 801d37e:	42ae      	cmp	r6, r5
 801d380:	dc36      	bgt.n	801d3f0 <__gethex+0x320>
 801d382:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d386:	2b02      	cmp	r3, #2
 801d388:	d02a      	beq.n	801d3e0 <__gethex+0x310>
 801d38a:	2b03      	cmp	r3, #3
 801d38c:	d02c      	beq.n	801d3e8 <__gethex+0x318>
 801d38e:	2b01      	cmp	r3, #1
 801d390:	d11c      	bne.n	801d3cc <__gethex+0x2fc>
 801d392:	42ae      	cmp	r6, r5
 801d394:	d11a      	bne.n	801d3cc <__gethex+0x2fc>
 801d396:	2e01      	cmp	r6, #1
 801d398:	d112      	bne.n	801d3c0 <__gethex+0x2f0>
 801d39a:	9a04      	ldr	r2, [sp, #16]
 801d39c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d3a0:	6013      	str	r3, [r2, #0]
 801d3a2:	2301      	movs	r3, #1
 801d3a4:	6123      	str	r3, [r4, #16]
 801d3a6:	f8c9 3000 	str.w	r3, [r9]
 801d3aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d3ac:	2762      	movs	r7, #98	; 0x62
 801d3ae:	601c      	str	r4, [r3, #0]
 801d3b0:	e723      	b.n	801d1fa <__gethex+0x12a>
 801d3b2:	bf00      	nop
 801d3b4:	0801f9e8 	.word	0x0801f9e8
 801d3b8:	0801f974 	.word	0x0801f974
 801d3bc:	0801f985 	.word	0x0801f985
 801d3c0:	1e71      	subs	r1, r6, #1
 801d3c2:	4620      	mov	r0, r4
 801d3c4:	f000 fe86 	bl	801e0d4 <__any_on>
 801d3c8:	2800      	cmp	r0, #0
 801d3ca:	d1e6      	bne.n	801d39a <__gethex+0x2ca>
 801d3cc:	ee18 0a10 	vmov	r0, s16
 801d3d0:	4621      	mov	r1, r4
 801d3d2:	f000 fa1f 	bl	801d814 <_Bfree>
 801d3d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3d8:	2300      	movs	r3, #0
 801d3da:	6013      	str	r3, [r2, #0]
 801d3dc:	2750      	movs	r7, #80	; 0x50
 801d3de:	e70c      	b.n	801d1fa <__gethex+0x12a>
 801d3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d1f2      	bne.n	801d3cc <__gethex+0x2fc>
 801d3e6:	e7d8      	b.n	801d39a <__gethex+0x2ca>
 801d3e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d1d5      	bne.n	801d39a <__gethex+0x2ca>
 801d3ee:	e7ed      	b.n	801d3cc <__gethex+0x2fc>
 801d3f0:	1e6f      	subs	r7, r5, #1
 801d3f2:	f1ba 0f00 	cmp.w	sl, #0
 801d3f6:	d131      	bne.n	801d45c <__gethex+0x38c>
 801d3f8:	b127      	cbz	r7, 801d404 <__gethex+0x334>
 801d3fa:	4639      	mov	r1, r7
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	f000 fe69 	bl	801e0d4 <__any_on>
 801d402:	4682      	mov	sl, r0
 801d404:	117b      	asrs	r3, r7, #5
 801d406:	2101      	movs	r1, #1
 801d408:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d40c:	f007 071f 	and.w	r7, r7, #31
 801d410:	fa01 f707 	lsl.w	r7, r1, r7
 801d414:	421f      	tst	r7, r3
 801d416:	4629      	mov	r1, r5
 801d418:	4620      	mov	r0, r4
 801d41a:	bf18      	it	ne
 801d41c:	f04a 0a02 	orrne.w	sl, sl, #2
 801d420:	1b76      	subs	r6, r6, r5
 801d422:	f7ff fded 	bl	801d000 <rshift>
 801d426:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d42a:	2702      	movs	r7, #2
 801d42c:	f1ba 0f00 	cmp.w	sl, #0
 801d430:	d048      	beq.n	801d4c4 <__gethex+0x3f4>
 801d432:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d436:	2b02      	cmp	r3, #2
 801d438:	d015      	beq.n	801d466 <__gethex+0x396>
 801d43a:	2b03      	cmp	r3, #3
 801d43c:	d017      	beq.n	801d46e <__gethex+0x39e>
 801d43e:	2b01      	cmp	r3, #1
 801d440:	d109      	bne.n	801d456 <__gethex+0x386>
 801d442:	f01a 0f02 	tst.w	sl, #2
 801d446:	d006      	beq.n	801d456 <__gethex+0x386>
 801d448:	f8d9 0000 	ldr.w	r0, [r9]
 801d44c:	ea4a 0a00 	orr.w	sl, sl, r0
 801d450:	f01a 0f01 	tst.w	sl, #1
 801d454:	d10e      	bne.n	801d474 <__gethex+0x3a4>
 801d456:	f047 0710 	orr.w	r7, r7, #16
 801d45a:	e033      	b.n	801d4c4 <__gethex+0x3f4>
 801d45c:	f04f 0a01 	mov.w	sl, #1
 801d460:	e7d0      	b.n	801d404 <__gethex+0x334>
 801d462:	2701      	movs	r7, #1
 801d464:	e7e2      	b.n	801d42c <__gethex+0x35c>
 801d466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d468:	f1c3 0301 	rsb	r3, r3, #1
 801d46c:	9315      	str	r3, [sp, #84]	; 0x54
 801d46e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d470:	2b00      	cmp	r3, #0
 801d472:	d0f0      	beq.n	801d456 <__gethex+0x386>
 801d474:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d478:	f104 0314 	add.w	r3, r4, #20
 801d47c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d480:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d484:	f04f 0c00 	mov.w	ip, #0
 801d488:	4618      	mov	r0, r3
 801d48a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d48e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d492:	d01c      	beq.n	801d4ce <__gethex+0x3fe>
 801d494:	3201      	adds	r2, #1
 801d496:	6002      	str	r2, [r0, #0]
 801d498:	2f02      	cmp	r7, #2
 801d49a:	f104 0314 	add.w	r3, r4, #20
 801d49e:	d13f      	bne.n	801d520 <__gethex+0x450>
 801d4a0:	f8d8 2000 	ldr.w	r2, [r8]
 801d4a4:	3a01      	subs	r2, #1
 801d4a6:	42b2      	cmp	r2, r6
 801d4a8:	d10a      	bne.n	801d4c0 <__gethex+0x3f0>
 801d4aa:	1171      	asrs	r1, r6, #5
 801d4ac:	2201      	movs	r2, #1
 801d4ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d4b2:	f006 061f 	and.w	r6, r6, #31
 801d4b6:	fa02 f606 	lsl.w	r6, r2, r6
 801d4ba:	421e      	tst	r6, r3
 801d4bc:	bf18      	it	ne
 801d4be:	4617      	movne	r7, r2
 801d4c0:	f047 0720 	orr.w	r7, r7, #32
 801d4c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d4c6:	601c      	str	r4, [r3, #0]
 801d4c8:	9b04      	ldr	r3, [sp, #16]
 801d4ca:	601d      	str	r5, [r3, #0]
 801d4cc:	e695      	b.n	801d1fa <__gethex+0x12a>
 801d4ce:	4299      	cmp	r1, r3
 801d4d0:	f843 cc04 	str.w	ip, [r3, #-4]
 801d4d4:	d8d8      	bhi.n	801d488 <__gethex+0x3b8>
 801d4d6:	68a3      	ldr	r3, [r4, #8]
 801d4d8:	459b      	cmp	fp, r3
 801d4da:	db19      	blt.n	801d510 <__gethex+0x440>
 801d4dc:	6861      	ldr	r1, [r4, #4]
 801d4de:	ee18 0a10 	vmov	r0, s16
 801d4e2:	3101      	adds	r1, #1
 801d4e4:	f000 f956 	bl	801d794 <_Balloc>
 801d4e8:	4681      	mov	r9, r0
 801d4ea:	b918      	cbnz	r0, 801d4f4 <__gethex+0x424>
 801d4ec:	4b1a      	ldr	r3, [pc, #104]	; (801d558 <__gethex+0x488>)
 801d4ee:	4602      	mov	r2, r0
 801d4f0:	2184      	movs	r1, #132	; 0x84
 801d4f2:	e6a8      	b.n	801d246 <__gethex+0x176>
 801d4f4:	6922      	ldr	r2, [r4, #16]
 801d4f6:	3202      	adds	r2, #2
 801d4f8:	f104 010c 	add.w	r1, r4, #12
 801d4fc:	0092      	lsls	r2, r2, #2
 801d4fe:	300c      	adds	r0, #12
 801d500:	f7fe f806 	bl	801b510 <memcpy>
 801d504:	4621      	mov	r1, r4
 801d506:	ee18 0a10 	vmov	r0, s16
 801d50a:	f000 f983 	bl	801d814 <_Bfree>
 801d50e:	464c      	mov	r4, r9
 801d510:	6923      	ldr	r3, [r4, #16]
 801d512:	1c5a      	adds	r2, r3, #1
 801d514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d518:	6122      	str	r2, [r4, #16]
 801d51a:	2201      	movs	r2, #1
 801d51c:	615a      	str	r2, [r3, #20]
 801d51e:	e7bb      	b.n	801d498 <__gethex+0x3c8>
 801d520:	6922      	ldr	r2, [r4, #16]
 801d522:	455a      	cmp	r2, fp
 801d524:	dd0b      	ble.n	801d53e <__gethex+0x46e>
 801d526:	2101      	movs	r1, #1
 801d528:	4620      	mov	r0, r4
 801d52a:	f7ff fd69 	bl	801d000 <rshift>
 801d52e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d532:	3501      	adds	r5, #1
 801d534:	42ab      	cmp	r3, r5
 801d536:	f6ff aed0 	blt.w	801d2da <__gethex+0x20a>
 801d53a:	2701      	movs	r7, #1
 801d53c:	e7c0      	b.n	801d4c0 <__gethex+0x3f0>
 801d53e:	f016 061f 	ands.w	r6, r6, #31
 801d542:	d0fa      	beq.n	801d53a <__gethex+0x46a>
 801d544:	4453      	add	r3, sl
 801d546:	f1c6 0620 	rsb	r6, r6, #32
 801d54a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d54e:	f000 fa13 	bl	801d978 <__hi0bits>
 801d552:	42b0      	cmp	r0, r6
 801d554:	dbe7      	blt.n	801d526 <__gethex+0x456>
 801d556:	e7f0      	b.n	801d53a <__gethex+0x46a>
 801d558:	0801f974 	.word	0x0801f974

0801d55c <L_shift>:
 801d55c:	f1c2 0208 	rsb	r2, r2, #8
 801d560:	0092      	lsls	r2, r2, #2
 801d562:	b570      	push	{r4, r5, r6, lr}
 801d564:	f1c2 0620 	rsb	r6, r2, #32
 801d568:	6843      	ldr	r3, [r0, #4]
 801d56a:	6804      	ldr	r4, [r0, #0]
 801d56c:	fa03 f506 	lsl.w	r5, r3, r6
 801d570:	432c      	orrs	r4, r5
 801d572:	40d3      	lsrs	r3, r2
 801d574:	6004      	str	r4, [r0, #0]
 801d576:	f840 3f04 	str.w	r3, [r0, #4]!
 801d57a:	4288      	cmp	r0, r1
 801d57c:	d3f4      	bcc.n	801d568 <L_shift+0xc>
 801d57e:	bd70      	pop	{r4, r5, r6, pc}

0801d580 <__match>:
 801d580:	b530      	push	{r4, r5, lr}
 801d582:	6803      	ldr	r3, [r0, #0]
 801d584:	3301      	adds	r3, #1
 801d586:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d58a:	b914      	cbnz	r4, 801d592 <__match+0x12>
 801d58c:	6003      	str	r3, [r0, #0]
 801d58e:	2001      	movs	r0, #1
 801d590:	bd30      	pop	{r4, r5, pc}
 801d592:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d596:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d59a:	2d19      	cmp	r5, #25
 801d59c:	bf98      	it	ls
 801d59e:	3220      	addls	r2, #32
 801d5a0:	42a2      	cmp	r2, r4
 801d5a2:	d0f0      	beq.n	801d586 <__match+0x6>
 801d5a4:	2000      	movs	r0, #0
 801d5a6:	e7f3      	b.n	801d590 <__match+0x10>

0801d5a8 <__hexnan>:
 801d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ac:	680b      	ldr	r3, [r1, #0]
 801d5ae:	115e      	asrs	r6, r3, #5
 801d5b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d5b4:	f013 031f 	ands.w	r3, r3, #31
 801d5b8:	b087      	sub	sp, #28
 801d5ba:	bf18      	it	ne
 801d5bc:	3604      	addne	r6, #4
 801d5be:	2500      	movs	r5, #0
 801d5c0:	1f37      	subs	r7, r6, #4
 801d5c2:	4690      	mov	r8, r2
 801d5c4:	6802      	ldr	r2, [r0, #0]
 801d5c6:	9301      	str	r3, [sp, #4]
 801d5c8:	4682      	mov	sl, r0
 801d5ca:	f846 5c04 	str.w	r5, [r6, #-4]
 801d5ce:	46b9      	mov	r9, r7
 801d5d0:	463c      	mov	r4, r7
 801d5d2:	9502      	str	r5, [sp, #8]
 801d5d4:	46ab      	mov	fp, r5
 801d5d6:	7851      	ldrb	r1, [r2, #1]
 801d5d8:	1c53      	adds	r3, r2, #1
 801d5da:	9303      	str	r3, [sp, #12]
 801d5dc:	b341      	cbz	r1, 801d630 <__hexnan+0x88>
 801d5de:	4608      	mov	r0, r1
 801d5e0:	9205      	str	r2, [sp, #20]
 801d5e2:	9104      	str	r1, [sp, #16]
 801d5e4:	f7ff fd5e 	bl	801d0a4 <__hexdig_fun>
 801d5e8:	2800      	cmp	r0, #0
 801d5ea:	d14f      	bne.n	801d68c <__hexnan+0xe4>
 801d5ec:	9904      	ldr	r1, [sp, #16]
 801d5ee:	9a05      	ldr	r2, [sp, #20]
 801d5f0:	2920      	cmp	r1, #32
 801d5f2:	d818      	bhi.n	801d626 <__hexnan+0x7e>
 801d5f4:	9b02      	ldr	r3, [sp, #8]
 801d5f6:	459b      	cmp	fp, r3
 801d5f8:	dd13      	ble.n	801d622 <__hexnan+0x7a>
 801d5fa:	454c      	cmp	r4, r9
 801d5fc:	d206      	bcs.n	801d60c <__hexnan+0x64>
 801d5fe:	2d07      	cmp	r5, #7
 801d600:	dc04      	bgt.n	801d60c <__hexnan+0x64>
 801d602:	462a      	mov	r2, r5
 801d604:	4649      	mov	r1, r9
 801d606:	4620      	mov	r0, r4
 801d608:	f7ff ffa8 	bl	801d55c <L_shift>
 801d60c:	4544      	cmp	r4, r8
 801d60e:	d950      	bls.n	801d6b2 <__hexnan+0x10a>
 801d610:	2300      	movs	r3, #0
 801d612:	f1a4 0904 	sub.w	r9, r4, #4
 801d616:	f844 3c04 	str.w	r3, [r4, #-4]
 801d61a:	f8cd b008 	str.w	fp, [sp, #8]
 801d61e:	464c      	mov	r4, r9
 801d620:	461d      	mov	r5, r3
 801d622:	9a03      	ldr	r2, [sp, #12]
 801d624:	e7d7      	b.n	801d5d6 <__hexnan+0x2e>
 801d626:	2929      	cmp	r1, #41	; 0x29
 801d628:	d156      	bne.n	801d6d8 <__hexnan+0x130>
 801d62a:	3202      	adds	r2, #2
 801d62c:	f8ca 2000 	str.w	r2, [sl]
 801d630:	f1bb 0f00 	cmp.w	fp, #0
 801d634:	d050      	beq.n	801d6d8 <__hexnan+0x130>
 801d636:	454c      	cmp	r4, r9
 801d638:	d206      	bcs.n	801d648 <__hexnan+0xa0>
 801d63a:	2d07      	cmp	r5, #7
 801d63c:	dc04      	bgt.n	801d648 <__hexnan+0xa0>
 801d63e:	462a      	mov	r2, r5
 801d640:	4649      	mov	r1, r9
 801d642:	4620      	mov	r0, r4
 801d644:	f7ff ff8a 	bl	801d55c <L_shift>
 801d648:	4544      	cmp	r4, r8
 801d64a:	d934      	bls.n	801d6b6 <__hexnan+0x10e>
 801d64c:	f1a8 0204 	sub.w	r2, r8, #4
 801d650:	4623      	mov	r3, r4
 801d652:	f853 1b04 	ldr.w	r1, [r3], #4
 801d656:	f842 1f04 	str.w	r1, [r2, #4]!
 801d65a:	429f      	cmp	r7, r3
 801d65c:	d2f9      	bcs.n	801d652 <__hexnan+0xaa>
 801d65e:	1b3b      	subs	r3, r7, r4
 801d660:	f023 0303 	bic.w	r3, r3, #3
 801d664:	3304      	adds	r3, #4
 801d666:	3401      	adds	r4, #1
 801d668:	3e03      	subs	r6, #3
 801d66a:	42b4      	cmp	r4, r6
 801d66c:	bf88      	it	hi
 801d66e:	2304      	movhi	r3, #4
 801d670:	4443      	add	r3, r8
 801d672:	2200      	movs	r2, #0
 801d674:	f843 2b04 	str.w	r2, [r3], #4
 801d678:	429f      	cmp	r7, r3
 801d67a:	d2fb      	bcs.n	801d674 <__hexnan+0xcc>
 801d67c:	683b      	ldr	r3, [r7, #0]
 801d67e:	b91b      	cbnz	r3, 801d688 <__hexnan+0xe0>
 801d680:	4547      	cmp	r7, r8
 801d682:	d127      	bne.n	801d6d4 <__hexnan+0x12c>
 801d684:	2301      	movs	r3, #1
 801d686:	603b      	str	r3, [r7, #0]
 801d688:	2005      	movs	r0, #5
 801d68a:	e026      	b.n	801d6da <__hexnan+0x132>
 801d68c:	3501      	adds	r5, #1
 801d68e:	2d08      	cmp	r5, #8
 801d690:	f10b 0b01 	add.w	fp, fp, #1
 801d694:	dd06      	ble.n	801d6a4 <__hexnan+0xfc>
 801d696:	4544      	cmp	r4, r8
 801d698:	d9c3      	bls.n	801d622 <__hexnan+0x7a>
 801d69a:	2300      	movs	r3, #0
 801d69c:	f844 3c04 	str.w	r3, [r4, #-4]
 801d6a0:	2501      	movs	r5, #1
 801d6a2:	3c04      	subs	r4, #4
 801d6a4:	6822      	ldr	r2, [r4, #0]
 801d6a6:	f000 000f 	and.w	r0, r0, #15
 801d6aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d6ae:	6022      	str	r2, [r4, #0]
 801d6b0:	e7b7      	b.n	801d622 <__hexnan+0x7a>
 801d6b2:	2508      	movs	r5, #8
 801d6b4:	e7b5      	b.n	801d622 <__hexnan+0x7a>
 801d6b6:	9b01      	ldr	r3, [sp, #4]
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d0df      	beq.n	801d67c <__hexnan+0xd4>
 801d6bc:	f04f 32ff 	mov.w	r2, #4294967295
 801d6c0:	f1c3 0320 	rsb	r3, r3, #32
 801d6c4:	fa22 f303 	lsr.w	r3, r2, r3
 801d6c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d6cc:	401a      	ands	r2, r3
 801d6ce:	f846 2c04 	str.w	r2, [r6, #-4]
 801d6d2:	e7d3      	b.n	801d67c <__hexnan+0xd4>
 801d6d4:	3f04      	subs	r7, #4
 801d6d6:	e7d1      	b.n	801d67c <__hexnan+0xd4>
 801d6d8:	2004      	movs	r0, #4
 801d6da:	b007      	add	sp, #28
 801d6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6e0 <_gettimeofday_r>:
 801d6e0:	b538      	push	{r3, r4, r5, lr}
 801d6e2:	4d07      	ldr	r5, [pc, #28]	; (801d700 <_gettimeofday_r+0x20>)
 801d6e4:	2300      	movs	r3, #0
 801d6e6:	4604      	mov	r4, r0
 801d6e8:	4608      	mov	r0, r1
 801d6ea:	4611      	mov	r1, r2
 801d6ec:	602b      	str	r3, [r5, #0]
 801d6ee:	f000 fed7 	bl	801e4a0 <_gettimeofday>
 801d6f2:	1c43      	adds	r3, r0, #1
 801d6f4:	d102      	bne.n	801d6fc <_gettimeofday_r+0x1c>
 801d6f6:	682b      	ldr	r3, [r5, #0]
 801d6f8:	b103      	cbz	r3, 801d6fc <_gettimeofday_r+0x1c>
 801d6fa:	6023      	str	r3, [r4, #0]
 801d6fc:	bd38      	pop	{r3, r4, r5, pc}
 801d6fe:	bf00      	nop
 801d700:	20005510 	.word	0x20005510

0801d704 <_isatty_r>:
 801d704:	b538      	push	{r3, r4, r5, lr}
 801d706:	4d06      	ldr	r5, [pc, #24]	; (801d720 <_isatty_r+0x1c>)
 801d708:	2300      	movs	r3, #0
 801d70a:	4604      	mov	r4, r0
 801d70c:	4608      	mov	r0, r1
 801d70e:	602b      	str	r3, [r5, #0]
 801d710:	f7e5 f8a3 	bl	800285a <_isatty>
 801d714:	1c43      	adds	r3, r0, #1
 801d716:	d102      	bne.n	801d71e <_isatty_r+0x1a>
 801d718:	682b      	ldr	r3, [r5, #0]
 801d71a:	b103      	cbz	r3, 801d71e <_isatty_r+0x1a>
 801d71c:	6023      	str	r3, [r4, #0]
 801d71e:	bd38      	pop	{r3, r4, r5, pc}
 801d720:	20005510 	.word	0x20005510

0801d724 <_lseek_r>:
 801d724:	b538      	push	{r3, r4, r5, lr}
 801d726:	4d07      	ldr	r5, [pc, #28]	; (801d744 <_lseek_r+0x20>)
 801d728:	4604      	mov	r4, r0
 801d72a:	4608      	mov	r0, r1
 801d72c:	4611      	mov	r1, r2
 801d72e:	2200      	movs	r2, #0
 801d730:	602a      	str	r2, [r5, #0]
 801d732:	461a      	mov	r2, r3
 801d734:	f7e5 f89c 	bl	8002870 <_lseek>
 801d738:	1c43      	adds	r3, r0, #1
 801d73a:	d102      	bne.n	801d742 <_lseek_r+0x1e>
 801d73c:	682b      	ldr	r3, [r5, #0]
 801d73e:	b103      	cbz	r3, 801d742 <_lseek_r+0x1e>
 801d740:	6023      	str	r3, [r4, #0]
 801d742:	bd38      	pop	{r3, r4, r5, pc}
 801d744:	20005510 	.word	0x20005510

0801d748 <memmove>:
 801d748:	4288      	cmp	r0, r1
 801d74a:	b510      	push	{r4, lr}
 801d74c:	eb01 0402 	add.w	r4, r1, r2
 801d750:	d902      	bls.n	801d758 <memmove+0x10>
 801d752:	4284      	cmp	r4, r0
 801d754:	4623      	mov	r3, r4
 801d756:	d807      	bhi.n	801d768 <memmove+0x20>
 801d758:	1e43      	subs	r3, r0, #1
 801d75a:	42a1      	cmp	r1, r4
 801d75c:	d008      	beq.n	801d770 <memmove+0x28>
 801d75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d762:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d766:	e7f8      	b.n	801d75a <memmove+0x12>
 801d768:	4402      	add	r2, r0
 801d76a:	4601      	mov	r1, r0
 801d76c:	428a      	cmp	r2, r1
 801d76e:	d100      	bne.n	801d772 <memmove+0x2a>
 801d770:	bd10      	pop	{r4, pc}
 801d772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d77a:	e7f7      	b.n	801d76c <memmove+0x24>

0801d77c <__malloc_lock>:
 801d77c:	4801      	ldr	r0, [pc, #4]	; (801d784 <__malloc_lock+0x8>)
 801d77e:	f7fd be2e 	b.w	801b3de <__retarget_lock_acquire_recursive>
 801d782:	bf00      	nop
 801d784:	20005504 	.word	0x20005504

0801d788 <__malloc_unlock>:
 801d788:	4801      	ldr	r0, [pc, #4]	; (801d790 <__malloc_unlock+0x8>)
 801d78a:	f7fd be29 	b.w	801b3e0 <__retarget_lock_release_recursive>
 801d78e:	bf00      	nop
 801d790:	20005504 	.word	0x20005504

0801d794 <_Balloc>:
 801d794:	b570      	push	{r4, r5, r6, lr}
 801d796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d798:	4604      	mov	r4, r0
 801d79a:	460d      	mov	r5, r1
 801d79c:	b976      	cbnz	r6, 801d7bc <_Balloc+0x28>
 801d79e:	2010      	movs	r0, #16
 801d7a0:	f7fd fe84 	bl	801b4ac <malloc>
 801d7a4:	4602      	mov	r2, r0
 801d7a6:	6260      	str	r0, [r4, #36]	; 0x24
 801d7a8:	b920      	cbnz	r0, 801d7b4 <_Balloc+0x20>
 801d7aa:	4b18      	ldr	r3, [pc, #96]	; (801d80c <_Balloc+0x78>)
 801d7ac:	4818      	ldr	r0, [pc, #96]	; (801d810 <_Balloc+0x7c>)
 801d7ae:	2166      	movs	r1, #102	; 0x66
 801d7b0:	f7ff fbe6 	bl	801cf80 <__assert_func>
 801d7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d7b8:	6006      	str	r6, [r0, #0]
 801d7ba:	60c6      	str	r6, [r0, #12]
 801d7bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d7be:	68f3      	ldr	r3, [r6, #12]
 801d7c0:	b183      	cbz	r3, 801d7e4 <_Balloc+0x50>
 801d7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7c4:	68db      	ldr	r3, [r3, #12]
 801d7c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d7ca:	b9b8      	cbnz	r0, 801d7fc <_Balloc+0x68>
 801d7cc:	2101      	movs	r1, #1
 801d7ce:	fa01 f605 	lsl.w	r6, r1, r5
 801d7d2:	1d72      	adds	r2, r6, #5
 801d7d4:	0092      	lsls	r2, r2, #2
 801d7d6:	4620      	mov	r0, r4
 801d7d8:	f000 fc9d 	bl	801e116 <_calloc_r>
 801d7dc:	b160      	cbz	r0, 801d7f8 <_Balloc+0x64>
 801d7de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d7e2:	e00e      	b.n	801d802 <_Balloc+0x6e>
 801d7e4:	2221      	movs	r2, #33	; 0x21
 801d7e6:	2104      	movs	r1, #4
 801d7e8:	4620      	mov	r0, r4
 801d7ea:	f000 fc94 	bl	801e116 <_calloc_r>
 801d7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7f0:	60f0      	str	r0, [r6, #12]
 801d7f2:	68db      	ldr	r3, [r3, #12]
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d1e4      	bne.n	801d7c2 <_Balloc+0x2e>
 801d7f8:	2000      	movs	r0, #0
 801d7fa:	bd70      	pop	{r4, r5, r6, pc}
 801d7fc:	6802      	ldr	r2, [r0, #0]
 801d7fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d802:	2300      	movs	r3, #0
 801d804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d808:	e7f7      	b.n	801d7fa <_Balloc+0x66>
 801d80a:	bf00      	nop
 801d80c:	0801f9f4 	.word	0x0801f9f4
 801d810:	0801fa0b 	.word	0x0801fa0b

0801d814 <_Bfree>:
 801d814:	b570      	push	{r4, r5, r6, lr}
 801d816:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d818:	4605      	mov	r5, r0
 801d81a:	460c      	mov	r4, r1
 801d81c:	b976      	cbnz	r6, 801d83c <_Bfree+0x28>
 801d81e:	2010      	movs	r0, #16
 801d820:	f7fd fe44 	bl	801b4ac <malloc>
 801d824:	4602      	mov	r2, r0
 801d826:	6268      	str	r0, [r5, #36]	; 0x24
 801d828:	b920      	cbnz	r0, 801d834 <_Bfree+0x20>
 801d82a:	4b09      	ldr	r3, [pc, #36]	; (801d850 <_Bfree+0x3c>)
 801d82c:	4809      	ldr	r0, [pc, #36]	; (801d854 <_Bfree+0x40>)
 801d82e:	218a      	movs	r1, #138	; 0x8a
 801d830:	f7ff fba6 	bl	801cf80 <__assert_func>
 801d834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d838:	6006      	str	r6, [r0, #0]
 801d83a:	60c6      	str	r6, [r0, #12]
 801d83c:	b13c      	cbz	r4, 801d84e <_Bfree+0x3a>
 801d83e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d840:	6862      	ldr	r2, [r4, #4]
 801d842:	68db      	ldr	r3, [r3, #12]
 801d844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d848:	6021      	str	r1, [r4, #0]
 801d84a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d84e:	bd70      	pop	{r4, r5, r6, pc}
 801d850:	0801f9f4 	.word	0x0801f9f4
 801d854:	0801fa0b 	.word	0x0801fa0b

0801d858 <__multadd>:
 801d858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d85c:	690d      	ldr	r5, [r1, #16]
 801d85e:	4607      	mov	r7, r0
 801d860:	460c      	mov	r4, r1
 801d862:	461e      	mov	r6, r3
 801d864:	f101 0c14 	add.w	ip, r1, #20
 801d868:	2000      	movs	r0, #0
 801d86a:	f8dc 3000 	ldr.w	r3, [ip]
 801d86e:	b299      	uxth	r1, r3
 801d870:	fb02 6101 	mla	r1, r2, r1, r6
 801d874:	0c1e      	lsrs	r6, r3, #16
 801d876:	0c0b      	lsrs	r3, r1, #16
 801d878:	fb02 3306 	mla	r3, r2, r6, r3
 801d87c:	b289      	uxth	r1, r1
 801d87e:	3001      	adds	r0, #1
 801d880:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d884:	4285      	cmp	r5, r0
 801d886:	f84c 1b04 	str.w	r1, [ip], #4
 801d88a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d88e:	dcec      	bgt.n	801d86a <__multadd+0x12>
 801d890:	b30e      	cbz	r6, 801d8d6 <__multadd+0x7e>
 801d892:	68a3      	ldr	r3, [r4, #8]
 801d894:	42ab      	cmp	r3, r5
 801d896:	dc19      	bgt.n	801d8cc <__multadd+0x74>
 801d898:	6861      	ldr	r1, [r4, #4]
 801d89a:	4638      	mov	r0, r7
 801d89c:	3101      	adds	r1, #1
 801d89e:	f7ff ff79 	bl	801d794 <_Balloc>
 801d8a2:	4680      	mov	r8, r0
 801d8a4:	b928      	cbnz	r0, 801d8b2 <__multadd+0x5a>
 801d8a6:	4602      	mov	r2, r0
 801d8a8:	4b0c      	ldr	r3, [pc, #48]	; (801d8dc <__multadd+0x84>)
 801d8aa:	480d      	ldr	r0, [pc, #52]	; (801d8e0 <__multadd+0x88>)
 801d8ac:	21b5      	movs	r1, #181	; 0xb5
 801d8ae:	f7ff fb67 	bl	801cf80 <__assert_func>
 801d8b2:	6922      	ldr	r2, [r4, #16]
 801d8b4:	3202      	adds	r2, #2
 801d8b6:	f104 010c 	add.w	r1, r4, #12
 801d8ba:	0092      	lsls	r2, r2, #2
 801d8bc:	300c      	adds	r0, #12
 801d8be:	f7fd fe27 	bl	801b510 <memcpy>
 801d8c2:	4621      	mov	r1, r4
 801d8c4:	4638      	mov	r0, r7
 801d8c6:	f7ff ffa5 	bl	801d814 <_Bfree>
 801d8ca:	4644      	mov	r4, r8
 801d8cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d8d0:	3501      	adds	r5, #1
 801d8d2:	615e      	str	r6, [r3, #20]
 801d8d4:	6125      	str	r5, [r4, #16]
 801d8d6:	4620      	mov	r0, r4
 801d8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8dc:	0801f974 	.word	0x0801f974
 801d8e0:	0801fa0b 	.word	0x0801fa0b

0801d8e4 <__s2b>:
 801d8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d8e8:	460c      	mov	r4, r1
 801d8ea:	4615      	mov	r5, r2
 801d8ec:	461f      	mov	r7, r3
 801d8ee:	2209      	movs	r2, #9
 801d8f0:	3308      	adds	r3, #8
 801d8f2:	4606      	mov	r6, r0
 801d8f4:	fb93 f3f2 	sdiv	r3, r3, r2
 801d8f8:	2100      	movs	r1, #0
 801d8fa:	2201      	movs	r2, #1
 801d8fc:	429a      	cmp	r2, r3
 801d8fe:	db09      	blt.n	801d914 <__s2b+0x30>
 801d900:	4630      	mov	r0, r6
 801d902:	f7ff ff47 	bl	801d794 <_Balloc>
 801d906:	b940      	cbnz	r0, 801d91a <__s2b+0x36>
 801d908:	4602      	mov	r2, r0
 801d90a:	4b19      	ldr	r3, [pc, #100]	; (801d970 <__s2b+0x8c>)
 801d90c:	4819      	ldr	r0, [pc, #100]	; (801d974 <__s2b+0x90>)
 801d90e:	21ce      	movs	r1, #206	; 0xce
 801d910:	f7ff fb36 	bl	801cf80 <__assert_func>
 801d914:	0052      	lsls	r2, r2, #1
 801d916:	3101      	adds	r1, #1
 801d918:	e7f0      	b.n	801d8fc <__s2b+0x18>
 801d91a:	9b08      	ldr	r3, [sp, #32]
 801d91c:	6143      	str	r3, [r0, #20]
 801d91e:	2d09      	cmp	r5, #9
 801d920:	f04f 0301 	mov.w	r3, #1
 801d924:	6103      	str	r3, [r0, #16]
 801d926:	dd16      	ble.n	801d956 <__s2b+0x72>
 801d928:	f104 0909 	add.w	r9, r4, #9
 801d92c:	46c8      	mov	r8, r9
 801d92e:	442c      	add	r4, r5
 801d930:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d934:	4601      	mov	r1, r0
 801d936:	3b30      	subs	r3, #48	; 0x30
 801d938:	220a      	movs	r2, #10
 801d93a:	4630      	mov	r0, r6
 801d93c:	f7ff ff8c 	bl	801d858 <__multadd>
 801d940:	45a0      	cmp	r8, r4
 801d942:	d1f5      	bne.n	801d930 <__s2b+0x4c>
 801d944:	f1a5 0408 	sub.w	r4, r5, #8
 801d948:	444c      	add	r4, r9
 801d94a:	1b2d      	subs	r5, r5, r4
 801d94c:	1963      	adds	r3, r4, r5
 801d94e:	42bb      	cmp	r3, r7
 801d950:	db04      	blt.n	801d95c <__s2b+0x78>
 801d952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d956:	340a      	adds	r4, #10
 801d958:	2509      	movs	r5, #9
 801d95a:	e7f6      	b.n	801d94a <__s2b+0x66>
 801d95c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d960:	4601      	mov	r1, r0
 801d962:	3b30      	subs	r3, #48	; 0x30
 801d964:	220a      	movs	r2, #10
 801d966:	4630      	mov	r0, r6
 801d968:	f7ff ff76 	bl	801d858 <__multadd>
 801d96c:	e7ee      	b.n	801d94c <__s2b+0x68>
 801d96e:	bf00      	nop
 801d970:	0801f974 	.word	0x0801f974
 801d974:	0801fa0b 	.word	0x0801fa0b

0801d978 <__hi0bits>:
 801d978:	0c03      	lsrs	r3, r0, #16
 801d97a:	041b      	lsls	r3, r3, #16
 801d97c:	b9d3      	cbnz	r3, 801d9b4 <__hi0bits+0x3c>
 801d97e:	0400      	lsls	r0, r0, #16
 801d980:	2310      	movs	r3, #16
 801d982:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d986:	bf04      	itt	eq
 801d988:	0200      	lsleq	r0, r0, #8
 801d98a:	3308      	addeq	r3, #8
 801d98c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d990:	bf04      	itt	eq
 801d992:	0100      	lsleq	r0, r0, #4
 801d994:	3304      	addeq	r3, #4
 801d996:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d99a:	bf04      	itt	eq
 801d99c:	0080      	lsleq	r0, r0, #2
 801d99e:	3302      	addeq	r3, #2
 801d9a0:	2800      	cmp	r0, #0
 801d9a2:	db05      	blt.n	801d9b0 <__hi0bits+0x38>
 801d9a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d9a8:	f103 0301 	add.w	r3, r3, #1
 801d9ac:	bf08      	it	eq
 801d9ae:	2320      	moveq	r3, #32
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	4770      	bx	lr
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	e7e4      	b.n	801d982 <__hi0bits+0xa>

0801d9b8 <__lo0bits>:
 801d9b8:	6803      	ldr	r3, [r0, #0]
 801d9ba:	f013 0207 	ands.w	r2, r3, #7
 801d9be:	4601      	mov	r1, r0
 801d9c0:	d00b      	beq.n	801d9da <__lo0bits+0x22>
 801d9c2:	07da      	lsls	r2, r3, #31
 801d9c4:	d423      	bmi.n	801da0e <__lo0bits+0x56>
 801d9c6:	0798      	lsls	r0, r3, #30
 801d9c8:	bf49      	itett	mi
 801d9ca:	085b      	lsrmi	r3, r3, #1
 801d9cc:	089b      	lsrpl	r3, r3, #2
 801d9ce:	2001      	movmi	r0, #1
 801d9d0:	600b      	strmi	r3, [r1, #0]
 801d9d2:	bf5c      	itt	pl
 801d9d4:	600b      	strpl	r3, [r1, #0]
 801d9d6:	2002      	movpl	r0, #2
 801d9d8:	4770      	bx	lr
 801d9da:	b298      	uxth	r0, r3
 801d9dc:	b9a8      	cbnz	r0, 801da0a <__lo0bits+0x52>
 801d9de:	0c1b      	lsrs	r3, r3, #16
 801d9e0:	2010      	movs	r0, #16
 801d9e2:	b2da      	uxtb	r2, r3
 801d9e4:	b90a      	cbnz	r2, 801d9ea <__lo0bits+0x32>
 801d9e6:	3008      	adds	r0, #8
 801d9e8:	0a1b      	lsrs	r3, r3, #8
 801d9ea:	071a      	lsls	r2, r3, #28
 801d9ec:	bf04      	itt	eq
 801d9ee:	091b      	lsreq	r3, r3, #4
 801d9f0:	3004      	addeq	r0, #4
 801d9f2:	079a      	lsls	r2, r3, #30
 801d9f4:	bf04      	itt	eq
 801d9f6:	089b      	lsreq	r3, r3, #2
 801d9f8:	3002      	addeq	r0, #2
 801d9fa:	07da      	lsls	r2, r3, #31
 801d9fc:	d403      	bmi.n	801da06 <__lo0bits+0x4e>
 801d9fe:	085b      	lsrs	r3, r3, #1
 801da00:	f100 0001 	add.w	r0, r0, #1
 801da04:	d005      	beq.n	801da12 <__lo0bits+0x5a>
 801da06:	600b      	str	r3, [r1, #0]
 801da08:	4770      	bx	lr
 801da0a:	4610      	mov	r0, r2
 801da0c:	e7e9      	b.n	801d9e2 <__lo0bits+0x2a>
 801da0e:	2000      	movs	r0, #0
 801da10:	4770      	bx	lr
 801da12:	2020      	movs	r0, #32
 801da14:	4770      	bx	lr
	...

0801da18 <__i2b>:
 801da18:	b510      	push	{r4, lr}
 801da1a:	460c      	mov	r4, r1
 801da1c:	2101      	movs	r1, #1
 801da1e:	f7ff feb9 	bl	801d794 <_Balloc>
 801da22:	4602      	mov	r2, r0
 801da24:	b928      	cbnz	r0, 801da32 <__i2b+0x1a>
 801da26:	4b05      	ldr	r3, [pc, #20]	; (801da3c <__i2b+0x24>)
 801da28:	4805      	ldr	r0, [pc, #20]	; (801da40 <__i2b+0x28>)
 801da2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801da2e:	f7ff faa7 	bl	801cf80 <__assert_func>
 801da32:	2301      	movs	r3, #1
 801da34:	6144      	str	r4, [r0, #20]
 801da36:	6103      	str	r3, [r0, #16]
 801da38:	bd10      	pop	{r4, pc}
 801da3a:	bf00      	nop
 801da3c:	0801f974 	.word	0x0801f974
 801da40:	0801fa0b 	.word	0x0801fa0b

0801da44 <__multiply>:
 801da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da48:	4691      	mov	r9, r2
 801da4a:	690a      	ldr	r2, [r1, #16]
 801da4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801da50:	429a      	cmp	r2, r3
 801da52:	bfb8      	it	lt
 801da54:	460b      	movlt	r3, r1
 801da56:	460c      	mov	r4, r1
 801da58:	bfbc      	itt	lt
 801da5a:	464c      	movlt	r4, r9
 801da5c:	4699      	movlt	r9, r3
 801da5e:	6927      	ldr	r7, [r4, #16]
 801da60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801da64:	68a3      	ldr	r3, [r4, #8]
 801da66:	6861      	ldr	r1, [r4, #4]
 801da68:	eb07 060a 	add.w	r6, r7, sl
 801da6c:	42b3      	cmp	r3, r6
 801da6e:	b085      	sub	sp, #20
 801da70:	bfb8      	it	lt
 801da72:	3101      	addlt	r1, #1
 801da74:	f7ff fe8e 	bl	801d794 <_Balloc>
 801da78:	b930      	cbnz	r0, 801da88 <__multiply+0x44>
 801da7a:	4602      	mov	r2, r0
 801da7c:	4b44      	ldr	r3, [pc, #272]	; (801db90 <__multiply+0x14c>)
 801da7e:	4845      	ldr	r0, [pc, #276]	; (801db94 <__multiply+0x150>)
 801da80:	f240 115d 	movw	r1, #349	; 0x15d
 801da84:	f7ff fa7c 	bl	801cf80 <__assert_func>
 801da88:	f100 0514 	add.w	r5, r0, #20
 801da8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801da90:	462b      	mov	r3, r5
 801da92:	2200      	movs	r2, #0
 801da94:	4543      	cmp	r3, r8
 801da96:	d321      	bcc.n	801dadc <__multiply+0x98>
 801da98:	f104 0314 	add.w	r3, r4, #20
 801da9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801daa0:	f109 0314 	add.w	r3, r9, #20
 801daa4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801daa8:	9202      	str	r2, [sp, #8]
 801daaa:	1b3a      	subs	r2, r7, r4
 801daac:	3a15      	subs	r2, #21
 801daae:	f022 0203 	bic.w	r2, r2, #3
 801dab2:	3204      	adds	r2, #4
 801dab4:	f104 0115 	add.w	r1, r4, #21
 801dab8:	428f      	cmp	r7, r1
 801daba:	bf38      	it	cc
 801dabc:	2204      	movcc	r2, #4
 801dabe:	9201      	str	r2, [sp, #4]
 801dac0:	9a02      	ldr	r2, [sp, #8]
 801dac2:	9303      	str	r3, [sp, #12]
 801dac4:	429a      	cmp	r2, r3
 801dac6:	d80c      	bhi.n	801dae2 <__multiply+0x9e>
 801dac8:	2e00      	cmp	r6, #0
 801daca:	dd03      	ble.n	801dad4 <__multiply+0x90>
 801dacc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d05a      	beq.n	801db8a <__multiply+0x146>
 801dad4:	6106      	str	r6, [r0, #16]
 801dad6:	b005      	add	sp, #20
 801dad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dadc:	f843 2b04 	str.w	r2, [r3], #4
 801dae0:	e7d8      	b.n	801da94 <__multiply+0x50>
 801dae2:	f8b3 a000 	ldrh.w	sl, [r3]
 801dae6:	f1ba 0f00 	cmp.w	sl, #0
 801daea:	d024      	beq.n	801db36 <__multiply+0xf2>
 801daec:	f104 0e14 	add.w	lr, r4, #20
 801daf0:	46a9      	mov	r9, r5
 801daf2:	f04f 0c00 	mov.w	ip, #0
 801daf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801dafa:	f8d9 1000 	ldr.w	r1, [r9]
 801dafe:	fa1f fb82 	uxth.w	fp, r2
 801db02:	b289      	uxth	r1, r1
 801db04:	fb0a 110b 	mla	r1, sl, fp, r1
 801db08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801db0c:	f8d9 2000 	ldr.w	r2, [r9]
 801db10:	4461      	add	r1, ip
 801db12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801db16:	fb0a c20b 	mla	r2, sl, fp, ip
 801db1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801db1e:	b289      	uxth	r1, r1
 801db20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801db24:	4577      	cmp	r7, lr
 801db26:	f849 1b04 	str.w	r1, [r9], #4
 801db2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801db2e:	d8e2      	bhi.n	801daf6 <__multiply+0xb2>
 801db30:	9a01      	ldr	r2, [sp, #4]
 801db32:	f845 c002 	str.w	ip, [r5, r2]
 801db36:	9a03      	ldr	r2, [sp, #12]
 801db38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801db3c:	3304      	adds	r3, #4
 801db3e:	f1b9 0f00 	cmp.w	r9, #0
 801db42:	d020      	beq.n	801db86 <__multiply+0x142>
 801db44:	6829      	ldr	r1, [r5, #0]
 801db46:	f104 0c14 	add.w	ip, r4, #20
 801db4a:	46ae      	mov	lr, r5
 801db4c:	f04f 0a00 	mov.w	sl, #0
 801db50:	f8bc b000 	ldrh.w	fp, [ip]
 801db54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801db58:	fb09 220b 	mla	r2, r9, fp, r2
 801db5c:	4492      	add	sl, r2
 801db5e:	b289      	uxth	r1, r1
 801db60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801db64:	f84e 1b04 	str.w	r1, [lr], #4
 801db68:	f85c 2b04 	ldr.w	r2, [ip], #4
 801db6c:	f8be 1000 	ldrh.w	r1, [lr]
 801db70:	0c12      	lsrs	r2, r2, #16
 801db72:	fb09 1102 	mla	r1, r9, r2, r1
 801db76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801db7a:	4567      	cmp	r7, ip
 801db7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801db80:	d8e6      	bhi.n	801db50 <__multiply+0x10c>
 801db82:	9a01      	ldr	r2, [sp, #4]
 801db84:	50a9      	str	r1, [r5, r2]
 801db86:	3504      	adds	r5, #4
 801db88:	e79a      	b.n	801dac0 <__multiply+0x7c>
 801db8a:	3e01      	subs	r6, #1
 801db8c:	e79c      	b.n	801dac8 <__multiply+0x84>
 801db8e:	bf00      	nop
 801db90:	0801f974 	.word	0x0801f974
 801db94:	0801fa0b 	.word	0x0801fa0b

0801db98 <__pow5mult>:
 801db98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db9c:	4615      	mov	r5, r2
 801db9e:	f012 0203 	ands.w	r2, r2, #3
 801dba2:	4606      	mov	r6, r0
 801dba4:	460f      	mov	r7, r1
 801dba6:	d007      	beq.n	801dbb8 <__pow5mult+0x20>
 801dba8:	4c25      	ldr	r4, [pc, #148]	; (801dc40 <__pow5mult+0xa8>)
 801dbaa:	3a01      	subs	r2, #1
 801dbac:	2300      	movs	r3, #0
 801dbae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dbb2:	f7ff fe51 	bl	801d858 <__multadd>
 801dbb6:	4607      	mov	r7, r0
 801dbb8:	10ad      	asrs	r5, r5, #2
 801dbba:	d03d      	beq.n	801dc38 <__pow5mult+0xa0>
 801dbbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801dbbe:	b97c      	cbnz	r4, 801dbe0 <__pow5mult+0x48>
 801dbc0:	2010      	movs	r0, #16
 801dbc2:	f7fd fc73 	bl	801b4ac <malloc>
 801dbc6:	4602      	mov	r2, r0
 801dbc8:	6270      	str	r0, [r6, #36]	; 0x24
 801dbca:	b928      	cbnz	r0, 801dbd8 <__pow5mult+0x40>
 801dbcc:	4b1d      	ldr	r3, [pc, #116]	; (801dc44 <__pow5mult+0xac>)
 801dbce:	481e      	ldr	r0, [pc, #120]	; (801dc48 <__pow5mult+0xb0>)
 801dbd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801dbd4:	f7ff f9d4 	bl	801cf80 <__assert_func>
 801dbd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dbdc:	6004      	str	r4, [r0, #0]
 801dbde:	60c4      	str	r4, [r0, #12]
 801dbe0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dbe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dbe8:	b94c      	cbnz	r4, 801dbfe <__pow5mult+0x66>
 801dbea:	f240 2171 	movw	r1, #625	; 0x271
 801dbee:	4630      	mov	r0, r6
 801dbf0:	f7ff ff12 	bl	801da18 <__i2b>
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	f8c8 0008 	str.w	r0, [r8, #8]
 801dbfa:	4604      	mov	r4, r0
 801dbfc:	6003      	str	r3, [r0, #0]
 801dbfe:	f04f 0900 	mov.w	r9, #0
 801dc02:	07eb      	lsls	r3, r5, #31
 801dc04:	d50a      	bpl.n	801dc1c <__pow5mult+0x84>
 801dc06:	4639      	mov	r1, r7
 801dc08:	4622      	mov	r2, r4
 801dc0a:	4630      	mov	r0, r6
 801dc0c:	f7ff ff1a 	bl	801da44 <__multiply>
 801dc10:	4639      	mov	r1, r7
 801dc12:	4680      	mov	r8, r0
 801dc14:	4630      	mov	r0, r6
 801dc16:	f7ff fdfd 	bl	801d814 <_Bfree>
 801dc1a:	4647      	mov	r7, r8
 801dc1c:	106d      	asrs	r5, r5, #1
 801dc1e:	d00b      	beq.n	801dc38 <__pow5mult+0xa0>
 801dc20:	6820      	ldr	r0, [r4, #0]
 801dc22:	b938      	cbnz	r0, 801dc34 <__pow5mult+0x9c>
 801dc24:	4622      	mov	r2, r4
 801dc26:	4621      	mov	r1, r4
 801dc28:	4630      	mov	r0, r6
 801dc2a:	f7ff ff0b 	bl	801da44 <__multiply>
 801dc2e:	6020      	str	r0, [r4, #0]
 801dc30:	f8c0 9000 	str.w	r9, [r0]
 801dc34:	4604      	mov	r4, r0
 801dc36:	e7e4      	b.n	801dc02 <__pow5mult+0x6a>
 801dc38:	4638      	mov	r0, r7
 801dc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc3e:	bf00      	nop
 801dc40:	0801fb58 	.word	0x0801fb58
 801dc44:	0801f9f4 	.word	0x0801f9f4
 801dc48:	0801fa0b 	.word	0x0801fa0b

0801dc4c <__lshift>:
 801dc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc50:	460c      	mov	r4, r1
 801dc52:	6849      	ldr	r1, [r1, #4]
 801dc54:	6923      	ldr	r3, [r4, #16]
 801dc56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dc5a:	68a3      	ldr	r3, [r4, #8]
 801dc5c:	4607      	mov	r7, r0
 801dc5e:	4691      	mov	r9, r2
 801dc60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dc64:	f108 0601 	add.w	r6, r8, #1
 801dc68:	42b3      	cmp	r3, r6
 801dc6a:	db0b      	blt.n	801dc84 <__lshift+0x38>
 801dc6c:	4638      	mov	r0, r7
 801dc6e:	f7ff fd91 	bl	801d794 <_Balloc>
 801dc72:	4605      	mov	r5, r0
 801dc74:	b948      	cbnz	r0, 801dc8a <__lshift+0x3e>
 801dc76:	4602      	mov	r2, r0
 801dc78:	4b2a      	ldr	r3, [pc, #168]	; (801dd24 <__lshift+0xd8>)
 801dc7a:	482b      	ldr	r0, [pc, #172]	; (801dd28 <__lshift+0xdc>)
 801dc7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801dc80:	f7ff f97e 	bl	801cf80 <__assert_func>
 801dc84:	3101      	adds	r1, #1
 801dc86:	005b      	lsls	r3, r3, #1
 801dc88:	e7ee      	b.n	801dc68 <__lshift+0x1c>
 801dc8a:	2300      	movs	r3, #0
 801dc8c:	f100 0114 	add.w	r1, r0, #20
 801dc90:	f100 0210 	add.w	r2, r0, #16
 801dc94:	4618      	mov	r0, r3
 801dc96:	4553      	cmp	r3, sl
 801dc98:	db37      	blt.n	801dd0a <__lshift+0xbe>
 801dc9a:	6920      	ldr	r0, [r4, #16]
 801dc9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dca0:	f104 0314 	add.w	r3, r4, #20
 801dca4:	f019 091f 	ands.w	r9, r9, #31
 801dca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dcac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801dcb0:	d02f      	beq.n	801dd12 <__lshift+0xc6>
 801dcb2:	f1c9 0e20 	rsb	lr, r9, #32
 801dcb6:	468a      	mov	sl, r1
 801dcb8:	f04f 0c00 	mov.w	ip, #0
 801dcbc:	681a      	ldr	r2, [r3, #0]
 801dcbe:	fa02 f209 	lsl.w	r2, r2, r9
 801dcc2:	ea42 020c 	orr.w	r2, r2, ip
 801dcc6:	f84a 2b04 	str.w	r2, [sl], #4
 801dcca:	f853 2b04 	ldr.w	r2, [r3], #4
 801dcce:	4298      	cmp	r0, r3
 801dcd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801dcd4:	d8f2      	bhi.n	801dcbc <__lshift+0x70>
 801dcd6:	1b03      	subs	r3, r0, r4
 801dcd8:	3b15      	subs	r3, #21
 801dcda:	f023 0303 	bic.w	r3, r3, #3
 801dcde:	3304      	adds	r3, #4
 801dce0:	f104 0215 	add.w	r2, r4, #21
 801dce4:	4290      	cmp	r0, r2
 801dce6:	bf38      	it	cc
 801dce8:	2304      	movcc	r3, #4
 801dcea:	f841 c003 	str.w	ip, [r1, r3]
 801dcee:	f1bc 0f00 	cmp.w	ip, #0
 801dcf2:	d001      	beq.n	801dcf8 <__lshift+0xac>
 801dcf4:	f108 0602 	add.w	r6, r8, #2
 801dcf8:	3e01      	subs	r6, #1
 801dcfa:	4638      	mov	r0, r7
 801dcfc:	612e      	str	r6, [r5, #16]
 801dcfe:	4621      	mov	r1, r4
 801dd00:	f7ff fd88 	bl	801d814 <_Bfree>
 801dd04:	4628      	mov	r0, r5
 801dd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd0a:	f842 0f04 	str.w	r0, [r2, #4]!
 801dd0e:	3301      	adds	r3, #1
 801dd10:	e7c1      	b.n	801dc96 <__lshift+0x4a>
 801dd12:	3904      	subs	r1, #4
 801dd14:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd18:	f841 2f04 	str.w	r2, [r1, #4]!
 801dd1c:	4298      	cmp	r0, r3
 801dd1e:	d8f9      	bhi.n	801dd14 <__lshift+0xc8>
 801dd20:	e7ea      	b.n	801dcf8 <__lshift+0xac>
 801dd22:	bf00      	nop
 801dd24:	0801f974 	.word	0x0801f974
 801dd28:	0801fa0b 	.word	0x0801fa0b

0801dd2c <__mcmp>:
 801dd2c:	b530      	push	{r4, r5, lr}
 801dd2e:	6902      	ldr	r2, [r0, #16]
 801dd30:	690c      	ldr	r4, [r1, #16]
 801dd32:	1b12      	subs	r2, r2, r4
 801dd34:	d10e      	bne.n	801dd54 <__mcmp+0x28>
 801dd36:	f100 0314 	add.w	r3, r0, #20
 801dd3a:	3114      	adds	r1, #20
 801dd3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801dd40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801dd44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801dd48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801dd4c:	42a5      	cmp	r5, r4
 801dd4e:	d003      	beq.n	801dd58 <__mcmp+0x2c>
 801dd50:	d305      	bcc.n	801dd5e <__mcmp+0x32>
 801dd52:	2201      	movs	r2, #1
 801dd54:	4610      	mov	r0, r2
 801dd56:	bd30      	pop	{r4, r5, pc}
 801dd58:	4283      	cmp	r3, r0
 801dd5a:	d3f3      	bcc.n	801dd44 <__mcmp+0x18>
 801dd5c:	e7fa      	b.n	801dd54 <__mcmp+0x28>
 801dd5e:	f04f 32ff 	mov.w	r2, #4294967295
 801dd62:	e7f7      	b.n	801dd54 <__mcmp+0x28>

0801dd64 <__mdiff>:
 801dd64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd68:	460c      	mov	r4, r1
 801dd6a:	4606      	mov	r6, r0
 801dd6c:	4611      	mov	r1, r2
 801dd6e:	4620      	mov	r0, r4
 801dd70:	4690      	mov	r8, r2
 801dd72:	f7ff ffdb 	bl	801dd2c <__mcmp>
 801dd76:	1e05      	subs	r5, r0, #0
 801dd78:	d110      	bne.n	801dd9c <__mdiff+0x38>
 801dd7a:	4629      	mov	r1, r5
 801dd7c:	4630      	mov	r0, r6
 801dd7e:	f7ff fd09 	bl	801d794 <_Balloc>
 801dd82:	b930      	cbnz	r0, 801dd92 <__mdiff+0x2e>
 801dd84:	4b3a      	ldr	r3, [pc, #232]	; (801de70 <__mdiff+0x10c>)
 801dd86:	4602      	mov	r2, r0
 801dd88:	f240 2132 	movw	r1, #562	; 0x232
 801dd8c:	4839      	ldr	r0, [pc, #228]	; (801de74 <__mdiff+0x110>)
 801dd8e:	f7ff f8f7 	bl	801cf80 <__assert_func>
 801dd92:	2301      	movs	r3, #1
 801dd94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dd98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd9c:	bfa4      	itt	ge
 801dd9e:	4643      	movge	r3, r8
 801dda0:	46a0      	movge	r8, r4
 801dda2:	4630      	mov	r0, r6
 801dda4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dda8:	bfa6      	itte	ge
 801ddaa:	461c      	movge	r4, r3
 801ddac:	2500      	movge	r5, #0
 801ddae:	2501      	movlt	r5, #1
 801ddb0:	f7ff fcf0 	bl	801d794 <_Balloc>
 801ddb4:	b920      	cbnz	r0, 801ddc0 <__mdiff+0x5c>
 801ddb6:	4b2e      	ldr	r3, [pc, #184]	; (801de70 <__mdiff+0x10c>)
 801ddb8:	4602      	mov	r2, r0
 801ddba:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ddbe:	e7e5      	b.n	801dd8c <__mdiff+0x28>
 801ddc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ddc4:	6926      	ldr	r6, [r4, #16]
 801ddc6:	60c5      	str	r5, [r0, #12]
 801ddc8:	f104 0914 	add.w	r9, r4, #20
 801ddcc:	f108 0514 	add.w	r5, r8, #20
 801ddd0:	f100 0e14 	add.w	lr, r0, #20
 801ddd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ddd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801dddc:	f108 0210 	add.w	r2, r8, #16
 801dde0:	46f2      	mov	sl, lr
 801dde2:	2100      	movs	r1, #0
 801dde4:	f859 3b04 	ldr.w	r3, [r9], #4
 801dde8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ddec:	fa1f f883 	uxth.w	r8, r3
 801ddf0:	fa11 f18b 	uxtah	r1, r1, fp
 801ddf4:	0c1b      	lsrs	r3, r3, #16
 801ddf6:	eba1 0808 	sub.w	r8, r1, r8
 801ddfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ddfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801de02:	fa1f f888 	uxth.w	r8, r8
 801de06:	1419      	asrs	r1, r3, #16
 801de08:	454e      	cmp	r6, r9
 801de0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801de0e:	f84a 3b04 	str.w	r3, [sl], #4
 801de12:	d8e7      	bhi.n	801dde4 <__mdiff+0x80>
 801de14:	1b33      	subs	r3, r6, r4
 801de16:	3b15      	subs	r3, #21
 801de18:	f023 0303 	bic.w	r3, r3, #3
 801de1c:	3304      	adds	r3, #4
 801de1e:	3415      	adds	r4, #21
 801de20:	42a6      	cmp	r6, r4
 801de22:	bf38      	it	cc
 801de24:	2304      	movcc	r3, #4
 801de26:	441d      	add	r5, r3
 801de28:	4473      	add	r3, lr
 801de2a:	469e      	mov	lr, r3
 801de2c:	462e      	mov	r6, r5
 801de2e:	4566      	cmp	r6, ip
 801de30:	d30e      	bcc.n	801de50 <__mdiff+0xec>
 801de32:	f10c 0203 	add.w	r2, ip, #3
 801de36:	1b52      	subs	r2, r2, r5
 801de38:	f022 0203 	bic.w	r2, r2, #3
 801de3c:	3d03      	subs	r5, #3
 801de3e:	45ac      	cmp	ip, r5
 801de40:	bf38      	it	cc
 801de42:	2200      	movcc	r2, #0
 801de44:	441a      	add	r2, r3
 801de46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801de4a:	b17b      	cbz	r3, 801de6c <__mdiff+0x108>
 801de4c:	6107      	str	r7, [r0, #16]
 801de4e:	e7a3      	b.n	801dd98 <__mdiff+0x34>
 801de50:	f856 8b04 	ldr.w	r8, [r6], #4
 801de54:	fa11 f288 	uxtah	r2, r1, r8
 801de58:	1414      	asrs	r4, r2, #16
 801de5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801de5e:	b292      	uxth	r2, r2
 801de60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801de64:	f84e 2b04 	str.w	r2, [lr], #4
 801de68:	1421      	asrs	r1, r4, #16
 801de6a:	e7e0      	b.n	801de2e <__mdiff+0xca>
 801de6c:	3f01      	subs	r7, #1
 801de6e:	e7ea      	b.n	801de46 <__mdiff+0xe2>
 801de70:	0801f974 	.word	0x0801f974
 801de74:	0801fa0b 	.word	0x0801fa0b

0801de78 <__ulp>:
 801de78:	b082      	sub	sp, #8
 801de7a:	ed8d 0b00 	vstr	d0, [sp]
 801de7e:	9b01      	ldr	r3, [sp, #4]
 801de80:	4912      	ldr	r1, [pc, #72]	; (801decc <__ulp+0x54>)
 801de82:	4019      	ands	r1, r3
 801de84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801de88:	2900      	cmp	r1, #0
 801de8a:	dd05      	ble.n	801de98 <__ulp+0x20>
 801de8c:	2200      	movs	r2, #0
 801de8e:	460b      	mov	r3, r1
 801de90:	ec43 2b10 	vmov	d0, r2, r3
 801de94:	b002      	add	sp, #8
 801de96:	4770      	bx	lr
 801de98:	4249      	negs	r1, r1
 801de9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801de9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801dea2:	f04f 0200 	mov.w	r2, #0
 801dea6:	f04f 0300 	mov.w	r3, #0
 801deaa:	da04      	bge.n	801deb6 <__ulp+0x3e>
 801deac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801deb0:	fa41 f300 	asr.w	r3, r1, r0
 801deb4:	e7ec      	b.n	801de90 <__ulp+0x18>
 801deb6:	f1a0 0114 	sub.w	r1, r0, #20
 801deba:	291e      	cmp	r1, #30
 801debc:	bfda      	itte	le
 801debe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801dec2:	fa20 f101 	lsrle.w	r1, r0, r1
 801dec6:	2101      	movgt	r1, #1
 801dec8:	460a      	mov	r2, r1
 801deca:	e7e1      	b.n	801de90 <__ulp+0x18>
 801decc:	7ff00000 	.word	0x7ff00000

0801ded0 <__b2d>:
 801ded0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ded2:	6905      	ldr	r5, [r0, #16]
 801ded4:	f100 0714 	add.w	r7, r0, #20
 801ded8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801dedc:	1f2e      	subs	r6, r5, #4
 801dede:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801dee2:	4620      	mov	r0, r4
 801dee4:	f7ff fd48 	bl	801d978 <__hi0bits>
 801dee8:	f1c0 0320 	rsb	r3, r0, #32
 801deec:	280a      	cmp	r0, #10
 801deee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801df6c <__b2d+0x9c>
 801def2:	600b      	str	r3, [r1, #0]
 801def4:	dc14      	bgt.n	801df20 <__b2d+0x50>
 801def6:	f1c0 0e0b 	rsb	lr, r0, #11
 801defa:	fa24 f10e 	lsr.w	r1, r4, lr
 801defe:	42b7      	cmp	r7, r6
 801df00:	ea41 030c 	orr.w	r3, r1, ip
 801df04:	bf34      	ite	cc
 801df06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801df0a:	2100      	movcs	r1, #0
 801df0c:	3015      	adds	r0, #21
 801df0e:	fa04 f000 	lsl.w	r0, r4, r0
 801df12:	fa21 f10e 	lsr.w	r1, r1, lr
 801df16:	ea40 0201 	orr.w	r2, r0, r1
 801df1a:	ec43 2b10 	vmov	d0, r2, r3
 801df1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df20:	42b7      	cmp	r7, r6
 801df22:	bf3a      	itte	cc
 801df24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801df28:	f1a5 0608 	subcc.w	r6, r5, #8
 801df2c:	2100      	movcs	r1, #0
 801df2e:	380b      	subs	r0, #11
 801df30:	d017      	beq.n	801df62 <__b2d+0x92>
 801df32:	f1c0 0c20 	rsb	ip, r0, #32
 801df36:	fa04 f500 	lsl.w	r5, r4, r0
 801df3a:	42be      	cmp	r6, r7
 801df3c:	fa21 f40c 	lsr.w	r4, r1, ip
 801df40:	ea45 0504 	orr.w	r5, r5, r4
 801df44:	bf8c      	ite	hi
 801df46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801df4a:	2400      	movls	r4, #0
 801df4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801df50:	fa01 f000 	lsl.w	r0, r1, r0
 801df54:	fa24 f40c 	lsr.w	r4, r4, ip
 801df58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801df5c:	ea40 0204 	orr.w	r2, r0, r4
 801df60:	e7db      	b.n	801df1a <__b2d+0x4a>
 801df62:	ea44 030c 	orr.w	r3, r4, ip
 801df66:	460a      	mov	r2, r1
 801df68:	e7d7      	b.n	801df1a <__b2d+0x4a>
 801df6a:	bf00      	nop
 801df6c:	3ff00000 	.word	0x3ff00000

0801df70 <__d2b>:
 801df70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801df74:	4689      	mov	r9, r1
 801df76:	2101      	movs	r1, #1
 801df78:	ec57 6b10 	vmov	r6, r7, d0
 801df7c:	4690      	mov	r8, r2
 801df7e:	f7ff fc09 	bl	801d794 <_Balloc>
 801df82:	4604      	mov	r4, r0
 801df84:	b930      	cbnz	r0, 801df94 <__d2b+0x24>
 801df86:	4602      	mov	r2, r0
 801df88:	4b25      	ldr	r3, [pc, #148]	; (801e020 <__d2b+0xb0>)
 801df8a:	4826      	ldr	r0, [pc, #152]	; (801e024 <__d2b+0xb4>)
 801df8c:	f240 310a 	movw	r1, #778	; 0x30a
 801df90:	f7fe fff6 	bl	801cf80 <__assert_func>
 801df94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801df98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801df9c:	bb35      	cbnz	r5, 801dfec <__d2b+0x7c>
 801df9e:	2e00      	cmp	r6, #0
 801dfa0:	9301      	str	r3, [sp, #4]
 801dfa2:	d028      	beq.n	801dff6 <__d2b+0x86>
 801dfa4:	4668      	mov	r0, sp
 801dfa6:	9600      	str	r6, [sp, #0]
 801dfa8:	f7ff fd06 	bl	801d9b8 <__lo0bits>
 801dfac:	9900      	ldr	r1, [sp, #0]
 801dfae:	b300      	cbz	r0, 801dff2 <__d2b+0x82>
 801dfb0:	9a01      	ldr	r2, [sp, #4]
 801dfb2:	f1c0 0320 	rsb	r3, r0, #32
 801dfb6:	fa02 f303 	lsl.w	r3, r2, r3
 801dfba:	430b      	orrs	r3, r1
 801dfbc:	40c2      	lsrs	r2, r0
 801dfbe:	6163      	str	r3, [r4, #20]
 801dfc0:	9201      	str	r2, [sp, #4]
 801dfc2:	9b01      	ldr	r3, [sp, #4]
 801dfc4:	61a3      	str	r3, [r4, #24]
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	bf14      	ite	ne
 801dfca:	2202      	movne	r2, #2
 801dfcc:	2201      	moveq	r2, #1
 801dfce:	6122      	str	r2, [r4, #16]
 801dfd0:	b1d5      	cbz	r5, 801e008 <__d2b+0x98>
 801dfd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801dfd6:	4405      	add	r5, r0
 801dfd8:	f8c9 5000 	str.w	r5, [r9]
 801dfdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801dfe0:	f8c8 0000 	str.w	r0, [r8]
 801dfe4:	4620      	mov	r0, r4
 801dfe6:	b003      	add	sp, #12
 801dfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dfec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dff0:	e7d5      	b.n	801df9e <__d2b+0x2e>
 801dff2:	6161      	str	r1, [r4, #20]
 801dff4:	e7e5      	b.n	801dfc2 <__d2b+0x52>
 801dff6:	a801      	add	r0, sp, #4
 801dff8:	f7ff fcde 	bl	801d9b8 <__lo0bits>
 801dffc:	9b01      	ldr	r3, [sp, #4]
 801dffe:	6163      	str	r3, [r4, #20]
 801e000:	2201      	movs	r2, #1
 801e002:	6122      	str	r2, [r4, #16]
 801e004:	3020      	adds	r0, #32
 801e006:	e7e3      	b.n	801dfd0 <__d2b+0x60>
 801e008:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e00c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e010:	f8c9 0000 	str.w	r0, [r9]
 801e014:	6918      	ldr	r0, [r3, #16]
 801e016:	f7ff fcaf 	bl	801d978 <__hi0bits>
 801e01a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e01e:	e7df      	b.n	801dfe0 <__d2b+0x70>
 801e020:	0801f974 	.word	0x0801f974
 801e024:	0801fa0b 	.word	0x0801fa0b

0801e028 <__ratio>:
 801e028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e02c:	4688      	mov	r8, r1
 801e02e:	4669      	mov	r1, sp
 801e030:	4681      	mov	r9, r0
 801e032:	f7ff ff4d 	bl	801ded0 <__b2d>
 801e036:	a901      	add	r1, sp, #4
 801e038:	4640      	mov	r0, r8
 801e03a:	ec55 4b10 	vmov	r4, r5, d0
 801e03e:	f7ff ff47 	bl	801ded0 <__b2d>
 801e042:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e046:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e04a:	eba3 0c02 	sub.w	ip, r3, r2
 801e04e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e052:	1a9b      	subs	r3, r3, r2
 801e054:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e058:	ec51 0b10 	vmov	r0, r1, d0
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	bfd6      	itet	le
 801e060:	460a      	movle	r2, r1
 801e062:	462a      	movgt	r2, r5
 801e064:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e068:	468b      	mov	fp, r1
 801e06a:	462f      	mov	r7, r5
 801e06c:	bfd4      	ite	le
 801e06e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e072:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e076:	4620      	mov	r0, r4
 801e078:	ee10 2a10 	vmov	r2, s0
 801e07c:	465b      	mov	r3, fp
 801e07e:	4639      	mov	r1, r7
 801e080:	f7e2 fbfc 	bl	800087c <__aeabi_ddiv>
 801e084:	ec41 0b10 	vmov	d0, r0, r1
 801e088:	b003      	add	sp, #12
 801e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e08e <__copybits>:
 801e08e:	3901      	subs	r1, #1
 801e090:	b570      	push	{r4, r5, r6, lr}
 801e092:	1149      	asrs	r1, r1, #5
 801e094:	6914      	ldr	r4, [r2, #16]
 801e096:	3101      	adds	r1, #1
 801e098:	f102 0314 	add.w	r3, r2, #20
 801e09c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e0a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e0a4:	1f05      	subs	r5, r0, #4
 801e0a6:	42a3      	cmp	r3, r4
 801e0a8:	d30c      	bcc.n	801e0c4 <__copybits+0x36>
 801e0aa:	1aa3      	subs	r3, r4, r2
 801e0ac:	3b11      	subs	r3, #17
 801e0ae:	f023 0303 	bic.w	r3, r3, #3
 801e0b2:	3211      	adds	r2, #17
 801e0b4:	42a2      	cmp	r2, r4
 801e0b6:	bf88      	it	hi
 801e0b8:	2300      	movhi	r3, #0
 801e0ba:	4418      	add	r0, r3
 801e0bc:	2300      	movs	r3, #0
 801e0be:	4288      	cmp	r0, r1
 801e0c0:	d305      	bcc.n	801e0ce <__copybits+0x40>
 801e0c2:	bd70      	pop	{r4, r5, r6, pc}
 801e0c4:	f853 6b04 	ldr.w	r6, [r3], #4
 801e0c8:	f845 6f04 	str.w	r6, [r5, #4]!
 801e0cc:	e7eb      	b.n	801e0a6 <__copybits+0x18>
 801e0ce:	f840 3b04 	str.w	r3, [r0], #4
 801e0d2:	e7f4      	b.n	801e0be <__copybits+0x30>

0801e0d4 <__any_on>:
 801e0d4:	f100 0214 	add.w	r2, r0, #20
 801e0d8:	6900      	ldr	r0, [r0, #16]
 801e0da:	114b      	asrs	r3, r1, #5
 801e0dc:	4298      	cmp	r0, r3
 801e0de:	b510      	push	{r4, lr}
 801e0e0:	db11      	blt.n	801e106 <__any_on+0x32>
 801e0e2:	dd0a      	ble.n	801e0fa <__any_on+0x26>
 801e0e4:	f011 011f 	ands.w	r1, r1, #31
 801e0e8:	d007      	beq.n	801e0fa <__any_on+0x26>
 801e0ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e0ee:	fa24 f001 	lsr.w	r0, r4, r1
 801e0f2:	fa00 f101 	lsl.w	r1, r0, r1
 801e0f6:	428c      	cmp	r4, r1
 801e0f8:	d10b      	bne.n	801e112 <__any_on+0x3e>
 801e0fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e0fe:	4293      	cmp	r3, r2
 801e100:	d803      	bhi.n	801e10a <__any_on+0x36>
 801e102:	2000      	movs	r0, #0
 801e104:	bd10      	pop	{r4, pc}
 801e106:	4603      	mov	r3, r0
 801e108:	e7f7      	b.n	801e0fa <__any_on+0x26>
 801e10a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e10e:	2900      	cmp	r1, #0
 801e110:	d0f5      	beq.n	801e0fe <__any_on+0x2a>
 801e112:	2001      	movs	r0, #1
 801e114:	e7f6      	b.n	801e104 <__any_on+0x30>

0801e116 <_calloc_r>:
 801e116:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e118:	fba1 2402 	umull	r2, r4, r1, r2
 801e11c:	b94c      	cbnz	r4, 801e132 <_calloc_r+0x1c>
 801e11e:	4611      	mov	r1, r2
 801e120:	9201      	str	r2, [sp, #4]
 801e122:	f7fd fa77 	bl	801b614 <_malloc_r>
 801e126:	9a01      	ldr	r2, [sp, #4]
 801e128:	4605      	mov	r5, r0
 801e12a:	b930      	cbnz	r0, 801e13a <_calloc_r+0x24>
 801e12c:	4628      	mov	r0, r5
 801e12e:	b003      	add	sp, #12
 801e130:	bd30      	pop	{r4, r5, pc}
 801e132:	220c      	movs	r2, #12
 801e134:	6002      	str	r2, [r0, #0]
 801e136:	2500      	movs	r5, #0
 801e138:	e7f8      	b.n	801e12c <_calloc_r+0x16>
 801e13a:	4621      	mov	r1, r4
 801e13c:	f7fd f9f6 	bl	801b52c <memset>
 801e140:	e7f4      	b.n	801e12c <_calloc_r+0x16>

0801e142 <_realloc_r>:
 801e142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e146:	4680      	mov	r8, r0
 801e148:	4614      	mov	r4, r2
 801e14a:	460e      	mov	r6, r1
 801e14c:	b921      	cbnz	r1, 801e158 <_realloc_r+0x16>
 801e14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e152:	4611      	mov	r1, r2
 801e154:	f7fd ba5e 	b.w	801b614 <_malloc_r>
 801e158:	b92a      	cbnz	r2, 801e166 <_realloc_r+0x24>
 801e15a:	f7fd f9ef 	bl	801b53c <_free_r>
 801e15e:	4625      	mov	r5, r4
 801e160:	4628      	mov	r0, r5
 801e162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e166:	f000 f993 	bl	801e490 <_malloc_usable_size_r>
 801e16a:	4284      	cmp	r4, r0
 801e16c:	4607      	mov	r7, r0
 801e16e:	d802      	bhi.n	801e176 <_realloc_r+0x34>
 801e170:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e174:	d812      	bhi.n	801e19c <_realloc_r+0x5a>
 801e176:	4621      	mov	r1, r4
 801e178:	4640      	mov	r0, r8
 801e17a:	f7fd fa4b 	bl	801b614 <_malloc_r>
 801e17e:	4605      	mov	r5, r0
 801e180:	2800      	cmp	r0, #0
 801e182:	d0ed      	beq.n	801e160 <_realloc_r+0x1e>
 801e184:	42bc      	cmp	r4, r7
 801e186:	4622      	mov	r2, r4
 801e188:	4631      	mov	r1, r6
 801e18a:	bf28      	it	cs
 801e18c:	463a      	movcs	r2, r7
 801e18e:	f7fd f9bf 	bl	801b510 <memcpy>
 801e192:	4631      	mov	r1, r6
 801e194:	4640      	mov	r0, r8
 801e196:	f7fd f9d1 	bl	801b53c <_free_r>
 801e19a:	e7e1      	b.n	801e160 <_realloc_r+0x1e>
 801e19c:	4635      	mov	r5, r6
 801e19e:	e7df      	b.n	801e160 <_realloc_r+0x1e>

0801e1a0 <__ssputs_r>:
 801e1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e1a4:	688e      	ldr	r6, [r1, #8]
 801e1a6:	429e      	cmp	r6, r3
 801e1a8:	4682      	mov	sl, r0
 801e1aa:	460c      	mov	r4, r1
 801e1ac:	4690      	mov	r8, r2
 801e1ae:	461f      	mov	r7, r3
 801e1b0:	d838      	bhi.n	801e224 <__ssputs_r+0x84>
 801e1b2:	898a      	ldrh	r2, [r1, #12]
 801e1b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e1b8:	d032      	beq.n	801e220 <__ssputs_r+0x80>
 801e1ba:	6825      	ldr	r5, [r4, #0]
 801e1bc:	6909      	ldr	r1, [r1, #16]
 801e1be:	eba5 0901 	sub.w	r9, r5, r1
 801e1c2:	6965      	ldr	r5, [r4, #20]
 801e1c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e1c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e1cc:	3301      	adds	r3, #1
 801e1ce:	444b      	add	r3, r9
 801e1d0:	106d      	asrs	r5, r5, #1
 801e1d2:	429d      	cmp	r5, r3
 801e1d4:	bf38      	it	cc
 801e1d6:	461d      	movcc	r5, r3
 801e1d8:	0553      	lsls	r3, r2, #21
 801e1da:	d531      	bpl.n	801e240 <__ssputs_r+0xa0>
 801e1dc:	4629      	mov	r1, r5
 801e1de:	f7fd fa19 	bl	801b614 <_malloc_r>
 801e1e2:	4606      	mov	r6, r0
 801e1e4:	b950      	cbnz	r0, 801e1fc <__ssputs_r+0x5c>
 801e1e6:	230c      	movs	r3, #12
 801e1e8:	f8ca 3000 	str.w	r3, [sl]
 801e1ec:	89a3      	ldrh	r3, [r4, #12]
 801e1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e1f2:	81a3      	strh	r3, [r4, #12]
 801e1f4:	f04f 30ff 	mov.w	r0, #4294967295
 801e1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1fc:	6921      	ldr	r1, [r4, #16]
 801e1fe:	464a      	mov	r2, r9
 801e200:	f7fd f986 	bl	801b510 <memcpy>
 801e204:	89a3      	ldrh	r3, [r4, #12]
 801e206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e20a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e20e:	81a3      	strh	r3, [r4, #12]
 801e210:	6126      	str	r6, [r4, #16]
 801e212:	6165      	str	r5, [r4, #20]
 801e214:	444e      	add	r6, r9
 801e216:	eba5 0509 	sub.w	r5, r5, r9
 801e21a:	6026      	str	r6, [r4, #0]
 801e21c:	60a5      	str	r5, [r4, #8]
 801e21e:	463e      	mov	r6, r7
 801e220:	42be      	cmp	r6, r7
 801e222:	d900      	bls.n	801e226 <__ssputs_r+0x86>
 801e224:	463e      	mov	r6, r7
 801e226:	6820      	ldr	r0, [r4, #0]
 801e228:	4632      	mov	r2, r6
 801e22a:	4641      	mov	r1, r8
 801e22c:	f7ff fa8c 	bl	801d748 <memmove>
 801e230:	68a3      	ldr	r3, [r4, #8]
 801e232:	1b9b      	subs	r3, r3, r6
 801e234:	60a3      	str	r3, [r4, #8]
 801e236:	6823      	ldr	r3, [r4, #0]
 801e238:	4433      	add	r3, r6
 801e23a:	6023      	str	r3, [r4, #0]
 801e23c:	2000      	movs	r0, #0
 801e23e:	e7db      	b.n	801e1f8 <__ssputs_r+0x58>
 801e240:	462a      	mov	r2, r5
 801e242:	f7ff ff7e 	bl	801e142 <_realloc_r>
 801e246:	4606      	mov	r6, r0
 801e248:	2800      	cmp	r0, #0
 801e24a:	d1e1      	bne.n	801e210 <__ssputs_r+0x70>
 801e24c:	6921      	ldr	r1, [r4, #16]
 801e24e:	4650      	mov	r0, sl
 801e250:	f7fd f974 	bl	801b53c <_free_r>
 801e254:	e7c7      	b.n	801e1e6 <__ssputs_r+0x46>
	...

0801e258 <_svfiprintf_r>:
 801e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e25c:	4698      	mov	r8, r3
 801e25e:	898b      	ldrh	r3, [r1, #12]
 801e260:	061b      	lsls	r3, r3, #24
 801e262:	b09d      	sub	sp, #116	; 0x74
 801e264:	4607      	mov	r7, r0
 801e266:	460d      	mov	r5, r1
 801e268:	4614      	mov	r4, r2
 801e26a:	d50e      	bpl.n	801e28a <_svfiprintf_r+0x32>
 801e26c:	690b      	ldr	r3, [r1, #16]
 801e26e:	b963      	cbnz	r3, 801e28a <_svfiprintf_r+0x32>
 801e270:	2140      	movs	r1, #64	; 0x40
 801e272:	f7fd f9cf 	bl	801b614 <_malloc_r>
 801e276:	6028      	str	r0, [r5, #0]
 801e278:	6128      	str	r0, [r5, #16]
 801e27a:	b920      	cbnz	r0, 801e286 <_svfiprintf_r+0x2e>
 801e27c:	230c      	movs	r3, #12
 801e27e:	603b      	str	r3, [r7, #0]
 801e280:	f04f 30ff 	mov.w	r0, #4294967295
 801e284:	e0d1      	b.n	801e42a <_svfiprintf_r+0x1d2>
 801e286:	2340      	movs	r3, #64	; 0x40
 801e288:	616b      	str	r3, [r5, #20]
 801e28a:	2300      	movs	r3, #0
 801e28c:	9309      	str	r3, [sp, #36]	; 0x24
 801e28e:	2320      	movs	r3, #32
 801e290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e294:	f8cd 800c 	str.w	r8, [sp, #12]
 801e298:	2330      	movs	r3, #48	; 0x30
 801e29a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e444 <_svfiprintf_r+0x1ec>
 801e29e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e2a2:	f04f 0901 	mov.w	r9, #1
 801e2a6:	4623      	mov	r3, r4
 801e2a8:	469a      	mov	sl, r3
 801e2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e2ae:	b10a      	cbz	r2, 801e2b4 <_svfiprintf_r+0x5c>
 801e2b0:	2a25      	cmp	r2, #37	; 0x25
 801e2b2:	d1f9      	bne.n	801e2a8 <_svfiprintf_r+0x50>
 801e2b4:	ebba 0b04 	subs.w	fp, sl, r4
 801e2b8:	d00b      	beq.n	801e2d2 <_svfiprintf_r+0x7a>
 801e2ba:	465b      	mov	r3, fp
 801e2bc:	4622      	mov	r2, r4
 801e2be:	4629      	mov	r1, r5
 801e2c0:	4638      	mov	r0, r7
 801e2c2:	f7ff ff6d 	bl	801e1a0 <__ssputs_r>
 801e2c6:	3001      	adds	r0, #1
 801e2c8:	f000 80aa 	beq.w	801e420 <_svfiprintf_r+0x1c8>
 801e2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e2ce:	445a      	add	r2, fp
 801e2d0:	9209      	str	r2, [sp, #36]	; 0x24
 801e2d2:	f89a 3000 	ldrb.w	r3, [sl]
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	f000 80a2 	beq.w	801e420 <_svfiprintf_r+0x1c8>
 801e2dc:	2300      	movs	r3, #0
 801e2de:	f04f 32ff 	mov.w	r2, #4294967295
 801e2e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e2e6:	f10a 0a01 	add.w	sl, sl, #1
 801e2ea:	9304      	str	r3, [sp, #16]
 801e2ec:	9307      	str	r3, [sp, #28]
 801e2ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e2f2:	931a      	str	r3, [sp, #104]	; 0x68
 801e2f4:	4654      	mov	r4, sl
 801e2f6:	2205      	movs	r2, #5
 801e2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2fc:	4851      	ldr	r0, [pc, #324]	; (801e444 <_svfiprintf_r+0x1ec>)
 801e2fe:	f7e1 ff67 	bl	80001d0 <memchr>
 801e302:	9a04      	ldr	r2, [sp, #16]
 801e304:	b9d8      	cbnz	r0, 801e33e <_svfiprintf_r+0xe6>
 801e306:	06d0      	lsls	r0, r2, #27
 801e308:	bf44      	itt	mi
 801e30a:	2320      	movmi	r3, #32
 801e30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e310:	0711      	lsls	r1, r2, #28
 801e312:	bf44      	itt	mi
 801e314:	232b      	movmi	r3, #43	; 0x2b
 801e316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e31a:	f89a 3000 	ldrb.w	r3, [sl]
 801e31e:	2b2a      	cmp	r3, #42	; 0x2a
 801e320:	d015      	beq.n	801e34e <_svfiprintf_r+0xf6>
 801e322:	9a07      	ldr	r2, [sp, #28]
 801e324:	4654      	mov	r4, sl
 801e326:	2000      	movs	r0, #0
 801e328:	f04f 0c0a 	mov.w	ip, #10
 801e32c:	4621      	mov	r1, r4
 801e32e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e332:	3b30      	subs	r3, #48	; 0x30
 801e334:	2b09      	cmp	r3, #9
 801e336:	d94e      	bls.n	801e3d6 <_svfiprintf_r+0x17e>
 801e338:	b1b0      	cbz	r0, 801e368 <_svfiprintf_r+0x110>
 801e33a:	9207      	str	r2, [sp, #28]
 801e33c:	e014      	b.n	801e368 <_svfiprintf_r+0x110>
 801e33e:	eba0 0308 	sub.w	r3, r0, r8
 801e342:	fa09 f303 	lsl.w	r3, r9, r3
 801e346:	4313      	orrs	r3, r2
 801e348:	9304      	str	r3, [sp, #16]
 801e34a:	46a2      	mov	sl, r4
 801e34c:	e7d2      	b.n	801e2f4 <_svfiprintf_r+0x9c>
 801e34e:	9b03      	ldr	r3, [sp, #12]
 801e350:	1d19      	adds	r1, r3, #4
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	9103      	str	r1, [sp, #12]
 801e356:	2b00      	cmp	r3, #0
 801e358:	bfbb      	ittet	lt
 801e35a:	425b      	neglt	r3, r3
 801e35c:	f042 0202 	orrlt.w	r2, r2, #2
 801e360:	9307      	strge	r3, [sp, #28]
 801e362:	9307      	strlt	r3, [sp, #28]
 801e364:	bfb8      	it	lt
 801e366:	9204      	strlt	r2, [sp, #16]
 801e368:	7823      	ldrb	r3, [r4, #0]
 801e36a:	2b2e      	cmp	r3, #46	; 0x2e
 801e36c:	d10c      	bne.n	801e388 <_svfiprintf_r+0x130>
 801e36e:	7863      	ldrb	r3, [r4, #1]
 801e370:	2b2a      	cmp	r3, #42	; 0x2a
 801e372:	d135      	bne.n	801e3e0 <_svfiprintf_r+0x188>
 801e374:	9b03      	ldr	r3, [sp, #12]
 801e376:	1d1a      	adds	r2, r3, #4
 801e378:	681b      	ldr	r3, [r3, #0]
 801e37a:	9203      	str	r2, [sp, #12]
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	bfb8      	it	lt
 801e380:	f04f 33ff 	movlt.w	r3, #4294967295
 801e384:	3402      	adds	r4, #2
 801e386:	9305      	str	r3, [sp, #20]
 801e388:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e454 <_svfiprintf_r+0x1fc>
 801e38c:	7821      	ldrb	r1, [r4, #0]
 801e38e:	2203      	movs	r2, #3
 801e390:	4650      	mov	r0, sl
 801e392:	f7e1 ff1d 	bl	80001d0 <memchr>
 801e396:	b140      	cbz	r0, 801e3aa <_svfiprintf_r+0x152>
 801e398:	2340      	movs	r3, #64	; 0x40
 801e39a:	eba0 000a 	sub.w	r0, r0, sl
 801e39e:	fa03 f000 	lsl.w	r0, r3, r0
 801e3a2:	9b04      	ldr	r3, [sp, #16]
 801e3a4:	4303      	orrs	r3, r0
 801e3a6:	3401      	adds	r4, #1
 801e3a8:	9304      	str	r3, [sp, #16]
 801e3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3ae:	4826      	ldr	r0, [pc, #152]	; (801e448 <_svfiprintf_r+0x1f0>)
 801e3b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e3b4:	2206      	movs	r2, #6
 801e3b6:	f7e1 ff0b 	bl	80001d0 <memchr>
 801e3ba:	2800      	cmp	r0, #0
 801e3bc:	d038      	beq.n	801e430 <_svfiprintf_r+0x1d8>
 801e3be:	4b23      	ldr	r3, [pc, #140]	; (801e44c <_svfiprintf_r+0x1f4>)
 801e3c0:	bb1b      	cbnz	r3, 801e40a <_svfiprintf_r+0x1b2>
 801e3c2:	9b03      	ldr	r3, [sp, #12]
 801e3c4:	3307      	adds	r3, #7
 801e3c6:	f023 0307 	bic.w	r3, r3, #7
 801e3ca:	3308      	adds	r3, #8
 801e3cc:	9303      	str	r3, [sp, #12]
 801e3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3d0:	4433      	add	r3, r6
 801e3d2:	9309      	str	r3, [sp, #36]	; 0x24
 801e3d4:	e767      	b.n	801e2a6 <_svfiprintf_r+0x4e>
 801e3d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801e3da:	460c      	mov	r4, r1
 801e3dc:	2001      	movs	r0, #1
 801e3de:	e7a5      	b.n	801e32c <_svfiprintf_r+0xd4>
 801e3e0:	2300      	movs	r3, #0
 801e3e2:	3401      	adds	r4, #1
 801e3e4:	9305      	str	r3, [sp, #20]
 801e3e6:	4619      	mov	r1, r3
 801e3e8:	f04f 0c0a 	mov.w	ip, #10
 801e3ec:	4620      	mov	r0, r4
 801e3ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e3f2:	3a30      	subs	r2, #48	; 0x30
 801e3f4:	2a09      	cmp	r2, #9
 801e3f6:	d903      	bls.n	801e400 <_svfiprintf_r+0x1a8>
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d0c5      	beq.n	801e388 <_svfiprintf_r+0x130>
 801e3fc:	9105      	str	r1, [sp, #20]
 801e3fe:	e7c3      	b.n	801e388 <_svfiprintf_r+0x130>
 801e400:	fb0c 2101 	mla	r1, ip, r1, r2
 801e404:	4604      	mov	r4, r0
 801e406:	2301      	movs	r3, #1
 801e408:	e7f0      	b.n	801e3ec <_svfiprintf_r+0x194>
 801e40a:	ab03      	add	r3, sp, #12
 801e40c:	9300      	str	r3, [sp, #0]
 801e40e:	462a      	mov	r2, r5
 801e410:	4b0f      	ldr	r3, [pc, #60]	; (801e450 <_svfiprintf_r+0x1f8>)
 801e412:	a904      	add	r1, sp, #16
 801e414:	4638      	mov	r0, r7
 801e416:	f3af 8000 	nop.w
 801e41a:	1c42      	adds	r2, r0, #1
 801e41c:	4606      	mov	r6, r0
 801e41e:	d1d6      	bne.n	801e3ce <_svfiprintf_r+0x176>
 801e420:	89ab      	ldrh	r3, [r5, #12]
 801e422:	065b      	lsls	r3, r3, #25
 801e424:	f53f af2c 	bmi.w	801e280 <_svfiprintf_r+0x28>
 801e428:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e42a:	b01d      	add	sp, #116	; 0x74
 801e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e430:	ab03      	add	r3, sp, #12
 801e432:	9300      	str	r3, [sp, #0]
 801e434:	462a      	mov	r2, r5
 801e436:	4b06      	ldr	r3, [pc, #24]	; (801e450 <_svfiprintf_r+0x1f8>)
 801e438:	a904      	add	r1, sp, #16
 801e43a:	4638      	mov	r0, r7
 801e43c:	f7fd fb26 	bl	801ba8c <_printf_i>
 801e440:	e7eb      	b.n	801e41a <_svfiprintf_r+0x1c2>
 801e442:	bf00      	nop
 801e444:	0801f8a2 	.word	0x0801f8a2
 801e448:	0801f8ac 	.word	0x0801f8ac
 801e44c:	00000000 	.word	0x00000000
 801e450:	0801e1a1 	.word	0x0801e1a1
 801e454:	0801f8a8 	.word	0x0801f8a8

0801e458 <_read_r>:
 801e458:	b538      	push	{r3, r4, r5, lr}
 801e45a:	4d07      	ldr	r5, [pc, #28]	; (801e478 <_read_r+0x20>)
 801e45c:	4604      	mov	r4, r0
 801e45e:	4608      	mov	r0, r1
 801e460:	4611      	mov	r1, r2
 801e462:	2200      	movs	r2, #0
 801e464:	602a      	str	r2, [r5, #0]
 801e466:	461a      	mov	r2, r3
 801e468:	f7e4 f9a2 	bl	80027b0 <_read>
 801e46c:	1c43      	adds	r3, r0, #1
 801e46e:	d102      	bne.n	801e476 <_read_r+0x1e>
 801e470:	682b      	ldr	r3, [r5, #0]
 801e472:	b103      	cbz	r3, 801e476 <_read_r+0x1e>
 801e474:	6023      	str	r3, [r4, #0]
 801e476:	bd38      	pop	{r3, r4, r5, pc}
 801e478:	20005510 	.word	0x20005510
 801e47c:	00000000 	.word	0x00000000

0801e480 <nan>:
 801e480:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e488 <nan+0x8>
 801e484:	4770      	bx	lr
 801e486:	bf00      	nop
 801e488:	00000000 	.word	0x00000000
 801e48c:	7ff80000 	.word	0x7ff80000

0801e490 <_malloc_usable_size_r>:
 801e490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e494:	1f18      	subs	r0, r3, #4
 801e496:	2b00      	cmp	r3, #0
 801e498:	bfbc      	itt	lt
 801e49a:	580b      	ldrlt	r3, [r1, r0]
 801e49c:	18c0      	addlt	r0, r0, r3
 801e49e:	4770      	bx	lr

0801e4a0 <_gettimeofday>:
 801e4a0:	4b02      	ldr	r3, [pc, #8]	; (801e4ac <_gettimeofday+0xc>)
 801e4a2:	2258      	movs	r2, #88	; 0x58
 801e4a4:	601a      	str	r2, [r3, #0]
 801e4a6:	f04f 30ff 	mov.w	r0, #4294967295
 801e4aa:	4770      	bx	lr
 801e4ac:	20005510 	.word	0x20005510

0801e4b0 <_init>:
 801e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4b2:	bf00      	nop
 801e4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e4b6:	bc08      	pop	{r3}
 801e4b8:	469e      	mov	lr, r3
 801e4ba:	4770      	bx	lr

0801e4bc <_fini>:
 801e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4be:	bf00      	nop
 801e4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e4c2:	bc08      	pop	{r3}
 801e4c4:	469e      	mov	lr, r3
 801e4c6:	4770      	bx	lr
