
PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800b348  0800b348  0001b348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b49c  0800b49c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b49c  0800b49c  0001b49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4a4  0800b4a4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4a4  0800b4a4  0001b4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4a8  0800b4a8  0001b4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          000061c8  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200063cc  200063cc  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025f9d  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000471a  00000000  00000000  000461d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001de8  00000000  00000000  0004a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c68  00000000  00000000  0004c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000050dd  00000000  00000000  0004e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e62  00000000  00000000  0005341d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e210c  00000000  00000000  0007627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015838b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008528  00000000  00000000  001583dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  00160904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b330 	.word	0x0800b330

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800b330 	.word	0x0800b330

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f001 fe96 	bl	8002a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f85e 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 ffb6 	bl	8001c8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d20:	f000 f8c4 	bl	8000eac <MX_ADC1_Init>
  MX_ADC3_Init();
 8000d24:	f000 fa1c 	bl	8001160 <MX_ADC3_Init>
  MX_ADC2_Init();
 8000d28:	f000 f974 	bl	8001014 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000d2c:	f000 fada 	bl	80012e4 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000d30:	f000 fb3a 	bl	80013a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d34:	f000 fbfc 	bl	8001530 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d38:	f000 fc9a 	bl	8001670 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d3c:	f000 fd1a 	bl	8001774 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000d40:	f000 fdb0 	bl	80018a4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000d44:	f000 fe72 	bl	8001a2c <MX_TIM9_Init>
  MX_TIM12_Init();
 8000d48:	f000 feaa 	bl	8001aa0 <MX_TIM12_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d4c:	f000 ff40 	bl	8001bd0 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8000d50:	f000 ff6c 	bl	8001c2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d54:	f000 ff12 	bl	8001b7c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000d58:	f000 faf8 	bl	800134c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d5c:	f006 f99e 	bl	800709c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d60:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <main+0x98>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <main+0x9c>)
 8000d66:	f006 f9e3 	bl	8007130 <osThreadNew>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <main+0xa0>)
 8000d6e:	6013      	str	r3, [r2, #0]

  /* creation of luaTask */
  luaTaskHandle = osThreadNew(vLuaTask, NULL, &luaTask_attributes);
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <main+0xa4>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4810      	ldr	r0, [pc, #64]	; (8000db8 <main+0xa8>)
 8000d76:	f006 f9db 	bl	8007130 <osThreadNew>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <main+0xac>)
 8000d7e:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(vADCTask, NULL, &ADCTask_attributes);
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <main+0xb0>)
 8000d82:	2100      	movs	r1, #0
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <main+0xb4>)
 8000d86:	f006 f9d3 	bl	8007130 <osThreadNew>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <main+0xb8>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* creation of OutContolTask */
  OutContolTaskHandle = osThreadNew(vOutContolTask, NULL, &OutContolTask_attributes);
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <main+0xbc>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <main+0xc0>)
 8000d96:	f006 f9cb 	bl	8007130 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <main+0xc4>)
 8000d9e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000da0:	f006 f9a0 	bl	80070e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0x94>
 8000da6:	bf00      	nop
 8000da8:	0800b38c 	.word	0x0800b38c
 8000dac:	08001e8d 	.word	0x08001e8d
 8000db0:	20000bdc 	.word	0x20000bdc
 8000db4:	0800b3b0 	.word	0x0800b3b0
 8000db8:	0800b125 	.word	0x0800b125
 8000dbc:	20000be0 	.word	0x20000be0
 8000dc0:	0800b3d4 	.word	0x0800b3d4
 8000dc4:	0800a979 	.word	0x0800a979
 8000dc8:	20000be4 	.word	0x20000be4
 8000dcc:	0800b3f8 	.word	0x0800b3f8
 8000dd0:	0800ad21 	.word	0x0800ad21
 8000dd4:	20000ea4 	.word	0x20000ea4

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	; 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00a f9d8 	bl	800b19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e4c:	23a8      	movs	r3, #168	; 0xa8
 8000e4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e54:	2307      	movs	r3, #7
 8000e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 fc99 	bl	8004794 <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e68:	f001 f82a 	bl	8001ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2105      	movs	r1, #5
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fefa 	bl	8004c84 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e96:	f001 f813 	bl	8001ec0 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	; 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ebe:	4b53      	ldr	r3, [pc, #332]	; (800100c <MX_ADC1_Init+0x160>)
 8000ec0:	4a53      	ldr	r2, [pc, #332]	; (8001010 <MX_ADC1_Init+0x164>)
 8000ec2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ec4:	4b51      	ldr	r3, [pc, #324]	; (800100c <MX_ADC1_Init+0x160>)
 8000ec6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <MX_ADC1_Init+0x160>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <MX_ADC1_Init+0x160>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed8:	4b4c      	ldr	r3, [pc, #304]	; (800100c <MX_ADC1_Init+0x160>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <MX_ADC1_Init+0x160>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <MX_ADC1_Init+0x160>)
 8000ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000eee:	4b47      	ldr	r3, [pc, #284]	; (800100c <MX_ADC1_Init+0x160>)
 8000ef0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef6:	4b45      	ldr	r3, [pc, #276]	; (800100c <MX_ADC1_Init+0x160>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000efc:	4b43      	ldr	r3, [pc, #268]	; (800100c <MX_ADC1_Init+0x160>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f02:	4b42      	ldr	r3, [pc, #264]	; (800100c <MX_ADC1_Init+0x160>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <MX_ADC1_Init+0x160>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f10:	483e      	ldr	r0, [pc, #248]	; (800100c <MX_ADC1_Init+0x160>)
 8000f12:	f001 fdfd 	bl	8002b10 <HAL_ADC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f1c:	f000 ffd0 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4836      	ldr	r0, [pc, #216]	; (800100c <MX_ADC1_Init+0x160>)
 8000f32:	f001 ffb9 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f3c:	f000 ffc0 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f40:	2307      	movs	r3, #7
 8000f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	482f      	ldr	r0, [pc, #188]	; (800100c <MX_ADC1_Init+0x160>)
 8000f4e:	f001 ffab 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f58:	f000 ffb2 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f60:	2303      	movs	r3, #3
 8000f62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <MX_ADC1_Init+0x160>)
 8000f6a:	f001 ff9d 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000f74:	f000 ffa4 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4821      	ldr	r0, [pc, #132]	; (800100c <MX_ADC1_Init+0x160>)
 8000f86:	f001 ff8f 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000f90:	f000 ff96 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f94:	230e      	movs	r3, #14
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f98:	2305      	movs	r3, #5
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481a      	ldr	r0, [pc, #104]	; (800100c <MX_ADC1_Init+0x160>)
 8000fa2:	f001 ff81 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000fac:	f000 ff88 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4813      	ldr	r0, [pc, #76]	; (800100c <MX_ADC1_Init+0x160>)
 8000fbe:	f001 ff73 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000fc8:	f000 ff7a 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_ADC1_Init+0x160>)
 8000fda:	f001 ff65 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000fe4:	f000 ff6c 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fe8:	2309      	movs	r3, #9
 8000fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000fec:	2308      	movs	r3, #8
 8000fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_ADC1_Init+0x160>)
 8000ff6:	f001 ff57 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8001000:	f000 ff5e 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000220 	.word	0x20000220
 8001010:	40012000 	.word	0x40012000

08001014 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001026:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <MX_ADC2_Init+0x144>)
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <MX_ADC2_Init+0x148>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800102c:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <MX_ADC2_Init+0x144>)
 800102e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001032:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_ADC2_Init+0x144>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <MX_ADC2_Init+0x144>)
 800103c:	2201      	movs	r2, #1
 800103e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001040:	4b45      	ldr	r3, [pc, #276]	; (8001158 <MX_ADC2_Init+0x144>)
 8001042:	2200      	movs	r2, #0
 8001044:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b44      	ldr	r3, [pc, #272]	; (8001158 <MX_ADC2_Init+0x144>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <MX_ADC2_Init+0x144>)
 8001050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001056:	4b40      	ldr	r3, [pc, #256]	; (8001158 <MX_ADC2_Init+0x144>)
 8001058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105e:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <MX_ADC2_Init+0x144>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_ADC2_Init+0x144>)
 8001066:	2207      	movs	r2, #7
 8001068:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <MX_ADC2_Init+0x144>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_ADC2_Init+0x144>)
 8001074:	2201      	movs	r2, #1
 8001076:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001078:	4837      	ldr	r0, [pc, #220]	; (8001158 <MX_ADC2_Init+0x144>)
 800107a:	f001 fd49 	bl	8002b10 <HAL_ADC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001084:	f000 ff1c 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001088:	230b      	movs	r3, #11
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	482f      	ldr	r0, [pc, #188]	; (8001158 <MX_ADC2_Init+0x144>)
 800109a:	f001 ff05 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80010a4:	f000 ff0c 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4828      	ldr	r0, [pc, #160]	; (8001158 <MX_ADC2_Init+0x144>)
 80010b6:	f001 fef7 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80010c0:	f000 fefe 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010c8:	2303      	movs	r3, #3
 80010ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <MX_ADC2_Init+0x144>)
 80010d2:	f001 fee9 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80010dc:	f000 fef0 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010e0:	230d      	movs	r3, #13
 80010e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	481a      	ldr	r0, [pc, #104]	; (8001158 <MX_ADC2_Init+0x144>)
 80010ee:	f001 fedb 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 80010f8:	f000 fee2 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010fc:	230c      	movs	r3, #12
 80010fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001100:	2305      	movs	r3, #5
 8001102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <MX_ADC2_Init+0x144>)
 800110a:	f001 fecd 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 8001114:	f000 fed4 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001118:	2303      	movs	r3, #3
 800111a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800111c:	2306      	movs	r3, #6
 800111e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	4619      	mov	r1, r3
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <MX_ADC2_Init+0x144>)
 8001126:	f001 febf 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC2_Init+0x120>
  {
    Error_Handler();
 8001130:	f000 fec6 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001134:	2302      	movs	r3, #2
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001138:	2307      	movs	r3, #7
 800113a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_ADC2_Init+0x144>)
 8001142:	f001 feb1 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC2_Init+0x13c>
  {
    Error_Handler();
 800114c:	f000 feb8 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000268 	.word	0x20000268
 800115c:	40012100 	.word	0x40012100

08001160 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001172:	4b5a      	ldr	r3, [pc, #360]	; (80012dc <MX_ADC3_Init+0x17c>)
 8001174:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <MX_ADC3_Init+0x180>)
 8001176:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001178:	4b58      	ldr	r3, [pc, #352]	; (80012dc <MX_ADC3_Init+0x17c>)
 800117a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800117e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001180:	4b56      	ldr	r3, [pc, #344]	; (80012dc <MX_ADC3_Init+0x17c>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001186:	4b55      	ldr	r3, [pc, #340]	; (80012dc <MX_ADC3_Init+0x17c>)
 8001188:	2201      	movs	r2, #1
 800118a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <MX_ADC3_Init+0x17c>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001192:	4b52      	ldr	r3, [pc, #328]	; (80012dc <MX_ADC3_Init+0x17c>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800119a:	4b50      	ldr	r3, [pc, #320]	; (80012dc <MX_ADC3_Init+0x17c>)
 800119c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80011a2:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <MX_ADC3_Init+0x17c>)
 80011a4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011aa:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <MX_ADC3_Init+0x17c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 9;
 80011b0:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <MX_ADC3_Init+0x17c>)
 80011b2:	2209      	movs	r2, #9
 80011b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <MX_ADC3_Init+0x17c>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <MX_ADC3_Init+0x17c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011c4:	4845      	ldr	r0, [pc, #276]	; (80012dc <MX_ADC3_Init+0x17c>)
 80011c6:	f001 fca3 	bl	8002b10 <HAL_ADC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 80011d0:	f000 fe76 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011d4:	230e      	movs	r3, #14
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	483d      	ldr	r0, [pc, #244]	; (80012dc <MX_ADC3_Init+0x17c>)
 80011e6:	f001 fe5f 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80011f0:	f000 fe66 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011f4:	2309      	movs	r3, #9
 80011f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	4836      	ldr	r0, [pc, #216]	; (80012dc <MX_ADC3_Init+0x17c>)
 8001202:	f001 fe51 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800120c:	f000 fe58 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001210:	2307      	movs	r3, #7
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001214:	2303      	movs	r3, #3
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	482f      	ldr	r0, [pc, #188]	; (80012dc <MX_ADC3_Init+0x17c>)
 800121e:	f001 fe43 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8001228:	f000 fe4a 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800122c:	2304      	movs	r3, #4
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4828      	ldr	r0, [pc, #160]	; (80012dc <MX_ADC3_Init+0x17c>)
 800123a:	f001 fe35 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001244:	f000 fe3c 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001248:	230f      	movs	r3, #15
 800124a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800124c:	2305      	movs	r3, #5
 800124e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <MX_ADC3_Init+0x17c>)
 8001256:	f001 fe27 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC3_Init+0x104>
  {
    Error_Handler();
 8001260:	f000 fe2e 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001264:	2308      	movs	r3, #8
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001268:	2306      	movs	r3, #6
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <MX_ADC3_Init+0x17c>)
 8001272:	f001 fe19 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 800127c:	f000 fe20 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001280:	230a      	movs	r3, #10
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001284:	2307      	movs	r3, #7
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_ADC3_Init+0x17c>)
 800128e:	f001 fe0b 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 8001298:	f000 fe12 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800129c:	2306      	movs	r3, #6
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012a0:	2308      	movs	r3, #8
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_ADC3_Init+0x17c>)
 80012aa:	f001 fdfd 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC3_Init+0x158>
  {
    Error_Handler();
 80012b4:	f000 fe04 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012b8:	2305      	movs	r3, #5
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80012bc:	2309      	movs	r3, #9
 80012be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_ADC3_Init+0x17c>)
 80012c6:	f001 fdef 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 80012d0:	f000 fdf6 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200002b0 	.word	0x200002b0
 80012e0:	40012200 	.word	0x40012200

080012e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_CAN1_Init+0x60>)
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <MX_CAN1_Init+0x64>)
 80012ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_CAN1_Init+0x60>)
 80012f0:	2210      	movs	r2, #16
 80012f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_CAN1_Init+0x60>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_CAN1_Init+0x60>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_CAN1_Init+0x60>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_CAN1_Init+0x60>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <MX_CAN1_Init+0x60>)
 800130e:	2200      	movs	r2, #0
 8001310:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_CAN1_Init+0x60>)
 8001314:	2200      	movs	r2, #0
 8001316:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_CAN1_Init+0x60>)
 800131a:	2200      	movs	r2, #0
 800131c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_CAN1_Init+0x60>)
 8001320:	2200      	movs	r2, #0
 8001322:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_CAN1_Init+0x60>)
 8001326:	2200      	movs	r2, #0
 8001328:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_CAN1_Init+0x60>)
 800132c:	2200      	movs	r2, #0
 800132e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_CAN1_Init+0x60>)
 8001332:	f002 f859 	bl	80033e8 <HAL_CAN_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800133c:	f000 fdc0 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000418 	.word	0x20000418
 8001348:	40006400 	.word	0x40006400

0800134c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_I2C2_Init+0x50>)
 8001352:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <MX_I2C2_Init+0x54>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_I2C2_Init+0x50>)
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_I2C2_Init+0x58>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_I2C2_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_I2C2_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_I2C2_Init+0x50>)
 800136a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800136e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_I2C2_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_I2C2_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_I2C2_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_I2C2_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_I2C2_Init+0x50>)
 800138a:	f002 ffa1 	bl	80042d0 <HAL_I2C_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001394:	f000 fd94 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000440 	.word	0x20000440
 80013a0:	40005800 	.word	0x40005800
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b096      	sub	sp, #88	; 0x58
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2220      	movs	r2, #32
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f009 fedb 	bl	800b19c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e6:	4b50      	ldr	r3, [pc, #320]	; (8001528 <MX_TIM1_Init+0x180>)
 80013e8:	4a50      	ldr	r2, [pc, #320]	; (800152c <MX_TIM1_Init+0x184>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013ec:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <MX_TIM1_Init+0x180>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <MX_TIM1_Init+0x180>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013f8:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <MX_TIM1_Init+0x180>)
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b49      	ldr	r3, [pc, #292]	; (8001528 <MX_TIM1_Init+0x180>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001406:	4b48      	ldr	r3, [pc, #288]	; (8001528 <MX_TIM1_Init+0x180>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b46      	ldr	r3, [pc, #280]	; (8001528 <MX_TIM1_Init+0x180>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001412:	4845      	ldr	r0, [pc, #276]	; (8001528 <MX_TIM1_Init+0x180>)
 8001414:	f003 fe88 	bl	8005128 <HAL_TIM_Base_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800141e:	f000 fd4f 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001428:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800142c:	4619      	mov	r1, r3
 800142e:	483e      	ldr	r0, [pc, #248]	; (8001528 <MX_TIM1_Init+0x180>)
 8001430:	f004 fb4a 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800143a:	f000 fd41 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143e:	483a      	ldr	r0, [pc, #232]	; (8001528 <MX_TIM1_Init+0x180>)
 8001440:	f003 ff8b 	bl	800535a <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800144a:	f000 fd39 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800145a:	4619      	mov	r1, r3
 800145c:	4832      	ldr	r0, [pc, #200]	; (8001528 <MX_TIM1_Init+0x180>)
 800145e:	f004 ff33 	bl	80062c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001468:	f000 fd2a 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	2200      	movs	r2, #0
 800148e:	4619      	mov	r1, r3
 8001490:	4825      	ldr	r0, [pc, #148]	; (8001528 <MX_TIM1_Init+0x180>)
 8001492:	f004 fa57 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800149c:	f000 fd10 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	2204      	movs	r2, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	481f      	ldr	r0, [pc, #124]	; (8001528 <MX_TIM1_Init+0x180>)
 80014aa:	f004 fa4b 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014b4:	f000 fd04 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	2208      	movs	r2, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	4819      	ldr	r0, [pc, #100]	; (8001528 <MX_TIM1_Init+0x180>)
 80014c2:	f004 fa3f 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014cc:	f000 fcf8 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	220c      	movs	r2, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4813      	ldr	r0, [pc, #76]	; (8001528 <MX_TIM1_Init+0x180>)
 80014da:	f004 fa33 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80014e4:	f000 fcec 	bl	8001ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001500:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM1_Init+0x180>)
 800150c:	f004 ff58 	bl	80063c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001516:	f000 fcd3 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM1_Init+0x180>)
 800151c:	f000 fff0 	bl	8002500 <HAL_TIM_MspPostInit>

}
 8001520:	bf00      	nop
 8001522:	3758      	adds	r7, #88	; 0x58
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000494 	.word	0x20000494
 800152c:	40010000 	.word	0x40010000

08001530 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001560:	4b42      	ldr	r3, [pc, #264]	; (800166c <MX_TIM2_Init+0x13c>)
 8001562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001566:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42;
 8001568:	4b40      	ldr	r3, [pc, #256]	; (800166c <MX_TIM2_Init+0x13c>)
 800156a:	222a      	movs	r2, #42	; 0x2a
 800156c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <MX_TIM2_Init+0x13c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001574:	4b3d      	ldr	r3, [pc, #244]	; (800166c <MX_TIM2_Init+0x13c>)
 8001576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800157a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <MX_TIM2_Init+0x13c>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <MX_TIM2_Init+0x13c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001588:	4838      	ldr	r0, [pc, #224]	; (800166c <MX_TIM2_Init+0x13c>)
 800158a:	f003 fdcd 	bl	8005128 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001594:	f000 fc94 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800159e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4831      	ldr	r0, [pc, #196]	; (800166c <MX_TIM2_Init+0x13c>)
 80015a6:	f004 fa8f 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015b0:	f000 fc86 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80015b4:	482d      	ldr	r0, [pc, #180]	; (800166c <MX_TIM2_Init+0x13c>)
 80015b6:	f003 fe77 	bl	80052a8 <HAL_TIM_OC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015c0:	f000 fc7e 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015c4:	4829      	ldr	r0, [pc, #164]	; (800166c <MX_TIM2_Init+0x13c>)
 80015c6:	f003 fec8 	bl	800535a <HAL_TIM_PWM_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80015d0:	f000 fc76 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	4619      	mov	r1, r3
 80015e2:	4822      	ldr	r0, [pc, #136]	; (800166c <MX_TIM2_Init+0x13c>)
 80015e4:	f004 fe70 	bl	80062c8 <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80015ee:	f000 fc67 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	4818      	ldr	r0, [pc, #96]	; (800166c <MX_TIM2_Init+0x13c>)
 800160a:	f004 f93f 	bl	800588c <HAL_TIM_OC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001614:	f000 fc54 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	2360      	movs	r3, #96	; 0x60
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2204      	movs	r2, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4812      	ldr	r0, [pc, #72]	; (800166c <MX_TIM2_Init+0x13c>)
 8001624:	f004 f98e 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800162e:	f000 fc47 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2208      	movs	r2, #8
 8001636:	4619      	mov	r1, r3
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <MX_TIM2_Init+0x13c>)
 800163a:	f004 f983 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001644:	f000 fc3c 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	220c      	movs	r2, #12
 800164c:	4619      	mov	r1, r3
 800164e:	4807      	ldr	r0, [pc, #28]	; (800166c <MX_TIM2_Init+0x13c>)
 8001650:	f004 f978 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800165a:	f000 fc31 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800165e:	4803      	ldr	r0, [pc, #12]	; (800166c <MX_TIM2_Init+0x13c>)
 8001660:	f000 ff4e 	bl	8002500 <HAL_TIM_MspPostInit>

}
 8001664:	bf00      	nop
 8001666:	3738      	adds	r7, #56	; 0x38
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200004dc 	.word	0x200004dc

08001670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	615a      	str	r2, [r3, #20]
 800169e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <MX_TIM3_Init+0xfc>)
 80016a2:	4a33      	ldr	r2, [pc, #204]	; (8001770 <MX_TIM3_Init+0x100>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <MX_TIM3_Init+0xfc>)
 80016a8:	222a      	movs	r2, #42	; 0x2a
 80016aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <MX_TIM3_Init+0xfc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <MX_TIM3_Init+0xfc>)
 80016b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <MX_TIM3_Init+0xfc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <MX_TIM3_Init+0xfc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c6:	4829      	ldr	r0, [pc, #164]	; (800176c <MX_TIM3_Init+0xfc>)
 80016c8:	f003 fd2e 	bl	8005128 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016d2:	f000 fbf5 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e0:	4619      	mov	r1, r3
 80016e2:	4822      	ldr	r0, [pc, #136]	; (800176c <MX_TIM3_Init+0xfc>)
 80016e4:	f004 f9f0 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016ee:	f000 fbe7 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016f2:	481e      	ldr	r0, [pc, #120]	; (800176c <MX_TIM3_Init+0xfc>)
 80016f4:	f003 fe31 	bl	800535a <HAL_TIM_PWM_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016fe:	f000 fbdf 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	4619      	mov	r1, r3
 8001710:	4816      	ldr	r0, [pc, #88]	; (800176c <MX_TIM3_Init+0xfc>)
 8001712:	f004 fdd9 	bl	80062c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800171c:	f000 fbd0 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001720:	2360      	movs	r3, #96	; 0x60
 8001722:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_TIM3_Init+0xfc>)
 8001738:	f004 f904 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001742:	f000 fbbd 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2204      	movs	r2, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4807      	ldr	r0, [pc, #28]	; (800176c <MX_TIM3_Init+0xfc>)
 800174e:	f004 f8f9 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001758:	f000 fbb2 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <MX_TIM3_Init+0xfc>)
 800175e:	f000 fecf 	bl	8002500 <HAL_TIM_MspPostInit>

}
 8001762:	bf00      	nop
 8001764:	3738      	adds	r7, #56	; 0x38
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000524 	.word	0x20000524
 8001770:	40000400 	.word	0x40000400

08001774 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <MX_TIM4_Init+0x128>)
 80017a6:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <MX_TIM4_Init+0x12c>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <MX_TIM4_Init+0x128>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <MX_TIM4_Init+0x128>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <MX_TIM4_Init+0x128>)
 80017b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <MX_TIM4_Init+0x128>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <MX_TIM4_Init+0x128>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017ca:	4834      	ldr	r0, [pc, #208]	; (800189c <MX_TIM4_Init+0x128>)
 80017cc:	f003 fcac 	bl	8005128 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80017d6:	f000 fb73 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e4:	4619      	mov	r1, r3
 80017e6:	482d      	ldr	r0, [pc, #180]	; (800189c <MX_TIM4_Init+0x128>)
 80017e8:	f004 f96e 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80017f2:	f000 fb65 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017f6:	4829      	ldr	r0, [pc, #164]	; (800189c <MX_TIM4_Init+0x128>)
 80017f8:	f003 fdaf 	bl	800535a <HAL_TIM_PWM_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001802:	f000 fb5d 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	4619      	mov	r1, r3
 8001814:	4821      	ldr	r0, [pc, #132]	; (800189c <MX_TIM4_Init+0x128>)
 8001816:	f004 fd57 	bl	80062c8 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001820:	f000 fb4e 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001824:	2360      	movs	r3, #96	; 0x60
 8001826:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	4818      	ldr	r0, [pc, #96]	; (800189c <MX_TIM4_Init+0x128>)
 800183c:	f004 f882 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001846:	f000 fb3b 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2204      	movs	r2, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4812      	ldr	r0, [pc, #72]	; (800189c <MX_TIM4_Init+0x128>)
 8001852:	f004 f877 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800185c:	f000 fb30 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2208      	movs	r2, #8
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_TIM4_Init+0x128>)
 8001868:	f004 f86c 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001872:	f000 fb25 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	220c      	movs	r2, #12
 800187a:	4619      	mov	r1, r3
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <MX_TIM4_Init+0x128>)
 800187e:	f004 f861 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001888:	f000 fb1a 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <MX_TIM4_Init+0x128>)
 800188e:	f000 fe37 	bl	8002500 <HAL_TIM_MspPostInit>

}
 8001892:	bf00      	nop
 8001894:	3738      	adds	r7, #56	; 0x38
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000056c 	.word	0x2000056c
 80018a0:	40000800 	.word	0x40000800

080018a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b096      	sub	sp, #88	; 0x58
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2220      	movs	r2, #32
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f009 fc5d 	bl	800b19c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018e2:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <MX_TIM8_Init+0x180>)
 80018e4:	4a50      	ldr	r2, [pc, #320]	; (8001a28 <MX_TIM8_Init+0x184>)
 80018e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 42;
 80018e8:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <MX_TIM8_Init+0x180>)
 80018ea:	222a      	movs	r2, #42	; 0x2a
 80018ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <MX_TIM8_Init+0x180>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <MX_TIM8_Init+0x180>)
 80018f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <MX_TIM8_Init+0x180>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <MX_TIM8_Init+0x180>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <MX_TIM8_Init+0x180>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800190e:	4845      	ldr	r0, [pc, #276]	; (8001a24 <MX_TIM8_Init+0x180>)
 8001910:	f003 fc0a 	bl	8005128 <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800191a:	f000 fad1 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001928:	4619      	mov	r1, r3
 800192a:	483e      	ldr	r0, [pc, #248]	; (8001a24 <MX_TIM8_Init+0x180>)
 800192c:	f004 f8cc 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001936:	f000 fac3 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800193a:	483a      	ldr	r0, [pc, #232]	; (8001a24 <MX_TIM8_Init+0x180>)
 800193c:	f003 fd0d 	bl	800535a <HAL_TIM_PWM_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001946:	f000 fabb 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800194a:	2320      	movs	r3, #32
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001956:	4619      	mov	r1, r3
 8001958:	4832      	ldr	r0, [pc, #200]	; (8001a24 <MX_TIM8_Init+0x180>)
 800195a:	f004 fcb5 	bl	80062c8 <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001964:	f000 faac 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001968:	2360      	movs	r3, #96	; 0x60
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	4825      	ldr	r0, [pc, #148]	; (8001a24 <MX_TIM8_Init+0x180>)
 800198e:	f003 ffd9 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001998:	f000 fa92 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	2204      	movs	r2, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	481f      	ldr	r0, [pc, #124]	; (8001a24 <MX_TIM8_Init+0x180>)
 80019a6:	f003 ffcd 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80019b0:	f000 fa86 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	2208      	movs	r2, #8
 80019ba:	4619      	mov	r1, r3
 80019bc:	4819      	ldr	r0, [pc, #100]	; (8001a24 <MX_TIM8_Init+0x180>)
 80019be:	f003 ffc1 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80019c8:	f000 fa7a 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	220c      	movs	r2, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	4813      	ldr	r0, [pc, #76]	; (8001a24 <MX_TIM8_Init+0x180>)
 80019d6:	f003 ffb5 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80019e0:	f000 fa6e 	bl	8001ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MX_TIM8_Init+0x180>)
 8001a08:	f004 fcda 	bl	80063c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001a12:	f000 fa55 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <MX_TIM8_Init+0x180>)
 8001a18:	f000 fd72 	bl	8002500 <HAL_TIM_MspPostInit>

}
 8001a1c:	bf00      	nop
 8001a1e:	3758      	adds	r7, #88	; 0x58
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200005b4 	.word	0x200005b4
 8001a28:	40010400 	.word	0x40010400

08001a2c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	463b      	mov	r3, r7
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_TIM9_Init+0x6c>)
 8001a40:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <MX_TIM9_Init+0x70>)
 8001a42:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_TIM9_Init+0x6c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_TIM9_Init+0x6c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_TIM9_Init+0x6c>)
 8001a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a56:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_TIM9_Init+0x6c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_TIM9_Init+0x6c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM9_Init+0x6c>)
 8001a66:	f003 fb5f 	bl	8005128 <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001a70:	f000 fa26 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <MX_TIM9_Init+0x6c>)
 8001a80:	f004 f822 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001a8a:	f000 fa19 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200005fc 	.word	0x200005fc
 8001a9c:	40014000 	.word	0x40014000

08001aa0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <MX_TIM12_Init+0xd8>)
 8001aca:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ade:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001aec:	4821      	ldr	r0, [pc, #132]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001aee:	f003 fb1b 	bl	8005128 <HAL_TIM_Base_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001af8:	f000 f9e2 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b00:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	4619      	mov	r1, r3
 8001b08:	481a      	ldr	r0, [pc, #104]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001b0a:	f003 ffdd 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001b14:	f000 f9d4 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b18:	4816      	ldr	r0, [pc, #88]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001b1a:	f003 fc1e 	bl	800535a <HAL_TIM_PWM_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001b24:	f000 f9cc 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b28:	2360      	movs	r3, #96	; 0x60
 8001b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001b40:	f003 ff00 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001b4a:	f000 f9b9 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2204      	movs	r2, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001b56:	f003 fef5 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001b60:	f000 f9ae 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM12_Init+0xd4>)
 8001b66:	f000 fccb 	bl	8002500 <HAL_TIM_MspPostInit>

}
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	; 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000644 	.word	0x20000644
 8001b78:	40001800 	.word	0x40001800

08001b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <MX_USART2_UART_Init+0x50>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f004 fc6a 	bl	800648c <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bbe:	f000 f97f 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000068c 	.word	0x2000068c
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bde:	2204      	movs	r2, #4
 8001be0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001be4:	2202      	movs	r2, #2
 8001be6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c14:	f002 fca0 	bl	8004558 <HAL_PCD_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c1e:	f000 f94f 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200006d0 	.word	0x200006d0

08001c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_DMA_Init+0x5c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <MX_DMA_Init+0x5c>)
 8001c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_DMA_Init+0x5c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2105      	movs	r1, #5
 8001c52:	2038      	movs	r0, #56	; 0x38
 8001c54:	f001 fd7c 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c58:	2038      	movs	r0, #56	; 0x38
 8001c5a:	f001 fd95 	bl	8003788 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2105      	movs	r1, #5
 8001c62:	203a      	movs	r0, #58	; 0x3a
 8001c64:	f001 fd74 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c68:	203a      	movs	r0, #58	; 0x3a
 8001c6a:	f001 fd8d 	bl	8003788 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2105      	movs	r1, #5
 8001c72:	203c      	movs	r0, #60	; 0x3c
 8001c74:	f001 fd6c 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001c78:	203c      	movs	r0, #60	; 0x3c
 8001c7a:	f001 fd85 	bl	8003788 <HAL_NVIC_EnableIRQ>

}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	; 0x38
 8001c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a72      	ldr	r2, [pc, #456]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001cac:	f043 0310 	orr.w	r3, r3, #16
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a6b      	ldr	r2, [pc, #428]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b69      	ldr	r3, [pc, #420]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a64      	ldr	r2, [pc, #400]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	4b5e      	ldr	r3, [pc, #376]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a5d      	ldr	r2, [pc, #372]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b4d      	ldr	r3, [pc, #308]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a41      	ldr	r2, [pc, #260]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <MX_GPIO_Init+0x1e8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 8001d82:	2201      	movs	r2, #1
 8001d84:	f641 413e 	movw	r1, #7230	; 0x1c3e
 8001d88:	483b      	ldr	r0, [pc, #236]	; (8001e78 <MX_GPIO_Init+0x1ec>)
 8001d8a:	f002 fa87 	bl	800429c <HAL_GPIO_WritePin>
                          |Cs_Dis8_17_18_Pin|Cs_Dis8_15_16_Pin|Cs_Dis20_3_Pin|Cs_Dis20_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cs_Dis20_6_GPIO_Port, Cs_Dis20_6_Pin, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	483a      	ldr	r0, [pc, #232]	; (8001e7c <MX_GPIO_Init+0x1f0>)
 8001d94:	f002 fa82 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin, GPIO_PIN_SET);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001d9e:	4838      	ldr	r0, [pc, #224]	; (8001e80 <MX_GPIO_Init+0x1f4>)
 8001da0:	f002 fa7c 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	21c0      	movs	r1, #192	; 0xc0
 8001da8:	4833      	ldr	r0, [pc, #204]	; (8001e78 <MX_GPIO_Init+0x1ec>)
 8001daa:	f002 fa77 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Din3_Pin Din4_Pin Din5_Pin Din6_Pin
                           Din7_Pin Din1_Pin Din2_Pin */
  GPIO_InitStruct.Pin = Din3_Pin|Din4_Pin|Din5_Pin|Din6_Pin
 8001dae:	237f      	movs	r3, #127	; 0x7f
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
                          |Din7_Pin|Din1_Pin|Din2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001db6:	2302      	movs	r3, #2
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	482e      	ldr	r0, [pc, #184]	; (8001e7c <MX_GPIO_Init+0x1f0>)
 8001dc2:	f002 f8cf 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Din10_Pin Din11_Pin Din12_Pin */
  GPIO_InitStruct.Pin = Din10_Pin|Din11_Pin|Din12_Pin;
 8001dc6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	482a      	ldr	r0, [pc, #168]	; (8001e84 <MX_GPIO_Init+0x1f8>)
 8001ddc:	f002 f8c2 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cs_Dis20_5_Pin Cs_Dis20_2_Pin Cs_Dis20_1_Pin Cs_Dis8_13_14_Pin
                           Cs_Dis8_17_18_Pin PG6 PG7 Cs_Dis8_15_16_Pin
                           Cs_Dis20_3_Pin Cs_Dis20_4_Pin */
  GPIO_InitStruct.Pin = Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 8001de0:	f641 43fe 	movw	r3, #7422	; 0x1cfe
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
                          |Cs_Dis8_17_18_Pin|GPIO_PIN_6|GPIO_PIN_7|Cs_Dis8_15_16_Pin
                          |Cs_Dis20_3_Pin|Cs_Dis20_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df6:	4619      	mov	r1, r3
 8001df8:	481f      	ldr	r0, [pc, #124]	; (8001e78 <MX_GPIO_Init+0x1ec>)
 8001dfa:	f002 f8b3 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cs_Dis20_6_Pin */
  GPIO_InitStruct.Pin = Cs_Dis20_6_Pin;
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Cs_Dis20_6_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e12:	4619      	mov	r1, r3
 8001e14:	4819      	ldr	r0, [pc, #100]	; (8001e7c <MX_GPIO_Init+0x1f0>)
 8001e16:	f002 f8a5 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cs_Dis8_9_10_Pin */
  GPIO_InitStruct.Pin = Cs_Dis8_9_10_Pin;
 8001e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cs_Dis8_9_10_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4813      	ldr	r0, [pc, #76]	; (8001e7c <MX_GPIO_Init+0x1f0>)
 8001e30:	f002 f898 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cs_Dis8_11_12_Pin Cs_Dis20_7_Pin Cs_Dis8_19_20_Pin Cs_Dis20_8_Pin */
  GPIO_InitStruct.Pin = Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin;
 8001e34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <MX_GPIO_Init+0x1f4>)
 8001e4e:	f002 f889 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Din9_Pin Din8_Pin */
  GPIO_InitStruct.Pin = Din9_Pin|Din8_Pin;
 8001e52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4808      	ldr	r0, [pc, #32]	; (8001e88 <MX_GPIO_Init+0x1fc>)
 8001e68:	f002 f87c 	bl	8003f64 <HAL_GPIO_Init>

}
 8001e6c:	bf00      	nop
 8001e6e:	3738      	adds	r7, #56	; 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021400 	.word	0x40021400
 8001e88:	40020400 	.word	0x40020400

08001e8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e94:	2001      	movs	r0, #1
 8001e96:	f005 f9dd 	bl	8007254 <osDelay>
 8001e9a:	e7fb      	b.n	8001e94 <StartDefaultTask+0x8>

08001e9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eae:	f000 fdeb 	bl	8002a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40002000 	.word	0x40002000

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <Error_Handler+0x8>
	...

08001ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_MspInit+0x54>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_MspInit+0x54>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_MspInit+0x54>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_MspInit+0x54>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <HAL_MspInit+0x54>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_MspInit+0x54>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	f06f 0001 	mvn.w	r0, #1
 8001f12:	f001 fc1d 	bl	8003750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b092      	sub	sp, #72	; 0x48
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a84      	ldr	r2, [pc, #528]	; (8002154 <HAL_ADC_MspInit+0x230>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f040 808c 	bne.w	8002060 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f4c:	4b82      	ldr	r3, [pc, #520]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	4a81      	ldr	r2, [pc, #516]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6453      	str	r3, [r2, #68]	; 0x44
 8001f58:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
 8001f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f68:	4b7b      	ldr	r3, [pc, #492]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a7a      	ldr	r2, [pc, #488]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
 8001f74:	4b78      	ldr	r3, [pc, #480]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f84:	4b74      	ldr	r3, [pc, #464]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4a73      	ldr	r2, [pc, #460]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f90:	4b71      	ldr	r3, [pc, #452]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a6c      	ldr	r2, [pc, #432]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = CS20_7_Pin|CS8_20_Pin|CS8_19_Pin|CS20_8_Pin;
 8001fb8:	23f0      	movs	r3, #240	; 0xf0
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4864      	ldr	r0, [pc, #400]	; (800215c <HAL_ADC_MspInit+0x238>)
 8001fcc:	f001 ffca 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_4_Pin|ADC1_5_Pin;
 8001fd0:	2330      	movs	r3, #48	; 0x30
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	485f      	ldr	r0, [pc, #380]	; (8002160 <HAL_ADC_MspInit+0x23c>)
 8001fe4:	f001 ffbe 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_8_Pin|ADC1_9_Pin;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fec:	2303      	movs	r3, #3
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	485a      	ldr	r0, [pc, #360]	; (8002164 <HAL_ADC_MspInit+0x240>)
 8001ffc:	f001 ffb2 	bl	8003f64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002000:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_ADC_MspInit+0x244>)
 8002002:	4a5a      	ldr	r2, [pc, #360]	; (800216c <HAL_ADC_MspInit+0x248>)
 8002004:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002006:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HAL_ADC_MspInit+0x244>)
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200c:	4b56      	ldr	r3, [pc, #344]	; (8002168 <HAL_ADC_MspInit+0x244>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002012:	4b55      	ldr	r3, [pc, #340]	; (8002168 <HAL_ADC_MspInit+0x244>)
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_ADC_MspInit+0x244>)
 800201a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002020:	4b51      	ldr	r3, [pc, #324]	; (8002168 <HAL_ADC_MspInit+0x244>)
 8002022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002026:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002028:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <HAL_ADC_MspInit+0x244>)
 800202a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800202e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002030:	4b4d      	ldr	r3, [pc, #308]	; (8002168 <HAL_ADC_MspInit+0x244>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002036:	4b4c      	ldr	r3, [pc, #304]	; (8002168 <HAL_ADC_MspInit+0x244>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800203c:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <HAL_ADC_MspInit+0x244>)
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002042:	4849      	ldr	r0, [pc, #292]	; (8002168 <HAL_ADC_MspInit+0x244>)
 8002044:	f001 fbae 	bl	80037a4 <HAL_DMA_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 800204e:	f7ff ff37 	bl	8001ec0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a44      	ldr	r2, [pc, #272]	; (8002168 <HAL_ADC_MspInit+0x244>)
 8002056:	639a      	str	r2, [r3, #56]	; 0x38
 8002058:	4a43      	ldr	r2, [pc, #268]	; (8002168 <HAL_ADC_MspInit+0x244>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800205e:	e105      	b.n	800226c <HAL_ADC_MspInit+0x348>
  else if(hadc->Instance==ADC2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_ADC_MspInit+0x24c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	f040 8088 	bne.w	800217c <HAL_ADC_MspInit+0x258>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8002076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207a:	6453      	str	r3, [r2, #68]	; 0x44
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_ADC_MspInit+0x234>)
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_ADC_MspInit+0x234>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4a31      	ldr	r2, [pc, #196]	; (8002158 <HAL_ADC_MspInit+0x234>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6313      	str	r3, [r2, #48]	; 0x30
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_ADC_MspInit+0x234>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_ADC_MspInit+0x234>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <HAL_ADC_MspInit+0x234>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_ADC_MspInit+0x234>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS20_4_Pin|CS8_10_Pin|CS8_9_Pin;
 80020c0:	230e      	movs	r3, #14
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c4:	2303      	movs	r3, #3
 80020c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020d0:	4619      	mov	r1, r3
 80020d2:	4823      	ldr	r0, [pc, #140]	; (8002160 <HAL_ADC_MspInit+0x23c>)
 80020d4:	f001 ff46 	bl	8003f64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS20_5_Pin|CS20_6_Pin|CS8_12_Pin|CS8_11_Pin;
 80020d8:	230f      	movs	r3, #15
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020dc:	2303      	movs	r3, #3
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020e8:	4619      	mov	r1, r3
 80020ea:	481c      	ldr	r0, [pc, #112]	; (800215c <HAL_ADC_MspInit+0x238>)
 80020ec:	f001 ff3a 	bl	8003f64 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_ADC_MspInit+0x250>)
 80020f2:	4a21      	ldr	r2, [pc, #132]	; (8002178 <HAL_ADC_MspInit+0x254>)
 80020f4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_ADC_MspInit+0x250>)
 80020f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_ADC_MspInit+0x250>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_ADC_MspInit+0x250>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_ADC_MspInit+0x250>)
 800210c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002110:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_ADC_MspInit+0x250>)
 8002114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002118:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_ADC_MspInit+0x250>)
 800211c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002120:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_ADC_MspInit+0x250>)
 8002124:	2200      	movs	r2, #0
 8002126:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_ADC_MspInit+0x250>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_ADC_MspInit+0x250>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002134:	480f      	ldr	r0, [pc, #60]	; (8002174 <HAL_ADC_MspInit+0x250>)
 8002136:	f001 fb35 	bl	80037a4 <HAL_DMA_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_ADC_MspInit+0x220>
      Error_Handler();
 8002140:	f7ff febe 	bl	8001ec0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <HAL_ADC_MspInit+0x250>)
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_ADC_MspInit+0x250>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002150:	e08c      	b.n	800226c <HAL_ADC_MspInit+0x348>
 8002152:	bf00      	nop
 8002154:	40012000 	.word	0x40012000
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020800 	.word	0x40020800
 8002164:	40020400 	.word	0x40020400
 8002168:	200002f8 	.word	0x200002f8
 800216c:	40026470 	.word	0x40026470
 8002170:	40012100 	.word	0x40012100
 8002174:	20000358 	.word	0x20000358
 8002178:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <HAL_ADC_MspInit+0x350>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d172      	bne.n	800226c <HAL_ADC_MspInit+0x348>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_ADC_MspInit+0x354>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a3a      	ldr	r2, [pc, #232]	; (8002278 <HAL_ADC_MspInit+0x354>)
 8002190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <HAL_ADC_MspInit+0x354>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_ADC_MspInit+0x354>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a33      	ldr	r2, [pc, #204]	; (8002278 <HAL_ADC_MspInit+0x354>)
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_ADC_MspInit+0x354>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_ADC_MspInit+0x354>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a2c      	ldr	r2, [pc, #176]	; (8002278 <HAL_ADC_MspInit+0x354>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_ADC_MspInit+0x354>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CS20_2_Pin|CS20_1_Pin|CS8_14_Pin|CS8_13_Pin
 80021da:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e0:	2303      	movs	r3, #3
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ec:	4619      	mov	r1, r3
 80021ee:	4823      	ldr	r0, [pc, #140]	; (800227c <HAL_ADC_MspInit+0x358>)
 80021f0:	f001 feb8 	bl	8003f64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS8_16_Pin;
 80021f4:	2301      	movs	r3, #1
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f8:	2303      	movs	r3, #3
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(CS8_16_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002204:	4619      	mov	r1, r3
 8002206:	481e      	ldr	r0, [pc, #120]	; (8002280 <HAL_ADC_MspInit+0x35c>)
 8002208:	f001 feac 	bl	8003f64 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_ADC_MspInit+0x360>)
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <HAL_ADC_MspInit+0x364>)
 8002210:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002214:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002218:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_ADC_MspInit+0x360>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800222c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002234:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002238:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800223c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002246:	2200      	movs	r2, #0
 8002248:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_ADC_MspInit+0x360>)
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002252:	f001 faa7 	bl	80037a4 <HAL_DMA_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_ADC_MspInit+0x33c>
      Error_Handler();
 800225c:	f7ff fe30 	bl	8001ec0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
 8002266:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_ADC_MspInit+0x360>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800226c:	bf00      	nop
 800226e:	3748      	adds	r7, #72	; 0x48
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40012200 	.word	0x40012200
 8002278:	40023800 	.word	0x40023800
 800227c:	40021400 	.word	0x40021400
 8002280:	40020800 	.word	0x40020800
 8002284:	200003b8 	.word	0x200003b8
 8002288:	40026410 	.word	0x40026410

0800228c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_CAN_MspInit+0x84>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12b      	bne.n	8002306 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_CAN_MspInit+0x88>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_CAN_MspInit+0x88>)
 80022b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_CAN_MspInit+0x88>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_CAN_MspInit+0x88>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_CAN_MspInit+0x88>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_CAN_MspInit+0x88>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022e6:	2303      	movs	r3, #3
 80022e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022f6:	2309      	movs	r3, #9
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <HAL_CAN_MspInit+0x8c>)
 8002302:	f001 fe2f 	bl	8003f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40006400 	.word	0x40006400
 8002314:	40023800 	.word	0x40023800
 8002318:	40020c00 	.word	0x40020c00

0800231c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_I2C_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12b      	bne.n	8002396 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800235a:	2303      	movs	r3, #3
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800235e:	2312      	movs	r3, #18
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002362:	2301      	movs	r3, #1
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800236a:	2304      	movs	r3, #4
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	480c      	ldr	r0, [pc, #48]	; (80023a8 <HAL_I2C_MspInit+0x8c>)
 8002376:	f001 fdf5 	bl	8003f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40005800 	.word	0x40005800
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40021400 	.word	0x40021400

080023ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	; (80024e4 <HAL_TIM_Base_MspInit+0x138>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10e      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a48      	ldr	r2, [pc, #288]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80023da:	e07e      	b.n	80024da <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a3e      	ldr	r2, [pc, #248]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	623b      	str	r3, [r7, #32]
 8002400:	6a3b      	ldr	r3, [r7, #32]
}
 8002402:	e06a      	b.n	80024da <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a38      	ldr	r2, [pc, #224]	; (80024ec <HAL_TIM_Base_MspInit+0x140>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10e      	bne.n	800242c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
}
 800242a:	e056      	b.n	80024da <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM4)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2f      	ldr	r2, [pc, #188]	; (80024f0 <HAL_TIM_Base_MspInit+0x144>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]
}
 8002452:	e042      	b.n	80024da <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM8)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <HAL_TIM_Base_MspInit+0x148>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d116      	bne.n	800248c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	210f      	movs	r1, #15
 800247e:	202d      	movs	r0, #45	; 0x2d
 8002480:	f001 f966 	bl	8003750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002484:	202d      	movs	r0, #45	; 0x2d
 8002486:	f001 f97f 	bl	8003788 <HAL_NVIC_EnableIRQ>
}
 800248a:	e026      	b.n	80024da <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <HAL_TIM_Base_MspInit+0x14c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]
}
 80024b2:	e012      	b.n	80024da <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM12)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_TIM_Base_MspInit+0x150>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10d      	bne.n	80024da <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80024c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_TIM_Base_MspInit+0x13c>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800
 80024f4:	40010400 	.word	0x40010400
 80024f8:	40014000 	.word	0x40014000
 80024fc:	40001800 	.word	0x40001800

08002500 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08e      	sub	sp, #56	; 0x38
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a7e      	ldr	r2, [pc, #504]	; (8002718 <HAL_TIM_MspPostInit+0x218>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d11f      	bne.n	8002562 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	4b7d      	ldr	r3, [pc, #500]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a7c      	ldr	r2, [pc, #496]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 800252c:	f043 0310 	orr.w	r3, r3, #16
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b7a      	ldr	r3, [pc, #488]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = InCH8_9_Pin|InCH8_10_Pin|InCH20_5_Pin|InCH20_6_Pin;
 800253e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002550:	2301      	movs	r3, #1
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002558:	4619      	mov	r1, r3
 800255a:	4871      	ldr	r0, [pc, #452]	; (8002720 <HAL_TIM_MspPostInit+0x220>)
 800255c:	f001 fd02 	bl	8003f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002560:	e0d5      	b.n	800270e <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256a:	d13e      	bne.n	80025ea <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	4a69      	ldr	r2, [pc, #420]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002576:	f043 0302 	orr.w	r3, r3, #2
 800257a:	6313      	str	r3, [r2, #48]	; 0x30
 800257c:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	4a62      	ldr	r2, [pc, #392]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6313      	str	r3, [r2, #48]	; 0x30
 8002598:	4b60      	ldr	r3, [pc, #384]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = InCH8_12_Pin|InCH8_11_Pin|InCH8_16_Pin;
 80025a4:	f640 4308 	movw	r3, #3080	; 0xc08
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025b6:	2301      	movs	r3, #1
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025be:	4619      	mov	r1, r3
 80025c0:	4858      	ldr	r0, [pc, #352]	; (8002724 <HAL_TIM_MspPostInit+0x224>)
 80025c2:	f001 fccf 	bl	8003f64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = InCH20_3_Pin;
 80025c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025d8:	2301      	movs	r3, #1
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(InCH20_3_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	4851      	ldr	r0, [pc, #324]	; (8002728 <HAL_TIM_MspPostInit+0x228>)
 80025e4:	f001 fcbe 	bl	8003f64 <HAL_GPIO_Init>
}
 80025e8:	e091      	b.n	800270e <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM3)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4f      	ldr	r2, [pc, #316]	; (800272c <HAL_TIM_MspPostInit+0x22c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d11e      	bne.n	8002632 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	4a47      	ldr	r2, [pc, #284]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	6313      	str	r3, [r2, #48]	; 0x30
 8002604:	4b45      	ldr	r3, [pc, #276]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = InCH8_15_Pin|InCH20_4_Pin;
 8002610:	2330      	movs	r3, #48	; 0x30
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002620:	2302      	movs	r3, #2
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002628:	4619      	mov	r1, r3
 800262a:	483e      	ldr	r0, [pc, #248]	; (8002724 <HAL_TIM_MspPostInit+0x224>)
 800262c:	f001 fc9a 	bl	8003f64 <HAL_GPIO_Init>
}
 8002630:	e06d      	b.n	800270e <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM4)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3e      	ldr	r2, [pc, #248]	; (8002730 <HAL_TIM_MspPostInit+0x230>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d11f      	bne.n	800267c <HAL_TIM_MspPostInit+0x17c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	4a35      	ldr	r2, [pc, #212]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002646:	f043 0308 	orr.w	r3, r3, #8
 800264a:	6313      	str	r3, [r2, #48]	; 0x30
 800264c:	4b33      	ldr	r3, [pc, #204]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = InCH8_20_Pin|InCH20_8_Pin|InCH20_1_Pin|InCH20_2_Pin;
 8002658:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800266a:	2302      	movs	r3, #2
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800266e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002672:	4619      	mov	r1, r3
 8002674:	482f      	ldr	r0, [pc, #188]	; (8002734 <HAL_TIM_MspPostInit+0x234>)
 8002676:	f001 fc75 	bl	8003f64 <HAL_GPIO_Init>
}
 800267a:	e048      	b.n	800270e <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM8)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <HAL_TIM_MspPostInit+0x238>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d11f      	bne.n	80026c6 <HAL_TIM_MspPostInit+0x1c6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a23      	ldr	r2, [pc, #140]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = InCH8_13_Pin|InCH8_14_Pin|InCH8_17_Pin|InCH8_18_Pin;
 80026a2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026b4:	2303      	movs	r3, #3
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	4619      	mov	r1, r3
 80026be:	481f      	ldr	r0, [pc, #124]	; (800273c <HAL_TIM_MspPostInit+0x23c>)
 80026c0:	f001 fc50 	bl	8003f64 <HAL_GPIO_Init>
}
 80026c4:	e023      	b.n	800270e <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM12)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_TIM_MspPostInit+0x240>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d11e      	bne.n	800270e <HAL_TIM_MspPostInit+0x20e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	6313      	str	r3, [r2, #48]	; 0x30
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_TIM_MspPostInit+0x21c>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = InCH20_7_Pin|InCH8_19_Pin;
 80026ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80026fe:	2309      	movs	r3, #9
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002706:	4619      	mov	r1, r3
 8002708:	4806      	ldr	r0, [pc, #24]	; (8002724 <HAL_TIM_MspPostInit+0x224>)
 800270a:	f001 fc2b 	bl	8003f64 <HAL_GPIO_Init>
}
 800270e:	bf00      	nop
 8002710:	3738      	adds	r7, #56	; 0x38
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000
 800271c:	40023800 	.word	0x40023800
 8002720:	40021000 	.word	0x40021000
 8002724:	40020400 	.word	0x40020400
 8002728:	40020000 	.word	0x40020000
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800
 8002734:	40020c00 	.word	0x40020c00
 8002738:	40010400 	.word	0x40010400
 800273c:	40020800 	.word	0x40020800
 8002740:	40001800 	.word	0x40001800

08002744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_UART_MspInit+0x84>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d12b      	bne.n	80027be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_UART_MspInit+0x88>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_UART_MspInit+0x88>)
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	6413      	str	r3, [r2, #64]	; 0x40
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_UART_MspInit+0x88>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_UART_MspInit+0x88>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_UART_MspInit+0x88>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_UART_MspInit+0x88>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800279e:	2360      	movs	r3, #96	; 0x60
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ae:	2307      	movs	r3, #7
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <HAL_UART_MspInit+0x8c>)
 80027ba:	f001 fbd3 	bl	8003f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027be:	bf00      	nop
 80027c0:	3728      	adds	r7, #40	; 0x28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40004400 	.word	0x40004400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020c00 	.word	0x40020c00

080027d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f4:	d13f      	bne.n	8002876 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <HAL_PCD_MspInit+0xac>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a20      	ldr	r2, [pc, #128]	; (8002880 <HAL_PCD_MspInit+0xac>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <HAL_PCD_MspInit+0xac>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002812:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002824:	230a      	movs	r3, #10
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	4815      	ldr	r0, [pc, #84]	; (8002884 <HAL_PCD_MspInit+0xb0>)
 8002830:	f001 fb98 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	480e      	ldr	r0, [pc, #56]	; (8002884 <HAL_PCD_MspInit+0xb0>)
 800284a:	f001 fb8b 	bl	8003f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <HAL_PCD_MspInit+0xac>)
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <HAL_PCD_MspInit+0xac>)
 8002854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002858:	6353      	str	r3, [r2, #52]	; 0x34
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_PCD_MspInit+0xac>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_PCD_MspInit+0xac>)
 8002864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_PCD_MspInit+0xac>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40020000 	.word	0x40020000

08002888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	202d      	movs	r0, #45	; 0x2d
 800289e:	f000 ff57 	bl	8003750 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80028a2:	202d      	movs	r0, #45	; 0x2d
 80028a4:	f000 ff70 	bl	8003788 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_InitTick+0xa4>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_InitTick+0xa4>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6413      	str	r3, [r2, #64]	; 0x40
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_InitTick+0xa4>)
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028c4:	f107 0210 	add.w	r2, r7, #16
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fbf8 	bl	80050c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80028d4:	f002 fbce 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 80028d8:	4603      	mov	r3, r0
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	4a13      	ldr	r2, [pc, #76]	; (8002930 <HAL_InitTick+0xa8>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	3b01      	subs	r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_InitTick+0xac>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_InitTick+0xb0>)
 80028f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_InitTick+0xac>)
 80028f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028f8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80028fa:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <HAL_InitTick+0xac>)
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_InitTick+0xac>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_InitTick+0xac>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800290c:	4809      	ldr	r0, [pc, #36]	; (8002934 <HAL_InitTick+0xac>)
 800290e:	f002 fc0b 	bl	8005128 <HAL_TIM_Base_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002918:	4806      	ldr	r0, [pc, #24]	; (8002934 <HAL_InitTick+0xac>)
 800291a:	f002 fc55 	bl	80051c8 <HAL_TIM_Base_Start_IT>
 800291e:	4603      	mov	r3, r0
 8002920:	e000      	b.n	8002924 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	3730      	adds	r7, #48	; 0x30
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40023800 	.word	0x40023800
 8002930:	431bde83 	.word	0x431bde83
 8002934:	20001164 	.word	0x20001164
 8002938:	40002000 	.word	0x40002000

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <NMI_Handler+0x4>

08002942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <MemManage_Handler+0x4>

0800294e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <UsageFault_Handler+0x4>

0800295a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800296e:	f002 fe85 	bl	800567c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002972:	4803      	ldr	r0, [pc, #12]	; (8002980 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002974:	f002 fe82 	bl	800567c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200005b4 	.word	0x200005b4
 8002980:	20001164 	.word	0x20001164

08002984 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	vADC_Ready(ADC1_READY);
 8002988:	2001      	movs	r0, #1
 800298a:	f008 fb89 	bl	800b0a0 <vADC_Ready>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800298e:	4802      	ldr	r0, [pc, #8]	; (8002998 <DMA2_Stream0_IRQHandler+0x14>)
 8002990:	f001 f87e 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200003b8 	.word	0x200003b8

0800299c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	vADC_Ready(ADC2_READY);
 80029a0:	2002      	movs	r0, #2
 80029a2:	f008 fb7d 	bl	800b0a0 <vADC_Ready>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80029a6:	4802      	ldr	r0, [pc, #8]	; (80029b0 <DMA2_Stream2_IRQHandler+0x14>)
 80029a8:	f001 f872 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000358 	.word	0x20000358

080029b4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */
   vADC_Ready(ADC3_READY);
 80029b8:	2004      	movs	r0, #4
 80029ba:	f008 fb71 	bl	800b0a0 <vADC_Ready>
  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029be:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA2_Stream4_IRQHandler+0x14>)
 80029c0:	f001 f866 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200002f8 	.word	0x200002f8

080029cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <SystemInit+0x20>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <SystemInit+0x20>)
 80029d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <Reset_Handler>:
 80029f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a28 <LoopFillZerobss+0x12>
 80029f4:	480d      	ldr	r0, [pc, #52]	; (8002a2c <LoopFillZerobss+0x16>)
 80029f6:	490e      	ldr	r1, [pc, #56]	; (8002a30 <LoopFillZerobss+0x1a>)
 80029f8:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <LoopFillZerobss+0x1e>)
 80029fa:	2300      	movs	r3, #0
 80029fc:	e002      	b.n	8002a04 <LoopCopyDataInit>

080029fe <CopyDataInit>:
 80029fe:	58d4      	ldr	r4, [r2, r3]
 8002a00:	50c4      	str	r4, [r0, r3]
 8002a02:	3304      	adds	r3, #4

08002a04 <LoopCopyDataInit>:
 8002a04:	18c4      	adds	r4, r0, r3
 8002a06:	428c      	cmp	r4, r1
 8002a08:	d3f9      	bcc.n	80029fe <CopyDataInit>
 8002a0a:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <LoopFillZerobss+0x22>)
 8002a0c:	4c0b      	ldr	r4, [pc, #44]	; (8002a3c <LoopFillZerobss+0x26>)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e001      	b.n	8002a16 <LoopFillZerobss>

08002a12 <FillZerobss>:
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	3204      	adds	r2, #4

08002a16 <LoopFillZerobss>:
 8002a16:	42a2      	cmp	r2, r4
 8002a18:	d3fb      	bcc.n	8002a12 <FillZerobss>
 8002a1a:	f7ff ffd7 	bl	80029cc <SystemInit>
 8002a1e:	f008 fb89 	bl	800b134 <__libc_init_array>
 8002a22:	f7fe f975 	bl	8000d10 <main>
 8002a26:	4770      	bx	lr
 8002a28:	20020000 	.word	0x20020000
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000204 	.word	0x20000204
 8002a34:	0800b4ac 	.word	0x0800b4ac
 8002a38:	20000204 	.word	0x20000204
 8002a3c:	200063cc 	.word	0x200063cc

08002a40 <ADC_IRQHandler>:
 8002a40:	e7fe      	b.n	8002a40 <ADC_IRQHandler>
	...

08002a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <HAL_Init+0x40>)
 8002a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_Init+0x40>)
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_Init+0x40>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	f000 fe64 	bl	800373a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a72:	200f      	movs	r0, #15
 8002a74:	f7ff ff08 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a78:	f7ff fa28 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00

08002a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_IncTick+0x24>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_IncTick+0x24>)
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	200011ac 	.word	0x200011ac

08002ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_GetTick+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	200011ac 	.word	0x200011ac

08002ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff ffee 	bl	8002ab0 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d005      	beq.n	8002aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_Delay+0x44>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aee:	bf00      	nop
 8002af0:	f7ff ffde 	bl	8002ab0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d8f7      	bhi.n	8002af0 <HAL_Delay+0x28>
  {
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000008 	.word	0x20000008

08002b10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e033      	b.n	8002b8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff f9f8 	bl	8001f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d118      	bne.n	8002b80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b56:	f023 0302 	bic.w	r3, r3, #2
 8002b5a:	f043 0202 	orr.w	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fac2 	bl	80030ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b7e:	e001      	b.n	8002b84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_Start_DMA+0x1e>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0e9      	b.n	8002d8a <HAL_ADC_Start_DMA+0x1f2>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d018      	beq.n	8002bfe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bdc:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_ADC_Start_DMA+0x1fc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6d      	ldr	r2, [pc, #436]	; (8002d98 <HAL_ADC_Start_DMA+0x200>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0c9a      	lsrs	r2, r3, #18
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f9      	bne.n	8002bf2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0c:	d107      	bne.n	8002c1e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	f040 80a1 	bne.w	8002d70 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d106      	bne.n	8002c7c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f023 0206 	bic.w	r2, r3, #6
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
 8002c7a:	e002      	b.n	8002c82 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c8a:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_ADC_Start_DMA+0x204>)
 8002c8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	4a43      	ldr	r2, [pc, #268]	; (8002da0 <HAL_ADC_Start_DMA+0x208>)
 8002c94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	4a42      	ldr	r2, [pc, #264]	; (8002da4 <HAL_ADC_Start_DMA+0x20c>)
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	4a41      	ldr	r2, [pc, #260]	; (8002da8 <HAL_ADC_Start_DMA+0x210>)
 8002ca4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cbe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	334c      	adds	r3, #76	; 0x4c
 8002cda:	4619      	mov	r1, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f000 fe0e 	bl	8003900 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d12a      	bne.n	8002d46 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_ADC_Start_DMA+0x214>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d015      	beq.n	8002d26 <HAL_ADC_Start_DMA+0x18e>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2c      	ldr	r2, [pc, #176]	; (8002db0 <HAL_ADC_Start_DMA+0x218>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_Start_DMA+0x178>
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_ADC_Start_DMA+0x204>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <HAL_ADC_Start_DMA+0x21c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d136      	bne.n	8002d88 <HAL_ADC_Start_DMA+0x1f0>
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_ADC_Start_DMA+0x204>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d130      	bne.n	8002d88 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d129      	bne.n	8002d88 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	e020      	b.n	8002d88 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_ADC_Start_DMA+0x214>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d11b      	bne.n	8002d88 <HAL_ADC_Start_DMA+0x1f0>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	e00b      	b.n	8002d88 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0210 	orr.w	r2, r3, #16
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000000 	.word	0x20000000
 8002d98:	431bde83 	.word	0x431bde83
 8002d9c:	40012300 	.word	0x40012300
 8002da0:	080032e5 	.word	0x080032e5
 8002da4:	0800339f 	.word	0x0800339f
 8002da8:	080033bb 	.word	0x080033bb
 8002dac:	40012000 	.word	0x40012000
 8002db0:	40012100 	.word	0x40012100
 8002db4:	40012200 	.word	0x40012200

08002db8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_Stop_DMA+0x1a>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e048      	b.n	8002e64 <HAL_ADC_Stop_DMA+0xac>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d130      	bne.n	8002e5a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e06:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d10f      	bne.n	8002e36 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fdc8 	bl	80039b0 <HAL_DMA_Abort>
 8002e20:	4603      	mov	r3, r0
 8002e22:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002e44:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1c>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e105      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x228>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	d925      	bls.n	8002f20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68d9      	ldr	r1, [r3, #12]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b1e      	subs	r3, #30
 8002eea:	2207      	movs	r2, #7
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68d9      	ldr	r1, [r3, #12]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4403      	add	r3, r0
 8002f12:	3b1e      	subs	r3, #30
 8002f14:	409a      	lsls	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	e022      	b.n	8002f66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6919      	ldr	r1, [r3, #16]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	2207      	movs	r2, #7
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	400a      	ands	r2, r1
 8002f42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6919      	ldr	r1, [r3, #16]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	4618      	mov	r0, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4403      	add	r3, r0
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d824      	bhi.n	8002fb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3b05      	subs	r3, #5
 8002f80:	221f      	movs	r2, #31
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3b05      	subs	r3, #5
 8002faa:	fa00 f203 	lsl.w	r2, r0, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb6:	e04c      	b.n	8003052 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d824      	bhi.n	800300a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b23      	subs	r3, #35	; 0x23
 8002fd2:	221f      	movs	r2, #31
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	400a      	ands	r2, r1
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	4618      	mov	r0, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3b23      	subs	r3, #35	; 0x23
 8002ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
 8003008:	e023      	b.n	8003052 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	3b41      	subs	r3, #65	; 0x41
 800301c:	221f      	movs	r2, #31
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	400a      	ands	r2, r1
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	4618      	mov	r0, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	3b41      	subs	r3, #65	; 0x41
 8003046:	fa00 f203 	lsl.w	r2, r0, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_ADC_ConfigChannel+0x234>)
 8003054:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a21      	ldr	r2, [pc, #132]	; (80030e0 <HAL_ADC_ConfigChannel+0x238>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d109      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1cc>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b12      	cmp	r3, #18
 8003066:	d105      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_ADC_ConfigChannel+0x238>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d123      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x21e>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b10      	cmp	r3, #16
 8003084:	d003      	beq.n	800308e <HAL_ADC_ConfigChannel+0x1e6>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b11      	cmp	r3, #17
 800308c:	d11b      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d111      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_ADC_ConfigChannel+0x23c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a10      	ldr	r2, [pc, #64]	; (80030e8 <HAL_ADC_ConfigChannel+0x240>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	0c9a      	lsrs	r2, r3, #18
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030b8:	e002      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3b01      	subs	r3, #1
 80030be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f9      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40012300 	.word	0x40012300
 80030e0:	40012000 	.word	0x40012000
 80030e4:	20000000 	.word	0x20000000
 80030e8:	431bde83 	.word	0x431bde83

080030ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f4:	4b79      	ldr	r3, [pc, #484]	; (80032dc <ADC_Init+0x1f0>)
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <ADC_Init+0x1f4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d022      	beq.n	80031ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003192:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6899      	ldr	r1, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e00f      	b.n	80031ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0202 	bic.w	r2, r2, #2
 80031f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7e1b      	ldrb	r3, [r3, #24]
 8003204:	005a      	lsls	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003226:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003236:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	3b01      	subs	r3, #1
 8003244:	035a      	lsls	r2, r3, #13
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	e007      	b.n	8003260 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	3b01      	subs	r3, #1
 800327c:	051a      	lsls	r2, r3, #20
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a2:	025a      	lsls	r2, r3, #9
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	029a      	lsls	r2, r3, #10
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40012300 	.word	0x40012300
 80032e0:	0f000001 	.word	0x0f000001

080032e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d13c      	bne.n	8003378 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d12b      	bne.n	8003370 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800331c:	2b00      	cmp	r3, #0
 800331e:	d127      	bne.n	8003370 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003338:	2b00      	cmp	r3, #0
 800333a:	d119      	bne.n	8003370 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0220 	bic.w	r2, r2, #32
 800334a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff fd7b 	bl	8002e6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003376:	e00e      	b.n	8003396 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fd85 	bl	8002e94 <HAL_ADC_ErrorCallback>
}
 800338a:	e004      	b.n	8003396 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff fd67 	bl	8002e80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff fd5a 	bl	8002e94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0ed      	b.n	80035d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe ff40 	bl	800228c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800341c:	f7ff fb48 	bl	8002ab0 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003422:	e012      	b.n	800344a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003424:	f7ff fb44 	bl	8002ab0 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b0a      	cmp	r3, #10
 8003430:	d90b      	bls.n	800344a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2205      	movs	r2, #5
 8003442:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0c5      	b.n	80035d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0e5      	beq.n	8003424 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0202 	bic.w	r2, r2, #2
 8003466:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003468:	f7ff fb22 	bl	8002ab0 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800346e:	e012      	b.n	8003496 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003470:	f7ff fb1e 	bl	8002ab0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b0a      	cmp	r3, #10
 800347c:	d90b      	bls.n	8003496 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2205      	movs	r2, #5
 800348e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e09f      	b.n	80035d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e5      	bne.n	8003470 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7e1b      	ldrb	r3, [r3, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d108      	bne.n	80034be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e007      	b.n	80034ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7e5b      	ldrb	r3, [r3, #25]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d108      	bne.n	80034e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e007      	b.n	80034f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	7e9b      	ldrb	r3, [r3, #26]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0220 	orr.w	r2, r2, #32
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e007      	b.n	8003522 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0220 	bic.w	r2, r2, #32
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7edb      	ldrb	r3, [r3, #27]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d108      	bne.n	800353c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0210 	bic.w	r2, r2, #16
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e007      	b.n	800354c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0210 	orr.w	r2, r2, #16
 800354a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7f1b      	ldrb	r3, [r3, #28]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d108      	bne.n	8003566 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0208 	orr.w	r2, r2, #8
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e007      	b.n	8003576 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7f5b      	ldrb	r3, [r3, #29]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d108      	bne.n	8003590 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0204 	orr.w	r2, r2, #4
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e007      	b.n	80035a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	ea42 0103 	orr.w	r1, r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <__NVIC_SetPriorityGrouping+0x44>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035fc:	4013      	ands	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800360c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003612:	4a04      	ldr	r2, [pc, #16]	; (8003624 <__NVIC_SetPriorityGrouping+0x44>)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	60d3      	str	r3, [r2, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <__NVIC_GetPriorityGrouping+0x18>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	f003 0307 	and.w	r3, r3, #7
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	2b00      	cmp	r3, #0
 8003654:	db0b      	blt.n	800366e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	f003 021f 	and.w	r2, r3, #31
 800365c:	4907      	ldr	r1, [pc, #28]	; (800367c <__NVIC_EnableIRQ+0x38>)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2001      	movs	r0, #1
 8003666:	fa00 f202 	lsl.w	r2, r0, r2
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000e100 	.word	0xe000e100

08003680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	db0a      	blt.n	80036aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	490c      	ldr	r1, [pc, #48]	; (80036cc <__NVIC_SetPriority+0x4c>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	440b      	add	r3, r1
 80036a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a8:	e00a      	b.n	80036c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4908      	ldr	r1, [pc, #32]	; (80036d0 <__NVIC_SetPriority+0x50>)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3b04      	subs	r3, #4
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	440b      	add	r3, r1
 80036be:	761a      	strb	r2, [r3, #24]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000e100 	.word	0xe000e100
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f1c3 0307 	rsb	r3, r3, #7
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf28      	it	cs
 80036f2:	2304      	movcs	r3, #4
 80036f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d902      	bls.n	8003704 <NVIC_EncodePriority+0x30>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3b03      	subs	r3, #3
 8003702:	e000      	b.n	8003706 <NVIC_EncodePriority+0x32>
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	401a      	ands	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800371c:	f04f 31ff 	mov.w	r1, #4294967295
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43d9      	mvns	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	4313      	orrs	r3, r2
         );
}
 800372e:	4618      	mov	r0, r3
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ff4c 	bl	80035e0 <__NVIC_SetPriorityGrouping>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003762:	f7ff ff61 	bl	8003628 <__NVIC_GetPriorityGrouping>
 8003766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	6978      	ldr	r0, [r7, #20]
 800376e:	f7ff ffb1 	bl	80036d4 <NVIC_EncodePriority>
 8003772:	4602      	mov	r2, r0
 8003774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ff80 	bl	8003680 <__NVIC_SetPriority>
}
 8003780:	bf00      	nop
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff54 	bl	8003644 <__NVIC_EnableIRQ>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff f97e 	bl	8002ab0 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e099      	b.n	80038f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e0:	e00f      	b.n	8003802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037e2:	f7ff f965 	bl	8002ab0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d908      	bls.n	8003802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e078      	b.n	80038f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e8      	bne.n	80037e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4b38      	ldr	r3, [pc, #224]	; (80038fc <HAL_DMA_Init+0x158>)
 800381c:	4013      	ands	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b04      	cmp	r3, #4
 800385a:	d107      	bne.n	800386c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	4313      	orrs	r3, r2
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0307 	bic.w	r3, r3, #7
 8003882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2b04      	cmp	r3, #4
 8003894:	d117      	bne.n	80038c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fadf 	bl	8003e6c <DMA_CheckFifoParam>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2240      	movs	r2, #64	; 0x40
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038c2:	2301      	movs	r3, #1
 80038c4:	e016      	b.n	80038f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa96 	bl	8003e00 <DMA_CalcBaseAndBitshift>
 80038d4:	4603      	mov	r3, r0
 80038d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	223f      	movs	r2, #63	; 0x3f
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	f010803f 	.word	0xf010803f

08003900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_DMA_Start_IT+0x26>
 8003922:	2302      	movs	r3, #2
 8003924:	e040      	b.n	80039a8 <HAL_DMA_Start_IT+0xa8>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d12f      	bne.n	800399a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fa28 	bl	8003da4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	223f      	movs	r2, #63	; 0x3f
 800395a:	409a      	lsls	r2, r3
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0216 	orr.w	r2, r2, #22
 800396e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e005      	b.n	80039a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
 80039a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039be:	f7ff f877 	bl	8002ab0 <HAL_GetTick>
 80039c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d008      	beq.n	80039e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e052      	b.n	8003a88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0216 	bic.w	r2, r2, #22
 80039f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_DMA_Abort+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0208 	bic.w	r2, r2, #8
 8003a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a32:	e013      	b.n	8003a5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a34:	f7ff f83c 	bl	8002ab0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d90c      	bls.n	8003a5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e015      	b.n	8003a88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e4      	bne.n	8003a34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	223f      	movs	r2, #63	; 0x3f
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a9c:	4b8e      	ldr	r3, [pc, #568]	; (8003cd8 <HAL_DMA_IRQHandler+0x248>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a8e      	ldr	r2, [pc, #568]	; (8003cdc <HAL_DMA_IRQHandler+0x24c>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0a9b      	lsrs	r3, r3, #10
 8003aa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	2208      	movs	r2, #8
 8003abc:	409a      	lsls	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01a      	beq.n	8003afc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0204 	bic.w	r2, r2, #4
 8003ae2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	2208      	movs	r2, #8
 8003aea:	409a      	lsls	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	2201      	movs	r2, #1
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d012      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2201      	movs	r2, #1
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f043 0202 	orr.w	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	2204      	movs	r2, #4
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d012      	beq.n	8003b68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	2204      	movs	r2, #4
 8003b56:	409a      	lsls	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d043      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d03c      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d024      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
 8003bbe:	e01f      	b.n	8003c00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01b      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
 8003bd0:	e016      	b.n	8003c00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d107      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0208 	bic.w	r2, r2, #8
 8003bee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	2220      	movs	r2, #32
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 808f 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8087 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	2220      	movs	r2, #32
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d136      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0216 	bic.w	r2, r2, #22
 8003c48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_DMA_IRQHandler+0x1da>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0208 	bic.w	r2, r2, #8
 8003c78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	223f      	movs	r2, #63	; 0x3f
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d07e      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4798      	blx	r3
        }
        return;
 8003ca6:	e079      	b.n	8003d9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d031      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
 8003cd4:	e02c      	b.n	8003d30 <HAL_DMA_IRQHandler+0x2a0>
 8003cd6:	bf00      	nop
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d023      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
 8003cf0:	e01e      	b.n	8003d30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10f      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0210 	bic.w	r2, r2, #16
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d032      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2205      	movs	r2, #5
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d307      	bcc.n	8003d78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f2      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x2cc>
 8003d76:	e000      	b.n	8003d7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
 8003d9a:	e000      	b.n	8003d9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d9c:	bf00      	nop
    }
  }
}
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d108      	bne.n	8003de4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003de2:	e007      	b.n	8003df4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	60da      	str	r2, [r3, #12]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3b10      	subs	r3, #16
 8003e10:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <DMA_CalcBaseAndBitshift+0x64>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e1a:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <DMA_CalcBaseAndBitshift+0x68>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d909      	bls.n	8003e42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e40:	e007      	b.n	8003e52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	aaaaaaab 	.word	0xaaaaaaab
 8003e68:	0800b434 	.word	0x0800b434

08003e6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11f      	bne.n	8003ec6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d856      	bhi.n	8003f3a <DMA_CheckFifoParam+0xce>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <DMA_CheckFifoParam+0x28>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb7 	.word	0x08003eb7
 8003e9c:	08003ea5 	.word	0x08003ea5
 8003ea0:	08003f3b 	.word	0x08003f3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d046      	beq.n	8003f3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb4:	e043      	b.n	8003f3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ebe:	d140      	bne.n	8003f42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec4:	e03d      	b.n	8003f42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ece:	d121      	bne.n	8003f14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d837      	bhi.n	8003f46 <DMA_CheckFifoParam+0xda>
 8003ed6:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <DMA_CheckFifoParam+0x70>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003ef3 	.word	0x08003ef3
 8003ee4:	08003eed 	.word	0x08003eed
 8003ee8:	08003f05 	.word	0x08003f05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e030      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d025      	beq.n	8003f4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f02:	e022      	b.n	8003f4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f0c:	d11f      	bne.n	8003f4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f12:	e01c      	b.n	8003f4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d903      	bls.n	8003f22 <DMA_CheckFifoParam+0xb6>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d003      	beq.n	8003f28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f20:	e018      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      break;
 8003f26:	e015      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00e      	beq.n	8003f52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      break;
 8003f38:	e00b      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e00a      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e008      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f42:	bf00      	nop
 8003f44:	e006      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f46:	bf00      	nop
 8003f48:	e004      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f52:	bf00      	nop
    }
  } 
  
  return status; 
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	; 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	e16b      	b.n	8004258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f80:	2201      	movs	r2, #1
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	f040 815a 	bne.w	8004252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d005      	beq.n	8003fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d130      	bne.n	8004018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 0201 	and.w	r2, r3, #1
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b03      	cmp	r3, #3
 8004022:	d017      	beq.n	8004054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d123      	bne.n	80040a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	08da      	lsrs	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3208      	adds	r2, #8
 8004068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	220f      	movs	r2, #15
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	08da      	lsrs	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3208      	adds	r2, #8
 80040a2:	69b9      	ldr	r1, [r7, #24]
 80040a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0203 	and.w	r2, r3, #3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80b4 	beq.w	8004252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	4b60      	ldr	r3, [pc, #384]	; (8004270 <HAL_GPIO_Init+0x30c>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	4a5f      	ldr	r2, [pc, #380]	; (8004270 <HAL_GPIO_Init+0x30c>)
 80040f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f8:	6453      	str	r3, [r2, #68]	; 0x44
 80040fa:	4b5d      	ldr	r3, [pc, #372]	; (8004270 <HAL_GPIO_Init+0x30c>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004106:	4a5b      	ldr	r2, [pc, #364]	; (8004274 <HAL_GPIO_Init+0x310>)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	3302      	adds	r3, #2
 800410e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	220f      	movs	r2, #15
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a52      	ldr	r2, [pc, #328]	; (8004278 <HAL_GPIO_Init+0x314>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02b      	beq.n	800418a <HAL_GPIO_Init+0x226>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a51      	ldr	r2, [pc, #324]	; (800427c <HAL_GPIO_Init+0x318>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d025      	beq.n	8004186 <HAL_GPIO_Init+0x222>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a50      	ldr	r2, [pc, #320]	; (8004280 <HAL_GPIO_Init+0x31c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01f      	beq.n	8004182 <HAL_GPIO_Init+0x21e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4f      	ldr	r2, [pc, #316]	; (8004284 <HAL_GPIO_Init+0x320>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d019      	beq.n	800417e <HAL_GPIO_Init+0x21a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4e      	ldr	r2, [pc, #312]	; (8004288 <HAL_GPIO_Init+0x324>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_GPIO_Init+0x216>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a4d      	ldr	r2, [pc, #308]	; (800428c <HAL_GPIO_Init+0x328>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00d      	beq.n	8004176 <HAL_GPIO_Init+0x212>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4c      	ldr	r2, [pc, #304]	; (8004290 <HAL_GPIO_Init+0x32c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <HAL_GPIO_Init+0x20e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a4b      	ldr	r2, [pc, #300]	; (8004294 <HAL_GPIO_Init+0x330>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_GPIO_Init+0x20a>
 800416a:	2307      	movs	r3, #7
 800416c:	e00e      	b.n	800418c <HAL_GPIO_Init+0x228>
 800416e:	2308      	movs	r3, #8
 8004170:	e00c      	b.n	800418c <HAL_GPIO_Init+0x228>
 8004172:	2306      	movs	r3, #6
 8004174:	e00a      	b.n	800418c <HAL_GPIO_Init+0x228>
 8004176:	2305      	movs	r3, #5
 8004178:	e008      	b.n	800418c <HAL_GPIO_Init+0x228>
 800417a:	2304      	movs	r3, #4
 800417c:	e006      	b.n	800418c <HAL_GPIO_Init+0x228>
 800417e:	2303      	movs	r3, #3
 8004180:	e004      	b.n	800418c <HAL_GPIO_Init+0x228>
 8004182:	2302      	movs	r3, #2
 8004184:	e002      	b.n	800418c <HAL_GPIO_Init+0x228>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_GPIO_Init+0x228>
 800418a:	2300      	movs	r3, #0
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	f002 0203 	and.w	r2, r2, #3
 8004192:	0092      	lsls	r2, r2, #2
 8004194:	4093      	lsls	r3, r2
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800419c:	4935      	ldr	r1, [pc, #212]	; (8004274 <HAL_GPIO_Init+0x310>)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	3302      	adds	r3, #2
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_GPIO_Init+0x334>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ce:	4a32      	ldr	r2, [pc, #200]	; (8004298 <HAL_GPIO_Init+0x334>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <HAL_GPIO_Init+0x334>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041f8:	4a27      	ldr	r2, [pc, #156]	; (8004298 <HAL_GPIO_Init+0x334>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041fe:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_GPIO_Init+0x334>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_GPIO_Init+0x334>)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004228:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_GPIO_Init+0x334>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800424c:	4a12      	ldr	r2, [pc, #72]	; (8004298 <HAL_GPIO_Init+0x334>)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3301      	adds	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b0f      	cmp	r3, #15
 800425c:	f67f ae90 	bls.w	8003f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3724      	adds	r7, #36	; 0x24
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	40013800 	.word	0x40013800
 8004278:	40020000 	.word	0x40020000
 800427c:	40020400 	.word	0x40020400
 8004280:	40020800 	.word	0x40020800
 8004284:	40020c00 	.word	0x40020c00
 8004288:	40021000 	.word	0x40021000
 800428c:	40021400 	.word	0x40021400
 8004290:	40021800 	.word	0x40021800
 8004294:	40021c00 	.word	0x40021c00
 8004298:	40013c00 	.word	0x40013c00

0800429c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
 80042a8:	4613      	mov	r3, r2
 80042aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042ac:	787b      	ldrb	r3, [r7, #1]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042b8:	e003      	b.n	80042c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ba:	887b      	ldrh	r3, [r7, #2]
 80042bc:	041a      	lsls	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	619a      	str	r2, [r3, #24]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e12b      	b.n	800453a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fe f810 	bl	800231c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004334:	f000 fe9e 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4a81      	ldr	r2, [pc, #516]	; (8004544 <HAL_I2C_Init+0x274>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d807      	bhi.n	8004354 <HAL_I2C_Init+0x84>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a80      	ldr	r2, [pc, #512]	; (8004548 <HAL_I2C_Init+0x278>)
 8004348:	4293      	cmp	r3, r2
 800434a:	bf94      	ite	ls
 800434c:	2301      	movls	r3, #1
 800434e:	2300      	movhi	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e006      	b.n	8004362 <HAL_I2C_Init+0x92>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a7d      	ldr	r2, [pc, #500]	; (800454c <HAL_I2C_Init+0x27c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	bf94      	ite	ls
 800435c:	2301      	movls	r3, #1
 800435e:	2300      	movhi	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0e7      	b.n	800453a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a78      	ldr	r2, [pc, #480]	; (8004550 <HAL_I2C_Init+0x280>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0c9b      	lsrs	r3, r3, #18
 8004374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a6a      	ldr	r2, [pc, #424]	; (8004544 <HAL_I2C_Init+0x274>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d802      	bhi.n	80043a4 <HAL_I2C_Init+0xd4>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3301      	adds	r3, #1
 80043a2:	e009      	b.n	80043b8 <HAL_I2C_Init+0xe8>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	4a69      	ldr	r2, [pc, #420]	; (8004554 <HAL_I2C_Init+0x284>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	3301      	adds	r3, #1
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	430b      	orrs	r3, r1
 80043be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	495c      	ldr	r1, [pc, #368]	; (8004544 <HAL_I2C_Init+0x274>)
 80043d4:	428b      	cmp	r3, r1
 80043d6:	d819      	bhi.n	800440c <HAL_I2C_Init+0x13c>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e59      	subs	r1, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e6:	1c59      	adds	r1, r3, #1
 80043e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043ec:	400b      	ands	r3, r1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_I2C_Init+0x138>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1e59      	subs	r1, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	e051      	b.n	80044ac <HAL_I2C_Init+0x1dc>
 8004408:	2304      	movs	r3, #4
 800440a:	e04f      	b.n	80044ac <HAL_I2C_Init+0x1dc>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d111      	bne.n	8004438 <HAL_I2C_Init+0x168>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1e58      	subs	r0, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6859      	ldr	r1, [r3, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	440b      	add	r3, r1
 8004422:	fbb0 f3f3 	udiv	r3, r0, r3
 8004426:	3301      	adds	r3, #1
 8004428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e012      	b.n	800445e <HAL_I2C_Init+0x18e>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1e58      	subs	r0, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	0099      	lsls	r1, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	fbb0 f3f3 	udiv	r3, r0, r3
 800444e:	3301      	adds	r3, #1
 8004450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf0c      	ite	eq
 8004458:	2301      	moveq	r3, #1
 800445a:	2300      	movne	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Init+0x196>
 8004462:	2301      	movs	r3, #1
 8004464:	e022      	b.n	80044ac <HAL_I2C_Init+0x1dc>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10e      	bne.n	800448c <HAL_I2C_Init+0x1bc>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e58      	subs	r0, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6859      	ldr	r1, [r3, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	440b      	add	r3, r1
 800447c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004480:	3301      	adds	r3, #1
 8004482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448a:	e00f      	b.n	80044ac <HAL_I2C_Init+0x1dc>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e58      	subs	r0, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	0099      	lsls	r1, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	6809      	ldr	r1, [r1, #0]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6911      	ldr	r1, [r2, #16]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68d2      	ldr	r2, [r2, #12]
 80044e6:	4311      	orrs	r1, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	000186a0 	.word	0x000186a0
 8004548:	001e847f 	.word	0x001e847f
 800454c:	003d08ff 	.word	0x003d08ff
 8004550:	431bde83 	.word	0x431bde83
 8004554:	10624dd3 	.word	0x10624dd3

08004558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	b08f      	sub	sp, #60	; 0x3c
 800455c:	af0a      	add	r7, sp, #40	; 0x28
 800455e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e10f      	b.n	800478a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fe f925 	bl	80027d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2203      	movs	r2, #3
 800458e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f002 fa92 	bl	8006ad2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	687e      	ldr	r6, [r7, #4]
 80045b6:	466d      	mov	r5, sp
 80045b8:	f106 0410 	add.w	r4, r6, #16
 80045bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80045cc:	1d33      	adds	r3, r6, #4
 80045ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d0:	6838      	ldr	r0, [r7, #0]
 80045d2:	f002 fa1d 	bl	8006a10 <USB_CoreInit>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0d0      	b.n	800478a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f002 fa80 	bl	8006af4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e04a      	b.n	8004690 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	333d      	adds	r3, #61	; 0x3d
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	333c      	adds	r3, #60	; 0x3c
 800461e:	7bfa      	ldrb	r2, [r7, #15]
 8004620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004622:	7bfa      	ldrb	r2, [r7, #15]
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	b298      	uxth	r0, r3
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3344      	adds	r3, #68	; 0x44
 8004636:	4602      	mov	r2, r0
 8004638:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3340      	adds	r3, #64	; 0x40
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	3348      	adds	r3, #72	; 0x48
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004662:	7bfa      	ldrb	r2, [r7, #15]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	334c      	adds	r3, #76	; 0x4c
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	3354      	adds	r3, #84	; 0x54
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	3301      	adds	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d3af      	bcc.n	80045fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
 800469e:	e044      	b.n	800472a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046b6:	7bfa      	ldrb	r2, [r7, #15]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800470e:	7bfa      	ldrb	r2, [r7, #15]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	3301      	adds	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d3b5      	bcc.n	80046a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	687e      	ldr	r6, [r7, #4]
 800473c:	466d      	mov	r5, sp
 800473e:	f106 0410 	add.w	r4, r6, #16
 8004742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800474e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004752:	1d33      	adds	r3, r6, #4
 8004754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004756:	6838      	ldr	r0, [r7, #0]
 8004758:	f002 fa18 	bl	8006b8c <USB_DevInit>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e00d      	b.n	800478a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f002 fbe3 	bl	8006f4e <USB_DevDisconnect>

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e267      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d075      	beq.n	800489e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d00c      	beq.n	80047d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d112      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ca:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d6:	d10b      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	4b7e      	ldr	r3, [pc, #504]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05b      	beq.n	800489c <HAL_RCC_OscConfig+0x108>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d157      	bne.n	800489c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e242      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d106      	bne.n	8004808 <HAL_RCC_OscConfig+0x74>
 80047fa:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a75      	ldr	r2, [pc, #468]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e01d      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x98>
 8004812:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6f      	ldr	r2, [pc, #444]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6c      	ldr	r2, [pc, #432]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e00b      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 800482c:	4b69      	ldr	r3, [pc, #420]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a68      	ldr	r2, [pc, #416]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a65      	ldr	r2, [pc, #404]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d013      	beq.n	8004874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fe f930 	bl	8002ab0 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004854:	f7fe f92c 	bl	8002ab0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e207      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b5b      	ldr	r3, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0xc0>
 8004872:	e014      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fe f91c 	bl	8002ab0 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800487c:	f7fe f918 	bl	8002ab0 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1f3      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0xe8>
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d063      	beq.n	8004972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d11c      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d116      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e1c7      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4937      	ldr	r1, [pc, #220]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fa:	e03a      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004904:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fe f8d1 	bl	8002ab0 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004912:	f7fe f8cd 	bl	8002ab0 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e1a8      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4925      	ldr	r1, [pc, #148]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
 8004944:	e015      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fe f8b0 	bl	8002ab0 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004954:	f7fe f8ac 	bl	8002ab0 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e187      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d036      	beq.n	80049ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fe f890 	bl	8002ab0 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004994:	f7fe f88c 	bl	8002ab0 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e167      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80049a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x200>
 80049b2:	e01b      	b.n	80049ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fe f879 	bl	8002ab0 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	e00e      	b.n	80049e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fe f875 	bl	8002ab0 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d907      	bls.n	80049e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e150      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	42470000 	.word	0x42470000
 80049dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ea      	bne.n	80049c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8097 	beq.w	8004b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	4b7d      	ldr	r3, [pc, #500]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a7c      	ldr	r2, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b77      	ldr	r3, [pc, #476]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d118      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a36:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a73      	ldr	r2, [pc, #460]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a42:	f7fe f835 	bl	8002ab0 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4a:	f7fe f831 	bl	8002ab0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e10c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x2ea>
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a63      	ldr	r2, [pc, #396]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7c:	e01c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x30c>
 8004a86:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a5e      	ldr	r2, [pc, #376]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	4b5c      	ldr	r3, [pc, #368]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a5b      	ldr	r2, [pc, #364]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004aa0:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a57      	ldr	r2, [pc, #348]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a54      	ldr	r2, [pc, #336]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	f023 0304 	bic.w	r3, r3, #4
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fff6 	bl	8002ab0 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fff2 	bl	8002ab0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0cb      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ee      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x334>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aec:	f7fd ffe0 	bl	8002ab0 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fd ffdc 	bl	8002ab0 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0b5      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0a:	4b3e      	ldr	r3, [pc, #248]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1ee      	bne.n	8004af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1c:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	4a38      	ldr	r2, [pc, #224]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a1 	beq.w	8004c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d05c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d141      	bne.n	8004bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fd ffb0 	bl	8002ab0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fd ffac 	bl	8002ab0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e087      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	491b      	ldr	r1, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fd ff85 	bl	8002ab0 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fd ff81 	bl	8002ab0 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e05c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x416>
 8004bc8:	e054      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fd ff6e 	bl	8002ab0 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fd ff6a 	bl	8002ab0 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e045      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x444>
 8004bf6:	e03d      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e038      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40007000 	.word	0x40007000
 8004c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x4ec>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d028      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d121      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d11a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0cc      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b68      	ldr	r3, [pc, #416]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90c      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b63      	ldr	r3, [pc, #396]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0b8      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd8:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a58      	ldr	r2, [pc, #352]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf0:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a52      	ldr	r2, [pc, #328]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	494d      	ldr	r1, [pc, #308]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d044      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d119      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	4b3f      	ldr	r3, [pc, #252]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e06f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e067      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4934      	ldr	r1, [pc, #208]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d74:	f7fd fe9c 	bl	8002ab0 <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fd fe98 	bl	8002ab0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e04f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20c      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e032      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd8:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4916      	ldr	r1, [pc, #88]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	490e      	ldr	r1, [pc, #56]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e0a:	f000 f821 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	490a      	ldr	r1, [pc, #40]	; (8004e44 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	5ccb      	ldrb	r3, [r1, r3]
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fd fd2c 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023c00 	.word	0x40023c00
 8004e40:	40023800 	.word	0x40023800
 8004e44:	0800b41c 	.word	0x0800b41c
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	20000004 	.word	0x20000004

08004e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b094      	sub	sp, #80	; 0x50
 8004e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e60:	2300      	movs	r3, #0
 8004e62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e68:	4b79      	ldr	r3, [pc, #484]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d00d      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x40>
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	f200 80e1 	bhi.w	800503c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x34>
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e82:	e0db      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e84:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e88:	e0db      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e8a:	4b73      	ldr	r3, [pc, #460]	; (8005058 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e8e:	e0d8      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e90:	4b6f      	ldr	r3, [pc, #444]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e9a:	4b6d      	ldr	r3, [pc, #436]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d063      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	2200      	movs	r2, #0
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eba:	2300      	movs	r3, #0
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	f04f 0000 	mov.w	r0, #0
 8004eca:	f04f 0100 	mov.w	r1, #0
 8004ece:	0159      	lsls	r1, r3, #5
 8004ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed4:	0150      	lsls	r0, r2, #5
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4621      	mov	r1, r4
 8004edc:	1a51      	subs	r1, r2, r1
 8004ede:	6139      	str	r1, [r7, #16]
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	018b      	lsls	r3, r1, #6
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004efe:	4651      	mov	r1, sl
 8004f00:	018a      	lsls	r2, r1, #6
 8004f02:	4651      	mov	r1, sl
 8004f04:	ebb2 0801 	subs.w	r8, r2, r1
 8004f08:	4659      	mov	r1, fp
 8004f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f22:	4690      	mov	r8, r2
 8004f24:	4699      	mov	r9, r3
 8004f26:	4623      	mov	r3, r4
 8004f28:	eb18 0303 	adds.w	r3, r8, r3
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	462b      	mov	r3, r5
 8004f30:	eb49 0303 	adc.w	r3, r9, r3
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f42:	4629      	mov	r1, r5
 8004f44:	024b      	lsls	r3, r1, #9
 8004f46:	4621      	mov	r1, r4
 8004f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	024a      	lsls	r2, r1, #9
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	2200      	movs	r2, #0
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f60:	f7fb fd54 	bl	8000a0c <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f6c:	e058      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6e:	4b38      	ldr	r3, [pc, #224]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	099b      	lsrs	r3, r3, #6
 8004f74:	2200      	movs	r2, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	4611      	mov	r1, r2
 8004f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	2300      	movs	r3, #0
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	f04f 0000 	mov.w	r0, #0
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	0159      	lsls	r1, r3, #5
 8004f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f9a:	0150      	lsls	r0, r2, #5
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8004fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	00eb      	lsls	r3, r5, #3
 8004fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd6:	00e2      	lsls	r2, r4, #3
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	4643      	mov	r3, r8
 8004fde:	18e3      	adds	r3, r4, r3
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	eb45 0303 	adc.w	r3, r5, r3
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	028b      	lsls	r3, r1, #10
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005000:	4621      	mov	r1, r4
 8005002:	028a      	lsls	r2, r1, #10
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500a:	2200      	movs	r2, #0
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	61fa      	str	r2, [r7, #28]
 8005010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005014:	f7fb fcfa 	bl	8000a0c <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4613      	mov	r3, r2
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	3301      	adds	r3, #1
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800503a:	e002      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCC_GetSysClockFreq+0x204>)
 800503e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005044:	4618      	mov	r0, r3
 8005046:	3750      	adds	r7, #80	; 0x50
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
 8005054:	00f42400 	.word	0x00f42400
 8005058:	007a1200 	.word	0x007a1200

0800505c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <HAL_RCC_GetHCLKFreq+0x14>)
 8005062:	681b      	ldr	r3, [r3, #0]
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000000 	.word	0x20000000

08005074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005078:	f7ff fff0 	bl	800505c <HAL_RCC_GetHCLKFreq>
 800507c:	4602      	mov	r2, r0
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	0a9b      	lsrs	r3, r3, #10
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	4903      	ldr	r1, [pc, #12]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800508a:	5ccb      	ldrb	r3, [r1, r3]
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40023800 	.word	0x40023800
 8005098:	0800b42c 	.word	0x0800b42c

0800509c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050a0:	f7ff ffdc 	bl	800505c <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0b5b      	lsrs	r3, r3, #13
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4903      	ldr	r1, [pc, #12]	; (80050c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40023800 	.word	0x40023800
 80050c0:	0800b42c 	.word	0x0800b42c

080050c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	220f      	movs	r2, #15
 80050d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_GetClockConfig+0x5c>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0203 	and.w	r2, r3, #3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050e0:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <HAL_RCC_GetClockConfig+0x5c>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050ec:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <HAL_RCC_GetClockConfig+0x5c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <HAL_RCC_GetClockConfig+0x5c>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	08db      	lsrs	r3, r3, #3
 80050fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <HAL_RCC_GetClockConfig+0x60>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0207 	and.w	r2, r3, #7
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
 8005124:	40023c00 	.word	0x40023c00

08005128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e041      	b.n	80051be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fd f92c 	bl	80023ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f000 fd9e 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d001      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e04e      	b.n	800527e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a23      	ldr	r2, [pc, #140]	; (800528c <HAL_TIM_Base_Start_IT+0xc4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_TIM_Base_Start_IT+0xc8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <HAL_TIM_Base_Start_IT+0xcc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_TIM_Base_Start_IT+0xd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1b      	ldr	r2, [pc, #108]	; (800529c <HAL_TIM_Base_Start_IT+0xd4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d111      	bne.n	800526c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d010      	beq.n	800527c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	e007      	b.n	800527c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40010400 	.word	0x40010400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e041      	b.n	800533e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f839 	bl	8005346 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 fcde 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e041      	b.n	80053f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f839 	bl	80053f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f000 fc85 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_TIM_PWM_Start+0x24>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e022      	b.n	8005476 <HAL_TIM_PWM_Start+0x6a>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d109      	bne.n	800544a <HAL_TIM_PWM_Start+0x3e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e015      	b.n	8005476 <HAL_TIM_PWM_Start+0x6a>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d109      	bne.n	8005464 <HAL_TIM_PWM_Start+0x58>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	e008      	b.n	8005476 <HAL_TIM_PWM_Start+0x6a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e07c      	b.n	8005578 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start+0x82>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800548c:	e013      	b.n	80054b6 <HAL_TIM_PWM_Start+0xaa>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0x92>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549c:	e00b      	b.n	80054b6 <HAL_TIM_PWM_Start+0xaa>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0xa2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ac:	e003      	b.n	80054b6 <HAL_TIM_PWM_Start+0xaa>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fedc 	bl	800627c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_TIM_PWM_Start+0x174>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIM_PWM_Start+0xcc>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <HAL_TIM_PWM_Start+0x178>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_PWM_Start+0xd0>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_TIM_PWM_Start+0xd2>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <HAL_TIM_PWM_Start+0x174>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d01d      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <HAL_TIM_PWM_Start+0x17c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1d      	ldr	r2, [pc, #116]	; (800558c <HAL_TIM_PWM_Start+0x180>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_TIM_PWM_Start+0x184>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a16      	ldr	r2, [pc, #88]	; (8005584 <HAL_TIM_PWM_Start+0x178>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_TIM_PWM_Start+0x188>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a16      	ldr	r2, [pc, #88]	; (8005598 <HAL_TIM_PWM_Start+0x18c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d111      	bne.n	8005566 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b06      	cmp	r3, #6
 8005552:	d010      	beq.n	8005576 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	e007      	b.n	8005576 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40014000 	.word	0x40014000
 8005598:	40001800 	.word	0x40001800

0800559c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fe64 	bl	800627c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2e      	ldr	r2, [pc, #184]	; (8005674 <HAL_TIM_PWM_Stop+0xd8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIM_PWM_Stop+0x2c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2d      	ldr	r2, [pc, #180]	; (8005678 <HAL_TIM_PWM_Stop+0xdc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d101      	bne.n	80055cc <HAL_TIM_PWM_Stop+0x30>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_TIM_PWM_Stop+0x32>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d017      	beq.n	8005602 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <HAL_TIM_PWM_Stop+0x66>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	f240 4344 	movw	r3, #1092	; 0x444
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d107      	bne.n	8005602 <HAL_TIM_PWM_Stop+0x66>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a1a      	ldr	r2, [r3, #32]
 8005608:	f241 1311 	movw	r3, #4369	; 0x1111
 800560c:	4013      	ands	r3, r2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <HAL_TIM_PWM_Stop+0x96>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6a1a      	ldr	r2, [r3, #32]
 8005618:	f240 4344 	movw	r3, #1092	; 0x444
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d107      	bne.n	8005632 <HAL_TIM_PWM_Stop+0x96>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <HAL_TIM_PWM_Stop+0xa6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005640:	e013      	b.n	800566a <HAL_TIM_PWM_Stop+0xce>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b04      	cmp	r3, #4
 8005646:	d104      	bne.n	8005652 <HAL_TIM_PWM_Stop+0xb6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005650:	e00b      	b.n	800566a <HAL_TIM_PWM_Stop+0xce>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d104      	bne.n	8005662 <HAL_TIM_PWM_Stop+0xc6>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005660:	e003      	b.n	800566a <HAL_TIM_PWM_Stop+0xce>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40010000 	.word	0x40010000
 8005678:	40010400 	.word	0x40010400

0800567c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b02      	cmp	r3, #2
 8005690:	d122      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b02      	cmp	r3, #2
 800569e:	d11b      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0202 	mvn.w	r2, #2
 80056a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fad3 	bl	8005c6a <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fac5 	bl	8005c56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fad6 	bl	8005c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d122      	bne.n	800572c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d11b      	bne.n	800572c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0204 	mvn.w	r2, #4
 80056fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 faa9 	bl	8005c6a <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa9b 	bl	8005c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 faac 	bl	8005c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	2b08      	cmp	r3, #8
 8005738:	d122      	bne.n	8005780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b08      	cmp	r3, #8
 8005746:	d11b      	bne.n	8005780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0208 	mvn.w	r2, #8
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2204      	movs	r2, #4
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa7f 	bl	8005c6a <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa71 	bl	8005c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fa82 	bl	8005c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b10      	cmp	r3, #16
 800578c:	d122      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	2b10      	cmp	r3, #16
 800579a:	d11b      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0210 	mvn.w	r2, #16
 80057a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2208      	movs	r2, #8
 80057aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa55 	bl	8005c6a <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa47 	bl	8005c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fa58 	bl	8005c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d10e      	bne.n	8005800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d107      	bne.n	8005800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0201 	mvn.w	r2, #1
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fc fb4e 	bl	8001e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580a:	2b80      	cmp	r3, #128	; 0x80
 800580c:	d10e      	bne.n	800582c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005818:	2b80      	cmp	r3, #128	; 0x80
 800581a:	d107      	bne.n	800582c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fe26 	bl	8006478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d10e      	bne.n	8005858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d107      	bne.n	8005858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa1d 	bl	8005c92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b20      	cmp	r3, #32
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b20      	cmp	r3, #32
 8005872:	d107      	bne.n	8005884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0220 	mvn.w	r2, #32
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fdf0 	bl	8006464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_OC_ConfigChannel+0x1e>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e048      	b.n	800593c <HAL_TIM_OC_ConfigChannel+0xb0>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b0c      	cmp	r3, #12
 80058b6:	d839      	bhi.n	800592c <HAL_TIM_OC_ConfigChannel+0xa0>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058f5 	.word	0x080058f5
 80058c4:	0800592d 	.word	0x0800592d
 80058c8:	0800592d 	.word	0x0800592d
 80058cc:	0800592d 	.word	0x0800592d
 80058d0:	08005903 	.word	0x08005903
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	0800592d 	.word	0x0800592d
 80058dc:	0800592d 	.word	0x0800592d
 80058e0:	08005911 	.word	0x08005911
 80058e4:	0800592d 	.word	0x0800592d
 80058e8:	0800592d 	.word	0x0800592d
 80058ec:	0800592d 	.word	0x0800592d
 80058f0:	0800591f 	.word	0x0800591f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fa74 	bl	8005de8 <TIM_OC1_SetConfig>
      break;
 8005900:	e017      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fadd 	bl	8005ec8 <TIM_OC2_SetConfig>
      break;
 800590e:	e010      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fb4c 	bl	8005fb4 <TIM_OC3_SetConfig>
      break;
 800591c:	e009      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fbb9 	bl	800609c <TIM_OC4_SetConfig>
      break;
 800592a:	e002      	b.n	8005932 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	75fb      	strb	r3, [r7, #23]
      break;
 8005930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800593a:	7dfb      	ldrb	r3, [r7, #23]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800595e:	2302      	movs	r3, #2
 8005960:	e0ae      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b0c      	cmp	r3, #12
 800596e:	f200 809f 	bhi.w	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	080059ad 	.word	0x080059ad
 800597c:	08005ab1 	.word	0x08005ab1
 8005980:	08005ab1 	.word	0x08005ab1
 8005984:	08005ab1 	.word	0x08005ab1
 8005988:	080059ed 	.word	0x080059ed
 800598c:	08005ab1 	.word	0x08005ab1
 8005990:	08005ab1 	.word	0x08005ab1
 8005994:	08005ab1 	.word	0x08005ab1
 8005998:	08005a2f 	.word	0x08005a2f
 800599c:	08005ab1 	.word	0x08005ab1
 80059a0:	08005ab1 	.word	0x08005ab1
 80059a4:	08005ab1 	.word	0x08005ab1
 80059a8:	08005a6f 	.word	0x08005a6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fa18 	bl	8005de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0208 	orr.w	r2, r2, #8
 80059c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0204 	bic.w	r2, r2, #4
 80059d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6999      	ldr	r1, [r3, #24]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	619a      	str	r2, [r3, #24]
      break;
 80059ea:	e064      	b.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fa68 	bl	8005ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6999      	ldr	r1, [r3, #24]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	021a      	lsls	r2, r3, #8
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	619a      	str	r2, [r3, #24]
      break;
 8005a2c:	e043      	b.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fabd 	bl	8005fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0208 	orr.w	r2, r2, #8
 8005a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0204 	bic.w	r2, r2, #4
 8005a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	61da      	str	r2, [r3, #28]
      break;
 8005a6c:	e023      	b.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fb11 	bl	800609c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	021a      	lsls	r2, r3, #8
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	61da      	str	r2, [r3, #28]
      break;
 8005aae:	e002      	b.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e0b4      	b.n	8005c4e <HAL_TIM_ConfigClockSource+0x186>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1c:	d03e      	beq.n	8005b9c <HAL_TIM_ConfigClockSource+0xd4>
 8005b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b22:	f200 8087 	bhi.w	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	f000 8086 	beq.w	8005c3a <HAL_TIM_ConfigClockSource+0x172>
 8005b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b32:	d87f      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b70      	cmp	r3, #112	; 0x70
 8005b36:	d01a      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0xa6>
 8005b38:	2b70      	cmp	r3, #112	; 0x70
 8005b3a:	d87b      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b3c:	2b60      	cmp	r3, #96	; 0x60
 8005b3e:	d050      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0x11a>
 8005b40:	2b60      	cmp	r3, #96	; 0x60
 8005b42:	d877      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b50      	cmp	r3, #80	; 0x50
 8005b46:	d03c      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0xfa>
 8005b48:	2b50      	cmp	r3, #80	; 0x50
 8005b4a:	d873      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d058      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x13a>
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d86f      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	d064      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x15a>
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d86b      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d060      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x15a>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d867      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d05c      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d05a      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x15a>
 8005b6c:	e062      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6899      	ldr	r1, [r3, #8]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f000 fb5d 	bl	800623c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	609a      	str	r2, [r3, #8]
      break;
 8005b9a:	e04f      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6899      	ldr	r1, [r3, #8]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f000 fb46 	bl	800623c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bbe:	609a      	str	r2, [r3, #8]
      break;
 8005bc0:	e03c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6859      	ldr	r1, [r3, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f000 faba 	bl	8006148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2150      	movs	r1, #80	; 0x50
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fb13 	bl	8006206 <TIM_ITRx_SetConfig>
      break;
 8005be0:	e02c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6859      	ldr	r1, [r3, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f000 fad9 	bl	80061a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2160      	movs	r1, #96	; 0x60
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fb03 	bl	8006206 <TIM_ITRx_SetConfig>
      break;
 8005c00:	e01c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f000 fa9a 	bl	8006148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2140      	movs	r1, #64	; 0x40
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 faf3 	bl	8006206 <TIM_ITRx_SetConfig>
      break;
 8005c20:	e00c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f000 faea 	bl	8006206 <TIM_ITRx_SetConfig>
      break;
 8005c32:	e003      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
      break;
 8005c38:	e000      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a40      	ldr	r2, [pc, #256]	; (8005dbc <TIM_Base_SetConfig+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3d      	ldr	r2, [pc, #244]	; (8005dc0 <TIM_Base_SetConfig+0x118>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3c      	ldr	r2, [pc, #240]	; (8005dc4 <TIM_Base_SetConfig+0x11c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3b      	ldr	r2, [pc, #236]	; (8005dc8 <TIM_Base_SetConfig+0x120>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a3a      	ldr	r2, [pc, #232]	; (8005dcc <TIM_Base_SetConfig+0x124>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2f      	ldr	r2, [pc, #188]	; (8005dbc <TIM_Base_SetConfig+0x114>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d08:	d027      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2c      	ldr	r2, [pc, #176]	; (8005dc0 <TIM_Base_SetConfig+0x118>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d023      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2b      	ldr	r2, [pc, #172]	; (8005dc4 <TIM_Base_SetConfig+0x11c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01f      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2a      	ldr	r2, [pc, #168]	; (8005dc8 <TIM_Base_SetConfig+0x120>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <TIM_Base_SetConfig+0x124>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d017      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a28      	ldr	r2, [pc, #160]	; (8005dd0 <TIM_Base_SetConfig+0x128>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a27      	ldr	r2, [pc, #156]	; (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00f      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a26      	ldr	r2, [pc, #152]	; (8005dd8 <TIM_Base_SetConfig+0x130>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a25      	ldr	r2, [pc, #148]	; (8005ddc <TIM_Base_SetConfig+0x134>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d007      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a24      	ldr	r2, [pc, #144]	; (8005de0 <TIM_Base_SetConfig+0x138>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a23      	ldr	r2, [pc, #140]	; (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d108      	bne.n	8005d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <TIM_Base_SetConfig+0x114>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0xf8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a0c      	ldr	r2, [pc, #48]	; (8005dcc <TIM_Base_SetConfig+0x124>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	615a      	str	r2, [r3, #20]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40010400 	.word	0x40010400
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40014400 	.word	0x40014400
 8005dd8:	40014800 	.word	0x40014800
 8005ddc:	40001800 	.word	0x40001800
 8005de0:	40001c00 	.word	0x40001c00
 8005de4:	40002000 	.word	0x40002000

08005de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 0302 	bic.w	r3, r3, #2
 8005e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <TIM_OC1_SetConfig+0xd8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC1_SetConfig+0x64>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <TIM_OC1_SetConfig+0xdc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10c      	bne.n	8005e66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0308 	bic.w	r3, r3, #8
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <TIM_OC1_SetConfig+0xd8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_OC1_SetConfig+0x8e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <TIM_OC1_SetConfig+0xdc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d111      	bne.n	8005e9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	621a      	str	r2, [r3, #32]
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	40010000 	.word	0x40010000
 8005ec4:	40010400 	.word	0x40010400

08005ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f023 0210 	bic.w	r2, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f023 0320 	bic.w	r3, r3, #32
 8005f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a22      	ldr	r2, [pc, #136]	; (8005fac <TIM_OC2_SetConfig+0xe4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_OC2_SetConfig+0x68>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <TIM_OC2_SetConfig+0xe8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10d      	bne.n	8005f4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	; (8005fac <TIM_OC2_SetConfig+0xe4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_OC2_SetConfig+0x94>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <TIM_OC2_SetConfig+0xe8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d113      	bne.n	8005f84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a21      	ldr	r2, [pc, #132]	; (8006094 <TIM_OC3_SetConfig+0xe0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_OC3_SetConfig+0x66>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a20      	ldr	r2, [pc, #128]	; (8006098 <TIM_OC3_SetConfig+0xe4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d10d      	bne.n	8006036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a16      	ldr	r2, [pc, #88]	; (8006094 <TIM_OC3_SetConfig+0xe0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_OC3_SetConfig+0x92>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a15      	ldr	r2, [pc, #84]	; (8006098 <TIM_OC3_SetConfig+0xe4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d113      	bne.n	800606e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800604c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	40010000 	.word	0x40010000
 8006098:	40010400 	.word	0x40010400

0800609c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a12      	ldr	r2, [pc, #72]	; (8006140 <TIM_OC4_SetConfig+0xa4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC4_SetConfig+0x68>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a11      	ldr	r2, [pc, #68]	; (8006144 <TIM_OC4_SetConfig+0xa8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d109      	bne.n	8006118 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	019b      	lsls	r3, r3, #6
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	40010400 	.word	0x40010400

08006148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f023 0201 	bic.w	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 030a 	bic.w	r3, r3, #10
 8006184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0210 	bic.w	r2, r3, #16
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	031b      	lsls	r3, r3, #12
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	f043 0307 	orr.w	r3, r3, #7
 8006228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	609a      	str	r2, [r3, #8]
}
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	021a      	lsls	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	431a      	orrs	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4313      	orrs	r3, r2
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	2201      	movs	r2, #1
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	43db      	mvns	r3, r3
 800629e:	401a      	ands	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1a      	ldr	r2, [r3, #32]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	fa01 f303 	lsl.w	r3, r1, r3
 80062b4:	431a      	orrs	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062dc:	2302      	movs	r3, #2
 80062de:	e05a      	b.n	8006396 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d022      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632c:	d01d      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d018      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00e      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a15      	ldr	r2, [pc, #84]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10c      	bne.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4313      	orrs	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40000800 	.word	0x40000800
 80063b0:	40000c00 	.word	0x40000c00
 80063b4:	40010400 	.word	0x40010400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40001800 	.word	0x40001800

080063c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063d8:	2302      	movs	r3, #2
 80063da:	e03d      	b.n	8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e03f      	b.n	800651e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc f946 	bl	8002744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2224      	movs	r2, #36	; 0x24
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f829 	bl	8006528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800652c:	b0c0      	sub	sp, #256	; 0x100
 800652e:	af00      	add	r7, sp, #0
 8006530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	68d9      	ldr	r1, [r3, #12]
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	ea40 0301 	orr.w	r3, r0, r1
 8006550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	431a      	orrs	r2, r3
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	431a      	orrs	r2, r3
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006580:	f021 010c 	bic.w	r1, r1, #12
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800658e:	430b      	orrs	r3, r1
 8006590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a2:	6999      	ldr	r1, [r3, #24]
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	ea40 0301 	orr.w	r3, r0, r1
 80065ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b8f      	ldr	r3, [pc, #572]	; (80067f4 <UART_SetConfig+0x2cc>)
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d005      	beq.n	80065c8 <UART_SetConfig+0xa0>
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b8d      	ldr	r3, [pc, #564]	; (80067f8 <UART_SetConfig+0x2d0>)
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d104      	bne.n	80065d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065c8:	f7fe fd68 	bl	800509c <HAL_RCC_GetPCLK2Freq>
 80065cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065d0:	e003      	b.n	80065da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065d2:	f7fe fd4f 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 80065d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e4:	f040 810c 	bne.w	8006800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065fa:	4622      	mov	r2, r4
 80065fc:	462b      	mov	r3, r5
 80065fe:	1891      	adds	r1, r2, r2
 8006600:	65b9      	str	r1, [r7, #88]	; 0x58
 8006602:	415b      	adcs	r3, r3
 8006604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800660a:	4621      	mov	r1, r4
 800660c:	eb12 0801 	adds.w	r8, r2, r1
 8006610:	4629      	mov	r1, r5
 8006612:	eb43 0901 	adc.w	r9, r3, r1
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800662a:	4690      	mov	r8, r2
 800662c:	4699      	mov	r9, r3
 800662e:	4623      	mov	r3, r4
 8006630:	eb18 0303 	adds.w	r3, r8, r3
 8006634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006638:	462b      	mov	r3, r5
 800663a:	eb49 0303 	adc.w	r3, r9, r3
 800663e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800664e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006656:	460b      	mov	r3, r1
 8006658:	18db      	adds	r3, r3, r3
 800665a:	653b      	str	r3, [r7, #80]	; 0x50
 800665c:	4613      	mov	r3, r2
 800665e:	eb42 0303 	adc.w	r3, r2, r3
 8006662:	657b      	str	r3, [r7, #84]	; 0x54
 8006664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800666c:	f7fa f9ce 	bl	8000a0c <__aeabi_uldivmod>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4b61      	ldr	r3, [pc, #388]	; (80067fc <UART_SetConfig+0x2d4>)
 8006676:	fba3 2302 	umull	r2, r3, r3, r2
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	011c      	lsls	r4, r3, #4
 800667e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006682:	2200      	movs	r2, #0
 8006684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800668c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	1891      	adds	r1, r2, r2
 8006696:	64b9      	str	r1, [r7, #72]	; 0x48
 8006698:	415b      	adcs	r3, r3
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800669c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066a0:	4641      	mov	r1, r8
 80066a2:	eb12 0a01 	adds.w	sl, r2, r1
 80066a6:	4649      	mov	r1, r9
 80066a8:	eb43 0b01 	adc.w	fp, r3, r1
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066c0:	4692      	mov	sl, r2
 80066c2:	469b      	mov	fp, r3
 80066c4:	4643      	mov	r3, r8
 80066c6:	eb1a 0303 	adds.w	r3, sl, r3
 80066ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ce:	464b      	mov	r3, r9
 80066d0:	eb4b 0303 	adc.w	r3, fp, r3
 80066d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066ec:	460b      	mov	r3, r1
 80066ee:	18db      	adds	r3, r3, r3
 80066f0:	643b      	str	r3, [r7, #64]	; 0x40
 80066f2:	4613      	mov	r3, r2
 80066f4:	eb42 0303 	adc.w	r3, r2, r3
 80066f8:	647b      	str	r3, [r7, #68]	; 0x44
 80066fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006702:	f7fa f983 	bl	8000a0c <__aeabi_uldivmod>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4611      	mov	r1, r2
 800670c:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <UART_SetConfig+0x2d4>)
 800670e:	fba3 2301 	umull	r2, r3, r3, r1
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	2264      	movs	r2, #100	; 0x64
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	1acb      	subs	r3, r1, r3
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006722:	4b36      	ldr	r3, [pc, #216]	; (80067fc <UART_SetConfig+0x2d4>)
 8006724:	fba3 2302 	umull	r2, r3, r3, r2
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006730:	441c      	add	r4, r3
 8006732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006736:	2200      	movs	r2, #0
 8006738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800673c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006744:	4642      	mov	r2, r8
 8006746:	464b      	mov	r3, r9
 8006748:	1891      	adds	r1, r2, r2
 800674a:	63b9      	str	r1, [r7, #56]	; 0x38
 800674c:	415b      	adcs	r3, r3
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006754:	4641      	mov	r1, r8
 8006756:	1851      	adds	r1, r2, r1
 8006758:	6339      	str	r1, [r7, #48]	; 0x30
 800675a:	4649      	mov	r1, r9
 800675c:	414b      	adcs	r3, r1
 800675e:	637b      	str	r3, [r7, #52]	; 0x34
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800676c:	4659      	mov	r1, fp
 800676e:	00cb      	lsls	r3, r1, #3
 8006770:	4651      	mov	r1, sl
 8006772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006776:	4651      	mov	r1, sl
 8006778:	00ca      	lsls	r2, r1, #3
 800677a:	4610      	mov	r0, r2
 800677c:	4619      	mov	r1, r3
 800677e:	4603      	mov	r3, r0
 8006780:	4642      	mov	r2, r8
 8006782:	189b      	adds	r3, r3, r2
 8006784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006788:	464b      	mov	r3, r9
 800678a:	460a      	mov	r2, r1
 800678c:	eb42 0303 	adc.w	r3, r2, r3
 8006790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067a8:	460b      	mov	r3, r1
 80067aa:	18db      	adds	r3, r3, r3
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ae:	4613      	mov	r3, r2
 80067b0:	eb42 0303 	adc.w	r3, r2, r3
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067be:	f7fa f925 	bl	8000a0c <__aeabi_uldivmod>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <UART_SetConfig+0x2d4>)
 80067c8:	fba3 1302 	umull	r1, r3, r3, r2
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	2164      	movs	r1, #100	; 0x64
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	3332      	adds	r3, #50	; 0x32
 80067da:	4a08      	ldr	r2, [pc, #32]	; (80067fc <UART_SetConfig+0x2d4>)
 80067dc:	fba2 2303 	umull	r2, r3, r2, r3
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	f003 0207 	and.w	r2, r3, #7
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4422      	add	r2, r4
 80067ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067f0:	e105      	b.n	80069fe <UART_SetConfig+0x4d6>
 80067f2:	bf00      	nop
 80067f4:	40011000 	.word	0x40011000
 80067f8:	40011400 	.word	0x40011400
 80067fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006804:	2200      	movs	r2, #0
 8006806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800680a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800680e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006812:	4642      	mov	r2, r8
 8006814:	464b      	mov	r3, r9
 8006816:	1891      	adds	r1, r2, r2
 8006818:	6239      	str	r1, [r7, #32]
 800681a:	415b      	adcs	r3, r3
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
 800681e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006822:	4641      	mov	r1, r8
 8006824:	1854      	adds	r4, r2, r1
 8006826:	4649      	mov	r1, r9
 8006828:	eb43 0501 	adc.w	r5, r3, r1
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	00eb      	lsls	r3, r5, #3
 8006836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800683a:	00e2      	lsls	r2, r4, #3
 800683c:	4614      	mov	r4, r2
 800683e:	461d      	mov	r5, r3
 8006840:	4643      	mov	r3, r8
 8006842:	18e3      	adds	r3, r4, r3
 8006844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006848:	464b      	mov	r3, r9
 800684a:	eb45 0303 	adc.w	r3, r5, r3
 800684e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800685e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800686e:	4629      	mov	r1, r5
 8006870:	008b      	lsls	r3, r1, #2
 8006872:	4621      	mov	r1, r4
 8006874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006878:	4621      	mov	r1, r4
 800687a:	008a      	lsls	r2, r1, #2
 800687c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006880:	f7fa f8c4 	bl	8000a0c <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4b60      	ldr	r3, [pc, #384]	; (8006a0c <UART_SetConfig+0x4e4>)
 800688a:	fba3 2302 	umull	r2, r3, r3, r2
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	011c      	lsls	r4, r3, #4
 8006892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006896:	2200      	movs	r2, #0
 8006898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800689c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068a4:	4642      	mov	r2, r8
 80068a6:	464b      	mov	r3, r9
 80068a8:	1891      	adds	r1, r2, r2
 80068aa:	61b9      	str	r1, [r7, #24]
 80068ac:	415b      	adcs	r3, r3
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068b4:	4641      	mov	r1, r8
 80068b6:	1851      	adds	r1, r2, r1
 80068b8:	6139      	str	r1, [r7, #16]
 80068ba:	4649      	mov	r1, r9
 80068bc:	414b      	adcs	r3, r1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068cc:	4659      	mov	r1, fp
 80068ce:	00cb      	lsls	r3, r1, #3
 80068d0:	4651      	mov	r1, sl
 80068d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068d6:	4651      	mov	r1, sl
 80068d8:	00ca      	lsls	r2, r1, #3
 80068da:	4610      	mov	r0, r2
 80068dc:	4619      	mov	r1, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	4642      	mov	r2, r8
 80068e2:	189b      	adds	r3, r3, r2
 80068e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068e8:	464b      	mov	r3, r9
 80068ea:	460a      	mov	r2, r1
 80068ec:	eb42 0303 	adc.w	r3, r2, r3
 80068f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800690c:	4649      	mov	r1, r9
 800690e:	008b      	lsls	r3, r1, #2
 8006910:	4641      	mov	r1, r8
 8006912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006916:	4641      	mov	r1, r8
 8006918:	008a      	lsls	r2, r1, #2
 800691a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800691e:	f7fa f875 	bl	8000a0c <__aeabi_uldivmod>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <UART_SetConfig+0x4e4>)
 8006928:	fba3 1302 	umull	r1, r3, r3, r2
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	2164      	movs	r1, #100	; 0x64
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	3332      	adds	r3, #50	; 0x32
 800693a:	4a34      	ldr	r2, [pc, #208]	; (8006a0c <UART_SetConfig+0x4e4>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006946:	441c      	add	r4, r3
 8006948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800694c:	2200      	movs	r2, #0
 800694e:	673b      	str	r3, [r7, #112]	; 0x70
 8006950:	677a      	str	r2, [r7, #116]	; 0x74
 8006952:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006956:	4642      	mov	r2, r8
 8006958:	464b      	mov	r3, r9
 800695a:	1891      	adds	r1, r2, r2
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	415b      	adcs	r3, r3
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006966:	4641      	mov	r1, r8
 8006968:	1851      	adds	r1, r2, r1
 800696a:	6039      	str	r1, [r7, #0]
 800696c:	4649      	mov	r1, r9
 800696e:	414b      	adcs	r3, r1
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800697e:	4659      	mov	r1, fp
 8006980:	00cb      	lsls	r3, r1, #3
 8006982:	4651      	mov	r1, sl
 8006984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006988:	4651      	mov	r1, sl
 800698a:	00ca      	lsls	r2, r1, #3
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	4603      	mov	r3, r0
 8006992:	4642      	mov	r2, r8
 8006994:	189b      	adds	r3, r3, r2
 8006996:	66bb      	str	r3, [r7, #104]	; 0x68
 8006998:	464b      	mov	r3, r9
 800699a:	460a      	mov	r2, r1
 800699c:	eb42 0303 	adc.w	r3, r2, r3
 80069a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	663b      	str	r3, [r7, #96]	; 0x60
 80069ac:	667a      	str	r2, [r7, #100]	; 0x64
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069ba:	4649      	mov	r1, r9
 80069bc:	008b      	lsls	r3, r1, #2
 80069be:	4641      	mov	r1, r8
 80069c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069c4:	4641      	mov	r1, r8
 80069c6:	008a      	lsls	r2, r1, #2
 80069c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069cc:	f7fa f81e 	bl	8000a0c <__aeabi_uldivmod>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <UART_SetConfig+0x4e4>)
 80069d6:	fba3 1302 	umull	r1, r3, r3, r2
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	2164      	movs	r1, #100	; 0x64
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	3332      	adds	r3, #50	; 0x32
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <UART_SetConfig+0x4e4>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	f003 020f 	and.w	r2, r3, #15
 80069f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4422      	add	r2, r4
 80069fc:	609a      	str	r2, [r3, #8]
}
 80069fe:	bf00      	nop
 8006a00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a04:	46bd      	mov	sp, r7
 8006a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a0a:	bf00      	nop
 8006a0c:	51eb851f 	.word	0x51eb851f

08006a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a10:	b084      	sub	sp, #16
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	f107 001c 	add.w	r0, r7, #28
 8006a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d122      	bne.n	8006a6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d105      	bne.n	8006a62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 faa2 	bl	8006fac <USB_CoreReset>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
 8006a6c:	e01a      	b.n	8006aa4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa96 	bl	8006fac <USB_CoreReset>
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38
 8006a96:	e005      	b.n	8006aa4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d10b      	bne.n	8006ac2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f043 0206 	orr.w	r2, r3, #6
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f043 0220 	orr.w	r2, r3, #32
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ace:	b004      	add	sp, #16
 8006ad0:	4770      	bx	lr

08006ad2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f023 0201 	bic.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d115      	bne.n	8006b42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b22:	2001      	movs	r0, #1
 8006b24:	f7fb ffd0 	bl	8002ac8 <HAL_Delay>
      ms++;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa2e 	bl	8006f90 <USB_GetMode>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d01e      	beq.n	8006b78 <USB_SetCurrentMode+0x84>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b31      	cmp	r3, #49	; 0x31
 8006b3e:	d9f0      	bls.n	8006b22 <USB_SetCurrentMode+0x2e>
 8006b40:	e01a      	b.n	8006b78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d115      	bne.n	8006b74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b54:	2001      	movs	r0, #1
 8006b56:	f7fb ffb7 	bl	8002ac8 <HAL_Delay>
      ms++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fa15 	bl	8006f90 <USB_GetMode>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <USB_SetCurrentMode+0x84>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b31      	cmp	r3, #49	; 0x31
 8006b70:	d9f0      	bls.n	8006b54 <USB_SetCurrentMode+0x60>
 8006b72:	e001      	b.n	8006b78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e005      	b.n	8006b84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b32      	cmp	r3, #50	; 0x32
 8006b7c:	d101      	bne.n	8006b82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b086      	sub	sp, #24
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	e009      	b.n	8006bc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	3340      	adds	r3, #64	; 0x40
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b0e      	cmp	r3, #14
 8006bc4:	d9f2      	bls.n	8006bac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d11c      	bne.n	8006c06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bda:	f043 0302 	orr.w	r3, r3, #2
 8006bde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
 8006c04:	e00b      	b.n	8006c1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c24:	461a      	mov	r2, r3
 8006c26:	2300      	movs	r3, #0
 8006c28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c30:	4619      	mov	r1, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c38:	461a      	mov	r2, r3
 8006c3a:	680b      	ldr	r3, [r1, #0]
 8006c3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d10c      	bne.n	8006c5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f965 	bl	8006f1c <USB_SetDevSpeed>
 8006c52:	e008      	b.n	8006c66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c54:	2101      	movs	r1, #1
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f960 	bl	8006f1c <USB_SetDevSpeed>
 8006c5c:	e003      	b.n	8006c66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c5e:	2103      	movs	r1, #3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f95b 	bl	8006f1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c66:	2110      	movs	r1, #16
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f8f3 	bl	8006e54 <USB_FlushTxFifo>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f91f 	bl	8006ebc <USB_FlushRxFifo>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8e:	461a      	mov	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	e043      	b.n	8006d3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc8:	d118      	bne.n	8006cfc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	e013      	b.n	8006d0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e008      	b.n	8006d0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	461a      	mov	r2, r3
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3301      	adds	r3, #1
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d3b7      	bcc.n	8006cb2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	e043      	b.n	8006dd0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d5e:	d118      	bne.n	8006d92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	461a      	mov	r2, r3
 8006d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e013      	b.n	8006da4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e008      	b.n	8006da4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2300      	movs	r3, #0
 8006da2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	461a      	mov	r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d3b7      	bcc.n	8006d48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006df8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d105      	bne.n	8006e0c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f043 0210 	orr.w	r2, r3, #16
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <USB_DevInit+0x2c4>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f043 0208 	orr.w	r2, r3, #8
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d107      	bne.n	8006e40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e38:	f043 0304 	orr.w	r3, r3, #4
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e4c:	b004      	add	sp, #16
 8006e4e:	4770      	bx	lr
 8006e50:	803c3800 	.word	0x803c3800

08006e54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <USB_FlushTxFifo+0x64>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d901      	bls.n	8006e74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e01b      	b.n	8006eac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	daf2      	bge.n	8006e62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	019b      	lsls	r3, r3, #6
 8006e84:	f043 0220 	orr.w	r2, r3, #32
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <USB_FlushTxFifo+0x64>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d901      	bls.n	8006e9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e006      	b.n	8006eac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	d0f0      	beq.n	8006e8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	00030d40 	.word	0x00030d40

08006ebc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a11      	ldr	r2, [pc, #68]	; (8006f18 <USB_FlushRxFifo+0x5c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e018      	b.n	8006f0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	daf2      	bge.n	8006ec8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2210      	movs	r2, #16
 8006eea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a08      	ldr	r2, [pc, #32]	; (8006f18 <USB_FlushRxFifo+0x5c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e006      	b.n	8006f0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f003 0310 	and.w	r3, r3, #16
 8006f06:	2b10      	cmp	r3, #16
 8006f08:	d0f0      	beq.n	8006eec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	00030d40 	.word	0x00030d40

08006f1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	68f9      	ldr	r1, [r7, #12]
 8006f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b085      	sub	sp, #20
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f68:	f023 0303 	bic.w	r3, r3, #3
 8006f6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7c:	f043 0302 	orr.w	r3, r3, #2
 8006f80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4a13      	ldr	r2, [pc, #76]	; (8007010 <USB_CoreReset+0x64>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d901      	bls.n	8006fca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e01b      	b.n	8007002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	daf2      	bge.n	8006fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f043 0201 	orr.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a09      	ldr	r2, [pc, #36]	; (8007010 <USB_CoreReset+0x64>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d901      	bls.n	8006ff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e006      	b.n	8007002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d0f0      	beq.n	8006fe2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	00030d40 	.word	0x00030d40

08007014 <__NVIC_SetPriority>:
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007024:	2b00      	cmp	r3, #0
 8007026:	db0a      	blt.n	800703e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	b2da      	uxtb	r2, r3
 800702c:	490c      	ldr	r1, [pc, #48]	; (8007060 <__NVIC_SetPriority+0x4c>)
 800702e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007032:	0112      	lsls	r2, r2, #4
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	440b      	add	r3, r1
 8007038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800703c:	e00a      	b.n	8007054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	4908      	ldr	r1, [pc, #32]	; (8007064 <__NVIC_SetPriority+0x50>)
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	3b04      	subs	r3, #4
 800704c:	0112      	lsls	r2, r2, #4
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	440b      	add	r3, r1
 8007052:	761a      	strb	r2, [r3, #24]
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	e000e100 	.word	0xe000e100
 8007064:	e000ed00 	.word	0xe000ed00

08007068 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <SysTick_Handler+0x1c>)
 800706e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007070:	f001 ffd2 	bl	8009018 <xTaskGetSchedulerState>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d001      	beq.n	800707e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800707a:	f002 fdf5 	bl	8009c68 <xPortSysTickHandler>
  }
}
 800707e:	bf00      	nop
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	e000e010 	.word	0xe000e010

08007088 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800708c:	2100      	movs	r1, #0
 800708e:	f06f 0004 	mvn.w	r0, #4
 8007092:	f7ff ffbf 	bl	8007014 <__NVIC_SetPriority>
#endif
}
 8007096:	bf00      	nop
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a2:	f3ef 8305 	mrs	r3, IPSR
 80070a6:	603b      	str	r3, [r7, #0]
  return(result);
 80070a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80070ae:	f06f 0305 	mvn.w	r3, #5
 80070b2:	607b      	str	r3, [r7, #4]
 80070b4:	e00c      	b.n	80070d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80070b6:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <osKernelInitialize+0x44>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d105      	bne.n	80070ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80070be:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <osKernelInitialize+0x44>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	e002      	b.n	80070d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80070ca:	f04f 33ff 	mov.w	r3, #4294967295
 80070ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070d0:	687b      	ldr	r3, [r7, #4]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	200011b0 	.word	0x200011b0

080070e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070ea:	f3ef 8305 	mrs	r3, IPSR
 80070ee:	603b      	str	r3, [r7, #0]
  return(result);
 80070f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80070f6:	f06f 0305 	mvn.w	r3, #5
 80070fa:	607b      	str	r3, [r7, #4]
 80070fc:	e010      	b.n	8007120 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070fe:	4b0b      	ldr	r3, [pc, #44]	; (800712c <osKernelStart+0x48>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d109      	bne.n	800711a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007106:	f7ff ffbf 	bl	8007088 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800710a:	4b08      	ldr	r3, [pc, #32]	; (800712c <osKernelStart+0x48>)
 800710c:	2202      	movs	r2, #2
 800710e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007110:	f001 fa88 	bl	8008624 <vTaskStartScheduler>
      stat = osOK;
 8007114:	2300      	movs	r3, #0
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	e002      	b.n	8007120 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800711a:	f04f 33ff 	mov.w	r3, #4294967295
 800711e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007120:	687b      	ldr	r3, [r7, #4]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200011b0 	.word	0x200011b0

08007130 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b08e      	sub	sp, #56	; 0x38
 8007134:	af04      	add	r7, sp, #16
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800713c:	2300      	movs	r3, #0
 800713e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007140:	f3ef 8305 	mrs	r3, IPSR
 8007144:	617b      	str	r3, [r7, #20]
  return(result);
 8007146:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007148:	2b00      	cmp	r3, #0
 800714a:	d17e      	bne.n	800724a <osThreadNew+0x11a>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d07b      	beq.n	800724a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007152:	2380      	movs	r3, #128	; 0x80
 8007154:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007156:	2318      	movs	r3, #24
 8007158:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800715a:	2300      	movs	r3, #0
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800715e:	f04f 33ff 	mov.w	r3, #4294967295
 8007162:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d045      	beq.n	80071f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <osThreadNew+0x48>
        name = attr->name;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <osThreadNew+0x6e>
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2b38      	cmp	r3, #56	; 0x38
 8007190:	d805      	bhi.n	800719e <osThreadNew+0x6e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <osThreadNew+0x72>
        return (NULL);
 800719e:	2300      	movs	r3, #0
 80071a0:	e054      	b.n	800724c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	089b      	lsrs	r3, r3, #2
 80071b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00e      	beq.n	80071d8 <osThreadNew+0xa8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	2bbb      	cmp	r3, #187	; 0xbb
 80071c0:	d90a      	bls.n	80071d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d006      	beq.n	80071d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <osThreadNew+0xa8>
        mem = 1;
 80071d2:	2301      	movs	r3, #1
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	e010      	b.n	80071fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10c      	bne.n	80071fa <osThreadNew+0xca>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d108      	bne.n	80071fa <osThreadNew+0xca>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <osThreadNew+0xca>
          mem = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61bb      	str	r3, [r7, #24]
 80071f4:	e001      	b.n	80071fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d110      	bne.n	8007222 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007208:	9202      	str	r2, [sp, #8]
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6a3a      	ldr	r2, [r7, #32]
 8007214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f001 f818 	bl	800824c <xTaskCreateStatic>
 800721c:	4603      	mov	r3, r0
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	e013      	b.n	800724a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d110      	bne.n	800724a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	b29a      	uxth	r2, r3
 800722c:	f107 0310 	add.w	r3, r7, #16
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f001 f863 	bl	8008306 <xTaskCreate>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d001      	beq.n	800724a <osThreadNew+0x11a>
            hTask = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800724a:	693b      	ldr	r3, [r7, #16]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3728      	adds	r7, #40	; 0x28
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800725c:	f3ef 8305 	mrs	r3, IPSR
 8007260:	60bb      	str	r3, [r7, #8]
  return(result);
 8007262:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <osDelay+0x1c>
    stat = osErrorISR;
 8007268:	f06f 0305 	mvn.w	r3, #5
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	e007      	b.n	8007280 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <osDelay+0x2c>
      vTaskDelay(ticks);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 f99e 	bl	80085bc <vTaskDelay>
    }
  }

  return (stat);
 8007280:	68fb      	ldr	r3, [r7, #12]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4a07      	ldr	r2, [pc, #28]	; (80072b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800729c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4a06      	ldr	r2, [pc, #24]	; (80072bc <vApplicationGetIdleTaskMemory+0x30>)
 80072a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2280      	movs	r2, #128	; 0x80
 80072a8:	601a      	str	r2, [r3, #0]
}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	200011b4 	.word	0x200011b4
 80072bc:	20001270 	.word	0x20001270

080072c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4a07      	ldr	r2, [pc, #28]	; (80072ec <vApplicationGetTimerTaskMemory+0x2c>)
 80072d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4a06      	ldr	r2, [pc, #24]	; (80072f0 <vApplicationGetTimerTaskMemory+0x30>)
 80072d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072de:	601a      	str	r2, [r3, #0]
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	20001470 	.word	0x20001470
 80072f0:	2000152c 	.word	0x2000152c

080072f4 <xEventGroupCreateStatic>:
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <xEventGroupCreateStatic+0x24>
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <xEventGroupCreateStatic+0x22>
 8007318:	2320      	movs	r3, #32
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b20      	cmp	r3, #32
 8007320:	d00a      	beq.n	8007338 <xEventGroupCreateStatic+0x44>
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <xEventGroupCreateStatic+0x42>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <xEventGroupCreateStatic+0x64>
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	3304      	adds	r3, #4
 800734c:	4618      	mov	r0, r3
 800734e:	f000 f9dd 	bl	800770c <vListInitialise>
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2201      	movs	r2, #1
 8007356:	771a      	strb	r2, [r3, #28]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <xEventGroupWaitBits>:
 8007364:	b580      	push	{r7, lr}
 8007366:	b090      	sub	sp, #64	; 0x40
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
 8007376:	2300      	movs	r3, #0
 8007378:	63bb      	str	r3, [r7, #56]	; 0x38
 800737a:	2300      	movs	r3, #0
 800737c:	633b      	str	r3, [r7, #48]	; 0x30
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <xEventGroupWaitBits+0x36>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	623b      	str	r3, [r7, #32]
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xEventGroupWaitBits+0x34>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <xEventGroupWaitBits+0x56>
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xEventGroupWaitBits+0x54>
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xEventGroupWaitBits+0x72>
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xEventGroupWaitBits+0x70>
 80073d6:	f001 fe1f 	bl	8009018 <xTaskGetSchedulerState>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <xEventGroupWaitBits+0x82>
 80073e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <xEventGroupWaitBits+0x86>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <xEventGroupWaitBits+0x88>
 80073ea:	2300      	movs	r3, #0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xEventGroupWaitBits+0xa2>
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xEventGroupWaitBits+0xa0>
 8007406:	f001 f97d 	bl	8008704 <vTaskSuspendAll>
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007416:	f000 f943 	bl	80076a0 <prvTestWaitCondition>
 800741a:	62b8      	str	r0, [r7, #40]	; 0x28
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00e      	beq.n	8007440 <xEventGroupWaitBits+0xdc>
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007426:	2300      	movs	r3, #0
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d028      	beq.n	8007482 <xEventGroupWaitBits+0x11e>
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	43db      	mvns	r3, r3
 8007438:	401a      	ands	r2, r3
 800743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e020      	b.n	8007482 <xEventGroupWaitBits+0x11e>
 8007440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007442:	2b00      	cmp	r3, #0
 8007444:	d104      	bne.n	8007450 <xEventGroupWaitBits+0xec>
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800744a:	2301      	movs	r3, #1
 800744c:	633b      	str	r3, [r7, #48]	; 0x30
 800744e:	e018      	b.n	8007482 <xEventGroupWaitBits+0x11e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <xEventGroupWaitBits+0xfa>
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800745c:	63bb      	str	r3, [r7, #56]	; 0x38
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <xEventGroupWaitBits+0x108>
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800746a:	63bb      	str	r3, [r7, #56]	; 0x38
 800746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746e:	1d18      	adds	r0, r3, #4
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	4313      	orrs	r3, r2
 8007476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007478:	4619      	mov	r1, r3
 800747a:	f001 fb41 	bl	8008b00 <vTaskPlaceOnUnorderedEventList>
 800747e:	2300      	movs	r3, #0
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007482:	f001 f94d 	bl	8008720 <xTaskResumeAll>
 8007486:	6278      	str	r0, [r7, #36]	; 0x24
 8007488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748a:	2b00      	cmp	r3, #0
 800748c:	d031      	beq.n	80074f2 <xEventGroupWaitBits+0x18e>
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d107      	bne.n	80074a4 <xEventGroupWaitBits+0x140>
 8007494:	4b19      	ldr	r3, [pc, #100]	; (80074fc <xEventGroupWaitBits+0x198>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f001 fe44 	bl	8009130 <uxTaskResetEventItemValue>
 80074a8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80074aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d11a      	bne.n	80074ea <xEventGroupWaitBits+0x186>
 80074b4:	f002 fb46 	bl	8009b44 <vPortEnterCritical>
 80074b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80074c4:	f000 f8ec 	bl	80076a0 <prvTestWaitCondition>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <xEventGroupWaitBits+0x17e>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d006      	beq.n	80074e2 <xEventGroupWaitBits+0x17e>
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	43db      	mvns	r3, r3
 80074dc:	401a      	ands	r2, r3
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	2301      	movs	r3, #1
 80074e4:	633b      	str	r3, [r7, #48]	; 0x30
 80074e6:	f002 fb5d 	bl	8009ba4 <vPortExitCritical>
 80074ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f4:	4618      	mov	r0, r3
 80074f6:	3740      	adds	r7, #64	; 0x40
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <xEventGroupClearBits>:
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <xEventGroupClearBits+0x2a>
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <xEventGroupClearBits+0x28>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <xEventGroupClearBits+0x4a>
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xEventGroupClearBits+0x48>
 800754a:	f002 fafb 	bl	8009b44 <vPortEnterCritical>
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	43db      	mvns	r3, r3
 800755c:	401a      	ands	r2, r3
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	f002 fb1f 	bl	8009ba4 <vPortExitCritical>
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <xEventGroupSetBits>:
 8007570:	b580      	push	{r7, lr}
 8007572:	b08e      	sub	sp, #56	; 0x38
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
 800757a:	2300      	movs	r3, #0
 800757c:	633b      	str	r3, [r7, #48]	; 0x30
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28
 8007582:	2300      	movs	r3, #0
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <xEventGroupSetBits+0x32>
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xEventGroupSetBits+0x30>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <xEventGroupSetBits+0x52>
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xEventGroupSetBits+0x50>
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	3304      	adds	r3, #4
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	3308      	adds	r3, #8
 80075cc:	623b      	str	r3, [r7, #32]
 80075ce:	f001 f899 	bl	8008704 <vTaskSuspendAll>
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	431a      	orrs	r2, r3
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e03c      	b.n	8007660 <xEventGroupSetBits+0xf0>
 80075e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	61fb      	str	r3, [r7, #28]
 80075ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	2300      	movs	r3, #0
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d108      	bne.n	8007622 <xEventGroupSetBits+0xb2>
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <xEventGroupSetBits+0xc4>
 800761c:	2301      	movs	r3, #1
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007620:	e008      	b.n	8007634 <xEventGroupSetBits+0xc4>
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	4013      	ands	r3, r2
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	429a      	cmp	r2, r3
 800762e:	d101      	bne.n	8007634 <xEventGroupSetBits+0xc4>
 8007630:	2301      	movs	r3, #1
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <xEventGroupSetBits+0xec>
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <xEventGroupSetBits+0xdc>
 8007644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	4313      	orrs	r3, r2
 800764a:	633b      	str	r3, [r7, #48]	; 0x30
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007654:	4619      	mov	r1, r3
 8007656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007658:	f001 fb1e 	bl	8008c98 <vTaskRemoveFromUnorderedEventList>
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	637b      	str	r3, [r7, #52]	; 0x34
 8007660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	429a      	cmp	r2, r3
 8007666:	d1be      	bne.n	80075e6 <xEventGroupSetBits+0x76>
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	43db      	mvns	r3, r3
 8007670:	401a      	ands	r2, r3
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	f001 f853 	bl	8008720 <xTaskResumeAll>
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	3738      	adds	r7, #56	; 0x38
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <vEventGroupSetBitsCallback>:
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff ff6c 	bl	8007570 <xEventGroupSetBits>
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <prvTestWaitCondition>:
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d107      	bne.n	80076c6 <prvTestWaitCondition+0x26>
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <prvTestWaitCondition+0x36>
 80076c0:	2301      	movs	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e007      	b.n	80076d6 <prvTestWaitCondition+0x36>
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4013      	ands	r3, r2
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d101      	bne.n	80076d6 <prvTestWaitCondition+0x36>
 80076d2:	2301      	movs	r3, #1
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	4618      	mov	r0, r3
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <xEventGroupSetBitsFromISR>:
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	68f9      	ldr	r1, [r7, #12]
 80076f6:	4804      	ldr	r0, [pc, #16]	; (8007708 <xEventGroupSetBitsFromISR+0x24>)
 80076f8:	f002 f8d4 	bl	80098a4 <xTimerPendFunctionCallFromISR>
 80076fc:	6178      	str	r0, [r7, #20]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	08007687 	.word	0x08007687

0800770c <vListInitialise>:
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f103 0208 	add.w	r2, r3, #8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f04f 32ff 	mov.w	r2, #4294967295
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f103 0208 	add.w	r2, r3, #8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f103 0208 	add.w	r2, r3, #8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	611a      	str	r2, [r3, #16]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <vListInitialiseItem>:
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <vListInsertEnd>:
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	609a      	str	r2, [r3, #8]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	605a      	str	r2, [r3, #4]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	609a      	str	r2, [r3, #8]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	611a      	str	r2, [r3, #16]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <vListInsert>:
 80077ae:	b480      	push	{r7}
 80077b0:	b085      	sub	sp, #20
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d103      	bne.n	80077ce <vListInsert+0x20>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	e00c      	b.n	80077e8 <vListInsert+0x3a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3308      	adds	r3, #8
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e002      	b.n	80077dc <vListInsert+0x2e>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d2f6      	bcs.n	80077d6 <vListInsert+0x28>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	605a      	str	r2, [r3, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	609a      	str	r2, [r3, #8]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	609a      	str	r2, [r3, #8]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	611a      	str	r2, [r3, #16]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <uxListRemove>:
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	60fb      	str	r3, [r7, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6892      	ldr	r2, [r2, #8]
 8007836:	609a      	str	r2, [r3, #8]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6852      	ldr	r2, [r2, #4]
 8007840:	605a      	str	r2, [r3, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d103      	bne.n	8007854 <uxListRemove+0x34>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	605a      	str	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <xQueueGenericReset>:
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <xQueueGenericReset+0x2a>
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60bb      	str	r3, [r7, #8]
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <xQueueGenericReset+0x28>
 800789e:	f002 f951 	bl	8009b44 <vPortEnterCritical>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078ae:	fb01 f303 	mul.w	r3, r1, r3
 80078b2:	441a      	add	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	609a      	str	r2, [r3, #8]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	605a      	str	r2, [r3, #4]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ce:	3b01      	subs	r3, #1
 80078d0:	68f9      	ldr	r1, [r7, #12]
 80078d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078d4:	fb01 f303 	mul.w	r3, r1, r3
 80078d8:	441a      	add	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	22ff      	movs	r2, #255	; 0xff
 80078e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	22ff      	movs	r2, #255	; 0xff
 80078ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d114      	bne.n	800791e <xQueueGenericReset+0xaa>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01a      	beq.n	8007932 <xQueueGenericReset+0xbe>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3310      	adds	r3, #16
 8007900:	4618      	mov	r0, r3
 8007902:	f001 f965 	bl	8008bd0 <xTaskRemoveFromEventList>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d012      	beq.n	8007932 <xQueueGenericReset+0xbe>
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <xQueueGenericReset+0xcc>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	e009      	b.n	8007932 <xQueueGenericReset+0xbe>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3310      	adds	r3, #16
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff fef2 	bl	800770c <vListInitialise>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3324      	adds	r3, #36	; 0x24
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff feed 	bl	800770c <vListInitialise>
 8007932:	f002 f937 	bl	8009ba4 <vPortExitCritical>
 8007936:	2301      	movs	r3, #1
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <xQueueGenericCreateStatic>:
 8007944:	b580      	push	{r7, lr}
 8007946:	b08e      	sub	sp, #56	; 0x38
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xQueueGenericCreateStatic+0x2a>
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericCreateStatic+0x28>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xQueueGenericCreateStatic+0x46>
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xQueueGenericCreateStatic+0x44>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <xQueueGenericCreateStatic+0x52>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <xQueueGenericCreateStatic+0x56>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <xQueueGenericCreateStatic+0x58>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xQueueGenericCreateStatic+0x72>
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	623b      	str	r3, [r7, #32]
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xQueueGenericCreateStatic+0x70>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <xQueueGenericCreateStatic+0x7e>
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <xQueueGenericCreateStatic+0x82>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <xQueueGenericCreateStatic+0x84>
 80079c6:	2300      	movs	r3, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <xQueueGenericCreateStatic+0x9e>
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <xQueueGenericCreateStatic+0x9c>
 80079e2:	2350      	movs	r3, #80	; 0x50
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b50      	cmp	r3, #80	; 0x50
 80079ea:	d00a      	beq.n	8007a02 <xQueueGenericCreateStatic+0xbe>
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	61bb      	str	r3, [r7, #24]
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <xQueueGenericCreateStatic+0xbc>
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00d      	beq.n	8007a2a <xQueueGenericCreateStatic+0xe6>
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f805 	bl	8007a34 <prvInitialiseNewQueue>
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3730      	adds	r7, #48	; 0x30
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <prvInitialiseNewQueue>:
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	70fb      	strb	r3, [r7, #3]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <prvInitialiseNewQueue+0x1c>
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e002      	b.n	8007a56 <prvInitialiseNewQueue+0x22>
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	641a      	str	r2, [r3, #64]	; 0x40
 8007a62:	2101      	movs	r1, #1
 8007a64:	69b8      	ldr	r0, [r7, #24]
 8007a66:	f7ff ff05 	bl	8007874 <xQueueGenericReset>
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8007a72:	bf00      	nop
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <xQueueGenericSend>:
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08e      	sub	sp, #56	; 0x38
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	633b      	str	r3, [r7, #48]	; 0x30
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <xQueueGenericSend+0x32>
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <xQueueGenericSend+0x30>
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <xQueueGenericSend+0x40>
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <xQueueGenericSend+0x44>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <xQueueGenericSend+0x46>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <xQueueGenericSend+0x60>
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad8:	bf00      	nop
 8007ada:	e7fe      	b.n	8007ada <xQueueGenericSend+0x5e>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d103      	bne.n	8007aea <xQueueGenericSend+0x6e>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <xQueueGenericSend+0x72>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <xQueueGenericSend+0x74>
 8007aee:	2300      	movs	r3, #0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <xQueueGenericSend+0x8e>
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	623b      	str	r3, [r7, #32]
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xQueueGenericSend+0x8c>
 8007b0a:	f001 fa85 	bl	8009018 <xTaskGetSchedulerState>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <xQueueGenericSend+0x9e>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <xQueueGenericSend+0xa2>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <xQueueGenericSend+0xa4>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <xQueueGenericSend+0xbe>
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <xQueueGenericSend+0xbc>
 8007b3a:	f002 f803 	bl	8009b44 <vPortEnterCritical>
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d302      	bcc.n	8007b50 <xQueueGenericSend+0xd4>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d129      	bne.n	8007ba4 <xQueueGenericSend+0x128>
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b56:	f000 fa0b 	bl	8007f70 <prvCopyDataToQueue>
 8007b5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <xQueueGenericSend+0x10a>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	3324      	adds	r3, #36	; 0x24
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f001 f831 	bl	8008bd0 <xTaskRemoveFromEventList>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d013      	beq.n	8007b9c <xQueueGenericSend+0x120>
 8007b74:	4b3f      	ldr	r3, [pc, #252]	; (8007c74 <xQueueGenericSend+0x1f8>)
 8007b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	e00a      	b.n	8007b9c <xQueueGenericSend+0x120>
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <xQueueGenericSend+0x120>
 8007b8c:	4b39      	ldr	r3, [pc, #228]	; (8007c74 <xQueueGenericSend+0x1f8>)
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f002 f802 	bl	8009ba4 <vPortExitCritical>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e063      	b.n	8007c6c <xQueueGenericSend+0x1f0>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <xQueueGenericSend+0x136>
 8007baa:	f001 fffb 	bl	8009ba4 <vPortExitCritical>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e05c      	b.n	8007c6c <xQueueGenericSend+0x1f0>
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <xQueueGenericSend+0x14a>
 8007bb8:	f107 0314 	add.w	r3, r7, #20
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 f8cd 	bl	8008d5c <vTaskInternalSetTimeOutState>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc6:	f001 ffed 	bl	8009ba4 <vPortExitCritical>
 8007bca:	f000 fd9b 	bl	8008704 <vTaskSuspendAll>
 8007bce:	f001 ffb9 	bl	8009b44 <vPortEnterCritical>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd8:	b25b      	sxtb	r3, r3
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d103      	bne.n	8007be8 <xQueueGenericSend+0x16c>
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bee:	b25b      	sxtb	r3, r3
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d103      	bne.n	8007bfe <xQueueGenericSend+0x182>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bfe:	f001 ffd1 	bl	8009ba4 <vPortExitCritical>
 8007c02:	1d3a      	adds	r2, r7, #4
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f8bc 	bl	8008d88 <xTaskCheckForTimeOut>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d124      	bne.n	8007c60 <xQueueGenericSend+0x1e4>
 8007c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c18:	f000 faa2 	bl	8008160 <prvIsQueueFull>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d018      	beq.n	8007c54 <xQueueGenericSend+0x1d8>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	3310      	adds	r3, #16
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 ff44 	bl	8008ab8 <vTaskPlaceOnEventList>
 8007c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c32:	f000 fa2d 	bl	8008090 <prvUnlockQueue>
 8007c36:	f000 fd73 	bl	8008720 <xTaskResumeAll>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f47f af7c 	bne.w	8007b3a <xQueueGenericSend+0xbe>
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <xQueueGenericSend+0x1f8>)
 8007c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	e772      	b.n	8007b3a <xQueueGenericSend+0xbe>
 8007c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c56:	f000 fa1b 	bl	8008090 <prvUnlockQueue>
 8007c5a:	f000 fd61 	bl	8008720 <xTaskResumeAll>
 8007c5e:	e76c      	b.n	8007b3a <xQueueGenericSend+0xbe>
 8007c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c62:	f000 fa15 	bl	8008090 <prvUnlockQueue>
 8007c66:	f000 fd5b 	bl	8008720 <xTaskResumeAll>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3738      	adds	r7, #56	; 0x38
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	e000ed04 	.word	0xe000ed04

08007c78 <xQueueGenericSendFromISR>:
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b090      	sub	sp, #64	; 0x40
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xQueueGenericSendFromISR+0x2e>
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xQueueGenericSendFromISR+0x2c>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d103      	bne.n	8007cb4 <xQueueGenericSendFromISR+0x3c>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <xQueueGenericSendFromISR+0x40>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <xQueueGenericSendFromISR+0x42>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <xQueueGenericSendFromISR+0x5c>
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <xQueueGenericSendFromISR+0x5a>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d103      	bne.n	8007ce2 <xQueueGenericSendFromISR+0x6a>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <xQueueGenericSendFromISR+0x6e>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <xQueueGenericSendFromISR+0x70>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <xQueueGenericSendFromISR+0x8a>
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	623b      	str	r3, [r7, #32]
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xQueueGenericSendFromISR+0x88>
 8007d02:	f002 f801 	bl	8009d08 <vPortValidateInterruptPriority>
 8007d06:	f3ef 8211 	mrs	r2, BASEPRI
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	61fa      	str	r2, [r7, #28]
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d302      	bcc.n	8007d34 <xQueueGenericSendFromISR+0xbc>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d12f      	bne.n	8007d94 <xQueueGenericSendFromISR+0x11c>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	68b9      	ldr	r1, [r7, #8]
 8007d48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d4a:	f000 f911 	bl	8007f70 <prvCopyDataToQueue>
 8007d4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d112      	bne.n	8007d7e <xQueueGenericSendFromISR+0x106>
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d016      	beq.n	8007d8e <xQueueGenericSendFromISR+0x116>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 ff33 	bl	8008bd0 <xTaskRemoveFromEventList>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <xQueueGenericSendFromISR+0x116>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <xQueueGenericSendFromISR+0x116>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	e007      	b.n	8007d8e <xQueueGenericSendFromISR+0x116>
 8007d7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d82:	3301      	adds	r3, #1
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	b25a      	sxtb	r2, r3
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d8e:	2301      	movs	r3, #1
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d92:	e001      	b.n	8007d98 <xQueueGenericSendFromISR+0x120>
 8007d94:	2300      	movs	r3, #0
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	bf00      	nop
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	4618      	mov	r0, r3
 8007da8:	3740      	adds	r7, #64	; 0x40
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <xQueueReceive>:
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08c      	sub	sp, #48	; 0x30
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <xQueueReceive+0x30>
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	623b      	str	r3, [r7, #32]
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xQueueReceive+0x2e>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d103      	bne.n	8007dee <xQueueReceive+0x3e>
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <xQueueReceive+0x42>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <xQueueReceive+0x44>
 8007df2:	2300      	movs	r3, #0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <xQueueReceive+0x5e>
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <xQueueReceive+0x5c>
 8007e0e:	f001 f903 	bl	8009018 <xTaskGetSchedulerState>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d102      	bne.n	8007e1e <xQueueReceive+0x6e>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <xQueueReceive+0x72>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <xQueueReceive+0x74>
 8007e22:	2300      	movs	r3, #0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <xQueueReceive+0x8e>
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <xQueueReceive+0x8c>
 8007e3e:	f001 fe81 	bl	8009b44 <vPortEnterCritical>
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d01f      	beq.n	8007e8e <xQueueReceive+0xde>
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e52:	f000 f8f7 	bl	8008044 <prvCopyDataFromQueue>
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	1e5a      	subs	r2, r3, #1
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00f      	beq.n	8007e86 <xQueueReceive+0xd6>
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	3310      	adds	r3, #16
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 feb0 	bl	8008bd0 <xTaskRemoveFromEventList>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d007      	beq.n	8007e86 <xQueueReceive+0xd6>
 8007e76:	4b3d      	ldr	r3, [pc, #244]	; (8007f6c <xQueueReceive+0x1bc>)
 8007e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f001 fe8d 	bl	8009ba4 <vPortExitCritical>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e069      	b.n	8007f62 <xQueueReceive+0x1b2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d103      	bne.n	8007e9c <xQueueReceive+0xec>
 8007e94:	f001 fe86 	bl	8009ba4 <vPortExitCritical>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e062      	b.n	8007f62 <xQueueReceive+0x1b2>
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <xQueueReceive+0x100>
 8007ea2:	f107 0310 	add.w	r3, r7, #16
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 ff58 	bl	8008d5c <vTaskInternalSetTimeOutState>
 8007eac:	2301      	movs	r3, #1
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb0:	f001 fe78 	bl	8009ba4 <vPortExitCritical>
 8007eb4:	f000 fc26 	bl	8008704 <vTaskSuspendAll>
 8007eb8:	f001 fe44 	bl	8009b44 <vPortEnterCritical>
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d103      	bne.n	8007ed2 <xQueueReceive+0x122>
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d103      	bne.n	8007ee8 <xQueueReceive+0x138>
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ee8:	f001 fe5c 	bl	8009ba4 <vPortExitCritical>
 8007eec:	1d3a      	adds	r2, r7, #4
 8007eee:	f107 0310 	add.w	r3, r7, #16
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 ff47 	bl	8008d88 <xTaskCheckForTimeOut>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d123      	bne.n	8007f48 <xQueueReceive+0x198>
 8007f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f02:	f000 f917 	bl	8008134 <prvIsQueueEmpty>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d017      	beq.n	8007f3c <xQueueReceive+0x18c>
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	3324      	adds	r3, #36	; 0x24
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fdcf 	bl	8008ab8 <vTaskPlaceOnEventList>
 8007f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f1c:	f000 f8b8 	bl	8008090 <prvUnlockQueue>
 8007f20:	f000 fbfe 	bl	8008720 <xTaskResumeAll>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d189      	bne.n	8007e3e <xQueueReceive+0x8e>
 8007f2a:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <xQueueReceive+0x1bc>)
 8007f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	e780      	b.n	8007e3e <xQueueReceive+0x8e>
 8007f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3e:	f000 f8a7 	bl	8008090 <prvUnlockQueue>
 8007f42:	f000 fbed 	bl	8008720 <xTaskResumeAll>
 8007f46:	e77a      	b.n	8007e3e <xQueueReceive+0x8e>
 8007f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f4a:	f000 f8a1 	bl	8008090 <prvUnlockQueue>
 8007f4e:	f000 fbe7 	bl	8008720 <xTaskResumeAll>
 8007f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f54:	f000 f8ee 	bl	8008134 <prvIsQueueEmpty>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f43f af6f 	beq.w	8007e3e <xQueueReceive+0x8e>
 8007f60:	2300      	movs	r3, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	3730      	adds	r7, #48	; 0x30
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	e000ed04 	.word	0xe000ed04

08007f70 <prvCopyDataToQueue>:
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10d      	bne.n	8007faa <prvCopyDataToQueue+0x3a>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d14d      	bne.n	8008032 <prvCopyDataToQueue+0xc2>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 f85a 	bl	8009054 <xTaskPriorityDisinherit>
 8007fa0:	6178      	str	r0, [r7, #20]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	e043      	b.n	8008032 <prvCopyDataToQueue+0xc2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d119      	bne.n	8007fe4 <prvCopyDataToQueue+0x74>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6858      	ldr	r0, [r3, #4]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	f003 f8e0 	bl	800b180 <memcpy>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	441a      	add	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	605a      	str	r2, [r3, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d32b      	bcc.n	8008032 <prvCopyDataToQueue+0xc2>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	605a      	str	r2, [r3, #4]
 8007fe2:	e026      	b.n	8008032 <prvCopyDataToQueue+0xc2>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68d8      	ldr	r0, [r3, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	461a      	mov	r2, r3
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	f003 f8c6 	bl	800b180 <memcpy>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	425b      	negs	r3, r3
 8007ffe:	441a      	add	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	60da      	str	r2, [r3, #12]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d207      	bcs.n	8008020 <prvCopyDataToQueue+0xb0>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	425b      	negs	r3, r3
 800801a:	441a      	add	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	60da      	str	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d105      	bne.n	8008032 <prvCopyDataToQueue+0xc2>
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <prvCopyDataToQueue+0xc2>
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	3b01      	subs	r3, #1
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	639a      	str	r2, [r3, #56]	; 0x38
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	4618      	mov	r0, r3
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <prvCopyDataFromQueue>:
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	d018      	beq.n	8008088 <prvCopyDataFromQueue+0x44>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	441a      	add	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	60da      	str	r2, [r3, #12]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d303      	bcc.n	8008078 <prvCopyDataFromQueue+0x34>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60da      	str	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68d9      	ldr	r1, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	461a      	mov	r2, r3
 8008082:	6838      	ldr	r0, [r7, #0]
 8008084:	f003 f87c 	bl	800b180 <memcpy>
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <prvUnlockQueue>:
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	f001 fd54 	bl	8009b44 <vPortEnterCritical>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080a2:	73fb      	strb	r3, [r7, #15]
 80080a4:	e011      	b.n	80080ca <prvUnlockQueue+0x3a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d012      	beq.n	80080d4 <prvUnlockQueue+0x44>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3324      	adds	r3, #36	; 0x24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fd8c 	bl	8008bd0 <xTaskRemoveFromEventList>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <prvUnlockQueue+0x32>
 80080be:	f000 fec5 	bl	8008e4c <vTaskMissedYield>
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	73fb      	strb	r3, [r7, #15]
 80080ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	dce9      	bgt.n	80080a6 <prvUnlockQueue+0x16>
 80080d2:	e000      	b.n	80080d6 <prvUnlockQueue+0x46>
 80080d4:	bf00      	nop
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080de:	f001 fd61 	bl	8009ba4 <vPortExitCritical>
 80080e2:	f001 fd2f 	bl	8009b44 <vPortEnterCritical>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ec:	73bb      	strb	r3, [r7, #14]
 80080ee:	e011      	b.n	8008114 <prvUnlockQueue+0x84>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d012      	beq.n	800811e <prvUnlockQueue+0x8e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3310      	adds	r3, #16
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fd67 	bl	8008bd0 <xTaskRemoveFromEventList>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <prvUnlockQueue+0x7c>
 8008108:	f000 fea0 	bl	8008e4c <vTaskMissedYield>
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	3b01      	subs	r3, #1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	73bb      	strb	r3, [r7, #14]
 8008114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008118:	2b00      	cmp	r3, #0
 800811a:	dce9      	bgt.n	80080f0 <prvUnlockQueue+0x60>
 800811c:	e000      	b.n	8008120 <prvUnlockQueue+0x90>
 800811e:	bf00      	nop
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	22ff      	movs	r2, #255	; 0xff
 8008124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008128:	f001 fd3c 	bl	8009ba4 <vPortExitCritical>
 800812c:	bf00      	nop
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <prvIsQueueEmpty>:
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	f001 fd02 	bl	8009b44 <vPortEnterCritical>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <prvIsQueueEmpty+0x1a>
 8008148:	2301      	movs	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	e001      	b.n	8008152 <prvIsQueueEmpty+0x1e>
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	f001 fd27 	bl	8009ba4 <vPortExitCritical>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <prvIsQueueFull>:
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	f001 fcec 	bl	8009b44 <vPortEnterCritical>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008174:	429a      	cmp	r2, r3
 8008176:	d102      	bne.n	800817e <prvIsQueueFull+0x1e>
 8008178:	2301      	movs	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e001      	b.n	8008182 <prvIsQueueFull+0x22>
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	f001 fd0f 	bl	8009ba4 <vPortExitCritical>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <vQueueAddToRegistry>:
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	e014      	b.n	80081ca <vQueueAddToRegistry+0x3a>
 80081a0:	4a0f      	ldr	r2, [pc, #60]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <vQueueAddToRegistry+0x34>
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4413      	add	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	605a      	str	r2, [r3, #4]
 80081c2:	e006      	b.n	80081d2 <vQueueAddToRegistry+0x42>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b07      	cmp	r3, #7
 80081ce:	d9e7      	bls.n	80081a0 <vQueueAddToRegistry+0x10>
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	2000192c 	.word	0x2000192c

080081e4 <vQueueWaitForMessageRestricted>:
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	f001 fca6 	bl	8009b44 <vPortEnterCritical>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081fe:	b25b      	sxtb	r3, r3
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d103      	bne.n	800820e <vQueueWaitForMessageRestricted+0x2a>
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008214:	b25b      	sxtb	r3, r3
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d103      	bne.n	8008224 <vQueueWaitForMessageRestricted+0x40>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008224:	f001 fcbe 	bl	8009ba4 <vPortExitCritical>
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <vQueueWaitForMessageRestricted+0x5a>
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	3324      	adds	r3, #36	; 0x24
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fc9d 	bl	8008b78 <vTaskPlaceOnEventListRestricted>
 800823e:	6978      	ldr	r0, [r7, #20]
 8008240:	f7ff ff26 	bl	8008090 <prvUnlockQueue>
 8008244:	bf00      	nop
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <xTaskCreateStatic>:
 800824c:	b580      	push	{r7, lr}
 800824e:	b08e      	sub	sp, #56	; 0x38
 8008250:	af04      	add	r7, sp, #16
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10a      	bne.n	8008276 <xTaskCreateStatic+0x2a>
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	623b      	str	r3, [r7, #32]
 8008272:	bf00      	nop
 8008274:	e7fe      	b.n	8008274 <xTaskCreateStatic+0x28>
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <xTaskCreateStatic+0x46>
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xTaskCreateStatic+0x44>
 8008292:	23bc      	movs	r3, #188	; 0xbc
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2bbc      	cmp	r3, #188	; 0xbc
 800829a:	d00a      	beq.n	80082b2 <xTaskCreateStatic+0x66>
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	61bb      	str	r3, [r7, #24]
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xTaskCreateStatic+0x64>
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01e      	beq.n	80082f8 <xTaskCreateStatic+0xac>
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01b      	beq.n	80082f8 <xTaskCreateStatic+0xac>
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	2202      	movs	r2, #2
 80082ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 80082d2:	2300      	movs	r3, #0
 80082d4:	9303      	str	r3, [sp, #12]
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f850 	bl	8008390 <prvInitialiseNewTask>
 80082f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082f2:	f000 f8f3 	bl	80084dc <prvAddNewTaskToReadyList>
 80082f6:	e001      	b.n	80082fc <xTaskCreateStatic+0xb0>
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4618      	mov	r0, r3
 8008300:	3728      	adds	r7, #40	; 0x28
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <xTaskCreate>:
 8008306:	b580      	push	{r7, lr}
 8008308:	b08c      	sub	sp, #48	; 0x30
 800830a:	af04      	add	r7, sp, #16
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	4613      	mov	r3, r2
 8008314:	80fb      	strh	r3, [r7, #6]
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4618      	mov	r0, r3
 800831c:	f001 fd34 	bl	8009d88 <pvPortMalloc>
 8008320:	6178      	str	r0, [r7, #20]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00e      	beq.n	8008346 <xTaskCreate+0x40>
 8008328:	20bc      	movs	r0, #188	; 0xbc
 800832a:	f001 fd2d 	bl	8009d88 <pvPortMalloc>
 800832e:	61f8      	str	r0, [r7, #28]
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <xTaskCreate+0x38>
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	631a      	str	r2, [r3, #48]	; 0x30
 800833c:	e005      	b.n	800834a <xTaskCreate+0x44>
 800833e:	6978      	ldr	r0, [r7, #20]
 8008340:	f001 fdee 	bl	8009f20 <vPortFree>
 8008344:	e001      	b.n	800834a <xTaskCreate+0x44>
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d017      	beq.n	8008380 <xTaskCreate+0x7a>
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	2300      	movs	r3, #0
 800835c:	9303      	str	r3, [sp, #12]
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	9302      	str	r3, [sp, #8]
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 f80e 	bl	8008390 <prvInitialiseNewTask>
 8008374:	69f8      	ldr	r0, [r7, #28]
 8008376:	f000 f8b1 	bl	80084dc <prvAddNewTaskToReadyList>
 800837a:	2301      	movs	r3, #1
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e002      	b.n	8008386 <xTaskCreate+0x80>
 8008380:	f04f 33ff 	mov.w	r3, #4294967295
 8008384:	61bb      	str	r3, [r7, #24]
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	4618      	mov	r0, r3
 800838a:	3720      	adds	r7, #32
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <prvInitialiseNewTask>:
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	461a      	mov	r2, r3
 80083a8:	21a5      	movs	r1, #165	; 0xa5
 80083aa:	f002 fef7 	bl	800b19c <memset>
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083b8:	3b01      	subs	r3, #1
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	f023 0307 	bic.w	r3, r3, #7
 80083c6:	61bb      	str	r3, [r7, #24]
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <prvInitialiseNewTask+0x58>
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <prvInitialiseNewTask+0x56>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d01f      	beq.n	800842e <prvInitialiseNewTask+0x9e>
 80083ee:	2300      	movs	r3, #0
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	e012      	b.n	800841a <prvInitialiseNewTask+0x8a>
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4413      	add	r3, r2
 80083fa:	7819      	ldrb	r1, [r3, #0]
 80083fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	3334      	adds	r3, #52	; 0x34
 8008404:	460a      	mov	r2, r1
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d006      	beq.n	8008422 <prvInitialiseNewTask+0x92>
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	3301      	adds	r3, #1
 8008418:	61fb      	str	r3, [r7, #28]
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	2b0f      	cmp	r3, #15
 800841e:	d9e9      	bls.n	80083f4 <prvInitialiseNewTask+0x64>
 8008420:	e000      	b.n	8008424 <prvInitialiseNewTask+0x94>
 8008422:	bf00      	nop
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800842c:	e003      	b.n	8008436 <prvInitialiseNewTask+0xa6>
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	2b37      	cmp	r3, #55	; 0x37
 800843a:	d901      	bls.n	8008440 <prvInitialiseNewTask+0xb0>
 800843c:	2337      	movs	r3, #55	; 0x37
 800843e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008444:	62da      	str	r2, [r3, #44]	; 0x2c
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800844a:	64da      	str	r2, [r3, #76]	; 0x4c
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	2200      	movs	r2, #0
 8008450:	651a      	str	r2, [r3, #80]	; 0x50
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	3304      	adds	r3, #4
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff f978 	bl	800774c <vListInitialiseItem>
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	3318      	adds	r3, #24
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff f973 	bl	800774c <vListInitialiseItem>
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800846a:	611a      	str	r2, [r3, #16]
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	619a      	str	r2, [r3, #24]
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847a:	625a      	str	r2, [r3, #36]	; 0x24
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	2200      	movs	r2, #0
 8008488:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	3354      	adds	r3, #84	; 0x54
 8008490:	2260      	movs	r2, #96	; 0x60
 8008492:	2100      	movs	r1, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f002 fe81 	bl	800b19c <memset>
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	4a0c      	ldr	r2, [pc, #48]	; (80084d0 <prvInitialiseNewTask+0x140>)
 800849e:	659a      	str	r2, [r3, #88]	; 0x58
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	4a0c      	ldr	r2, [pc, #48]	; (80084d4 <prvInitialiseNewTask+0x144>)
 80084a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	4a0b      	ldr	r2, [pc, #44]	; (80084d8 <prvInitialiseNewTask+0x148>)
 80084aa:	661a      	str	r2, [r3, #96]	; 0x60
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	69b8      	ldr	r0, [r7, #24]
 80084b2:	f001 fa17 	bl	80098e4 <pxPortInitialiseStack>
 80084b6:	4602      	mov	r2, r0
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <prvInitialiseNewTask+0x138>
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	bf00      	nop
 80084ca:	3720      	adds	r7, #32
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	0800b45c 	.word	0x0800b45c
 80084d4:	0800b47c 	.word	0x0800b47c
 80084d8:	0800b43c 	.word	0x0800b43c

080084dc <prvAddNewTaskToReadyList>:
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	f001 fb2e 	bl	8009b44 <vPortEnterCritical>
 80084e8:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <prvAddNewTaskToReadyList+0xc4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	4a2c      	ldr	r2, [pc, #176]	; (80085a0 <prvAddNewTaskToReadyList+0xc4>)
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	4b2c      	ldr	r3, [pc, #176]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <prvAddNewTaskToReadyList+0x32>
 80084fa:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <prvAddNewTaskToReadyList+0xc4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d110      	bne.n	800852a <prvAddNewTaskToReadyList+0x4e>
 8008508:	f000 fcc4 	bl	8008e94 <prvInitialiseTaskLists>
 800850c:	e00d      	b.n	800852a <prvAddNewTaskToReadyList+0x4e>
 800850e:	4b26      	ldr	r3, [pc, #152]	; (80085a8 <prvAddNewTaskToReadyList+0xcc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <prvAddNewTaskToReadyList+0x4e>
 8008516:	4b23      	ldr	r3, [pc, #140]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	429a      	cmp	r2, r3
 8008522:	d802      	bhi.n	800852a <prvAddNewTaskToReadyList+0x4e>
 8008524:	4a1f      	ldr	r2, [pc, #124]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	4b20      	ldr	r3, [pc, #128]	; (80085ac <prvAddNewTaskToReadyList+0xd0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	4a1e      	ldr	r2, [pc, #120]	; (80085ac <prvAddNewTaskToReadyList+0xd0>)
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <prvAddNewTaskToReadyList+0xd0>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	645a      	str	r2, [r3, #68]	; 0x44
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008540:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <prvAddNewTaskToReadyList+0xd4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d903      	bls.n	8008550 <prvAddNewTaskToReadyList+0x74>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	4a18      	ldr	r2, [pc, #96]	; (80085b0 <prvAddNewTaskToReadyList+0xd4>)
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008554:	4613      	mov	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4a15      	ldr	r2, [pc, #84]	; (80085b4 <prvAddNewTaskToReadyList+0xd8>)
 800855e:	441a      	add	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3304      	adds	r3, #4
 8008564:	4619      	mov	r1, r3
 8008566:	4610      	mov	r0, r2
 8008568:	f7ff f8fd 	bl	8007766 <vListInsertEnd>
 800856c:	f001 fb1a 	bl	8009ba4 <vPortExitCritical>
 8008570:	4b0d      	ldr	r3, [pc, #52]	; (80085a8 <prvAddNewTaskToReadyList+0xcc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <prvAddNewTaskToReadyList+0xba>
 8008578:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <prvAddNewTaskToReadyList+0xc8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	429a      	cmp	r2, r3
 8008584:	d207      	bcs.n	8008596 <prvAddNewTaskToReadyList+0xba>
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvAddNewTaskToReadyList+0xdc>)
 8008588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20001e40 	.word	0x20001e40
 80085a4:	2000196c 	.word	0x2000196c
 80085a8:	20001e4c 	.word	0x20001e4c
 80085ac:	20001e5c 	.word	0x20001e5c
 80085b0:	20001e48 	.word	0x20001e48
 80085b4:	20001970 	.word	0x20001970
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <vTaskDelay>:
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d017      	beq.n	80085fe <vTaskDelay+0x42>
 80085ce:	4b13      	ldr	r3, [pc, #76]	; (800861c <vTaskDelay+0x60>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <vTaskDelay+0x30>
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <vTaskDelay+0x2e>
 80085ec:	f000 f88a 	bl	8008704 <vTaskSuspendAll>
 80085f0:	2100      	movs	r1, #0
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fdb4 	bl	8009160 <prvAddCurrentTaskToDelayedList>
 80085f8:	f000 f892 	bl	8008720 <xTaskResumeAll>
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d107      	bne.n	8008614 <vTaskDelay+0x58>
 8008604:	4b06      	ldr	r3, [pc, #24]	; (8008620 <vTaskDelay+0x64>)
 8008606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20001e68 	.word	0x20001e68
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <vTaskStartScheduler>:
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	; 0x28
 8008628:	af04      	add	r7, sp, #16
 800862a:	2300      	movs	r3, #0
 800862c:	60bb      	str	r3, [r7, #8]
 800862e:	2300      	movs	r3, #0
 8008630:	607b      	str	r3, [r7, #4]
 8008632:	463a      	mov	r2, r7
 8008634:	1d39      	adds	r1, r7, #4
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fe26 	bl	800728c <vApplicationGetIdleTaskMemory>
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	9202      	str	r2, [sp, #8]
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	2300      	movs	r3, #0
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	460a      	mov	r2, r1
 8008652:	4924      	ldr	r1, [pc, #144]	; (80086e4 <vTaskStartScheduler+0xc0>)
 8008654:	4824      	ldr	r0, [pc, #144]	; (80086e8 <vTaskStartScheduler+0xc4>)
 8008656:	f7ff fdf9 	bl	800824c <xTaskCreateStatic>
 800865a:	4603      	mov	r3, r0
 800865c:	4a23      	ldr	r2, [pc, #140]	; (80086ec <vTaskStartScheduler+0xc8>)
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	4b22      	ldr	r3, [pc, #136]	; (80086ec <vTaskStartScheduler+0xc8>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <vTaskStartScheduler+0x4a>
 8008668:	2301      	movs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e001      	b.n	8008672 <vTaskStartScheduler+0x4e>
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d102      	bne.n	800867e <vTaskStartScheduler+0x5a>
 8008678:	f000 fdc6 	bl	8009208 <xTimerCreateTimerTask>
 800867c:	6178      	str	r0, [r7, #20]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d11b      	bne.n	80086bc <vTaskStartScheduler+0x98>
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	bf00      	nop
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <vTaskStartScheduler+0xcc>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3354      	adds	r3, #84	; 0x54
 800869e:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <vTaskStartScheduler+0xd0>)
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <vTaskStartScheduler+0xd4>)
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <vTaskStartScheduler+0xd8>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	4b13      	ldr	r3, [pc, #76]	; (8008700 <vTaskStartScheduler+0xdc>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	f001 f9a3 	bl	8009a00 <xPortStartScheduler>
 80086ba:	e00e      	b.n	80086da <vTaskStartScheduler+0xb6>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d10a      	bne.n	80086da <vTaskStartScheduler+0xb6>
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <vTaskStartScheduler+0xb4>
 80086da:	bf00      	nop
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	0800b374 	.word	0x0800b374
 80086e8:	08008e65 	.word	0x08008e65
 80086ec:	20001e64 	.word	0x20001e64
 80086f0:	2000196c 	.word	0x2000196c
 80086f4:	200001a0 	.word	0x200001a0
 80086f8:	20001e60 	.word	0x20001e60
 80086fc:	20001e4c 	.word	0x20001e4c
 8008700:	20001e44 	.word	0x20001e44

08008704 <vTaskSuspendAll>:
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
 8008708:	4b04      	ldr	r3, [pc, #16]	; (800871c <vTaskSuspendAll+0x18>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3301      	adds	r3, #1
 800870e:	4a03      	ldr	r2, [pc, #12]	; (800871c <vTaskSuspendAll+0x18>)
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	bf00      	nop
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20001e68 	.word	0x20001e68

08008720 <xTaskResumeAll>:
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	2300      	movs	r3, #0
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	4b42      	ldr	r3, [pc, #264]	; (8008838 <xTaskResumeAll+0x118>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <xTaskResumeAll+0x2c>
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <xTaskResumeAll+0x2a>
 800874c:	f001 f9fa 	bl	8009b44 <vPortEnterCritical>
 8008750:	4b39      	ldr	r3, [pc, #228]	; (8008838 <xTaskResumeAll+0x118>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3b01      	subs	r3, #1
 8008756:	4a38      	ldr	r2, [pc, #224]	; (8008838 <xTaskResumeAll+0x118>)
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	4b37      	ldr	r3, [pc, #220]	; (8008838 <xTaskResumeAll+0x118>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d162      	bne.n	8008828 <xTaskResumeAll+0x108>
 8008762:	4b36      	ldr	r3, [pc, #216]	; (800883c <xTaskResumeAll+0x11c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d05e      	beq.n	8008828 <xTaskResumeAll+0x108>
 800876a:	e02f      	b.n	80087cc <xTaskResumeAll+0xac>
 800876c:	4b34      	ldr	r3, [pc, #208]	; (8008840 <xTaskResumeAll+0x120>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3318      	adds	r3, #24
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff f851 	bl	8007820 <uxListRemove>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3304      	adds	r3, #4
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff f84c 	bl	8007820 <uxListRemove>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878c:	4b2d      	ldr	r3, [pc, #180]	; (8008844 <xTaskResumeAll+0x124>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d903      	bls.n	800879c <xTaskResumeAll+0x7c>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4a2a      	ldr	r2, [pc, #168]	; (8008844 <xTaskResumeAll+0x124>)
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4a27      	ldr	r2, [pc, #156]	; (8008848 <xTaskResumeAll+0x128>)
 80087aa:	441a      	add	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3304      	adds	r3, #4
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7fe ffd7 	bl	8007766 <vListInsertEnd>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	4b23      	ldr	r3, [pc, #140]	; (800884c <xTaskResumeAll+0x12c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d302      	bcc.n	80087cc <xTaskResumeAll+0xac>
 80087c6:	4b22      	ldr	r3, [pc, #136]	; (8008850 <xTaskResumeAll+0x130>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	4b1c      	ldr	r3, [pc, #112]	; (8008840 <xTaskResumeAll+0x120>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1cb      	bne.n	800876c <xTaskResumeAll+0x4c>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <xTaskResumeAll+0xbe>
 80087da:	f000 fbfd 	bl	8008fd8 <prvResetNextTaskUnblockTime>
 80087de:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <xTaskResumeAll+0x134>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	607b      	str	r3, [r7, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d010      	beq.n	800880c <xTaskResumeAll+0xec>
 80087ea:	f000 f847 	bl	800887c <xTaskIncrementTick>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <xTaskResumeAll+0xda>
 80087f4:	4b16      	ldr	r3, [pc, #88]	; (8008850 <xTaskResumeAll+0x130>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	607b      	str	r3, [r7, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f1      	bne.n	80087ea <xTaskResumeAll+0xca>
 8008806:	4b13      	ldr	r3, [pc, #76]	; (8008854 <xTaskResumeAll+0x134>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	4b10      	ldr	r3, [pc, #64]	; (8008850 <xTaskResumeAll+0x130>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <xTaskResumeAll+0x108>
 8008814:	2301      	movs	r3, #1
 8008816:	60bb      	str	r3, [r7, #8]
 8008818:	4b0f      	ldr	r3, [pc, #60]	; (8008858 <xTaskResumeAll+0x138>)
 800881a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f001 f9bc 	bl	8009ba4 <vPortExitCritical>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20001e68 	.word	0x20001e68
 800883c:	20001e40 	.word	0x20001e40
 8008840:	20001e00 	.word	0x20001e00
 8008844:	20001e48 	.word	0x20001e48
 8008848:	20001970 	.word	0x20001970
 800884c:	2000196c 	.word	0x2000196c
 8008850:	20001e54 	.word	0x20001e54
 8008854:	20001e50 	.word	0x20001e50
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <xTaskGetTickCount>:
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	4b05      	ldr	r3, [pc, #20]	; (8008878 <xTaskGetTickCount+0x1c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	607b      	str	r3, [r7, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20001e44 	.word	0x20001e44

0800887c <xTaskIncrementTick>:
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	4b4f      	ldr	r3, [pc, #316]	; (80089c4 <xTaskIncrementTick+0x148>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f040 808f 	bne.w	80089ae <xTaskIncrementTick+0x132>
 8008890:	4b4d      	ldr	r3, [pc, #308]	; (80089c8 <xTaskIncrementTick+0x14c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	613b      	str	r3, [r7, #16]
 8008898:	4a4b      	ldr	r2, [pc, #300]	; (80089c8 <xTaskIncrementTick+0x14c>)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d120      	bne.n	80088e6 <xTaskIncrementTick+0x6a>
 80088a4:	4b49      	ldr	r3, [pc, #292]	; (80089cc <xTaskIncrementTick+0x150>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <xTaskIncrementTick+0x48>
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <xTaskIncrementTick+0x46>
 80088c4:	4b41      	ldr	r3, [pc, #260]	; (80089cc <xTaskIncrementTick+0x150>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <xTaskIncrementTick+0x154>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a3f      	ldr	r2, [pc, #252]	; (80089cc <xTaskIncrementTick+0x150>)
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	4a3f      	ldr	r2, [pc, #252]	; (80089d0 <xTaskIncrementTick+0x154>)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	4b3e      	ldr	r3, [pc, #248]	; (80089d4 <xTaskIncrementTick+0x158>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	4a3d      	ldr	r2, [pc, #244]	; (80089d4 <xTaskIncrementTick+0x158>)
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	f000 fb79 	bl	8008fd8 <prvResetNextTaskUnblockTime>
 80088e6:	4b3c      	ldr	r3, [pc, #240]	; (80089d8 <xTaskIncrementTick+0x15c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d349      	bcc.n	8008984 <xTaskIncrementTick+0x108>
 80088f0:	4b36      	ldr	r3, [pc, #216]	; (80089cc <xTaskIncrementTick+0x150>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d104      	bne.n	8008904 <xTaskIncrementTick+0x88>
 80088fa:	4b37      	ldr	r3, [pc, #220]	; (80089d8 <xTaskIncrementTick+0x15c>)
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	e03f      	b.n	8008984 <xTaskIncrementTick+0x108>
 8008904:	4b31      	ldr	r3, [pc, #196]	; (80089cc <xTaskIncrementTick+0x150>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	607b      	str	r3, [r7, #4]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d203      	bcs.n	8008924 <xTaskIncrementTick+0xa8>
 800891c:	4a2e      	ldr	r2, [pc, #184]	; (80089d8 <xTaskIncrementTick+0x15c>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	e02f      	b.n	8008984 <xTaskIncrementTick+0x108>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3304      	adds	r3, #4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe ff79 	bl	8007820 <uxListRemove>
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <xTaskIncrementTick+0xc4>
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	3318      	adds	r3, #24
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe ff70 	bl	8007820 <uxListRemove>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	4b25      	ldr	r3, [pc, #148]	; (80089dc <xTaskIncrementTick+0x160>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d903      	bls.n	8008954 <xTaskIncrementTick+0xd8>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4a22      	ldr	r2, [pc, #136]	; (80089dc <xTaskIncrementTick+0x160>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <xTaskIncrementTick+0x164>)
 8008962:	441a      	add	r2, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe fefb 	bl	8007766 <vListInsertEnd>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <xTaskIncrementTick+0x168>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	429a      	cmp	r2, r3
 800897c:	d3b8      	bcc.n	80088f0 <xTaskIncrementTick+0x74>
 800897e:	2301      	movs	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e7b5      	b.n	80088f0 <xTaskIncrementTick+0x74>
 8008984:	4b17      	ldr	r3, [pc, #92]	; (80089e4 <xTaskIncrementTick+0x168>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	4915      	ldr	r1, [pc, #84]	; (80089e0 <xTaskIncrementTick+0x164>)
 800898c:	4613      	mov	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d901      	bls.n	80089a0 <xTaskIncrementTick+0x124>
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <xTaskIncrementTick+0x16c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d007      	beq.n	80089b8 <xTaskIncrementTick+0x13c>
 80089a8:	2301      	movs	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	e004      	b.n	80089b8 <xTaskIncrementTick+0x13c>
 80089ae:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <xTaskIncrementTick+0x170>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <xTaskIncrementTick+0x170>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20001e68 	.word	0x20001e68
 80089c8:	20001e44 	.word	0x20001e44
 80089cc:	20001df8 	.word	0x20001df8
 80089d0:	20001dfc 	.word	0x20001dfc
 80089d4:	20001e58 	.word	0x20001e58
 80089d8:	20001e60 	.word	0x20001e60
 80089dc:	20001e48 	.word	0x20001e48
 80089e0:	20001970 	.word	0x20001970
 80089e4:	2000196c 	.word	0x2000196c
 80089e8:	20001e54 	.word	0x20001e54
 80089ec:	20001e50 	.word	0x20001e50

080089f0 <vTaskSwitchContext>:
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4b2a      	ldr	r3, [pc, #168]	; (8008aa0 <vTaskSwitchContext+0xb0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <vTaskSwitchContext+0x16>
 80089fe:	4b29      	ldr	r3, [pc, #164]	; (8008aa4 <vTaskSwitchContext+0xb4>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	e046      	b.n	8008a94 <vTaskSwitchContext+0xa4>
 8008a06:	4b27      	ldr	r3, [pc, #156]	; (8008aa4 <vTaskSwitchContext+0xb4>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	4b26      	ldr	r3, [pc, #152]	; (8008aa8 <vTaskSwitchContext+0xb8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	e010      	b.n	8008a36 <vTaskSwitchContext+0x46>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <vTaskSwitchContext+0x40>
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <vTaskSwitchContext+0x3e>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	491d      	ldr	r1, [pc, #116]	; (8008aac <vTaskSwitchContext+0xbc>)
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0e4      	beq.n	8008a14 <vTaskSwitchContext+0x24>
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4a15      	ldr	r2, [pc, #84]	; (8008aac <vTaskSwitchContext+0xbc>)
 8008a56:	4413      	add	r3, r2
 8008a58:	60bb      	str	r3, [r7, #8]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	605a      	str	r2, [r3, #4]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d104      	bne.n	8008a7a <vTaskSwitchContext+0x8a>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	605a      	str	r2, [r3, #4]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	4a0b      	ldr	r2, [pc, #44]	; (8008ab0 <vTaskSwitchContext+0xc0>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <vTaskSwitchContext+0xb8>)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <vTaskSwitchContext+0xc0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3354      	adds	r3, #84	; 0x54
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <vTaskSwitchContext+0xc4>)
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20001e68 	.word	0x20001e68
 8008aa4:	20001e54 	.word	0x20001e54
 8008aa8:	20001e48 	.word	0x20001e48
 8008aac:	20001970 	.word	0x20001970
 8008ab0:	2000196c 	.word	0x2000196c
 8008ab4:	200001a0 	.word	0x200001a0

08008ab8 <vTaskPlaceOnEventList>:
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <vTaskPlaceOnEventList+0x26>
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <vTaskPlaceOnEventList+0x24>
 8008ade:	4b07      	ldr	r3, [pc, #28]	; (8008afc <vTaskPlaceOnEventList+0x44>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3318      	adds	r3, #24
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fe fe61 	bl	80077ae <vListInsert>
 8008aec:	2101      	movs	r1, #1
 8008aee:	6838      	ldr	r0, [r7, #0]
 8008af0:	f000 fb36 	bl	8009160 <prvAddCurrentTaskToDelayedList>
 8008af4:	bf00      	nop
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	2000196c 	.word	0x2000196c

08008b00 <vTaskPlaceOnUnorderedEventList>:
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <vTaskPlaceOnUnorderedEventList+0x28>
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <vTaskPlaceOnUnorderedEventList+0x26>
 8008b28:	4b11      	ldr	r3, [pc, #68]	; (8008b70 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10a      	bne.n	8008b46 <vTaskPlaceOnUnorderedEventList+0x46>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <vTaskPlaceOnUnorderedEventList+0x44>
 8008b46:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008b50:	619a      	str	r2, [r3, #24]
 8008b52:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3318      	adds	r3, #24
 8008b58:	4619      	mov	r1, r3
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f7fe fe03 	bl	8007766 <vListInsertEnd>
 8008b60:	2101      	movs	r1, #1
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fafc 	bl	8009160 <prvAddCurrentTaskToDelayedList>
 8008b68:	bf00      	nop
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20001e68 	.word	0x20001e68
 8008b74:	2000196c 	.word	0x2000196c

08008b78 <vTaskPlaceOnEventListRestricted>:
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <vTaskPlaceOnEventListRestricted+0x28>
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	bf00      	nop
 8008b9e:	e7fe      	b.n	8008b9e <vTaskPlaceOnEventListRestricted+0x26>
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <vTaskPlaceOnEventListRestricted+0x54>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3318      	adds	r3, #24
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7fe fddc 	bl	8007766 <vListInsertEnd>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <vTaskPlaceOnEventListRestricted+0x42>
 8008bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb8:	60bb      	str	r3, [r7, #8]
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	68b8      	ldr	r0, [r7, #8]
 8008bbe:	f000 facf 	bl	8009160 <prvAddCurrentTaskToDelayedList>
 8008bc2:	bf00      	nop
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	2000196c 	.word	0x2000196c

08008bd0 <xTaskRemoveFromEventList>:
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	613b      	str	r3, [r7, #16]
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <xTaskRemoveFromEventList+0x2c>
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <xTaskRemoveFromEventList+0x2a>
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	3318      	adds	r3, #24
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fe fe0d 	bl	8007820 <uxListRemove>
 8008c06:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <xTaskRemoveFromEventList+0xb0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d11d      	bne.n	8008c4a <xTaskRemoveFromEventList+0x7a>
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fe04 	bl	8007820 <uxListRemove>
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <xTaskRemoveFromEventList+0xb4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d903      	bls.n	8008c2c <xTaskRemoveFromEventList+0x5c>
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	4a16      	ldr	r2, [pc, #88]	; (8008c84 <xTaskRemoveFromEventList+0xb4>)
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4a13      	ldr	r2, [pc, #76]	; (8008c88 <xTaskRemoveFromEventList+0xb8>)
 8008c3a:	441a      	add	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f7fe fd8f 	bl	8007766 <vListInsertEnd>
 8008c48:	e005      	b.n	8008c56 <xTaskRemoveFromEventList+0x86>
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	3318      	adds	r3, #24
 8008c4e:	4619      	mov	r1, r3
 8008c50:	480e      	ldr	r0, [pc, #56]	; (8008c8c <xTaskRemoveFromEventList+0xbc>)
 8008c52:	f7fe fd88 	bl	8007766 <vListInsertEnd>
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <xTaskRemoveFromEventList+0xc0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d905      	bls.n	8008c70 <xTaskRemoveFromEventList+0xa0>
 8008c64:	2301      	movs	r3, #1
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <xTaskRemoveFromEventList+0xc4>)
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	e001      	b.n	8008c74 <xTaskRemoveFromEventList+0xa4>
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20001e68 	.word	0x20001e68
 8008c84:	20001e48 	.word	0x20001e48
 8008c88:	20001970 	.word	0x20001970
 8008c8c:	20001e00 	.word	0x20001e00
 8008c90:	2000196c 	.word	0x2000196c
 8008c94:	20001e54 	.word	0x20001e54

08008c98 <vTaskRemoveFromUnorderedEventList>:
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	4b29      	ldr	r3, [pc, #164]	; (8008d48 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <vTaskRemoveFromUnorderedEventList+0x28>
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	613b      	str	r3, [r7, #16]
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <vTaskRemoveFromUnorderedEventList+0x26>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	617b      	str	r3, [r7, #20]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <vTaskRemoveFromUnorderedEventList+0x54>
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <vTaskRemoveFromUnorderedEventList+0x52>
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7fe fd97 	bl	8007820 <uxListRemove>
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe fd92 	bl	8007820 <uxListRemove>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d903      	bls.n	8008d10 <vTaskRemoveFromUnorderedEventList+0x78>
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a0f      	ldr	r2, [pc, #60]	; (8008d4c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4a0c      	ldr	r2, [pc, #48]	; (8008d50 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008d1e:	441a      	add	r2, r3
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fe fd1d 	bl	8007766 <vListInsertEnd>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d30:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d902      	bls.n	8008d40 <vTaskRemoveFromUnorderedEventList+0xa8>
 8008d3a:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	bf00      	nop
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20001e68 	.word	0x20001e68
 8008d4c:	20001e48 	.word	0x20001e48
 8008d50:	20001970 	.word	0x20001970
 8008d54:	2000196c 	.word	0x2000196c
 8008d58:	20001e54 	.word	0x20001e54

08008d5c <vTaskInternalSetTimeOutState>:
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <vTaskInternalSetTimeOutState+0x24>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <vTaskInternalSetTimeOutState+0x28>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	605a      	str	r2, [r3, #4]
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	20001e58 	.word	0x20001e58
 8008d84:	20001e44 	.word	0x20001e44

08008d88 <xTaskCheckForTimeOut>:
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <xTaskCheckForTimeOut+0x26>
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xTaskCheckForTimeOut+0x24>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xTaskCheckForTimeOut+0x42>
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xTaskCheckForTimeOut+0x40>
 8008dca:	f000 febb 	bl	8009b44 <vPortEnterCritical>
 8008dce:	4b1d      	ldr	r3, [pc, #116]	; (8008e44 <xTaskCheckForTimeOut+0xbc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	61bb      	str	r3, [r7, #24]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de6:	d102      	bne.n	8008dee <xTaskCheckForTimeOut+0x66>
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
 8008dec:	e023      	b.n	8008e36 <xTaskCheckForTimeOut+0xae>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b15      	ldr	r3, [pc, #84]	; (8008e48 <xTaskCheckForTimeOut+0xc0>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d007      	beq.n	8008e0a <xTaskCheckForTimeOut+0x82>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d302      	bcc.n	8008e0a <xTaskCheckForTimeOut+0x82>
 8008e04:	2301      	movs	r3, #1
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e015      	b.n	8008e36 <xTaskCheckForTimeOut+0xae>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d20b      	bcs.n	8008e2c <xTaskCheckForTimeOut+0xa4>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	1ad2      	subs	r2, r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff ff9b 	bl	8008d5c <vTaskInternalSetTimeOutState>
 8008e26:	2300      	movs	r3, #0
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	e004      	b.n	8008e36 <xTaskCheckForTimeOut+0xae>
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	2301      	movs	r3, #1
 8008e34:	61fb      	str	r3, [r7, #28]
 8008e36:	f000 feb5 	bl	8009ba4 <vPortExitCritical>
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20001e44 	.word	0x20001e44
 8008e48:	20001e58 	.word	0x20001e58

08008e4c <vTaskMissedYield>:
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	4b03      	ldr	r3, [pc, #12]	; (8008e60 <vTaskMissedYield+0x14>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	bf00      	nop
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	20001e54 	.word	0x20001e54

08008e64 <prvIdleTask>:
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	f000 f852 	bl	8008f14 <prvCheckTasksWaitingTermination>
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <prvIdleTask+0x28>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d9f9      	bls.n	8008e6c <prvIdleTask+0x8>
 8008e78:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <prvIdleTask+0x2c>)
 8008e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	e7f0      	b.n	8008e6c <prvIdleTask+0x8>
 8008e8a:	bf00      	nop
 8008e8c:	20001970 	.word	0x20001970
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <prvInitialiseTaskLists>:
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	607b      	str	r3, [r7, #4]
 8008e9e:	e00c      	b.n	8008eba <prvInitialiseTaskLists+0x26>
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4a12      	ldr	r2, [pc, #72]	; (8008ef4 <prvInitialiseTaskLists+0x60>)
 8008eac:	4413      	add	r3, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fc2c 	bl	800770c <vListInitialise>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b37      	cmp	r3, #55	; 0x37
 8008ebe:	d9ef      	bls.n	8008ea0 <prvInitialiseTaskLists+0xc>
 8008ec0:	480d      	ldr	r0, [pc, #52]	; (8008ef8 <prvInitialiseTaskLists+0x64>)
 8008ec2:	f7fe fc23 	bl	800770c <vListInitialise>
 8008ec6:	480d      	ldr	r0, [pc, #52]	; (8008efc <prvInitialiseTaskLists+0x68>)
 8008ec8:	f7fe fc20 	bl	800770c <vListInitialise>
 8008ecc:	480c      	ldr	r0, [pc, #48]	; (8008f00 <prvInitialiseTaskLists+0x6c>)
 8008ece:	f7fe fc1d 	bl	800770c <vListInitialise>
 8008ed2:	480c      	ldr	r0, [pc, #48]	; (8008f04 <prvInitialiseTaskLists+0x70>)
 8008ed4:	f7fe fc1a 	bl	800770c <vListInitialise>
 8008ed8:	480b      	ldr	r0, [pc, #44]	; (8008f08 <prvInitialiseTaskLists+0x74>)
 8008eda:	f7fe fc17 	bl	800770c <vListInitialise>
 8008ede:	4b0b      	ldr	r3, [pc, #44]	; (8008f0c <prvInitialiseTaskLists+0x78>)
 8008ee0:	4a05      	ldr	r2, [pc, #20]	; (8008ef8 <prvInitialiseTaskLists+0x64>)
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <prvInitialiseTaskLists+0x7c>)
 8008ee6:	4a05      	ldr	r2, [pc, #20]	; (8008efc <prvInitialiseTaskLists+0x68>)
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20001970 	.word	0x20001970
 8008ef8:	20001dd0 	.word	0x20001dd0
 8008efc:	20001de4 	.word	0x20001de4
 8008f00:	20001e00 	.word	0x20001e00
 8008f04:	20001e14 	.word	0x20001e14
 8008f08:	20001e2c 	.word	0x20001e2c
 8008f0c:	20001df8 	.word	0x20001df8
 8008f10:	20001dfc 	.word	0x20001dfc

08008f14 <prvCheckTasksWaitingTermination>:
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	e019      	b.n	8008f50 <prvCheckTasksWaitingTermination+0x3c>
 8008f1c:	f000 fe12 	bl	8009b44 <vPortEnterCritical>
 8008f20:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <prvCheckTasksWaitingTermination+0x50>)
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	607b      	str	r3, [r7, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fc77 	bl	8007820 <uxListRemove>
 8008f32:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <prvCheckTasksWaitingTermination+0x54>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	4a0b      	ldr	r2, [pc, #44]	; (8008f68 <prvCheckTasksWaitingTermination+0x54>)
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <prvCheckTasksWaitingTermination+0x58>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	4a0a      	ldr	r2, [pc, #40]	; (8008f6c <prvCheckTasksWaitingTermination+0x58>)
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	f000 fe2d 	bl	8009ba4 <vPortExitCritical>
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f810 	bl	8008f70 <prvDeleteTCB>
 8008f50:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <prvCheckTasksWaitingTermination+0x58>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e1      	bne.n	8008f1c <prvCheckTasksWaitingTermination+0x8>
 8008f58:	bf00      	nop
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20001e14 	.word	0x20001e14
 8008f68:	20001e40 	.word	0x20001e40
 8008f6c:	20001e28 	.word	0x20001e28

08008f70 <prvDeleteTCB>:
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3354      	adds	r3, #84	; 0x54
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f002 f96f 	bl	800b260 <_reclaim_reent>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d108      	bne.n	8008f9e <prvDeleteTCB+0x2e>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 ffc5 	bl	8009f20 <vPortFree>
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 ffc2 	bl	8009f20 <vPortFree>
 8008f9c:	e018      	b.n	8008fd0 <prvDeleteTCB+0x60>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d103      	bne.n	8008fb0 <prvDeleteTCB+0x40>
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 ffb9 	bl	8009f20 <vPortFree>
 8008fae:	e00f      	b.n	8008fd0 <prvDeleteTCB+0x60>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d00a      	beq.n	8008fd0 <prvDeleteTCB+0x60>
 8008fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	bf00      	nop
 8008fce:	e7fe      	b.n	8008fce <prvDeleteTCB+0x5e>
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <prvResetNextTaskUnblockTime>:
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <prvResetNextTaskUnblockTime+0x38>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d104      	bne.n	8008ff2 <prvResetNextTaskUnblockTime+0x1a>
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <prvResetNextTaskUnblockTime+0x3c>)
 8008fea:	f04f 32ff 	mov.w	r2, #4294967295
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e008      	b.n	8009004 <prvResetNextTaskUnblockTime+0x2c>
 8008ff2:	4b07      	ldr	r3, [pc, #28]	; (8009010 <prvResetNextTaskUnblockTime+0x38>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	4a04      	ldr	r2, [pc, #16]	; (8009014 <prvResetNextTaskUnblockTime+0x3c>)
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	20001df8 	.word	0x20001df8
 8009014:	20001e60 	.word	0x20001e60

08009018 <xTaskGetSchedulerState>:
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	4b0b      	ldr	r3, [pc, #44]	; (800904c <xTaskGetSchedulerState+0x34>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <xTaskGetSchedulerState+0x14>
 8009026:	2301      	movs	r3, #1
 8009028:	607b      	str	r3, [r7, #4]
 800902a:	e008      	b.n	800903e <xTaskGetSchedulerState+0x26>
 800902c:	4b08      	ldr	r3, [pc, #32]	; (8009050 <xTaskGetSchedulerState+0x38>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <xTaskGetSchedulerState+0x22>
 8009034:	2302      	movs	r3, #2
 8009036:	607b      	str	r3, [r7, #4]
 8009038:	e001      	b.n	800903e <xTaskGetSchedulerState+0x26>
 800903a:	2300      	movs	r3, #0
 800903c:	607b      	str	r3, [r7, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	20001e4c 	.word	0x20001e4c
 8009050:	20001e68 	.word	0x20001e68

08009054 <xTaskPriorityDisinherit>:
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d056      	beq.n	8009118 <xTaskPriorityDisinherit+0xc4>
 800906a:	4b2e      	ldr	r3, [pc, #184]	; (8009124 <xTaskPriorityDisinherit+0xd0>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	429a      	cmp	r2, r3
 8009072:	d00a      	beq.n	800908a <xTaskPriorityDisinherit+0x36>
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <xTaskPriorityDisinherit+0x34>
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10a      	bne.n	80090a8 <xTaskPriorityDisinherit+0x54>
 8009092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60bb      	str	r3, [r7, #8]
 80090a4:	bf00      	nop
 80090a6:	e7fe      	b.n	80090a6 <xTaskPriorityDisinherit+0x52>
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ac:	1e5a      	subs	r2, r3, #1
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	651a      	str	r2, [r3, #80]	; 0x50
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d02c      	beq.n	8009118 <xTaskPriorityDisinherit+0xc4>
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d128      	bne.n	8009118 <xTaskPriorityDisinherit+0xc4>
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fba8 	bl	8007820 <uxListRemove>
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	619a      	str	r2, [r3, #24]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e8:	4b0f      	ldr	r3, [pc, #60]	; (8009128 <xTaskPriorityDisinherit+0xd4>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d903      	bls.n	80090f8 <xTaskPriorityDisinherit+0xa4>
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	4a0c      	ldr	r2, [pc, #48]	; (8009128 <xTaskPriorityDisinherit+0xd4>)
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4a09      	ldr	r2, [pc, #36]	; (800912c <xTaskPriorityDisinherit+0xd8>)
 8009106:	441a      	add	r2, r3
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7fe fb29 	bl	8007766 <vListInsertEnd>
 8009114:	2301      	movs	r3, #1
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	2000196c 	.word	0x2000196c
 8009128:	20001e48 	.word	0x20001e48
 800912c:	20001970 	.word	0x20001970

08009130 <uxTaskResetEventItemValue>:
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <uxTaskResetEventItemValue+0x2c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	607b      	str	r3, [r7, #4]
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <uxTaskResetEventItemValue+0x2c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	4b05      	ldr	r3, [pc, #20]	; (800915c <uxTaskResetEventItemValue+0x2c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800914c:	619a      	str	r2, [r3, #24]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	2000196c 	.word	0x2000196c

08009160 <prvAddCurrentTaskToDelayedList>:
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	4b21      	ldr	r3, [pc, #132]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	4b20      	ldr	r3, [pc, #128]	; (80091f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3304      	adds	r3, #4
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe fb52 	bl	8007820 <uxListRemove>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009182:	d10a      	bne.n	800919a <prvAddCurrentTaskToDelayedList+0x3a>
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <prvAddCurrentTaskToDelayedList+0x3a>
 800918a:	4b1a      	ldr	r3, [pc, #104]	; (80091f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4819      	ldr	r0, [pc, #100]	; (80091f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009194:	f7fe fae7 	bl	8007766 <vListInsertEnd>
 8009198:	e026      	b.n	80091e8 <prvAddCurrentTaskToDelayedList+0x88>
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4413      	add	r3, r2
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	605a      	str	r2, [r3, #4]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d209      	bcs.n	80091c6 <prvAddCurrentTaskToDelayedList+0x66>
 80091b2:	4b12      	ldr	r3, [pc, #72]	; (80091fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3304      	adds	r3, #4
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f7fe faf5 	bl	80077ae <vListInsert>
 80091c4:	e010      	b.n	80091e8 <prvAddCurrentTaskToDelayedList+0x88>
 80091c6:	4b0e      	ldr	r3, [pc, #56]	; (8009200 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f7fe faeb 	bl	80077ae <vListInsert>
 80091d8:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d202      	bcs.n	80091e8 <prvAddCurrentTaskToDelayedList+0x88>
 80091e2:	4a08      	ldr	r2, [pc, #32]	; (8009204 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20001e44 	.word	0x20001e44
 80091f4:	2000196c 	.word	0x2000196c
 80091f8:	20001e2c 	.word	0x20001e2c
 80091fc:	20001dfc 	.word	0x20001dfc
 8009200:	20001df8 	.word	0x20001df8
 8009204:	20001e60 	.word	0x20001e60

08009208 <xTimerCreateTimerTask>:
 8009208:	b580      	push	{r7, lr}
 800920a:	b08a      	sub	sp, #40	; 0x28
 800920c:	af04      	add	r7, sp, #16
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
 8009212:	f000 fb07 	bl	8009824 <prvCheckForValidListAndQueue>
 8009216:	4b1c      	ldr	r3, [pc, #112]	; (8009288 <xTimerCreateTimerTask+0x80>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d021      	beq.n	8009262 <xTimerCreateTimerTask+0x5a>
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	2300      	movs	r3, #0
 8009224:	60bb      	str	r3, [r7, #8]
 8009226:	1d3a      	adds	r2, r7, #4
 8009228:	f107 0108 	add.w	r1, r7, #8
 800922c:	f107 030c 	add.w	r3, r7, #12
 8009230:	4618      	mov	r0, r3
 8009232:	f7fe f845 	bl	80072c0 <vApplicationGetTimerTaskMemory>
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	9202      	str	r2, [sp, #8]
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	2302      	movs	r3, #2
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	460a      	mov	r2, r1
 8009248:	4910      	ldr	r1, [pc, #64]	; (800928c <xTimerCreateTimerTask+0x84>)
 800924a:	4811      	ldr	r0, [pc, #68]	; (8009290 <xTimerCreateTimerTask+0x88>)
 800924c:	f7fe fffe 	bl	800824c <xTaskCreateStatic>
 8009250:	4603      	mov	r3, r0
 8009252:	4a10      	ldr	r2, [pc, #64]	; (8009294 <xTimerCreateTimerTask+0x8c>)
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	4b0f      	ldr	r3, [pc, #60]	; (8009294 <xTimerCreateTimerTask+0x8c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <xTimerCreateTimerTask+0x5a>
 800925e:	2301      	movs	r3, #1
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <xTimerCreateTimerTask+0x76>
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	613b      	str	r3, [r7, #16]
 800927a:	bf00      	nop
 800927c:	e7fe      	b.n	800927c <xTimerCreateTimerTask+0x74>
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	4618      	mov	r0, r3
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20001e9c 	.word	0x20001e9c
 800928c:	0800b37c 	.word	0x0800b37c
 8009290:	080093cd 	.word	0x080093cd
 8009294:	20001ea0 	.word	0x20001ea0

08009298 <xTimerGenericCommand>:
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	; 0x28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	603b      	str	r3, [r7, #0]
 80092a6:	2300      	movs	r3, #0
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <xTimerGenericCommand+0x2e>
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	623b      	str	r3, [r7, #32]
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xTimerGenericCommand+0x2c>
 80092c6:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <xTimerGenericCommand+0x98>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d02a      	beq.n	8009324 <xTimerGenericCommand+0x8c>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	613b      	str	r3, [r7, #16]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	61bb      	str	r3, [r7, #24]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b05      	cmp	r3, #5
 80092de:	dc18      	bgt.n	8009312 <xTimerGenericCommand+0x7a>
 80092e0:	f7ff fe9a 	bl	8009018 <xTaskGetSchedulerState>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d109      	bne.n	80092fe <xTimerGenericCommand+0x66>
 80092ea:	4b11      	ldr	r3, [pc, #68]	; (8009330 <xTimerGenericCommand+0x98>)
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	f107 0110 	add.w	r1, r7, #16
 80092f2:	2300      	movs	r3, #0
 80092f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f6:	f7fe fbc1 	bl	8007a7c <xQueueGenericSend>
 80092fa:	6278      	str	r0, [r7, #36]	; 0x24
 80092fc:	e012      	b.n	8009324 <xTimerGenericCommand+0x8c>
 80092fe:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <xTimerGenericCommand+0x98>)
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	f107 0110 	add.w	r1, r7, #16
 8009306:	2300      	movs	r3, #0
 8009308:	2200      	movs	r2, #0
 800930a:	f7fe fbb7 	bl	8007a7c <xQueueGenericSend>
 800930e:	6278      	str	r0, [r7, #36]	; 0x24
 8009310:	e008      	b.n	8009324 <xTimerGenericCommand+0x8c>
 8009312:	4b07      	ldr	r3, [pc, #28]	; (8009330 <xTimerGenericCommand+0x98>)
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	f107 0110 	add.w	r1, r7, #16
 800931a:	2300      	movs	r3, #0
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	f7fe fcab 	bl	8007c78 <xQueueGenericSendFromISR>
 8009322:	6278      	str	r0, [r7, #36]	; 0x24
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	4618      	mov	r0, r3
 8009328:	3728      	adds	r7, #40	; 0x28
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20001e9c 	.word	0x20001e9c

08009334 <prvProcessExpiredTimer>:
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af02      	add	r7, sp, #8
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
 800933e:	4b22      	ldr	r3, [pc, #136]	; (80093c8 <prvProcessExpiredTimer+0x94>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	617b      	str	r3, [r7, #20]
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	3304      	adds	r3, #4
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe fa67 	bl	8007820 <uxListRemove>
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	d022      	beq.n	80093a6 <prvProcessExpiredTimer+0x72>
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	699a      	ldr	r2, [r3, #24]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	18d1      	adds	r1, r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	6978      	ldr	r0, [r7, #20]
 800936e:	f000 f8d1 	bl	8009514 <prvInsertTimerInActiveList>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01f      	beq.n	80093b8 <prvProcessExpiredTimer+0x84>
 8009378:	2300      	movs	r3, #0
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	2300      	movs	r3, #0
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	2100      	movs	r1, #0
 8009382:	6978      	ldr	r0, [r7, #20]
 8009384:	f7ff ff88 	bl	8009298 <xTimerGenericCommand>
 8009388:	6138      	str	r0, [r7, #16]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d113      	bne.n	80093b8 <prvProcessExpiredTimer+0x84>
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <prvProcessExpiredTimer+0x70>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ac:	f023 0301 	bic.w	r3, r3, #1
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	6978      	ldr	r0, [r7, #20]
 80093be:	4798      	blx	r3
 80093c0:	bf00      	nop
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20001e94 	.word	0x20001e94

080093cc <prvTimerTask>:
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	f107 0308 	add.w	r3, r7, #8
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 f857 	bl	800948c <prvGetNextExpireTime>
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4619      	mov	r1, r3
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f803 	bl	80093f0 <prvProcessTimerOrBlockTask>
 80093ea:	f000 f8d5 	bl	8009598 <prvProcessReceivedCommands>
 80093ee:	e7f1      	b.n	80093d4 <prvTimerTask+0x8>

080093f0 <prvProcessTimerOrBlockTask>:
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
 80093fa:	f7ff f983 	bl	8008704 <vTaskSuspendAll>
 80093fe:	f107 0308 	add.w	r3, r7, #8
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f866 	bl	80094d4 <prvSampleTimeNow>
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d130      	bne.n	8009472 <prvProcessTimerOrBlockTask+0x82>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <prvProcessTimerOrBlockTask+0x3c>
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	429a      	cmp	r2, r3
 800941c:	d806      	bhi.n	800942c <prvProcessTimerOrBlockTask+0x3c>
 800941e:	f7ff f97f 	bl	8008720 <xTaskResumeAll>
 8009422:	68f9      	ldr	r1, [r7, #12]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff ff85 	bl	8009334 <prvProcessExpiredTimer>
 800942a:	e024      	b.n	8009476 <prvProcessTimerOrBlockTask+0x86>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <prvProcessTimerOrBlockTask+0x54>
 8009432:	4b13      	ldr	r3, [pc, #76]	; (8009480 <prvProcessTimerOrBlockTask+0x90>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <prvProcessTimerOrBlockTask+0x50>
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <prvProcessTimerOrBlockTask+0x52>
 8009440:	2300      	movs	r3, #0
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <prvProcessTimerOrBlockTask+0x94>)
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4619      	mov	r1, r3
 8009452:	f7fe fec7 	bl	80081e4 <vQueueWaitForMessageRestricted>
 8009456:	f7ff f963 	bl	8008720 <xTaskResumeAll>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <prvProcessTimerOrBlockTask+0x86>
 8009460:	4b09      	ldr	r3, [pc, #36]	; (8009488 <prvProcessTimerOrBlockTask+0x98>)
 8009462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	e001      	b.n	8009476 <prvProcessTimerOrBlockTask+0x86>
 8009472:	f7ff f955 	bl	8008720 <xTaskResumeAll>
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20001e98 	.word	0x20001e98
 8009484:	20001e9c 	.word	0x20001e9c
 8009488:	e000ed04 	.word	0xe000ed04

0800948c <prvGetNextExpireTime>:
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	4b0e      	ldr	r3, [pc, #56]	; (80094d0 <prvGetNextExpireTime+0x44>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <prvGetNextExpireTime+0x16>
 800949e:	2201      	movs	r2, #1
 80094a0:	e000      	b.n	80094a4 <prvGetNextExpireTime+0x18>
 80094a2:	2200      	movs	r2, #0
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d105      	bne.n	80094bc <prvGetNextExpireTime+0x30>
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <prvGetNextExpireTime+0x44>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e001      	b.n	80094c0 <prvGetNextExpireTime+0x34>
 80094bc:	2300      	movs	r3, #0
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4618      	mov	r0, r3
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	20001e94 	.word	0x20001e94

080094d4 <prvSampleTimeNow>:
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	f7ff f9be 	bl	800885c <xTaskGetTickCount>
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	4b0b      	ldr	r3, [pc, #44]	; (8009510 <prvSampleTimeNow+0x3c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d205      	bcs.n	80094f8 <prvSampleTimeNow+0x24>
 80094ec:	f000 f936 	bl	800975c <prvSwitchTimerLists>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	e002      	b.n	80094fe <prvSampleTimeNow+0x2a>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	4a04      	ldr	r2, [pc, #16]	; (8009510 <prvSampleTimeNow+0x3c>)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6013      	str	r3, [r2, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	20001ea4 	.word	0x20001ea4

08009514 <prvInsertTimerInActiveList>:
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	605a      	str	r2, [r3, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	611a      	str	r2, [r3, #16]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	429a      	cmp	r2, r3
 8009538:	d812      	bhi.n	8009560 <prvInsertTimerInActiveList+0x4c>
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	1ad2      	subs	r2, r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	429a      	cmp	r2, r3
 8009546:	d302      	bcc.n	800954e <prvInsertTimerInActiveList+0x3a>
 8009548:	2301      	movs	r3, #1
 800954a:	617b      	str	r3, [r7, #20]
 800954c:	e01b      	b.n	8009586 <prvInsertTimerInActiveList+0x72>
 800954e:	4b10      	ldr	r3, [pc, #64]	; (8009590 <prvInsertTimerInActiveList+0x7c>)
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3304      	adds	r3, #4
 8009556:	4619      	mov	r1, r3
 8009558:	4610      	mov	r0, r2
 800955a:	f7fe f928 	bl	80077ae <vListInsert>
 800955e:	e012      	b.n	8009586 <prvInsertTimerInActiveList+0x72>
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	429a      	cmp	r2, r3
 8009566:	d206      	bcs.n	8009576 <prvInsertTimerInActiveList+0x62>
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d302      	bcc.n	8009576 <prvInsertTimerInActiveList+0x62>
 8009570:	2301      	movs	r3, #1
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	e007      	b.n	8009586 <prvInsertTimerInActiveList+0x72>
 8009576:	4b07      	ldr	r3, [pc, #28]	; (8009594 <prvInsertTimerInActiveList+0x80>)
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3304      	adds	r3, #4
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f7fe f914 	bl	80077ae <vListInsert>
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20001e98 	.word	0x20001e98
 8009594:	20001e94 	.word	0x20001e94

08009598 <prvProcessReceivedCommands>:
 8009598:	b580      	push	{r7, lr}
 800959a:	b08e      	sub	sp, #56	; 0x38
 800959c:	af02      	add	r7, sp, #8
 800959e:	e0ca      	b.n	8009736 <prvProcessReceivedCommands+0x19e>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	da18      	bge.n	80095d8 <prvProcessReceivedCommands+0x40>
 80095a6:	1d3b      	adds	r3, r7, #4
 80095a8:	3304      	adds	r3, #4
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10a      	bne.n	80095c8 <prvProcessReceivedCommands+0x30>
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	61fb      	str	r3, [r7, #28]
 80095c4:	bf00      	nop
 80095c6:	e7fe      	b.n	80095c6 <prvProcessReceivedCommands+0x2e>
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ce:	6850      	ldr	r0, [r2, #4]
 80095d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d2:	6892      	ldr	r2, [r2, #8]
 80095d4:	4611      	mov	r1, r2
 80095d6:	4798      	blx	r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f2c0 80aa 	blt.w	8009734 <prvProcessReceivedCommands+0x19c>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <prvProcessReceivedCommands+0x5e>
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	3304      	adds	r3, #4
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe f915 	bl	8007820 <uxListRemove>
 80095f6:	463b      	mov	r3, r7
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff ff6b 	bl	80094d4 <prvSampleTimeNow>
 80095fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b09      	cmp	r3, #9
 8009604:	f200 8097 	bhi.w	8009736 <prvProcessReceivedCommands+0x19e>
 8009608:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <prvProcessReceivedCommands+0x78>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009639 	.word	0x08009639
 8009614:	08009639 	.word	0x08009639
 8009618:	08009639 	.word	0x08009639
 800961c:	080096ad 	.word	0x080096ad
 8009620:	080096c1 	.word	0x080096c1
 8009624:	0800970b 	.word	0x0800970b
 8009628:	08009639 	.word	0x08009639
 800962c:	08009639 	.word	0x08009639
 8009630:	080096ad 	.word	0x080096ad
 8009634:	080096c1 	.word	0x080096c1
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800963e:	f043 0301 	orr.w	r3, r3, #1
 8009642:	b2da      	uxtb	r2, r3
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	18d1      	adds	r1, r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009658:	f7ff ff5c 	bl	8009514 <prvInsertTimerInActiveList>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d069      	beq.n	8009736 <prvProcessReceivedCommands+0x19e>
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009668:	4798      	blx	r3
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d05e      	beq.n	8009736 <prvProcessReceivedCommands+0x19e>
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	441a      	add	r2, r3
 8009680:	2300      	movs	r3, #0
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	2100      	movs	r1, #0
 8009688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968a:	f7ff fe05 	bl	8009298 <xTimerGenericCommand>
 800968e:	6238      	str	r0, [r7, #32]
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d14f      	bne.n	8009736 <prvProcessReceivedCommands+0x19e>
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	61bb      	str	r3, [r7, #24]
 80096a8:	bf00      	nop
 80096aa:	e7fe      	b.n	80096aa <prvProcessReceivedCommands+0x112>
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b2:	f023 0301 	bic.w	r3, r3, #1
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80096be:	e03a      	b.n	8009736 <prvProcessReceivedCommands+0x19e>
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	619a      	str	r2, [r3, #24]
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <prvProcessReceivedCommands+0x15e>
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <prvProcessReceivedCommands+0x15c>
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	18d1      	adds	r1, r2, r3
 80096fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009704:	f7ff ff06 	bl	8009514 <prvInsertTimerInActiveList>
 8009708:	e015      	b.n	8009736 <prvProcessReceivedCommands+0x19e>
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d103      	bne.n	8009720 <prvProcessReceivedCommands+0x188>
 8009718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800971a:	f000 fc01 	bl	8009f20 <vPortFree>
 800971e:	e00a      	b.n	8009736 <prvProcessReceivedCommands+0x19e>
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009726:	f023 0301 	bic.w	r3, r3, #1
 800972a:	b2da      	uxtb	r2, r3
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009732:	e000      	b.n	8009736 <prvProcessReceivedCommands+0x19e>
 8009734:	bf00      	nop
 8009736:	4b08      	ldr	r3, [pc, #32]	; (8009758 <prvProcessReceivedCommands+0x1c0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	1d39      	adds	r1, r7, #4
 800973c:	2200      	movs	r2, #0
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe fb36 	bl	8007db0 <xQueueReceive>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	f47f af2a 	bne.w	80095a0 <prvProcessReceivedCommands+0x8>
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	3730      	adds	r7, #48	; 0x30
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20001e9c 	.word	0x20001e9c

0800975c <prvSwitchTimerLists>:
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af02      	add	r7, sp, #8
 8009762:	e048      	b.n	80097f6 <prvSwitchTimerLists+0x9a>
 8009764:	4b2d      	ldr	r3, [pc, #180]	; (800981c <prvSwitchTimerLists+0xc0>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	4b2b      	ldr	r3, [pc, #172]	; (800981c <prvSwitchTimerLists+0xc0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3304      	adds	r3, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe f84f 	bl	8007820 <uxListRemove>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	4798      	blx	r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009790:	f003 0304 	and.w	r3, r3, #4
 8009794:	2b00      	cmp	r3, #0
 8009796:	d02e      	beq.n	80097f6 <prvSwitchTimerLists+0x9a>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	4413      	add	r3, r2
 80097a0:	60bb      	str	r3, [r7, #8]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d90e      	bls.n	80097c8 <prvSwitchTimerLists+0x6c>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	605a      	str	r2, [r3, #4]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	611a      	str	r2, [r3, #16]
 80097b6:	4b19      	ldr	r3, [pc, #100]	; (800981c <prvSwitchTimerLists+0xc0>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3304      	adds	r3, #4
 80097be:	4619      	mov	r1, r3
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7fd fff4 	bl	80077ae <vListInsert>
 80097c6:	e016      	b.n	80097f6 <prvSwitchTimerLists+0x9a>
 80097c8:	2300      	movs	r3, #0
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	2300      	movs	r3, #0
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	2100      	movs	r1, #0
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f7ff fd60 	bl	8009298 <xTimerGenericCommand>
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <prvSwitchTimerLists+0x9a>
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	603b      	str	r3, [r7, #0]
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <prvSwitchTimerLists+0x98>
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <prvSwitchTimerLists+0xc0>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1b1      	bne.n	8009764 <prvSwitchTimerLists+0x8>
 8009800:	4b06      	ldr	r3, [pc, #24]	; (800981c <prvSwitchTimerLists+0xc0>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	4b06      	ldr	r3, [pc, #24]	; (8009820 <prvSwitchTimerLists+0xc4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a04      	ldr	r2, [pc, #16]	; (800981c <prvSwitchTimerLists+0xc0>)
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	4a04      	ldr	r2, [pc, #16]	; (8009820 <prvSwitchTimerLists+0xc4>)
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	bf00      	nop
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20001e94 	.word	0x20001e94
 8009820:	20001e98 	.word	0x20001e98

08009824 <prvCheckForValidListAndQueue>:
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af02      	add	r7, sp, #8
 800982a:	f000 f98b 	bl	8009b44 <vPortEnterCritical>
 800982e:	4b15      	ldr	r3, [pc, #84]	; (8009884 <prvCheckForValidListAndQueue+0x60>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d120      	bne.n	8009878 <prvCheckForValidListAndQueue+0x54>
 8009836:	4814      	ldr	r0, [pc, #80]	; (8009888 <prvCheckForValidListAndQueue+0x64>)
 8009838:	f7fd ff68 	bl	800770c <vListInitialise>
 800983c:	4813      	ldr	r0, [pc, #76]	; (800988c <prvCheckForValidListAndQueue+0x68>)
 800983e:	f7fd ff65 	bl	800770c <vListInitialise>
 8009842:	4b13      	ldr	r3, [pc, #76]	; (8009890 <prvCheckForValidListAndQueue+0x6c>)
 8009844:	4a10      	ldr	r2, [pc, #64]	; (8009888 <prvCheckForValidListAndQueue+0x64>)
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	4b12      	ldr	r3, [pc, #72]	; (8009894 <prvCheckForValidListAndQueue+0x70>)
 800984a:	4a10      	ldr	r2, [pc, #64]	; (800988c <prvCheckForValidListAndQueue+0x68>)
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	2300      	movs	r3, #0
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <prvCheckForValidListAndQueue+0x74>)
 8009854:	4a11      	ldr	r2, [pc, #68]	; (800989c <prvCheckForValidListAndQueue+0x78>)
 8009856:	2110      	movs	r1, #16
 8009858:	200a      	movs	r0, #10
 800985a:	f7fe f873 	bl	8007944 <xQueueGenericCreateStatic>
 800985e:	4603      	mov	r3, r0
 8009860:	4a08      	ldr	r2, [pc, #32]	; (8009884 <prvCheckForValidListAndQueue+0x60>)
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	4b07      	ldr	r3, [pc, #28]	; (8009884 <prvCheckForValidListAndQueue+0x60>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d005      	beq.n	8009878 <prvCheckForValidListAndQueue+0x54>
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <prvCheckForValidListAndQueue+0x60>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	490b      	ldr	r1, [pc, #44]	; (80098a0 <prvCheckForValidListAndQueue+0x7c>)
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fc8c 	bl	8008190 <vQueueAddToRegistry>
 8009878:	f000 f994 	bl	8009ba4 <vPortExitCritical>
 800987c:	bf00      	nop
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20001e9c 	.word	0x20001e9c
 8009888:	20001e6c 	.word	0x20001e6c
 800988c:	20001e80 	.word	0x20001e80
 8009890:	20001e94 	.word	0x20001e94
 8009894:	20001e98 	.word	0x20001e98
 8009898:	20001f48 	.word	0x20001f48
 800989c:	20001ea8 	.word	0x20001ea8
 80098a0:	0800b384 	.word	0x0800b384

080098a4 <xTimerPendFunctionCallFromISR>:
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08a      	sub	sp, #40	; 0x28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]
 80098b2:	f06f 0301 	mvn.w	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	61bb      	str	r3, [r7, #24]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	623b      	str	r3, [r7, #32]
 80098c4:	4b06      	ldr	r3, [pc, #24]	; (80098e0 <xTimerPendFunctionCallFromISR+0x3c>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	f107 0114 	add.w	r1, r7, #20
 80098cc:	2300      	movs	r3, #0
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	f7fe f9d2 	bl	8007c78 <xQueueGenericSendFromISR>
 80098d4:	6278      	str	r0, [r7, #36]	; 0x24
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	4618      	mov	r0, r3
 80098da:	3728      	adds	r7, #40	; 0x28
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	20001e9c 	.word	0x20001e9c

080098e4 <pxPortInitialiseStack>:
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3b04      	subs	r3, #4
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3b04      	subs	r3, #4
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f023 0201 	bic.w	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3b04      	subs	r3, #4
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	4a0c      	ldr	r2, [pc, #48]	; (8009948 <pxPortInitialiseStack+0x64>)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3b14      	subs	r3, #20
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3b04      	subs	r3, #4
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f06f 0202 	mvn.w	r2, #2
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3b20      	subs	r3, #32
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	0800994d 	.word	0x0800994d

0800994c <prvTaskExitError>:
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	2300      	movs	r3, #0
 8009954:	607b      	str	r3, [r7, #4]
 8009956:	4b12      	ldr	r3, [pc, #72]	; (80099a0 <prvTaskExitError+0x54>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d00a      	beq.n	8009976 <prvTaskExitError+0x2a>
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	60fb      	str	r3, [r7, #12]
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <prvTaskExitError+0x28>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	60bb      	str	r3, [r7, #8]
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0fc      	beq.n	800998c <prvTaskExitError+0x40>
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	2000000c 	.word	0x2000000c
	...

080099b0 <SVC_Handler>:
 80099b0:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <pxCurrentTCBConst2>)
 80099b2:	6819      	ldr	r1, [r3, #0]
 80099b4:	6808      	ldr	r0, [r1, #0]
 80099b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	f380 8809 	msr	PSP, r0
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8811 	msr	BASEPRI, r0
 80099ca:	4770      	bx	lr
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst2>:
 80099d0:	2000196c 	.word	0x2000196c
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <prvPortStartFirstTask>:
 80099d8:	4808      	ldr	r0, [pc, #32]	; (80099fc <prvPortStartFirstTask+0x24>)
 80099da:	6800      	ldr	r0, [r0, #0]
 80099dc:	6800      	ldr	r0, [r0, #0]
 80099de:	f380 8808 	msr	MSP, r0
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8814 	msr	CONTROL, r0
 80099ea:	b662      	cpsie	i
 80099ec:	b661      	cpsie	f
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	df00      	svc	0
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	e000ed08 	.word	0xe000ed08

08009a00 <xPortStartScheduler>:
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4b46      	ldr	r3, [pc, #280]	; (8009b20 <xPortStartScheduler+0x120>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a46      	ldr	r2, [pc, #280]	; (8009b24 <xPortStartScheduler+0x124>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d10a      	bne.n	8009a26 <xPortStartScheduler+0x26>
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	613b      	str	r3, [r7, #16]
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xPortStartScheduler+0x24>
 8009a26:	4b3e      	ldr	r3, [pc, #248]	; (8009b20 <xPortStartScheduler+0x120>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a3f      	ldr	r2, [pc, #252]	; (8009b28 <xPortStartScheduler+0x128>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d10a      	bne.n	8009a46 <xPortStartScheduler+0x46>
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xPortStartScheduler+0x44>
 8009a46:	4b39      	ldr	r3, [pc, #228]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009a48:	617b      	str	r3, [r7, #20]
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	22ff      	movs	r2, #255	; 0xff
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	70fb      	strb	r3, [r7, #3]
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b31      	ldr	r3, [pc, #196]	; (8009b30 <xPortStartScheduler+0x130>)
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	4b31      	ldr	r3, [pc, #196]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a70:	2207      	movs	r2, #7
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	e009      	b.n	8009a8a <xPortStartScheduler+0x8a>
 8009a76:	4b2f      	ldr	r3, [pc, #188]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	4a2d      	ldr	r2, [pc, #180]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	70fb      	strb	r3, [r7, #3]
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a92:	2b80      	cmp	r3, #128	; 0x80
 8009a94:	d0ef      	beq.n	8009a76 <xPortStartScheduler+0x76>
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f1c3 0307 	rsb	r3, r3, #7
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	d00a      	beq.n	8009ab8 <xPortStartScheduler+0xb8>
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	60bb      	str	r3, [r7, #8]
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <xPortStartScheduler+0xb6>
 8009ab8:	4b1e      	ldr	r3, [pc, #120]	; (8009b34 <xPortStartScheduler+0x134>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <xPortStartScheduler+0x134>)
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	4b1c      	ldr	r3, [pc, #112]	; (8009b34 <xPortStartScheduler+0x134>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aca:	4a1a      	ldr	r2, [pc, #104]	; (8009b34 <xPortStartScheduler+0x134>)
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	4b18      	ldr	r3, [pc, #96]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a17      	ldr	r2, [pc, #92]	; (8009b38 <xPortStartScheduler+0x138>)
 8009adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a14      	ldr	r2, [pc, #80]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	f000 f8dd 	bl	8009cac <vPortSetupTimerInterrupt>
 8009af2:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <xPortStartScheduler+0x13c>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	f000 f8fc 	bl	8009cf4 <vPortEnableVFP>
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <xPortStartScheduler+0x140>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a0f      	ldr	r2, [pc, #60]	; (8009b40 <xPortStartScheduler+0x140>)
 8009b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	f7ff ff66 	bl	80099d8 <prvPortStartFirstTask>
 8009b0c:	f7fe ff70 	bl	80089f0 <vTaskSwitchContext>
 8009b10:	f7ff ff1c 	bl	800994c <prvTaskExitError>
 8009b14:	2300      	movs	r3, #0
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	e000ed00 	.word	0xe000ed00
 8009b24:	410fc271 	.word	0x410fc271
 8009b28:	410fc270 	.word	0x410fc270
 8009b2c:	e000e400 	.word	0xe000e400
 8009b30:	20001f98 	.word	0x20001f98
 8009b34:	20001f9c 	.word	0x20001f9c
 8009b38:	e000ed20 	.word	0xe000ed20
 8009b3c:	2000000c 	.word	0x2000000c
 8009b40:	e000ef34 	.word	0xe000ef34

08009b44 <vPortEnterCritical>:
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	bf00      	nop
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	4a0d      	ldr	r2, [pc, #52]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d10f      	bne.n	8009b90 <vPortEnterCritical+0x4c>
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <vPortEnterCritical+0x5c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <vPortEnterCritical+0x4c>
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <vPortEnterCritical+0x4a>
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	2000000c 	.word	0x2000000c
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <vPortExitCritical>:
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4b12      	ldr	r3, [pc, #72]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <vPortExitCritical+0x24>
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	607b      	str	r3, [r7, #4]
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <vPortExitCritical+0x22>
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d105      	bne.n	8009be6 <vPortExitCritical+0x42>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	603b      	str	r3, [r7, #0]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	2000000c 	.word	0x2000000c
	...

08009c00 <PendSV_Handler>:
 8009c00:	f3ef 8009 	mrs	r0, PSP
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <pxCurrentTCBConst>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	f01e 0f10 	tst.w	lr, #16
 8009c10:	bf08      	it	eq
 8009c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	6010      	str	r0, [r2, #0]
 8009c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c24:	f380 8811 	msr	BASEPRI, r0
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f7fe fede 	bl	80089f0 <vTaskSwitchContext>
 8009c34:	f04f 0000 	mov.w	r0, #0
 8009c38:	f380 8811 	msr	BASEPRI, r0
 8009c3c:	bc09      	pop	{r0, r3}
 8009c3e:	6819      	ldr	r1, [r3, #0]
 8009c40:	6808      	ldr	r0, [r1, #0]
 8009c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c46:	f01e 0f10 	tst.w	lr, #16
 8009c4a:	bf08      	it	eq
 8009c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c50:	f380 8809 	msr	PSP, r0
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w

08009c60 <pxCurrentTCBConst>:
 8009c60:	2000196c 	.word	0x2000196c
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop

08009c68 <xPortSysTickHandler>:
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	607b      	str	r3, [r7, #4]
 8009c80:	bf00      	nop
 8009c82:	f7fe fdfb 	bl	800887c <xTaskIncrementTick>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <xPortSysTickHandler+0x2c>
 8009c8c:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <xPortSysTickHandler+0x40>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	2300      	movs	r3, #0
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	e000ed04 	.word	0xe000ed04

08009cac <vPortSetupTimerInterrupt>:
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <vPortSetupTimerInterrupt+0x34>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <vPortSetupTimerInterrupt+0x38>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <vPortSetupTimerInterrupt+0x3c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <vPortSetupTimerInterrupt+0x40>)
 8009cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc6:	099b      	lsrs	r3, r3, #6
 8009cc8:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <vPortSetupTimerInterrupt+0x44>)
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <vPortSetupTimerInterrupt+0x34>)
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	e000e010 	.word	0xe000e010
 8009ce4:	e000e018 	.word	0xe000e018
 8009ce8:	20000000 	.word	0x20000000
 8009cec:	10624dd3 	.word	0x10624dd3
 8009cf0:	e000e014 	.word	0xe000e014

08009cf4 <vPortEnableVFP>:
 8009cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d04 <vPortEnableVFP+0x10>
 8009cf8:	6801      	ldr	r1, [r0, #0]
 8009cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cfe:	6001      	str	r1, [r0, #0]
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	e000ed88 	.word	0xe000ed88

08009d08 <vPortValidateInterruptPriority>:
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	f3ef 8305 	mrs	r3, IPSR
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b0f      	cmp	r3, #15
 8009d18:	d914      	bls.n	8009d44 <vPortValidateInterruptPriority+0x3c>
 8009d1a:	4a17      	ldr	r2, [pc, #92]	; (8009d78 <vPortValidateInterruptPriority+0x70>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	72fb      	strb	r3, [r7, #11]
 8009d24:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <vPortValidateInterruptPriority+0x74>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	7afa      	ldrb	r2, [r7, #11]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d20a      	bcs.n	8009d44 <vPortValidateInterruptPriority+0x3c>
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	bf00      	nop
 8009d42:	e7fe      	b.n	8009d42 <vPortValidateInterruptPriority+0x3a>
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <vPortValidateInterruptPriority+0x78>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	; (8009d84 <vPortValidateInterruptPriority+0x7c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d90a      	bls.n	8009d6a <vPortValidateInterruptPriority+0x62>
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	603b      	str	r3, [r7, #0]
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <vPortValidateInterruptPriority+0x60>
 8009d6a:	bf00      	nop
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	e000e3f0 	.word	0xe000e3f0
 8009d7c:	20001f98 	.word	0x20001f98
 8009d80:	e000ed0c 	.word	0xe000ed0c
 8009d84:	20001f9c 	.word	0x20001f9c

08009d88 <pvPortMalloc>:
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08a      	sub	sp, #40	; 0x28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	2300      	movs	r3, #0
 8009d92:	61fb      	str	r3, [r7, #28]
 8009d94:	f7fe fcb6 	bl	8008704 <vTaskSuspendAll>
 8009d98:	4b5b      	ldr	r3, [pc, #364]	; (8009f08 <pvPortMalloc+0x180>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <pvPortMalloc+0x1c>
 8009da0:	f000 f920 	bl	8009fe4 <prvHeapInit>
 8009da4:	4b59      	ldr	r3, [pc, #356]	; (8009f0c <pvPortMalloc+0x184>)
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4013      	ands	r3, r2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f040 8093 	bne.w	8009ed8 <pvPortMalloc+0x150>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01d      	beq.n	8009df4 <pvPortMalloc+0x6c>
 8009db8:	2208      	movs	r2, #8
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	607b      	str	r3, [r7, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f003 0307 	and.w	r3, r3, #7
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d014      	beq.n	8009df4 <pvPortMalloc+0x6c>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f023 0307 	bic.w	r3, r3, #7
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	607b      	str	r3, [r7, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f003 0307 	and.w	r3, r3, #7
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <pvPortMalloc+0x6c>
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <pvPortMalloc+0x6a>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d06e      	beq.n	8009ed8 <pvPortMalloc+0x150>
 8009dfa:	4b45      	ldr	r3, [pc, #276]	; (8009f10 <pvPortMalloc+0x188>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d869      	bhi.n	8009ed8 <pvPortMalloc+0x150>
 8009e04:	4b43      	ldr	r3, [pc, #268]	; (8009f14 <pvPortMalloc+0x18c>)
 8009e06:	623b      	str	r3, [r7, #32]
 8009e08:	4b42      	ldr	r3, [pc, #264]	; (8009f14 <pvPortMalloc+0x18c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e0e:	e004      	b.n	8009e1a <pvPortMalloc+0x92>
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	623b      	str	r3, [r7, #32]
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d903      	bls.n	8009e2c <pvPortMalloc+0xa4>
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1f1      	bne.n	8009e10 <pvPortMalloc+0x88>
 8009e2c:	4b36      	ldr	r3, [pc, #216]	; (8009f08 <pvPortMalloc+0x180>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d050      	beq.n	8009ed8 <pvPortMalloc+0x150>
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2208      	movs	r2, #8
 8009e3c:	4413      	add	r3, r2
 8009e3e:	61fb      	str	r3, [r7, #28]
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	2308      	movs	r3, #8
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d91f      	bls.n	8009e98 <pvPortMalloc+0x110>
 8009e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	61bb      	str	r3, [r7, #24]
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <pvPortMalloc+0xf8>
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <pvPortMalloc+0xf6>
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	1ad2      	subs	r2, r2, r3
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	605a      	str	r2, [r3, #4]
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	605a      	str	r2, [r3, #4]
 8009e92:	69b8      	ldr	r0, [r7, #24]
 8009e94:	f000 f908 	bl	800a0a8 <prvInsertBlockIntoFreeList>
 8009e98:	4b1d      	ldr	r3, [pc, #116]	; (8009f10 <pvPortMalloc+0x188>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	4a1b      	ldr	r2, [pc, #108]	; (8009f10 <pvPortMalloc+0x188>)
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	4b1a      	ldr	r3, [pc, #104]	; (8009f10 <pvPortMalloc+0x188>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	4b1b      	ldr	r3, [pc, #108]	; (8009f18 <pvPortMalloc+0x190>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d203      	bcs.n	8009eba <pvPortMalloc+0x132>
 8009eb2:	4b17      	ldr	r3, [pc, #92]	; (8009f10 <pvPortMalloc+0x188>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a18      	ldr	r2, [pc, #96]	; (8009f18 <pvPortMalloc+0x190>)
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <pvPortMalloc+0x184>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	431a      	orrs	r2, r3
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	605a      	str	r2, [r3, #4]
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <pvPortMalloc+0x194>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	4a11      	ldr	r2, [pc, #68]	; (8009f1c <pvPortMalloc+0x194>)
 8009ed6:	6013      	str	r3, [r2, #0]
 8009ed8:	f7fe fc22 	bl	8008720 <xTaskResumeAll>
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <pvPortMalloc+0x174>
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	bf00      	nop
 8009efa:	e7fe      	b.n	8009efa <pvPortMalloc+0x172>
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	4618      	mov	r0, r3
 8009f00:	3728      	adds	r7, #40	; 0x28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20005ba8 	.word	0x20005ba8
 8009f0c:	20005bbc 	.word	0x20005bbc
 8009f10:	20005bac 	.word	0x20005bac
 8009f14:	20005ba0 	.word	0x20005ba0
 8009f18:	20005bb0 	.word	0x20005bb0
 8009f1c:	20005bb4 	.word	0x20005bb4

08009f20 <vPortFree>:
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d04d      	beq.n	8009fce <vPortFree+0xae>
 8009f32:	2308      	movs	r3, #8
 8009f34:	425b      	negs	r3, r3
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4413      	add	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	613b      	str	r3, [r7, #16]
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	4b24      	ldr	r3, [pc, #144]	; (8009fd8 <vPortFree+0xb8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4013      	ands	r3, r2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10a      	bne.n	8009f64 <vPortFree+0x44>
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <vPortFree+0x42>
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00a      	beq.n	8009f82 <vPortFree+0x62>
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	60bb      	str	r3, [r7, #8]
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <vPortFree+0x60>
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <vPortFree+0xb8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01e      	beq.n	8009fce <vPortFree+0xae>
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d11a      	bne.n	8009fce <vPortFree+0xae>
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	4b0e      	ldr	r3, [pc, #56]	; (8009fd8 <vPortFree+0xb8>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	401a      	ands	r2, r3
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	605a      	str	r2, [r3, #4]
 8009fa8:	f7fe fbac 	bl	8008704 <vTaskSuspendAll>
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <vPortFree+0xbc>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	4a09      	ldr	r2, [pc, #36]	; (8009fdc <vPortFree+0xbc>)
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	6938      	ldr	r0, [r7, #16]
 8009fbc:	f000 f874 	bl	800a0a8 <prvInsertBlockIntoFreeList>
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <vPortFree+0xc0>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	4a06      	ldr	r2, [pc, #24]	; (8009fe0 <vPortFree+0xc0>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	f7fe fba9 	bl	8008720 <xTaskResumeAll>
 8009fce:	bf00      	nop
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20005bbc 	.word	0x20005bbc
 8009fdc:	20005bac 	.word	0x20005bac
 8009fe0:	20005bb8 	.word	0x20005bb8

08009fe4 <prvHeapInit>:
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fee:	60bb      	str	r3, [r7, #8]
 8009ff0:	4b27      	ldr	r3, [pc, #156]	; (800a090 <prvHeapInit+0xac>)
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00c      	beq.n	800a018 <prvHeapInit+0x34>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3307      	adds	r3, #7
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	4a1f      	ldr	r2, [pc, #124]	; (800a090 <prvHeapInit+0xac>)
 800a014:	4413      	add	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	607b      	str	r3, [r7, #4]
 800a01c:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <prvHeapInit+0xb0>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	4b1c      	ldr	r3, [pc, #112]	; (800a094 <prvHeapInit+0xb0>)
 800a024:	2200      	movs	r2, #0
 800a026:	605a      	str	r2, [r3, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	4413      	add	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	2208      	movs	r2, #8
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 0307 	bic.w	r3, r3, #7
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4a15      	ldr	r2, [pc, #84]	; (800a098 <prvHeapInit+0xb4>)
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	4b14      	ldr	r3, [pc, #80]	; (800a098 <prvHeapInit+0xb4>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	605a      	str	r2, [r3, #4]
 800a04e:	4b12      	ldr	r3, [pc, #72]	; (800a098 <prvHeapInit+0xb4>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	603b      	str	r3, [r7, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	1ad2      	subs	r2, r2, r3
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	605a      	str	r2, [r3, #4]
 800a064:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <prvHeapInit+0xb4>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <prvHeapInit+0xb8>)
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <prvHeapInit+0xbc>)
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	4b09      	ldr	r3, [pc, #36]	; (800a0a4 <prvHeapInit+0xc0>)
 800a07e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	20001fa0 	.word	0x20001fa0
 800a094:	20005ba0 	.word	0x20005ba0
 800a098:	20005ba8 	.word	0x20005ba8
 800a09c:	20005bb0 	.word	0x20005bb0
 800a0a0:	20005bac 	.word	0x20005bac
 800a0a4:	20005bbc 	.word	0x20005bbc

0800a0a8 <prvInsertBlockIntoFreeList>:
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	4b28      	ldr	r3, [pc, #160]	; (800a154 <prvInsertBlockIntoFreeList+0xac>)
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e002      	b.n	800a0bc <prvInsertBlockIntoFreeList+0x14>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d8f7      	bhi.n	800a0b6 <prvInsertBlockIntoFreeList+0xe>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	60bb      	str	r3, [r7, #8]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d108      	bne.n	800a0ea <prvInsertBlockIntoFreeList+0x42>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	441a      	add	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	605a      	str	r2, [r3, #4]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	607b      	str	r3, [r7, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	60bb      	str	r3, [r7, #8]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	441a      	add	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d118      	bne.n	800a130 <prvInsertBlockIntoFreeList+0x88>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b15      	ldr	r3, [pc, #84]	; (800a158 <prvInsertBlockIntoFreeList+0xb0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d00d      	beq.n	800a126 <prvInsertBlockIntoFreeList+0x7e>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	441a      	add	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	605a      	str	r2, [r3, #4]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	e008      	b.n	800a138 <prvInsertBlockIntoFreeList+0x90>
 800a126:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <prvInsertBlockIntoFreeList+0xb0>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e003      	b.n	800a138 <prvInsertBlockIntoFreeList+0x90>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d002      	beq.n	800a146 <prvInsertBlockIntoFreeList+0x9e>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20005ba0 	.word	0x20005ba0
 800a158:	20005ba8 	.word	0x20005ba8

0800a15c <vHWOutInit>:
void vGetAverDataFromRAW(uint16_t * Indata, uint16_t *OutData, uint16_t InIndex, uint16_t OutIndex, uint8_t Size,uint16_t FrameSize, uint16_t BufferSize);



void vHWOutInit(OUT_NAME_TYPE out_name, TIM_HandleTypeDef * ptim, uint32_t  channel,  float power, uint16_t overload_timer, float overload_power, uint8_t PWM)
{
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b08e      	sub	sp, #56	; 0x38
 800a160:	af00      	add	r7, sp, #0
 800a162:	6139      	str	r1, [r7, #16]
 800a164:	60fa      	str	r2, [r7, #12]
 800a166:	ed87 0a02 	vstr	s0, [r7, #8]
 800a16a:	461a      	mov	r2, r3
 800a16c:	edc7 0a01 	vstr	s1, [r7, #4]
 800a170:	4603      	mov	r3, r0
 800a172:	75fb      	strb	r3, [r7, #23]
 800a174:	4613      	mov	r3, r2
 800a176:	82bb      	strh	r3, [r7, #20]
	out[out_name].ptim = ptim;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	4a3c      	ldr	r2, [pc, #240]	; (800a26c <vHWOutInit+0x110>)
 800a17c:	2158      	movs	r1, #88	; 0x58
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	4413      	add	r3, r2
 800a184:	3304      	adds	r3, #4
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	601a      	str	r2, [r3, #0]
	out[out_name].channel = channel;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	4a37      	ldr	r2, [pc, #220]	; (800a26c <vHWOutInit+0x110>)
 800a18e:	2158      	movs	r1, #88	; 0x58
 800a190:	fb01 f303 	mul.w	r3, r1, r3
 800a194:	4413      	add	r3, r2
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	601a      	str	r2, [r3, #0]
	out[out_name].power = power;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	4a33      	ldr	r2, [pc, #204]	; (800a26c <vHWOutInit+0x110>)
 800a19e:	2158      	movs	r1, #88	; 0x58
 800a1a0:	fb01 f303 	mul.w	r3, r1, r3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	330c      	adds	r3, #12
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	601a      	str	r2, [r3, #0]
	out[out_name].overload_power = overload_power;
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	4a2f      	ldr	r2, [pc, #188]	; (800a26c <vHWOutInit+0x110>)
 800a1b0:	2158      	movs	r1, #88	; 0x58
 800a1b2:	fb01 f303 	mul.w	r3, r1, r3
 800a1b6:	4413      	add	r3, r2
 800a1b8:	3310      	adds	r3, #16
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	601a      	str	r2, [r3, #0]
	out[out_name].overload_config_timer = overload_timer;
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
 800a1c0:	4a2a      	ldr	r2, [pc, #168]	; (800a26c <vHWOutInit+0x110>)
 800a1c2:	2158      	movs	r1, #88	; 0x58
 800a1c4:	fb01 f303 	mul.w	r3, r1, r3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	3316      	adds	r3, #22
 800a1cc:	8aba      	ldrh	r2, [r7, #20]
 800a1ce:	801a      	strh	r2, [r3, #0]
	out[out_name].overload_timer = 0;
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
 800a1d2:	4a26      	ldr	r2, [pc, #152]	; (800a26c <vHWOutInit+0x110>)
 800a1d4:	2158      	movs	r1, #88	; 0x58
 800a1d6:	fb01 f303 	mul.w	r3, r1, r3
 800a1da:	4413      	add	r3, r2
 800a1dc:	3318      	adds	r3, #24
 800a1de:	2200      	movs	r2, #0
 800a1e0:	801a      	strh	r2, [r3, #0]
	out[out_name].out_logic_state =OUT_OFF;
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	4a21      	ldr	r2, [pc, #132]	; (800a26c <vHWOutInit+0x110>)
 800a1e6:	2158      	movs	r1, #88	; 0x58
 800a1e8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	701a      	strb	r2, [r3, #0]
	out[out_name].out_state =STATE_OUT_OFF;
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
 800a1f6:	4a1d      	ldr	r2, [pc, #116]	; (800a26c <vHWOutInit+0x110>)
 800a1f8:	2158      	movs	r1, #88	; 0x58
 800a1fa:	fb01 f303 	mul.w	r3, r1, r3
 800a1fe:	4413      	add	r3, r2
 800a200:	3309      	adds	r3, #9
 800a202:	2200      	movs	r2, #0
 800a204:	701a      	strb	r2, [r3, #0]
	out[out_name].error_flag = ERROR_OFF;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	4a18      	ldr	r2, [pc, #96]	; (800a26c <vHWOutInit+0x110>)
 800a20a:	2158      	movs	r1, #88	; 0x58
 800a20c:	fb01 f303 	mul.w	r3, r1, r3
 800a210:	4413      	add	r3, r2
 800a212:	3320      	adds	r3, #32
 800a214:	2200      	movs	r2, #0
 800a216:	701a      	strb	r2, [r3, #0]
	out[out_name].error_count = 0;
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	4a14      	ldr	r2, [pc, #80]	; (800a26c <vHWOutInit+0x110>)
 800a21c:	2158      	movs	r1, #88	; 0x58
 800a21e:	fb01 f303 	mul.w	r3, r1, r3
 800a222:	4413      	add	r3, r2
 800a224:	331a      	adds	r3, #26
 800a226:	2200      	movs	r2, #0
 800a228:	701a      	strb	r2, [r3, #0]
	out[out_name].restart_timer =0;
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	4a0f      	ldr	r2, [pc, #60]	; (800a26c <vHWOutInit+0x110>)
 800a22e:	2158      	movs	r1, #88	; 0x58
 800a230:	fb01 f303 	mul.w	r3, r1, r3
 800a234:	4413      	add	r3, r2
 800a236:	331c      	adds	r3, #28
 800a238:	2200      	movs	r2, #0
 800a23a:	801a      	strh	r2, [r3, #0]
	out[out_name].restart_config_timer =1000;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	4a0b      	ldr	r2, [pc, #44]	; (800a26c <vHWOutInit+0x110>)
 800a240:	2158      	movs	r1, #88	; 0x58
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	331e      	adds	r3, #30
 800a24a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a24e:	801a      	strh	r2, [r3, #0]
	out[out_name].PWM = PWM;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
 800a252:	4a06      	ldr	r2, [pc, #24]	; (800a26c <vHWOutInit+0x110>)
 800a254:	2158      	movs	r1, #88	; 0x58
 800a256:	fb01 f303 	mul.w	r3, r1, r3
 800a25a:	4413      	add	r3, r2
 800a25c:	3314      	adds	r3, #20
 800a25e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800a262:	701a      	strb	r2, [r3, #0]
	for (uint8_t j=0; j< 4U; j++)
 800a264:	2300      	movs	r3, #0
 800a266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a26a:	e0e6      	b.n	800a43a <vHWOutInit+0x2de>
 800a26c:	20005c54 	.word	0x20005c54
	{
		//Проверяем что хоты одно значение АЦП не равно нулю,что-то не словить делением на ноль.
		if ((CurSensData[out_name][j].Data !=0) || (CurSensData[out_name][j+1].Data !=0 ))
 800a270:	7dfa      	ldrb	r2, [r7, #23]
 800a272:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800a276:	48a6      	ldr	r0, [pc, #664]	; (800a510 <vHWOutInit+0x3b4>)
 800a278:	4613      	mov	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	440b      	add	r3, r1
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4403      	add	r3, r0
 800a284:	885b      	ldrh	r3, [r3, #2]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10e      	bne.n	800a2a8 <vHWOutInit+0x14c>
 800a28a:	7dfa      	ldrb	r2, [r7, #23]
 800a28c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a290:	1c59      	adds	r1, r3, #1
 800a292:	489f      	ldr	r0, [pc, #636]	; (800a510 <vHWOutInit+0x3b4>)
 800a294:	4613      	mov	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	440b      	add	r3, r1
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4403      	add	r3, r0
 800a2a0:	885b      	ldrh	r3, [r3, #2]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 80c4 	beq.w	800a430 <vHWOutInit+0x2d4>
		{
			out[out_name].CSC[j].data = CurSensData[out_name][j+1].Data;
 800a2a8:	7df9      	ldrb	r1, [r7, #23]
 800a2aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2ae:	1c5c      	adds	r4, r3, #1
 800a2b0:	7df8      	ldrb	r0, [r7, #23]
 800a2b2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a2b6:	4d96      	ldr	r5, [pc, #600]	; (800a510 <vHWOutInit+0x3b4>)
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	4423      	add	r3, r4
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	442b      	add	r3, r5
 800a2c4:	885c      	ldrh	r4, [r3, #2]
 800a2c6:	4993      	ldr	r1, [pc, #588]	; (800a514 <vHWOutInit+0x3b8>)
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	4413      	add	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	2258      	movs	r2, #88	; 0x58
 800a2d2:	fb00 f202 	mul.w	r2, r0, r2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	440b      	add	r3, r1
 800a2da:	3324      	adds	r3, #36	; 0x24
 800a2dc:	4622      	mov	r2, r4
 800a2de:	801a      	strh	r2, [r3, #0]
			out[out_name].CSC[j].k = ( CurSensData[out_name][j].KOOF -  CurSensData[out_name][j+1].KOOF) / ( CurSensData[out_name][j].Data- CurSensData[out_name][j+1].Data);
 800a2e0:	7dfa      	ldrb	r2, [r7, #23]
 800a2e2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800a2e6:	488a      	ldr	r0, [pc, #552]	; (800a510 <vHWOutInit+0x3b4>)
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	440b      	add	r3, r1
 800a2f0:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800a2f4:	461c      	mov	r4, r3
 800a2f6:	7dfa      	ldrb	r2, [r7, #23]
 800a2f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2fc:	1c59      	adds	r1, r3, #1
 800a2fe:	4884      	ldr	r0, [pc, #528]	; (800a510 <vHWOutInit+0x3b4>)
 800a300:	4613      	mov	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	440b      	add	r3, r1
 800a308:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800a30c:	1ae1      	subs	r1, r4, r3
 800a30e:	7dfa      	ldrb	r2, [r7, #23]
 800a310:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800a314:	4c7e      	ldr	r4, [pc, #504]	; (800a510 <vHWOutInit+0x3b4>)
 800a316:	4613      	mov	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	4403      	add	r3, r0
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4423      	add	r3, r4
 800a322:	885b      	ldrh	r3, [r3, #2]
 800a324:	461d      	mov	r5, r3
 800a326:	7dfa      	ldrb	r2, [r7, #23]
 800a328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a32c:	1c58      	adds	r0, r3, #1
 800a32e:	4c78      	ldr	r4, [pc, #480]	; (800a510 <vHWOutInit+0x3b4>)
 800a330:	4613      	mov	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	4403      	add	r3, r0
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4423      	add	r3, r4
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	1aeb      	subs	r3, r5, r3
 800a340:	fb91 f3f3 	sdiv	r3, r1, r3
 800a344:	7df9      	ldrb	r1, [r7, #23]
 800a346:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a352:	4870      	ldr	r0, [pc, #448]	; (800a514 <vHWOutInit+0x3b8>)
 800a354:	4613      	mov	r3, r2
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	4413      	add	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	2258      	movs	r2, #88	; 0x58
 800a35e:	fb01 f202 	mul.w	r2, r1, r2
 800a362:	4413      	add	r3, r2
 800a364:	4403      	add	r3, r0
 800a366:	3328      	adds	r3, #40	; 0x28
 800a368:	edc3 7a00 	vstr	s15, [r3]
			out[out_name].CSC[j].b = ( CurSensData[out_name][j].Data * CurSensData[out_name][j+1].KOOF - CurSensData[out_name][j+1].Data * CurSensData[out_name][j].KOOF)/(CurSensData[out_name][j].Data + CurSensData[out_name][j+1].Data);
 800a36c:	7dfa      	ldrb	r2, [r7, #23]
 800a36e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800a372:	4867      	ldr	r0, [pc, #412]	; (800a510 <vHWOutInit+0x3b4>)
 800a374:	4613      	mov	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	440b      	add	r3, r1
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4403      	add	r3, r0
 800a380:	885b      	ldrh	r3, [r3, #2]
 800a382:	461c      	mov	r4, r3
 800a384:	7dfa      	ldrb	r2, [r7, #23]
 800a386:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a38a:	1c59      	adds	r1, r3, #1
 800a38c:	4860      	ldr	r0, [pc, #384]	; (800a510 <vHWOutInit+0x3b4>)
 800a38e:	4613      	mov	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	440b      	add	r3, r1
 800a396:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800a39a:	fb03 f104 	mul.w	r1, r3, r4
 800a39e:	7dfa      	ldrb	r2, [r7, #23]
 800a3a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3a4:	1c58      	adds	r0, r3, #1
 800a3a6:	4c5a      	ldr	r4, [pc, #360]	; (800a510 <vHWOutInit+0x3b4>)
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	4403      	add	r3, r0
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4423      	add	r3, r4
 800a3b4:	885b      	ldrh	r3, [r3, #2]
 800a3b6:	461d      	mov	r5, r3
 800a3b8:	7dfa      	ldrb	r2, [r7, #23]
 800a3ba:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800a3be:	4c54      	ldr	r4, [pc, #336]	; (800a510 <vHWOutInit+0x3b4>)
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	4403      	add	r3, r0
 800a3c8:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 800a3cc:	fb05 f303 	mul.w	r3, r5, r3
 800a3d0:	1ac9      	subs	r1, r1, r3
 800a3d2:	7dfa      	ldrb	r2, [r7, #23]
 800a3d4:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800a3d8:	4c4d      	ldr	r4, [pc, #308]	; (800a510 <vHWOutInit+0x3b4>)
 800a3da:	4613      	mov	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	4403      	add	r3, r0
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4423      	add	r3, r4
 800a3e6:	885b      	ldrh	r3, [r3, #2]
 800a3e8:	461d      	mov	r5, r3
 800a3ea:	7dfa      	ldrb	r2, [r7, #23]
 800a3ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3f0:	1c58      	adds	r0, r3, #1
 800a3f2:	4c47      	ldr	r4, [pc, #284]	; (800a510 <vHWOutInit+0x3b4>)
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	4403      	add	r3, r0
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4423      	add	r3, r4
 800a400:	885b      	ldrh	r3, [r3, #2]
 800a402:	442b      	add	r3, r5
 800a404:	fb91 f3f3 	sdiv	r3, r1, r3
 800a408:	7df9      	ldrb	r1, [r7, #23]
 800a40a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a416:	483f      	ldr	r0, [pc, #252]	; (800a514 <vHWOutInit+0x3b8>)
 800a418:	4613      	mov	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	4413      	add	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	2258      	movs	r2, #88	; 0x58
 800a422:	fb01 f202 	mul.w	r2, r1, r2
 800a426:	4413      	add	r3, r2
 800a428:	4403      	add	r3, r0
 800a42a:	332c      	adds	r3, #44	; 0x2c
 800a42c:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t j=0; j< 4U; j++)
 800a430:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a434:	3301      	adds	r3, #1
 800a436:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a43a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a43e:	2b03      	cmp	r3, #3
 800a440:	f67f af16 	bls.w	800a270 <vHWOutInit+0x114>
		}
	}

    TIM_OC_InitTypeDef sConfigOC = {0};
 800a444:	f107 0318 	add.w	r3, r7, #24
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	605a      	str	r2, [r3, #4]
 800a44e:	609a      	str	r2, [r3, #8]
 800a450:	60da      	str	r2, [r3, #12]
 800a452:	611a      	str	r2, [r3, #16]
 800a454:	615a      	str	r2, [r3, #20]
 800a456:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a458:	2360      	movs	r3, #96	; 0x60
 800a45a:	61bb      	str	r3, [r7, #24]
	sConfigOC.Pulse = (uint32_t)((float)(out[out_name].power/100) * out[out_name].ptim ->Init.Period *(float)out[out_name].PWM/100);
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	4a2d      	ldr	r2, [pc, #180]	; (800a514 <vHWOutInit+0x3b8>)
 800a460:	2158      	movs	r1, #88	; 0x58
 800a462:	fb01 f303 	mul.w	r3, r1, r3
 800a466:	4413      	add	r3, r2
 800a468:	330c      	adds	r3, #12
 800a46a:	edd3 7a00 	vldr	s15, [r3]
 800a46e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800a518 <vHWOutInit+0x3bc>
 800a472:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	4a26      	ldr	r2, [pc, #152]	; (800a514 <vHWOutInit+0x3b8>)
 800a47a:	2158      	movs	r1, #88	; 0x58
 800a47c:	fb01 f303 	mul.w	r3, r1, r3
 800a480:	4413      	add	r3, r2
 800a482:	3304      	adds	r3, #4
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	ee07 3a90 	vmov	s15, r3
 800a48c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a490:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	4a1f      	ldr	r2, [pc, #124]	; (800a514 <vHWOutInit+0x3b8>)
 800a498:	2158      	movs	r1, #88	; 0x58
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	4413      	add	r3, r2
 800a4a0:	3314      	adds	r3, #20
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	ee07 3a90 	vmov	s15, r3
 800a4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4b0:	eddf 6a19 	vldr	s13, [pc, #100]	; 800a518 <vHWOutInit+0x3bc>
 800a4b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4bc:	ee17 3a90 	vmov	r3, s15
 800a4c0:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(out[out_name].ptim , &sConfigOC, out[out_name].channel) != HAL_OK)
 800a4d6:	7dfb      	ldrb	r3, [r7, #23]
 800a4d8:	4a0e      	ldr	r2, [pc, #56]	; (800a514 <vHWOutInit+0x3b8>)
 800a4da:	2158      	movs	r1, #88	; 0x58
 800a4dc:	fb01 f303 	mul.w	r3, r1, r3
 800a4e0:	4413      	add	r3, r2
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	4a0a      	ldr	r2, [pc, #40]	; (800a514 <vHWOutInit+0x3b8>)
 800a4ea:	2158      	movs	r1, #88	; 0x58
 800a4ec:	fb01 f303 	mul.w	r3, r1, r3
 800a4f0:	4413      	add	r3, r2
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	f107 0318 	add.w	r3, r7, #24
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f7fb fa23 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <vHWOutInit+0x3ac>
	{
	    Error_Handler();
 800a504:	f7f7 fcdc 	bl	8001ec0 <Error_Handler>
	}
}
 800a508:	bf00      	nop
 800a50a:	3738      	adds	r7, #56	; 0x38
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bdb0      	pop	{r4, r5, r7, pc}
 800a510:	20000010 	.word	0x20000010
 800a514:	20005c54 	.word	0x20005c54
 800a518:	42c80000 	.word	0x42c80000

0800a51c <vHWOutResete>:
	xEventGroupClearBits (xOutEvent, ( 0x1 < out_name) );
}


void vHWOutResete( OUT_NAME_TYPE out_name)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	71fb      	strb	r3, [r7, #7]
	 HAL_TIM_PWM_Stop(out[out_name].ptim,  out[out_name].channel);
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	4a10      	ldr	r2, [pc, #64]	; (800a56c <vHWOutResete+0x50>)
 800a52a:	2158      	movs	r1, #88	; 0x58
 800a52c:	fb01 f303 	mul.w	r3, r1, r3
 800a530:	4413      	add	r3, r2
 800a532:	3304      	adds	r3, #4
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	490c      	ldr	r1, [pc, #48]	; (800a56c <vHWOutResete+0x50>)
 800a53a:	2058      	movs	r0, #88	; 0x58
 800a53c:	fb00 f303 	mul.w	r3, r0, r3
 800a540:	440b      	add	r3, r1
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7fb f828 	bl	800559c <HAL_TIM_PWM_Stop>
	 out_register &= ~(0x1<< out_name);
 800a54c:	79fb      	ldrb	r3, [r7, #7]
 800a54e:	2201      	movs	r2, #1
 800a550:	fa02 f303 	lsl.w	r3, r2, r3
 800a554:	43db      	mvns	r3, r3
 800a556:	461a      	mov	r2, r3
 800a558:	4b05      	ldr	r3, [pc, #20]	; (800a570 <vHWOutResete+0x54>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4013      	ands	r3, r2
 800a55e:	4a04      	ldr	r2, [pc, #16]	; (800a570 <vHWOutResete+0x54>)
 800a560:	6013      	str	r3, [r2, #0]

}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20005c54 	.word	0x20005c54
 800a570:	20006374 	.word	0x20006374

0800a574 <vHWOutSet>:

void vHWOutSet( OUT_NAME_TYPE out_name, uint8_t power)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08a      	sub	sp, #40	; 0x28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	460a      	mov	r2, r1
 800a57e:	71fb      	strb	r3, [r7, #7]
 800a580:	4613      	mov	r3, r2
 800a582:	71bb      	strb	r3, [r7, #6]
   TIM_OC_InitTypeDef sConfigOC = {0};
 800a584:	f107 030c 	add.w	r3, r7, #12
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	605a      	str	r2, [r3, #4]
 800a58e:	609a      	str	r2, [r3, #8]
 800a590:	60da      	str	r2, [r3, #12]
 800a592:	611a      	str	r2, [r3, #16]
 800a594:	615a      	str	r2, [r3, #20]
 800a596:	619a      	str	r2, [r3, #24]
   //В зависимости от номера выхода выибраетм таймер и канал таймера PWM
   if ( power != out[out_name].PWM )
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	4a3a      	ldr	r2, [pc, #232]	; (800a684 <vHWOutSet+0x110>)
 800a59c:	2158      	movs	r1, #88	; 0x58
 800a59e:	fb01 f303 	mul.w	r3, r1, r3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	79ba      	ldrb	r2, [r7, #6]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d048      	beq.n	800a640 <vHWOutSet+0xcc>
   {
   	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a5ae:	2360      	movs	r3, #96	; 0x60
 800a5b0:	60fb      	str	r3, [r7, #12]
   	  sConfigOC.Pulse = (uint32_t )((float)power/100 * (out[out_name].ptim->Init.Period *(float)out[out_name].PWM/100 ));
 800a5b2:	79bb      	ldrb	r3, [r7, #6]
 800a5b4:	ee07 3a90 	vmov	s15, r3
 800a5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5bc:	eddf 6a32 	vldr	s13, [pc, #200]	; 800a688 <vHWOutSet+0x114>
 800a5c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	4a2f      	ldr	r2, [pc, #188]	; (800a684 <vHWOutSet+0x110>)
 800a5c8:	2158      	movs	r1, #88	; 0x58
 800a5ca:	fb01 f303 	mul.w	r3, r1, r3
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5de:	79fb      	ldrb	r3, [r7, #7]
 800a5e0:	4a28      	ldr	r2, [pc, #160]	; (800a684 <vHWOutSet+0x110>)
 800a5e2:	2158      	movs	r1, #88	; 0x58
 800a5e4:	fb01 f303 	mul.w	r3, r1, r3
 800a5e8:	4413      	add	r3, r2
 800a5ea:	3314      	adds	r3, #20
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	ee07 3a90 	vmov	s15, r3
 800a5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a5fa:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800a688 <vHWOutSet+0x114>
 800a5fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a60a:	ee17 3a90 	vmov	r3, s15
 800a60e:	613b      	str	r3, [r7, #16]
   	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a610:	2300      	movs	r3, #0
 800a612:	617b      	str	r3, [r7, #20]
   	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a614:	2300      	movs	r3, #0
 800a616:	61fb      	str	r3, [r7, #28]
   	  HAL_TIM_PWM_ConfigChannel(out[out_name].ptim, &sConfigOC, out[out_name].channel);
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	4a1a      	ldr	r2, [pc, #104]	; (800a684 <vHWOutSet+0x110>)
 800a61c:	2158      	movs	r1, #88	; 0x58
 800a61e:	fb01 f303 	mul.w	r3, r1, r3
 800a622:	4413      	add	r3, r2
 800a624:	3304      	adds	r3, #4
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	79fb      	ldrb	r3, [r7, #7]
 800a62a:	4a16      	ldr	r2, [pc, #88]	; (800a684 <vHWOutSet+0x110>)
 800a62c:	2158      	movs	r1, #88	; 0x58
 800a62e:	fb01 f303 	mul.w	r3, r1, r3
 800a632:	4413      	add	r3, r2
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	f107 030c 	add.w	r3, r7, #12
 800a63a:	4619      	mov	r1, r3
 800a63c:	f7fb f982 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>

   }
   HAL_TIM_PWM_Start(out[out_name].ptim,out[out_name].channel);
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	4a10      	ldr	r2, [pc, #64]	; (800a684 <vHWOutSet+0x110>)
 800a644:	2158      	movs	r1, #88	; 0x58
 800a646:	fb01 f303 	mul.w	r3, r1, r3
 800a64a:	4413      	add	r3, r2
 800a64c:	3304      	adds	r3, #4
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	490c      	ldr	r1, [pc, #48]	; (800a684 <vHWOutSet+0x110>)
 800a654:	2058      	movs	r0, #88	; 0x58
 800a656:	fb00 f303 	mul.w	r3, r0, r3
 800a65a:	440b      	add	r3, r1
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7fa fed3 	bl	800540c <HAL_TIM_PWM_Start>
   out_register |= 0x1<< out_name;
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	2201      	movs	r2, #1
 800a66a:	fa02 f303 	lsl.w	r3, r2, r3
 800a66e:	461a      	mov	r2, r3
 800a670:	4b06      	ldr	r3, [pc, #24]	; (800a68c <vHWOutSet+0x118>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4313      	orrs	r3, r2
 800a676:	4a05      	ldr	r2, [pc, #20]	; (800a68c <vHWOutSet+0x118>)
 800a678:	6013      	str	r3, [r2, #0]
}
 800a67a:	bf00      	nop
 800a67c:	3728      	adds	r7, #40	; 0x28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20005c54 	.word	0x20005c54
 800a688:	42c80000 	.word	0x42c80000
 800a68c:	20006374 	.word	0x20006374

0800a690 <vOutInit>:
}



void vOutInit()
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af02      	add	r7, sp, #8
	//Инициализация портов упраления ключами
	HAL_GPIO_WritePin(GPIOG, Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 800a696:	2201      	movs	r2, #1
 800a698:	f641 413e 	movw	r1, #7230	; 0x1c3e
 800a69c:	48ac      	ldr	r0, [pc, #688]	; (800a950 <vOutInit+0x2c0>)
 800a69e:	f7f9 fdfd 	bl	800429c <HAL_GPIO_WritePin>
	                          |Cs_Dis8_17_18_Pin|Cs_Dis8_15_16_Pin|Cs_Dis20_3_Pin|Cs_Dis20_4_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin, GPIO_PIN_SET);
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800a6a8:	48aa      	ldr	r0, [pc, #680]	; (800a954 <vOutInit+0x2c4>)
 800a6aa:	f7f9 fdf7 	bl	800429c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Cs_Dis20_6_GPIO_Port, Cs_Dis20_6_Pin, GPIO_PIN_SET);
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	2180      	movs	r1, #128	; 0x80
 800a6b2:	48a9      	ldr	r0, [pc, #676]	; (800a958 <vOutInit+0x2c8>)
 800a6b4:	f7f9 fdf2 	bl	800429c <HAL_GPIO_WritePin>

	vHWOutInit(OUT_1, &htim4, TIM_CHANNEL_3, 20.0, 1000, 60, 100 );
 800a6b8:	2364      	movs	r3, #100	; 0x64
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800a95c <vOutInit+0x2cc>
 800a6c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a6c4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800a6c8:	2208      	movs	r2, #8
 800a6ca:	49a5      	ldr	r1, [pc, #660]	; (800a960 <vOutInit+0x2d0>)
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	f7ff fd45 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_2, &htim4, TIM_CHANNEL_4, 20.0, 1000, 60, 100 );
 800a6d2:	2364      	movs	r3, #100	; 0x64
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	eddf 0aa1 	vldr	s1, [pc, #644]	; 800a95c <vOutInit+0x2cc>
 800a6da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a6de:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800a6e2:	220c      	movs	r2, #12
 800a6e4:	499e      	ldr	r1, [pc, #632]	; (800a960 <vOutInit+0x2d0>)
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	f7ff fd38 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_3, &htim2, TIM_CHANNEL_1, 20.0, 1000, 60, 100 );
 800a6ec:	2364      	movs	r3, #100	; 0x64
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800a95c <vOutInit+0x2cc>
 800a6f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a6f8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4999      	ldr	r1, [pc, #612]	; (800a964 <vOutInit+0x2d4>)
 800a700:	2002      	movs	r0, #2
 800a702:	f7ff fd2b 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_4, &htim3, TIM_CHANNEL_2, 20.0, 1000, 60, 100 );
 800a706:	2364      	movs	r3, #100	; 0x64
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	eddf 0a94 	vldr	s1, [pc, #592]	; 800a95c <vOutInit+0x2cc>
 800a70e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a712:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800a716:	2204      	movs	r2, #4
 800a718:	4993      	ldr	r1, [pc, #588]	; (800a968 <vOutInit+0x2d8>)
 800a71a:	2003      	movs	r0, #3
 800a71c:	f7ff fd1e 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_5, &htim1, TIM_CHANNEL_3, 20.0, 1000, 60, 100 );
 800a720:	2364      	movs	r3, #100	; 0x64
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	eddf 0a8d 	vldr	s1, [pc, #564]	; 800a95c <vOutInit+0x2cc>
 800a728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a72c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800a730:	2208      	movs	r2, #8
 800a732:	498e      	ldr	r1, [pc, #568]	; (800a96c <vOutInit+0x2dc>)
 800a734:	2004      	movs	r0, #4
 800a736:	f7ff fd11 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_6, &htim1, TIM_CHANNEL_4, 20.0, 1000, 60, 100 );
 800a73a:	2364      	movs	r3, #100	; 0x64
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	eddf 0a87 	vldr	s1, [pc, #540]	; 800a95c <vOutInit+0x2cc>
 800a742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a746:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800a74a:	220c      	movs	r2, #12
 800a74c:	4987      	ldr	r1, [pc, #540]	; (800a96c <vOutInit+0x2dc>)
 800a74e:	2005      	movs	r0, #5
 800a750:	f7ff fd04 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_7, &htim12, TIM_CHANNEL_1,20.0, 1000, 60, 100 );
 800a754:	2364      	movs	r3, #100	; 0x64
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	eddf 0a80 	vldr	s1, [pc, #512]	; 800a95c <vOutInit+0x2cc>
 800a75c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a760:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800a764:	2200      	movs	r2, #0
 800a766:	4982      	ldr	r1, [pc, #520]	; (800a970 <vOutInit+0x2e0>)
 800a768:	2006      	movs	r0, #6
 800a76a:	f7ff fcf7 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_8, &htim4, TIM_CHANNEL_2, 20.0, 1000, 60, 100 );
 800a76e:	2364      	movs	r3, #100	; 0x64
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800a95c <vOutInit+0x2cc>
 800a776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a77a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800a77e:	2204      	movs	r2, #4
 800a780:	4977      	ldr	r1, [pc, #476]	; (800a960 <vOutInit+0x2d0>)
 800a782:	2007      	movs	r0, #7
 800a784:	f7ff fcea 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_9, &htim1, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800a788:	2364      	movs	r3, #100	; 0x64
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a790:	2300      	movs	r3, #0
 800a792:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a796:	2200      	movs	r2, #0
 800a798:	4974      	ldr	r1, [pc, #464]	; (800a96c <vOutInit+0x2dc>)
 800a79a:	2008      	movs	r0, #8
 800a79c:	f7ff fcde 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_10, &htim1, TIM_CHANNEL_2,8.0, 0, 8.0, 100 );
 800a7a0:	2364      	movs	r3, #100	; 0x64
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a7ae:	2204      	movs	r2, #4
 800a7b0:	496e      	ldr	r1, [pc, #440]	; (800a96c <vOutInit+0x2dc>)
 800a7b2:	2009      	movs	r0, #9
 800a7b4:	f7ff fcd2 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_11, &htim2, TIM_CHANNEL_4, 8.0, 0, 8.0, 100 );
 800a7b8:	2364      	movs	r3, #100	; 0x64
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a7c6:	220c      	movs	r2, #12
 800a7c8:	4966      	ldr	r1, [pc, #408]	; (800a964 <vOutInit+0x2d4>)
 800a7ca:	200a      	movs	r0, #10
 800a7cc:	f7ff fcc6 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_12, &htim2, TIM_CHANNEL_3, 8.0, 0, 8.0, 100 );
 800a7d0:	2364      	movs	r3, #100	; 0x64
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a7d8:	2300      	movs	r3, #0
 800a7da:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a7de:	2208      	movs	r2, #8
 800a7e0:	4960      	ldr	r1, [pc, #384]	; (800a964 <vOutInit+0x2d4>)
 800a7e2:	200b      	movs	r0, #11
 800a7e4:	f7ff fcba 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_13, &htim8, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800a7e8:	2364      	movs	r3, #100	; 0x64
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	495e      	ldr	r1, [pc, #376]	; (800a974 <vOutInit+0x2e4>)
 800a7fa:	200c      	movs	r0, #12
 800a7fc:	f7ff fcae 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_14, &htim8, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 800a800:	2364      	movs	r3, #100	; 0x64
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a808:	2300      	movs	r3, #0
 800a80a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a80e:	2204      	movs	r2, #4
 800a810:	4958      	ldr	r1, [pc, #352]	; (800a974 <vOutInit+0x2e4>)
 800a812:	200d      	movs	r0, #13
 800a814:	f7ff fca2 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_15, &htim3, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800a818:	2364      	movs	r3, #100	; 0x64
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a820:	2300      	movs	r3, #0
 800a822:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a826:	2200      	movs	r2, #0
 800a828:	494f      	ldr	r1, [pc, #316]	; (800a968 <vOutInit+0x2d8>)
 800a82a:	200e      	movs	r0, #14
 800a82c:	f7ff fc96 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_16, &htim2, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 800a830:	2364      	movs	r3, #100	; 0x64
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a838:	2300      	movs	r3, #0
 800a83a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a83e:	2204      	movs	r2, #4
 800a840:	4948      	ldr	r1, [pc, #288]	; (800a964 <vOutInit+0x2d4>)
 800a842:	200f      	movs	r0, #15
 800a844:	f7ff fc8a 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_17, &htim8, TIM_CHANNEL_3, 8.0, 0, 8.0, 100 );
 800a848:	2364      	movs	r3, #100	; 0x64
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a850:	2300      	movs	r3, #0
 800a852:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a856:	2208      	movs	r2, #8
 800a858:	4946      	ldr	r1, [pc, #280]	; (800a974 <vOutInit+0x2e4>)
 800a85a:	2010      	movs	r0, #16
 800a85c:	f7ff fc7e 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_18,  &htim8, TIM_CHANNEL_4, 8.0, 0, 8.0, 100 );
 800a860:	2364      	movs	r3, #100	; 0x64
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a868:	2300      	movs	r3, #0
 800a86a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a86e:	220c      	movs	r2, #12
 800a870:	4940      	ldr	r1, [pc, #256]	; (800a974 <vOutInit+0x2e4>)
 800a872:	2011      	movs	r0, #17
 800a874:	f7ff fc72 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_19, &htim12, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 800a878:	2364      	movs	r3, #100	; 0x64
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a880:	2300      	movs	r3, #0
 800a882:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a886:	2204      	movs	r2, #4
 800a888:	4939      	ldr	r1, [pc, #228]	; (800a970 <vOutInit+0x2e0>)
 800a88a:	2012      	movs	r0, #18
 800a88c:	f7ff fc66 	bl	800a15c <vHWOutInit>
	vHWOutInit(OUT_20, &htim4, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800a890:	2364      	movs	r3, #100	; 0x64
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800a898:	2300      	movs	r3, #0
 800a89a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800a89e:	2200      	movs	r2, #0
 800a8a0:	492f      	ldr	r1, [pc, #188]	; (800a960 <vOutInit+0x2d0>)
 800a8a2:	2013      	movs	r0, #19
 800a8a4:	f7ff fc5a 	bl	800a15c <vHWOutInit>
	vHWOutSet(OUT_1,100);
 800a8a8:	2164      	movs	r1, #100	; 0x64
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	f7ff fe62 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_2,100);
 800a8b0:	2164      	movs	r1, #100	; 0x64
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	f7ff fe5e 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_3,100);
 800a8b8:	2164      	movs	r1, #100	; 0x64
 800a8ba:	2002      	movs	r0, #2
 800a8bc:	f7ff fe5a 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_4,100);
 800a8c0:	2164      	movs	r1, #100	; 0x64
 800a8c2:	2003      	movs	r0, #3
 800a8c4:	f7ff fe56 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_5,100);
 800a8c8:	2164      	movs	r1, #100	; 0x64
 800a8ca:	2004      	movs	r0, #4
 800a8cc:	f7ff fe52 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_6,100);
 800a8d0:	2164      	movs	r1, #100	; 0x64
 800a8d2:	2005      	movs	r0, #5
 800a8d4:	f7ff fe4e 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_7,100);
 800a8d8:	2164      	movs	r1, #100	; 0x64
 800a8da:	2006      	movs	r0, #6
 800a8dc:	f7ff fe4a 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_8,100);
 800a8e0:	2164      	movs	r1, #100	; 0x64
 800a8e2:	2007      	movs	r0, #7
 800a8e4:	f7ff fe46 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_9,100);
 800a8e8:	2164      	movs	r1, #100	; 0x64
 800a8ea:	2008      	movs	r0, #8
 800a8ec:	f7ff fe42 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_10,100);
 800a8f0:	2164      	movs	r1, #100	; 0x64
 800a8f2:	2009      	movs	r0, #9
 800a8f4:	f7ff fe3e 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_11,100);
 800a8f8:	2164      	movs	r1, #100	; 0x64
 800a8fa:	200a      	movs	r0, #10
 800a8fc:	f7ff fe3a 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_12,00);
 800a900:	2100      	movs	r1, #0
 800a902:	200b      	movs	r0, #11
 800a904:	f7ff fe36 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_13,100);
 800a908:	2164      	movs	r1, #100	; 0x64
 800a90a:	200c      	movs	r0, #12
 800a90c:	f7ff fe32 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_14,100);
 800a910:	2164      	movs	r1, #100	; 0x64
 800a912:	200d      	movs	r0, #13
 800a914:	f7ff fe2e 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_15,100);
 800a918:	2164      	movs	r1, #100	; 0x64
 800a91a:	200e      	movs	r0, #14
 800a91c:	f7ff fe2a 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_16,100);
 800a920:	2164      	movs	r1, #100	; 0x64
 800a922:	200f      	movs	r0, #15
 800a924:	f7ff fe26 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_17,100);
 800a928:	2164      	movs	r1, #100	; 0x64
 800a92a:	2010      	movs	r0, #16
 800a92c:	f7ff fe22 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_18,100);
 800a930:	2164      	movs	r1, #100	; 0x64
 800a932:	2011      	movs	r0, #17
 800a934:	f7ff fe1e 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_19,100);
 800a938:	2164      	movs	r1, #100	; 0x64
 800a93a:	2012      	movs	r0, #18
 800a93c:	f7ff fe1a 	bl	800a574 <vHWOutSet>
	vHWOutSet(OUT_20,100);
 800a940:	2164      	movs	r1, #100	; 0x64
 800a942:	2013      	movs	r0, #19
 800a944:	f7ff fe16 	bl	800a574 <vHWOutSet>

}
 800a948:	bf00      	nop
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	40021800 	.word	0x40021800
 800a954:	40020c00 	.word	0x40020c00
 800a958:	40021000 	.word	0x40021000
 800a95c:	42700000 	.word	0x42700000
 800a960:	2000056c 	.word	0x2000056c
 800a964:	200004dc 	.word	0x200004dc
 800a968:	20000524 	.word	0x20000524
 800a96c:	20000494 	.word	0x20000494
 800a970:	20000644 	.word	0x20000644
 800a974:	200005b4 	.word	0x200005b4

0800a978 <vADCTask>:
 // vADCConfigInit();
  return;
}

void vADCTask(void * argument)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af02      	add	r7, sp, #8
 800a97e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vADCTask */
  xADCEvent = xEventGroupCreateStatic(&xADCCreatedEventGroup );
 800a980:	4815      	ldr	r0, [pc, #84]	; (800a9d8 <vADCTask+0x60>)
 800a982:	f7fc fcb7 	bl	80072f4 <xEventGroupCreateStatic>
 800a986:	4603      	mov	r3, r0
 800a988:	4a14      	ldr	r2, [pc, #80]	; (800a9dc <vADCTask+0x64>)
 800a98a:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_DMA( &hadc1,( uint32_t* )&ADC1_IN_Buffer, ( ADC_FRAME_SIZE * ADC1_CHANNELS ));
 800a98c:	2218      	movs	r2, #24
 800a98e:	4914      	ldr	r1, [pc, #80]	; (800a9e0 <vADCTask+0x68>)
 800a990:	4814      	ldr	r0, [pc, #80]	; (800a9e4 <vADCTask+0x6c>)
 800a992:	f7f8 f901 	bl	8002b98 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( &hadc2,( uint32_t* )&ADC2_IN_Buffer, ( ADC_FRAME_SIZE * ADC2_CHANNELS ));
 800a996:	2215      	movs	r2, #21
 800a998:	4913      	ldr	r1, [pc, #76]	; (800a9e8 <vADCTask+0x70>)
 800a99a:	4814      	ldr	r0, [pc, #80]	; (800a9ec <vADCTask+0x74>)
 800a99c:	f7f8 f8fc 	bl	8002b98 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( &hadc3,( uint32_t* )&ADC3_IN_Buffer, ( ADC_FRAME_SIZE * ADC3_CHANNELS ));
 800a9a0:	221b      	movs	r2, #27
 800a9a2:	4913      	ldr	r1, [pc, #76]	; (800a9f0 <vADCTask+0x78>)
 800a9a4:	4813      	ldr	r0, [pc, #76]	; (800a9f4 <vADCTask+0x7c>)
 800a9a6:	f7f8 f8f7 	bl	8002b98 <HAL_ADC_Start_DMA>
	xEventGroupWaitBits( xADCEvent, ( ADC3_READY | ADC2_READY | ADC1_READY ), pdTRUE, pdTRUE, portMAX_DELAY );
 800a9aa:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <vADCTask+0x64>)
 800a9ac:	6818      	ldr	r0, [r3, #0]
 800a9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	2107      	movs	r1, #7
 800a9ba:	f7fc fcd3 	bl	8007364 <xEventGroupWaitBits>
	HAL_ADC_Stop_DMA(&hadc1);
 800a9be:	4809      	ldr	r0, [pc, #36]	; (800a9e4 <vADCTask+0x6c>)
 800a9c0:	f7f8 f9fa 	bl	8002db8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800a9c4:	4809      	ldr	r0, [pc, #36]	; (800a9ec <vADCTask+0x74>)
 800a9c6:	f7f8 f9f7 	bl	8002db8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800a9ca:	480a      	ldr	r0, [pc, #40]	; (800a9f4 <vADCTask+0x7c>)
 800a9cc:	f7f8 f9f4 	bl	8002db8 <HAL_ADC_Stop_DMA>
	vDataConvertToFloat();
 800a9d0:	f000 f856 	bl	800aa80 <vDataConvertToFloat>
	HAL_ADC_Start_DMA( &hadc1,( uint32_t* )&ADC1_IN_Buffer, ( ADC_FRAME_SIZE * ADC1_CHANNELS ));
 800a9d4:	e7da      	b.n	800a98c <vADCTask+0x14>
 800a9d6:	bf00      	nop
 800a9d8:	2000637c 	.word	0x2000637c
 800a9dc:	20006378 	.word	0x20006378
 800a9e0:	20005bc0 	.word	0x20005bc0
 800a9e4:	20000220 	.word	0x20000220
 800a9e8:	20005bf0 	.word	0x20005bf0
 800a9ec:	20000268 	.word	0x20000268
 800a9f0:	20005c1c 	.word	0x20005c1c
 800a9f4:	200002b0 	.word	0x200002b0

0800a9f8 <vGetAverDataFromRAW>:
/*
 * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
 * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
 */
void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint16_t InIndex, uint16_t OutIndex, uint8_t Size,uint16_t FrameSize, uint16_t BufferSize)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	4611      	mov	r1, r2
 800aa04:	461a      	mov	r2, r3
 800aa06:	460b      	mov	r3, r1
 800aa08:	80fb      	strh	r3, [r7, #6]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	80bb      	strh	r3, [r7, #4]
	uint32_t temp;
	for (uint8_t i=0;i<Size;i++)
 800aa0e:	2300      	movs	r3, #0
 800aa10:	74fb      	strb	r3, [r7, #19]
 800aa12:	e029      	b.n	800aa68 <vGetAverDataFromRAW+0x70>
	{
		for (uint8_t j=0;j<FrameSize;j++)
 800aa14:	2300      	movs	r3, #0
 800aa16:	74bb      	strb	r3, [r7, #18]
 800aa18:	e012      	b.n	800aa40 <vGetAverDataFromRAW+0x48>
		{
		  temp = temp + InData[InIndex+i+j*BufferSize];
 800aa1a:	88fa      	ldrh	r2, [r7, #6]
 800aa1c:	7cfb      	ldrb	r3, [r7, #19]
 800aa1e:	441a      	add	r2, r3
 800aa20:	7cbb      	ldrb	r3, [r7, #18]
 800aa22:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800aa24:	fb01 f303 	mul.w	r3, r1, r3
 800aa28:	4413      	add	r3, r2
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	4413      	add	r3, r2
 800aa38:	617b      	str	r3, [r7, #20]
		for (uint8_t j=0;j<FrameSize;j++)
 800aa3a:	7cbb      	ldrb	r3, [r7, #18]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	74bb      	strb	r3, [r7, #18]
 800aa40:	7cbb      	ldrb	r3, [r7, #18]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d8e7      	bhi.n	800aa1a <vGetAverDataFromRAW+0x22>
		}
		OutData[OutIndex+i] = temp / FrameSize;
 800aa4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa52:	88ba      	ldrh	r2, [r7, #4]
 800aa54:	7cfb      	ldrb	r3, [r7, #19]
 800aa56:	4413      	add	r3, r2
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	b28a      	uxth	r2, r1
 800aa60:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0;i<Size;i++)
 800aa62:	7cfb      	ldrb	r3, [r7, #19]
 800aa64:	3301      	adds	r3, #1
 800aa66:	74fb      	strb	r3, [r7, #19]
 800aa68:	7cfa      	ldrb	r2, [r7, #19]
 800aa6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d3d0      	bcc.n	800aa14 <vGetAverDataFromRAW+0x1c>
	}
}
 800aa72:	bf00      	nop
 800aa74:	bf00      	nop
 800aa76:	371c      	adds	r7, #28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <vDataConvertToFloat>:

/*
 *  Функция усредняет данные из буфеера АЦП, и пробразует их значения
 */
void vDataConvertToFloat( void)
{
 800aa80:	b590      	push	{r4, r7, lr}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af04      	add	r7, sp, #16
	uint8_t i;
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 7-8
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawCurData, 0U, 6U, 2U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800aa86:	2308      	movs	r3, #8
 800aa88:	9302      	str	r3, [sp, #8]
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	2302      	movs	r3, #2
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	2306      	movs	r3, #6
 800aa94:	2200      	movs	r2, #0
 800aa96:	4998      	ldr	r1, [pc, #608]	; (800acf8 <vDataConvertToFloat+0x278>)
 800aa98:	4898      	ldr	r0, [pc, #608]	; (800acfc <vDataConvertToFloat+0x27c>)
 800aa9a:	f7ff ffad 	bl	800a9f8 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 19-20
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawCurData, 2U, 18U, 2U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800aa9e:	2308      	movs	r3, #8
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	2312      	movs	r3, #18
 800aaac:	2202      	movs	r2, #2
 800aaae:	4992      	ldr	r1, [pc, #584]	; (800acf8 <vDataConvertToFloat+0x278>)
 800aab0:	4892      	ldr	r0, [pc, #584]	; (800acfc <vDataConvertToFloat+0x27c>)
 800aab2:	f7ff ffa1 	bl	800a9f8 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов AIN
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawVData, 4U, 0U, 4U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800aab6:	2308      	movs	r3, #8
 800aab8:	9302      	str	r3, [sp, #8]
 800aaba:	2303      	movs	r3, #3
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	2304      	movs	r3, #4
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	2300      	movs	r3, #0
 800aac4:	2204      	movs	r2, #4
 800aac6:	498e      	ldr	r1, [pc, #568]	; (800ad00 <vDataConvertToFloat+0x280>)
 800aac8:	488c      	ldr	r0, [pc, #560]	; (800acfc <vDataConvertToFloat+0x27c>)
 800aaca:	f7ff ff95 	bl	800a9f8 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 2 данныех каналов каналов тока 4-6
	 vGetAverDataFromRAW((uint16_t *)&ADC2_IN_Buffer, (uint16_t *)&muRawCurData,0U, 3U, 3U ,ADC_FRAME_SIZE,ADC2_CHANNELS);
 800aace:	2307      	movs	r3, #7
 800aad0:	9302      	str	r3, [sp, #8]
 800aad2:	2303      	movs	r3, #3
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	2303      	movs	r3, #3
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	2303      	movs	r3, #3
 800aadc:	2200      	movs	r2, #0
 800aade:	4986      	ldr	r1, [pc, #536]	; (800acf8 <vDataConvertToFloat+0x278>)
 800aae0:	4888      	ldr	r0, [pc, #544]	; (800ad04 <vDataConvertToFloat+0x284>)
 800aae2:	f7ff ff89 	bl	800a9f8 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 2 данныех каналов каналов тока 9-12
	 vGetAverDataFromRAW((uint16_t *)&ADC2_IN_Buffer, (uint16_t *)&muRawCurData, 3U, 8U, 4U ,ADC_FRAME_SIZE,ADC2_CHANNELS);
 800aae6:	2307      	movs	r3, #7
 800aae8:	9302      	str	r3, [sp, #8]
 800aaea:	2303      	movs	r3, #3
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	2304      	movs	r3, #4
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	2308      	movs	r3, #8
 800aaf4:	2203      	movs	r2, #3
 800aaf6:	4980      	ldr	r1, [pc, #512]	; (800acf8 <vDataConvertToFloat+0x278>)
 800aaf8:	4882      	ldr	r0, [pc, #520]	; (800ad04 <vDataConvertToFloat+0x284>)
 800aafa:	f7ff ff7d 	bl	800a9f8 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 1-3
	 vGetAverDataFromRAW((uint16_t *)&ADC3_IN_Buffer, (uint16_t *)&muRawCurData, 0U, 0U, 3U ,ADC_FRAME_SIZE,ADC3_CHANNELS);
 800aafe:	2309      	movs	r3, #9
 800ab00:	9302      	str	r3, [sp, #8]
 800ab02:	2303      	movs	r3, #3
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	2303      	movs	r3, #3
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	497a      	ldr	r1, [pc, #488]	; (800acf8 <vDataConvertToFloat+0x278>)
 800ab10:	487d      	ldr	r0, [pc, #500]	; (800ad08 <vDataConvertToFloat+0x288>)
 800ab12:	f7ff ff71 	bl	800a9f8 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 13-18
	 vGetAverDataFromRAW((uint16_t *)&ADC3_IN_Buffer, (uint16_t *)&muRawCurData, 3U, 12U, 5U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800ab16:	2308      	movs	r3, #8
 800ab18:	9302      	str	r3, [sp, #8]
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	2305      	movs	r3, #5
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	230c      	movs	r3, #12
 800ab24:	2203      	movs	r2, #3
 800ab26:	4974      	ldr	r1, [pc, #464]	; (800acf8 <vDataConvertToFloat+0x278>)
 800ab28:	4877      	ldr	r0, [pc, #476]	; (800ad08 <vDataConvertToFloat+0x288>)
 800ab2a:	f7ff ff65 	bl	800a9f8 <vGetAverDataFromRAW>
	 //Преобразование во флоат данных AIN
	 for ( i = 0; i < 4U; i++ )
 800ab2e:	2300      	movs	r3, #0
 800ab30:	71fb      	strb	r3, [r7, #7]
 800ab32:	e024      	b.n	800ab7e <vDataConvertToFloat+0xfe>
	 {
		 mfVData[ i ] = muRawVData[ i ] * COOF;
 800ab34:	79fb      	ldrb	r3, [r7, #7]
 800ab36:	4a72      	ldr	r2, [pc, #456]	; (800ad00 <vDataConvertToFloat+0x280>)
 800ab38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4b73      	ldr	r3, [pc, #460]	; (800ad0c <vDataConvertToFloat+0x28c>)
 800ab40:	fb02 f303 	mul.w	r3, r2, r3
 800ab44:	4a72      	ldr	r2, [pc, #456]	; (800ad10 <vDataConvertToFloat+0x290>)
 800ab46:	fb82 1203 	smull	r1, r2, r2, r3
 800ab4a:	1412      	asrs	r2, r2, #16
 800ab4c:	17db      	asrs	r3, r3, #31
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7f5 fc8f 	bl	8000474 <__aeabi_i2d>
 800ab56:	a366      	add	r3, pc, #408	; (adr r3, 800acf0 <vDataConvertToFloat+0x270>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f7f5 fcf4 	bl	8000548 <__aeabi_dmul>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	79fc      	ldrb	r4, [r7, #7]
 800ab66:	4610      	mov	r0, r2
 800ab68:	4619      	mov	r1, r3
 800ab6a:	f7f5 feff 	bl	800096c <__aeabi_d2f>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	4968      	ldr	r1, [pc, #416]	; (800ad14 <vDataConvertToFloat+0x294>)
 800ab72:	00a3      	lsls	r3, r4, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	601a      	str	r2, [r3, #0]
	 for ( i = 0; i < 4U; i++ )
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	71fb      	strb	r3, [r7, #7]
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d9d7      	bls.n	800ab34 <vDataConvertToFloat+0xb4>
	 }
	 //Преобразвоание во float данных тока каналов 1-20
	 for ( i =0; i < 20U ; i++)
 800ab84:	2300      	movs	r3, #0
 800ab86:	71fb      	strb	r3, [r7, #7]
 800ab88:	e0a8      	b.n	800acdc <vDataConvertToFloat+0x25c>
	{
		 if  (muRawCurData[ i ] == 0xFFF)
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	4a5a      	ldr	r2, [pc, #360]	; (800acf8 <vDataConvertToFloat+0x278>)
 800ab8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab92:	f640 72ff 	movw	r2, #4095	; 0xfff
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d109      	bne.n	800abae <vDataConvertToFloat+0x12e>
		 {
			 out[i].error_flag  = ERROR_ON;
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	4a5e      	ldr	r2, [pc, #376]	; (800ad18 <vDataConvertToFloat+0x298>)
 800ab9e:	2158      	movs	r1, #88	; 0x58
 800aba0:	fb01 f303 	mul.w	r3, r1, r3
 800aba4:	4413      	add	r3, r2
 800aba6:	3320      	adds	r3, #32
 800aba8:	2201      	movs	r2, #1
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	e093      	b.n	800acd6 <vDataConvertToFloat+0x256>
		 }
		 else
		 {
			 out[i].error_flag  = ERROR_OFF;
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	4a59      	ldr	r2, [pc, #356]	; (800ad18 <vDataConvertToFloat+0x298>)
 800abb2:	2158      	movs	r1, #88	; 0x58
 800abb4:	fb01 f303 	mul.w	r3, r1, r3
 800abb8:	4413      	add	r3, r2
 800abba:	3320      	adds	r3, #32
 800abbc:	2200      	movs	r2, #0
 800abbe:	701a      	strb	r2, [r3, #0]
			 for (uint8_t r = 0; r < 4U; r++)
 800abc0:	2300      	movs	r3, #0
 800abc2:	71bb      	strb	r3, [r7, #6]
 800abc4:	e083      	b.n	800acce <vDataConvertToFloat+0x24e>
			 {
				 if ( muRawCurData[ i ] < out[i].CSC[r].data )
 800abc6:	79fb      	ldrb	r3, [r7, #7]
 800abc8:	4a4b      	ldr	r2, [pc, #300]	; (800acf8 <vDataConvertToFloat+0x278>)
 800abca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800abce:	79f8      	ldrb	r0, [r7, #7]
 800abd0:	79ba      	ldrb	r2, [r7, #6]
 800abd2:	4c51      	ldr	r4, [pc, #324]	; (800ad18 <vDataConvertToFloat+0x298>)
 800abd4:	4613      	mov	r3, r2
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	2258      	movs	r2, #88	; 0x58
 800abde:	fb00 f202 	mul.w	r2, r0, r2
 800abe2:	4413      	add	r3, r2
 800abe4:	4423      	add	r3, r4
 800abe6:	3324      	adds	r3, #36	; 0x24
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	4299      	cmp	r1, r3
 800abec:	d26c      	bcs.n	800acc8 <vDataConvertToFloat+0x248>
				 {
					 out[i].current = ( (float) muRawCurData [ i ] * out[i].CSC[r].k  + out[i].CSC[r].b ) *K /RR;
 800abee:	79fb      	ldrb	r3, [r7, #7]
 800abf0:	4a41      	ldr	r2, [pc, #260]	; (800acf8 <vDataConvertToFloat+0x278>)
 800abf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800abfe:	79f9      	ldrb	r1, [r7, #7]
 800ac00:	79ba      	ldrb	r2, [r7, #6]
 800ac02:	4845      	ldr	r0, [pc, #276]	; (800ad18 <vDataConvertToFloat+0x298>)
 800ac04:	4613      	mov	r3, r2
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	4413      	add	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	2258      	movs	r2, #88	; 0x58
 800ac0e:	fb01 f202 	mul.w	r2, r1, r2
 800ac12:	4413      	add	r3, r2
 800ac14:	4403      	add	r3, r0
 800ac16:	3328      	adds	r3, #40	; 0x28
 800ac18:	edd3 7a00 	vldr	s15, [r3]
 800ac1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac20:	79f9      	ldrb	r1, [r7, #7]
 800ac22:	79ba      	ldrb	r2, [r7, #6]
 800ac24:	483c      	ldr	r0, [pc, #240]	; (800ad18 <vDataConvertToFloat+0x298>)
 800ac26:	4613      	mov	r3, r2
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	2258      	movs	r2, #88	; 0x58
 800ac30:	fb01 f202 	mul.w	r2, r1, r2
 800ac34:	4413      	add	r3, r2
 800ac36:	4403      	add	r3, r0
 800ac38:	332c      	adds	r3, #44	; 0x2c
 800ac3a:	edd3 7a00 	vldr	s15, [r3]
 800ac3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac42:	ee17 0a90 	vmov	r0, s15
 800ac46:	f7f5 fc27 	bl	8000498 <__aeabi_f2d>
 800ac4a:	a329      	add	r3, pc, #164	; (adr r3, 800acf0 <vDataConvertToFloat+0x270>)
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	f7f5 fc7a 	bl	8000548 <__aeabi_dmul>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4610      	mov	r0, r2
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	4b2e      	ldr	r3, [pc, #184]	; (800ad1c <vDataConvertToFloat+0x29c>)
 800ac62:	f7f5 fd9b 	bl	800079c <__aeabi_ddiv>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	79fc      	ldrb	r4, [r7, #7]
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4619      	mov	r1, r3
 800ac70:	f7f5 fe7c 	bl	800096c <__aeabi_d2f>
 800ac74:	4602      	mov	r2, r0
 800ac76:	4928      	ldr	r1, [pc, #160]	; (800ad18 <vDataConvertToFloat+0x298>)
 800ac78:	2358      	movs	r3, #88	; 0x58
 800ac7a:	fb04 f303 	mul.w	r3, r4, r3
 800ac7e:	440b      	add	r3, r1
 800ac80:	3354      	adds	r3, #84	; 0x54
 800ac82:	601a      	str	r2, [r3, #0]
					 if (out[i].current > out[i].power )
 800ac84:	79fb      	ldrb	r3, [r7, #7]
 800ac86:	4a24      	ldr	r2, [pc, #144]	; (800ad18 <vDataConvertToFloat+0x298>)
 800ac88:	2158      	movs	r1, #88	; 0x58
 800ac8a:	fb01 f303 	mul.w	r3, r1, r3
 800ac8e:	4413      	add	r3, r2
 800ac90:	3354      	adds	r3, #84	; 0x54
 800ac92:	ed93 7a00 	vldr	s14, [r3]
 800ac96:	79fb      	ldrb	r3, [r7, #7]
 800ac98:	4a1f      	ldr	r2, [pc, #124]	; (800ad18 <vDataConvertToFloat+0x298>)
 800ac9a:	2158      	movs	r1, #88	; 0x58
 800ac9c:	fb01 f303 	mul.w	r3, r1, r3
 800aca0:	4413      	add	r3, r2
 800aca2:	330c      	adds	r3, #12
 800aca4:	edd3 7a00 	vldr	s15, [r3]
 800aca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb0:	dc00      	bgt.n	800acb4 <vDataConvertToFloat+0x234>
					 {
						 out[i].error_flag = ERROR_OVERLOAD;
					 }
					 break;
 800acb2:	e010      	b.n	800acd6 <vDataConvertToFloat+0x256>
						 out[i].error_flag = ERROR_OVERLOAD;
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	4a18      	ldr	r2, [pc, #96]	; (800ad18 <vDataConvertToFloat+0x298>)
 800acb8:	2158      	movs	r1, #88	; 0x58
 800acba:	fb01 f303 	mul.w	r3, r1, r3
 800acbe:	4413      	add	r3, r2
 800acc0:	3320      	adds	r3, #32
 800acc2:	2202      	movs	r2, #2
 800acc4:	701a      	strb	r2, [r3, #0]
					 break;
 800acc6:	e006      	b.n	800acd6 <vDataConvertToFloat+0x256>
			 for (uint8_t r = 0; r < 4U; r++)
 800acc8:	79bb      	ldrb	r3, [r7, #6]
 800acca:	3301      	adds	r3, #1
 800accc:	71bb      	strb	r3, [r7, #6]
 800acce:	79bb      	ldrb	r3, [r7, #6]
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	f67f af78 	bls.w	800abc6 <vDataConvertToFloat+0x146>
	 for ( i =0; i < 20U ; i++)
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	3301      	adds	r3, #1
 800acda:	71fb      	strb	r3, [r7, #7]
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	2b13      	cmp	r3, #19
 800ace0:	f67f af53 	bls.w	800ab8a <vDataConvertToFloat+0x10a>
				 }
			 }
		 }
	}
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	bd90      	pop	{r4, r7, pc}
 800acee:	bf00      	nop
 800acf0:	e734d9b4 	.word	0xe734d9b4
 800acf4:	3f4a680c 	.word	0x3f4a680c
 800acf8:	20006334 	.word	0x20006334
 800acfc:	20005bc0 	.word	0x20005bc0
 800ad00:	2000635c 	.word	0x2000635c
 800ad04:	20005bf0 	.word	0x20005bf0
 800ad08:	20005c1c 	.word	0x20005c1c
 800ad0c:	000222e0 	.word	0x000222e0
 800ad10:	6fd91d85 	.word	0x6fd91d85
 800ad14:	20006364 	.word	0x20006364
 800ad18:	20005c54 	.word	0x20005c54
 800ad1c:	408f4000 	.word	0x408f4000

0800ad20 <vOutContolTask>:


void vOutContolTask(void * argument)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
	uint8_t temp_power,cur_power;
	xOutEvent = xEventGroupCreateStatic(&xOutCreatedEventGroup );
 800ad28:	48ac      	ldr	r0, [pc, #688]	; (800afdc <vOutContolTask+0x2bc>)
 800ad2a:	f7fc fae3 	bl	80072f4 <xEventGroupCreateStatic>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	4aab      	ldr	r2, [pc, #684]	; (800afe0 <vOutContolTask+0x2c0>)
 800ad32:	6013      	str	r3, [r2, #0]
	EventBits_t config_state;
	vOutInit();
 800ad34:	f7ff fcac 	bl	800a690 <vOutInit>
	for(;;)
	{
		   vTaskDelay(1);
 800ad38:	2001      	movs	r0, #1
 800ad3a:	f7fd fc3f 	bl	80085bc <vTaskDelay>
		   config_state = xEventGroupGetBits (xOutEvent); //Получаем состоние конфигурационных флагов
 800ad3e:	4ba8      	ldr	r3, [pc, #672]	; (800afe0 <vOutContolTask+0x2c0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2100      	movs	r1, #0
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fc fbdb 	bl	8007500 <xEventGroupClearBits>
 800ad4a:	6138      	str	r0, [r7, #16]
			for (uint8_t i=0; i<OUT_COUNT;i++)
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	75bb      	strb	r3, [r7, #22]
 800ad50:	e19e      	b.n	800b090 <vOutContolTask+0x370>
			{
				if ( (config_state & ((uint32_t)0x1< i)) ==0 ) //Если канал не находится в режиме конфигурации, то переходим к обработке
 800ad52:	7dbb      	ldrb	r3, [r7, #22]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	bf8c      	ite	hi
 800ad58:	2301      	movhi	r3, #1
 800ad5a:	2300      	movls	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	461a      	mov	r2, r3
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	4013      	ands	r3, r2
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f040 8189 	bne.w	800b07c <vOutContolTask+0x35c>
				{
					switch (out[i].out_state)
 800ad6a:	7dbb      	ldrb	r3, [r7, #22]
 800ad6c:	4a9d      	ldr	r2, [pc, #628]	; (800afe4 <vOutContolTask+0x2c4>)
 800ad6e:	2158      	movs	r1, #88	; 0x58
 800ad70:	fb01 f303 	mul.w	r3, r1, r3
 800ad74:	4413      	add	r3, r2
 800ad76:	3309      	adds	r3, #9
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b10      	cmp	r3, #16
 800ad7c:	f200 8185 	bhi.w	800b08a <vOutContolTask+0x36a>
 800ad80:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <vOutContolTask+0x68>)
 800ad82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad86:	bf00      	nop
 800ad88:	0800adcd 	.word	0x0800adcd
 800ad8c:	0800ae0d 	.word	0x0800ae0d
 800ad90:	0800af19 	.word	0x0800af19
 800ad94:	0800b08b 	.word	0x0800b08b
 800ad98:	0800b08b 	.word	0x0800b08b
 800ad9c:	0800b08b 	.word	0x0800b08b
 800ada0:	0800b08b 	.word	0x0800b08b
 800ada4:	0800b08b 	.word	0x0800b08b
 800ada8:	0800af8f 	.word	0x0800af8f
 800adac:	0800b08b 	.word	0x0800b08b
 800adb0:	0800b08b 	.word	0x0800b08b
 800adb4:	0800b08b 	.word	0x0800b08b
 800adb8:	0800b08b 	.word	0x0800b08b
 800adbc:	0800b08b 	.word	0x0800b08b
 800adc0:	0800b08b 	.word	0x0800b08b
 800adc4:	0800b08b 	.word	0x0800b08b
 800adc8:	0800afe9 	.word	0x0800afe9
					{
					case STATE_OUT_OFF: //Состония входа - выключен
							if (out[i].out_logic_state == OUT_ON)  //Если обнаружено логическое соостония -вкл, то переходим в состония включения
 800adcc:	7dbb      	ldrb	r3, [r7, #22]
 800adce:	4a85      	ldr	r2, [pc, #532]	; (800afe4 <vOutContolTask+0x2c4>)
 800add0:	2158      	movs	r1, #88	; 0x58
 800add2:	fb01 f303 	mul.w	r3, r1, r3
 800add6:	4413      	add	r3, r2
 800add8:	3308      	adds	r3, #8
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	f040 814f 	bne.w	800b080 <vOutContolTask+0x360>
							{
								out[i].out_state = STATE_OUT_ON_PROCESS;
 800ade2:	7dbb      	ldrb	r3, [r7, #22]
 800ade4:	4a7f      	ldr	r2, [pc, #508]	; (800afe4 <vOutContolTask+0x2c4>)
 800ade6:	2158      	movs	r1, #88	; 0x58
 800ade8:	fb01 f303 	mul.w	r3, r1, r3
 800adec:	4413      	add	r3, r2
 800adee:	3309      	adds	r3, #9
 800adf0:	2201      	movs	r2, #1
 800adf2:	701a      	strb	r2, [r3, #0]
								out[i].overload_timer = 0U;
 800adf4:	7dbb      	ldrb	r3, [r7, #22]
 800adf6:	4a7b      	ldr	r2, [pc, #492]	; (800afe4 <vOutContolTask+0x2c4>)
 800adf8:	2158      	movs	r1, #88	; 0x58
 800adfa:	fb01 f303 	mul.w	r3, r1, r3
 800adfe:	4413      	add	r3, r2
 800ae00:	3318      	adds	r3, #24
 800ae02:	2200      	movs	r2, #0
 800ae04:	801a      	strh	r2, [r3, #0]
								cur_power = START_POWER;
 800ae06:	231e      	movs	r3, #30
 800ae08:	75fb      	strb	r3, [r7, #23]
							}
							break;
 800ae0a:	e139      	b.n	800b080 <vOutContolTask+0x360>
					case STATE_OUT_ON_PROCESS: //Состояния влючения
							out[i].overload_timer++;
 800ae0c:	7dbb      	ldrb	r3, [r7, #22]
 800ae0e:	4975      	ldr	r1, [pc, #468]	; (800afe4 <vOutContolTask+0x2c4>)
 800ae10:	2258      	movs	r2, #88	; 0x58
 800ae12:	fb03 f202 	mul.w	r2, r3, r2
 800ae16:	440a      	add	r2, r1
 800ae18:	3218      	adds	r2, #24
 800ae1a:	8812      	ldrh	r2, [r2, #0]
 800ae1c:	3201      	adds	r2, #1
 800ae1e:	b290      	uxth	r0, r2
 800ae20:	4a70      	ldr	r2, [pc, #448]	; (800afe4 <vOutContolTask+0x2c4>)
 800ae22:	2158      	movs	r1, #88	; 0x58
 800ae24:	fb01 f303 	mul.w	r3, r1, r3
 800ae28:	4413      	add	r3, r2
 800ae2a:	3318      	adds	r3, #24
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	801a      	strh	r2, [r3, #0]
							if ( (out[i].error_flag == ERROR_ON) || (out[i].error_flag == ERROR_OVERLOAD) ) //Если обнаружена перегрузка
 800ae30:	7dbb      	ldrb	r3, [r7, #22]
 800ae32:	4a6c      	ldr	r2, [pc, #432]	; (800afe4 <vOutContolTask+0x2c4>)
 800ae34:	2158      	movs	r1, #88	; 0x58
 800ae36:	fb01 f303 	mul.w	r3, r1, r3
 800ae3a:	4413      	add	r3, r2
 800ae3c:	3320      	adds	r3, #32
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d009      	beq.n	800ae58 <vOutContolTask+0x138>
 800ae44:	7dbb      	ldrb	r3, [r7, #22]
 800ae46:	4a67      	ldr	r2, [pc, #412]	; (800afe4 <vOutContolTask+0x2c4>)
 800ae48:	2158      	movs	r1, #88	; 0x58
 800ae4a:	fb01 f303 	mul.w	r3, r1, r3
 800ae4e:	4413      	add	r3, r2
 800ae50:	3320      	adds	r3, #32
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d10d      	bne.n	800ae74 <vOutContolTask+0x154>
							{
								vHWOutResete(i);  //Выключаем выход
 800ae58:	7dbb      	ldrb	r3, [r7, #22]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff fb5e 	bl	800a51c <vHWOutResete>
								out[i].out_state = STATE_OUT_ERROR_PROCESS; //Переходим в состония бработки ошибок
 800ae60:	7dbb      	ldrb	r3, [r7, #22]
 800ae62:	4a60      	ldr	r2, [pc, #384]	; (800afe4 <vOutContolTask+0x2c4>)
 800ae64:	2158      	movs	r1, #88	; 0x58
 800ae66:	fb01 f303 	mul.w	r3, r1, r3
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3309      	adds	r3, #9
 800ae6e:	2208      	movs	r2, #8
 800ae70:	701a      	strb	r2, [r3, #0]
								break;
 800ae72:	e10a      	b.n	800b08a <vOutContolTask+0x36a>
							}
							if  ( out[i].overload_timer >= out[i].overload_config_timer ) //Если прошло время полонго пуска
 800ae74:	7dbb      	ldrb	r3, [r7, #22]
 800ae76:	4a5b      	ldr	r2, [pc, #364]	; (800afe4 <vOutContolTask+0x2c4>)
 800ae78:	2158      	movs	r1, #88	; 0x58
 800ae7a:	fb01 f303 	mul.w	r3, r1, r3
 800ae7e:	4413      	add	r3, r2
 800ae80:	3318      	adds	r3, #24
 800ae82:	881a      	ldrh	r2, [r3, #0]
 800ae84:	7dbb      	ldrb	r3, [r7, #22]
 800ae86:	4957      	ldr	r1, [pc, #348]	; (800afe4 <vOutContolTask+0x2c4>)
 800ae88:	2058      	movs	r0, #88	; 0x58
 800ae8a:	fb00 f303 	mul.w	r3, r0, r3
 800ae8e:	440b      	add	r3, r1
 800ae90:	3316      	adds	r3, #22
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d30b      	bcc.n	800aeb0 <vOutContolTask+0x190>
							{
									out[i].out_state = STATE_OUT_ON; //переходим в стосония влючено и запускаем выход на 100% мощности
 800ae98:	7dbb      	ldrb	r3, [r7, #22]
 800ae9a:	4a52      	ldr	r2, [pc, #328]	; (800afe4 <vOutContolTask+0x2c4>)
 800ae9c:	2158      	movs	r1, #88	; 0x58
 800ae9e:	fb01 f303 	mul.w	r3, r1, r3
 800aea2:	4413      	add	r3, r2
 800aea4:	3309      	adds	r3, #9
 800aea6:	2202      	movs	r2, #2
 800aea8:	701a      	strb	r2, [r3, #0]
									cur_power = 100;
 800aeaa:	2364      	movs	r3, #100	; 0x64
 800aeac:	75fb      	strb	r3, [r7, #23]
 800aeae:	e02c      	b.n	800af0a <vOutContolTask+0x1ea>
							}
							else
							{   //время пуска не прошоло, вычисляем текущую мощность, котору надо пдать на выход.
								temp_power =(uint8_t) (float)out[i].overload_timer/out[i].overload_config_timer*100;
 800aeb0:	7dbb      	ldrb	r3, [r7, #22]
 800aeb2:	4a4c      	ldr	r2, [pc, #304]	; (800afe4 <vOutContolTask+0x2c4>)
 800aeb4:	2158      	movs	r1, #88	; 0x58
 800aeb6:	fb01 f303 	mul.w	r3, r1, r3
 800aeba:	4413      	add	r3, r2
 800aebc:	3318      	adds	r3, #24
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	ee07 3a90 	vmov	s15, r3
 800aec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aecc:	edc7 7a00 	vstr	s15, [r7]
 800aed0:	783b      	ldrb	r3, [r7, #0]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	4618      	mov	r0, r3
 800aed6:	7dbb      	ldrb	r3, [r7, #22]
 800aed8:	4a42      	ldr	r2, [pc, #264]	; (800afe4 <vOutContolTask+0x2c4>)
 800aeda:	2158      	movs	r1, #88	; 0x58
 800aedc:	fb01 f303 	mul.w	r3, r1, r3
 800aee0:	4413      	add	r3, r2
 800aee2:	3316      	adds	r3, #22
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	fb90 f3f3 	sdiv	r3, r0, r3
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	461a      	mov	r2, r3
 800aeee:	0092      	lsls	r2, r2, #2
 800aef0:	4413      	add	r3, r2
 800aef2:	461a      	mov	r2, r3
 800aef4:	0091      	lsls	r1, r2, #2
 800aef6:	461a      	mov	r2, r3
 800aef8:	460b      	mov	r3, r1
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	73fb      	strb	r3, [r7, #15]
								if (temp_power > START_POWER)
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	2b1e      	cmp	r3, #30
 800af04:	d901      	bls.n	800af0a <vOutContolTask+0x1ea>
								{
									cur_power = temp_power;
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	75fb      	strb	r3, [r7, #23]
								}
							}
							vHWOutSet(i,cur_power);
 800af0a:	7dfa      	ldrb	r2, [r7, #23]
 800af0c:	7dbb      	ldrb	r3, [r7, #22]
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff fb2f 	bl	800a574 <vHWOutSet>
							break;
 800af16:	e0b8      	b.n	800b08a <vOutContolTask+0x36a>
						case STATE_OUT_ON:  // Состояние входа - включен
								//Если система обнаружила ошибку ключа или ток больше номинального
								if ( (out[i].error_flag == ERROR_ON) || (out[i].error_flag == ERROR_OVERLOAD) )
 800af18:	7dbb      	ldrb	r3, [r7, #22]
 800af1a:	4a32      	ldr	r2, [pc, #200]	; (800afe4 <vOutContolTask+0x2c4>)
 800af1c:	2158      	movs	r1, #88	; 0x58
 800af1e:	fb01 f303 	mul.w	r3, r1, r3
 800af22:	4413      	add	r3, r2
 800af24:	3320      	adds	r3, #32
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d009      	beq.n	800af40 <vOutContolTask+0x220>
 800af2c:	7dbb      	ldrb	r3, [r7, #22]
 800af2e:	4a2d      	ldr	r2, [pc, #180]	; (800afe4 <vOutContolTask+0x2c4>)
 800af30:	2158      	movs	r1, #88	; 0x58
 800af32:	fb01 f303 	mul.w	r3, r1, r3
 800af36:	4413      	add	r3, r2
 800af38:	3320      	adds	r3, #32
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d10d      	bne.n	800af5c <vOutContolTask+0x23c>
								{
									vHWOutResete(i);
 800af40:	7dbb      	ldrb	r3, [r7, #22]
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff faea 	bl	800a51c <vHWOutResete>
									out[i].out_state = STATE_OUT_ERROR_PROCESS;
 800af48:	7dbb      	ldrb	r3, [r7, #22]
 800af4a:	4a26      	ldr	r2, [pc, #152]	; (800afe4 <vOutContolTask+0x2c4>)
 800af4c:	2158      	movs	r1, #88	; 0x58
 800af4e:	fb01 f303 	mul.w	r3, r1, r3
 800af52:	4413      	add	r3, r2
 800af54:	3309      	adds	r3, #9
 800af56:	2208      	movs	r2, #8
 800af58:	701a      	strb	r2, [r3, #0]
									break;
 800af5a:	e096      	b.n	800b08a <vOutContolTask+0x36a>
								}
								if  (out[i].out_logic_state == OUT_OFF)
 800af5c:	7dbb      	ldrb	r3, [r7, #22]
 800af5e:	4a21      	ldr	r2, [pc, #132]	; (800afe4 <vOutContolTask+0x2c4>)
 800af60:	2158      	movs	r1, #88	; 0x58
 800af62:	fb01 f303 	mul.w	r3, r1, r3
 800af66:	4413      	add	r3, r2
 800af68:	3308      	adds	r3, #8
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	f040 8089 	bne.w	800b084 <vOutContolTask+0x364>
								{
									vHWOutResete(i);
 800af72:	7dbb      	ldrb	r3, [r7, #22]
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fad1 	bl	800a51c <vHWOutResete>
									out[i].out_state = STATE_OUT_OFF;
 800af7a:	7dbb      	ldrb	r3, [r7, #22]
 800af7c:	4a19      	ldr	r2, [pc, #100]	; (800afe4 <vOutContolTask+0x2c4>)
 800af7e:	2158      	movs	r1, #88	; 0x58
 800af80:	fb01 f303 	mul.w	r3, r1, r3
 800af84:	4413      	add	r3, r2
 800af86:	3309      	adds	r3, #9
 800af88:	2200      	movs	r2, #0
 800af8a:	701a      	strb	r2, [r3, #0]
								}
								break;
 800af8c:	e07a      	b.n	800b084 <vOutContolTask+0x364>
						case STATE_OUT_ERROR_PROCESS:
							   if (out[i].error_count == 1)
 800af8e:	7dbb      	ldrb	r3, [r7, #22]
 800af90:	4a14      	ldr	r2, [pc, #80]	; (800afe4 <vOutContolTask+0x2c4>)
 800af92:	2158      	movs	r1, #88	; 0x58
 800af94:	fb01 f303 	mul.w	r3, r1, r3
 800af98:	4413      	add	r3, r2
 800af9a:	331a      	adds	r3, #26
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d109      	bne.n	800afb6 <vOutContolTask+0x296>
							   {
								   out[i].out_state = STATE_OUT_ERROR;
 800afa2:	7dbb      	ldrb	r3, [r7, #22]
 800afa4:	4a0f      	ldr	r2, [pc, #60]	; (800afe4 <vOutContolTask+0x2c4>)
 800afa6:	2158      	movs	r1, #88	; 0x58
 800afa8:	fb01 f303 	mul.w	r3, r1, r3
 800afac:	4413      	add	r3, r2
 800afae:	3309      	adds	r3, #9
 800afb0:	2204      	movs	r2, #4
 800afb2:	701a      	strb	r2, [r3, #0]
								   break;
 800afb4:	e069      	b.n	800b08a <vOutContolTask+0x36a>
							   }
							   out[i].restart_timer = 0U;
 800afb6:	7dbb      	ldrb	r3, [r7, #22]
 800afb8:	4a0a      	ldr	r2, [pc, #40]	; (800afe4 <vOutContolTask+0x2c4>)
 800afba:	2158      	movs	r1, #88	; 0x58
 800afbc:	fb01 f303 	mul.w	r3, r1, r3
 800afc0:	4413      	add	r3, r2
 800afc2:	331c      	adds	r3, #28
 800afc4:	2200      	movs	r2, #0
 800afc6:	801a      	strh	r2, [r3, #0]
							   out[i].out_state = STATE_OUT_RESTART_PROCESS;
 800afc8:	7dbb      	ldrb	r3, [r7, #22]
 800afca:	4a06      	ldr	r2, [pc, #24]	; (800afe4 <vOutContolTask+0x2c4>)
 800afcc:	2158      	movs	r1, #88	; 0x58
 800afce:	fb01 f303 	mul.w	r3, r1, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	3309      	adds	r3, #9
 800afd6:	2210      	movs	r2, #16
 800afd8:	701a      	strb	r2, [r3, #0]
							   break;
 800afda:	e056      	b.n	800b08a <vOutContolTask+0x36a>
 800afdc:	200063a0 	.word	0x200063a0
 800afe0:	2000639c 	.word	0x2000639c
 800afe4:	20005c54 	.word	0x20005c54
						case STATE_OUT_ERROR:
							 break;
						case STATE_OUT_RESTART_PROCESS:
							out[i].restart_timer++;
 800afe8:	7dbb      	ldrb	r3, [r7, #22]
 800afea:	492c      	ldr	r1, [pc, #176]	; (800b09c <vOutContolTask+0x37c>)
 800afec:	2258      	movs	r2, #88	; 0x58
 800afee:	fb03 f202 	mul.w	r2, r3, r2
 800aff2:	440a      	add	r2, r1
 800aff4:	321c      	adds	r2, #28
 800aff6:	8812      	ldrh	r2, [r2, #0]
 800aff8:	3201      	adds	r2, #1
 800affa:	b290      	uxth	r0, r2
 800affc:	4a27      	ldr	r2, [pc, #156]	; (800b09c <vOutContolTask+0x37c>)
 800affe:	2158      	movs	r1, #88	; 0x58
 800b000:	fb01 f303 	mul.w	r3, r1, r3
 800b004:	4413      	add	r3, r2
 800b006:	331c      	adds	r3, #28
 800b008:	4602      	mov	r2, r0
 800b00a:	801a      	strh	r2, [r3, #0]
							if  ( out[i].restart_timer >= out[i].restart_config_timer )
 800b00c:	7dbb      	ldrb	r3, [r7, #22]
 800b00e:	4a23      	ldr	r2, [pc, #140]	; (800b09c <vOutContolTask+0x37c>)
 800b010:	2158      	movs	r1, #88	; 0x58
 800b012:	fb01 f303 	mul.w	r3, r1, r3
 800b016:	4413      	add	r3, r2
 800b018:	331c      	adds	r3, #28
 800b01a:	881a      	ldrh	r2, [r3, #0]
 800b01c:	7dbb      	ldrb	r3, [r7, #22]
 800b01e:	491f      	ldr	r1, [pc, #124]	; (800b09c <vOutContolTask+0x37c>)
 800b020:	2058      	movs	r0, #88	; 0x58
 800b022:	fb00 f303 	mul.w	r3, r0, r3
 800b026:	440b      	add	r3, r1
 800b028:	331e      	adds	r3, #30
 800b02a:	881b      	ldrh	r3, [r3, #0]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d32b      	bcc.n	800b088 <vOutContolTask+0x368>
							{
								if (out[i].error_count > 1)
 800b030:	7dbb      	ldrb	r3, [r7, #22]
 800b032:	4a1a      	ldr	r2, [pc, #104]	; (800b09c <vOutContolTask+0x37c>)
 800b034:	2158      	movs	r1, #88	; 0x58
 800b036:	fb01 f303 	mul.w	r3, r1, r3
 800b03a:	4413      	add	r3, r2
 800b03c:	331a      	adds	r3, #26
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d921      	bls.n	800b088 <vOutContolTask+0x368>
								{
									out[i].out_state = STATE_OUT_OFF;
 800b044:	7dbb      	ldrb	r3, [r7, #22]
 800b046:	4a15      	ldr	r2, [pc, #84]	; (800b09c <vOutContolTask+0x37c>)
 800b048:	2158      	movs	r1, #88	; 0x58
 800b04a:	fb01 f303 	mul.w	r3, r1, r3
 800b04e:	4413      	add	r3, r2
 800b050:	3309      	adds	r3, #9
 800b052:	2200      	movs	r2, #0
 800b054:	701a      	strb	r2, [r3, #0]
									out[i].error_count--;
 800b056:	7dbb      	ldrb	r3, [r7, #22]
 800b058:	4910      	ldr	r1, [pc, #64]	; (800b09c <vOutContolTask+0x37c>)
 800b05a:	2258      	movs	r2, #88	; 0x58
 800b05c:	fb03 f202 	mul.w	r2, r3, r2
 800b060:	440a      	add	r2, r1
 800b062:	321a      	adds	r2, #26
 800b064:	7812      	ldrb	r2, [r2, #0]
 800b066:	3a01      	subs	r2, #1
 800b068:	b2d0      	uxtb	r0, r2
 800b06a:	4a0c      	ldr	r2, [pc, #48]	; (800b09c <vOutContolTask+0x37c>)
 800b06c:	2158      	movs	r1, #88	; 0x58
 800b06e:	fb01 f303 	mul.w	r3, r1, r3
 800b072:	4413      	add	r3, r2
 800b074:	331a      	adds	r3, #26
 800b076:	4602      	mov	r2, r0
 800b078:	701a      	strb	r2, [r3, #0]
									break;
 800b07a:	e006      	b.n	800b08a <vOutContolTask+0x36a>
								}
							}
							break;
					}
				}
 800b07c:	bf00      	nop
 800b07e:	e004      	b.n	800b08a <vOutContolTask+0x36a>
							break;
 800b080:	bf00      	nop
 800b082:	e002      	b.n	800b08a <vOutContolTask+0x36a>
								break;
 800b084:	bf00      	nop
 800b086:	e000      	b.n	800b08a <vOutContolTask+0x36a>
							break;
 800b088:	bf00      	nop
			for (uint8_t i=0; i<OUT_COUNT;i++)
 800b08a:	7dbb      	ldrb	r3, [r7, #22]
 800b08c:	3301      	adds	r3, #1
 800b08e:	75bb      	strb	r3, [r7, #22]
 800b090:	7dbb      	ldrb	r3, [r7, #22]
 800b092:	2b13      	cmp	r3, #19
 800b094:	f67f ae5d 	bls.w	800ad52 <vOutContolTask+0x32>
		   vTaskDelay(1);
 800b098:	e64e      	b.n	800ad38 <vOutContolTask+0x18>
 800b09a:	bf00      	nop
 800b09c:	20005c54 	.word	0x20005c54

0800b0a0 <vADC_Ready>:


}

 void vADC_Ready ( uint8_t adc_number )
 {
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	71fb      	strb	r3, [r7, #7]
   static portBASE_TYPE xHigherPriorityTaskWoken;

   xHigherPriorityTaskWoken = pdFALSE;
 800b0aa:	4b1b      	ldr	r3, [pc, #108]	; (800b118 <vADC_Ready+0x78>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	601a      	str	r2, [r3, #0]
   switch ( adc_number )
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	2b04      	cmp	r3, #4
 800b0b4:	d006      	beq.n	800b0c4 <vADC_Ready+0x24>
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	dc1c      	bgt.n	800b0f4 <vADC_Ready+0x54>
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d012      	beq.n	800b0e4 <vADC_Ready+0x44>
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d008      	beq.n	800b0d4 <vADC_Ready+0x34>
       break;
     case ADC1_READY:
       xEventGroupSetBitsFromISR( xADCEvent, ADC1_READY, &xHigherPriorityTaskWoken );
       break;
     default:
       break;
 800b0c2:	e017      	b.n	800b0f4 <vADC_Ready+0x54>
       xEventGroupSetBitsFromISR( xADCEvent, ADC3_READY, &xHigherPriorityTaskWoken );
 800b0c4:	4b15      	ldr	r3, [pc, #84]	; (800b11c <vADC_Ready+0x7c>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a13      	ldr	r2, [pc, #76]	; (800b118 <vADC_Ready+0x78>)
 800b0ca:	2104      	movs	r1, #4
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fc fb09 	bl	80076e4 <xEventGroupSetBitsFromISR>
       break;
 800b0d2:	e010      	b.n	800b0f6 <vADC_Ready+0x56>
       xEventGroupSetBitsFromISR( xADCEvent, ADC2_READY, &xHigherPriorityTaskWoken );
 800b0d4:	4b11      	ldr	r3, [pc, #68]	; (800b11c <vADC_Ready+0x7c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a0f      	ldr	r2, [pc, #60]	; (800b118 <vADC_Ready+0x78>)
 800b0da:	2102      	movs	r1, #2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fc fb01 	bl	80076e4 <xEventGroupSetBitsFromISR>
       break;
 800b0e2:	e008      	b.n	800b0f6 <vADC_Ready+0x56>
       xEventGroupSetBitsFromISR( xADCEvent, ADC1_READY, &xHigherPriorityTaskWoken );
 800b0e4:	4b0d      	ldr	r3, [pc, #52]	; (800b11c <vADC_Ready+0x7c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a0b      	ldr	r2, [pc, #44]	; (800b118 <vADC_Ready+0x78>)
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fc faf9 	bl	80076e4 <xEventGroupSetBitsFromISR>
       break;
 800b0f2:	e000      	b.n	800b0f6 <vADC_Ready+0x56>
       break;
 800b0f4:	bf00      	nop
   }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800b0f6:	4b08      	ldr	r3, [pc, #32]	; (800b118 <vADC_Ready+0x78>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d008      	beq.n	800b110 <vADC_Ready+0x70>
 800b0fe:	4b08      	ldr	r3, [pc, #32]	; (800b120 <vADC_Ready+0x80>)
 800b100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	f3bf 8f6f 	isb	sy
   return;
 800b10e:	bf00      	nop
 800b110:	bf00      	nop
 }
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	200063c0 	.word	0x200063c0
 800b11c:	20006378 	.word	0x20006378
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <vLuaTask>:
#include "FreeRTOS.h"
#include "script.c"


void vLuaTask(void *argument)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 //    luaL_openlibs(L); // open standard libraries
 //    luaL_loadstring(L, lib );
 //    luaL_loadstring(L, mainscript);
	 while(1)
	 {
		  vTaskDelay(1 );
 800b12c:	2001      	movs	r0, #1
 800b12e:	f7fd fa45 	bl	80085bc <vTaskDelay>
	 {
 800b132:	e7fb      	b.n	800b12c <vLuaTask+0x8>

0800b134 <__libc_init_array>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	4d0d      	ldr	r5, [pc, #52]	; (800b16c <__libc_init_array+0x38>)
 800b138:	4c0d      	ldr	r4, [pc, #52]	; (800b170 <__libc_init_array+0x3c>)
 800b13a:	1b64      	subs	r4, r4, r5
 800b13c:	10a4      	asrs	r4, r4, #2
 800b13e:	2600      	movs	r6, #0
 800b140:	42a6      	cmp	r6, r4
 800b142:	d109      	bne.n	800b158 <__libc_init_array+0x24>
 800b144:	4d0b      	ldr	r5, [pc, #44]	; (800b174 <__libc_init_array+0x40>)
 800b146:	4c0c      	ldr	r4, [pc, #48]	; (800b178 <__libc_init_array+0x44>)
 800b148:	f000 f8f2 	bl	800b330 <_init>
 800b14c:	1b64      	subs	r4, r4, r5
 800b14e:	10a4      	asrs	r4, r4, #2
 800b150:	2600      	movs	r6, #0
 800b152:	42a6      	cmp	r6, r4
 800b154:	d105      	bne.n	800b162 <__libc_init_array+0x2e>
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	f855 3b04 	ldr.w	r3, [r5], #4
 800b15c:	4798      	blx	r3
 800b15e:	3601      	adds	r6, #1
 800b160:	e7ee      	b.n	800b140 <__libc_init_array+0xc>
 800b162:	f855 3b04 	ldr.w	r3, [r5], #4
 800b166:	4798      	blx	r3
 800b168:	3601      	adds	r6, #1
 800b16a:	e7f2      	b.n	800b152 <__libc_init_array+0x1e>
 800b16c:	0800b4a4 	.word	0x0800b4a4
 800b170:	0800b4a4 	.word	0x0800b4a4
 800b174:	0800b4a4 	.word	0x0800b4a4
 800b178:	0800b4a8 	.word	0x0800b4a8

0800b17c <__retarget_lock_acquire_recursive>:
 800b17c:	4770      	bx	lr

0800b17e <__retarget_lock_release_recursive>:
 800b17e:	4770      	bx	lr

0800b180 <memcpy>:
 800b180:	440a      	add	r2, r1
 800b182:	4291      	cmp	r1, r2
 800b184:	f100 33ff 	add.w	r3, r0, #4294967295
 800b188:	d100      	bne.n	800b18c <memcpy+0xc>
 800b18a:	4770      	bx	lr
 800b18c:	b510      	push	{r4, lr}
 800b18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b196:	4291      	cmp	r1, r2
 800b198:	d1f9      	bne.n	800b18e <memcpy+0xe>
 800b19a:	bd10      	pop	{r4, pc}

0800b19c <memset>:
 800b19c:	4402      	add	r2, r0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d100      	bne.n	800b1a6 <memset+0xa>
 800b1a4:	4770      	bx	lr
 800b1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1aa:	e7f9      	b.n	800b1a0 <memset+0x4>

0800b1ac <_free_r>:
 800b1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	d044      	beq.n	800b23c <_free_r+0x90>
 800b1b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b6:	9001      	str	r0, [sp, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f1a1 0404 	sub.w	r4, r1, #4
 800b1be:	bfb8      	it	lt
 800b1c0:	18e4      	addlt	r4, r4, r3
 800b1c2:	f000 f8a9 	bl	800b318 <__malloc_lock>
 800b1c6:	4a1e      	ldr	r2, [pc, #120]	; (800b240 <_free_r+0x94>)
 800b1c8:	9801      	ldr	r0, [sp, #4]
 800b1ca:	6813      	ldr	r3, [r2, #0]
 800b1cc:	b933      	cbnz	r3, 800b1dc <_free_r+0x30>
 800b1ce:	6063      	str	r3, [r4, #4]
 800b1d0:	6014      	str	r4, [r2, #0]
 800b1d2:	b003      	add	sp, #12
 800b1d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1d8:	f000 b8a4 	b.w	800b324 <__malloc_unlock>
 800b1dc:	42a3      	cmp	r3, r4
 800b1de:	d908      	bls.n	800b1f2 <_free_r+0x46>
 800b1e0:	6825      	ldr	r5, [r4, #0]
 800b1e2:	1961      	adds	r1, r4, r5
 800b1e4:	428b      	cmp	r3, r1
 800b1e6:	bf01      	itttt	eq
 800b1e8:	6819      	ldreq	r1, [r3, #0]
 800b1ea:	685b      	ldreq	r3, [r3, #4]
 800b1ec:	1949      	addeq	r1, r1, r5
 800b1ee:	6021      	streq	r1, [r4, #0]
 800b1f0:	e7ed      	b.n	800b1ce <_free_r+0x22>
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	b10b      	cbz	r3, 800b1fc <_free_r+0x50>
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d9fa      	bls.n	800b1f2 <_free_r+0x46>
 800b1fc:	6811      	ldr	r1, [r2, #0]
 800b1fe:	1855      	adds	r5, r2, r1
 800b200:	42a5      	cmp	r5, r4
 800b202:	d10b      	bne.n	800b21c <_free_r+0x70>
 800b204:	6824      	ldr	r4, [r4, #0]
 800b206:	4421      	add	r1, r4
 800b208:	1854      	adds	r4, r2, r1
 800b20a:	42a3      	cmp	r3, r4
 800b20c:	6011      	str	r1, [r2, #0]
 800b20e:	d1e0      	bne.n	800b1d2 <_free_r+0x26>
 800b210:	681c      	ldr	r4, [r3, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	6053      	str	r3, [r2, #4]
 800b216:	4421      	add	r1, r4
 800b218:	6011      	str	r1, [r2, #0]
 800b21a:	e7da      	b.n	800b1d2 <_free_r+0x26>
 800b21c:	d902      	bls.n	800b224 <_free_r+0x78>
 800b21e:	230c      	movs	r3, #12
 800b220:	6003      	str	r3, [r0, #0]
 800b222:	e7d6      	b.n	800b1d2 <_free_r+0x26>
 800b224:	6825      	ldr	r5, [r4, #0]
 800b226:	1961      	adds	r1, r4, r5
 800b228:	428b      	cmp	r3, r1
 800b22a:	bf04      	itt	eq
 800b22c:	6819      	ldreq	r1, [r3, #0]
 800b22e:	685b      	ldreq	r3, [r3, #4]
 800b230:	6063      	str	r3, [r4, #4]
 800b232:	bf04      	itt	eq
 800b234:	1949      	addeq	r1, r1, r5
 800b236:	6021      	streq	r1, [r4, #0]
 800b238:	6054      	str	r4, [r2, #4]
 800b23a:	e7ca      	b.n	800b1d2 <_free_r+0x26>
 800b23c:	b003      	add	sp, #12
 800b23e:	bd30      	pop	{r4, r5, pc}
 800b240:	200063c8 	.word	0x200063c8

0800b244 <cleanup_glue>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	460c      	mov	r4, r1
 800b248:	6809      	ldr	r1, [r1, #0]
 800b24a:	4605      	mov	r5, r0
 800b24c:	b109      	cbz	r1, 800b252 <cleanup_glue+0xe>
 800b24e:	f7ff fff9 	bl	800b244 <cleanup_glue>
 800b252:	4621      	mov	r1, r4
 800b254:	4628      	mov	r0, r5
 800b256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b25a:	f7ff bfa7 	b.w	800b1ac <_free_r>
	...

0800b260 <_reclaim_reent>:
 800b260:	4b2c      	ldr	r3, [pc, #176]	; (800b314 <_reclaim_reent+0xb4>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4283      	cmp	r3, r0
 800b266:	b570      	push	{r4, r5, r6, lr}
 800b268:	4604      	mov	r4, r0
 800b26a:	d051      	beq.n	800b310 <_reclaim_reent+0xb0>
 800b26c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b26e:	b143      	cbz	r3, 800b282 <_reclaim_reent+0x22>
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d14a      	bne.n	800b30c <_reclaim_reent+0xac>
 800b276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b278:	6819      	ldr	r1, [r3, #0]
 800b27a:	b111      	cbz	r1, 800b282 <_reclaim_reent+0x22>
 800b27c:	4620      	mov	r0, r4
 800b27e:	f7ff ff95 	bl	800b1ac <_free_r>
 800b282:	6961      	ldr	r1, [r4, #20]
 800b284:	b111      	cbz	r1, 800b28c <_reclaim_reent+0x2c>
 800b286:	4620      	mov	r0, r4
 800b288:	f7ff ff90 	bl	800b1ac <_free_r>
 800b28c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b28e:	b111      	cbz	r1, 800b296 <_reclaim_reent+0x36>
 800b290:	4620      	mov	r0, r4
 800b292:	f7ff ff8b 	bl	800b1ac <_free_r>
 800b296:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b298:	b111      	cbz	r1, 800b2a0 <_reclaim_reent+0x40>
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7ff ff86 	bl	800b1ac <_free_r>
 800b2a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2a2:	b111      	cbz	r1, 800b2aa <_reclaim_reent+0x4a>
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7ff ff81 	bl	800b1ac <_free_r>
 800b2aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2ac:	b111      	cbz	r1, 800b2b4 <_reclaim_reent+0x54>
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f7ff ff7c 	bl	800b1ac <_free_r>
 800b2b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2b6:	b111      	cbz	r1, 800b2be <_reclaim_reent+0x5e>
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f7ff ff77 	bl	800b1ac <_free_r>
 800b2be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2c0:	b111      	cbz	r1, 800b2c8 <_reclaim_reent+0x68>
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff ff72 	bl	800b1ac <_free_r>
 800b2c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ca:	b111      	cbz	r1, 800b2d2 <_reclaim_reent+0x72>
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f7ff ff6d 	bl	800b1ac <_free_r>
 800b2d2:	69a3      	ldr	r3, [r4, #24]
 800b2d4:	b1e3      	cbz	r3, 800b310 <_reclaim_reent+0xb0>
 800b2d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2d8:	4620      	mov	r0, r4
 800b2da:	4798      	blx	r3
 800b2dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b2de:	b1b9      	cbz	r1, 800b310 <_reclaim_reent+0xb0>
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2e6:	f7ff bfad 	b.w	800b244 <cleanup_glue>
 800b2ea:	5949      	ldr	r1, [r1, r5]
 800b2ec:	b941      	cbnz	r1, 800b300 <_reclaim_reent+0xa0>
 800b2ee:	3504      	adds	r5, #4
 800b2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2f2:	2d80      	cmp	r5, #128	; 0x80
 800b2f4:	68d9      	ldr	r1, [r3, #12]
 800b2f6:	d1f8      	bne.n	800b2ea <_reclaim_reent+0x8a>
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f7ff ff57 	bl	800b1ac <_free_r>
 800b2fe:	e7ba      	b.n	800b276 <_reclaim_reent+0x16>
 800b300:	680e      	ldr	r6, [r1, #0]
 800b302:	4620      	mov	r0, r4
 800b304:	f7ff ff52 	bl	800b1ac <_free_r>
 800b308:	4631      	mov	r1, r6
 800b30a:	e7ef      	b.n	800b2ec <_reclaim_reent+0x8c>
 800b30c:	2500      	movs	r5, #0
 800b30e:	e7ef      	b.n	800b2f0 <_reclaim_reent+0x90>
 800b310:	bd70      	pop	{r4, r5, r6, pc}
 800b312:	bf00      	nop
 800b314:	200001a0 	.word	0x200001a0

0800b318 <__malloc_lock>:
 800b318:	4801      	ldr	r0, [pc, #4]	; (800b320 <__malloc_lock+0x8>)
 800b31a:	f7ff bf2f 	b.w	800b17c <__retarget_lock_acquire_recursive>
 800b31e:	bf00      	nop
 800b320:	200063c4 	.word	0x200063c4

0800b324 <__malloc_unlock>:
 800b324:	4801      	ldr	r0, [pc, #4]	; (800b32c <__malloc_unlock+0x8>)
 800b326:	f7ff bf2a 	b.w	800b17e <__retarget_lock_release_recursive>
 800b32a:	bf00      	nop
 800b32c:	200063c4 	.word	0x200063c4

0800b330 <_init>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr

0800b33c <_fini>:
 800b33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33e:	bf00      	nop
 800b340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b342:	bc08      	pop	{r3}
 800b344:	469e      	mov	lr, r3
 800b346:	4770      	bx	lr
