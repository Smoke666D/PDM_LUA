
PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008000  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008190  08008190  00018190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008250  08008250  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008258  08008258  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00005320  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005394  20005394  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000225a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d19  00000000  00000000  0004264b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf0  00000000  00000000  00046368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ab0  00000000  00000000  00047f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040a7  00000000  00000000  00049a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f219  00000000  00000000  0004daaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd8a4  00000000  00000000  0006ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a56c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c78  00000000  00000000  0014a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  00152234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008178 	.word	0x08008178

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008178 	.word	0x08008178

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f001 fbf4 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f832 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fe36 	bl	8001150 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e4:	f000 f89a 	bl	800061c <MX_ADC1_Init>
  MX_ADC3_Init();
 80004e8:	f000 f93c 	bl	8000764 <MX_ADC3_Init>
  MX_ADC2_Init();
 80004ec:	f000 f8e8 	bl	80006c0 <MX_ADC2_Init>
  MX_CAN1_Init();
 80004f0:	f000 f98a 	bl	8000808 <MX_CAN1_Init>
  MX_TIM1_Init();
 80004f4:	f000 f9ea 	bl	80008cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f8:	f000 faac 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004fc:	f000 fb4a 	bl	8000b94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000500:	f000 fbca 	bl	8000c98 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000504:	f000 fc60 	bl	8000dc8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000508:	f000 fd22 	bl	8000f50 <MX_TIM9_Init>
  MX_TIM12_Init();
 800050c:	f000 fd5a 	bl	8000fc4 <MX_TIM12_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000510:	f000 fdf0 	bl	80010f4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000514:	f000 f9ac 	bl	8000870 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000518:	f000 fdc2 	bl	80010a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f004 ffb6 	bl	800548c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <main+0x64>)
 8000522:	2100      	movs	r1, #0
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <main+0x68>)
 8000526:	f004 fffb 	bl	8005520 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <main+0x6c>)
 800052e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000530:	f004 ffd0 	bl	80054d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x60>
 8000536:	bf00      	nop
 8000538:	080081b4 	.word	0x080081b4
 800053c:	08001305 	.word	0x08001305
 8000540:	2000092c 	.word	0x2000092c

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f007 fd46 	bl	8007fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b29      	ldr	r3, [pc, #164]	; (8000614 <SystemClock_Config+0xd0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a28      	ldr	r2, [pc, #160]	; (8000614 <SystemClock_Config+0xd0>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <SystemClock_Config+0xd0>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b23      	ldr	r3, [pc, #140]	; (8000618 <SystemClock_Config+0xd4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a22      	ldr	r2, [pc, #136]	; (8000618 <SystemClock_Config+0xd4>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005a0:	2303      	movs	r3, #3
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2310      	movs	r3, #16
 80005b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c0:	2348      	movs	r3, #72	; 0x48
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c8:	2303      	movs	r3, #3
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fc35 	bl	8002e40 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005dc:	f000 feac 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe98 	bl	8003330 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000606:	f000 fe97 	bl	8001338 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <MX_ADC1_Init+0x9c>)
 8000632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_ADC1_Init+0x98>)
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <MX_ADC1_Init+0xa0>)
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000668:	2201      	movs	r2, #1
 800066a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000676:	2201      	movs	r2, #1
 8000678:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_ADC1_Init+0x98>)
 800067c:	f001 fb88 	bl	8001d90 <HAL_ADC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 fe57 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800068a:	230e      	movs	r3, #14
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_ADC1_Init+0x98>)
 800069c:	f001 fbbc 	bl	8001e18 <HAL_ADC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006a6:	f000 fe47 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000090 	.word	0x20000090
 80006b8:	40012000 	.word	0x40012000
 80006bc:	0f000001 	.word	0x0f000001

080006c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC2_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC2_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC2_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC2_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC2_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC2_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC2_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC2_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_ADC2_Init+0x98>)
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC2_Init+0xa0>)
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC2_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_ADC2_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC2_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC2_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_ADC2_Init+0x98>)
 8000720:	f001 fb36 	bl	8001d90 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 fe05 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC2_Init+0x98>)
 8000740:	f001 fb6a 	bl	8001e18 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800074a:	f000 fdf5 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000d8 	.word	0x200000d8
 800075c:	40012100 	.word	0x40012100
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC3_Init+0x98>)
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <MX_ADC3_Init+0x9c>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC3_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ADC3_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC3_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_ADC3_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC3_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_ADC3_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_ADC3_Init+0x98>)
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_ADC3_Init+0xa0>)
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC3_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_ADC3_Init+0x98>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_ADC3_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ADC3_Init+0x98>)
 80007be:	2201      	movs	r2, #1
 80007c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_ADC3_Init+0x98>)
 80007c4:	f001 fae4 	bl	8001d90 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fdb3 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_ADC3_Init+0x98>)
 80007e4:	f001 fb18 	bl	8001e18 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80007ee:	f000 fda3 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000120 	.word	0x20000120
 8000800:	40012200 	.word	0x40012200
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_CAN1_Init+0x60>)
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <MX_CAN1_Init+0x64>)
 8000810:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_CAN1_Init+0x60>)
 8000814:	2210      	movs	r2, #16
 8000816:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_CAN1_Init+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_CAN1_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_CAN1_Init+0x60>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_CAN1_Init+0x60>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_CAN1_Init+0x60>)
 8000832:	2200      	movs	r2, #0
 8000834:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_CAN1_Init+0x60>)
 8000838:	2200      	movs	r2, #0
 800083a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_CAN1_Init+0x60>)
 800083e:	2200      	movs	r2, #0
 8000840:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_CAN1_Init+0x60>)
 8000844:	2200      	movs	r2, #0
 8000846:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_CAN1_Init+0x60>)
 800084a:	2200      	movs	r2, #0
 800084c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_CAN1_Init+0x60>)
 8000850:	2200      	movs	r2, #0
 8000852:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_CAN1_Init+0x60>)
 8000856:	f001 fcfd 	bl	8002254 <HAL_CAN_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000860:	f000 fd6a 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000168 	.word	0x20000168
 800086c:	40006400 	.word	0x40006400

08000870 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MX_I2C2_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C2_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_I2C2_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2C2_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_I2C2_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_I2C2_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2C2_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_I2C2_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2C2_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_I2C2_Init+0x50>)
 80008ae:	f002 f865 	bl	800297c <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 fd3e 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000190 	.word	0x20000190
 80008c4:	40005800 	.word	0x40005800
 80008c8:	000186a0 	.word	0x000186a0

080008cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	; 0x58
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2220      	movs	r2, #32
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f007 fb6d 	bl	8007fe4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800090a:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <MX_TIM1_Init+0x180>)
 800090c:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <MX_TIM1_Init+0x184>)
 800090e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000910:	4b4e      	ldr	r3, [pc, #312]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800091c:	4b4b      	ldr	r3, [pc, #300]	; (8000a4c <MX_TIM1_Init+0x180>)
 800091e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000922:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092a:	4b48      	ldr	r3, [pc, #288]	; (8000a4c <MX_TIM1_Init+0x180>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b46      	ldr	r3, [pc, #280]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000936:	4845      	ldr	r0, [pc, #276]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000938:	f002 ff4c 	bl	80037d4 <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000942:	f000 fcf9 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000950:	4619      	mov	r1, r3
 8000952:	483e      	ldr	r0, [pc, #248]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000954:	f003 fad6 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800095e:	f000 fceb 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000962:	483a      	ldr	r0, [pc, #232]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000964:	f003 f84f 	bl	8003a06 <HAL_TIM_PWM_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800096e:	f000 fce3 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800097e:	4619      	mov	r1, r3
 8000980:	4832      	ldr	r0, [pc, #200]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000982:	f003 fe99 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800098c:	f000 fcd4 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000990:	2360      	movs	r3, #96	; 0x60
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_TIM1_Init+0x180>)
 80009b6:	f003 f9e3 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80009c0:	f000 fcba 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	2204      	movs	r2, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <MX_TIM1_Init+0x180>)
 80009ce:	f003 f9d7 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80009d8:	f000 fcae 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	2208      	movs	r2, #8
 80009e2:	4619      	mov	r1, r3
 80009e4:	4819      	ldr	r0, [pc, #100]	; (8000a4c <MX_TIM1_Init+0x180>)
 80009e6:	f003 f9cb 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80009f0:	f000 fca2 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	220c      	movs	r2, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM1_Init+0x180>)
 80009fe:	f003 f9bf 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a08:	f000 fc96 	bl	8001338 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000a30:	f003 febe 	bl	80047b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000a3a:	f000 fc7d 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM1_Init+0x180>)
 8000a40:	f000 fec4 	bl	80017cc <HAL_TIM_MspPostInit>

}
 8000a44:	bf00      	nop
 8000a46:	3758      	adds	r7, #88	; 0x58
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200001e4 	.word	0x200001e4
 8000a50:	40010000 	.word	0x40010000

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a84:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a8c:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa6:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aac:	4838      	ldr	r0, [pc, #224]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000aae:	f002 fe91 	bl	80037d4 <HAL_TIM_Base_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ab8:	f000 fc3e 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4831      	ldr	r0, [pc, #196]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000aca:	f003 fa1b 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ad4:	f000 fc30 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ad8:	482d      	ldr	r0, [pc, #180]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000ada:	f002 ff3b 	bl	8003954 <HAL_TIM_OC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ae4:	f000 fc28 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ae8:	4829      	ldr	r0, [pc, #164]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000aea:	f002 ff8c 	bl	8003a06 <HAL_TIM_PWM_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000af4:	f000 fc20 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4619      	mov	r1, r3
 8000b06:	4822      	ldr	r0, [pc, #136]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000b08:	f003 fdd6 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000b12:	f000 fc11 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4818      	ldr	r0, [pc, #96]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000b2e:	f003 f8cb 	bl	8003cc8 <HAL_TIM_OC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000b38:	f000 fbfe 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3c:	2360      	movs	r3, #96	; 0x60
 8000b3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2204      	movs	r2, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4812      	ldr	r0, [pc, #72]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000b48:	f003 f91a 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000b52:	f000 fbf1 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2208      	movs	r2, #8
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000b5e:	f003 f90f 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000b68:	f000 fbe6 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	220c      	movs	r2, #12
 8000b70:	4619      	mov	r1, r3
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000b74:	f003 f904 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8000b7e:	f000 fbdb 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM2_Init+0x13c>)
 8000b84:	f000 fe22 	bl	80017cc <HAL_TIM_MspPostInit>

}
 8000b88:	bf00      	nop
 8000b8a:	3738      	adds	r7, #56	; 0x38
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000022c 	.word	0x2000022c

08000b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bc4:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000bc6:	4a33      	ldr	r2, [pc, #204]	; (8000c94 <MX_TIM3_Init+0x100>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bea:	4829      	ldr	r0, [pc, #164]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000bec:	f002 fdf2 	bl	80037d4 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bf6:	f000 fb9f 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4822      	ldr	r0, [pc, #136]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000c08:	f003 f97c 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c12:	f000 fb91 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c16:	481e      	ldr	r0, [pc, #120]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000c18:	f002 fef5 	bl	8003a06 <HAL_TIM_PWM_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c22:	f000 fb89 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	4619      	mov	r1, r3
 8000c34:	4816      	ldr	r0, [pc, #88]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000c36:	f003 fd3f 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c40:	f000 fb7a 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c44:	2360      	movs	r3, #96	; 0x60
 8000c46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000c5c:	f003 f890 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c66:	f000 fb67 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000c72:	f003 f885 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c7c:	f000 fb5c 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <MX_TIM3_Init+0xfc>)
 8000c82:	f000 fda3 	bl	80017cc <HAL_TIM_MspPostInit>

}
 8000c86:	bf00      	nop
 8000c88:	3738      	adds	r7, #56	; 0x38
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000274 	.word	0x20000274
 8000c94:	40000400 	.word	0x40000400

08000c98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc8:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000cca:	4a3e      	ldr	r2, [pc, #248]	; (8000dc4 <MX_TIM4_Init+0x12c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cce:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cda:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cee:	4834      	ldr	r0, [pc, #208]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000cf0:	f002 fd70 	bl	80037d4 <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cfa:	f000 fb1d 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	482d      	ldr	r0, [pc, #180]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000d0c:	f003 f8fa 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d16:	f000 fb0f 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d1a:	4829      	ldr	r0, [pc, #164]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000d1c:	f002 fe73 	bl	8003a06 <HAL_TIM_PWM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d26:	f000 fb07 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	4619      	mov	r1, r3
 8000d38:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000d3a:	f003 fcbd 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d44:	f000 faf8 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d48:	2360      	movs	r3, #96	; 0x60
 8000d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000d60:	f003 f80e 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d6a:	f000 fae5 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2204      	movs	r2, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000d76:	f003 f803 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d80:	f000 fada 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2208      	movs	r2, #8
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000d8c:	f002 fff8 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000d96:	f000 facf 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000da2:	f002 ffed 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000dac:	f000 fac4 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM4_Init+0x128>)
 8000db2:	f000 fd0b 	bl	80017cc <HAL_TIM_MspPostInit>

}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200002bc 	.word	0x200002bc
 8000dc4:	40000800 	.word	0x40000800

08000dc8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b096      	sub	sp, #88	; 0x58
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f007 f8ef 	bl	8007fe4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e06:	4b50      	ldr	r3, [pc, #320]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e08:	4a50      	ldr	r2, [pc, #320]	; (8000f4c <MX_TIM8_Init+0x184>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e0c:	4b4e      	ldr	r3, [pc, #312]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e18:	4b4b      	ldr	r3, [pc, #300]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e26:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e32:	4845      	ldr	r0, [pc, #276]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e34:	f002 fcce 	bl	80037d4 <HAL_TIM_Base_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000e3e:	f000 fa7b 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	483e      	ldr	r0, [pc, #248]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e50:	f003 f858 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000e5a:	f000 fa6d 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e5e:	483a      	ldr	r0, [pc, #232]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e60:	f002 fdd1 	bl	8003a06 <HAL_TIM_PWM_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000e6a:	f000 fa65 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4832      	ldr	r0, [pc, #200]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000e7e:	f003 fc1b 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e88:	f000 fa56 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8c:	2360      	movs	r3, #96	; 0x60
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4825      	ldr	r0, [pc, #148]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000eb2:	f002 ff65 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000ebc:	f000 fa3c 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000eca:	f002 ff59 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000ed4:	f000 fa30 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	2208      	movs	r2, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4819      	ldr	r0, [pc, #100]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000ee2:	f002 ff4d 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000eec:	f000 fa24 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000efa:	f002 ff41 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000f04:	f000 fa18 	bl	8001338 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000f2c:	f003 fc40 	bl	80047b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000f36:	f000 f9ff 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f3a:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_TIM8_Init+0x180>)
 8000f3c:	f000 fc46 	bl	80017cc <HAL_TIM_MspPostInit>

}
 8000f40:	bf00      	nop
 8000f42:	3758      	adds	r7, #88	; 0x58
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000304 	.word	0x20000304
 8000f4c:	40010400 	.word	0x40010400

08000f50 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_TIM9_Init+0x6c>)
 8000f64:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <MX_TIM9_Init+0x70>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_TIM9_Init+0x6c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_TIM9_Init+0x6c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_TIM9_Init+0x6c>)
 8000f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_TIM9_Init+0x6c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_TIM9_Init+0x6c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_TIM9_Init+0x6c>)
 8000f8a:	f002 fc23 	bl	80037d4 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000f94:	f000 f9d0 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_TIM9_Init+0x6c>)
 8000fa4:	f002 ffae 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000fae:	f000 f9c3 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000034c 	.word	0x2000034c
 8000fc0:	40014000 	.word	0x40014000

08000fc4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	615a      	str	r2, [r3, #20]
 8000fe8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000fea:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <MX_TIM12_Init+0xd4>)
 8000fec:	4a2b      	ldr	r2, [pc, #172]	; (800109c <MX_TIM12_Init+0xd8>)
 8000fee:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <MX_TIM12_Init+0xd4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <MX_TIM12_Init+0xd4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <MX_TIM12_Init+0xd4>)
 8000ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001002:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <MX_TIM12_Init+0xd4>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_TIM12_Init+0xd4>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001010:	4821      	ldr	r0, [pc, #132]	; (8001098 <MX_TIM12_Init+0xd4>)
 8001012:	f002 fbdf 	bl	80037d4 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800101c:	f000 f98c 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	4619      	mov	r1, r3
 800102c:	481a      	ldr	r0, [pc, #104]	; (8001098 <MX_TIM12_Init+0xd4>)
 800102e:	f002 ff69 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001038:	f000 f97e 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <MX_TIM12_Init+0xd4>)
 800103e:	f002 fce2 	bl	8003a06 <HAL_TIM_PWM_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001048:	f000 f976 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104c:	2360      	movs	r3, #96	; 0x60
 800104e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_TIM12_Init+0xd4>)
 8001064:	f002 fe8c 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800106e:	f000 f963 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2204      	movs	r2, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM12_Init+0xd4>)
 800107a:	f002 fe81 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001084:	f000 f958 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM12_Init+0xd4>)
 800108a:	f000 fb9f 	bl	80017cc <HAL_TIM_MspPostInit>

}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000394 	.word	0x20000394
 800109c:	40001800 	.word	0x40001800

080010a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_USART2_UART_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010d8:	f003 fbd0 	bl	800487c <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010e2:	f000 f929 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003dc 	.word	0x200003dc
 80010f0:	40004400 	.word	0x40004400

080010f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001102:	2204      	movs	r2, #4
 8001104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001108:	2202      	movs	r2, #2
 800110a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001114:	2202      	movs	r2, #2
 8001116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111a:	2201      	movs	r2, #1
 800111c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112c:	2201      	movs	r2, #1
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001138:	f001 fd64 	bl	8002c04 <HAL_PCD_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f8f9 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000420 	.word	0x20000420

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
 800116a:	4b61      	ldr	r3, [pc, #388]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a60      	ldr	r2, [pc, #384]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b5e      	ldr	r3, [pc, #376]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	623b      	str	r3, [r7, #32]
 8001180:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	4b5a      	ldr	r3, [pc, #360]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b57      	ldr	r3, [pc, #348]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a4b      	ldr	r2, [pc, #300]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <MX_GPIO_Init+0x1a0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800124c:	4829      	ldr	r0, [pc, #164]	; (80012f4 <MX_GPIO_Init+0x1a4>)
 800124e:	f001 fb7b 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001252:	2200      	movs	r2, #0
 8001254:	f647 61fc 	movw	r1, #32508	; 0x7efc
 8001258:	4827      	ldr	r0, [pc, #156]	; (80012f8 <MX_GPIO_Init+0x1a8>)
 800125a:	f001 fb75 	bl	8002948 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|Cs_Dis8_19_20_Pin|Cs_Dis8_17_18_Pin
                          |Cs_Dis8_15_16_Pin|Cs_Dis8_13_14_Pin|Cs_Dis8_11_12_Pin|Cs_Dis8_9_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Din3_Pin Din4_Pin Din5_Pin Din6_Pin
                           Din7_Pin Din1_Pin Din2_Pin */
  GPIO_InitStruct.Pin = Din3_Pin|Din4_Pin|Din5_Pin|Din6_Pin
 800125e:	237f      	movs	r3, #127	; 0x7f
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
                          |Din7_Pin|Din1_Pin|Din2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001266:	2302      	movs	r3, #2
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <MX_GPIO_Init+0x1ac>)
 8001272:	f001 f9cd 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001276:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	481d      	ldr	r0, [pc, #116]	; (8001300 <MX_GPIO_Init+0x1b0>)
 800128c:	f001 f9c0 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001290:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4815      	ldr	r0, [pc, #84]	; (80012fc <MX_GPIO_Init+0x1ac>)
 80012a6:	f001 f9b3 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80012aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_GPIO_Init+0x1a4>)
 80012c4:	f001 f9a4 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG4 PG5
                           PG6 PG7 Cs_Dis8_19_20_Pin Cs_Dis8_17_18_Pin
                           Cs_Dis8_15_16_Pin Cs_Dis8_13_14_Pin Cs_Dis8_11_12_Pin Cs_Dis8_9_10_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80012c8:	f647 63fc 	movw	r3, #32508	; 0x7efc
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|Cs_Dis8_19_20_Pin|Cs_Dis8_17_18_Pin
                          |Cs_Dis8_15_16_Pin|Cs_Dis8_13_14_Pin|Cs_Dis8_11_12_Pin|Cs_Dis8_9_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_GPIO_Init+0x1a8>)
 80012e2:	f001 f995 	bl	8002610 <HAL_GPIO_Init>

}
 80012e6:	bf00      	nop
 80012e8:	3738      	adds	r7, #56	; 0x38
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400

08001304 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f004 f999 	bl	8005644 <osDelay>
 8001312:	e7fb      	b.n	800130c <StartDefaultTask+0x8>

08001314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001326:	f000 fcef 	bl	8001d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40002000 	.word	0x40002000

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_MspInit+0x54>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_MspInit+0x54>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_MspInit+0x54>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_MspInit+0x54>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_MspInit+0x54>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_MspInit+0x54>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	210f      	movs	r1, #15
 8001386:	f06f 0001 	mvn.w	r0, #1
 800138a:	f001 f917 	bl	80025bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	; 0x40
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a5f      	ldr	r2, [pc, #380]	; (8001538 <HAL_ADC_MspInit+0x19c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d142      	bne.n	8001444 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c2:	4b5e      	ldr	r3, [pc, #376]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a5d      	ldr	r2, [pc, #372]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b5b      	ldr	r3, [pc, #364]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
 80013de:	4b57      	ldr	r3, [pc, #348]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a56      	ldr	r2, [pc, #344]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b54      	ldr	r3, [pc, #336]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a4f      	ldr	r2, [pc, #316]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	6a3b      	ldr	r3, [r7, #32]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001412:	2330      	movs	r3, #48	; 0x30
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	4846      	ldr	r0, [pc, #280]	; (8001540 <HAL_ADC_MspInit+0x1a4>)
 8001426:	f001 f8f3 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800142a:	2303      	movs	r3, #3
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143a:	4619      	mov	r1, r3
 800143c:	4841      	ldr	r0, [pc, #260]	; (8001544 <HAL_ADC_MspInit+0x1a8>)
 800143e:	f001 f8e7 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001442:	e075      	b.n	8001530 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a3f      	ldr	r2, [pc, #252]	; (8001548 <HAL_ADC_MspInit+0x1ac>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d142      	bne.n	80014d4 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a39      	ldr	r2, [pc, #228]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a32      	ldr	r2, [pc, #200]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a2b      	ldr	r2, [pc, #172]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014a2:	230f      	movs	r3, #15
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a6:	2303      	movs	r3, #3
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b2:	4619      	mov	r1, r3
 80014b4:	4822      	ldr	r0, [pc, #136]	; (8001540 <HAL_ADC_MspInit+0x1a4>)
 80014b6:	f001 f8ab 	bl	8002610 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014ba:	23ff      	movs	r3, #255	; 0xff
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014be:	2303      	movs	r3, #3
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ca:	4619      	mov	r1, r3
 80014cc:	481f      	ldr	r0, [pc, #124]	; (800154c <HAL_ADC_MspInit+0x1b0>)
 80014ce:	f001 f89f 	bl	8002610 <HAL_GPIO_Init>
}
 80014d2:	e02d      	b.n	8001530 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC3)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0x1b4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d128      	bne.n	8001530 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a15      	ldr	r2, [pc, #84]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80014e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_ADC_MspInit+0x1a0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001516:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001528:	4619      	mov	r1, r3
 800152a:	480a      	ldr	r0, [pc, #40]	; (8001554 <HAL_ADC_MspInit+0x1b8>)
 800152c:	f001 f870 	bl	8002610 <HAL_GPIO_Init>
}
 8001530:	bf00      	nop
 8001532:	3740      	adds	r7, #64	; 0x40
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40012000 	.word	0x40012000
 800153c:	40023800 	.word	0x40023800
 8001540:	40020800 	.word	0x40020800
 8001544:	40020400 	.word	0x40020400
 8001548:	40012100 	.word	0x40012100
 800154c:	40020000 	.word	0x40020000
 8001550:	40012200 	.word	0x40012200
 8001554:	40021400 	.word	0x40021400

08001558 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_CAN_MspInit+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12b      	bne.n	80015d2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_CAN_MspInit+0x88>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <HAL_CAN_MspInit+0x88>)
 8001584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_CAN_MspInit+0x88>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_CAN_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_CAN_MspInit+0x88>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_CAN_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015b2:	2303      	movs	r3, #3
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015c2:	2309      	movs	r3, #9
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_CAN_MspInit+0x8c>)
 80015ce:	f001 f81f 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40006400 	.word	0x40006400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_I2C_MspInit+0x84>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12b      	bne.n	8001662 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_I2C_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001626:	2303      	movs	r3, #3
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	2312      	movs	r3, #18
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162e:	2301      	movs	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001636:	2304      	movs	r3, #4
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <HAL_I2C_MspInit+0x8c>)
 8001642:	f000 ffe5 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_I2C_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40005800 	.word	0x40005800
 8001670:	40023800 	.word	0x40023800
 8001674:	40021400 	.word	0x40021400

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4a      	ldr	r2, [pc, #296]	; (80017b0 <HAL_TIM_Base_MspInit+0x138>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10e      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80016a6:	e07e      	b.n	80017a6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b0:	d10e      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a3e      	ldr	r2, [pc, #248]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	6a3b      	ldr	r3, [r7, #32]
}
 80016ce:	e06a      	b.n	80017a6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <HAL_TIM_Base_MspInit+0x140>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10e      	bne.n	80016f8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a34      	ldr	r2, [pc, #208]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
}
 80016f6:	e056      	b.n	80017a6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM4)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <HAL_TIM_Base_MspInit+0x144>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10e      	bne.n	8001720 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
}
 800171e:	e042      	b.n	80017a6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM8)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <HAL_TIM_Base_MspInit+0x148>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d116      	bne.n	8001758 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	210f      	movs	r1, #15
 800174a:	202d      	movs	r0, #45	; 0x2d
 800174c:	f000 ff36 	bl	80025bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001750:	202d      	movs	r0, #45	; 0x2d
 8001752:	f000 ff4f 	bl	80025f4 <HAL_NVIC_EnableIRQ>
}
 8001756:	e026      	b.n	80017a6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_TIM_Base_MspInit+0x14c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10e      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
}
 800177e:	e012      	b.n	80017a6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM12)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_Base_MspInit+0x150>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10d      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 8001794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_TIM_Base_MspInit+0x13c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800
 80017c0:	40010400 	.word	0x40010400
 80017c4:	40014000 	.word	0x40014000
 80017c8:	40001800 	.word	0x40001800

080017cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a7e      	ldr	r2, [pc, #504]	; (80019e4 <HAL_TIM_MspPostInit+0x218>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d11f      	bne.n	800182e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	4b7d      	ldr	r3, [pc, #500]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a7c      	ldr	r2, [pc, #496]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800180a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800181c:	2301      	movs	r3, #1
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4871      	ldr	r0, [pc, #452]	; (80019ec <HAL_TIM_MspPostInit+0x220>)
 8001828:	f000 fef2 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800182c:	e0d5      	b.n	80019da <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001836:	d13e      	bne.n	80018b6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a69      	ldr	r2, [pc, #420]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a62      	ldr	r2, [pc, #392]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b60      	ldr	r3, [pc, #384]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8001870:	f640 4308 	movw	r3, #3080	; 0xc08
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001882:	2301      	movs	r3, #1
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	4858      	ldr	r0, [pc, #352]	; (80019f0 <HAL_TIM_MspPostInit+0x224>)
 800188e:	f000 febf 	bl	8002610 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a4:	2301      	movs	r3, #1
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	4851      	ldr	r0, [pc, #324]	; (80019f4 <HAL_TIM_MspPostInit+0x228>)
 80018b0:	f000 feae 	bl	8002610 <HAL_GPIO_Init>
}
 80018b4:	e091      	b.n	80019da <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM3)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a4f      	ldr	r2, [pc, #316]	; (80019f8 <HAL_TIM_MspPostInit+0x22c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d11e      	bne.n	80018fe <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a47      	ldr	r2, [pc, #284]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018dc:	2330      	movs	r3, #48	; 0x30
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ec:	2302      	movs	r3, #2
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	483e      	ldr	r0, [pc, #248]	; (80019f0 <HAL_TIM_MspPostInit+0x224>)
 80018f8:	f000 fe8a 	bl	8002610 <HAL_GPIO_Init>
}
 80018fc:	e06d      	b.n	80019da <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM4)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <HAL_TIM_MspPostInit+0x230>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d11f      	bne.n	8001948 <HAL_TIM_MspPostInit+0x17c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a35      	ldr	r2, [pc, #212]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001924:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001936:	2302      	movs	r3, #2
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	482f      	ldr	r0, [pc, #188]	; (8001a00 <HAL_TIM_MspPostInit+0x234>)
 8001942:	f000 fe65 	bl	8002610 <HAL_GPIO_Init>
}
 8001946:	e048      	b.n	80019da <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM8)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <HAL_TIM_MspPostInit+0x238>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d11f      	bne.n	8001992 <HAL_TIM_MspPostInit+0x1c6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800196e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001980:	2303      	movs	r3, #3
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	481f      	ldr	r0, [pc, #124]	; (8001a08 <HAL_TIM_MspPostInit+0x23c>)
 800198c:	f000 fe40 	bl	8002610 <HAL_GPIO_Init>
}
 8001990:	e023      	b.n	80019da <HAL_TIM_MspPostInit+0x20e>
  else if(htim->Instance==TIM12)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_TIM_MspPostInit+0x240>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d11e      	bne.n	80019da <HAL_TIM_MspPostInit+0x20e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_TIM_MspPostInit+0x21c>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80019ca:	2309      	movs	r3, #9
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	4806      	ldr	r0, [pc, #24]	; (80019f0 <HAL_TIM_MspPostInit+0x224>)
 80019d6:	f000 fe1b 	bl	8002610 <HAL_GPIO_Init>
}
 80019da:	bf00      	nop
 80019dc:	3738      	adds	r7, #56	; 0x38
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40010000 	.word	0x40010000
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40000800 	.word	0x40000800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40010400 	.word	0x40010400
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40001800 	.word	0x40001800

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_UART_MspInit+0x84>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12b      	bne.n	8001a8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_UART_MspInit+0x88>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_UART_MspInit+0x88>)
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_UART_MspInit+0x88>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_UART_MspInit+0x88>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <HAL_UART_MspInit+0x88>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_UART_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a6a:	2360      	movs	r3, #96	; 0x60
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <HAL_UART_MspInit+0x8c>)
 8001a86:	f000 fdc3 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40004400 	.word	0x40004400
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020c00 	.word	0x40020c00

08001aa0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac0:	d13f      	bne.n	8001b42 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_PCD_MspInit+0xac>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a20      	ldr	r2, [pc, #128]	; (8001b4c <HAL_PCD_MspInit+0xac>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_PCD_MspInit+0xac>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001ade:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001af0:	230a      	movs	r3, #10
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	4815      	ldr	r0, [pc, #84]	; (8001b50 <HAL_PCD_MspInit+0xb0>)
 8001afc:	f000 fd88 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	480e      	ldr	r0, [pc, #56]	; (8001b50 <HAL_PCD_MspInit+0xb0>)
 8001b16:	f000 fd7b 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_PCD_MspInit+0xac>)
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_PCD_MspInit+0xac>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	6353      	str	r3, [r2, #52]	; 0x34
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_PCD_MspInit+0xac>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_PCD_MspInit+0xac>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_PCD_MspInit+0xac>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000

08001b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	202d      	movs	r0, #45	; 0x2d
 8001b6a:	f000 fd27 	bl	80025bc <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b6e:	202d      	movs	r0, #45	; 0x2d
 8001b70:	f000 fd40 	bl	80025f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_InitTick+0xa0>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_InitTick+0xa0>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6413      	str	r3, [r2, #64]	; 0x40
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_InitTick+0xa0>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b90:	f107 0210 	add.w	r2, r7, #16
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fde8 	bl	8003770 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ba0:	f001 fdbe 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8001ba4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <HAL_InitTick+0xa4>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9b      	lsrs	r3, r3, #18
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_InitTick+0xa8>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <HAL_InitTick+0xac>)
 8001bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_InitTick+0xa8>)
 8001bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_InitTick+0xa8>)
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_InitTick+0xa8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_InitTick+0xa8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <HAL_InitTick+0xa8>)
 8001bd6:	f001 fdfd 	bl	80037d4 <HAL_TIM_Base_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d104      	bne.n	8001bea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001be0:	4806      	ldr	r0, [pc, #24]	; (8001bfc <HAL_InitTick+0xa8>)
 8001be2:	f001 fe47 	bl	8003874 <HAL_TIM_Base_Start_IT>
 8001be6:	4603      	mov	r3, r0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3730      	adds	r7, #48	; 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	431bde83 	.word	0x431bde83
 8001bfc:	20000930 	.word	0x20000930
 8001c00:	40002000 	.word	0x40002000

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <NMI_Handler+0x4>

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8001c36:	f001 ff3f 	bl	8003ab8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8001c3c:	f001 ff3c 	bl	8003ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000304 	.word	0x20000304
 8001c48:	20000930 	.word	0x20000930

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c76:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c8c:	4c0b      	ldr	r4, [pc, #44]	; (8001cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c9a:	f7ff ffd7 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f006 f96d 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7fe fc17 	bl	80004d4 <main>
  bx  lr    
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001cb4:	08008260 	.word	0x08008260
  ldr r2, =_sbss
 8001cb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cbc:	20005394 	.word	0x20005394

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_Init+0x40>)
 8001cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_Init+0x40>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x40>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 fc5a 	bl	80025a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f7ff ff2e 	bl	8001b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fb24 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000978 	.word	0x20000978

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000978 	.word	0x20000978

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff ffee 	bl	8001d30 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d005      	beq.n	8001d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_Delay+0x44>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d6e:	bf00      	nop
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8f7      	bhi.n	8001d70 <HAL_Delay+0x28>
  {
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008

08001d90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e033      	b.n	8001e0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff faf4 	bl	800139c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd6:	f023 0302 	bic.w	r3, r3, #2
 8001dda:	f043 0202 	orr.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f93a 	bl	800205c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dfe:	e001      	b.n	8001e04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e105      	b.n	8002040 <HAL_ADC_ConfigChannel+0x228>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d925      	bls.n	8001e90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68d9      	ldr	r1, [r3, #12]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	3b1e      	subs	r3, #30
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68d9      	ldr	r1, [r3, #12]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4403      	add	r3, r0
 8001e82:	3b1e      	subs	r3, #30
 8001e84:	409a      	lsls	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	e022      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6919      	ldr	r1, [r3, #16]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6919      	ldr	r1, [r3, #16]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4403      	add	r3, r0
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d824      	bhi.n	8001f28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b05      	subs	r3, #5
 8001ef0:	221f      	movs	r2, #31
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	400a      	ands	r2, r1
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b05      	subs	r3, #5
 8001f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
 8001f26:	e04c      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d824      	bhi.n	8001f7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b23      	subs	r3, #35	; 0x23
 8001f42:	221f      	movs	r2, #31
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	400a      	ands	r2, r1
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b23      	subs	r3, #35	; 0x23
 8001f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
 8001f78:	e023      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b41      	subs	r3, #65	; 0x41
 8001f8c:	221f      	movs	r2, #31
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	400a      	ands	r2, r1
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b41      	subs	r3, #65	; 0x41
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_ADC_ConfigChannel+0x234>)
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a21      	ldr	r2, [pc, #132]	; (8002050 <HAL_ADC_ConfigChannel+0x238>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1cc>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b12      	cmp	r3, #18
 8001fd6:	d105      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_ADC_ConfigChannel+0x238>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d123      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x21e>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d003      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x1e6>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b11      	cmp	r3, #17
 8001ffc:	d11b      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b10      	cmp	r3, #16
 8002010:	d111      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_ADC_ConfigChannel+0x23c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_ADC_ConfigChannel+0x240>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	0c9a      	lsrs	r2, r3, #18
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002028:	e002      	b.n	8002030 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3b01      	subs	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012300 	.word	0x40012300
 8002050:	40012000 	.word	0x40012000
 8002054:	20000000 	.word	0x20000000
 8002058:	431bde83 	.word	0x431bde83

0800205c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002064:	4b79      	ldr	r3, [pc, #484]	; (800224c <ADC_Init+0x1f0>)
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	021a      	lsls	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6899      	ldr	r1, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	4a58      	ldr	r2, [pc, #352]	; (8002250 <ADC_Init+0x1f4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002102:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6899      	ldr	r1, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e00f      	b.n	800215a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0202 	bic.w	r2, r2, #2
 8002168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7e1b      	ldrb	r3, [r3, #24]
 8002174:	005a      	lsls	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002196:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	3b01      	subs	r3, #1
 80021b4:	035a      	lsls	r2, r3, #13
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e007      	b.n	80021d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	051a      	lsls	r2, r3, #20
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002204:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6899      	ldr	r1, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002212:	025a      	lsls	r2, r3, #9
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6899      	ldr	r1, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	029a      	lsls	r2, r3, #10
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40012300 	.word	0x40012300
 8002250:	0f000001 	.word	0x0f000001

08002254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0ed      	b.n	8002442 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff f970 	bl	8001558 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002288:	f7ff fd52 	bl	8001d30 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800228e:	e012      	b.n	80022b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002290:	f7ff fd4e 	bl	8001d30 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b0a      	cmp	r3, #10
 800229c:	d90b      	bls.n	80022b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2205      	movs	r2, #5
 80022ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0c5      	b.n	8002442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0e5      	beq.n	8002290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0202 	bic.w	r2, r2, #2
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d4:	f7ff fd2c 	bl	8001d30 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022da:	e012      	b.n	8002302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022dc:	f7ff fd28 	bl	8001d30 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b0a      	cmp	r3, #10
 80022e8:	d90b      	bls.n	8002302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2205      	movs	r2, #5
 80022fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e09f      	b.n	8002442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e5      	bne.n	80022dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e1b      	ldrb	r3, [r3, #24]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e007      	b.n	800233a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7e5b      	ldrb	r3, [r3, #25]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e007      	b.n	8002364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7e9b      	ldrb	r3, [r3, #26]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d108      	bne.n	800237e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0220 	orr.w	r2, r2, #32
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e007      	b.n	800238e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0220 	bic.w	r2, r2, #32
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7edb      	ldrb	r3, [r3, #27]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0210 	bic.w	r2, r2, #16
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e007      	b.n	80023b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0210 	orr.w	r2, r2, #16
 80023b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7f1b      	ldrb	r3, [r3, #28]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d108      	bne.n	80023d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0208 	orr.w	r2, r2, #8
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e007      	b.n	80023e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0208 	bic.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7f5b      	ldrb	r3, [r3, #29]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0204 	orr.w	r2, r2, #4
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e007      	b.n	800240c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	ea42 0103 	orr.w	r1, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	1e5a      	subs	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60d3      	str	r3, [r2, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db0b      	blt.n	80024da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	f003 021f 	and.w	r2, r3, #31
 80024c8:	4907      	ldr	r1, [pc, #28]	; (80024e8 <__NVIC_EnableIRQ+0x38>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2001      	movs	r0, #1
 80024d2:	fa00 f202 	lsl.w	r2, r0, r2
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	; (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	4313      	orrs	r3, r2
         );
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff4c 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ce:	f7ff ff61 	bl	8002494 <__NVIC_GetPriorityGrouping>
 80025d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	6978      	ldr	r0, [r7, #20]
 80025da:	f7ff ffb1 	bl	8002540 <NVIC_EncodePriority>
 80025de:	4602      	mov	r2, r0
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff80 	bl	80024ec <__NVIC_SetPriority>
}
 80025ec:	bf00      	nop
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff54 	bl	80024b0 <__NVIC_EnableIRQ>
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e16b      	b.n	8002904 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 815a 	bne.w	80028fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d005      	beq.n	8002662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265e:	2b02      	cmp	r3, #2
 8002660:	d130      	bne.n	80026c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0201 	and.w	r2, r3, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d017      	beq.n	8002700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80b4 	beq.w	80028fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b60      	ldr	r3, [pc, #384]	; (800291c <HAL_GPIO_Init+0x30c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a5f      	ldr	r2, [pc, #380]	; (800291c <HAL_GPIO_Init+0x30c>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b5d      	ldr	r3, [pc, #372]	; (800291c <HAL_GPIO_Init+0x30c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b2:	4a5b      	ldr	r2, [pc, #364]	; (8002920 <HAL_GPIO_Init+0x310>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x314>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02b      	beq.n	8002836 <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x318>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d025      	beq.n	8002832 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_GPIO_Init+0x31c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01f      	beq.n	800282e <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_GPIO_Init+0x320>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x21a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4e      	ldr	r2, [pc, #312]	; (8002934 <HAL_GPIO_Init+0x324>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x216>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4d      	ldr	r2, [pc, #308]	; (8002938 <HAL_GPIO_Init+0x328>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x212>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4c      	ldr	r2, [pc, #304]	; (800293c <HAL_GPIO_Init+0x32c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x20e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4b      	ldr	r2, [pc, #300]	; (8002940 <HAL_GPIO_Init+0x330>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x20a>
 8002816:	2307      	movs	r3, #7
 8002818:	e00e      	b.n	8002838 <HAL_GPIO_Init+0x228>
 800281a:	2308      	movs	r3, #8
 800281c:	e00c      	b.n	8002838 <HAL_GPIO_Init+0x228>
 800281e:	2306      	movs	r3, #6
 8002820:	e00a      	b.n	8002838 <HAL_GPIO_Init+0x228>
 8002822:	2305      	movs	r3, #5
 8002824:	e008      	b.n	8002838 <HAL_GPIO_Init+0x228>
 8002826:	2304      	movs	r3, #4
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x228>
 800282a:	2303      	movs	r3, #3
 800282c:	e004      	b.n	8002838 <HAL_GPIO_Init+0x228>
 800282e:	2302      	movs	r3, #2
 8002830:	e002      	b.n	8002838 <HAL_GPIO_Init+0x228>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_GPIO_Init+0x228>
 8002836:	2300      	movs	r3, #0
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f002 0203 	and.w	r2, r2, #3
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	4093      	lsls	r3, r2
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002848:	4935      	ldr	r1, [pc, #212]	; (8002920 <HAL_GPIO_Init+0x310>)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	3302      	adds	r3, #2
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_GPIO_Init+0x334>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287a:	4a32      	ldr	r2, [pc, #200]	; (8002944 <HAL_GPIO_Init+0x334>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <HAL_GPIO_Init+0x334>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a4:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_GPIO_Init+0x334>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_GPIO_Init+0x334>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_GPIO_Init+0x334>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_GPIO_Init+0x334>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_GPIO_Init+0x334>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	f67f ae90 	bls.w	800262c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40013800 	.word	0x40013800
 8002924:	40020000 	.word	0x40020000
 8002928:	40020400 	.word	0x40020400
 800292c:	40020800 	.word	0x40020800
 8002930:	40020c00 	.word	0x40020c00
 8002934:	40021000 	.word	0x40021000
 8002938:	40021400 	.word	0x40021400
 800293c:	40021800 	.word	0x40021800
 8002940:	40021c00 	.word	0x40021c00
 8002944:	40013c00 	.word	0x40013c00

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e12b      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe fe20 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e0:	f000 fe9e 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a81      	ldr	r2, [pc, #516]	; (8002bf0 <HAL_I2C_Init+0x274>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d807      	bhi.n	8002a00 <HAL_I2C_Init+0x84>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_I2C_Init+0x278>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bf94      	ite	ls
 80029f8:	2301      	movls	r3, #1
 80029fa:	2300      	movhi	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e006      	b.n	8002a0e <HAL_I2C_Init+0x92>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a7d      	ldr	r2, [pc, #500]	; (8002bf8 <HAL_I2C_Init+0x27c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0e7      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a78      	ldr	r2, [pc, #480]	; (8002bfc <HAL_I2C_Init+0x280>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0c9b      	lsrs	r3, r3, #18
 8002a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a6a      	ldr	r2, [pc, #424]	; (8002bf0 <HAL_I2C_Init+0x274>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d802      	bhi.n	8002a50 <HAL_I2C_Init+0xd4>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	e009      	b.n	8002a64 <HAL_I2C_Init+0xe8>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	4a69      	ldr	r2, [pc, #420]	; (8002c00 <HAL_I2C_Init+0x284>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	3301      	adds	r3, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	495c      	ldr	r1, [pc, #368]	; (8002bf0 <HAL_I2C_Init+0x274>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d819      	bhi.n	8002ab8 <HAL_I2C_Init+0x13c>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e59      	subs	r1, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a98:	400b      	ands	r3, r1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_I2C_Init+0x138>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e59      	subs	r1, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab2:	e051      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	e04f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d111      	bne.n	8002ae4 <HAL_I2C_Init+0x168>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e012      	b.n	8002b0a <HAL_I2C_Init+0x18e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x196>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e022      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <HAL_I2C_Init+0x1bc>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e58      	subs	r0, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	440b      	add	r3, r1
 8002b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b36:	e00f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	6809      	ldr	r1, [r1, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6911      	ldr	r1, [r2, #16]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	000186a0 	.word	0x000186a0
 8002bf4:	001e847f 	.word	0x001e847f
 8002bf8:	003d08ff 	.word	0x003d08ff
 8002bfc:	431bde83 	.word	0x431bde83
 8002c00:	10624dd3 	.word	0x10624dd3

08002c04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b08f      	sub	sp, #60	; 0x3c
 8002c08:	af0a      	add	r7, sp, #40	; 0x28
 8002c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e10f      	b.n	8002e36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe ff35 	bl	8001aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d102      	bne.n	8002c50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 f934 	bl	8004ec2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	687e      	ldr	r6, [r7, #4]
 8002c62:	466d      	mov	r5, sp
 8002c64:	f106 0410 	add.w	r4, r6, #16
 8002c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c78:	1d33      	adds	r3, r6, #4
 8002c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f002 f8bf 	bl	8004e00 <USB_CoreInit>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d0      	b.n	8002e36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 f922 	bl	8004ee4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e04a      	b.n	8002d3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	333d      	adds	r3, #61	; 0x3d
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	333c      	adds	r3, #60	; 0x3c
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	b298      	uxth	r0, r3
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3344      	adds	r3, #68	; 0x44
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3340      	adds	r3, #64	; 0x40
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3348      	adds	r3, #72	; 0x48
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	334c      	adds	r3, #76	; 0x4c
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3354      	adds	r3, #84	; 0x54
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3af      	bcc.n	8002ca6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e044      	b.n	8002dd6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3b5      	bcc.n	8002d4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	687e      	ldr	r6, [r7, #4]
 8002de8:	466d      	mov	r5, sp
 8002dea:	f106 0410 	add.w	r4, r6, #16
 8002dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dfe:	1d33      	adds	r3, r6, #4
 8002e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f002 f8ba 	bl	8004f7c <USB_DevInit>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00d      	b.n	8002e36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 fa85 	bl	800533e <USB_DevDisconnect>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e267      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d075      	beq.n	8002f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d00c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d112      	bne.n	8002e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4b82      	ldr	r3, [pc, #520]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e82:	d10b      	bne.n	8002e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	4b7e      	ldr	r3, [pc, #504]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d05b      	beq.n	8002f48 <HAL_RCC_OscConfig+0x108>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d157      	bne.n	8002f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e242      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x74>
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e01d      	b.n	8002ef0 <HAL_RCC_OscConfig+0xb0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x98>
 8002ebe:	4b70      	ldr	r3, [pc, #448]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6f      	ldr	r2, [pc, #444]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6c      	ldr	r2, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xb0>
 8002ed8:	4b69      	ldr	r3, [pc, #420]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a68      	ldr	r2, [pc, #416]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b66      	ldr	r3, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a65      	ldr	r2, [pc, #404]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe ff1a 	bl	8001d30 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe ff16 	bl	8001d30 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e207      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b5b      	ldr	r3, [pc, #364]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0xc0>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe ff06 	bl	8001d30 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f28:	f7fe ff02 	bl	8001d30 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1f3      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0xe8>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d063      	beq.n	800301e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6e:	4b44      	ldr	r3, [pc, #272]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d116      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x152>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1c7      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4937      	ldr	r1, [pc, #220]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	e03a      	b.n	800301e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb0:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_OscConfig+0x244>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe febb 	bl	8001d30 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe feb7 	bl	8001d30 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1a8      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fdc:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4925      	ldr	r1, [pc, #148]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	e015      	b.n	800301e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCC_OscConfig+0x244>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe9a 	bl	8001d30 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003000:	f7fe fe96 	bl	8001d30 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e187      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d036      	beq.n	8003098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d016      	beq.n	8003060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_RCC_OscConfig+0x248>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fe fe7a 	bl	8001d30 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe fe76 	bl	8001d30 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e167      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8003054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x200>
 800305e:	e01b      	b.n	8003098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCC_OscConfig+0x248>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7fe fe63 	bl	8001d30 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	e00e      	b.n	800308c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306e:	f7fe fe5f 	bl	8001d30 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d907      	bls.n	800308c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e150      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
 8003080:	40023800 	.word	0x40023800
 8003084:	42470000 	.word	0x42470000
 8003088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	4b88      	ldr	r3, [pc, #544]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ea      	bne.n	800306e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8097 	beq.w	80031d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030aa:	4b81      	ldr	r3, [pc, #516]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b7d      	ldr	r3, [pc, #500]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a7c      	ldr	r2, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b77      	ldr	r3, [pc, #476]	; (80032b4 <HAL_RCC_OscConfig+0x474>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d118      	bne.n	8003114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e2:	4b74      	ldr	r3, [pc, #464]	; (80032b4 <HAL_RCC_OscConfig+0x474>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a73      	ldr	r2, [pc, #460]	; (80032b4 <HAL_RCC_OscConfig+0x474>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fe1f 	bl	8001d30 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f6:	f7fe fe1b 	bl	8001d30 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e10c      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	4b6a      	ldr	r3, [pc, #424]	; (80032b4 <HAL_RCC_OscConfig+0x474>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x2ea>
 800311c:	4b64      	ldr	r3, [pc, #400]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a63      	ldr	r2, [pc, #396]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
 8003128:	e01c      	b.n	8003164 <HAL_RCC_OscConfig+0x324>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x30c>
 8003132:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a5e      	ldr	r2, [pc, #376]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	4b5c      	ldr	r3, [pc, #368]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0x324>
 800314c:	4b58      	ldr	r3, [pc, #352]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a57      	ldr	r2, [pc, #348]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	4b55      	ldr	r3, [pc, #340]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a54      	ldr	r2, [pc, #336]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800315e:	f023 0304 	bic.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d015      	beq.n	8003198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fe fde0 	bl	8001d30 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	e00a      	b.n	800318a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fe fddc 	bl	8001d30 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0cb      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	4b49      	ldr	r3, [pc, #292]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ee      	beq.n	8003174 <HAL_RCC_OscConfig+0x334>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003198:	f7fe fdca 	bl	8001d30 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fe fdc6 	bl	8001d30 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0b5      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	4b3e      	ldr	r3, [pc, #248]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ee      	bne.n	80031a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c8:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	4a38      	ldr	r2, [pc, #224]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80031ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80a1 	beq.w	8003320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031de:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d05c      	beq.n	80032a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d141      	bne.n	8003276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <HAL_RCC_OscConfig+0x478>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fe fd9a 	bl	8001d30 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe fd96 	bl	8001d30 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e087      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	019b      	lsls	r3, r3, #6
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	3b01      	subs	r3, #1
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	491b      	ldr	r1, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x478>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fe fd6f 	bl	8001d30 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003256:	f7fe fd6b 	bl	8001d30 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e05c      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x416>
 8003274:	e054      	b.n	8003320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_RCC_OscConfig+0x478>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fd58 	bl	8001d30 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe fd54 	bl	8001d30 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e045      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x444>
 80032a2:	e03d      	b.n	8003320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e038      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40007000 	.word	0x40007000
 80032b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4ec>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d028      	beq.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d121      	bne.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d11a      	bne.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d111      	bne.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	3b01      	subs	r3, #1
 8003306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d107      	bne.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800

08003330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0cc      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d90c      	bls.n	800336c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b8      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003384:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800338e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b50      	ldr	r3, [pc, #320]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	494d      	ldr	r1, [pc, #308]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d044      	beq.n	8003450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d119      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d003      	beq.n	80033ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e067      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4934      	ldr	r1, [pc, #208]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	4313      	orrs	r3, r2
 800341e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003420:	f7fe fc86 	bl	8001d30 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	e00a      	b.n	800343e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f7fe fc82 	bl	8001d30 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e04f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 020c 	and.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d1eb      	bne.n	8003428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d20c      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e032      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4916      	ldr	r1, [pc, #88]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b6:	f000 f821 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	490a      	ldr	r1, [pc, #40]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	5ccb      	ldrb	r3, [r1, r3]
 80034ca:	fa22 f303 	lsr.w	r3, r2, r3
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fb3c 	bl	8001b54 <HAL_InitTick>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023c00 	.word	0x40023c00
 80034ec:	40023800 	.word	0x40023800
 80034f0:	080081d8 	.word	0x080081d8
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000004 	.word	0x20000004

080034fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003500:	b094      	sub	sp, #80	; 0x50
 8003502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	647b      	str	r3, [r7, #68]	; 0x44
 8003508:	2300      	movs	r3, #0
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800350c:	2300      	movs	r3, #0
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003514:	4b79      	ldr	r3, [pc, #484]	; (80036fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d00d      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x40>
 8003520:	2b08      	cmp	r3, #8
 8003522:	f200 80e1 	bhi.w	80036e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x34>
 800352a:	2b04      	cmp	r3, #4
 800352c:	d003      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x3a>
 800352e:	e0db      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4b73      	ldr	r3, [pc, #460]	; (8003700 <HAL_RCC_GetSysClockFreq+0x204>)
 8003532:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003534:	e0db      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003536:	4b73      	ldr	r3, [pc, #460]	; (8003704 <HAL_RCC_GetSysClockFreq+0x208>)
 8003538:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800353a:	e0d8      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800353c:	4b6f      	ldr	r3, [pc, #444]	; (80036fc <HAL_RCC_GetSysClockFreq+0x200>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003546:	4b6d      	ldr	r3, [pc, #436]	; (80036fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d063      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003552:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	2200      	movs	r2, #0
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
 800355c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
 8003566:	2300      	movs	r3, #0
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
 800356a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800356e:	4622      	mov	r2, r4
 8003570:	462b      	mov	r3, r5
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	0159      	lsls	r1, r3, #5
 800357c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003580:	0150      	lsls	r0, r2, #5
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4621      	mov	r1, r4
 8003588:	1a51      	subs	r1, r2, r1
 800358a:	6139      	str	r1, [r7, #16]
 800358c:	4629      	mov	r1, r5
 800358e:	eb63 0301 	sbc.w	r3, r3, r1
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035a0:	4659      	mov	r1, fp
 80035a2:	018b      	lsls	r3, r1, #6
 80035a4:	4651      	mov	r1, sl
 80035a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035aa:	4651      	mov	r1, sl
 80035ac:	018a      	lsls	r2, r1, #6
 80035ae:	4651      	mov	r1, sl
 80035b0:	ebb2 0801 	subs.w	r8, r2, r1
 80035b4:	4659      	mov	r1, fp
 80035b6:	eb63 0901 	sbc.w	r9, r3, r1
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ce:	4690      	mov	r8, r2
 80035d0:	4699      	mov	r9, r3
 80035d2:	4623      	mov	r3, r4
 80035d4:	eb18 0303 	adds.w	r3, r8, r3
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	462b      	mov	r3, r5
 80035dc:	eb49 0303 	adc.w	r3, r9, r3
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ee:	4629      	mov	r1, r5
 80035f0:	024b      	lsls	r3, r1, #9
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035f8:	4621      	mov	r1, r4
 80035fa:	024a      	lsls	r2, r1, #9
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003602:	2200      	movs	r2, #0
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
 8003606:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800360c:	f7fc fde0 	bl	80001d0 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4613      	mov	r3, r2
 8003616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003618:	e058      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_RCC_GetSysClockFreq+0x200>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	099b      	lsrs	r3, r3, #6
 8003620:	2200      	movs	r2, #0
 8003622:	4618      	mov	r0, r3
 8003624:	4611      	mov	r1, r2
 8003626:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800362a:	623b      	str	r3, [r7, #32]
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
 8003630:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003634:	4642      	mov	r2, r8
 8003636:	464b      	mov	r3, r9
 8003638:	f04f 0000 	mov.w	r0, #0
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	0159      	lsls	r1, r3, #5
 8003642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003646:	0150      	lsls	r0, r2, #5
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4641      	mov	r1, r8
 800364e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003652:	4649      	mov	r1, r9
 8003654:	eb63 0b01 	sbc.w	fp, r3, r1
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003664:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003668:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800366c:	ebb2 040a 	subs.w	r4, r2, sl
 8003670:	eb63 050b 	sbc.w	r5, r3, fp
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	00eb      	lsls	r3, r5, #3
 800367e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003682:	00e2      	lsls	r2, r4, #3
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	4643      	mov	r3, r8
 800368a:	18e3      	adds	r3, r4, r3
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	464b      	mov	r3, r9
 8003690:	eb45 0303 	adc.w	r3, r5, r3
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036a2:	4629      	mov	r1, r5
 80036a4:	028b      	lsls	r3, r1, #10
 80036a6:	4621      	mov	r1, r4
 80036a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ac:	4621      	mov	r1, r4
 80036ae:	028a      	lsls	r2, r1, #10
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b6:	2200      	movs	r2, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	61fa      	str	r2, [r7, #28]
 80036bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c0:	f7fc fd86 	bl	80001d0 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4613      	mov	r3, r2
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_GetSysClockFreq+0x200>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3750      	adds	r7, #80	; 0x50
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800
 8003700:	00f42400 	.word	0x00f42400
 8003704:	007a1200 	.word	0x007a1200

08003708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <HAL_RCC_GetHCLKFreq+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000000 	.word	0x20000000

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003724:	f7ff fff0 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0a9b      	lsrs	r3, r3, #10
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	080081e8 	.word	0x080081e8

08003748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800374c:	f7ff ffdc 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	0b5b      	lsrs	r3, r3, #13
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4903      	ldr	r1, [pc, #12]	; (800376c <HAL_RCC_GetPCLK2Freq+0x24>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40023800 	.word	0x40023800
 800376c:	080081e8 	.word	0x080081e8

08003770 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	220f      	movs	r2, #15
 800377e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_RCC_GetClockConfig+0x5c>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800378c:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <HAL_RCC_GetClockConfig+0x5c>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_RCC_GetClockConfig+0x5c>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_GetClockConfig+0x5c>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	08db      	lsrs	r3, r3, #3
 80037aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037b2:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_RCC_GetClockConfig+0x60>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0207 	and.w	r2, r3, #7
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40023c00 	.word	0x40023c00

080037d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd ff3c 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f000 fc66 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d001      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e04e      	b.n	800392a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a23      	ldr	r2, [pc, #140]	; (8003938 <HAL_TIM_Base_Start_IT+0xc4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b6:	d01d      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1f      	ldr	r2, [pc, #124]	; (800393c <HAL_TIM_Base_Start_IT+0xc8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <HAL_TIM_Base_Start_IT+0xcc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_TIM_Base_Start_IT+0xd0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_TIM_Base_Start_IT+0xd4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_TIM_Base_Start_IT+0xd8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_TIM_Base_Start_IT+0xdc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d111      	bne.n	8003918 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b06      	cmp	r3, #6
 8003904:	d010      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	e007      	b.n	8003928 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40010400 	.word	0x40010400
 800394c:	40014000 	.word	0x40014000
 8003950:	40001800 	.word	0x40001800

08003954 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e041      	b.n	80039ea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f839 	bl	80039f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 fba6 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e041      	b.n	8003a9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f839 	bl	8003aa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 fb4d 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0202 	mvn.w	r2, #2
 8003ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fad3 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fac5 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fad6 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0204 	mvn.w	r2, #4
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 faa9 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa9b 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 faac 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0208 	mvn.w	r2, #8
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2204      	movs	r2, #4
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa7f 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa71 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa82 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0210 	mvn.w	r2, #16
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2208      	movs	r2, #8
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa55 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa47 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fa58 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0201 	mvn.w	r2, #1
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd fb6c 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b80      	cmp	r3, #128	; 0x80
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fe00 	bl	8004868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa1d 	bl	80040ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0220 	mvn.w	r2, #32
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fdca 	bl	8004854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e048      	b.n	8003d78 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	d839      	bhi.n	8003d68 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_TIM_OC_ConfigChannel+0x34>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d69 	.word	0x08003d69
 8003d04:	08003d69 	.word	0x08003d69
 8003d08:	08003d69 	.word	0x08003d69
 8003d0c:	08003d3f 	.word	0x08003d3f
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	08003d69 	.word	0x08003d69
 8003d18:	08003d69 	.word	0x08003d69
 8003d1c:	08003d4d 	.word	0x08003d4d
 8003d20:	08003d69 	.word	0x08003d69
 8003d24:	08003d69 	.word	0x08003d69
 8003d28:	08003d69 	.word	0x08003d69
 8003d2c:	08003d5b 	.word	0x08003d5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa74 	bl	8004224 <TIM_OC1_SetConfig>
      break;
 8003d3c:	e017      	b.n	8003d6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fadd 	bl	8004304 <TIM_OC2_SetConfig>
      break;
 8003d4a:	e010      	b.n	8003d6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb4c 	bl	80043f0 <TIM_OC3_SetConfig>
      break;
 8003d58:	e009      	b.n	8003d6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fbb9 	bl	80044d8 <TIM_OC4_SetConfig>
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0ae      	b.n	8003efc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	f200 809f 	bhi.w	8003eec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003de9 	.word	0x08003de9
 8003db8:	08003eed 	.word	0x08003eed
 8003dbc:	08003eed 	.word	0x08003eed
 8003dc0:	08003eed 	.word	0x08003eed
 8003dc4:	08003e29 	.word	0x08003e29
 8003dc8:	08003eed 	.word	0x08003eed
 8003dcc:	08003eed 	.word	0x08003eed
 8003dd0:	08003eed 	.word	0x08003eed
 8003dd4:	08003e6b 	.word	0x08003e6b
 8003dd8:	08003eed 	.word	0x08003eed
 8003ddc:	08003eed 	.word	0x08003eed
 8003de0:	08003eed 	.word	0x08003eed
 8003de4:	08003eab 	.word	0x08003eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fa18 	bl	8004224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0204 	bic.w	r2, r2, #4
 8003e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6999      	ldr	r1, [r3, #24]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	619a      	str	r2, [r3, #24]
      break;
 8003e26:	e064      	b.n	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fa68 	bl	8004304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6999      	ldr	r1, [r3, #24]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	021a      	lsls	r2, r3, #8
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	619a      	str	r2, [r3, #24]
      break;
 8003e68:	e043      	b.n	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fabd 	bl	80043f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0208 	orr.w	r2, r2, #8
 8003e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0204 	bic.w	r2, r2, #4
 8003e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69d9      	ldr	r1, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	61da      	str	r2, [r3, #28]
      break;
 8003ea8:	e023      	b.n	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fb11 	bl	80044d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69d9      	ldr	r1, [r3, #28]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	021a      	lsls	r2, r3, #8
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	61da      	str	r2, [r3, #28]
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_TIM_ConfigClockSource+0x1c>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0b4      	b.n	800408a <HAL_TIM_ConfigClockSource+0x186>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f58:	d03e      	beq.n	8003fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5e:	f200 8087 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	f000 8086 	beq.w	8004076 <HAL_TIM_ConfigClockSource+0x172>
 8003f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6e:	d87f      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d01a      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0xa6>
 8003f74:	2b70      	cmp	r3, #112	; 0x70
 8003f76:	d87b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d050      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x11a>
 8003f7c:	2b60      	cmp	r3, #96	; 0x60
 8003f7e:	d877      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f80:	2b50      	cmp	r3, #80	; 0x50
 8003f82:	d03c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0xfa>
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d873      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d058      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x13a>
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d86f      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d064      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x15a>
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d86b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d060      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x15a>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d867      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05c      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x15a>
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d05a      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x15a>
 8003fa8:	e062      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f000 fb5d 	bl	8004678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	609a      	str	r2, [r3, #8]
      break;
 8003fd6:	e04f      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6899      	ldr	r1, [r3, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f000 fb46 	bl	8004678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffa:	609a      	str	r2, [r3, #8]
      break;
 8003ffc:	e03c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 faba 	bl	8004584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2150      	movs	r1, #80	; 0x50
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fb13 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 800401c:	e02c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f000 fad9 	bl	80045e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2160      	movs	r1, #96	; 0x60
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fb03 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 800403c:	e01c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	461a      	mov	r2, r3
 800404c:	f000 fa9a 	bl	8004584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	4618      	mov	r0, r3
 8004058:	f000 faf3 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 800405c:	e00c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f000 faea 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 800406e:	e003      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      break;
 8004074:	e000      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d00f      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3d      	ldr	r2, [pc, #244]	; (80041fc <TIM_Base_SetConfig+0x118>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3c      	ldr	r2, [pc, #240]	; (8004200 <TIM_Base_SetConfig+0x11c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3b      	ldr	r2, [pc, #236]	; (8004204 <TIM_Base_SetConfig+0x120>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3a      	ldr	r2, [pc, #232]	; (8004208 <TIM_Base_SetConfig+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d108      	bne.n	8004136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d02b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d027      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2c      	ldr	r2, [pc, #176]	; (80041fc <TIM_Base_SetConfig+0x118>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d023      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2b      	ldr	r2, [pc, #172]	; (8004200 <TIM_Base_SetConfig+0x11c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01f      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <TIM_Base_SetConfig+0x120>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a29      	ldr	r2, [pc, #164]	; (8004208 <TIM_Base_SetConfig+0x124>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d017      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a28      	ldr	r2, [pc, #160]	; (800420c <TIM_Base_SetConfig+0x128>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a27      	ldr	r2, [pc, #156]	; (8004210 <TIM_Base_SetConfig+0x12c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <TIM_Base_SetConfig+0x130>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a25      	ldr	r2, [pc, #148]	; (8004218 <TIM_Base_SetConfig+0x134>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a24      	ldr	r2, [pc, #144]	; (800421c <TIM_Base_SetConfig+0x138>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <TIM_Base_SetConfig+0x13c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0xf8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <TIM_Base_SetConfig+0x124>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d103      	bne.n	80041e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	615a      	str	r2, [r3, #20]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40010400 	.word	0x40010400
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800
 8004218:	40001800 	.word	0x40001800
 800421c:	40001c00 	.word	0x40001c00
 8004220:	40002000 	.word	0x40002000

08004224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f023 0201 	bic.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f023 0302 	bic.w	r3, r3, #2
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a20      	ldr	r2, [pc, #128]	; (80042fc <TIM_OC1_SetConfig+0xd8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_OC1_SetConfig+0x64>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <TIM_OC1_SetConfig+0xdc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d10c      	bne.n	80042a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0308 	bic.w	r3, r3, #8
 800428e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f023 0304 	bic.w	r3, r3, #4
 80042a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a15      	ldr	r2, [pc, #84]	; (80042fc <TIM_OC1_SetConfig+0xd8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_OC1_SetConfig+0x8e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a14      	ldr	r2, [pc, #80]	; (8004300 <TIM_OC1_SetConfig+0xdc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d111      	bne.n	80042d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40010000 	.word	0x40010000
 8004300:	40010400 	.word	0x40010400

08004304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f023 0210 	bic.w	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0320 	bic.w	r3, r3, #32
 800434e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <TIM_OC2_SetConfig+0xe4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_OC2_SetConfig+0x68>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a21      	ldr	r2, [pc, #132]	; (80043ec <TIM_OC2_SetConfig+0xe8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d10d      	bne.n	8004388 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <TIM_OC2_SetConfig+0xe4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_OC2_SetConfig+0x94>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a16      	ldr	r2, [pc, #88]	; (80043ec <TIM_OC2_SetConfig+0xe8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d113      	bne.n	80043c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800439e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40010400 	.word	0x40010400

080043f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <TIM_OC3_SetConfig+0xe0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_OC3_SetConfig+0x66>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <TIM_OC3_SetConfig+0xe4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d10d      	bne.n	8004472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800445c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <TIM_OC3_SetConfig+0xe0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d003      	beq.n	8004482 <TIM_OC3_SetConfig+0x92>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <TIM_OC3_SetConfig+0xe4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d113      	bne.n	80044aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	621a      	str	r2, [r3, #32]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40010400 	.word	0x40010400

080044d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <TIM_OC4_SetConfig+0xa4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_OC4_SetConfig+0x68>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a11      	ldr	r2, [pc, #68]	; (8004580 <TIM_OC4_SetConfig+0xa8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d109      	bne.n	8004554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000
 8004580:	40010400 	.word	0x40010400

08004584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 030a 	bic.w	r3, r3, #10
 80045c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b087      	sub	sp, #28
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f023 0210 	bic.w	r2, r3, #16
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800460c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	031b      	lsls	r3, r3, #12
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800461e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	f043 0307 	orr.w	r3, r3, #7
 8004664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	609a      	str	r2, [r3, #8]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	021a      	lsls	r2, r3, #8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	431a      	orrs	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e05a      	b.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a21      	ldr	r2, [pc, #132]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471c:	d01d      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1b      	ldr	r2, [pc, #108]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1a      	ldr	r2, [pc, #104]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a15      	ldr	r2, [pc, #84]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d10c      	bne.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40010400 	.word	0x40010400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40001800 	.word	0x40001800

080047b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e03d      	b.n	8004848 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e03f      	b.n	800490e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd f8b4 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	; 0x24
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f829 	bl	8004918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800491c:	b0c0      	sub	sp, #256	; 0x100
 800491e:	af00      	add	r7, sp, #0
 8004920:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	68d9      	ldr	r1, [r3, #12]
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	ea40 0301 	orr.w	r3, r0, r1
 8004940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	431a      	orrs	r2, r3
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	431a      	orrs	r2, r3
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004970:	f021 010c 	bic.w	r1, r1, #12
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800497e:	430b      	orrs	r3, r1
 8004980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	6999      	ldr	r1, [r3, #24]
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	ea40 0301 	orr.w	r3, r0, r1
 800499e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b8f      	ldr	r3, [pc, #572]	; (8004be4 <UART_SetConfig+0x2cc>)
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d005      	beq.n	80049b8 <UART_SetConfig+0xa0>
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b8d      	ldr	r3, [pc, #564]	; (8004be8 <UART_SetConfig+0x2d0>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d104      	bne.n	80049c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7fe fec6 	bl	8003748 <HAL_RCC_GetPCLK2Freq>
 80049bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049c0:	e003      	b.n	80049ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049c2:	f7fe fead 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 80049c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d4:	f040 810c 	bne.w	8004bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049dc:	2200      	movs	r2, #0
 80049de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	1891      	adds	r1, r2, r2
 80049f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80049f2:	415b      	adcs	r3, r3
 80049f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049fa:	4621      	mov	r1, r4
 80049fc:	eb12 0801 	adds.w	r8, r2, r1
 8004a00:	4629      	mov	r1, r5
 8004a02:	eb43 0901 	adc.w	r9, r3, r1
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a1a:	4690      	mov	r8, r2
 8004a1c:	4699      	mov	r9, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	eb18 0303 	adds.w	r3, r8, r3
 8004a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a28:	462b      	mov	r3, r5
 8004a2a:	eb49 0303 	adc.w	r3, r9, r3
 8004a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a46:	460b      	mov	r3, r1
 8004a48:	18db      	adds	r3, r3, r3
 8004a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	eb42 0303 	adc.w	r3, r2, r3
 8004a52:	657b      	str	r3, [r7, #84]	; 0x54
 8004a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a5c:	f7fb fbb8 	bl	80001d0 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4b61      	ldr	r3, [pc, #388]	; (8004bec <UART_SetConfig+0x2d4>)
 8004a66:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	011c      	lsls	r4, r3, #4
 8004a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a90:	4641      	mov	r1, r8
 8004a92:	eb12 0a01 	adds.w	sl, r2, r1
 8004a96:	4649      	mov	r1, r9
 8004a98:	eb43 0b01 	adc.w	fp, r3, r1
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab0:	4692      	mov	sl, r2
 8004ab2:	469b      	mov	fp, r3
 8004ab4:	4643      	mov	r3, r8
 8004ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8004aba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004adc:	460b      	mov	r3, r1
 8004ade:	18db      	adds	r3, r3, r3
 8004ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	eb42 0303 	adc.w	r3, r2, r3
 8004ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004af2:	f7fb fb6d 	bl	80001d0 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <UART_SetConfig+0x2d4>)
 8004afe:	fba3 2301 	umull	r2, r3, r3, r1
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	2264      	movs	r2, #100	; 0x64
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	1acb      	subs	r3, r1, r3
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <UART_SetConfig+0x2d4>)
 8004b14:	fba3 2302 	umull	r2, r3, r3, r2
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b20:	441c      	add	r4, r3
 8004b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	1891      	adds	r1, r2, r2
 8004b3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b44:	4641      	mov	r1, r8
 8004b46:	1851      	adds	r1, r2, r1
 8004b48:	6339      	str	r1, [r7, #48]	; 0x30
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4651      	mov	r1, sl
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4642      	mov	r2, r8
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b78:	464b      	mov	r3, r9
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b98:	460b      	mov	r3, r1
 8004b9a:	18db      	adds	r3, r3, r3
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bae:	f7fb fb0f 	bl	80001d0 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <UART_SetConfig+0x2d4>)
 8004bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	2164      	movs	r1, #100	; 0x64
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	3332      	adds	r3, #50	; 0x32
 8004bca:	4a08      	ldr	r2, [pc, #32]	; (8004bec <UART_SetConfig+0x2d4>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	f003 0207 	and.w	r2, r3, #7
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4422      	add	r2, r4
 8004bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004be0:	e105      	b.n	8004dee <UART_SetConfig+0x4d6>
 8004be2:	bf00      	nop
 8004be4:	40011000 	.word	0x40011000
 8004be8:	40011400 	.word	0x40011400
 8004bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c02:	4642      	mov	r2, r8
 8004c04:	464b      	mov	r3, r9
 8004c06:	1891      	adds	r1, r2, r2
 8004c08:	6239      	str	r1, [r7, #32]
 8004c0a:	415b      	adcs	r3, r3
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c12:	4641      	mov	r1, r8
 8004c14:	1854      	adds	r4, r2, r1
 8004c16:	4649      	mov	r1, r9
 8004c18:	eb43 0501 	adc.w	r5, r3, r1
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	00eb      	lsls	r3, r5, #3
 8004c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c2a:	00e2      	lsls	r2, r4, #3
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	461d      	mov	r5, r3
 8004c30:	4643      	mov	r3, r8
 8004c32:	18e3      	adds	r3, r4, r3
 8004c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c38:	464b      	mov	r3, r9
 8004c3a:	eb45 0303 	adc.w	r3, r5, r3
 8004c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c5e:	4629      	mov	r1, r5
 8004c60:	008b      	lsls	r3, r1, #2
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c68:	4621      	mov	r1, r4
 8004c6a:	008a      	lsls	r2, r1, #2
 8004c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c70:	f7fb faae 	bl	80001d0 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4b60      	ldr	r3, [pc, #384]	; (8004dfc <UART_SetConfig+0x4e4>)
 8004c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	011c      	lsls	r4, r3, #4
 8004c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	61b9      	str	r1, [r7, #24]
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	1851      	adds	r1, r2, r1
 8004ca8:	6139      	str	r1, [r7, #16]
 8004caa:	4649      	mov	r1, r9
 8004cac:	414b      	adcs	r3, r1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	00cb      	lsls	r3, r1, #3
 8004cc0:	4651      	mov	r1, sl
 8004cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	00ca      	lsls	r2, r1, #3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cd8:	464b      	mov	r3, r9
 8004cda:	460a      	mov	r2, r1
 8004cdc:	eb42 0303 	adc.w	r3, r2, r3
 8004ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	008b      	lsls	r3, r1, #2
 8004d00:	4641      	mov	r1, r8
 8004d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d06:	4641      	mov	r1, r8
 8004d08:	008a      	lsls	r2, r1, #2
 8004d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d0e:	f7fb fa5f 	bl	80001d0 <__aeabi_uldivmod>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4b39      	ldr	r3, [pc, #228]	; (8004dfc <UART_SetConfig+0x4e4>)
 8004d18:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	2164      	movs	r1, #100	; 0x64
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	3332      	adds	r3, #50	; 0x32
 8004d2a:	4a34      	ldr	r2, [pc, #208]	; (8004dfc <UART_SetConfig+0x4e4>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d36:	441c      	add	r4, r3
 8004d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d40:	677a      	str	r2, [r7, #116]	; 0x74
 8004d42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d46:	4642      	mov	r2, r8
 8004d48:	464b      	mov	r3, r9
 8004d4a:	1891      	adds	r1, r2, r2
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	415b      	adcs	r3, r3
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d56:	4641      	mov	r1, r8
 8004d58:	1851      	adds	r1, r2, r1
 8004d5a:	6039      	str	r1, [r7, #0]
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	414b      	adcs	r3, r1
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d6e:	4659      	mov	r1, fp
 8004d70:	00cb      	lsls	r3, r1, #3
 8004d72:	4651      	mov	r1, sl
 8004d74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d78:	4651      	mov	r1, sl
 8004d7a:	00ca      	lsls	r2, r1, #3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4603      	mov	r3, r0
 8004d82:	4642      	mov	r2, r8
 8004d84:	189b      	adds	r3, r3, r2
 8004d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d88:	464b      	mov	r3, r9
 8004d8a:	460a      	mov	r2, r1
 8004d8c:	eb42 0303 	adc.w	r3, r2, r3
 8004d90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004daa:	4649      	mov	r1, r9
 8004dac:	008b      	lsls	r3, r1, #2
 8004dae:	4641      	mov	r1, r8
 8004db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db4:	4641      	mov	r1, r8
 8004db6:	008a      	lsls	r2, r1, #2
 8004db8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dbc:	f7fb fa08 	bl	80001d0 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <UART_SetConfig+0x4e4>)
 8004dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2164      	movs	r1, #100	; 0x64
 8004dce:	fb01 f303 	mul.w	r3, r1, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	; 0x32
 8004dd8:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <UART_SetConfig+0x4e4>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4422      	add	r2, r4
 8004dec:	609a      	str	r2, [r3, #8]
}
 8004dee:	bf00      	nop
 8004df0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004df4:	46bd      	mov	sp, r7
 8004df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfa:	bf00      	nop
 8004dfc:	51eb851f 	.word	0x51eb851f

08004e00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e00:	b084      	sub	sp, #16
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	f107 001c 	add.w	r0, r7, #28
 8004e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d122      	bne.n	8004e5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 faa2 	bl	800539c <USB_CoreReset>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	e01a      	b.n	8004e94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa96 	bl	800539c <USB_CoreReset>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
 8004e86:	e005      	b.n	8004e94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10b      	bne.n	8004eb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f043 0206 	orr.w	r2, r3, #6
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ebe:	b004      	add	sp, #16
 8004ec0:	4770      	bx	lr

08004ec2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0201 	bic.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d115      	bne.n	8004f32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f12:	2001      	movs	r0, #1
 8004f14:	f7fc ff18 	bl	8001d48 <HAL_Delay>
      ms++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fa2e 	bl	8005380 <USB_GetMode>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d01e      	beq.n	8004f68 <USB_SetCurrentMode+0x84>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b31      	cmp	r3, #49	; 0x31
 8004f2e:	d9f0      	bls.n	8004f12 <USB_SetCurrentMode+0x2e>
 8004f30:	e01a      	b.n	8004f68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d115      	bne.n	8004f64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f44:	2001      	movs	r0, #1
 8004f46:	f7fc feff 	bl	8001d48 <HAL_Delay>
      ms++;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fa15 	bl	8005380 <USB_GetMode>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <USB_SetCurrentMode+0x84>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b31      	cmp	r3, #49	; 0x31
 8004f60:	d9f0      	bls.n	8004f44 <USB_SetCurrentMode+0x60>
 8004f62:	e001      	b.n	8004f68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e005      	b.n	8004f74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b32      	cmp	r3, #50	; 0x32
 8004f6c:	d101      	bne.n	8004f72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b086      	sub	sp, #24
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	e009      	b.n	8004fb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3340      	adds	r3, #64	; 0x40
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3301      	adds	r3, #1
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b0e      	cmp	r3, #14
 8004fb4:	d9f2      	bls.n	8004f9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11c      	bne.n	8004ff6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fca:	f043 0302 	orr.w	r3, r3, #2
 8004fce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ff4:	e00b      	b.n	800500e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005014:	461a      	mov	r2, r3
 8005016:	2300      	movs	r3, #0
 8005018:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005020:	4619      	mov	r1, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	461a      	mov	r2, r3
 800502a:	680b      	ldr	r3, [r1, #0]
 800502c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10c      	bne.n	800504e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d104      	bne.n	8005044 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800503a:	2100      	movs	r1, #0
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f965 	bl	800530c <USB_SetDevSpeed>
 8005042:	e008      	b.n	8005056 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005044:	2101      	movs	r1, #1
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f960 	bl	800530c <USB_SetDevSpeed>
 800504c:	e003      	b.n	8005056 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800504e:	2103      	movs	r1, #3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f95b 	bl	800530c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005056:	2110      	movs	r1, #16
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8f3 	bl	8005244 <USB_FlushTxFifo>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f91f 	bl	80052ac <USB_FlushRxFifo>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	461a      	mov	r2, r3
 800508c:	2300      	movs	r3, #0
 800508e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005096:	461a      	mov	r2, r3
 8005098:	2300      	movs	r3, #0
 800509a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	e043      	b.n	800512a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b8:	d118      	bne.n	80050ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050cc:	461a      	mov	r2, r3
 80050ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e013      	b.n	80050fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	461a      	mov	r2, r3
 80050e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e008      	b.n	80050fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	461a      	mov	r2, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510a:	461a      	mov	r2, r3
 800510c:	2300      	movs	r3, #0
 800510e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	461a      	mov	r2, r3
 800511e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005122:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	3301      	adds	r3, #1
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	429a      	cmp	r2, r3
 8005130:	d3b7      	bcc.n	80050a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	e043      	b.n	80051c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800514e:	d118      	bne.n	8005182 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e013      	b.n	8005194 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	e008      	b.n	8005194 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	2300      	movs	r3, #0
 8005192:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	461a      	mov	r2, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	461a      	mov	r2, r3
 80051b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	3301      	adds	r3, #1
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3b7      	bcc.n	8005138 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f043 0210 	orr.w	r2, r3, #16
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <USB_DevInit+0x2c4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f043 0208 	orr.w	r2, r3, #8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800521a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521c:	2b01      	cmp	r3, #1
 800521e:	d107      	bne.n	8005230 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005228:	f043 0304 	orr.w	r3, r3, #4
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523c:	b004      	add	sp, #16
 800523e:	4770      	bx	lr
 8005240:	803c3800 	.word	0x803c3800

08005244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <USB_FlushTxFifo+0x64>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e01b      	b.n	800529c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	daf2      	bge.n	8005252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	019b      	lsls	r3, r3, #6
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <USB_FlushTxFifo+0x64>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e006      	b.n	800529c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b20      	cmp	r3, #32
 8005298:	d0f0      	beq.n	800527c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	00030d40 	.word	0x00030d40

080052ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a11      	ldr	r2, [pc, #68]	; (8005308 <USB_FlushRxFifo+0x5c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e018      	b.n	80052fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	daf2      	bge.n	80052b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2210      	movs	r2, #16
 80052da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a08      	ldr	r2, [pc, #32]	; (8005308 <USB_FlushRxFifo+0x5c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e006      	b.n	80052fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d0f0      	beq.n	80052dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	00030d40 	.word	0x00030d40

0800530c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800532c:	4313      	orrs	r3, r2
 800532e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005358:	f023 0303 	bic.w	r3, r3, #3
 800535c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0301 	and.w	r3, r3, #1
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a13      	ldr	r2, [pc, #76]	; (8005400 <USB_CoreReset+0x64>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e01b      	b.n	80053f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	daf2      	bge.n	80053a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3301      	adds	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <USB_CoreReset+0x64>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e006      	b.n	80053f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d0f0      	beq.n	80053d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	00030d40 	.word	0x00030d40

08005404 <__NVIC_SetPriority>:
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005414:	2b00      	cmp	r3, #0
 8005416:	db0a      	blt.n	800542e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	490c      	ldr	r1, [pc, #48]	; (8005450 <__NVIC_SetPriority+0x4c>)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	440b      	add	r3, r1
 8005428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800542c:	e00a      	b.n	8005444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	4908      	ldr	r1, [pc, #32]	; (8005454 <__NVIC_SetPriority+0x50>)
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	3b04      	subs	r3, #4
 800543c:	0112      	lsls	r2, r2, #4
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	440b      	add	r3, r1
 8005442:	761a      	strb	r2, [r3, #24]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	e000e100 	.word	0xe000e100
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <SysTick_Handler+0x1c>)
 800545e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005460:	f001 fd28 	bl	8006eb4 <xTaskGetSchedulerState>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d001      	beq.n	800546e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800546a:	f002 fb0d 	bl	8007a88 <xPortSysTickHandler>
  }
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	e000e010 	.word	0xe000e010

08005478 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800547c:	2100      	movs	r1, #0
 800547e:	f06f 0004 	mvn.w	r0, #4
 8005482:	f7ff ffbf 	bl	8005404 <__NVIC_SetPriority>
#endif
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005492:	f3ef 8305 	mrs	r3, IPSR
 8005496:	603b      	str	r3, [r7, #0]
  return(result);
 8005498:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800549e:	f06f 0305 	mvn.w	r3, #5
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	e00c      	b.n	80054c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <osKernelInitialize+0x44>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054ae:	4b08      	ldr	r3, [pc, #32]	; (80054d0 <osKernelInitialize+0x44>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	607b      	str	r3, [r7, #4]
 80054b8:	e002      	b.n	80054c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054ba:	f04f 33ff 	mov.w	r3, #4294967295
 80054be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054c0:	687b      	ldr	r3, [r7, #4]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	2000097c 	.word	0x2000097c

080054d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054da:	f3ef 8305 	mrs	r3, IPSR
 80054de:	603b      	str	r3, [r7, #0]
  return(result);
 80054e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80054e6:	f06f 0305 	mvn.w	r3, #5
 80054ea:	607b      	str	r3, [r7, #4]
 80054ec:	e010      	b.n	8005510 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <osKernelStart+0x48>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d109      	bne.n	800550a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054f6:	f7ff ffbf 	bl	8005478 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054fa:	4b08      	ldr	r3, [pc, #32]	; (800551c <osKernelStart+0x48>)
 80054fc:	2202      	movs	r2, #2
 80054fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005500:	f001 f87c 	bl	80065fc <vTaskStartScheduler>
      stat = osOK;
 8005504:	2300      	movs	r3, #0
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	e002      	b.n	8005510 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005510:	687b      	ldr	r3, [r7, #4]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	2000097c 	.word	0x2000097c

08005520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af04      	add	r7, sp, #16
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005530:	f3ef 8305 	mrs	r3, IPSR
 8005534:	617b      	str	r3, [r7, #20]
  return(result);
 8005536:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005538:	2b00      	cmp	r3, #0
 800553a:	d17e      	bne.n	800563a <osThreadNew+0x11a>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d07b      	beq.n	800563a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005546:	2318      	movs	r3, #24
 8005548:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800554e:	f04f 33ff 	mov.w	r3, #4294967295
 8005552:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d045      	beq.n	80055e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <osThreadNew+0x48>
        name = attr->name;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <osThreadNew+0x6e>
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	2b38      	cmp	r3, #56	; 0x38
 8005580:	d805      	bhi.n	800558e <osThreadNew+0x6e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <osThreadNew+0x72>
        return (NULL);
 800558e:	2300      	movs	r3, #0
 8005590:	e054      	b.n	800563c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	089b      	lsrs	r3, r3, #2
 80055a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00e      	beq.n	80055c8 <osThreadNew+0xa8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2bbb      	cmp	r3, #187	; 0xbb
 80055b0:	d90a      	bls.n	80055c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d006      	beq.n	80055c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <osThreadNew+0xa8>
        mem = 1;
 80055c2:	2301      	movs	r3, #1
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e010      	b.n	80055ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10c      	bne.n	80055ea <osThreadNew+0xca>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d108      	bne.n	80055ea <osThreadNew+0xca>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <osThreadNew+0xca>
          mem = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61bb      	str	r3, [r7, #24]
 80055e4:	e001      	b.n	80055ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d110      	bne.n	8005612 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055f8:	9202      	str	r2, [sp, #8]
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fe0c 	bl	8006224 <xTaskCreateStatic>
 800560c:	4603      	mov	r3, r0
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	e013      	b.n	800563a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d110      	bne.n	800563a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	b29a      	uxth	r2, r3
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fe57 	bl	80062de <xTaskCreate>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d001      	beq.n	800563a <osThreadNew+0x11a>
            hTask = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800563a:	693b      	ldr	r3, [r7, #16]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3728      	adds	r7, #40	; 0x28
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564c:	f3ef 8305 	mrs	r3, IPSR
 8005650:	60bb      	str	r3, [r7, #8]
  return(result);
 8005652:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <osDelay+0x1c>
    stat = osErrorISR;
 8005658:	f06f 0305 	mvn.w	r3, #5
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e007      	b.n	8005670 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <osDelay+0x2c>
      vTaskDelay(ticks);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 ff92 	bl	8006594 <vTaskDelay>
    }
  }

  return (stat);
 8005670:	68fb      	ldr	r3, [r7, #12]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a07      	ldr	r2, [pc, #28]	; (80056a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800568c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4a06      	ldr	r2, [pc, #24]	; (80056ac <vApplicationGetIdleTaskMemory+0x30>)
 8005692:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	601a      	str	r2, [r3, #0]
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000980 	.word	0x20000980
 80056ac:	20000a3c 	.word	0x20000a3c

080056b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a07      	ldr	r2, [pc, #28]	; (80056dc <vApplicationGetTimerTaskMemory+0x2c>)
 80056c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4a06      	ldr	r2, [pc, #24]	; (80056e0 <vApplicationGetTimerTaskMemory+0x30>)
 80056c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ce:	601a      	str	r2, [r3, #0]
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	20000c3c 	.word	0x20000c3c
 80056e0:	20000cf8 	.word	0x20000cf8

080056e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f103 0208 	add.w	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f103 0208 	add.w	r2, r3, #8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f103 0208 	add.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d103      	bne.n	80057a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e00c      	b.n	80057c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3308      	adds	r3, #8
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e002      	b.n	80057b4 <vListInsert+0x2e>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d2f6      	bcs.n	80057ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	601a      	str	r2, [r3, #0]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6852      	ldr	r2, [r2, #4]
 8005818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d103      	bne.n	800582c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1e5a      	subs	r2, r3, #1
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005876:	f002 f875 	bl	8007964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	441a      	add	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	3b01      	subs	r3, #1
 80058a8:	68f9      	ldr	r1, [r7, #12]
 80058aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	441a      	add	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	22ff      	movs	r2, #255	; 0xff
 80058ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d114      	bne.n	80058f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3310      	adds	r3, #16
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 f929 	bl	8006b30 <xTaskRemoveFromEventList>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d012      	beq.n	800590a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <xQueueGenericReset+0xcc>)
 80058e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	e009      	b.n	800590a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3310      	adds	r3, #16
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fef2 	bl	80056e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3324      	adds	r3, #36	; 0x24
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff feed 	bl	80056e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800590a:	f002 f85b 	bl	80079c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800590e:	2301      	movs	r3, #1
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08e      	sub	sp, #56	; 0x38
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800595e:	bf00      	nop
 8005960:	e7fe      	b.n	8005960 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <xQueueGenericCreateStatic+0x52>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <xQueueGenericCreateStatic+0x56>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <xQueueGenericCreateStatic+0x58>
 8005972:	2300      	movs	r3, #0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	623b      	str	r3, [r7, #32]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <xQueueGenericCreateStatic+0x7e>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <xQueueGenericCreateStatic+0x82>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <xQueueGenericCreateStatic+0x84>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	61fb      	str	r3, [r7, #28]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059ba:	2350      	movs	r3, #80	; 0x50
 80059bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b50      	cmp	r3, #80	; 0x50
 80059c2:	d00a      	beq.n	80059da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	61bb      	str	r3, [r7, #24]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00d      	beq.n	8005a02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f805 	bl	8005a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3730      	adds	r7, #48	; 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	69b8      	ldr	r0, [r7, #24]
 8005a3e:	f7ff ff05 	bl	800584c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	78fa      	ldrb	r2, [r7, #3]
 8005a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08e      	sub	sp, #56	; 0x38
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a62:	2300      	movs	r3, #0
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <xQueueGenericSend+0x32>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <xQueueGenericSend+0x40>
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <xQueueGenericSend+0x44>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <xQueueGenericSend+0x46>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <xQueueGenericSend+0x60>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d103      	bne.n	8005ac2 <xQueueGenericSend+0x6e>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <xQueueGenericSend+0x72>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <xQueueGenericSend+0x74>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	623b      	str	r3, [r7, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ae2:	f001 f9e7 	bl	8006eb4 <xTaskGetSchedulerState>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <xQueueGenericSend+0x9e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <xQueueGenericSend+0xa2>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <xQueueGenericSend+0xa4>
 8005af6:	2300      	movs	r3, #0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xQueueGenericSend+0xbe>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	61fb      	str	r3, [r7, #28]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b12:	f001 ff27 	bl	8007964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <xQueueGenericSend+0xd4>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d129      	bne.n	8005b7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b2e:	f000 fa0b 	bl	8005f48 <prvCopyDataToQueue>
 8005b32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d010      	beq.n	8005b5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	3324      	adds	r3, #36	; 0x24
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fff5 	bl	8006b30 <xTaskRemoveFromEventList>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d013      	beq.n	8005b74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b4c:	4b3f      	ldr	r3, [pc, #252]	; (8005c4c <xQueueGenericSend+0x1f8>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	e00a      	b.n	8005b74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b64:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <xQueueGenericSend+0x1f8>)
 8005b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b74:	f001 ff26 	bl	80079c4 <vPortExitCritical>
				return pdPASS;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e063      	b.n	8005c44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b82:	f001 ff1f 	bl	80079c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e05c      	b.n	8005c44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f82f 	bl	8006bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b9e:	f001 ff11 	bl	80079c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ba2:	f000 fd9b 	bl	80066dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ba6:	f001 fedd 	bl	8007964 <vPortEnterCritical>
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb0:	b25b      	sxtb	r3, r3
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d103      	bne.n	8005bc0 <xQueueGenericSend+0x16c>
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d103      	bne.n	8005bd6 <xQueueGenericSend+0x182>
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd6:	f001 fef5 	bl	80079c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bda:	1d3a      	adds	r2, r7, #4
 8005bdc:	f107 0314 	add.w	r3, r7, #20
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 f81e 	bl	8006c24 <xTaskCheckForTimeOut>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d124      	bne.n	8005c38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bf0:	f000 faa2 	bl	8006138 <prvIsQueueFull>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d018      	beq.n	8005c2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	3310      	adds	r3, #16
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 ff44 	bl	8006a90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c0a:	f000 fa2d 	bl	8006068 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c0e:	f000 fd73 	bl	80066f8 <xTaskResumeAll>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f47f af7c 	bne.w	8005b12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <xQueueGenericSend+0x1f8>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	e772      	b.n	8005b12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c2e:	f000 fa1b 	bl	8006068 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c32:	f000 fd61 	bl	80066f8 <xTaskResumeAll>
 8005c36:	e76c      	b.n	8005b12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c3a:	f000 fa15 	bl	8006068 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c3e:	f000 fd5b 	bl	80066f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3738      	adds	r7, #56	; 0x38
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	e000ed04 	.word	0xe000ed04

08005c50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b090      	sub	sp, #64	; 0x40
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <xQueueGenericSendFromISR+0x3c>
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <xQueueGenericSendFromISR+0x40>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <xQueueGenericSendFromISR+0x42>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d103      	bne.n	8005cba <xQueueGenericSendFromISR+0x6a>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <xQueueGenericSendFromISR+0x6e>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <xQueueGenericSendFromISR+0x70>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	623b      	str	r3, [r7, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cda:	f001 ff25 	bl	8007b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cde:	f3ef 8211 	mrs	r2, BASEPRI
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	61fa      	str	r2, [r7, #28]
 8005cf4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <xQueueGenericSendFromISR+0xbc>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d12f      	bne.n	8005d6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d22:	f000 f911 	bl	8005f48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d112      	bne.n	8005d56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d016      	beq.n	8005d66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	3324      	adds	r3, #36	; 0x24
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fef7 	bl	8006b30 <xTaskRemoveFromEventList>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e007      	b.n	8005d66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	b25a      	sxtb	r2, r3
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d66:	2301      	movs	r3, #1
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d6a:	e001      	b.n	8005d70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3740      	adds	r7, #64	; 0x40
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08c      	sub	sp, #48	; 0x30
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10a      	bne.n	8005db8 <xQueueReceive+0x30>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	623b      	str	r3, [r7, #32]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d103      	bne.n	8005dc6 <xQueueReceive+0x3e>
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <xQueueReceive+0x42>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <xQueueReceive+0x44>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <xQueueReceive+0x5e>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	61fb      	str	r3, [r7, #28]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005de6:	f001 f865 	bl	8006eb4 <xTaskGetSchedulerState>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <xQueueReceive+0x6e>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <xQueueReceive+0x72>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <xQueueReceive+0x74>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xQueueReceive+0x8e>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61bb      	str	r3, [r7, #24]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e16:	f001 fda5 	bl	8007964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01f      	beq.n	8005e66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2a:	f000 f8f7 	bl	800601c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	1e5a      	subs	r2, r3, #1
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00f      	beq.n	8005e5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	3310      	adds	r3, #16
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fe74 	bl	8006b30 <xTaskRemoveFromEventList>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e4e:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <xQueueReceive+0x1bc>)
 8005e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e5e:	f001 fdb1 	bl	80079c4 <vPortExitCritical>
				return pdPASS;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e069      	b.n	8005f3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d103      	bne.n	8005e74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e6c:	f001 fdaa 	bl	80079c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e062      	b.n	8005f3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e7a:	f107 0310 	add.w	r3, r7, #16
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 feba 	bl	8006bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e88:	f001 fd9c 	bl	80079c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e8c:	f000 fc26 	bl	80066dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e90:	f001 fd68 	bl	8007964 <vPortEnterCritical>
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d103      	bne.n	8005eaa <xQueueReceive+0x122>
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d103      	bne.n	8005ec0 <xQueueReceive+0x138>
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec0:	f001 fd80 	bl	80079c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ec4:	1d3a      	adds	r2, r7, #4
 8005ec6:	f107 0310 	add.w	r3, r7, #16
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fea9 	bl	8006c24 <xTaskCheckForTimeOut>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d123      	bne.n	8005f20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eda:	f000 f917 	bl	800610c <prvIsQueueEmpty>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d017      	beq.n	8005f14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	3324      	adds	r3, #36	; 0x24
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fdcf 	bl	8006a90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef4:	f000 f8b8 	bl	8006068 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ef8:	f000 fbfe 	bl	80066f8 <xTaskResumeAll>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d189      	bne.n	8005e16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <xQueueReceive+0x1bc>)
 8005f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	e780      	b.n	8005e16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f16:	f000 f8a7 	bl	8006068 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f1a:	f000 fbed 	bl	80066f8 <xTaskResumeAll>
 8005f1e:	e77a      	b.n	8005e16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f22:	f000 f8a1 	bl	8006068 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f26:	f000 fbe7 	bl	80066f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f2c:	f000 f8ee 	bl	800610c <prvIsQueueEmpty>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f43f af6f 	beq.w	8005e16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3730      	adds	r7, #48	; 0x30
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	e000ed04 	.word	0xe000ed04

08005f48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10d      	bne.n	8005f82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d14d      	bne.n	800600a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 ffbc 	bl	8006ef0 <xTaskPriorityDisinherit>
 8005f78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	e043      	b.n	800600a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d119      	bne.n	8005fbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6858      	ldr	r0, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	461a      	mov	r2, r3
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	f002 f818 	bl	8007fc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	441a      	add	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d32b      	bcc.n	800600a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	e026      	b.n	800600a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68d8      	ldr	r0, [r3, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	f001 fffe 	bl	8007fc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	425b      	negs	r3, r3
 8005fd6:	441a      	add	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d207      	bcs.n	8005ff8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	425b      	negs	r3, r3
 8005ff2:	441a      	add	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d105      	bne.n	800600a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	3b01      	subs	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006012:	697b      	ldr	r3, [r7, #20]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d018      	beq.n	8006060 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	441a      	add	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	d303      	bcc.n	8006050 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68d9      	ldr	r1, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	461a      	mov	r2, r3
 800605a:	6838      	ldr	r0, [r7, #0]
 800605c:	f001 ffb4 	bl	8007fc8 <memcpy>
	}
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006070:	f001 fc78 	bl	8007964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800607a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800607c:	e011      	b.n	80060a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	2b00      	cmp	r3, #0
 8006084:	d012      	beq.n	80060ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3324      	adds	r3, #36	; 0x24
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fd50 	bl	8006b30 <xTaskRemoveFromEventList>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006096:	f000 fe27 	bl	8006ce8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	3b01      	subs	r3, #1
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dce9      	bgt.n	800607e <prvUnlockQueue+0x16>
 80060aa:	e000      	b.n	80060ae <prvUnlockQueue+0x46>
					break;
 80060ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	22ff      	movs	r2, #255	; 0xff
 80060b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060b6:	f001 fc85 	bl	80079c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060ba:	f001 fc53 	bl	8007964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060c6:	e011      	b.n	80060ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3310      	adds	r3, #16
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fd2b 	bl	8006b30 <xTaskRemoveFromEventList>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060e0:	f000 fe02 	bl	8006ce8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	dce9      	bgt.n	80060c8 <prvUnlockQueue+0x60>
 80060f4:	e000      	b.n	80060f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	22ff      	movs	r2, #255	; 0xff
 80060fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006100:	f001 fc60 	bl	80079c4 <vPortExitCritical>
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006114:	f001 fc26 	bl	8007964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e001      	b.n	800612a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800612a:	f001 fc4b 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 800612e:	68fb      	ldr	r3, [r7, #12]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006140:	f001 fc10 	bl	8007964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614c:	429a      	cmp	r2, r3
 800614e:	d102      	bne.n	8006156 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e001      	b.n	800615a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800615a:	f001 fc33 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 800615e:	68fb      	ldr	r3, [r7, #12]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e014      	b.n	80061a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006178:	4a0f      	ldr	r2, [pc, #60]	; (80061b8 <vQueueAddToRegistry+0x50>)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006184:	490c      	ldr	r1, [pc, #48]	; (80061b8 <vQueueAddToRegistry+0x50>)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800618e:	4a0a      	ldr	r2, [pc, #40]	; (80061b8 <vQueueAddToRegistry+0x50>)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	4413      	add	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800619a:	e006      	b.n	80061aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b07      	cmp	r3, #7
 80061a6:	d9e7      	bls.n	8006178 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	200010f8 	.word	0x200010f8

080061bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061cc:	f001 fbca 	bl	8007964 <vPortEnterCritical>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d6:	b25b      	sxtb	r3, r3
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d103      	bne.n	80061e6 <vQueueWaitForMessageRestricted+0x2a>
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ec:	b25b      	sxtb	r3, r3
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d103      	bne.n	80061fc <vQueueWaitForMessageRestricted+0x40>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061fc:	f001 fbe2 	bl	80079c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fc61 	bl	8006ad8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006216:	6978      	ldr	r0, [r7, #20]
 8006218:	f7ff ff26 	bl	8006068 <prvUnlockQueue>
	}
 800621c:	bf00      	nop
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08e      	sub	sp, #56	; 0x38
 8006228:	af04      	add	r7, sp, #16
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	623b      	str	r3, [r7, #32]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <xTaskCreateStatic+0x46>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	61fb      	str	r3, [r7, #28]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800626a:	23bc      	movs	r3, #188	; 0xbc
 800626c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	2bbc      	cmp	r3, #188	; 0xbc
 8006272:	d00a      	beq.n	800628a <xTaskCreateStatic+0x66>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	61bb      	str	r3, [r7, #24]
}
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800628a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01e      	beq.n	80062d0 <xTaskCreateStatic+0xac>
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062aa:	2300      	movs	r3, #0
 80062ac:	9303      	str	r3, [sp, #12]
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	9302      	str	r3, [sp, #8]
 80062b2:	f107 0314 	add.w	r3, r7, #20
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 f850 	bl	8006368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ca:	f000 f8f3 	bl	80064b4 <prvAddNewTaskToReadyList>
 80062ce:	e001      	b.n	80062d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062d4:	697b      	ldr	r3, [r7, #20]
	}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3728      	adds	r7, #40	; 0x28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b08c      	sub	sp, #48	; 0x30
 80062e2:	af04      	add	r7, sp, #16
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	603b      	str	r3, [r7, #0]
 80062ea:	4613      	mov	r3, r2
 80062ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 fc58 	bl	8007ba8 <pvPortMalloc>
 80062f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00e      	beq.n	800631e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006300:	20bc      	movs	r0, #188	; 0xbc
 8006302:	f001 fc51 	bl	8007ba8 <pvPortMalloc>
 8006306:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
 8006314:	e005      	b.n	8006322 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	f001 fd12 	bl	8007d40 <vPortFree>
 800631c:	e001      	b.n	8006322 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800631e:	2300      	movs	r3, #0
 8006320:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d017      	beq.n	8006358 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006330:	88fa      	ldrh	r2, [r7, #6]
 8006332:	2300      	movs	r3, #0
 8006334:	9303      	str	r3, [sp, #12]
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	9302      	str	r3, [sp, #8]
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f80e 	bl	8006368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800634c:	69f8      	ldr	r0, [r7, #28]
 800634e:	f000 f8b1 	bl	80064b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006352:	2301      	movs	r3, #1
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e002      	b.n	800635e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006358:	f04f 33ff 	mov.w	r3, #4294967295
 800635c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800635e:	69bb      	ldr	r3, [r7, #24]
	}
 8006360:	4618      	mov	r0, r3
 8006362:	3720      	adds	r7, #32
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	461a      	mov	r2, r3
 8006380:	21a5      	movs	r1, #165	; 0xa5
 8006382:	f001 fe2f 	bl	8007fe4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006390:	3b01      	subs	r3, #1
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f023 0307 	bic.w	r3, r3, #7
 800639e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	617b      	str	r3, [r7, #20]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01f      	beq.n	8006406 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	e012      	b.n	80063f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	7819      	ldrb	r1, [r3, #0]
 80063d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	3334      	adds	r3, #52	; 0x34
 80063dc:	460a      	mov	r2, r1
 80063de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	2b0f      	cmp	r3, #15
 80063f6:	d9e9      	bls.n	80063cc <prvInitialiseNewTask+0x64>
 80063f8:	e000      	b.n	80063fc <prvInitialiseNewTask+0x94>
			{
				break;
 80063fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006404:	e003      	b.n	800640e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	2b37      	cmp	r3, #55	; 0x37
 8006412:	d901      	bls.n	8006418 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006414:	2337      	movs	r3, #55	; 0x37
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006422:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	2200      	movs	r2, #0
 8006428:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	3304      	adds	r3, #4
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff f978 	bl	8005724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	3318      	adds	r3, #24
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff f973 	bl	8005724 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006442:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006452:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	2200      	movs	r2, #0
 8006460:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	3354      	adds	r3, #84	; 0x54
 8006468:	2260      	movs	r2, #96	; 0x60
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fdb9 	bl	8007fe4 <memset>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <prvInitialiseNewTask+0x140>)
 8006476:	659a      	str	r2, [r3, #88]	; 0x58
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	4a0c      	ldr	r2, [pc, #48]	; (80064ac <prvInitialiseNewTask+0x144>)
 800647c:	65da      	str	r2, [r3, #92]	; 0x5c
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	4a0b      	ldr	r2, [pc, #44]	; (80064b0 <prvInitialiseNewTask+0x148>)
 8006482:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	69b8      	ldr	r0, [r7, #24]
 800648a:	f001 f941 	bl	8007710 <pxPortInitialiseStack>
 800648e:	4602      	mov	r2, r0
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064a0:	bf00      	nop
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	08008210 	.word	0x08008210
 80064ac:	08008230 	.word	0x08008230
 80064b0:	080081f0 	.word	0x080081f0

080064b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064bc:	f001 fa52 	bl	8007964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064c0:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <prvAddNewTaskToReadyList+0xc4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	4a2c      	ldr	r2, [pc, #176]	; (8006578 <prvAddNewTaskToReadyList+0xc4>)
 80064c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064ca:	4b2c      	ldr	r3, [pc, #176]	; (800657c <prvAddNewTaskToReadyList+0xc8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064d2:	4a2a      	ldr	r2, [pc, #168]	; (800657c <prvAddNewTaskToReadyList+0xc8>)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064d8:	4b27      	ldr	r3, [pc, #156]	; (8006578 <prvAddNewTaskToReadyList+0xc4>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d110      	bne.n	8006502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064e0:	f000 fc26 	bl	8006d30 <prvInitialiseTaskLists>
 80064e4:	e00d      	b.n	8006502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064e6:	4b26      	ldr	r3, [pc, #152]	; (8006580 <prvAddNewTaskToReadyList+0xcc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064ee:	4b23      	ldr	r3, [pc, #140]	; (800657c <prvAddNewTaskToReadyList+0xc8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d802      	bhi.n	8006502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064fc:	4a1f      	ldr	r2, [pc, #124]	; (800657c <prvAddNewTaskToReadyList+0xc8>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <prvAddNewTaskToReadyList+0xd0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3301      	adds	r3, #1
 8006508:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <prvAddNewTaskToReadyList+0xd0>)
 800650a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800650c:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <prvAddNewTaskToReadyList+0xd0>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <prvAddNewTaskToReadyList+0xd4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d903      	bls.n	8006528 <prvAddNewTaskToReadyList+0x74>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a18      	ldr	r2, [pc, #96]	; (8006588 <prvAddNewTaskToReadyList+0xd4>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4a15      	ldr	r2, [pc, #84]	; (800658c <prvAddNewTaskToReadyList+0xd8>)
 8006536:	441a      	add	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7ff f8fd 	bl	800573e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006544:	f001 fa3e 	bl	80079c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <prvAddNewTaskToReadyList+0xcc>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00e      	beq.n	800656e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <prvAddNewTaskToReadyList+0xc8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	429a      	cmp	r2, r3
 800655c:	d207      	bcs.n	800656e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800655e:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <prvAddNewTaskToReadyList+0xdc>)
 8006560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	2000160c 	.word	0x2000160c
 800657c:	20001138 	.word	0x20001138
 8006580:	20001618 	.word	0x20001618
 8006584:	20001628 	.word	0x20001628
 8006588:	20001614 	.word	0x20001614
 800658c:	2000113c 	.word	0x2000113c
 8006590:	e000ed04 	.word	0xe000ed04

08006594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d017      	beq.n	80065d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065a6:	4b13      	ldr	r3, [pc, #76]	; (80065f4 <vTaskDelay+0x60>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <vTaskDelay+0x30>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60bb      	str	r3, [r7, #8]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065c4:	f000 f88a 	bl	80066dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065c8:	2100      	movs	r1, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fcfe 	bl	8006fcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065d0:	f000 f892 	bl	80066f8 <xTaskResumeAll>
 80065d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d107      	bne.n	80065ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <vTaskDelay+0x64>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20001634 	.word	0x20001634
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	; 0x28
 8006600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800660a:	463a      	mov	r2, r7
 800660c:	1d39      	adds	r1, r7, #4
 800660e:	f107 0308 	add.w	r3, r7, #8
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff f832 	bl	800567c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	9202      	str	r2, [sp, #8]
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	2300      	movs	r3, #0
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	2300      	movs	r3, #0
 8006628:	460a      	mov	r2, r1
 800662a:	4924      	ldr	r1, [pc, #144]	; (80066bc <vTaskStartScheduler+0xc0>)
 800662c:	4824      	ldr	r0, [pc, #144]	; (80066c0 <vTaskStartScheduler+0xc4>)
 800662e:	f7ff fdf9 	bl	8006224 <xTaskCreateStatic>
 8006632:	4603      	mov	r3, r0
 8006634:	4a23      	ldr	r2, [pc, #140]	; (80066c4 <vTaskStartScheduler+0xc8>)
 8006636:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006638:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <vTaskStartScheduler+0xc8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006640:	2301      	movs	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e001      	b.n	800664a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d102      	bne.n	8006656 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006650:	f000 fd10 	bl	8007074 <xTimerCreateTimerTask>
 8006654:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d11b      	bne.n	8006694 <vTaskStartScheduler+0x98>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	613b      	str	r3, [r7, #16]
}
 800666e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006670:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <vTaskStartScheduler+0xcc>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3354      	adds	r3, #84	; 0x54
 8006676:	4a15      	ldr	r2, [pc, #84]	; (80066cc <vTaskStartScheduler+0xd0>)
 8006678:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <vTaskStartScheduler+0xd4>)
 800667c:	f04f 32ff 	mov.w	r2, #4294967295
 8006680:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006682:	4b14      	ldr	r3, [pc, #80]	; (80066d4 <vTaskStartScheduler+0xd8>)
 8006684:	2201      	movs	r2, #1
 8006686:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <vTaskStartScheduler+0xdc>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800668e:	f001 f8c7 	bl	8007820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006692:	e00e      	b.n	80066b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d10a      	bne.n	80066b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60fb      	str	r3, [r7, #12]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <vTaskStartScheduler+0xb4>
}
 80066b2:	bf00      	nop
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	0800819c 	.word	0x0800819c
 80066c0:	08006d01 	.word	0x08006d01
 80066c4:	20001630 	.word	0x20001630
 80066c8:	20001138 	.word	0x20001138
 80066cc:	20000010 	.word	0x20000010
 80066d0:	2000162c 	.word	0x2000162c
 80066d4:	20001618 	.word	0x20001618
 80066d8:	20001610 	.word	0x20001610

080066dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <vTaskSuspendAll+0x18>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3301      	adds	r3, #1
 80066e6:	4a03      	ldr	r2, [pc, #12]	; (80066f4 <vTaskSuspendAll+0x18>)
 80066e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066ea:	bf00      	nop
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	20001634 	.word	0x20001634

080066f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006702:	2300      	movs	r3, #0
 8006704:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006706:	4b42      	ldr	r3, [pc, #264]	; (8006810 <xTaskResumeAll+0x118>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <xTaskResumeAll+0x2c>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	603b      	str	r3, [r7, #0]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006724:	f001 f91e 	bl	8007964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006728:	4b39      	ldr	r3, [pc, #228]	; (8006810 <xTaskResumeAll+0x118>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3b01      	subs	r3, #1
 800672e:	4a38      	ldr	r2, [pc, #224]	; (8006810 <xTaskResumeAll+0x118>)
 8006730:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006732:	4b37      	ldr	r3, [pc, #220]	; (8006810 <xTaskResumeAll+0x118>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d162      	bne.n	8006800 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <xTaskResumeAll+0x11c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d05e      	beq.n	8006800 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006742:	e02f      	b.n	80067a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006744:	4b34      	ldr	r3, [pc, #208]	; (8006818 <xTaskResumeAll+0x120>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3318      	adds	r3, #24
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff f851 	bl	80057f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3304      	adds	r3, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff f84c 	bl	80057f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4b2d      	ldr	r3, [pc, #180]	; (800681c <xTaskResumeAll+0x124>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d903      	bls.n	8006774 <xTaskResumeAll+0x7c>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	4a2a      	ldr	r2, [pc, #168]	; (800681c <xTaskResumeAll+0x124>)
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4a27      	ldr	r2, [pc, #156]	; (8006820 <xTaskResumeAll+0x128>)
 8006782:	441a      	add	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f7fe ffd7 	bl	800573e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	4b23      	ldr	r3, [pc, #140]	; (8006824 <xTaskResumeAll+0x12c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	429a      	cmp	r2, r3
 800679c:	d302      	bcc.n	80067a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800679e:	4b22      	ldr	r3, [pc, #136]	; (8006828 <xTaskResumeAll+0x130>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067a4:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <xTaskResumeAll+0x120>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1cb      	bne.n	8006744 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067b2:	f000 fb5f 	bl	8006e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067b6:	4b1d      	ldr	r3, [pc, #116]	; (800682c <xTaskResumeAll+0x134>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d010      	beq.n	80067e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067c2:	f000 f847 	bl	8006854 <xTaskIncrementTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067cc:	4b16      	ldr	r3, [pc, #88]	; (8006828 <xTaskResumeAll+0x130>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f1      	bne.n	80067c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <xTaskResumeAll+0x134>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067e4:	4b10      	ldr	r3, [pc, #64]	; (8006828 <xTaskResumeAll+0x130>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d009      	beq.n	8006800 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067f0:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <xTaskResumeAll+0x138>)
 80067f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006800:	f001 f8e0 	bl	80079c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006804:	68bb      	ldr	r3, [r7, #8]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20001634 	.word	0x20001634
 8006814:	2000160c 	.word	0x2000160c
 8006818:	200015cc 	.word	0x200015cc
 800681c:	20001614 	.word	0x20001614
 8006820:	2000113c 	.word	0x2000113c
 8006824:	20001138 	.word	0x20001138
 8006828:	20001620 	.word	0x20001620
 800682c:	2000161c 	.word	0x2000161c
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <xTaskGetTickCount+0x1c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006840:	687b      	ldr	r3, [r7, #4]
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20001610 	.word	0x20001610

08006854 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685e:	4b4f      	ldr	r3, [pc, #316]	; (800699c <xTaskIncrementTick+0x148>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f040 808f 	bne.w	8006986 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006868:	4b4d      	ldr	r3, [pc, #308]	; (80069a0 <xTaskIncrementTick+0x14c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3301      	adds	r3, #1
 800686e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006870:	4a4b      	ldr	r2, [pc, #300]	; (80069a0 <xTaskIncrementTick+0x14c>)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d120      	bne.n	80068be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800687c:	4b49      	ldr	r3, [pc, #292]	; (80069a4 <xTaskIncrementTick+0x150>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <xTaskIncrementTick+0x48>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	603b      	str	r3, [r7, #0]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <xTaskIncrementTick+0x46>
 800689c:	4b41      	ldr	r3, [pc, #260]	; (80069a4 <xTaskIncrementTick+0x150>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <xTaskIncrementTick+0x154>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a3f      	ldr	r2, [pc, #252]	; (80069a4 <xTaskIncrementTick+0x150>)
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <xTaskIncrementTick+0x154>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	4b3e      	ldr	r3, [pc, #248]	; (80069ac <xTaskIncrementTick+0x158>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	4a3d      	ldr	r2, [pc, #244]	; (80069ac <xTaskIncrementTick+0x158>)
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	f000 fadb 	bl	8006e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068be:	4b3c      	ldr	r3, [pc, #240]	; (80069b0 <xTaskIncrementTick+0x15c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d349      	bcc.n	800695c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068c8:	4b36      	ldr	r3, [pc, #216]	; (80069a4 <xTaskIncrementTick+0x150>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d2:	4b37      	ldr	r3, [pc, #220]	; (80069b0 <xTaskIncrementTick+0x15c>)
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295
 80068d8:	601a      	str	r2, [r3, #0]
					break;
 80068da:	e03f      	b.n	800695c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068dc:	4b31      	ldr	r3, [pc, #196]	; (80069a4 <xTaskIncrementTick+0x150>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d203      	bcs.n	80068fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068f4:	4a2e      	ldr	r2, [pc, #184]	; (80069b0 <xTaskIncrementTick+0x15c>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068fa:	e02f      	b.n	800695c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	3304      	adds	r3, #4
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe ff79 	bl	80057f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	3318      	adds	r3, #24
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe ff70 	bl	80057f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	4b25      	ldr	r3, [pc, #148]	; (80069b4 <xTaskIncrementTick+0x160>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d903      	bls.n	800692c <xTaskIncrementTick+0xd8>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	4a22      	ldr	r2, [pc, #136]	; (80069b4 <xTaskIncrementTick+0x160>)
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <xTaskIncrementTick+0x164>)
 800693a:	441a      	add	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	3304      	adds	r3, #4
 8006940:	4619      	mov	r1, r3
 8006942:	4610      	mov	r0, r2
 8006944:	f7fe fefb 	bl	800573e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <xTaskIncrementTick+0x168>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	429a      	cmp	r2, r3
 8006954:	d3b8      	bcc.n	80068c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006956:	2301      	movs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800695a:	e7b5      	b.n	80068c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800695c:	4b17      	ldr	r3, [pc, #92]	; (80069bc <xTaskIncrementTick+0x168>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006962:	4915      	ldr	r1, [pc, #84]	; (80069b8 <xTaskIncrementTick+0x164>)
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d901      	bls.n	8006978 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006974:	2301      	movs	r3, #1
 8006976:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006978:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <xTaskIncrementTick+0x16c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d007      	beq.n	8006990 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	e004      	b.n	8006990 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006986:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <xTaskIncrementTick+0x170>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <xTaskIncrementTick+0x170>)
 800698e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006990:	697b      	ldr	r3, [r7, #20]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20001634 	.word	0x20001634
 80069a0:	20001610 	.word	0x20001610
 80069a4:	200015c4 	.word	0x200015c4
 80069a8:	200015c8 	.word	0x200015c8
 80069ac:	20001624 	.word	0x20001624
 80069b0:	2000162c 	.word	0x2000162c
 80069b4:	20001614 	.word	0x20001614
 80069b8:	2000113c 	.word	0x2000113c
 80069bc:	20001138 	.word	0x20001138
 80069c0:	20001620 	.word	0x20001620
 80069c4:	2000161c 	.word	0x2000161c

080069c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069ce:	4b2a      	ldr	r3, [pc, #168]	; (8006a78 <vTaskSwitchContext+0xb0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069d6:	4b29      	ldr	r3, [pc, #164]	; (8006a7c <vTaskSwitchContext+0xb4>)
 80069d8:	2201      	movs	r2, #1
 80069da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069dc:	e046      	b.n	8006a6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80069de:	4b27      	ldr	r3, [pc, #156]	; (8006a7c <vTaskSwitchContext+0xb4>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e4:	4b26      	ldr	r3, [pc, #152]	; (8006a80 <vTaskSwitchContext+0xb8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e010      	b.n	8006a0e <vTaskSwitchContext+0x46>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <vTaskSwitchContext+0x40>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	607b      	str	r3, [r7, #4]
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <vTaskSwitchContext+0x3e>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	491d      	ldr	r1, [pc, #116]	; (8006a84 <vTaskSwitchContext+0xbc>)
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0e4      	beq.n	80069ec <vTaskSwitchContext+0x24>
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <vTaskSwitchContext+0xbc>)
 8006a2e:	4413      	add	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3308      	adds	r3, #8
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d104      	bne.n	8006a52 <vTaskSwitchContext+0x8a>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a0b      	ldr	r2, [pc, #44]	; (8006a88 <vTaskSwitchContext+0xc0>)
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <vTaskSwitchContext+0xb8>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <vTaskSwitchContext+0xc0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3354      	adds	r3, #84	; 0x54
 8006a68:	4a08      	ldr	r2, [pc, #32]	; (8006a8c <vTaskSwitchContext+0xc4>)
 8006a6a:	6013      	str	r3, [r2, #0]
}
 8006a6c:	bf00      	nop
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	20001634 	.word	0x20001634
 8006a7c:	20001620 	.word	0x20001620
 8006a80:	20001614 	.word	0x20001614
 8006a84:	2000113c 	.word	0x2000113c
 8006a88:	20001138 	.word	0x20001138
 8006a8c:	20000010 	.word	0x20000010

08006a90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60fb      	str	r3, [r7, #12]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ab6:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <vTaskPlaceOnEventList+0x44>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3318      	adds	r3, #24
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fe fe61 	bl	8005786 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	6838      	ldr	r0, [r7, #0]
 8006ac8:	f000 fa80 	bl	8006fcc <prvAddCurrentTaskToDelayedList>
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20001138 	.word	0x20001138

08006ad8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	617b      	str	r3, [r7, #20]
}
 8006afc:	bf00      	nop
 8006afe:	e7fe      	b.n	8006afe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <vTaskPlaceOnEventListRestricted+0x54>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3318      	adds	r3, #24
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7fe fe18 	bl	800573e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295
 8006b18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	68b8      	ldr	r0, [r7, #8]
 8006b1e:	f000 fa55 	bl	8006fcc <prvAddCurrentTaskToDelayedList>
	}
 8006b22:	bf00      	nop
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20001138 	.word	0x20001138

08006b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60fb      	str	r3, [r7, #12]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	3318      	adds	r3, #24
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe fe49 	bl	80057f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b66:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <xTaskRemoveFromEventList+0xb0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d11d      	bne.n	8006baa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fe40 	bl	80057f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	4b19      	ldr	r3, [pc, #100]	; (8006be4 <xTaskRemoveFromEventList+0xb4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d903      	bls.n	8006b8c <xTaskRemoveFromEventList+0x5c>
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	4a16      	ldr	r2, [pc, #88]	; (8006be4 <xTaskRemoveFromEventList+0xb4>)
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <xTaskRemoveFromEventList+0xb8>)
 8006b9a:	441a      	add	r2, r3
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	f7fe fdcb 	bl	800573e <vListInsertEnd>
 8006ba8:	e005      	b.n	8006bb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3318      	adds	r3, #24
 8006bae:	4619      	mov	r1, r3
 8006bb0:	480e      	ldr	r0, [pc, #56]	; (8006bec <xTaskRemoveFromEventList+0xbc>)
 8006bb2:	f7fe fdc4 	bl	800573e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bba:	4b0d      	ldr	r3, [pc, #52]	; (8006bf0 <xTaskRemoveFromEventList+0xc0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d905      	bls.n	8006bd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <xTaskRemoveFromEventList+0xc4>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e001      	b.n	8006bd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bd4:	697b      	ldr	r3, [r7, #20]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20001634 	.word	0x20001634
 8006be4:	20001614 	.word	0x20001614
 8006be8:	2000113c 	.word	0x2000113c
 8006bec:	200015cc 	.word	0x200015cc
 8006bf0:	20001138 	.word	0x20001138
 8006bf4:	20001620 	.word	0x20001620

08006bf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <vTaskInternalSetTimeOutState+0x24>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <vTaskInternalSetTimeOutState+0x28>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	605a      	str	r2, [r3, #4]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20001624 	.word	0x20001624
 8006c20:	20001610 	.word	0x20001610

08006c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	613b      	str	r3, [r7, #16]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c66:	f000 fe7d 	bl	8007964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <xTaskCheckForTimeOut+0xbc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d102      	bne.n	8006c8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	e023      	b.n	8006cd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <xTaskCheckForTimeOut+0xc0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d007      	beq.n	8006ca6 <xTaskCheckForTimeOut+0x82>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d302      	bcc.n	8006ca6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	61fb      	str	r3, [r7, #28]
 8006ca4:	e015      	b.n	8006cd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d20b      	bcs.n	8006cc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad2      	subs	r2, r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff ff9b 	bl	8006bf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	e004      	b.n	8006cd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cd2:	f000 fe77 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20001610 	.word	0x20001610
 8006ce4:	20001624 	.word	0x20001624

08006ce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cec:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <vTaskMissedYield+0x14>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
}
 8006cf2:	bf00      	nop
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20001620 	.word	0x20001620

08006d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d08:	f000 f852 	bl	8006db0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <prvIdleTask+0x28>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d9f9      	bls.n	8006d08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <prvIdleTask+0x2c>)
 8006d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d24:	e7f0      	b.n	8006d08 <prvIdleTask+0x8>
 8006d26:	bf00      	nop
 8006d28:	2000113c 	.word	0x2000113c
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d36:	2300      	movs	r3, #0
 8006d38:	607b      	str	r3, [r7, #4]
 8006d3a:	e00c      	b.n	8006d56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4a12      	ldr	r2, [pc, #72]	; (8006d90 <prvInitialiseTaskLists+0x60>)
 8006d48:	4413      	add	r3, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fcca 	bl	80056e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3301      	adds	r3, #1
 8006d54:	607b      	str	r3, [r7, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b37      	cmp	r3, #55	; 0x37
 8006d5a:	d9ef      	bls.n	8006d3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d5c:	480d      	ldr	r0, [pc, #52]	; (8006d94 <prvInitialiseTaskLists+0x64>)
 8006d5e:	f7fe fcc1 	bl	80056e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d62:	480d      	ldr	r0, [pc, #52]	; (8006d98 <prvInitialiseTaskLists+0x68>)
 8006d64:	f7fe fcbe 	bl	80056e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d68:	480c      	ldr	r0, [pc, #48]	; (8006d9c <prvInitialiseTaskLists+0x6c>)
 8006d6a:	f7fe fcbb 	bl	80056e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d6e:	480c      	ldr	r0, [pc, #48]	; (8006da0 <prvInitialiseTaskLists+0x70>)
 8006d70:	f7fe fcb8 	bl	80056e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d74:	480b      	ldr	r0, [pc, #44]	; (8006da4 <prvInitialiseTaskLists+0x74>)
 8006d76:	f7fe fcb5 	bl	80056e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <prvInitialiseTaskLists+0x78>)
 8006d7c:	4a05      	ldr	r2, [pc, #20]	; (8006d94 <prvInitialiseTaskLists+0x64>)
 8006d7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <prvInitialiseTaskLists+0x7c>)
 8006d82:	4a05      	ldr	r2, [pc, #20]	; (8006d98 <prvInitialiseTaskLists+0x68>)
 8006d84:	601a      	str	r2, [r3, #0]
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	2000113c 	.word	0x2000113c
 8006d94:	2000159c 	.word	0x2000159c
 8006d98:	200015b0 	.word	0x200015b0
 8006d9c:	200015cc 	.word	0x200015cc
 8006da0:	200015e0 	.word	0x200015e0
 8006da4:	200015f8 	.word	0x200015f8
 8006da8:	200015c4 	.word	0x200015c4
 8006dac:	200015c8 	.word	0x200015c8

08006db0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006db6:	e019      	b.n	8006dec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006db8:	f000 fdd4 	bl	8007964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbc:	4b10      	ldr	r3, [pc, #64]	; (8006e00 <prvCheckTasksWaitingTermination+0x50>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe fd15 	bl	80057f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dce:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <prvCheckTasksWaitingTermination+0x54>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	4a0b      	ldr	r2, [pc, #44]	; (8006e04 <prvCheckTasksWaitingTermination+0x54>)
 8006dd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <prvCheckTasksWaitingTermination+0x58>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <prvCheckTasksWaitingTermination+0x58>)
 8006de0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006de2:	f000 fdef 	bl	80079c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f810 	bl	8006e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <prvCheckTasksWaitingTermination+0x58>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e1      	bne.n	8006db8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	200015e0 	.word	0x200015e0
 8006e04:	2000160c 	.word	0x2000160c
 8006e08:	200015f4 	.word	0x200015f4

08006e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3354      	adds	r3, #84	; 0x54
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 f945 	bl	80080a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d108      	bne.n	8006e3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 ff87 	bl	8007d40 <vPortFree>
				vPortFree( pxTCB );
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 ff84 	bl	8007d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e38:	e018      	b.n	8006e6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d103      	bne.n	8006e4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 ff7b 	bl	8007d40 <vPortFree>
	}
 8006e4a:	e00f      	b.n	8006e6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d00a      	beq.n	8006e6c <prvDeleteTCB+0x60>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60fb      	str	r3, [r7, #12]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <prvDeleteTCB+0x5e>
	}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e7a:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <prvResetNextTaskUnblockTime+0x38>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d104      	bne.n	8006e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006e86:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e8c:	e008      	b.n	8006ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <prvResetNextTaskUnblockTime+0x38>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006e9e:	6013      	str	r3, [r2, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	200015c4 	.word	0x200015c4
 8006eb0:	2000162c 	.word	0x2000162c

08006eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eba:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <xTaskGetSchedulerState+0x34>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	607b      	str	r3, [r7, #4]
 8006ec6:	e008      	b.n	8006eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec8:	4b08      	ldr	r3, [pc, #32]	; (8006eec <xTaskGetSchedulerState+0x38>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d102      	bne.n	8006ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	607b      	str	r3, [r7, #4]
 8006ed4:	e001      	b.n	8006eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eda:	687b      	ldr	r3, [r7, #4]
	}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	20001618 	.word	0x20001618
 8006eec:	20001634 	.word	0x20001634

08006ef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d056      	beq.n	8006fb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f06:	4b2e      	ldr	r3, [pc, #184]	; (8006fc0 <xTaskPriorityDisinherit+0xd0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d00a      	beq.n	8006f26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	60bb      	str	r3, [r7, #8]
}
 8006f40:	bf00      	nop
 8006f42:	e7fe      	b.n	8006f42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f48:	1e5a      	subs	r2, r3, #1
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d02c      	beq.n	8006fb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d128      	bne.n	8006fb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fc46 	bl	80057f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <xTaskPriorityDisinherit+0xd4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d903      	bls.n	8006f94 <xTaskPriorityDisinherit+0xa4>
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	4a0c      	ldr	r2, [pc, #48]	; (8006fc4 <xTaskPriorityDisinherit+0xd4>)
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4a09      	ldr	r2, [pc, #36]	; (8006fc8 <xTaskPriorityDisinherit+0xd8>)
 8006fa2:	441a      	add	r2, r3
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f7fe fbc7 	bl	800573e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fb4:	697b      	ldr	r3, [r7, #20]
	}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20001138 	.word	0x20001138
 8006fc4:	20001614 	.word	0x20001614
 8006fc8:	2000113c 	.word	0x2000113c

08006fcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fd6:	4b21      	ldr	r3, [pc, #132]	; (800705c <prvAddCurrentTaskToDelayedList+0x90>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fdc:	4b20      	ldr	r3, [pc, #128]	; (8007060 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fc08 	bl	80057f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d10a      	bne.n	8007006 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	; (8007060 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4819      	ldr	r0, [pc, #100]	; (8007064 <prvAddCurrentTaskToDelayedList+0x98>)
 8007000:	f7fe fb9d 	bl	800573e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007004:	e026      	b.n	8007054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800700e:	4b14      	ldr	r3, [pc, #80]	; (8007060 <prvAddCurrentTaskToDelayedList+0x94>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	429a      	cmp	r2, r3
 800701c:	d209      	bcs.n	8007032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <prvAddCurrentTaskToDelayedList+0x94>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3304      	adds	r3, #4
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f7fe fbab 	bl	8005786 <vListInsert>
}
 8007030:	e010      	b.n	8007054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007032:	4b0e      	ldr	r3, [pc, #56]	; (800706c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <prvAddCurrentTaskToDelayedList+0x94>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3304      	adds	r3, #4
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7fe fba1 	bl	8005786 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	d202      	bcs.n	8007054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800704e:	4a08      	ldr	r2, [pc, #32]	; (8007070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6013      	str	r3, [r2, #0]
}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20001610 	.word	0x20001610
 8007060:	20001138 	.word	0x20001138
 8007064:	200015f8 	.word	0x200015f8
 8007068:	200015c8 	.word	0x200015c8
 800706c:	200015c4 	.word	0x200015c4
 8007070:	2000162c 	.word	0x2000162c

08007074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08a      	sub	sp, #40	; 0x28
 8007078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800707e:	f000 fb07 	bl	8007690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007082:	4b1c      	ldr	r3, [pc, #112]	; (80070f4 <xTimerCreateTimerTask+0x80>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d021      	beq.n	80070ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007092:	1d3a      	adds	r2, r7, #4
 8007094:	f107 0108 	add.w	r1, r7, #8
 8007098:	f107 030c 	add.w	r3, r7, #12
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe fb07 	bl	80056b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	9202      	str	r2, [sp, #8]
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	2302      	movs	r3, #2
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	2300      	movs	r3, #0
 80070b2:	460a      	mov	r2, r1
 80070b4:	4910      	ldr	r1, [pc, #64]	; (80070f8 <xTimerCreateTimerTask+0x84>)
 80070b6:	4811      	ldr	r0, [pc, #68]	; (80070fc <xTimerCreateTimerTask+0x88>)
 80070b8:	f7ff f8b4 	bl	8006224 <xTaskCreateStatic>
 80070bc:	4603      	mov	r3, r0
 80070be:	4a10      	ldr	r2, [pc, #64]	; (8007100 <xTimerCreateTimerTask+0x8c>)
 80070c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <xTimerCreateTimerTask+0x8c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070ca:	2301      	movs	r3, #1
 80070cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	613b      	str	r3, [r7, #16]
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070ea:	697b      	ldr	r3, [r7, #20]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20001668 	.word	0x20001668
 80070f8:	080081a4 	.word	0x080081a4
 80070fc:	08007239 	.word	0x08007239
 8007100:	2000166c 	.word	0x2000166c

08007104 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007112:	2300      	movs	r3, #0
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <xTimerGenericCommand+0x2e>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	623b      	str	r3, [r7, #32]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007132:	4b1a      	ldr	r3, [pc, #104]	; (800719c <xTimerGenericCommand+0x98>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d02a      	beq.n	8007190 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b05      	cmp	r3, #5
 800714a:	dc18      	bgt.n	800717e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800714c:	f7ff feb2 	bl	8006eb4 <xTaskGetSchedulerState>
 8007150:	4603      	mov	r3, r0
 8007152:	2b02      	cmp	r3, #2
 8007154:	d109      	bne.n	800716a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007156:	4b11      	ldr	r3, [pc, #68]	; (800719c <xTimerGenericCommand+0x98>)
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	f107 0110 	add.w	r1, r7, #16
 800715e:	2300      	movs	r3, #0
 8007160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007162:	f7fe fc77 	bl	8005a54 <xQueueGenericSend>
 8007166:	6278      	str	r0, [r7, #36]	; 0x24
 8007168:	e012      	b.n	8007190 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800716a:	4b0c      	ldr	r3, [pc, #48]	; (800719c <xTimerGenericCommand+0x98>)
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	f107 0110 	add.w	r1, r7, #16
 8007172:	2300      	movs	r3, #0
 8007174:	2200      	movs	r2, #0
 8007176:	f7fe fc6d 	bl	8005a54 <xQueueGenericSend>
 800717a:	6278      	str	r0, [r7, #36]	; 0x24
 800717c:	e008      	b.n	8007190 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800717e:	4b07      	ldr	r3, [pc, #28]	; (800719c <xTimerGenericCommand+0x98>)
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	f107 0110 	add.w	r1, r7, #16
 8007186:	2300      	movs	r3, #0
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	f7fe fd61 	bl	8005c50 <xQueueGenericSendFromISR>
 800718e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007192:	4618      	mov	r0, r3
 8007194:	3728      	adds	r7, #40	; 0x28
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20001668 	.word	0x20001668

080071a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071aa:	4b22      	ldr	r3, [pc, #136]	; (8007234 <prvProcessExpiredTimer+0x94>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fb1d 	bl	80057f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d022      	beq.n	8007212 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	699a      	ldr	r2, [r3, #24]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	18d1      	adds	r1, r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	6978      	ldr	r0, [r7, #20]
 80071da:	f000 f8d1 	bl	8007380 <prvInsertTimerInActiveList>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01f      	beq.n	8007224 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071e4:	2300      	movs	r3, #0
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	2300      	movs	r3, #0
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	2100      	movs	r1, #0
 80071ee:	6978      	ldr	r0, [r7, #20]
 80071f0:	f7ff ff88 	bl	8007104 <xTimerGenericCommand>
 80071f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d113      	bne.n	8007224 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	60fb      	str	r3, [r7, #12]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	b2da      	uxtb	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	6978      	ldr	r0, [r7, #20]
 800722a:	4798      	blx	r3
}
 800722c:	bf00      	nop
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20001660 	.word	0x20001660

08007238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007240:	f107 0308 	add.w	r3, r7, #8
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f857 	bl	80072f8 <prvGetNextExpireTime>
 800724a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f803 	bl	800725c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007256:	f000 f8d5 	bl	8007404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800725a:	e7f1      	b.n	8007240 <prvTimerTask+0x8>

0800725c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007266:	f7ff fa39 	bl	80066dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800726a:	f107 0308 	add.w	r3, r7, #8
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f866 	bl	8007340 <prvSampleTimeNow>
 8007274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d130      	bne.n	80072de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <prvProcessTimerOrBlockTask+0x3c>
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	429a      	cmp	r2, r3
 8007288:	d806      	bhi.n	8007298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800728a:	f7ff fa35 	bl	80066f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff ff85 	bl	80071a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007296:	e024      	b.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <prvProcessTimerOrBlockTask+0x90>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <prvProcessTimerOrBlockTask+0x50>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <prvProcessTimerOrBlockTask+0x52>
 80072ac:	2300      	movs	r3, #0
 80072ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072b0:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <prvProcessTimerOrBlockTask+0x94>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	f7fe ff7d 	bl	80061bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072c2:	f7ff fa19 	bl	80066f8 <xTaskResumeAll>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <prvProcessTimerOrBlockTask+0x98>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
}
 80072dc:	e001      	b.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072de:	f7ff fa0b 	bl	80066f8 <xTaskResumeAll>
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20001664 	.word	0x20001664
 80072f0:	20001668 	.word	0x20001668
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007300:	4b0e      	ldr	r3, [pc, #56]	; (800733c <prvGetNextExpireTime+0x44>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <prvGetNextExpireTime+0x16>
 800730a:	2201      	movs	r2, #1
 800730c:	e000      	b.n	8007310 <prvGetNextExpireTime+0x18>
 800730e:	2200      	movs	r2, #0
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800731c:	4b07      	ldr	r3, [pc, #28]	; (800733c <prvGetNextExpireTime+0x44>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e001      	b.n	800732c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	20001660 	.word	0x20001660

08007340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007348:	f7ff fa74 	bl	8006834 <xTaskGetTickCount>
 800734c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800734e:	4b0b      	ldr	r3, [pc, #44]	; (800737c <prvSampleTimeNow+0x3c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d205      	bcs.n	8007364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007358:	f000 f936 	bl	80075c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e002      	b.n	800736a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800736a:	4a04      	ldr	r2, [pc, #16]	; (800737c <prvSampleTimeNow+0x3c>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007370:	68fb      	ldr	r3, [r7, #12]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20001670 	.word	0x20001670

08007380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d812      	bhi.n	80073cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d302      	bcc.n	80073ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e01b      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <prvInsertTimerInActiveList+0x7c>)
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7fe f9de 	bl	8005786 <vListInsert>
 80073ca:	e012      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d206      	bcs.n	80073e2 <prvInsertTimerInActiveList+0x62>
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d302      	bcc.n	80073e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073dc:	2301      	movs	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e007      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <prvInsertTimerInActiveList+0x80>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fe f9ca 	bl	8005786 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073f2:	697b      	ldr	r3, [r7, #20]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20001664 	.word	0x20001664
 8007400:	20001660 	.word	0x20001660

08007404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08e      	sub	sp, #56	; 0x38
 8007408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800740a:	e0ca      	b.n	80075a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	da18      	bge.n	8007444 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	3304      	adds	r3, #4
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	61fb      	str	r3, [r7, #28]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743a:	6850      	ldr	r0, [r2, #4]
 800743c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743e:	6892      	ldr	r2, [r2, #8]
 8007440:	4611      	mov	r1, r2
 8007442:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f2c0 80aa 	blt.w	80075a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	3304      	adds	r3, #4
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe f9cb 	bl	80057f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007462:	463b      	mov	r3, r7
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff ff6b 	bl	8007340 <prvSampleTimeNow>
 800746a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b09      	cmp	r3, #9
 8007470:	f200 8097 	bhi.w	80075a2 <prvProcessReceivedCommands+0x19e>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <prvProcessReceivedCommands+0x78>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	080074a5 	.word	0x080074a5
 8007480:	080074a5 	.word	0x080074a5
 8007484:	080074a5 	.word	0x080074a5
 8007488:	08007519 	.word	0x08007519
 800748c:	0800752d 	.word	0x0800752d
 8007490:	08007577 	.word	0x08007577
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074a5 	.word	0x080074a5
 800749c:	08007519 	.word	0x08007519
 80074a0:	0800752d 	.word	0x0800752d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074aa:	f043 0301 	orr.w	r3, r3, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	18d1      	adds	r1, r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c4:	f7ff ff5c 	bl	8007380 <prvInsertTimerInActiveList>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d069      	beq.n	80075a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d05e      	beq.n	80075a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	441a      	add	r2, r3
 80074ec:	2300      	movs	r3, #0
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	2300      	movs	r3, #0
 80074f2:	2100      	movs	r1, #0
 80074f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f6:	f7ff fe05 	bl	8007104 <xTimerGenericCommand>
 80074fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d14f      	bne.n	80075a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	61bb      	str	r3, [r7, #24]
}
 8007514:	bf00      	nop
 8007516:	e7fe      	b.n	8007516 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800751e:	f023 0301 	bic.w	r3, r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800752a:	e03a      	b.n	80075a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	617b      	str	r3, [r7, #20]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	18d1      	adds	r1, r2, r3
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007570:	f7ff ff06 	bl	8007380 <prvInsertTimerInActiveList>
					break;
 8007574:	e015      	b.n	80075a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007586:	f000 fbdb 	bl	8007d40 <vPortFree>
 800758a:	e00a      	b.n	80075a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007592:	f023 0301 	bic.w	r3, r3, #1
 8007596:	b2da      	uxtb	r2, r3
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800759e:	e000      	b.n	80075a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80075a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <prvProcessReceivedCommands+0x1c0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	1d39      	adds	r1, r7, #4
 80075a8:	2200      	movs	r2, #0
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fbec 	bl	8005d88 <xQueueReceive>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f47f af2a 	bne.w	800740c <prvProcessReceivedCommands+0x8>
	}
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	3730      	adds	r7, #48	; 0x30
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20001668 	.word	0x20001668

080075c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ce:	e048      	b.n	8007662 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d0:	4b2d      	ldr	r3, [pc, #180]	; (8007688 <prvSwitchTimerLists+0xc0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075da:	4b2b      	ldr	r3, [pc, #172]	; (8007688 <prvSwitchTimerLists+0xc0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe f905 	bl	80057f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d02e      	beq.n	8007662 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4413      	add	r3, r2
 800760c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	429a      	cmp	r2, r3
 8007614:	d90e      	bls.n	8007634 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007622:	4b19      	ldr	r3, [pc, #100]	; (8007688 <prvSwitchTimerLists+0xc0>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3304      	adds	r3, #4
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f7fe f8aa 	bl	8005786 <vListInsert>
 8007632:	e016      	b.n	8007662 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007634:	2300      	movs	r3, #0
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	2300      	movs	r3, #0
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	2100      	movs	r1, #0
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff fd60 	bl	8007104 <xTimerGenericCommand>
 8007644:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	603b      	str	r3, [r7, #0]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007662:	4b09      	ldr	r3, [pc, #36]	; (8007688 <prvSwitchTimerLists+0xc0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1b1      	bne.n	80075d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <prvSwitchTimerLists+0xc0>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007672:	4b06      	ldr	r3, [pc, #24]	; (800768c <prvSwitchTimerLists+0xc4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a04      	ldr	r2, [pc, #16]	; (8007688 <prvSwitchTimerLists+0xc0>)
 8007678:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800767a:	4a04      	ldr	r2, [pc, #16]	; (800768c <prvSwitchTimerLists+0xc4>)
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	6013      	str	r3, [r2, #0]
}
 8007680:	bf00      	nop
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20001660 	.word	0x20001660
 800768c:	20001664 	.word	0x20001664

08007690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007696:	f000 f965 	bl	8007964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800769a:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <prvCheckForValidListAndQueue+0x60>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d120      	bne.n	80076e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076a2:	4814      	ldr	r0, [pc, #80]	; (80076f4 <prvCheckForValidListAndQueue+0x64>)
 80076a4:	f7fe f81e 	bl	80056e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076a8:	4813      	ldr	r0, [pc, #76]	; (80076f8 <prvCheckForValidListAndQueue+0x68>)
 80076aa:	f7fe f81b 	bl	80056e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <prvCheckForValidListAndQueue+0x6c>)
 80076b0:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <prvCheckForValidListAndQueue+0x64>)
 80076b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <prvCheckForValidListAndQueue+0x70>)
 80076b6:	4a10      	ldr	r2, [pc, #64]	; (80076f8 <prvCheckForValidListAndQueue+0x68>)
 80076b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076ba:	2300      	movs	r3, #0
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <prvCheckForValidListAndQueue+0x74>)
 80076c0:	4a11      	ldr	r2, [pc, #68]	; (8007708 <prvCheckForValidListAndQueue+0x78>)
 80076c2:	2110      	movs	r1, #16
 80076c4:	200a      	movs	r0, #10
 80076c6:	f7fe f929 	bl	800591c <xQueueGenericCreateStatic>
 80076ca:	4603      	mov	r3, r0
 80076cc:	4a08      	ldr	r2, [pc, #32]	; (80076f0 <prvCheckForValidListAndQueue+0x60>)
 80076ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076d0:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <prvCheckForValidListAndQueue+0x60>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <prvCheckForValidListAndQueue+0x60>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	490b      	ldr	r1, [pc, #44]	; (800770c <prvCheckForValidListAndQueue+0x7c>)
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fd42 	bl	8006168 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076e4:	f000 f96e 	bl	80079c4 <vPortExitCritical>
}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20001668 	.word	0x20001668
 80076f4:	20001638 	.word	0x20001638
 80076f8:	2000164c 	.word	0x2000164c
 80076fc:	20001660 	.word	0x20001660
 8007700:	20001664 	.word	0x20001664
 8007704:	20001714 	.word	0x20001714
 8007708:	20001674 	.word	0x20001674
 800770c:	080081ac 	.word	0x080081ac

08007710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3b04      	subs	r3, #4
 8007720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b04      	subs	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f023 0201 	bic.w	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3b04      	subs	r3, #4
 800773e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007740:	4a0c      	ldr	r2, [pc, #48]	; (8007774 <pxPortInitialiseStack+0x64>)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3b14      	subs	r3, #20
 800774a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3b04      	subs	r3, #4
 8007756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f06f 0202 	mvn.w	r2, #2
 800775e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3b20      	subs	r3, #32
 8007764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	08007779 	.word	0x08007779

08007778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <prvTaskExitError+0x54>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d00a      	beq.n	80077a2 <prvTaskExitError+0x2a>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60fb      	str	r3, [r7, #12]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <prvTaskExitError+0x28>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60bb      	str	r3, [r7, #8]
}
 80077b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077b6:	bf00      	nop
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0fc      	beq.n	80077b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	2000000c 	.word	0x2000000c

080077d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <pxCurrentTCBConst2>)
 80077d2:	6819      	ldr	r1, [r3, #0]
 80077d4:	6808      	ldr	r0, [r1, #0]
 80077d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077da:	f380 8809 	msr	PSP, r0
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8811 	msr	BASEPRI, r0
 80077ea:	4770      	bx	lr
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst2>:
 80077f0:	20001138 	.word	0x20001138
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077f8:	4808      	ldr	r0, [pc, #32]	; (800781c <prvPortStartFirstTask+0x24>)
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	6800      	ldr	r0, [r0, #0]
 80077fe:	f380 8808 	msr	MSP, r0
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8814 	msr	CONTROL, r0
 800780a:	b662      	cpsie	i
 800780c:	b661      	cpsie	f
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	df00      	svc	0
 8007818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800781a:	bf00      	nop
 800781c:	e000ed08 	.word	0xe000ed08

08007820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007826:	4b46      	ldr	r3, [pc, #280]	; (8007940 <xPortStartScheduler+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a46      	ldr	r2, [pc, #280]	; (8007944 <xPortStartScheduler+0x124>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10a      	bne.n	8007846 <xPortStartScheduler+0x26>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	613b      	str	r3, [r7, #16]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007846:	4b3e      	ldr	r3, [pc, #248]	; (8007940 <xPortStartScheduler+0x120>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a3f      	ldr	r2, [pc, #252]	; (8007948 <xPortStartScheduler+0x128>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10a      	bne.n	8007866 <xPortStartScheduler+0x46>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007866:	4b39      	ldr	r3, [pc, #228]	; (800794c <xPortStartScheduler+0x12c>)
 8007868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007888:	b2da      	uxtb	r2, r3
 800788a:	4b31      	ldr	r3, [pc, #196]	; (8007950 <xPortStartScheduler+0x130>)
 800788c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800788e:	4b31      	ldr	r3, [pc, #196]	; (8007954 <xPortStartScheduler+0x134>)
 8007890:	2207      	movs	r2, #7
 8007892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007894:	e009      	b.n	80078aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007896:	4b2f      	ldr	r3, [pc, #188]	; (8007954 <xPortStartScheduler+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3b01      	subs	r3, #1
 800789c:	4a2d      	ldr	r2, [pc, #180]	; (8007954 <xPortStartScheduler+0x134>)
 800789e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d0ef      	beq.n	8007896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078b6:	4b27      	ldr	r3, [pc, #156]	; (8007954 <xPortStartScheduler+0x134>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f1c3 0307 	rsb	r3, r3, #7
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d00a      	beq.n	80078d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60bb      	str	r3, [r7, #8]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078d8:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <xPortStartScheduler+0x134>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <xPortStartScheduler+0x134>)
 80078e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078e2:	4b1c      	ldr	r3, [pc, #112]	; (8007954 <xPortStartScheduler+0x134>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ea:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <xPortStartScheduler+0x134>)
 80078ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078f6:	4b18      	ldr	r3, [pc, #96]	; (8007958 <xPortStartScheduler+0x138>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a17      	ldr	r2, [pc, #92]	; (8007958 <xPortStartScheduler+0x138>)
 80078fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <xPortStartScheduler+0x138>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a14      	ldr	r2, [pc, #80]	; (8007958 <xPortStartScheduler+0x138>)
 8007908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800790c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800790e:	f000 f8dd 	bl	8007acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007912:	4b12      	ldr	r3, [pc, #72]	; (800795c <xPortStartScheduler+0x13c>)
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007918:	f000 f8fc 	bl	8007b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800791c:	4b10      	ldr	r3, [pc, #64]	; (8007960 <xPortStartScheduler+0x140>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a0f      	ldr	r2, [pc, #60]	; (8007960 <xPortStartScheduler+0x140>)
 8007922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007928:	f7ff ff66 	bl	80077f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800792c:	f7ff f84c 	bl	80069c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007930:	f7ff ff22 	bl	8007778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	e000ed00 	.word	0xe000ed00
 8007944:	410fc271 	.word	0x410fc271
 8007948:	410fc270 	.word	0x410fc270
 800794c:	e000e400 	.word	0xe000e400
 8007950:	20001764 	.word	0x20001764
 8007954:	20001768 	.word	0x20001768
 8007958:	e000ed20 	.word	0xe000ed20
 800795c:	2000000c 	.word	0x2000000c
 8007960:	e000ef34 	.word	0xe000ef34

08007964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	607b      	str	r3, [r7, #4]
}
 800797c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800797e:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <vPortEnterCritical+0x58>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4a0d      	ldr	r2, [pc, #52]	; (80079bc <vPortEnterCritical+0x58>)
 8007986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <vPortEnterCritical+0x58>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10f      	bne.n	80079b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007990:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <vPortEnterCritical+0x5c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	603b      	str	r3, [r7, #0]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <vPortEnterCritical+0x4a>
	}
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	2000000c 	.word	0x2000000c
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <vPortExitCritical+0x50>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <vPortExitCritical+0x24>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	607b      	str	r3, [r7, #4]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <vPortExitCritical+0x50>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <vPortExitCritical+0x50>)
 80079f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079f2:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <vPortExitCritical+0x50>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <vPortExitCritical+0x42>
 80079fa:	2300      	movs	r3, #0
 80079fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f383 8811 	msr	BASEPRI, r3
}
 8007a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	2000000c 	.word	0x2000000c
	...

08007a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a20:	f3ef 8009 	mrs	r0, PSP
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <pxCurrentTCBConst>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f01e 0f10 	tst.w	lr, #16
 8007a30:	bf08      	it	eq
 8007a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	6010      	str	r0, [r2, #0]
 8007a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a44:	f380 8811 	msr	BASEPRI, r0
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f7fe ffba 	bl	80069c8 <vTaskSwitchContext>
 8007a54:	f04f 0000 	mov.w	r0, #0
 8007a58:	f380 8811 	msr	BASEPRI, r0
 8007a5c:	bc09      	pop	{r0, r3}
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	6808      	ldr	r0, [r1, #0]
 8007a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a66:	f01e 0f10 	tst.w	lr, #16
 8007a6a:	bf08      	it	eq
 8007a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a70:	f380 8809 	msr	PSP, r0
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst>:
 8007a80:	20001138 	.word	0x20001138
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
}
 8007aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007aa2:	f7fe fed7 	bl	8006854 <xTaskIncrementTick>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aac:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <xPortSysTickHandler+0x40>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f383 8811 	msr	BASEPRI, r3
}
 8007abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <vPortSetupTimerInterrupt+0x34>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <vPortSetupTimerInterrupt+0x38>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007adc:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <vPortSetupTimerInterrupt+0x3c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <vPortSetupTimerInterrupt+0x40>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	099b      	lsrs	r3, r3, #6
 8007ae8:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <vPortSetupTimerInterrupt+0x44>)
 8007aea:	3b01      	subs	r3, #1
 8007aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aee:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <vPortSetupTimerInterrupt+0x34>)
 8007af0:	2207      	movs	r2, #7
 8007af2:	601a      	str	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	e000e010 	.word	0xe000e010
 8007b04:	e000e018 	.word	0xe000e018
 8007b08:	20000000 	.word	0x20000000
 8007b0c:	10624dd3 	.word	0x10624dd3
 8007b10:	e000e014 	.word	0xe000e014

08007b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b24 <vPortEnableVFP+0x10>
 8007b18:	6801      	ldr	r1, [r0, #0]
 8007b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b1e:	6001      	str	r1, [r0, #0]
 8007b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b22:	bf00      	nop
 8007b24:	e000ed88 	.word	0xe000ed88

08007b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b2e:	f3ef 8305 	mrs	r3, IPSR
 8007b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b0f      	cmp	r3, #15
 8007b38:	d914      	bls.n	8007b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b3a:	4a17      	ldr	r2, [pc, #92]	; (8007b98 <vPortValidateInterruptPriority+0x70>)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b44:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <vPortValidateInterruptPriority+0x74>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	7afa      	ldrb	r2, [r7, #11]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d20a      	bcs.n	8007b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b64:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <vPortValidateInterruptPriority+0x78>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <vPortValidateInterruptPriority+0x7c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d90a      	bls.n	8007b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	603b      	str	r3, [r7, #0]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <vPortValidateInterruptPriority+0x60>
	}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	e000e3f0 	.word	0xe000e3f0
 8007b9c:	20001764 	.word	0x20001764
 8007ba0:	e000ed0c 	.word	0xe000ed0c
 8007ba4:	20001768 	.word	0x20001768

08007ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bb4:	f7fe fd92 	bl	80066dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bb8:	4b5b      	ldr	r3, [pc, #364]	; (8007d28 <pvPortMalloc+0x180>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bc0:	f000 f920 	bl	8007e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bc4:	4b59      	ldr	r3, [pc, #356]	; (8007d2c <pvPortMalloc+0x184>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f040 8093 	bne.w	8007cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01d      	beq.n	8007c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bd8:	2208      	movs	r2, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4413      	add	r3, r2
 8007bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d014      	beq.n	8007c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f023 0307 	bic.w	r3, r3, #7
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f003 0307 	and.w	r3, r3, #7
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <pvPortMalloc+0x6c>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	617b      	str	r3, [r7, #20]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d06e      	beq.n	8007cf8 <pvPortMalloc+0x150>
 8007c1a:	4b45      	ldr	r3, [pc, #276]	; (8007d30 <pvPortMalloc+0x188>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d869      	bhi.n	8007cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c24:	4b43      	ldr	r3, [pc, #268]	; (8007d34 <pvPortMalloc+0x18c>)
 8007c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c28:	4b42      	ldr	r3, [pc, #264]	; (8007d34 <pvPortMalloc+0x18c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c2e:	e004      	b.n	8007c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d903      	bls.n	8007c4c <pvPortMalloc+0xa4>
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f1      	bne.n	8007c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c4c:	4b36      	ldr	r3, [pc, #216]	; (8007d28 <pvPortMalloc+0x180>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d050      	beq.n	8007cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	2308      	movs	r3, #8
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d91f      	bls.n	8007cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	613b      	str	r3, [r7, #16]
}
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cb2:	69b8      	ldr	r0, [r7, #24]
 8007cb4:	f000 f908 	bl	8007ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cb8:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <pvPortMalloc+0x188>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <pvPortMalloc+0x188>)
 8007cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cc6:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <pvPortMalloc+0x188>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <pvPortMalloc+0x190>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d203      	bcs.n	8007cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cd2:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <pvPortMalloc+0x188>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <pvPortMalloc+0x190>)
 8007cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <pvPortMalloc+0x184>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <pvPortMalloc+0x194>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	4a11      	ldr	r2, [pc, #68]	; (8007d3c <pvPortMalloc+0x194>)
 8007cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cf8:	f7fe fcfe 	bl	80066f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <pvPortMalloc+0x174>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60fb      	str	r3, [r7, #12]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <pvPortMalloc+0x172>
	return pvReturn;
 8007d1c:	69fb      	ldr	r3, [r7, #28]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20005374 	.word	0x20005374
 8007d2c:	20005388 	.word	0x20005388
 8007d30:	20005378 	.word	0x20005378
 8007d34:	2000536c 	.word	0x2000536c
 8007d38:	2000537c 	.word	0x2000537c
 8007d3c:	20005380 	.word	0x20005380

08007d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d04d      	beq.n	8007dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d52:	2308      	movs	r3, #8
 8007d54:	425b      	negs	r3, r3
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <vPortFree+0xb8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <vPortFree+0x44>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60fb      	str	r3, [r7, #12]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <vPortFree+0x62>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60bb      	str	r3, [r7, #8]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <vPortFree+0xb8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01e      	beq.n	8007dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11a      	bne.n	8007dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	; (8007df8 <vPortFree+0xb8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	401a      	ands	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007dc8:	f7fe fc88 	bl	80066dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <vPortFree+0xbc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <vPortFree+0xbc>)
 8007dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dda:	6938      	ldr	r0, [r7, #16]
 8007ddc:	f000 f874 	bl	8007ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <vPortFree+0xc0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a06      	ldr	r2, [pc, #24]	; (8007e00 <vPortFree+0xc0>)
 8007de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dea:	f7fe fc85 	bl	80066f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dee:	bf00      	nop
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20005388 	.word	0x20005388
 8007dfc:	20005378 	.word	0x20005378
 8007e00:	20005384 	.word	0x20005384

08007e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e10:	4b27      	ldr	r3, [pc, #156]	; (8007eb0 <prvHeapInit+0xac>)
 8007e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00c      	beq.n	8007e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3307      	adds	r3, #7
 8007e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	4a1f      	ldr	r2, [pc, #124]	; (8007eb0 <prvHeapInit+0xac>)
 8007e34:	4413      	add	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <prvHeapInit+0xb0>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e42:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <prvHeapInit+0xb0>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e50:	2208      	movs	r2, #8
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4a15      	ldr	r2, [pc, #84]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e84:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <prvHeapInit+0xb8>)
 8007e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <prvHeapInit+0xbc>)
 8007e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <prvHeapInit+0xc0>)
 8007e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ea2:	601a      	str	r2, [r3, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	2000176c 	.word	0x2000176c
 8007eb4:	2000536c 	.word	0x2000536c
 8007eb8:	20005374 	.word	0x20005374
 8007ebc:	2000537c 	.word	0x2000537c
 8007ec0:	20005378 	.word	0x20005378
 8007ec4:	20005388 	.word	0x20005388

08007ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ed0:	4b28      	ldr	r3, [pc, #160]	; (8007f74 <prvInsertBlockIntoFreeList+0xac>)
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e002      	b.n	8007edc <prvInsertBlockIntoFreeList+0x14>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d8f7      	bhi.n	8007ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d108      	bne.n	8007f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	441a      	add	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	441a      	add	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d118      	bne.n	8007f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <prvInsertBlockIntoFreeList+0xb0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d00d      	beq.n	8007f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	441a      	add	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	e008      	b.n	8007f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <prvInsertBlockIntoFreeList+0xb0>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	e003      	b.n	8007f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d002      	beq.n	8007f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	2000536c 	.word	0x2000536c
 8007f78:	20005374 	.word	0x20005374

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4d0d      	ldr	r5, [pc, #52]	; (8007fb4 <__libc_init_array+0x38>)
 8007f80:	4c0d      	ldr	r4, [pc, #52]	; (8007fb8 <__libc_init_array+0x3c>)
 8007f82:	1b64      	subs	r4, r4, r5
 8007f84:	10a4      	asrs	r4, r4, #2
 8007f86:	2600      	movs	r6, #0
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	4d0b      	ldr	r5, [pc, #44]	; (8007fbc <__libc_init_array+0x40>)
 8007f8e:	4c0c      	ldr	r4, [pc, #48]	; (8007fc0 <__libc_init_array+0x44>)
 8007f90:	f000 f8f2 	bl	8008178 <_init>
 8007f94:	1b64      	subs	r4, r4, r5
 8007f96:	10a4      	asrs	r4, r4, #2
 8007f98:	2600      	movs	r6, #0
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	08008258 	.word	0x08008258
 8007fb8:	08008258 	.word	0x08008258
 8007fbc:	08008258 	.word	0x08008258
 8007fc0:	0800825c 	.word	0x0800825c

08007fc4 <__retarget_lock_acquire_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_release_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <memcpy>:
 8007fc8:	440a      	add	r2, r1
 8007fca:	4291      	cmp	r1, r2
 8007fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fd0:	d100      	bne.n	8007fd4 <memcpy+0xc>
 8007fd2:	4770      	bx	lr
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fde:	4291      	cmp	r1, r2
 8007fe0:	d1f9      	bne.n	8007fd6 <memcpy+0xe>
 8007fe2:	bd10      	pop	{r4, pc}

08007fe4 <memset>:
 8007fe4:	4402      	add	r2, r0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d100      	bne.n	8007fee <memset+0xa>
 8007fec:	4770      	bx	lr
 8007fee:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff2:	e7f9      	b.n	8007fe8 <memset+0x4>

08007ff4 <_free_r>:
 8007ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d044      	beq.n	8008084 <_free_r+0x90>
 8007ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffe:	9001      	str	r0, [sp, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f1a1 0404 	sub.w	r4, r1, #4
 8008006:	bfb8      	it	lt
 8008008:	18e4      	addlt	r4, r4, r3
 800800a:	f000 f8a9 	bl	8008160 <__malloc_lock>
 800800e:	4a1e      	ldr	r2, [pc, #120]	; (8008088 <_free_r+0x94>)
 8008010:	9801      	ldr	r0, [sp, #4]
 8008012:	6813      	ldr	r3, [r2, #0]
 8008014:	b933      	cbnz	r3, 8008024 <_free_r+0x30>
 8008016:	6063      	str	r3, [r4, #4]
 8008018:	6014      	str	r4, [r2, #0]
 800801a:	b003      	add	sp, #12
 800801c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008020:	f000 b8a4 	b.w	800816c <__malloc_unlock>
 8008024:	42a3      	cmp	r3, r4
 8008026:	d908      	bls.n	800803a <_free_r+0x46>
 8008028:	6825      	ldr	r5, [r4, #0]
 800802a:	1961      	adds	r1, r4, r5
 800802c:	428b      	cmp	r3, r1
 800802e:	bf01      	itttt	eq
 8008030:	6819      	ldreq	r1, [r3, #0]
 8008032:	685b      	ldreq	r3, [r3, #4]
 8008034:	1949      	addeq	r1, r1, r5
 8008036:	6021      	streq	r1, [r4, #0]
 8008038:	e7ed      	b.n	8008016 <_free_r+0x22>
 800803a:	461a      	mov	r2, r3
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	b10b      	cbz	r3, 8008044 <_free_r+0x50>
 8008040:	42a3      	cmp	r3, r4
 8008042:	d9fa      	bls.n	800803a <_free_r+0x46>
 8008044:	6811      	ldr	r1, [r2, #0]
 8008046:	1855      	adds	r5, r2, r1
 8008048:	42a5      	cmp	r5, r4
 800804a:	d10b      	bne.n	8008064 <_free_r+0x70>
 800804c:	6824      	ldr	r4, [r4, #0]
 800804e:	4421      	add	r1, r4
 8008050:	1854      	adds	r4, r2, r1
 8008052:	42a3      	cmp	r3, r4
 8008054:	6011      	str	r1, [r2, #0]
 8008056:	d1e0      	bne.n	800801a <_free_r+0x26>
 8008058:	681c      	ldr	r4, [r3, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	6053      	str	r3, [r2, #4]
 800805e:	4421      	add	r1, r4
 8008060:	6011      	str	r1, [r2, #0]
 8008062:	e7da      	b.n	800801a <_free_r+0x26>
 8008064:	d902      	bls.n	800806c <_free_r+0x78>
 8008066:	230c      	movs	r3, #12
 8008068:	6003      	str	r3, [r0, #0]
 800806a:	e7d6      	b.n	800801a <_free_r+0x26>
 800806c:	6825      	ldr	r5, [r4, #0]
 800806e:	1961      	adds	r1, r4, r5
 8008070:	428b      	cmp	r3, r1
 8008072:	bf04      	itt	eq
 8008074:	6819      	ldreq	r1, [r3, #0]
 8008076:	685b      	ldreq	r3, [r3, #4]
 8008078:	6063      	str	r3, [r4, #4]
 800807a:	bf04      	itt	eq
 800807c:	1949      	addeq	r1, r1, r5
 800807e:	6021      	streq	r1, [r4, #0]
 8008080:	6054      	str	r4, [r2, #4]
 8008082:	e7ca      	b.n	800801a <_free_r+0x26>
 8008084:	b003      	add	sp, #12
 8008086:	bd30      	pop	{r4, r5, pc}
 8008088:	20005390 	.word	0x20005390

0800808c <cleanup_glue>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	460c      	mov	r4, r1
 8008090:	6809      	ldr	r1, [r1, #0]
 8008092:	4605      	mov	r5, r0
 8008094:	b109      	cbz	r1, 800809a <cleanup_glue+0xe>
 8008096:	f7ff fff9 	bl	800808c <cleanup_glue>
 800809a:	4621      	mov	r1, r4
 800809c:	4628      	mov	r0, r5
 800809e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080a2:	f7ff bfa7 	b.w	8007ff4 <_free_r>
	...

080080a8 <_reclaim_reent>:
 80080a8:	4b2c      	ldr	r3, [pc, #176]	; (800815c <_reclaim_reent+0xb4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4283      	cmp	r3, r0
 80080ae:	b570      	push	{r4, r5, r6, lr}
 80080b0:	4604      	mov	r4, r0
 80080b2:	d051      	beq.n	8008158 <_reclaim_reent+0xb0>
 80080b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80080b6:	b143      	cbz	r3, 80080ca <_reclaim_reent+0x22>
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d14a      	bne.n	8008154 <_reclaim_reent+0xac>
 80080be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c0:	6819      	ldr	r1, [r3, #0]
 80080c2:	b111      	cbz	r1, 80080ca <_reclaim_reent+0x22>
 80080c4:	4620      	mov	r0, r4
 80080c6:	f7ff ff95 	bl	8007ff4 <_free_r>
 80080ca:	6961      	ldr	r1, [r4, #20]
 80080cc:	b111      	cbz	r1, 80080d4 <_reclaim_reent+0x2c>
 80080ce:	4620      	mov	r0, r4
 80080d0:	f7ff ff90 	bl	8007ff4 <_free_r>
 80080d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080d6:	b111      	cbz	r1, 80080de <_reclaim_reent+0x36>
 80080d8:	4620      	mov	r0, r4
 80080da:	f7ff ff8b 	bl	8007ff4 <_free_r>
 80080de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080e0:	b111      	cbz	r1, 80080e8 <_reclaim_reent+0x40>
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7ff ff86 	bl	8007ff4 <_free_r>
 80080e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80080ea:	b111      	cbz	r1, 80080f2 <_reclaim_reent+0x4a>
 80080ec:	4620      	mov	r0, r4
 80080ee:	f7ff ff81 	bl	8007ff4 <_free_r>
 80080f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080f4:	b111      	cbz	r1, 80080fc <_reclaim_reent+0x54>
 80080f6:	4620      	mov	r0, r4
 80080f8:	f7ff ff7c 	bl	8007ff4 <_free_r>
 80080fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80080fe:	b111      	cbz	r1, 8008106 <_reclaim_reent+0x5e>
 8008100:	4620      	mov	r0, r4
 8008102:	f7ff ff77 	bl	8007ff4 <_free_r>
 8008106:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008108:	b111      	cbz	r1, 8008110 <_reclaim_reent+0x68>
 800810a:	4620      	mov	r0, r4
 800810c:	f7ff ff72 	bl	8007ff4 <_free_r>
 8008110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008112:	b111      	cbz	r1, 800811a <_reclaim_reent+0x72>
 8008114:	4620      	mov	r0, r4
 8008116:	f7ff ff6d 	bl	8007ff4 <_free_r>
 800811a:	69a3      	ldr	r3, [r4, #24]
 800811c:	b1e3      	cbz	r3, 8008158 <_reclaim_reent+0xb0>
 800811e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008120:	4620      	mov	r0, r4
 8008122:	4798      	blx	r3
 8008124:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008126:	b1b9      	cbz	r1, 8008158 <_reclaim_reent+0xb0>
 8008128:	4620      	mov	r0, r4
 800812a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800812e:	f7ff bfad 	b.w	800808c <cleanup_glue>
 8008132:	5949      	ldr	r1, [r1, r5]
 8008134:	b941      	cbnz	r1, 8008148 <_reclaim_reent+0xa0>
 8008136:	3504      	adds	r5, #4
 8008138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813a:	2d80      	cmp	r5, #128	; 0x80
 800813c:	68d9      	ldr	r1, [r3, #12]
 800813e:	d1f8      	bne.n	8008132 <_reclaim_reent+0x8a>
 8008140:	4620      	mov	r0, r4
 8008142:	f7ff ff57 	bl	8007ff4 <_free_r>
 8008146:	e7ba      	b.n	80080be <_reclaim_reent+0x16>
 8008148:	680e      	ldr	r6, [r1, #0]
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff ff52 	bl	8007ff4 <_free_r>
 8008150:	4631      	mov	r1, r6
 8008152:	e7ef      	b.n	8008134 <_reclaim_reent+0x8c>
 8008154:	2500      	movs	r5, #0
 8008156:	e7ef      	b.n	8008138 <_reclaim_reent+0x90>
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	bf00      	nop
 800815c:	20000010 	.word	0x20000010

08008160 <__malloc_lock>:
 8008160:	4801      	ldr	r0, [pc, #4]	; (8008168 <__malloc_lock+0x8>)
 8008162:	f7ff bf2f 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8008166:	bf00      	nop
 8008168:	2000538c 	.word	0x2000538c

0800816c <__malloc_unlock>:
 800816c:	4801      	ldr	r0, [pc, #4]	; (8008174 <__malloc_unlock+0x8>)
 800816e:	f7ff bf2a 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8008172:	bf00      	nop
 8008174:	2000538c 	.word	0x2000538c

08008178 <_init>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	bf00      	nop
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr

08008184 <_fini>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr
