
PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800c090  0800c090  0001c090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1e4  0800c1e4  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1e4  0800c1e4  0001c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1ec  0800c1ec  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1ec  0800c1ec  0001c1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1f0  0800c1f0  0001c1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c1f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          0000625c  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006460  20006460  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027b34  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004baf  00000000  00000000  00047d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef0  00000000  00000000  0004c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d60  00000000  00000000  0004e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005159  00000000  00000000  00050568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002414d  00000000  00000000  000556c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e366f  00000000  00000000  0007980e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ce7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008934  00000000  00000000  0015ced0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  00165804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c078 	.word	0x0800c078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800c078 	.word	0x0800c078

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <prv_send_can_message>:
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
uint32_t TxMailbox;
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t *buffer) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
    static  CAN_TxHeaderTypeDef pTXHeader;
    uint8_t success = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]

    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0) {
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 ff8a 	bl	8003c3c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d027      	beq.n	8000d7e <prv_send_can_message+0x6e>

        pTXHeader.DLC                = (uint32_t)buffer->DLC;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	791b      	ldrb	r3, [r3, #4]
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <prv_send_can_message+0x78>)
 8000d36:	611a      	str	r2, [r3, #16]
        pTXHeader.ExtId              = 0U;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <prv_send_can_message+0x78>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
        pTXHeader.IDE                = CAN_ID_STD;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <prv_send_can_message+0x78>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
        pTXHeader.RTR                = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	0b9b      	lsrs	r3, r3, #14
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <prv_send_can_message+0x78>)
 8000d50:	60d3      	str	r3, [r2, #12]
        pTXHeader.StdId              = buffer->ident & CANID_MASK;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <prv_send_can_message+0x78>)
 8000d5c:	6013      	str	r3, [r2, #0]
        pTXHeader.TransmitGlobalTime = DISABLE;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <prv_send_can_message+0x78>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	751a      	strb	r2, [r3, #20]

        /* Now add message to FIFO. Should not fail */
        if (HAL_CAN_AddTxMessage(CANmodule->CANptr,  &pTXHeader, buffer->data, &TxMailbox) == HAL_OK)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	1d5a      	adds	r2, r3, #5
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <prv_send_can_message+0x7c>)
 8000d6e:	4906      	ldr	r1, [pc, #24]	; (8000d88 <prv_send_can_message+0x78>)
 8000d70:	f002 fe89 	bl	8003a86 <HAL_CAN_AddTxMessage>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <prv_send_can_message+0x6e>
        {
        	success = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return success;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000228 	.word	0x20000228
 8000d8c:	20000224 	.word	0x20000224

08000d90 <CAN_SendMessage>:




void CAN_SendMessage()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0


	CANModule_local->firstCANtxMessage = false;
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
	CANModule_local->bufferInhibitFlag = false;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
    if(CANModule_local->CANtxCount > 0U)
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d045      	beq.n	8000e3e <CAN_SendMessage+0xae>
    {
        uint16_t i;             /* index of transmitting message */
        CO_CANtx_t *buffer = &CANModule_local->txArray[0];
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
        CO_LOCK_CAN_SEND(CANModule_local);
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000dbe:	f3ef 8210 	mrs	r2, PRIMASK
 8000dc2:	607a      	str	r2, [r7, #4]
  return(result);
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop

        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	8a1b      	ldrh	r3, [r3, #16]
 8000dd2:	81fb      	strh	r3, [r7, #14]
 8000dd4:	e021      	b.n	8000e1a <CAN_SendMessage+0x8a>
                   /* Try to send message */
                   if (buffer->bufferFull) {
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d017      	beq.n	8000e0e <CAN_SendMessage+0x7e>
                       if (prv_send_can_message(CANModule_local, buffer)) {
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff93 	bl	8000d10 <prv_send_can_message>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00e      	beq.n	8000e0e <CAN_SendMessage+0x7e>
                           buffer->bufferFull = false;
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
                           CANModule_local->CANtxCount--;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8000dfc:	b292      	uxth	r2, r2
 8000dfe:	3a01      	subs	r2, #1
 8000e00:	b292      	uxth	r2, r2
 8000e02:	849a      	strh	r2, [r3, #36]	; 0x24
                           CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	6952      	ldr	r2, [r2, #20]
 8000e0c:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	81fb      	strh	r3, [r7, #14]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3318      	adds	r3, #24
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1da      	bne.n	8000dd6 <CAN_SendMessage+0x46>
                       }
                   }
               }
        /* Clear counter if no more messages */
        if(i == 0U){
 8000e20:	89fb      	ldrh	r3, [r7, #14]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d103      	bne.n	8000e2e <CAN_SendMessage+0x9e>
        	CANModule_local->CANtxCount = 0U;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f383 8810 	msr	PRIMASK, r3
}
 8000e3c:	bf00      	nop
    }
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000220 	.word	0x20000220

08000e4c <HAL_CAN_TxMailbox0CompleteCallback>:



void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 8000e54:	f7ff ff9c 	bl	8000d90 <CAN_SendMessage>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 8000e68:	f7ff ff92 	bl	8000d90 <CAN_SendMessage>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 8000e7c:	f7ff ff88 	bl	8000d90 <CAN_SendMessage>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <prv_read_can_received_msg>:


static void  prv_read_can_received_msg(CAN_HandleTypeDef* can, uint32_t fifo) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
    static CAN_RxHeaderTypeDef rx;
    static CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t *buffer = NULL;              /* receive message buffer from CO_CANmodule_t object. */
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
    uint16_t index;                         /* index of received message */
    uint32_t rcvMsgIdent;                   /* identifier of the received message */
    uint8_t messageFound = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	747b      	strb	r3, [r7, #17]

    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(can, fifo, &rx, rcvMsg.data) != HAL_OK)
 8000e9a:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <prv_read_can_received_msg+0x104>)
 8000e9c:	4a3c      	ldr	r2, [pc, #240]	; (8000f90 <prv_read_can_received_msg+0x108>)
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f002 ff00 	bl	8003ca6 <HAL_CAN_GetRxMessage>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d16a      	bne.n	8000f82 <prv_read_can_received_msg+0xfa>
    {
        return;
    }

    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx.StdId  | (rx.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8000eac:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <prv_read_can_received_msg+0x108>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <prv_read_can_received_msg+0x108>)
 8000eb2:	68d2      	ldr	r2, [r2, #12]
 8000eb4:	2a02      	cmp	r2, #2
 8000eb6:	d102      	bne.n	8000ebe <prv_read_can_received_msg+0x36>
 8000eb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ebc:	e000      	b.n	8000ec0 <prv_read_can_received_msg+0x38>
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	4a34      	ldr	r2, [pc, #208]	; (8000f94 <prv_read_can_received_msg+0x10c>)
 8000ec4:	6013      	str	r3, [r2, #0]
    rcvMsg.dlc = rx.DLC;
 8000ec6:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <prv_read_can_received_msg+0x108>)
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <prv_read_can_received_msg+0x10c>)
 8000ece:	711a      	strb	r2, [r3, #4]
    rcvMsgIdent = rcvMsg.ident;
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <prv_read_can_received_msg+0x10c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d01f      	beq.n	8000f20 <prv_read_can_received_msg+0x98>

    	buffer = CANModule_local->rxArray;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	617b      	str	r3, [r7, #20]
    	        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	891b      	ldrh	r3, [r3, #8]
 8000eee:	827b      	strh	r3, [r7, #18]
 8000ef0:	e012      	b.n	8000f18 <prv_read_can_received_msg+0x90>
    	            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4053      	eors	r3, r2
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	8852      	ldrh	r2, [r2, #2]
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <prv_read_can_received_msg+0x84>
    	                messageFound = 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	747b      	strb	r3, [r7, #17]
    	                break;
 8000f0a:	e028      	b.n	8000f5e <prv_read_can_received_msg+0xd6>
    	        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8000f0c:	8a7b      	ldrh	r3, [r7, #18]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	827b      	strh	r3, [r7, #18]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	330c      	adds	r3, #12
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	8a7b      	ldrh	r3, [r7, #18]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e9      	bne.n	8000ef2 <prv_read_can_received_msg+0x6a>
 8000f1e:	e01e      	b.n	8000f5e <prv_read_can_received_msg+0xd6>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	617b      	str	r3, [r7, #20]
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	891b      	ldrh	r3, [r3, #8]
 8000f2e:	827b      	strh	r3, [r7, #18]
 8000f30:	e012      	b.n	8000f58 <prv_read_can_received_msg+0xd0>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	8852      	ldrh	r2, [r2, #2]
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <prv_read_can_received_msg+0xc4>
                messageFound = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	747b      	strb	r3, [r7, #17]
                break;
 8000f4a:	e008      	b.n	8000f5e <prv_read_can_received_msg+0xd6>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	827b      	strh	r3, [r7, #18]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	330c      	adds	r3, #12
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	8a7b      	ldrh	r3, [r7, #18]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1e9      	bne.n	8000f32 <prv_read_can_received_msg+0xaa>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8000f5e:	7c7b      	ldrb	r3, [r7, #17]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00f      	beq.n	8000f84 <prv_read_can_received_msg+0xfc>
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00c      	beq.n	8000f84 <prv_read_can_received_msg+0xfc>
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <prv_read_can_received_msg+0xfc>
        buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	6852      	ldr	r2, [r2, #4]
 8000f7a:	4906      	ldr	r1, [pc, #24]	; (8000f94 <prv_read_can_received_msg+0x10c>)
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4798      	blx	r3
 8000f80:	e000      	b.n	8000f84 <prv_read_can_received_msg+0xfc>
        return;
 8000f82:	bf00      	nop
    }
}
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000261 	.word	0x20000261
 8000f90:	20000240 	.word	0x20000240
 8000f94:	2000025c 	.word	0x2000025c
 8000f98:	20000220 	.word	0x20000220

08000f9c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	prv_read_can_received_msg(hcan, CAN_RX_FIFO0);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff6e 	bl	8000e88 <prv_read_can_received_msg>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	prv_read_can_received_msg(hcan, CAN_RX_FIFO1);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff62 	bl	8000e88 <prv_read_can_received_msg>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f001 ff8c 	bl	8002eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f860 	bl	8001098 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000fd8:	f000 ffe2 	bl	8001fa0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f001 f810 	bl	8002000 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fe0:	f000 f8c4 	bl	800116c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000fe4:	f000 fa1c 	bl	8001420 <MX_ADC3_Init>
  MX_ADC2_Init();
 8000fe8:	f000 f974 	bl	80012d4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000fec:	f000 fada 	bl	80015a4 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000ff0:	f000 fb3a 	bl	8001668 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ff4:	f000 fbfc 	bl	80017f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff8:	f000 fc86 	bl	8001908 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ffc:	f000 fd06 	bl	8001a0c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001000:	f000 fe0a 	bl	8001c18 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001004:	f000 fecc 	bl	8001da0 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001008:	f000 ff04 	bl	8001e14 <MX_TIM12_Init>
  MX_USB_OTG_FS_PCD_Init();
 800100c:	f000 ff9a 	bl	8001f44 <MX_USB_OTG_FS_PCD_Init>

  MX_USART2_UART_Init();
 8001010:	f000 ff6e 	bl	8001ef0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001014:	f000 fafa 	bl	800160c <MX_I2C2_Init>
  MX_TIM5_Init();
 8001018:	f000 fd90 	bl	8001b3c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800101c:	f006 ff18 	bl	8007e50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <main+0x9c>)
 8001022:	2100      	movs	r1, #0
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <main+0xa0>)
 8001026:	f006 ff5d 	bl	8007ee4 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <main+0xa4>)
 800102e:	6013      	str	r3, [r2, #0]

  /* creation of luaTask */
  luaTaskHandle = osThreadNew(vLuaTask, NULL, &luaTask_attributes);
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <main+0xa8>)
 8001032:	2100      	movs	r1, #0
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <main+0xac>)
 8001036:	f006 ff55 	bl	8007ee4 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <main+0xb0>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(vADCTask, NULL, &ADCTask_attributes);
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <main+0xb4>)
 8001042:	2100      	movs	r1, #0
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <main+0xb8>)
 8001046:	f006 ff4d 	bl	8007ee4 <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <main+0xbc>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of OutContolTask */
  OutContolTaskHandle = osThreadNew(vOutContolTask, NULL, &OutContolTask_attributes);
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <main+0xc0>)
 8001052:	2100      	movs	r1, #0
 8001054:	480e      	ldr	r0, [pc, #56]	; (8001090 <main+0xc4>)
 8001056:	f006 ff45 	bl	8007ee4 <osThreadNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <main+0xc8>)
 800105e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001060:	f006 ff1a 	bl	8007e98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001064:	e7fe      	b.n	8001064 <main+0x98>
 8001066:	bf00      	nop
 8001068:	0800c0d4 	.word	0x0800c0d4
 800106c:	08002201 	.word	0x08002201
 8001070:	20000c70 	.word	0x20000c70
 8001074:	0800c0f8 	.word	0x0800c0f8
 8001078:	0800be6d 	.word	0x0800be6d
 800107c:	20000c74 	.word	0x20000c74
 8001080:	0800c11c 	.word	0x0800c11c
 8001084:	0800b69d 	.word	0x0800b69d
 8001088:	20000c78 	.word	0x20000c78
 800108c:	0800c140 	.word	0x0800c140
 8001090:	0800ba69 	.word	0x0800ba69
 8001094:	20000f38 	.word	0x20000f38

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	; 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00a ff1c 	bl	800bee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <SystemClock_Config+0xcc>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <SystemClock_Config+0xd0>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800110c:	23a8      	movs	r3, #168	; 0xa8
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001114:	2307      	movs	r3, #7
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f004 f9b5 	bl	800548c <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001128:	f001 f884 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001138:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2105      	movs	r1, #5
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fc16 	bl	800597c <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001156:	f001 f86d 	bl	8002234 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117e:	4b53      	ldr	r3, [pc, #332]	; (80012cc <MX_ADC1_Init+0x160>)
 8001180:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <MX_ADC1_Init+0x164>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001184:	4b51      	ldr	r3, [pc, #324]	; (80012cc <MX_ADC1_Init+0x160>)
 8001186:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800118a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <MX_ADC1_Init+0x160>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <MX_ADC1_Init+0x160>)
 8001194:	2201      	movs	r2, #1
 8001196:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <MX_ADC1_Init+0x160>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <MX_ADC1_Init+0x160>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011a6:	4b49      	ldr	r3, [pc, #292]	; (80012cc <MX_ADC1_Init+0x160>)
 80011a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_CC1;
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <MX_ADC1_Init+0x160>)
 80011b0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <MX_ADC1_Init+0x160>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80011bc:	4b43      	ldr	r3, [pc, #268]	; (80012cc <MX_ADC1_Init+0x160>)
 80011be:	2208      	movs	r2, #8
 80011c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011c2:	4b42      	ldr	r3, [pc, #264]	; (80012cc <MX_ADC1_Init+0x160>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <MX_ADC1_Init+0x160>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d0:	483e      	ldr	r0, [pc, #248]	; (80012cc <MX_ADC1_Init+0x160>)
 80011d2:	f001 fef1 	bl	8002fb8 <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80011dc:	f001 f82a 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011e0:	2304      	movs	r3, #4
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4836      	ldr	r0, [pc, #216]	; (80012cc <MX_ADC1_Init+0x160>)
 80011f2:	f002 f8ad 	bl	8003350 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011fc:	f001 f81a 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001200:	2307      	movs	r3, #7
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001204:	2302      	movs	r3, #2
 8001206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	482f      	ldr	r0, [pc, #188]	; (80012cc <MX_ADC1_Init+0x160>)
 800120e:	f002 f89f 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001218:	f001 f80c 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800121c:	2306      	movs	r3, #6
 800121e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001220:	2303      	movs	r3, #3
 8001222:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4828      	ldr	r0, [pc, #160]	; (80012cc <MX_ADC1_Init+0x160>)
 800122a:	f002 f891 	bl	8003350 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001234:	f000 fffe 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001238:	2305      	movs	r3, #5
 800123a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800123c:	2304      	movs	r3, #4
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4821      	ldr	r0, [pc, #132]	; (80012cc <MX_ADC1_Init+0x160>)
 8001246:	f002 f883 	bl	8003350 <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001250:	f000 fff0 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001254:	230e      	movs	r3, #14
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001258:	2305      	movs	r3, #5
 800125a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <MX_ADC1_Init+0x160>)
 8001262:	f002 f875 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800126c:	f000 ffe2 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001270:	230f      	movs	r3, #15
 8001272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001274:	2306      	movs	r3, #6
 8001276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <MX_ADC1_Init+0x160>)
 800127e:	f002 f867 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001288:	f000 ffd4 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800128c:	2308      	movs	r3, #8
 800128e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001290:	2307      	movs	r3, #7
 8001292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_ADC1_Init+0x160>)
 800129a:	f002 f859 	bl	8003350 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80012a4:	f000 ffc6 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012a8:	2309      	movs	r3, #9
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012ac:	2308      	movs	r3, #8
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_ADC1_Init+0x160>)
 80012b6:	f002 f84b 	bl	8003350 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80012c0:	f000 ffb8 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000026c 	.word	0x2000026c
 80012d0:	40012000 	.word	0x40012000

080012d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80012e6:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <MX_ADC2_Init+0x144>)
 80012e8:	4a4c      	ldr	r2, [pc, #304]	; (800141c <MX_ADC2_Init+0x148>)
 80012ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <MX_ADC2_Init+0x144>)
 80012ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012f4:	4b48      	ldr	r3, [pc, #288]	; (8001418 <MX_ADC2_Init+0x144>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <MX_ADC2_Init+0x144>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <MX_ADC2_Init+0x144>)
 8001302:	2200      	movs	r2, #0
 8001304:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <MX_ADC2_Init+0x144>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <MX_ADC2_Init+0x144>)
 8001310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_CC2;
 8001316:	4b40      	ldr	r3, [pc, #256]	; (8001418 <MX_ADC2_Init+0x144>)
 8001318:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <MX_ADC2_Init+0x144>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 8001324:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <MX_ADC2_Init+0x144>)
 8001326:	2207      	movs	r2, #7
 8001328:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <MX_ADC2_Init+0x144>)
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <MX_ADC2_Init+0x144>)
 8001334:	2201      	movs	r2, #1
 8001336:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001338:	4837      	ldr	r0, [pc, #220]	; (8001418 <MX_ADC2_Init+0x144>)
 800133a:	f001 fe3d 	bl	8002fb8 <HAL_ADC_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001344:	f000 ff76 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001348:	230b      	movs	r3, #11
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	482f      	ldr	r0, [pc, #188]	; (8001418 <MX_ADC2_Init+0x144>)
 800135a:	f001 fff9 	bl	8003350 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001364:	f000 ff66 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800136c:	2302      	movs	r3, #2
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4828      	ldr	r0, [pc, #160]	; (8001418 <MX_ADC2_Init+0x144>)
 8001376:	f001 ffeb 	bl	8003350 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001380:	f000 ff58 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001384:	2301      	movs	r3, #1
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001388:	2303      	movs	r3, #3
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	4821      	ldr	r0, [pc, #132]	; (8001418 <MX_ADC2_Init+0x144>)
 8001392:	f001 ffdd 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 800139c:	f000 ff4a 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80013a0:	230d      	movs	r3, #13
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <MX_ADC2_Init+0x144>)
 80013ae:	f001 ffcf 	bl	8003350 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 80013b8:	f000 ff3c 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013bc:	230c      	movs	r3, #12
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80013c0:	2305      	movs	r3, #5
 80013c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	4813      	ldr	r0, [pc, #76]	; (8001418 <MX_ADC2_Init+0x144>)
 80013ca:	f001 ffc1 	bl	8003350 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 80013d4:	f000 ff2e 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013d8:	2303      	movs	r3, #3
 80013da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80013dc:	2306      	movs	r3, #6
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_ADC2_Init+0x144>)
 80013e6:	f001 ffb3 	bl	8003350 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC2_Init+0x120>
  {
    Error_Handler();
 80013f0:	f000 ff20 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80013f8:	2307      	movs	r3, #7
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_ADC2_Init+0x144>)
 8001402:	f001 ffa5 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC2_Init+0x13c>
  {
    Error_Handler();
 800140c:	f000 ff12 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200002b4 	.word	0x200002b4
 800141c:	40012100 	.word	0x40012100

08001420 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <MX_ADC3_Init+0x17c>)
 8001434:	4a5a      	ldr	r2, [pc, #360]	; (80015a0 <MX_ADC3_Init+0x180>)
 8001436:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <MX_ADC3_Init+0x17c>)
 800143a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800143e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <MX_ADC3_Init+0x17c>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001446:	4b55      	ldr	r3, [pc, #340]	; (800159c <MX_ADC3_Init+0x17c>)
 8001448:	2201      	movs	r2, #1
 800144a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <MX_ADC3_Init+0x17c>)
 800144e:	2200      	movs	r2, #0
 8001450:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001452:	4b52      	ldr	r3, [pc, #328]	; (800159c <MX_ADC3_Init+0x17c>)
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800145a:	4b50      	ldr	r3, [pc, #320]	; (800159c <MX_ADC3_Init+0x17c>)
 800145c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001462:	4b4e      	ldr	r3, [pc, #312]	; (800159c <MX_ADC3_Init+0x17c>)
 8001464:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <MX_ADC3_Init+0x17c>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 9;
 8001470:	4b4a      	ldr	r3, [pc, #296]	; (800159c <MX_ADC3_Init+0x17c>)
 8001472:	2209      	movs	r2, #9
 8001474:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001476:	4b49      	ldr	r3, [pc, #292]	; (800159c <MX_ADC3_Init+0x17c>)
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800147e:	4b47      	ldr	r3, [pc, #284]	; (800159c <MX_ADC3_Init+0x17c>)
 8001480:	2201      	movs	r2, #1
 8001482:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001484:	4845      	ldr	r0, [pc, #276]	; (800159c <MX_ADC3_Init+0x17c>)
 8001486:	f001 fd97 	bl	8002fb8 <HAL_ADC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001490:	f000 fed0 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001494:	230e      	movs	r3, #14
 8001496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	483d      	ldr	r0, [pc, #244]	; (800159c <MX_ADC3_Init+0x17c>)
 80014a6:	f001 ff53 	bl	8003350 <HAL_ADC_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80014b0:	f000 fec0 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014b4:	2309      	movs	r3, #9
 80014b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4836      	ldr	r0, [pc, #216]	; (800159c <MX_ADC3_Init+0x17c>)
 80014c2:	f001 ff45 	bl	8003350 <HAL_ADC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80014cc:	f000 feb2 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014d0:	2307      	movs	r3, #7
 80014d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80014d4:	2303      	movs	r3, #3
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	482f      	ldr	r0, [pc, #188]	; (800159c <MX_ADC3_Init+0x17c>)
 80014de:	f001 ff37 	bl	8003350 <HAL_ADC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80014e8:	f000 fea4 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014ec:	2304      	movs	r3, #4
 80014ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80014f0:	2304      	movs	r3, #4
 80014f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	4619      	mov	r1, r3
 80014f8:	4828      	ldr	r0, [pc, #160]	; (800159c <MX_ADC3_Init+0x17c>)
 80014fa:	f001 ff29 	bl	8003350 <HAL_ADC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001504:	f000 fe96 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001508:	230f      	movs	r3, #15
 800150a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800150c:	2305      	movs	r3, #5
 800150e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4821      	ldr	r0, [pc, #132]	; (800159c <MX_ADC3_Init+0x17c>)
 8001516:	f001 ff1b 	bl	8003350 <HAL_ADC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC3_Init+0x104>
  {
    Error_Handler();
 8001520:	f000 fe88 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001524:	2308      	movs	r3, #8
 8001526:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001528:	2306      	movs	r3, #6
 800152a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	4619      	mov	r1, r3
 8001530:	481a      	ldr	r0, [pc, #104]	; (800159c <MX_ADC3_Init+0x17c>)
 8001532:	f001 ff0d 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 800153c:	f000 fe7a 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001540:	230a      	movs	r3, #10
 8001542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001544:	2307      	movs	r3, #7
 8001546:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <MX_ADC3_Init+0x17c>)
 800154e:	f001 feff 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 8001558:	f000 fe6c 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800155c:	2306      	movs	r3, #6
 800155e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001560:	2308      	movs	r3, #8
 8001562:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <MX_ADC3_Init+0x17c>)
 800156a:	f001 fef1 	bl	8003350 <HAL_ADC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC3_Init+0x158>
  {
    Error_Handler();
 8001574:	f000 fe5e 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001578:	2305      	movs	r3, #5
 800157a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800157c:	2309      	movs	r3, #9
 800157e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_ADC3_Init+0x17c>)
 8001586:	f001 fee3 	bl	8003350 <HAL_ADC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001590:	f000 fe50 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200002fc 	.word	0x200002fc
 80015a0:	40012200 	.word	0x40012200

080015a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_CAN1_Init+0x60>)
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <MX_CAN1_Init+0x64>)
 80015ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_CAN1_Init+0x60>)
 80015b0:	2210      	movs	r2, #16
 80015b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_CAN1_Init+0x60>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_CAN1_Init+0x60>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_CAN1_Init+0x60>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_CAN1_Init+0x60>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_CAN1_Init+0x60>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_CAN1_Init+0x60>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <MX_CAN1_Init+0x60>)
 80015da:	2200      	movs	r2, #0
 80015dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_CAN1_Init+0x60>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_CAN1_Init+0x60>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_CAN1_Init+0x60>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_CAN1_Init+0x60>)
 80015f2:	f002 f94d 	bl	8003890 <HAL_CAN_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80015fc:	f000 fe1a 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000464 	.word	0x20000464
 8001608:	40006400 	.word	0x40006400

0800160c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_I2C2_Init+0x50>)
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <MX_I2C2_Init+0x54>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_I2C2_Init+0x50>)
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_I2C2_Init+0x58>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_I2C2_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_I2C2_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_I2C2_Init+0x50>)
 800162a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_I2C2_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_I2C2_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_I2C2_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_I2C2_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_I2C2_Init+0x50>)
 800164a:	f003 fcbd 	bl	8004fc8 <HAL_I2C_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001654:	f000 fdee 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000048c 	.word	0x2000048c
 8001660:	40005800 	.word	0x40005800
 8001664:	000186a0 	.word	0x000186a0

08001668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b096      	sub	sp, #88	; 0x58
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2220      	movs	r2, #32
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00a fc1f 	bl	800bee4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016a8:	4a50      	ldr	r2, [pc, #320]	; (80017ec <MX_TIM1_Init+0x184>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016ac:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c6:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016d2:	4845      	ldr	r0, [pc, #276]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016d4:	f004 fba4 	bl	8005e20 <HAL_TIM_Base_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016de:	f000 fda9 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016ec:	4619      	mov	r1, r3
 80016ee:	483e      	ldr	r0, [pc, #248]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016f0:	f005 f8c4 	bl	800687c <HAL_TIM_ConfigClockSource>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016fa:	f000 fd9b 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016fe:	483a      	ldr	r0, [pc, #232]	; (80017e8 <MX_TIM1_Init+0x180>)
 8001700:	f004 fd05 	bl	800610e <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800170a:	f000 fd93 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800171a:	4619      	mov	r1, r3
 800171c:	4832      	ldr	r0, [pc, #200]	; (80017e8 <MX_TIM1_Init+0x180>)
 800171e:	f005 fcad 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001728:	f000 fd84 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	2200      	movs	r2, #0
 800174e:	4619      	mov	r1, r3
 8001750:	4825      	ldr	r0, [pc, #148]	; (80017e8 <MX_TIM1_Init+0x180>)
 8001752:	f004 ffd1 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800175c:	f000 fd6a 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	2204      	movs	r2, #4
 8001766:	4619      	mov	r1, r3
 8001768:	481f      	ldr	r0, [pc, #124]	; (80017e8 <MX_TIM1_Init+0x180>)
 800176a:	f004 ffc5 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001774:	f000 fd5e 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	2208      	movs	r2, #8
 800177e:	4619      	mov	r1, r3
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <MX_TIM1_Init+0x180>)
 8001782:	f004 ffb9 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800178c:	f000 fd52 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	220c      	movs	r2, #12
 8001796:	4619      	mov	r1, r3
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_TIM1_Init+0x180>)
 800179a:	f004 ffad 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017a4:	f000 fd46 	bl	8002234 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <MX_TIM1_Init+0x180>)
 80017cc:	f005 fcd2 	bl	8007174 <HAL_TIMEx_ConfigBreakDeadTime>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80017d6:	f000 fd2d 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <MX_TIM1_Init+0x180>)
 80017dc:	f001 f8b2 	bl	8002944 <HAL_TIM_MspPostInit>

}
 80017e0:	bf00      	nop
 80017e2:	3758      	adds	r7, #88	; 0x58
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200004e0 	.word	0x200004e0
 80017ec:	40010000 	.word	0x40010000

080017f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <MX_TIM2_Init+0x114>)
 8001822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001826:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42;
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <MX_TIM2_Init+0x114>)
 800182a:	222a      	movs	r2, #42	; 0x2a
 800182c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <MX_TIM2_Init+0x114>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <MX_TIM2_Init+0x114>)
 8001836:	f242 7210 	movw	r2, #10000	; 0x2710
 800183a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <MX_TIM2_Init+0x114>)
 800183e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <MX_TIM2_Init+0x114>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800184a:	482e      	ldr	r0, [pc, #184]	; (8001904 <MX_TIM2_Init+0x114>)
 800184c:	f004 fae8 	bl	8005e20 <HAL_TIM_Base_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001856:	f000 fced 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001864:	4619      	mov	r1, r3
 8001866:	4827      	ldr	r0, [pc, #156]	; (8001904 <MX_TIM2_Init+0x114>)
 8001868:	f005 f808 	bl	800687c <HAL_TIM_ConfigClockSource>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001872:	f000 fcdf 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_TIM2_Init+0x114>)
 8001878:	f004 fc49 	bl	800610e <HAL_TIM_PWM_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001882:	f000 fcd7 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001886:	2320      	movs	r3, #32
 8001888:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4619      	mov	r1, r3
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <MX_TIM2_Init+0x114>)
 8001896:	f005 fbf1 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018a0:	f000 fcc8 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a4:	2360      	movs	r3, #96	; 0x60
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2204      	movs	r2, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4812      	ldr	r0, [pc, #72]	; (8001904 <MX_TIM2_Init+0x114>)
 80018bc:	f004 ff1c 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80018c6:	f000 fcb5 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2208      	movs	r2, #8
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <MX_TIM2_Init+0x114>)
 80018d2:	f004 ff11 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80018dc:	f000 fcaa 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	220c      	movs	r2, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM2_Init+0x114>)
 80018e8:	f004 ff06 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80018f2:	f000 fc9f 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018f6:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM2_Init+0x114>)
 80018f8:	f001 f824 	bl	8002944 <HAL_TIM_MspPostInit>

}
 80018fc:	bf00      	nop
 80018fe:	3738      	adds	r7, #56	; 0x38
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000528 	.word	0x20000528

08001908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800193a:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <MX_TIM3_Init+0x100>)
 800193c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <MX_TIM3_Init+0xfc>)
 8001940:	222a      	movs	r2, #42	; 0x2a
 8001942:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <MX_TIM3_Init+0xfc>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800194c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <MX_TIM3_Init+0xfc>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800195e:	4829      	ldr	r0, [pc, #164]	; (8001a04 <MX_TIM3_Init+0xfc>)
 8001960:	f004 fa5e 	bl	8005e20 <HAL_TIM_Base_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800196a:	f000 fc63 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001978:	4619      	mov	r1, r3
 800197a:	4822      	ldr	r0, [pc, #136]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800197c:	f004 ff7e 	bl	800687c <HAL_TIM_ConfigClockSource>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001986:	f000 fc55 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800198a:	481e      	ldr	r0, [pc, #120]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800198c:	f004 fbbf 	bl	800610e <HAL_TIM_PWM_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001996:	f000 fc4d 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 800199a:	2360      	movs	r3, #96	; 0x60
 800199c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a2:	f107 0320 	add.w	r3, r7, #32
 80019a6:	4619      	mov	r1, r3
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <MX_TIM3_Init+0xfc>)
 80019aa:	f005 fb67 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019b4:	f000 fc3e 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b8:	2360      	movs	r3, #96	; 0x60
 80019ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_TIM3_Init+0xfc>)
 80019d0:	f004 fe92 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019da:	f000 fc2b 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2204      	movs	r2, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM3_Init+0xfc>)
 80019e6:	f004 fe87 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80019f0:	f000 fc20 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM3_Init+0xfc>)
 80019f6:	f000 ffa5 	bl	8002944 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000570 	.word	0x20000570
 8001a08:	40000400 	.word	0x40000400

08001a0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a3e:	4a3e      	ldr	r2, [pc, #248]	; (8001b38 <MX_TIM4_Init+0x12c>)
 8001a40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 43;
 8001a42:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a44:	222b      	movs	r2, #43	; 0x2b
 8001a46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a48:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a62:	4834      	ldr	r0, [pc, #208]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a64:	f004 f9dc 	bl	8005e20 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a6e:	f000 fbe1 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	482d      	ldr	r0, [pc, #180]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a80:	f004 fefc 	bl	800687c <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a8a:	f000 fbd3 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a8e:	4829      	ldr	r0, [pc, #164]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a90:	f004 fb3d 	bl	800610e <HAL_TIM_PWM_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a9a:	f000 fbcb 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4821      	ldr	r0, [pc, #132]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001aae:	f005 fae5 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ab8:	f000 fbbc 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abc:	2360      	movs	r3, #96	; 0x60
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4818      	ldr	r0, [pc, #96]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001ad4:	f004 fe10 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ade:	f000 fba9 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4812      	ldr	r0, [pc, #72]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001aea:	f004 fe05 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001af4:	f000 fb9e 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2208      	movs	r2, #8
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001b00:	f004 fdfa 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001b0a:	f000 fb93 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	220c      	movs	r2, #12
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001b16:	f004 fdef 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001b20:	f000 fb88 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001b26:	f000 ff0d 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8001b2a:	bf00      	nop
 8001b2c:	3738      	adds	r7, #56	; 0x38
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200005b8 	.word	0x200005b8
 8001b38:	40000800 	.word	0x40000800

08001b3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b42:	f107 0320 	add.w	r3, r7, #32
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	615a      	str	r2, [r3, #20]
 8001b5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001b60:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <MX_TIM5_Init+0xd8>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001b66:	222a      	movs	r2, #42	; 0x2a
 8001b68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001b86:	4822      	ldr	r0, [pc, #136]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001b88:	f004 fa72 	bl	8006070 <HAL_TIM_OC_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001b92:	f000 fb4f 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b9e:	f107 0320 	add.w	r3, r7, #32
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481a      	ldr	r0, [pc, #104]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001ba6:	f005 fa69 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001bb0:	f000 fb40 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 900;
 8001bb8:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001bbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4810      	ldr	r0, [pc, #64]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001bce:	f004 fd37 	bl	8006640 <HAL_TIM_OC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001bd8:	f000 fb2c 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2204      	movs	r2, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	480b      	ldr	r0, [pc, #44]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001be4:	f004 fd2c 	bl	8006640 <HAL_TIM_OC_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8001bee:	f000 fb21 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_TIM5_Init+0xd4>)
 8001bfa:	f004 fd21 	bl	8006640 <HAL_TIM_OC_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM5_Init+0xcc>
  {
    Error_Handler();
 8001c04:	f000 fb16 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000600 	.word	0x20000600
 8001c14:	40000c00 	.word	0x40000c00

08001c18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b096      	sub	sp, #88	; 0x58
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	615a      	str	r2, [r3, #20]
 8001c48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00a f947 	bl	800bee4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c56:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001c58:	4a50      	ldr	r2, [pc, #320]	; (8001d9c <MX_TIM8_Init+0x184>)
 8001c5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 42;
 8001c5c:	4b4e      	ldr	r3, [pc, #312]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001c5e:	222a      	movs	r2, #42	; 0x2a
 8001c60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c62:	4b4d      	ldr	r3, [pc, #308]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001c68:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001c6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c70:	4b49      	ldr	r3, [pc, #292]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c76:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7c:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c82:	4845      	ldr	r0, [pc, #276]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001c84:	f004 f8cc 	bl	8005e20 <HAL_TIM_Base_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001c8e:	f000 fad1 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	483e      	ldr	r0, [pc, #248]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001ca0:	f004 fdec 	bl	800687c <HAL_TIM_ConfigClockSource>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001caa:	f000 fac3 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cae:	483a      	ldr	r0, [pc, #232]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001cb0:	f004 fa2d 	bl	800610e <HAL_TIM_PWM_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001cba:	f000 fabb 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4832      	ldr	r0, [pc, #200]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001cce:	f005 f9d5 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001cd8:	f000 faac 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4825      	ldr	r0, [pc, #148]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001d02:	f004 fcf9 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d0c:	f000 fa92 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	2204      	movs	r2, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	481f      	ldr	r0, [pc, #124]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001d1a:	f004 fced 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d24:	f000 fa86 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4819      	ldr	r0, [pc, #100]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001d32:	f004 fce1 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001d3c:	f000 fa7a 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	220c      	movs	r2, #12
 8001d46:	4619      	mov	r1, r3
 8001d48:	4813      	ldr	r0, [pc, #76]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001d4a:	f004 fcd5 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001d54:	f000 fa6e 	bl	8002234 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001d7c:	f005 f9fa 	bl	8007174 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001d86:	f000 fa55 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <MX_TIM8_Init+0x180>)
 8001d8c:	f000 fdda 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8001d90:	bf00      	nop
 8001d92:	3758      	adds	r7, #88	; 0x58
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000648 	.word	0x20000648
 8001d9c:	40010400 	.word	0x40010400

08001da0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	463b      	mov	r3, r7
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_TIM9_Init+0x6c>)
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <MX_TIM9_Init+0x70>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_TIM9_Init+0x6c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_TIM9_Init+0x6c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_TIM9_Init+0x6c>)
 8001dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_TIM9_Init+0x6c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_TIM9_Init+0x6c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <MX_TIM9_Init+0x6c>)
 8001dda:	f004 f821 	bl	8005e20 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001de4:	f000 fa26 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_TIM9_Init+0x6c>)
 8001df4:	f004 fd42 	bl	800687c <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001dfe:	f000 fa19 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000690 	.word	0x20000690
 8001e10:	40014000 	.word	0x40014000

08001e14 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1a:	f107 0320 	add.w	r3, r7, #32
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
 8001e36:	615a      	str	r2, [r3, #20]
 8001e38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <MX_TIM12_Init+0xd8>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 43;
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e42:	222b      	movs	r2, #43	; 0x2b
 8001e44:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e52:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001e60:	4821      	ldr	r0, [pc, #132]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e62:	f003 ffdd 	bl	8005e20 <HAL_TIM_Base_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001e6c:	f000 f9e2 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e74:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481a      	ldr	r0, [pc, #104]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e7e:	f004 fcfd 	bl	800687c <HAL_TIM_ConfigClockSource>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001e88:	f000 f9d4 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e8c:	4816      	ldr	r0, [pc, #88]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001e8e:	f004 f93e 	bl	800610e <HAL_TIM_PWM_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001e98:	f000 f9cc 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9c:	2360      	movs	r3, #96	; 0x60
 8001e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001eb4:	f004 fc20 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001ebe:	f000 f9b9 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001eca:	f004 fc15 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001ed4:	f000 f9ae 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ed8:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <MX_TIM12_Init+0xd4>)
 8001eda:	f000 fd33 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8001ede:	bf00      	nop
 8001ee0:	3730      	adds	r7, #48	; 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200006d8 	.word	0x200006d8
 8001eec:	40001800 	.word	0x40001800

08001ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_USART2_UART_Init+0x50>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f28:	f005 f98a 	bl	8007240 <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f32:	f000 f97f 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000720 	.word	0x20000720
 8001f40:	40004400 	.word	0x40004400

08001f44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f52:	2204      	movs	r2, #4
 8001f54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f58:	2202      	movs	r2, #2
 8001f5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f64:	2202      	movs	r2, #2
 8001f66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f88:	f003 f962 	bl	8005250 <HAL_PCD_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f92:	f000 f94f 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000764 	.word	0x20000764

08001fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_DMA_Init+0x5c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <MX_DMA_Init+0x5c>)
 8001fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_DMA_Init+0x5c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	2038      	movs	r0, #56	; 0x38
 8001fc8:	f002 fa3e 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fcc:	2038      	movs	r0, #56	; 0x38
 8001fce:	f002 fa57 	bl	8004480 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2105      	movs	r1, #5
 8001fd6:	203a      	movs	r0, #58	; 0x3a
 8001fd8:	f002 fa36 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001fdc:	203a      	movs	r0, #58	; 0x3a
 8001fde:	f002 fa4f 	bl	8004480 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	203c      	movs	r0, #60	; 0x3c
 8001fe8:	f002 fa2e 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001fec:	203c      	movs	r0, #60	; 0x3c
 8001fee:	f002 fa47 	bl	8004480 <HAL_NVIC_EnableIRQ>

}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08e      	sub	sp, #56	; 0x38
 8002004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a72      	ldr	r2, [pc, #456]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002020:	f043 0310 	orr.w	r3, r3, #16
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	4b6c      	ldr	r3, [pc, #432]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a6b      	ldr	r2, [pc, #428]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 800203c:	f043 0320 	orr.w	r3, r3, #32
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a64      	ldr	r2, [pc, #400]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a4f      	ldr	r2, [pc, #316]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a41      	ldr	r2, [pc, #260]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <MX_GPIO_Init+0x1e8>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 80020f6:	2201      	movs	r2, #1
 80020f8:	f641 413e 	movw	r1, #7230	; 0x1c3e
 80020fc:	483b      	ldr	r0, [pc, #236]	; (80021ec <MX_GPIO_Init+0x1ec>)
 80020fe:	f002 ff49 	bl	8004f94 <HAL_GPIO_WritePin>
                          |Cs_Dis8_17_18_Pin|Cs_Dis8_15_16_Pin|Cs_Dis20_3_Pin|Cs_Dis20_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cs_Dis20_6_GPIO_Port, Cs_Dis20_6_Pin, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	483a      	ldr	r0, [pc, #232]	; (80021f0 <MX_GPIO_Init+0x1f0>)
 8002108:	f002 ff44 	bl	8004f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin, GPIO_PIN_SET);
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8002112:	4838      	ldr	r0, [pc, #224]	; (80021f4 <MX_GPIO_Init+0x1f4>)
 8002114:	f002 ff3e 	bl	8004f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	21c0      	movs	r1, #192	; 0xc0
 800211c:	4833      	ldr	r0, [pc, #204]	; (80021ec <MX_GPIO_Init+0x1ec>)
 800211e:	f002 ff39 	bl	8004f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Din3_Pin Din4_Pin Din5_Pin Din6_Pin
                           Din7_Pin Din1_Pin Din2_Pin */
  GPIO_InitStruct.Pin = Din3_Pin|Din4_Pin|Din5_Pin|Din6_Pin
 8002122:	237f      	movs	r3, #127	; 0x7f
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
                          |Din7_Pin|Din1_Pin|Din2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002126:	2300      	movs	r3, #0
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800212a:	2302      	movs	r3, #2
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002132:	4619      	mov	r1, r3
 8002134:	482e      	ldr	r0, [pc, #184]	; (80021f0 <MX_GPIO_Init+0x1f0>)
 8002136:	f002 fd91 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Din10_Pin Din11_Pin Din12_Pin */
  GPIO_InitStruct.Pin = Din10_Pin|Din11_Pin|Din12_Pin;
 800213a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	4619      	mov	r1, r3
 800214e:	482a      	ldr	r0, [pc, #168]	; (80021f8 <MX_GPIO_Init+0x1f8>)
 8002150:	f002 fd84 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cs_Dis20_5_Pin Cs_Dis20_2_Pin Cs_Dis20_1_Pin Cs_Dis8_13_14_Pin
                           Cs_Dis8_17_18_Pin PG6 PG7 Cs_Dis8_15_16_Pin
                           Cs_Dis20_3_Pin Cs_Dis20_4_Pin */
  GPIO_InitStruct.Pin = Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 8002154:	f641 43fe 	movw	r3, #7422	; 0x1cfe
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
                          |Cs_Dis8_17_18_Pin|GPIO_PIN_6|GPIO_PIN_7|Cs_Dis8_15_16_Pin
                          |Cs_Dis20_3_Pin|Cs_Dis20_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216a:	4619      	mov	r1, r3
 800216c:	481f      	ldr	r0, [pc, #124]	; (80021ec <MX_GPIO_Init+0x1ec>)
 800216e:	f002 fd75 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cs_Dis20_6_Pin */
  GPIO_InitStruct.Pin = Cs_Dis20_6_Pin;
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002176:	2301      	movs	r3, #1
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Cs_Dis20_6_GPIO_Port, &GPIO_InitStruct);
 8002182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002186:	4619      	mov	r1, r3
 8002188:	4819      	ldr	r0, [pc, #100]	; (80021f0 <MX_GPIO_Init+0x1f0>)
 800218a:	f002 fd67 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cs_Dis8_9_10_Pin */
  GPIO_InitStruct.Pin = Cs_Dis8_9_10_Pin;
 800218e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002194:	2300      	movs	r3, #0
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cs_Dis8_9_10_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_GPIO_Init+0x1f0>)
 80021a4:	f002 fd5a 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cs_Dis8_11_12_Pin Cs_Dis20_7_Pin Cs_Dis8_19_20_Pin Cs_Dis20_8_Pin */
  GPIO_InitStruct.Pin = Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin;
 80021a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	4619      	mov	r1, r3
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <MX_GPIO_Init+0x1f4>)
 80021c2:	f002 fd4b 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Din9_Pin Din8_Pin */
  GPIO_InitStruct.Pin = Din9_Pin|Din8_Pin;
 80021c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d8:	4619      	mov	r1, r3
 80021da:	4808      	ldr	r0, [pc, #32]	; (80021fc <MX_GPIO_Init+0x1fc>)
 80021dc:	f002 fd3e 	bl	8004c5c <HAL_GPIO_Init>

}
 80021e0:	bf00      	nop
 80021e2:	3738      	adds	r7, #56	; 0x38
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40021800 	.word	0x40021800
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021400 	.word	0x40021400
 80021fc:	40020400 	.word	0x40020400

08002200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002208:	2001      	movs	r0, #1
 800220a:	f005 fefd 	bl	8008008 <osDelay>
 800220e:	e7fb      	b.n	8002208 <StartDefaultTask+0x8>

08002210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002222:	f000 fe85 	bl	8002f30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40002000 	.word	0x40002000

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	e7fe      	b.n	800223c <Error_Handler+0x8>
	...

08002240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_MspInit+0x54>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_MspInit+0x54>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_MspInit+0x54>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_MspInit+0x54>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_MspInit+0x54>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_MspInit+0x54>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	210f      	movs	r1, #15
 8002282:	f06f 0001 	mvn.w	r0, #1
 8002286:	f002 f8df 	bl	8004448 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b092      	sub	sp, #72	; 0x48
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a84      	ldr	r2, [pc, #528]	; (80024c8 <HAL_ADC_MspInit+0x230>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f040 808c 	bne.w	80023d4 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
 80022c0:	4b82      	ldr	r3, [pc, #520]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	4a81      	ldr	r2, [pc, #516]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6453      	str	r3, [r2, #68]	; 0x44
 80022cc:	4b7f      	ldr	r3, [pc, #508]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022dc:	4b7b      	ldr	r3, [pc, #492]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4a7a      	ldr	r2, [pc, #488]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
 80022e8:	4b78      	ldr	r3, [pc, #480]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f8:	4b74      	ldr	r3, [pc, #464]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a73      	ldr	r2, [pc, #460]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b71      	ldr	r3, [pc, #452]	; (80024cc <HAL_ADC_MspInit+0x234>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
 8002314:	4b6d      	ldr	r3, [pc, #436]	; (80024cc <HAL_ADC_MspInit+0x234>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4a6c      	ldr	r2, [pc, #432]	; (80024cc <HAL_ADC_MspInit+0x234>)
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	6313      	str	r3, [r2, #48]	; 0x30
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_ADC_MspInit+0x234>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = CS20_7_Pin|CS8_20_Pin|CS8_19_Pin|CS20_8_Pin;
 800232c:	23f0      	movs	r3, #240	; 0xf0
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002330:	2303      	movs	r3, #3
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800233c:	4619      	mov	r1, r3
 800233e:	4864      	ldr	r0, [pc, #400]	; (80024d0 <HAL_ADC_MspInit+0x238>)
 8002340:	f002 fc8c 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_4_Pin|ADC1_5_Pin;
 8002344:	2330      	movs	r3, #48	; 0x30
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002348:	2303      	movs	r3, #3
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002350:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002354:	4619      	mov	r1, r3
 8002356:	485f      	ldr	r0, [pc, #380]	; (80024d4 <HAL_ADC_MspInit+0x23c>)
 8002358:	f002 fc80 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_8_Pin|ADC1_9_Pin;
 800235c:	2303      	movs	r3, #3
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002360:	2303      	movs	r3, #3
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800236c:	4619      	mov	r1, r3
 800236e:	485a      	ldr	r0, [pc, #360]	; (80024d8 <HAL_ADC_MspInit+0x240>)
 8002370:	f002 fc74 	bl	8004c5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_ADC_MspInit+0x244>)
 8002376:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_ADC_MspInit+0x248>)
 8002378:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800237a:	4b58      	ldr	r3, [pc, #352]	; (80024dc <HAL_ADC_MspInit+0x244>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002380:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_ADC_MspInit+0x244>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	4b55      	ldr	r3, [pc, #340]	; (80024dc <HAL_ADC_MspInit+0x244>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_ADC_MspInit+0x244>)
 800238e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002392:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002394:	4b51      	ldr	r3, [pc, #324]	; (80024dc <HAL_ADC_MspInit+0x244>)
 8002396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800239a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_ADC_MspInit+0x244>)
 800239e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80023a4:	4b4d      	ldr	r3, [pc, #308]	; (80024dc <HAL_ADC_MspInit+0x244>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023aa:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_ADC_MspInit+0x244>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023b0:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <HAL_ADC_MspInit+0x244>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023b6:	4849      	ldr	r0, [pc, #292]	; (80024dc <HAL_ADC_MspInit+0x244>)
 80023b8:	f002 f870 	bl	800449c <HAL_DMA_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80023c2:	f7ff ff37 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a44      	ldr	r2, [pc, #272]	; (80024dc <HAL_ADC_MspInit+0x244>)
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38
 80023cc:	4a43      	ldr	r2, [pc, #268]	; (80024dc <HAL_ADC_MspInit+0x244>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80023d2:	e105      	b.n	80025e0 <HAL_ADC_MspInit+0x348>
  else if(hadc->Instance==ADC2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a42      	ldr	r2, [pc, #264]	; (80024e4 <HAL_ADC_MspInit+0x24c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	f040 8088 	bne.w	80024f0 <HAL_ADC_MspInit+0x258>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
 80023e4:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	4a38      	ldr	r2, [pc, #224]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80023ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ee:	6453      	str	r3, [r2, #68]	; 0x44
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_ADC_MspInit+0x234>)
 80023f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	4b32      	ldr	r3, [pc, #200]	; (80024cc <HAL_ADC_MspInit+0x234>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4a31      	ldr	r2, [pc, #196]	; (80024cc <HAL_ADC_MspInit+0x234>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6313      	str	r3, [r2, #48]	; 0x30
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <HAL_ADC_MspInit+0x234>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_ADC_MspInit+0x234>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <HAL_ADC_MspInit+0x234>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6313      	str	r3, [r2, #48]	; 0x30
 8002428:	4b28      	ldr	r3, [pc, #160]	; (80024cc <HAL_ADC_MspInit+0x234>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS20_4_Pin|CS8_10_Pin|CS8_9_Pin;
 8002434:	230e      	movs	r3, #14
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002438:	2303      	movs	r3, #3
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002444:	4619      	mov	r1, r3
 8002446:	4823      	ldr	r0, [pc, #140]	; (80024d4 <HAL_ADC_MspInit+0x23c>)
 8002448:	f002 fc08 	bl	8004c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS20_5_Pin|CS20_6_Pin|CS8_12_Pin|CS8_11_Pin;
 800244c:	230f      	movs	r3, #15
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002450:	2303      	movs	r3, #3
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245c:	4619      	mov	r1, r3
 800245e:	481c      	ldr	r0, [pc, #112]	; (80024d0 <HAL_ADC_MspInit+0x238>)
 8002460:	f002 fbfc 	bl	8004c5c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 8002466:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_ADC_MspInit+0x254>)
 8002468:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 800246c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002470:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 8002480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002484:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 8002488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800248c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 8002490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002494:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 8002498:	2200      	movs	r2, #0
 800249a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 800249e:	2200      	movs	r2, #0
 80024a0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80024a8:	480f      	ldr	r0, [pc, #60]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 80024aa:	f001 fff7 	bl	800449c <HAL_DMA_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_ADC_MspInit+0x220>
      Error_Handler();
 80024b4:	f7ff febe 	bl	8002234 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_ADC_MspInit+0x250>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024c4:	e08c      	b.n	80025e0 <HAL_ADC_MspInit+0x348>
 80024c6:	bf00      	nop
 80024c8:	40012000 	.word	0x40012000
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020400 	.word	0x40020400
 80024dc:	20000344 	.word	0x20000344
 80024e0:	40026470 	.word	0x40026470
 80024e4:	40012100 	.word	0x40012100
 80024e8:	200003a4 	.word	0x200003a4
 80024ec:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_ADC_MspInit+0x350>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d172      	bne.n	80025e0 <HAL_ADC_MspInit+0x348>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <HAL_ADC_MspInit+0x354>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a3a      	ldr	r2, [pc, #232]	; (80025ec <HAL_ADC_MspInit+0x354>)
 8002504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_ADC_MspInit+0x354>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_ADC_MspInit+0x354>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_ADC_MspInit+0x354>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_ADC_MspInit+0x354>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_ADC_MspInit+0x354>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <HAL_ADC_MspInit+0x354>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_ADC_MspInit+0x354>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CS20_2_Pin|CS20_1_Pin|CS8_14_Pin|CS8_13_Pin
 800254e:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002554:	2303      	movs	r3, #3
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800255c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002560:	4619      	mov	r1, r3
 8002562:	4823      	ldr	r0, [pc, #140]	; (80025f0 <HAL_ADC_MspInit+0x358>)
 8002564:	f002 fb7a 	bl	8004c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS8_16_Pin;
 8002568:	2301      	movs	r3, #1
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256c:	2303      	movs	r3, #3
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(CS8_16_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002578:	4619      	mov	r1, r3
 800257a:	481e      	ldr	r0, [pc, #120]	; (80025f4 <HAL_ADC_MspInit+0x35c>)
 800257c:	f002 fb6e 	bl	8004c5c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 8002582:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <HAL_ADC_MspInit+0x364>)
 8002584:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 8002588:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800258c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002594:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 800259c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025a0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 80025a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025a8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 80025ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80025c4:	480c      	ldr	r0, [pc, #48]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 80025c6:	f001 ff69 	bl	800449c <HAL_DMA_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_ADC_MspInit+0x33c>
      Error_Handler();
 80025d0:	f7ff fe30 	bl	8002234 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_ADC_MspInit+0x360>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025e0:	bf00      	nop
 80025e2:	3748      	adds	r7, #72	; 0x48
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40012200 	.word	0x40012200
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40021400 	.word	0x40021400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	20000404 	.word	0x20000404
 80025fc:	40026410 	.word	0x40026410

08002600 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <HAL_CAN_MspInit+0xb4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d143      	bne.n	80026aa <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_CAN_MspInit+0xb8>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <HAL_CAN_MspInit+0xb8>)
 800262c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_CAN_MspInit+0xb8>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_CAN_MspInit+0xb8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_CAN_MspInit+0xb8>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_CAN_MspInit+0xb8>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800265a:	2303      	movs	r3, #3
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800266a:	2309      	movs	r3, #9
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4811      	ldr	r0, [pc, #68]	; (80026bc <HAL_CAN_MspInit+0xbc>)
 8002676:	f002 faf1 	bl	8004c5c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2105      	movs	r1, #5
 800267e:	2013      	movs	r0, #19
 8002680:	f001 fee2 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002684:	2013      	movs	r0, #19
 8002686:	f001 fefb 	bl	8004480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2105      	movs	r1, #5
 800268e:	2014      	movs	r0, #20
 8002690:	f001 feda 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002694:	2014      	movs	r0, #20
 8002696:	f001 fef3 	bl	8004480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2105      	movs	r1, #5
 800269e:	2015      	movs	r0, #21
 80026a0:	f001 fed2 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80026a4:	2015      	movs	r0, #21
 80026a6:	f001 feeb 	bl	8004480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40006400 	.word	0x40006400
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020c00 	.word	0x40020c00

080026c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_I2C_MspInit+0x84>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12b      	bne.n	800273a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_I2C_MspInit+0x88>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a17      	ldr	r2, [pc, #92]	; (8002748 <HAL_I2C_MspInit+0x88>)
 80026ec:	f043 0320 	orr.w	r3, r3, #32
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_I2C_MspInit+0x88>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026fe:	2303      	movs	r3, #3
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002702:	2312      	movs	r3, #18
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002706:	2301      	movs	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800270e:	2304      	movs	r3, #4
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <HAL_I2C_MspInit+0x8c>)
 800271a:	f002 fa9f 	bl	8004c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_I2C_MspInit+0x88>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_I2C_MspInit+0x88>)
 8002728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_I2C_MspInit+0x88>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800273a:	bf00      	nop
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40005800 	.word	0x40005800
 8002748:	40023800 	.word	0x40023800
 800274c:	40021400 	.word	0x40021400

08002750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5e      	ldr	r2, [pc, #376]	; (80028d8 <HAL_TIM_Base_MspInit+0x188>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a5c      	ldr	r2, [pc, #368]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800277e:	e0a6      	b.n	80028ce <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002788:	d116      	bne.n	80027b8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2105      	movs	r1, #5
 80027aa:	201c      	movs	r0, #28
 80027ac:	f001 fe4c 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027b0:	201c      	movs	r0, #28
 80027b2:	f001 fe65 	bl	8004480 <HAL_NVIC_EnableIRQ>
}
 80027b6:	e08a      	b.n	80028ce <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a48      	ldr	r2, [pc, #288]	; (80028e0 <HAL_TIM_Base_MspInit+0x190>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	4b45      	ldr	r3, [pc, #276]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a44      	ldr	r2, [pc, #272]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b42      	ldr	r3, [pc, #264]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
}
 80027de:	e076      	b.n	80028ce <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM4)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3f      	ldr	r2, [pc, #252]	; (80028e4 <HAL_TIM_Base_MspInit+0x194>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69bb      	ldr	r3, [r7, #24]
}
 8002806:	e062      	b.n	80028ce <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM8)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a36      	ldr	r2, [pc, #216]	; (80028e8 <HAL_TIM_Base_MspInit+0x198>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d12e      	bne.n	8002870 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	4a30      	ldr	r2, [pc, #192]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2105      	movs	r1, #5
 8002832:	202b      	movs	r0, #43	; 0x2b
 8002834:	f001 fe08 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002838:	202b      	movs	r0, #43	; 0x2b
 800283a:	f001 fe21 	bl	8004480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	202c      	movs	r0, #44	; 0x2c
 8002844:	f001 fe00 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002848:	202c      	movs	r0, #44	; 0x2c
 800284a:	f001 fe19 	bl	8004480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	210f      	movs	r1, #15
 8002852:	202d      	movs	r0, #45	; 0x2d
 8002854:	f001 fdf8 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002858:	202d      	movs	r0, #45	; 0x2d
 800285a:	f001 fe11 	bl	8004480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2105      	movs	r1, #5
 8002862:	202e      	movs	r0, #46	; 0x2e
 8002864:	f001 fdf0 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002868:	202e      	movs	r0, #46	; 0x2e
 800286a:	f001 fe09 	bl	8004480 <HAL_NVIC_EnableIRQ>
}
 800286e:	e02e      	b.n	80028ce <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM9)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <HAL_TIM_Base_MspInit+0x19c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a16      	ldr	r2, [pc, #88]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
}
 8002896:	e01a      	b.n	80028ce <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM12)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <HAL_TIM_Base_MspInit+0x1a0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d115      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80028ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_TIM_Base_MspInit+0x18c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2105      	movs	r1, #5
 80028c2:	202b      	movs	r0, #43	; 0x2b
 80028c4:	f001 fdc0 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80028c8:	202b      	movs	r0, #43	; 0x2b
 80028ca:	f001 fdd9 	bl	8004480 <HAL_NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800
 80028e8:	40010400 	.word	0x40010400
 80028ec:	40014000 	.word	0x40014000
 80028f0:	40001800 	.word	0x40001800

080028f4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0e      	ldr	r2, [pc, #56]	; (800293c <HAL_TIM_OC_MspInit+0x48>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d115      	bne.n	8002932 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_TIM_OC_MspInit+0x4c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <HAL_TIM_OC_MspInit+0x4c>)
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_TIM_OC_MspInit+0x4c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2105      	movs	r1, #5
 8002926:	2032      	movs	r0, #50	; 0x32
 8002928:	f001 fd8e 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800292c:	2032      	movs	r0, #50	; 0x32
 800292e:	f001 fda7 	bl	8004480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40000c00 	.word	0x40000c00
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_TIM_MspPostInit+0x1d8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d11f      	bne.n	80029a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
 800296a:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a6c      	ldr	r2, [pc, #432]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002970:	f043 0310 	orr.w	r3, r3, #16
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = InCH8_9_Pin|InCH8_10_Pin|InCH20_5_Pin|InCH20_6_Pin;
 8002982:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002994:	2301      	movs	r3, #1
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299c:	4619      	mov	r1, r3
 800299e:	4861      	ldr	r0, [pc, #388]	; (8002b24 <HAL_TIM_MspPostInit+0x1e0>)
 80029a0:	f002 f95c 	bl	8004c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80029a4:	e0b6      	b.n	8002b14 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d11f      	bne.n	80029f0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a59      	ldr	r2, [pc, #356]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6313      	str	r3, [r2, #48]	; 0x30
 80029c0:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = InCH8_12_Pin|InCH8_11_Pin|InCH8_16_Pin;
 80029cc:	f640 4308 	movw	r3, #3080	; 0xc08
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029de:	2301      	movs	r3, #1
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e6:	4619      	mov	r1, r3
 80029e8:	484f      	ldr	r0, [pc, #316]	; (8002b28 <HAL_TIM_MspPostInit+0x1e4>)
 80029ea:	f002 f937 	bl	8004c5c <HAL_GPIO_Init>
}
 80029ee:	e091      	b.n	8002b14 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM3)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a4d      	ldr	r2, [pc, #308]	; (8002b2c <HAL_TIM_MspPostInit+0x1e8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d11e      	bne.n	8002a38 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	4b48      	ldr	r3, [pc, #288]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a47      	ldr	r2, [pc, #284]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b45      	ldr	r3, [pc, #276]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = InCH8_15_Pin|InCH20_4_Pin;
 8002a16:	2330      	movs	r3, #48	; 0x30
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2e:	4619      	mov	r1, r3
 8002a30:	483d      	ldr	r0, [pc, #244]	; (8002b28 <HAL_TIM_MspPostInit+0x1e4>)
 8002a32:	f002 f913 	bl	8004c5c <HAL_GPIO_Init>
}
 8002a36:	e06d      	b.n	8002b14 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3c      	ldr	r2, [pc, #240]	; (8002b30 <HAL_TIM_MspPostInit+0x1ec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11f      	bne.n	8002a82 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a35      	ldr	r2, [pc, #212]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a4c:	f043 0308 	orr.w	r3, r3, #8
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = InCH8_20_Pin|InCH20_8_Pin|InCH20_1_Pin|InCH20_2_Pin;
 8002a5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a70:	2302      	movs	r3, #2
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a78:	4619      	mov	r1, r3
 8002a7a:	482e      	ldr	r0, [pc, #184]	; (8002b34 <HAL_TIM_MspPostInit+0x1f0>)
 8002a7c:	f002 f8ee 	bl	8004c5c <HAL_GPIO_Init>
}
 8002a80:	e048      	b.n	8002b14 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <HAL_TIM_MspPostInit+0x1f4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d11f      	bne.n	8002acc <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a96:	f043 0304 	orr.w	r3, r3, #4
 8002a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9c:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = InCH8_13_Pin|InCH8_14_Pin|InCH8_17_Pin|InCH8_18_Pin;
 8002aa8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002aba:	2303      	movs	r3, #3
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	481d      	ldr	r0, [pc, #116]	; (8002b3c <HAL_TIM_MspPostInit+0x1f8>)
 8002ac6:	f002 f8c9 	bl	8004c5c <HAL_GPIO_Init>
}
 8002aca:	e023      	b.n	8002b14 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM12)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_TIM_MspPostInit+0x1fc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d11e      	bne.n	8002b14 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_TIM_MspPostInit+0x1dc>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = InCH20_7_Pin|InCH8_19_Pin;
 8002af2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002b04:	2309      	movs	r3, #9
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4806      	ldr	r0, [pc, #24]	; (8002b28 <HAL_TIM_MspPostInit+0x1e4>)
 8002b10:	f002 f8a4 	bl	8004c5c <HAL_GPIO_Init>
}
 8002b14:	bf00      	nop
 8002b16:	3738      	adds	r7, #56	; 0x38
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	40010400 	.word	0x40010400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40001800 	.word	0x40001800

08002b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <HAL_UART_MspInit+0x84>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d12b      	bne.n	8002bbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_UART_MspInit+0x88>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_UART_MspInit+0x88>)
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_UART_MspInit+0x88>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_UART_MspInit+0x88>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <HAL_UART_MspInit+0x88>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_UART_MspInit+0x88>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b9e:	2360      	movs	r3, #96	; 0x60
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002baa:	2303      	movs	r3, #3
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bae:	2307      	movs	r3, #7
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <HAL_UART_MspInit+0x8c>)
 8002bba:	f002 f84f 	bl	8004c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40004400 	.word	0x40004400
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020c00 	.word	0x40020c00

08002bd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf4:	d13f      	bne.n	8002c76 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_PCD_MspInit+0xac>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <HAL_PCD_MspInit+0xac>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_PCD_MspInit+0xac>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002c12:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c24:	230a      	movs	r3, #10
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4815      	ldr	r0, [pc, #84]	; (8002c84 <HAL_PCD_MspInit+0xb0>)
 8002c30:	f002 f814 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	4619      	mov	r1, r3
 8002c48:	480e      	ldr	r0, [pc, #56]	; (8002c84 <HAL_PCD_MspInit+0xb0>)
 8002c4a:	f002 f807 	bl	8004c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_PCD_MspInit+0xac>)
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <HAL_PCD_MspInit+0xac>)
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	6353      	str	r3, [r2, #52]	; 0x34
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_PCD_MspInit+0xac>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_PCD_MspInit+0xac>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_PCD_MspInit+0xac>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002c76:	bf00      	nop
 8002c78:	3728      	adds	r7, #40	; 0x28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020000 	.word	0x40020000

08002c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	202d      	movs	r0, #45	; 0x2d
 8002c9e:	f001 fbd3 	bl	8004448 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ca2:	202d      	movs	r0, #45	; 0x2d
 8002ca4:	f001 fbec 	bl	8004480 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <HAL_InitTick+0xa4>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_InitTick+0xa4>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <HAL_InitTick+0xa4>)
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cc4:	f107 0210 	add.w	r2, r7, #16
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 f874 	bl	8005dbc <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002cd4:	f003 f84a 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <HAL_InitTick+0xa8>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0c9b      	lsrs	r3, r3, #18
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_InitTick+0xac>)
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <HAL_InitTick+0xb0>)
 8002cf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_InitTick+0xac>)
 8002cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cf8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002cfa:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <HAL_InitTick+0xac>)
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_InitTick+0xac>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_InitTick+0xac>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8002d0c:	4809      	ldr	r0, [pc, #36]	; (8002d34 <HAL_InitTick+0xac>)
 8002d0e:	f003 f887 	bl	8005e20 <HAL_TIM_Base_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002d18:	4806      	ldr	r0, [pc, #24]	; (8002d34 <HAL_InitTick+0xac>)
 8002d1a:	f003 f939 	bl	8005f90 <HAL_TIM_Base_Start_IT>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	e000      	b.n	8002d24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3730      	adds	r7, #48	; 0x30
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	431bde83 	.word	0x431bde83
 8002d34:	200011f8 	.word	0x200011f8
 8002d38:	40002000 	.word	0x40002000

08002d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <NMI_Handler+0x4>

08002d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <HardFault_Handler+0x4>

08002d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <MemManage_Handler+0x4>

08002d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <BusFault_Handler+0x4>

08002d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <UsageFault_Handler+0x4>

08002d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <CAN1_TX_IRQHandler+0x10>)
 8002d6e:	f001 f8ac 	bl	8003eca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000464 	.word	0x20000464

08002d7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <CAN1_RX0_IRQHandler+0x10>)
 8002d82:	f001 f8a2 	bl	8003eca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000464 	.word	0x20000464

08002d90 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <CAN1_RX1_IRQHandler+0x10>)
 8002d96:	f001 f898 	bl	8003eca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000464 	.word	0x20000464

08002da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <TIM2_IRQHandler+0x10>)
 8002daa:	f003 fb41 	bl	8006430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000528 	.word	0x20000528

08002db8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002dbc:	4803      	ldr	r0, [pc, #12]	; (8002dcc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002dbe:	f003 fb37 	bl	8006430 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002dc2:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002dc4:	f003 fb34 	bl	8006430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000648 	.word	0x20000648
 8002dd0:	200006d8 	.word	0x200006d8

08002dd4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002dda:	f003 fb29 	bl	8006430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000648 	.word	0x20000648

08002de8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002dee:	f003 fb1f 	bl	8006430 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002df2:	4803      	ldr	r0, [pc, #12]	; (8002e00 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002df4:	f003 fb1c 	bl	8006430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000648 	.word	0x20000648
 8002e00:	200011f8 	.word	0x200011f8

08002e04 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <TIM8_CC_IRQHandler+0x10>)
 8002e0a:	f003 fb11 	bl	8006430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000648 	.word	0x20000648

08002e18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <TIM5_IRQHandler+0x10>)
 8002e1e:	f003 fb07 	bl	8006430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000600 	.word	0x20000600

08002e2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	vADC_Ready(ADC3_READY);
 8002e30:	2004      	movs	r0, #4
 8002e32:	f008 ffd9 	bl	800bde8 <vADC_Ready>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002e36:	4802      	ldr	r0, [pc, #8]	; (8002e40 <DMA2_Stream0_IRQHandler+0x14>)
 8002e38:	f001 fca6 	bl	8004788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000404 	.word	0x20000404

08002e44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	vADC_Ready(ADC2_READY);
 8002e48:	2002      	movs	r0, #2
 8002e4a:	f008 ffcd 	bl	800bde8 <vADC_Ready>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002e4e:	4802      	ldr	r0, [pc, #8]	; (8002e58 <DMA2_Stream2_IRQHandler+0x14>)
 8002e50:	f001 fc9a 	bl	8004788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200003a4 	.word	0x200003a4

08002e5c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */
   vADC_Ready(ADC3_READY);
 8002e60:	2004      	movs	r0, #4
 8002e62:	f008 ffc1 	bl	800bde8 <vADC_Ready>
  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <DMA2_Stream4_IRQHandler+0x14>)
 8002e68:	f001 fc8e 	bl	8004788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000344 	.word	0x20000344

08002e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <SystemInit+0x20>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <SystemInit+0x20>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e9c:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e9e:	490e      	ldr	r1, [pc, #56]	; (8002ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ea0:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea4:	e002      	b.n	8002eac <LoopCopyDataInit>

08002ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eaa:	3304      	adds	r3, #4

08002eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb0:	d3f9      	bcc.n	8002ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002eb4:	4c0b      	ldr	r4, [pc, #44]	; (8002ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb8:	e001      	b.n	8002ebe <LoopFillZerobss>

08002eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ebc:	3204      	adds	r2, #4

08002ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec0:	d3fb      	bcc.n	8002eba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ec2:	f7ff ffd7 	bl	8002e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec6:	f008 ffd9 	bl	800be7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eca:	f7fe f87f 	bl	8000fcc <main>
  bx  lr    
 8002ece:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002edc:	0800c1f4 	.word	0x0800c1f4
  ldr r2, =_sbss
 8002ee0:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002ee4:	20006460 	.word	0x20006460

08002ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee8:	e7fe      	b.n	8002ee8 <ADC_IRQHandler>
	...

08002eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <HAL_Init+0x40>)
 8002ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_Init+0x40>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_Init+0x40>)
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f14:	2003      	movs	r0, #3
 8002f16:	f001 fa8c 	bl	8004432 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f1a:	200f      	movs	r0, #15
 8002f1c:	f7ff feb4 	bl	8002c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f20:	f7ff f98e 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023c00 	.word	0x40023c00

08002f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_IncTick+0x20>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_IncTick+0x24>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <HAL_IncTick+0x24>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000008 	.word	0x20000008
 8002f54:	20001240 	.word	0x20001240

08002f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_GetTick+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20001240 	.word	0x20001240

08002f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff ffee 	bl	8002f58 <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d005      	beq.n	8002f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_Delay+0x44>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f96:	bf00      	nop
 8002f98:	f7ff ffde 	bl	8002f58 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d8f7      	bhi.n	8002f98 <HAL_Delay+0x28>
  {
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000008 	.word	0x20000008

08002fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e033      	b.n	8003036 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff f95e 	bl	8002298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ffe:	f023 0302 	bic.w	r3, r3, #2
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fac2 	bl	8003594 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
 8003026:	e001      	b.n	800302c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADC_Start_DMA+0x1e>
 800305a:	2302      	movs	r3, #2
 800305c:	e0e9      	b.n	8003232 <HAL_ADC_Start_DMA+0x1f2>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d018      	beq.n	80030a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003084:	4b6d      	ldr	r3, [pc, #436]	; (800323c <HAL_ADC_Start_DMA+0x1fc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6d      	ldr	r2, [pc, #436]	; (8003240 <HAL_ADC_Start_DMA+0x200>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9a      	lsrs	r2, r3, #18
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003098:	e002      	b.n	80030a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3b01      	subs	r3, #1
 800309e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f9      	bne.n	800309a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d107      	bne.n	80030c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 80a1 	bne.w	8003218 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003100:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d106      	bne.n	8003124 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f023 0206 	bic.w	r2, r3, #6
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
 8003122:	e002      	b.n	800312a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003132:	4b44      	ldr	r3, [pc, #272]	; (8003244 <HAL_ADC_Start_DMA+0x204>)
 8003134:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	4a43      	ldr	r2, [pc, #268]	; (8003248 <HAL_ADC_Start_DMA+0x208>)
 800313c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	4a42      	ldr	r2, [pc, #264]	; (800324c <HAL_ADC_Start_DMA+0x20c>)
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	4a41      	ldr	r2, [pc, #260]	; (8003250 <HAL_ADC_Start_DMA+0x210>)
 800314c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003156:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003166:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003176:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	334c      	adds	r3, #76	; 0x4c
 8003182:	4619      	mov	r1, r3
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f001 fa36 	bl	80045f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2b00      	cmp	r3, #0
 8003196:	d12a      	bne.n	80031ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <HAL_ADC_Start_DMA+0x214>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d015      	beq.n	80031ce <HAL_ADC_Start_DMA+0x18e>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <HAL_ADC_Start_DMA+0x218>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d105      	bne.n	80031b8 <HAL_ADC_Start_DMA+0x178>
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_ADC_Start_DMA+0x204>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a27      	ldr	r2, [pc, #156]	; (800325c <HAL_ADC_Start_DMA+0x21c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d136      	bne.n	8003230 <HAL_ADC_Start_DMA+0x1f0>
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_ADC_Start_DMA+0x204>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d130      	bne.n	8003230 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d129      	bne.n	8003230 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	e020      	b.n	8003230 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <HAL_ADC_Start_DMA+0x214>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d11b      	bne.n	8003230 <HAL_ADC_Start_DMA+0x1f0>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d114      	bne.n	8003230 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	e00b      	b.n	8003230 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f043 0210 	orr.w	r2, r3, #16
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000000 	.word	0x20000000
 8003240:	431bde83 	.word	0x431bde83
 8003244:	40012300 	.word	0x40012300
 8003248:	0800378d 	.word	0x0800378d
 800324c:	08003847 	.word	0x08003847
 8003250:	08003863 	.word	0x08003863
 8003254:	40012000 	.word	0x40012000
 8003258:	40012100 	.word	0x40012100
 800325c:	40012200 	.word	0x40012200

08003260 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_ADC_Stop_DMA+0x1a>
 8003276:	2302      	movs	r3, #2
 8003278:	e048      	b.n	800330c <HAL_ADC_Stop_DMA+0xac>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d130      	bne.n	8003302 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d10f      	bne.n	80032de <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 f9f0 	bl	80046a8 <HAL_DMA_Abort>
 80032c8:	4603      	mov	r3, r0
 80032ca:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80032ec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1c>
 8003368:	2302      	movs	r3, #2
 800336a:	e105      	b.n	8003578 <HAL_ADC_ConfigChannel+0x228>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b09      	cmp	r3, #9
 800337a:	d925      	bls.n	80033c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	3b1e      	subs	r3, #30
 8003392:	2207      	movs	r2, #7
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43da      	mvns	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	400a      	ands	r2, r1
 80033a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4403      	add	r3, r0
 80033ba:	3b1e      	subs	r3, #30
 80033bc:	409a      	lsls	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e022      	b.n	800340e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6919      	ldr	r1, [r3, #16]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	2207      	movs	r2, #7
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	400a      	ands	r2, r1
 80033ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4403      	add	r3, r0
 8003404:	409a      	lsls	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d824      	bhi.n	8003460 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3b05      	subs	r3, #5
 8003428:	221f      	movs	r2, #31
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	400a      	ands	r2, r1
 8003436:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	4618      	mov	r0, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	3b05      	subs	r3, #5
 8003452:	fa00 f203 	lsl.w	r2, r0, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	635a      	str	r2, [r3, #52]	; 0x34
 800345e:	e04c      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d824      	bhi.n	80034b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	3b23      	subs	r3, #35	; 0x23
 800347a:	221f      	movs	r2, #31
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43da      	mvns	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	400a      	ands	r2, r1
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	3b23      	subs	r3, #35	; 0x23
 80034a4:	fa00 f203 	lsl.w	r2, r0, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
 80034b0:	e023      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b41      	subs	r3, #65	; 0x41
 80034c4:	221f      	movs	r2, #31
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	400a      	ands	r2, r1
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b41      	subs	r3, #65	; 0x41
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_ADC_ConfigChannel+0x234>)
 80034fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a21      	ldr	r2, [pc, #132]	; (8003588 <HAL_ADC_ConfigChannel+0x238>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d109      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1cc>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b12      	cmp	r3, #18
 800350e:	d105      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_ADC_ConfigChannel+0x238>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d123      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b10      	cmp	r3, #16
 800352c:	d003      	beq.n	8003536 <HAL_ADC_ConfigChannel+0x1e6>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b11      	cmp	r3, #17
 8003534:	d11b      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b10      	cmp	r3, #16
 8003548:	d111      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_ADC_ConfigChannel+0x23c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a10      	ldr	r2, [pc, #64]	; (8003590 <HAL_ADC_ConfigChannel+0x240>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	0c9a      	lsrs	r2, r3, #18
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003560:	e002      	b.n	8003568 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3b01      	subs	r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f9      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40012300 	.word	0x40012300
 8003588:	40012000 	.word	0x40012000
 800358c:	20000000 	.word	0x20000000
 8003590:	431bde83 	.word	0x431bde83

08003594 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800359c:	4b79      	ldr	r3, [pc, #484]	; (8003784 <ADC_Init+0x1f0>)
 800359e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	021a      	lsls	r2, r3, #8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6899      	ldr	r1, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	4a58      	ldr	r2, [pc, #352]	; (8003788 <ADC_Init+0x1f4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800365c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	e00f      	b.n	8003692 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003690:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0202 	bic.w	r2, r2, #2
 80036a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7e1b      	ldrb	r3, [r3, #24]
 80036ac:	005a      	lsls	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	3b01      	subs	r3, #1
 80036ec:	035a      	lsls	r2, r3, #13
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	e007      	b.n	8003708 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003706:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	3b01      	subs	r3, #1
 8003724:	051a      	lsls	r2, r3, #20
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800373c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800374a:	025a      	lsls	r2, r3, #9
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	029a      	lsls	r2, r3, #10
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40012300 	.word	0x40012300
 8003788:	0f000001 	.word	0x0f000001

0800378c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d13c      	bne.n	8003820 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d12b      	bne.n	8003818 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d127      	bne.n	8003818 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d006      	beq.n	80037e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d119      	bne.n	8003818 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0220 	bic.w	r2, r2, #32
 80037f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fd7b 	bl	8003314 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800381e:	e00e      	b.n	800383e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff fd85 	bl	800333c <HAL_ADC_ErrorCallback>
}
 8003832:	e004      	b.n	800383e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff fd67 	bl	8003328 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2240      	movs	r2, #64	; 0x40
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fd5a 	bl	800333c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0ed      	b.n	8003a7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe fea6 	bl	8002600 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038c4:	f7ff fb48 	bl	8002f58 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038ca:	e012      	b.n	80038f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038cc:	f7ff fb44 	bl	8002f58 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b0a      	cmp	r3, #10
 80038d8:	d90b      	bls.n	80038f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2205      	movs	r2, #5
 80038ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0c5      	b.n	8003a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0e5      	beq.n	80038cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0202 	bic.w	r2, r2, #2
 800390e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003910:	f7ff fb22 	bl	8002f58 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003916:	e012      	b.n	800393e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003918:	f7ff fb1e 	bl	8002f58 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b0a      	cmp	r3, #10
 8003924:	d90b      	bls.n	800393e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e09f      	b.n	8003a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7e1b      	ldrb	r3, [r3, #24]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d108      	bne.n	8003966 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e007      	b.n	8003976 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003974:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	7e5b      	ldrb	r3, [r3, #25]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d108      	bne.n	8003990 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e007      	b.n	80039a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7e9b      	ldrb	r3, [r3, #26]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d108      	bne.n	80039ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0220 	orr.w	r2, r2, #32
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e007      	b.n	80039ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0220 	bic.w	r2, r2, #32
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7edb      	ldrb	r3, [r3, #27]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d108      	bne.n	80039e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0210 	bic.w	r2, r2, #16
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e007      	b.n	80039f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0210 	orr.w	r2, r2, #16
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7f1b      	ldrb	r3, [r3, #28]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d108      	bne.n	8003a0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0208 	orr.w	r2, r2, #8
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e007      	b.n	8003a1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0208 	bic.w	r2, r2, #8
 8003a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7f5b      	ldrb	r3, [r3, #29]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d108      	bne.n	8003a38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0204 	orr.w	r2, r2, #4
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e007      	b.n	8003a48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0204 	bic.w	r2, r2, #4
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	ea42 0103 	orr.w	r1, r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b089      	sub	sp, #36	; 0x24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003aa4:	7ffb      	ldrb	r3, [r7, #31]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d003      	beq.n	8003ab2 <HAL_CAN_AddTxMessage+0x2c>
 8003aaa:	7ffb      	ldrb	r3, [r7, #31]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	f040 80b8 	bne.w	8003c22 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80a0 	beq.w	8003c12 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	0e1b      	lsrs	r3, r3, #24
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d907      	bls.n	8003af2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e09e      	b.n	8003c30 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003af2:	2201      	movs	r2, #1
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	409a      	lsls	r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b0e:	68f9      	ldr	r1, [r7, #12]
 8003b10:	6809      	ldr	r1, [r1, #0]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3318      	adds	r3, #24
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	440b      	add	r3, r1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e00f      	b.n	8003b40 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b2a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b30:	68f9      	ldr	r1, [r7, #12]
 8003b32:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b34:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3318      	adds	r3, #24
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	440b      	add	r3, r1
 8003b3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	440b      	add	r3, r1
 8003b50:	3304      	adds	r3, #4
 8003b52:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	7d1b      	ldrb	r3, [r3, #20]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d111      	bne.n	8003b80 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3318      	adds	r3, #24
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	4413      	add	r3, r2
 8003b68:	3304      	adds	r3, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	6811      	ldr	r1, [r2, #0]
 8003b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3318      	adds	r3, #24
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3307      	adds	r3, #7
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	061a      	lsls	r2, r3, #24
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3306      	adds	r3, #6
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3305      	adds	r3, #5
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	3204      	adds	r2, #4
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	6811      	ldr	r1, [r2, #0]
 8003ba8:	ea43 0200 	orr.w	r2, r3, r0
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	440b      	add	r3, r1
 8003bb2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003bb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3303      	adds	r3, #3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	061a      	lsls	r2, r3, #24
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	4610      	mov	r0, r2
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	6811      	ldr	r1, [r2, #0]
 8003bde:	ea43 0200 	orr.w	r2, r3, r0
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	440b      	add	r3, r1
 8003be8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003bec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	4413      	add	r3, r2
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	6811      	ldr	r1, [r2, #0]
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3318      	adds	r3, #24
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	440b      	add	r3, r1
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e00e      	b.n	8003c30 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e006      	b.n	8003c30 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3724      	adds	r7, #36	; 0x24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c4e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c50:	7afb      	ldrb	r3, [r7, #11]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d002      	beq.n	8003c5c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11d      	bne.n	8003c98 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3301      	adds	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003c98:	68fb      	ldr	r3, [r7, #12]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b087      	sub	sp, #28
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <HAL_CAN_GetRxMessage+0x24>
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f040 80f3 	bne.w	8003eb0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d116      	bne.n	8003d0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0e7      	b.n	8003ebe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0d8      	b.n	8003ebe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	331b      	adds	r3, #27
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	4413      	add	r3, r2
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0204 	and.w	r2, r3, #4
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10c      	bne.n	8003d44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	331b      	adds	r3, #27
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	4413      	add	r3, r2
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	0d5b      	lsrs	r3, r3, #21
 8003d3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e00b      	b.n	8003d5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	331b      	adds	r3, #27
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	4413      	add	r3, r2
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	08db      	lsrs	r3, r3, #3
 8003d54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	331b      	adds	r3, #27
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	4413      	add	r3, r2
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0202 	and.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	331b      	adds	r3, #27
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	331b      	adds	r3, #27
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	4413      	add	r3, r2
 8003d96:	3304      	adds	r3, #4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	331b      	adds	r3, #27
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	4413      	add	r3, r2
 8003dae:	3304      	adds	r3, #4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0a1a      	lsrs	r2, r3, #8
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	0c1a      	lsrs	r2, r3, #16
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	3302      	adds	r3, #2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0e1a      	lsrs	r2, r3, #24
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	3303      	adds	r3, #3
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	3304      	adds	r3, #4
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	0a1a      	lsrs	r2, r3, #8
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	3305      	adds	r3, #5
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0c1a      	lsrs	r2, r3, #16
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	3306      	adds	r3, #6
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	0e1a      	lsrs	r2, r3, #24
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	3307      	adds	r3, #7
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0220 	orr.w	r2, r2, #32
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	e007      	b.n	8003eac <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0220 	orr.w	r2, r2, #32
 8003eaa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e006      	b.n	8003ebe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b08a      	sub	sp, #40	; 0x28
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d07c      	beq.n	800400a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d023      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fc ff8d 	bl	8000e4c <HAL_CAN_TxMailbox0CompleteCallback>
 8003f32:	e016      	b.n	8003f62 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
 8003f46:	e00c      	b.n	8003f62 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	e002      	b.n	8003f62 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f96b 	bl	8004238 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d024      	beq.n	8003fb6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fc ff6d 	bl	8000e60 <HAL_CAN_TxMailbox1CompleteCallback>
 8003f86:	e016      	b.n	8003fb6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	e00c      	b.n	8003fb6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	e002      	b.n	8003fb6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f94b 	bl	800424c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d024      	beq.n	800400a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fc ff4d 	bl	8000e74 <HAL_CAN_TxMailbox2CompleteCallback>
 8003fda:	e016      	b.n	800400a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d004      	beq.n	8003ff0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
 8003fee:	e00c      	b.n	800400a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
 8004002:	e002      	b.n	800400a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f92b 	bl	8004260 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004024:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2210      	movs	r2, #16
 800402c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2208      	movs	r2, #8
 8004048:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f912 	bl	8004274 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7fc ff97 	bl	8000f9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00c      	beq.n	8004092 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004088:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2210      	movs	r2, #16
 8004090:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d006      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2208      	movs	r2, #8
 80040ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8ea 	bl	8004288 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fc ff71 	bl	8000fb4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2210      	movs	r2, #16
 80040ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8d4 	bl	800429c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d006      	beq.n	8004116 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2208      	movs	r2, #8
 800410e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8cd 	bl	80042b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d07b      	beq.n	8004218 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d072      	beq.n	8004210 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004184:	2b00      	cmp	r3, #0
 8004186:	d043      	beq.n	8004210 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800418e:	2b00      	cmp	r3, #0
 8004190:	d03e      	beq.n	8004210 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004198:	2b60      	cmp	r3, #96	; 0x60
 800419a:	d02b      	beq.n	80041f4 <HAL_CAN_IRQHandler+0x32a>
 800419c:	2b60      	cmp	r3, #96	; 0x60
 800419e:	d82e      	bhi.n	80041fe <HAL_CAN_IRQHandler+0x334>
 80041a0:	2b50      	cmp	r3, #80	; 0x50
 80041a2:	d022      	beq.n	80041ea <HAL_CAN_IRQHandler+0x320>
 80041a4:	2b50      	cmp	r3, #80	; 0x50
 80041a6:	d82a      	bhi.n	80041fe <HAL_CAN_IRQHandler+0x334>
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d019      	beq.n	80041e0 <HAL_CAN_IRQHandler+0x316>
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d826      	bhi.n	80041fe <HAL_CAN_IRQHandler+0x334>
 80041b0:	2b30      	cmp	r3, #48	; 0x30
 80041b2:	d010      	beq.n	80041d6 <HAL_CAN_IRQHandler+0x30c>
 80041b4:	2b30      	cmp	r3, #48	; 0x30
 80041b6:	d822      	bhi.n	80041fe <HAL_CAN_IRQHandler+0x334>
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d002      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x2f8>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d005      	beq.n	80041cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041c0:	e01d      	b.n	80041fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	f043 0308 	orr.w	r3, r3, #8
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041ca:	e019      	b.n	8004200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	f043 0310 	orr.w	r3, r3, #16
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041d4:	e014      	b.n	8004200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f043 0320 	orr.w	r3, r3, #32
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041de:	e00f      	b.n	8004200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041e8:	e00a      	b.n	8004200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041f2:	e005      	b.n	8004200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041fc:	e000      	b.n	8004200 <HAL_CAN_IRQHandler+0x336>
            break;
 80041fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800420e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2204      	movs	r2, #4
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f84a 	bl	80042c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004230:	bf00      	nop
 8004232:	3728      	adds	r7, #40	; 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <__NVIC_SetPriorityGrouping+0x44>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <__NVIC_SetPriorityGrouping+0x44>)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	60d3      	str	r3, [r2, #12]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <__NVIC_GetPriorityGrouping+0x18>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	f003 0307 	and.w	r3, r3, #7
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	2b00      	cmp	r3, #0
 800434c:	db0b      	blt.n	8004366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	4907      	ldr	r1, [pc, #28]	; (8004374 <__NVIC_EnableIRQ+0x38>)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2001      	movs	r0, #1
 800435e:	fa00 f202 	lsl.w	r2, r0, r2
 8004362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000e100 	.word	0xe000e100

08004378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	6039      	str	r1, [r7, #0]
 8004382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004388:	2b00      	cmp	r3, #0
 800438a:	db0a      	blt.n	80043a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	490c      	ldr	r1, [pc, #48]	; (80043c4 <__NVIC_SetPriority+0x4c>)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	0112      	lsls	r2, r2, #4
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	440b      	add	r3, r1
 800439c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043a0:	e00a      	b.n	80043b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	4908      	ldr	r1, [pc, #32]	; (80043c8 <__NVIC_SetPriority+0x50>)
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	3b04      	subs	r3, #4
 80043b0:	0112      	lsls	r2, r2, #4
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	440b      	add	r3, r1
 80043b6:	761a      	strb	r2, [r3, #24]
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	e000e100 	.word	0xe000e100
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b089      	sub	sp, #36	; 0x24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f1c3 0307 	rsb	r3, r3, #7
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	bf28      	it	cs
 80043ea:	2304      	movcs	r3, #4
 80043ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d902      	bls.n	80043fc <NVIC_EncodePriority+0x30>
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3b03      	subs	r3, #3
 80043fa:	e000      	b.n	80043fe <NVIC_EncodePriority+0x32>
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004400:	f04f 32ff 	mov.w	r2, #4294967295
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43da      	mvns	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	401a      	ands	r2, r3
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004414:	f04f 31ff 	mov.w	r1, #4294967295
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	43d9      	mvns	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004424:	4313      	orrs	r3, r2
         );
}
 8004426:	4618      	mov	r0, r3
 8004428:	3724      	adds	r7, #36	; 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ff4c 	bl	80042d8 <__NVIC_SetPriorityGrouping>
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800445a:	f7ff ff61 	bl	8004320 <__NVIC_GetPriorityGrouping>
 800445e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	f7ff ffb1 	bl	80043cc <NVIC_EncodePriority>
 800446a:	4602      	mov	r2, r0
 800446c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff80 	bl	8004378 <__NVIC_SetPriority>
}
 8004478:	bf00      	nop
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ff54 	bl	800433c <__NVIC_EnableIRQ>
}
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7fe fd56 	bl	8002f58 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e099      	b.n	80045ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044d8:	e00f      	b.n	80044fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044da:	f7fe fd3d 	bl	8002f58 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d908      	bls.n	80044fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2203      	movs	r2, #3
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e078      	b.n	80045ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e8      	bne.n	80044da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_DMA_Init+0x158>)
 8004514:	4013      	ands	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800453e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	2b04      	cmp	r3, #4
 8004552:	d107      	bne.n	8004564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	4313      	orrs	r3, r2
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0307 	bic.w	r3, r3, #7
 800457a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2b04      	cmp	r3, #4
 800458c:	d117      	bne.n	80045be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fadf 	bl	8004b64 <DMA_CheckFifoParam>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2240      	movs	r2, #64	; 0x40
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045ba:	2301      	movs	r3, #1
 80045bc:	e016      	b.n	80045ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fa96 	bl	8004af8 <DMA_CalcBaseAndBitshift>
 80045cc:	4603      	mov	r3, r0
 80045ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d4:	223f      	movs	r2, #63	; 0x3f
 80045d6:	409a      	lsls	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	f010803f 	.word	0xf010803f

080045f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_DMA_Start_IT+0x26>
 800461a:	2302      	movs	r3, #2
 800461c:	e040      	b.n	80046a0 <HAL_DMA_Start_IT+0xa8>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d12f      	bne.n	8004692 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fa28 	bl	8004a9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	223f      	movs	r2, #63	; 0x3f
 8004652:	409a      	lsls	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0216 	orr.w	r2, r2, #22
 8004666:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0208 	orr.w	r2, r2, #8
 800467e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e005      	b.n	800469e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800469a:	2302      	movs	r3, #2
 800469c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800469e:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046b6:	f7fe fc4f 	bl	8002f58 <HAL_GetTick>
 80046ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d008      	beq.n	80046da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e052      	b.n	8004780 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0216 	bic.w	r2, r2, #22
 80046e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_DMA_Abort+0x62>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0208 	bic.w	r2, r2, #8
 8004718:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472a:	e013      	b.n	8004754 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472c:	f7fe fc14 	bl	8002f58 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b05      	cmp	r3, #5
 8004738:	d90c      	bls.n	8004754 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2203      	movs	r2, #3
 8004744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e015      	b.n	8004780 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e4      	bne.n	800472c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	223f      	movs	r2, #63	; 0x3f
 8004768:	409a      	lsls	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004794:	4b8e      	ldr	r3, [pc, #568]	; (80049d0 <HAL_DMA_IRQHandler+0x248>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a8e      	ldr	r2, [pc, #568]	; (80049d4 <HAL_DMA_IRQHandler+0x24c>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	0a9b      	lsrs	r3, r3, #10
 80047a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	2208      	movs	r2, #8
 80047b4:	409a      	lsls	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01a      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0204 	bic.w	r2, r2, #4
 80047da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	2208      	movs	r2, #8
 80047e2:	409a      	lsls	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f043 0201 	orr.w	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	2201      	movs	r2, #1
 80047fa:	409a      	lsls	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d012      	beq.n	800482a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004816:	2201      	movs	r2, #1
 8004818:	409a      	lsls	r2, r3
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	2204      	movs	r2, #4
 8004830:	409a      	lsls	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d012      	beq.n	8004860 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	2204      	movs	r2, #4
 800484e:	409a      	lsls	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0204 	orr.w	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	2210      	movs	r2, #16
 8004866:	409a      	lsls	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d043      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d03c      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004882:	2210      	movs	r2, #16
 8004884:	409a      	lsls	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d018      	beq.n	80048ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d108      	bne.n	80048b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d024      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	4798      	blx	r3
 80048b6:	e01f      	b.n	80048f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
 80048c8:	e016      	b.n	80048f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0208 	bic.w	r2, r2, #8
 80048e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	2220      	movs	r2, #32
 80048fe:	409a      	lsls	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 808f 	beq.w	8004a28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8087 	beq.w	8004a28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	2220      	movs	r2, #32
 8004920:	409a      	lsls	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b05      	cmp	r3, #5
 8004930:	d136      	bne.n	80049a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0216 	bic.w	r2, r2, #22
 8004940:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004950:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <HAL_DMA_IRQHandler+0x1da>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0208 	bic.w	r2, r2, #8
 8004970:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	223f      	movs	r2, #63	; 0x3f
 8004978:	409a      	lsls	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004992:	2b00      	cmp	r3, #0
 8004994:	d07e      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
        }
        return;
 800499e:	e079      	b.n	8004a94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01d      	beq.n	80049ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10d      	bne.n	80049d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d031      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
 80049cc:	e02c      	b.n	8004a28 <HAL_DMA_IRQHandler+0x2a0>
 80049ce:	bf00      	nop
 80049d0:	20000000 	.word	0x20000000
 80049d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d023      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4798      	blx	r3
 80049e8:	e01e      	b.n	8004a28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0210 	bic.w	r2, r2, #16
 8004a06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d032      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d022      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2205      	movs	r2, #5
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3301      	adds	r3, #1
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d307      	bcc.n	8004a70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f2      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x2cc>
 8004a6e:	e000      	b.n	8004a72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
 8004a92:	e000      	b.n	8004a96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a94:	bf00      	nop
    }
  }
}
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b40      	cmp	r3, #64	; 0x40
 8004ac8:	d108      	bne.n	8004adc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ada:	e007      	b.n	8004aec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	3b10      	subs	r3, #16
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <DMA_CalcBaseAndBitshift+0x64>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b12:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <DMA_CalcBaseAndBitshift+0x68>)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d909      	bls.n	8004b3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	1d1a      	adds	r2, r3, #4
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	659a      	str	r2, [r3, #88]	; 0x58
 8004b38:	e007      	b.n	8004b4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	aaaaaaab 	.word	0xaaaaaaab
 8004b60:	0800c17c 	.word	0x0800c17c

08004b64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11f      	bne.n	8004bbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d856      	bhi.n	8004c32 <DMA_CheckFifoParam+0xce>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <DMA_CheckFifoParam+0x28>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004baf 	.word	0x08004baf
 8004b94:	08004b9d 	.word	0x08004b9d
 8004b98:	08004c33 	.word	0x08004c33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d046      	beq.n	8004c36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bac:	e043      	b.n	8004c36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb6:	d140      	bne.n	8004c3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bbc:	e03d      	b.n	8004c3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc6:	d121      	bne.n	8004c0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d837      	bhi.n	8004c3e <DMA_CheckFifoParam+0xda>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <DMA_CheckFifoParam+0x70>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004beb 	.word	0x08004beb
 8004bdc:	08004be5 	.word	0x08004be5
 8004be0:	08004bfd 	.word	0x08004bfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	73fb      	strb	r3, [r7, #15]
      break;
 8004be8:	e030      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d025      	beq.n	8004c42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfa:	e022      	b.n	8004c42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c04:	d11f      	bne.n	8004c46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c0a:	e01c      	b.n	8004c46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d903      	bls.n	8004c1a <DMA_CheckFifoParam+0xb6>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d003      	beq.n	8004c20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c18:	e018      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1e:	e015      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c30:	e00b      	b.n	8004c4a <DMA_CheckFifoParam+0xe6>
      break;
 8004c32:	bf00      	nop
 8004c34:	e00a      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
      break;
 8004c36:	bf00      	nop
 8004c38:	e008      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e006      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e004      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
      break;
 8004c42:	bf00      	nop
 8004c44:	e002      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
      break;   
 8004c46:	bf00      	nop
 8004c48:	e000      	b.n	8004c4c <DMA_CheckFifoParam+0xe8>
      break;
 8004c4a:	bf00      	nop
    }
  } 
  
  return status; 
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop

08004c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	e16b      	b.n	8004f50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c78:	2201      	movs	r2, #1
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	f040 815a 	bne.w	8004f4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d005      	beq.n	8004cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d130      	bne.n	8004d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	2203      	movs	r2, #3
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 0201 	and.w	r2, r3, #1
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d017      	beq.n	8004d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	2203      	movs	r2, #3
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d123      	bne.n	8004da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	08da      	lsrs	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3208      	adds	r2, #8
 8004d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	220f      	movs	r2, #15
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	08da      	lsrs	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3208      	adds	r2, #8
 8004d9a:	69b9      	ldr	r1, [r7, #24]
 8004d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	2203      	movs	r2, #3
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0203 	and.w	r2, r3, #3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80b4 	beq.w	8004f4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	4b60      	ldr	r3, [pc, #384]	; (8004f68 <HAL_GPIO_Init+0x30c>)
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	4a5f      	ldr	r2, [pc, #380]	; (8004f68 <HAL_GPIO_Init+0x30c>)
 8004dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004df0:	6453      	str	r3, [r2, #68]	; 0x44
 8004df2:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <HAL_GPIO_Init+0x30c>)
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfe:	4a5b      	ldr	r2, [pc, #364]	; (8004f6c <HAL_GPIO_Init+0x310>)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	3302      	adds	r3, #2
 8004e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	220f      	movs	r2, #15
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a52      	ldr	r2, [pc, #328]	; (8004f70 <HAL_GPIO_Init+0x314>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d02b      	beq.n	8004e82 <HAL_GPIO_Init+0x226>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a51      	ldr	r2, [pc, #324]	; (8004f74 <HAL_GPIO_Init+0x318>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d025      	beq.n	8004e7e <HAL_GPIO_Init+0x222>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a50      	ldr	r2, [pc, #320]	; (8004f78 <HAL_GPIO_Init+0x31c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01f      	beq.n	8004e7a <HAL_GPIO_Init+0x21e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a4f      	ldr	r2, [pc, #316]	; (8004f7c <HAL_GPIO_Init+0x320>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d019      	beq.n	8004e76 <HAL_GPIO_Init+0x21a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a4e      	ldr	r2, [pc, #312]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_GPIO_Init+0x216>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a4d      	ldr	r2, [pc, #308]	; (8004f84 <HAL_GPIO_Init+0x328>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00d      	beq.n	8004e6e <HAL_GPIO_Init+0x212>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a4c      	ldr	r2, [pc, #304]	; (8004f88 <HAL_GPIO_Init+0x32c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <HAL_GPIO_Init+0x20e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a4b      	ldr	r2, [pc, #300]	; (8004f8c <HAL_GPIO_Init+0x330>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d101      	bne.n	8004e66 <HAL_GPIO_Init+0x20a>
 8004e62:	2307      	movs	r3, #7
 8004e64:	e00e      	b.n	8004e84 <HAL_GPIO_Init+0x228>
 8004e66:	2308      	movs	r3, #8
 8004e68:	e00c      	b.n	8004e84 <HAL_GPIO_Init+0x228>
 8004e6a:	2306      	movs	r3, #6
 8004e6c:	e00a      	b.n	8004e84 <HAL_GPIO_Init+0x228>
 8004e6e:	2305      	movs	r3, #5
 8004e70:	e008      	b.n	8004e84 <HAL_GPIO_Init+0x228>
 8004e72:	2304      	movs	r3, #4
 8004e74:	e006      	b.n	8004e84 <HAL_GPIO_Init+0x228>
 8004e76:	2303      	movs	r3, #3
 8004e78:	e004      	b.n	8004e84 <HAL_GPIO_Init+0x228>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e002      	b.n	8004e84 <HAL_GPIO_Init+0x228>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_GPIO_Init+0x228>
 8004e82:	2300      	movs	r3, #0
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	f002 0203 	and.w	r2, r2, #3
 8004e8a:	0092      	lsls	r2, r2, #2
 8004e8c:	4093      	lsls	r3, r2
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e94:	4935      	ldr	r1, [pc, #212]	; (8004f6c <HAL_GPIO_Init+0x310>)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	089b      	lsrs	r3, r3, #2
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ea2:	4b3b      	ldr	r3, [pc, #236]	; (8004f90 <HAL_GPIO_Init+0x334>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ec6:	4a32      	ldr	r2, [pc, #200]	; (8004f90 <HAL_GPIO_Init+0x334>)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ecc:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <HAL_GPIO_Init+0x334>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ef0:	4a27      	ldr	r2, [pc, #156]	; (8004f90 <HAL_GPIO_Init+0x334>)
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ef6:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <HAL_GPIO_Init+0x334>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <HAL_GPIO_Init+0x334>)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <HAL_GPIO_Init+0x334>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f44:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <HAL_GPIO_Init+0x334>)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b0f      	cmp	r3, #15
 8004f54:	f67f ae90 	bls.w	8004c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	3724      	adds	r7, #36	; 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	40020000 	.word	0x40020000
 8004f74:	40020400 	.word	0x40020400
 8004f78:	40020800 	.word	0x40020800
 8004f7c:	40020c00 	.word	0x40020c00
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40021400 	.word	0x40021400
 8004f88:	40021800 	.word	0x40021800
 8004f8c:	40021c00 	.word	0x40021c00
 8004f90:	40013c00 	.word	0x40013c00

08004f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fa4:	787b      	ldrb	r3, [r7, #1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fb0:	e003      	b.n	8004fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	041a      	lsls	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	619a      	str	r2, [r3, #24]
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e12b      	b.n	8005232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fd fb66 	bl	80026c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2224      	movs	r2, #36	; 0x24
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800501a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800502a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800502c:	f000 fe9e 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8005030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4a81      	ldr	r2, [pc, #516]	; (800523c <HAL_I2C_Init+0x274>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d807      	bhi.n	800504c <HAL_I2C_Init+0x84>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a80      	ldr	r2, [pc, #512]	; (8005240 <HAL_I2C_Init+0x278>)
 8005040:	4293      	cmp	r3, r2
 8005042:	bf94      	ite	ls
 8005044:	2301      	movls	r3, #1
 8005046:	2300      	movhi	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e006      	b.n	800505a <HAL_I2C_Init+0x92>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4a7d      	ldr	r2, [pc, #500]	; (8005244 <HAL_I2C_Init+0x27c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	bf94      	ite	ls
 8005054:	2301      	movls	r3, #1
 8005056:	2300      	movhi	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0e7      	b.n	8005232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a78      	ldr	r2, [pc, #480]	; (8005248 <HAL_I2C_Init+0x280>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	0c9b      	lsrs	r3, r3, #18
 800506c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4a6a      	ldr	r2, [pc, #424]	; (800523c <HAL_I2C_Init+0x274>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d802      	bhi.n	800509c <HAL_I2C_Init+0xd4>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	3301      	adds	r3, #1
 800509a:	e009      	b.n	80050b0 <HAL_I2C_Init+0xe8>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	4a69      	ldr	r2, [pc, #420]	; (800524c <HAL_I2C_Init+0x284>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	099b      	lsrs	r3, r3, #6
 80050ae:	3301      	adds	r3, #1
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	495c      	ldr	r1, [pc, #368]	; (800523c <HAL_I2C_Init+0x274>)
 80050cc:	428b      	cmp	r3, r1
 80050ce:	d819      	bhi.n	8005104 <HAL_I2C_Init+0x13c>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1e59      	subs	r1, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fbb1 f3f3 	udiv	r3, r1, r3
 80050de:	1c59      	adds	r1, r3, #1
 80050e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050e4:	400b      	ands	r3, r1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_I2C_Init+0x138>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1e59      	subs	r1, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f8:	3301      	adds	r3, #1
 80050fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fe:	e051      	b.n	80051a4 <HAL_I2C_Init+0x1dc>
 8005100:	2304      	movs	r3, #4
 8005102:	e04f      	b.n	80051a4 <HAL_I2C_Init+0x1dc>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d111      	bne.n	8005130 <HAL_I2C_Init+0x168>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1e58      	subs	r0, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	440b      	add	r3, r1
 800511a:	fbb0 f3f3 	udiv	r3, r0, r3
 800511e:	3301      	adds	r3, #1
 8005120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	e012      	b.n	8005156 <HAL_I2C_Init+0x18e>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1e58      	subs	r0, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6859      	ldr	r1, [r3, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	0099      	lsls	r1, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	fbb0 f3f3 	udiv	r3, r0, r3
 8005146:	3301      	adds	r3, #1
 8005148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_I2C_Init+0x196>
 800515a:	2301      	movs	r3, #1
 800515c:	e022      	b.n	80051a4 <HAL_I2C_Init+0x1dc>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10e      	bne.n	8005184 <HAL_I2C_Init+0x1bc>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1e58      	subs	r0, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	440b      	add	r3, r1
 8005174:	fbb0 f3f3 	udiv	r3, r0, r3
 8005178:	3301      	adds	r3, #1
 800517a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005182:	e00f      	b.n	80051a4 <HAL_I2C_Init+0x1dc>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1e58      	subs	r0, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	0099      	lsls	r1, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	fbb0 f3f3 	udiv	r3, r0, r3
 800519a:	3301      	adds	r3, #1
 800519c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	6809      	ldr	r1, [r1, #0]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6911      	ldr	r1, [r2, #16]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68d2      	ldr	r2, [r2, #12]
 80051de:	4311      	orrs	r1, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	000186a0 	.word	0x000186a0
 8005240:	001e847f 	.word	0x001e847f
 8005244:	003d08ff 	.word	0x003d08ff
 8005248:	431bde83 	.word	0x431bde83
 800524c:	10624dd3 	.word	0x10624dd3

08005250 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005252:	b08f      	sub	sp, #60	; 0x3c
 8005254:	af0a      	add	r7, sp, #40	; 0x28
 8005256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e10f      	b.n	8005482 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fd fca9 	bl	8002bd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2203      	movs	r2, #3
 8005286:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 faf0 	bl	8007886 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	687e      	ldr	r6, [r7, #4]
 80052ae:	466d      	mov	r5, sp
 80052b0:	f106 0410 	add.w	r4, r6, #16
 80052b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80052c4:	1d33      	adds	r3, r6, #4
 80052c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052c8:	6838      	ldr	r0, [r7, #0]
 80052ca:	f002 fa7b 	bl	80077c4 <USB_CoreInit>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0d0      	b.n	8005482 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f002 fade 	bl	80078a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	e04a      	b.n	8005388 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	333d      	adds	r3, #61	; 0x3d
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	333c      	adds	r3, #60	; 0x3c
 8005316:	7bfa      	ldrb	r2, [r7, #15]
 8005318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	b298      	uxth	r0, r3
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3344      	adds	r3, #68	; 0x44
 800532e:	4602      	mov	r2, r0
 8005330:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3340      	adds	r3, #64	; 0x40
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	3348      	adds	r3, #72	; 0x48
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800535a:	7bfa      	ldrb	r2, [r7, #15]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	334c      	adds	r3, #76	; 0x4c
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800536e:	7bfa      	ldrb	r2, [r7, #15]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	3354      	adds	r3, #84	; 0x54
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	3301      	adds	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	7bfa      	ldrb	r2, [r7, #15]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	d3af      	bcc.n	80052f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	73fb      	strb	r3, [r7, #15]
 8005396:	e044      	b.n	8005422 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053ae:	7bfa      	ldrb	r2, [r7, #15]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80053c0:	7bfa      	ldrb	r2, [r7, #15]
 80053c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053c4:	7bfa      	ldrb	r2, [r7, #15]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053da:	7bfa      	ldrb	r2, [r7, #15]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053f0:	7bfa      	ldrb	r2, [r7, #15]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005406:	7bfa      	ldrb	r2, [r7, #15]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	3301      	adds	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
 8005422:	7bfa      	ldrb	r2, [r7, #15]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d3b5      	bcc.n	8005398 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	687e      	ldr	r6, [r7, #4]
 8005434:	466d      	mov	r5, sp
 8005436:	f106 0410 	add.w	r4, r6, #16
 800543a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800543c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800543e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005446:	e885 0003 	stmia.w	r5, {r0, r1}
 800544a:	1d33      	adds	r3, r6, #4
 800544c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800544e:	6838      	ldr	r0, [r7, #0]
 8005450:	f002 fa76 	bl	8007940 <USB_DevInit>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e00d      	b.n	8005482 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f002 fc41 	bl	8007d02 <USB_DevDisconnect>

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800548c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e267      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d075      	beq.n	8005596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054aa:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b6:	4b85      	ldr	r3, [pc, #532]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d112      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c2:	4b82      	ldr	r3, [pc, #520]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ce:	d10b      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	4b7e      	ldr	r3, [pc, #504]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05b      	beq.n	8005594 <HAL_RCC_OscConfig+0x108>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d157      	bne.n	8005594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e242      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x74>
 80054f2:	4b76      	ldr	r3, [pc, #472]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a75      	ldr	r2, [pc, #468]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x98>
 800550a:	4b70      	ldr	r3, [pc, #448]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6f      	ldr	r2, [pc, #444]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6c      	ldr	r2, [pc, #432]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005524:	4b69      	ldr	r3, [pc, #420]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a68      	ldr	r2, [pc, #416]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b66      	ldr	r3, [pc, #408]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a65      	ldr	r2, [pc, #404]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fd fd08 	bl	8002f58 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800554c:	f7fd fd04 	bl	8002f58 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e207      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b5b      	ldr	r3, [pc, #364]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0xc0>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fd fcf4 	bl	8002f58 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005574:	f7fd fcf0 	bl	8002f58 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1f3      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005586:	4b51      	ldr	r3, [pc, #324]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0xe8>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055a2:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ae:	4b47      	ldr	r3, [pc, #284]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d11c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ba:	4b44      	ldr	r3, [pc, #272]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e1c7      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055de:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4937      	ldr	r1, [pc, #220]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f2:	e03a      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fc:	4b34      	ldr	r3, [pc, #208]	; (80056d0 <HAL_RCC_OscConfig+0x244>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fd fca9 	bl	8002f58 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560a:	f7fd fca5 	bl	8002f58 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e1a8      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4925      	ldr	r1, [pc, #148]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCC_OscConfig+0x244>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fd fc88 	bl	8002f58 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564c:	f7fd fc84 	bl	8002f58 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e187      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d036      	beq.n	80056e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <HAL_RCC_OscConfig+0x248>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fd fc68 	bl	8002f58 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568c:	f7fd fc64 	bl	8002f58 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e167      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x200>
 80056aa:	e01b      	b.n	80056e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_OscConfig+0x248>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fd fc51 	bl	8002f58 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b8:	e00e      	b.n	80056d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fd fc4d 	bl	8002f58 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d907      	bls.n	80056d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e150      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	42470000 	.word	0x42470000
 80056d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ea      	bne.n	80056ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8097 	beq.w	8005820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b81      	ldr	r3, [pc, #516]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	4b7d      	ldr	r3, [pc, #500]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	4a7c      	ldr	r2, [pc, #496]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	; 0x40
 8005712:	4b7a      	ldr	r3, [pc, #488]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b77      	ldr	r3, [pc, #476]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d118      	bne.n	8005760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b74      	ldr	r3, [pc, #464]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a73      	ldr	r2, [pc, #460]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fd fc0d 	bl	8002f58 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fd fc09 	bl	8002f58 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e10c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <HAL_RCC_OscConfig+0x2ea>
 8005768:	4b64      	ldr	r3, [pc, #400]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a63      	ldr	r2, [pc, #396]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
 8005774:	e01c      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b05      	cmp	r3, #5
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x30c>
 800577e:	4b5f      	ldr	r3, [pc, #380]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a5e      	ldr	r2, [pc, #376]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a5b      	ldr	r2, [pc, #364]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	6713      	str	r3, [r2, #112]	; 0x70
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005798:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4a57      	ldr	r2, [pc, #348]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70
 80057a4:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	4a54      	ldr	r2, [pc, #336]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057aa:	f023 0304 	bic.w	r3, r3, #4
 80057ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fd fbce 	bl	8002f58 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fd fbca 	bl	8002f58 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0cb      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCC_OscConfig+0x334>
 80057e2:	e014      	b.n	800580e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e4:	f7fd fbb8 	bl	8002f58 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fd fbb4 	bl	8002f58 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0b5      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005802:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005814:	4b39      	ldr	r3, [pc, #228]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	4a38      	ldr	r2, [pc, #224]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a1 	beq.w	800596c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582a:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d05c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d141      	bne.n	80058c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b31      	ldr	r3, [pc, #196]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fd fb88 	bl	8002f58 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fd fb84 	bl	8002f58 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e087      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b27      	ldr	r3, [pc, #156]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	3b01      	subs	r3, #1
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	491b      	ldr	r1, [pc, #108]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fd fb5d 	bl	8002f58 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fd fb59 	bl	8002f58 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e05c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x416>
 80058c0:	e054      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd fb46 	bl	8002f58 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fd fb42 	bl	8002f58 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e045      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x444>
 80058ee:	e03d      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e038      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80058fc:	40023800 	.word	0x40023800
 8005900:	40007000 	.word	0x40007000
 8005904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005908:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <HAL_RCC_OscConfig+0x4ec>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d028      	beq.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d121      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11a      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800593e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0cc      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b68      	ldr	r3, [pc, #416]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d90c      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b65      	ldr	r3, [pc, #404]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b63      	ldr	r3, [pc, #396]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0b8      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d020      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d0:	4b59      	ldr	r3, [pc, #356]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e8:	4b53      	ldr	r3, [pc, #332]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a52      	ldr	r2, [pc, #328]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b50      	ldr	r3, [pc, #320]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	494d      	ldr	r1, [pc, #308]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d044      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	4b47      	ldr	r3, [pc, #284]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d119      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d003      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e067      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 0203 	bic.w	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4934      	ldr	r1, [pc, #208]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a6c:	f7fd fa74 	bl	8002f58 <HAL_GetTick>
 8005a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a74:	f7fd fa70 	bl	8002f58 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 020c 	and.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1eb      	bne.n	8005a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d20c      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e032      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4916      	ldr	r1, [pc, #88]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	490e      	ldr	r1, [pc, #56]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b02:	f000 f821 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	490a      	ldr	r1, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	5ccb      	ldrb	r3, [r1, r3]
 8005b16:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1a:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_RCC_ClockConfig+0x1c8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fd f8b0 	bl	8002c88 <HAL_InitTick>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40023c00 	.word	0x40023c00
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800c164 	.word	0x0800c164
 8005b40:	20000000 	.word	0x20000000
 8005b44:	20000004 	.word	0x20000004

08005b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b094      	sub	sp, #80	; 0x50
 8005b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	2300      	movs	r3, #0
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	2300      	movs	r3, #0
 8005b5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b60:	4b79      	ldr	r3, [pc, #484]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d00d      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x40>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	f200 80e1 	bhi.w	8005d34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x34>
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d003      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7a:	e0db      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4b73      	ldr	r3, [pc, #460]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b80:	e0db      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b82:	4b73      	ldr	r3, [pc, #460]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b86:	e0d8      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b88:	4b6f      	ldr	r3, [pc, #444]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b92:	4b6d      	ldr	r3, [pc, #436]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d063      	beq.n	8005c66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	f04f 0000 	mov.w	r0, #0
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	0159      	lsls	r1, r3, #5
 8005bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bcc:	0150      	lsls	r0, r2, #5
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	1a51      	subs	r1, r2, r1
 8005bd6:	6139      	str	r1, [r7, #16]
 8005bd8:	4629      	mov	r1, r5
 8005bda:	eb63 0301 	sbc.w	r3, r3, r1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bec:	4659      	mov	r1, fp
 8005bee:	018b      	lsls	r3, r1, #6
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	018a      	lsls	r2, r1, #6
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	ebb2 0801 	subs.w	r8, r2, r1
 8005c00:	4659      	mov	r1, fp
 8005c02:	eb63 0901 	sbc.w	r9, r3, r1
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1a:	4690      	mov	r8, r2
 8005c1c:	4699      	mov	r9, r3
 8005c1e:	4623      	mov	r3, r4
 8005c20:	eb18 0303 	adds.w	r3, r8, r3
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	462b      	mov	r3, r5
 8005c28:	eb49 0303 	adc.w	r3, r9, r3
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	024b      	lsls	r3, r1, #9
 8005c3e:	4621      	mov	r1, r4
 8005c40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c44:	4621      	mov	r1, r4
 8005c46:	024a      	lsls	r2, r1, #9
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4e:	2200      	movs	r2, #0
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c58:	f7fa fed8 	bl	8000a0c <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c64:	e058      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c66:	4b38      	ldr	r3, [pc, #224]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	099b      	lsrs	r3, r3, #6
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	4611      	mov	r1, r2
 8005c72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	0159      	lsls	r1, r3, #5
 8005c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c92:	0150      	lsls	r0, r2, #5
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4641      	mov	r1, r8
 8005c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8005cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	00eb      	lsls	r3, r5, #3
 8005cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cce:	00e2      	lsls	r2, r4, #3
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	4643      	mov	r3, r8
 8005cd6:	18e3      	adds	r3, r4, r3
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	464b      	mov	r3, r9
 8005cdc:	eb45 0303 	adc.w	r3, r5, r3
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cee:	4629      	mov	r1, r5
 8005cf0:	028b      	lsls	r3, r1, #10
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	028a      	lsls	r2, r1, #10
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	2200      	movs	r2, #0
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	61fa      	str	r2, [r7, #28]
 8005d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0c:	f7fa fe7e 	bl	8000a0c <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3750      	adds	r7, #80	; 0x50
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	00f42400 	.word	0x00f42400
 8005d50:	007a1200 	.word	0x007a1200

08005d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20000000 	.word	0x20000000

08005d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d70:	f7ff fff0 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0a9b      	lsrs	r3, r3, #10
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4903      	ldr	r1, [pc, #12]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	0800c174 	.word	0x0800c174

08005d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d98:	f7ff ffdc 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	0b5b      	lsrs	r3, r3, #13
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	4903      	ldr	r1, [pc, #12]	; (8005db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40023800 	.word	0x40023800
 8005db8:	0800c174 	.word	0x0800c174

08005dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	220f      	movs	r2, #15
 8005dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <HAL_RCC_GetClockConfig+0x5c>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f003 0203 	and.w	r2, r3, #3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <HAL_RCC_GetClockConfig+0x5c>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <HAL_RCC_GetClockConfig+0x5c>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <HAL_RCC_GetClockConfig+0x5c>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <HAL_RCC_GetClockConfig+0x60>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0207 	and.w	r2, r3, #7
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	40023c00 	.word	0x40023c00

08005e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e041      	b.n	8005eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fc fc82 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f000 fdfc 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d001      	beq.n	8005ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e046      	b.n	8005f66 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <HAL_TIM_Base_Start+0xb4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d022      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef2:	d01d      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <HAL_TIM_Base_Start+0xb8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d018      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <HAL_TIM_Base_Start+0xbc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <HAL_TIM_Base_Start+0xc0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00e      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1b      	ldr	r2, [pc, #108]	; (8005f84 <HAL_TIM_Base_Start+0xc4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d009      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <HAL_TIM_Base_Start+0xc8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a18      	ldr	r2, [pc, #96]	; (8005f8c <HAL_TIM_Base_Start+0xcc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d111      	bne.n	8005f54 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b06      	cmp	r3, #6
 8005f40:	d010      	beq.n	8005f64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f52:	e007      	b.n	8005f64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40010400 	.word	0x40010400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40001800 	.word	0x40001800

08005f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d001      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e04e      	b.n	8006046 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a23      	ldr	r2, [pc, #140]	; (8006054 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd2:	d01d      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1f      	ldr	r2, [pc, #124]	; (8006058 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1e      	ldr	r2, [pc, #120]	; (800605c <HAL_TIM_Base_Start_IT+0xcc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1c      	ldr	r2, [pc, #112]	; (8006060 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1b      	ldr	r2, [pc, #108]	; (8006064 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a19      	ldr	r2, [pc, #100]	; (8006068 <HAL_TIM_Base_Start_IT+0xd8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a18      	ldr	r2, [pc, #96]	; (800606c <HAL_TIM_Base_Start_IT+0xdc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d111      	bne.n	8006034 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b06      	cmp	r3, #6
 8006020:	d010      	beq.n	8006044 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006032:	e007      	b.n	8006044 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800
 8006060:	40000c00 	.word	0x40000c00
 8006064:	40010400 	.word	0x40010400
 8006068:	40014000 	.word	0x40014000
 800606c:	40001800 	.word	0x40001800

08006070 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e041      	b.n	8006106 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fc fc2c 	bl	80028f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f000 fcd4 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e041      	b.n	80061a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f839 	bl	80061ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f000 fc85 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <HAL_TIM_PWM_Start+0x24>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e022      	b.n	800622a <HAL_TIM_PWM_Start+0x6a>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d109      	bne.n	80061fe <HAL_TIM_PWM_Start+0x3e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	bf14      	ite	ne
 80061f6:	2301      	movne	r3, #1
 80061f8:	2300      	moveq	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	e015      	b.n	800622a <HAL_TIM_PWM_Start+0x6a>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b08      	cmp	r3, #8
 8006202:	d109      	bne.n	8006218 <HAL_TIM_PWM_Start+0x58>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	e008      	b.n	800622a <HAL_TIM_PWM_Start+0x6a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e07c      	b.n	800632c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d104      	bne.n	8006242 <HAL_TIM_PWM_Start+0x82>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006240:	e013      	b.n	800626a <HAL_TIM_PWM_Start+0xaa>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b04      	cmp	r3, #4
 8006246:	d104      	bne.n	8006252 <HAL_TIM_PWM_Start+0x92>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006250:	e00b      	b.n	800626a <HAL_TIM_PWM_Start+0xaa>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b08      	cmp	r3, #8
 8006256:	d104      	bne.n	8006262 <HAL_TIM_PWM_Start+0xa2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006260:	e003      	b.n	800626a <HAL_TIM_PWM_Start+0xaa>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2202      	movs	r2, #2
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2201      	movs	r2, #1
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fedc 	bl	8007030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a2d      	ldr	r2, [pc, #180]	; (8006334 <HAL_TIM_PWM_Start+0x174>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d004      	beq.n	800628c <HAL_TIM_PWM_Start+0xcc>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a2c      	ldr	r2, [pc, #176]	; (8006338 <HAL_TIM_PWM_Start+0x178>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d101      	bne.n	8006290 <HAL_TIM_PWM_Start+0xd0>
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <HAL_TIM_PWM_Start+0xd2>
 8006290:	2300      	movs	r3, #0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a22      	ldr	r2, [pc, #136]	; (8006334 <HAL_TIM_PWM_Start+0x174>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d022      	beq.n	80062f6 <HAL_TIM_PWM_Start+0x136>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d01d      	beq.n	80062f6 <HAL_TIM_PWM_Start+0x136>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1f      	ldr	r2, [pc, #124]	; (800633c <HAL_TIM_PWM_Start+0x17c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d018      	beq.n	80062f6 <HAL_TIM_PWM_Start+0x136>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <HAL_TIM_PWM_Start+0x180>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_TIM_PWM_Start+0x136>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1c      	ldr	r2, [pc, #112]	; (8006344 <HAL_TIM_PWM_Start+0x184>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_TIM_PWM_Start+0x136>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a16      	ldr	r2, [pc, #88]	; (8006338 <HAL_TIM_PWM_Start+0x178>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_TIM_PWM_Start+0x136>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a18      	ldr	r2, [pc, #96]	; (8006348 <HAL_TIM_PWM_Start+0x188>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_TIM_PWM_Start+0x136>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIM_PWM_Start+0x18c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d111      	bne.n	800631a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b06      	cmp	r3, #6
 8006306:	d010      	beq.n	800632a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006318:	e007      	b.n	800632a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0201 	orr.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40010000 	.word	0x40010000
 8006338:	40010400 	.word	0x40010400
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40014000 	.word	0x40014000
 800634c:	40001800 	.word	0x40001800

08006350 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fe64 	bl	8007030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2e      	ldr	r2, [pc, #184]	; (8006428 <HAL_TIM_PWM_Stop+0xd8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d004      	beq.n	800637c <HAL_TIM_PWM_Stop+0x2c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a2d      	ldr	r2, [pc, #180]	; (800642c <HAL_TIM_PWM_Stop+0xdc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d101      	bne.n	8006380 <HAL_TIM_PWM_Stop+0x30>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <HAL_TIM_PWM_Stop+0x32>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d017      	beq.n	80063b6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6a1a      	ldr	r2, [r3, #32]
 800638c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006390:	4013      	ands	r3, r2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10f      	bne.n	80063b6 <HAL_TIM_PWM_Stop+0x66>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	f240 4344 	movw	r3, #1092	; 0x444
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_TIM_PWM_Stop+0x66>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6a1a      	ldr	r2, [r3, #32]
 80063bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10f      	bne.n	80063e6 <HAL_TIM_PWM_Stop+0x96>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	f240 4344 	movw	r3, #1092	; 0x444
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_PWM_Stop+0x96>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_PWM_Stop+0xa6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	e013      	b.n	800641e <HAL_TIM_PWM_Stop+0xce>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_PWM_Stop+0xb6>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006404:	e00b      	b.n	800641e <HAL_TIM_PWM_Stop+0xce>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d104      	bne.n	8006416 <HAL_TIM_PWM_Stop+0xc6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006414:	e003      	b.n	800641e <HAL_TIM_PWM_Stop+0xce>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40010000 	.word	0x40010000
 800642c:	40010400 	.word	0x40010400

08006430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0202 	mvn.w	r2, #2
 800645c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fad3 	bl	8006a1e <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fac5 	bl	8006a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fad6 	bl	8006a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b04      	cmp	r3, #4
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0204 	mvn.w	r2, #4
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 faa9 	bl	8006a1e <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa9b 	bl	8006a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 faac 	bl	8006a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0208 	mvn.w	r2, #8
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2204      	movs	r2, #4
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa7f 	bl	8006a1e <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fa71 	bl	8006a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fa82 	bl	8006a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b10      	cmp	r3, #16
 8006540:	d122      	bne.n	8006588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b10      	cmp	r3, #16
 800654e:	d11b      	bne.n	8006588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0210 	mvn.w	r2, #16
 8006558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2208      	movs	r2, #8
 800655e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa55 	bl	8006a1e <HAL_TIM_IC_CaptureCallback>
 8006574:	e005      	b.n	8006582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa47 	bl	8006a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa58 	bl	8006a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10e      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0201 	mvn.w	r2, #1
 80065ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fb fe2e 	bl	8002210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d10e      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fe26 	bl	800722c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d10e      	bne.n	800660c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d107      	bne.n	800660c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa1d 	bl	8006a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b20      	cmp	r3, #32
 8006618:	d10e      	bne.n	8006638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b20      	cmp	r3, #32
 8006626:	d107      	bne.n	8006638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0220 	mvn.w	r2, #32
 8006630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fdf0 	bl	8007218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_TIM_OC_ConfigChannel+0x1e>
 800665a:	2302      	movs	r3, #2
 800665c:	e048      	b.n	80066f0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b0c      	cmp	r3, #12
 800666a:	d839      	bhi.n	80066e0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <HAL_TIM_OC_ConfigChannel+0x34>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	080066a9 	.word	0x080066a9
 8006678:	080066e1 	.word	0x080066e1
 800667c:	080066e1 	.word	0x080066e1
 8006680:	080066e1 	.word	0x080066e1
 8006684:	080066b7 	.word	0x080066b7
 8006688:	080066e1 	.word	0x080066e1
 800668c:	080066e1 	.word	0x080066e1
 8006690:	080066e1 	.word	0x080066e1
 8006694:	080066c5 	.word	0x080066c5
 8006698:	080066e1 	.word	0x080066e1
 800669c:	080066e1 	.word	0x080066e1
 80066a0:	080066e1 	.word	0x080066e1
 80066a4:	080066d3 	.word	0x080066d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fa74 	bl	8006b9c <TIM_OC1_SetConfig>
      break;
 80066b4:	e017      	b.n	80066e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fadd 	bl	8006c7c <TIM_OC2_SetConfig>
      break;
 80066c2:	e010      	b.n	80066e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fb4c 	bl	8006d68 <TIM_OC3_SetConfig>
      break;
 80066d0:	e009      	b.n	80066e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fbb9 	bl	8006e50 <TIM_OC4_SetConfig>
      break;
 80066de:	e002      	b.n	80066e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	75fb      	strb	r3, [r7, #23]
      break;
 80066e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006712:	2302      	movs	r3, #2
 8006714:	e0ae      	b.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b0c      	cmp	r3, #12
 8006722:	f200 809f 	bhi.w	8006864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006761 	.word	0x08006761
 8006730:	08006865 	.word	0x08006865
 8006734:	08006865 	.word	0x08006865
 8006738:	08006865 	.word	0x08006865
 800673c:	080067a1 	.word	0x080067a1
 8006740:	08006865 	.word	0x08006865
 8006744:	08006865 	.word	0x08006865
 8006748:	08006865 	.word	0x08006865
 800674c:	080067e3 	.word	0x080067e3
 8006750:	08006865 	.word	0x08006865
 8006754:	08006865 	.word	0x08006865
 8006758:	08006865 	.word	0x08006865
 800675c:	08006823 	.word	0x08006823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fa18 	bl	8006b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0208 	orr.w	r2, r2, #8
 800677a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0204 	bic.w	r2, r2, #4
 800678a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6999      	ldr	r1, [r3, #24]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	619a      	str	r2, [r3, #24]
      break;
 800679e:	e064      	b.n	800686a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fa68 	bl	8006c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6999      	ldr	r1, [r3, #24]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	021a      	lsls	r2, r3, #8
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	619a      	str	r2, [r3, #24]
      break;
 80067e0:	e043      	b.n	800686a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fabd 	bl	8006d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0208 	orr.w	r2, r2, #8
 80067fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0204 	bic.w	r2, r2, #4
 800680c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69d9      	ldr	r1, [r3, #28]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	61da      	str	r2, [r3, #28]
      break;
 8006820:	e023      	b.n	800686a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fb11 	bl	8006e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69d9      	ldr	r1, [r3, #28]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	021a      	lsls	r2, r3, #8
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	61da      	str	r2, [r3, #28]
      break;
 8006862:	e002      	b.n	800686a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	75fb      	strb	r3, [r7, #23]
      break;
 8006868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_TIM_ConfigClockSource+0x1c>
 8006894:	2302      	movs	r3, #2
 8006896:	e0b4      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x186>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d0:	d03e      	beq.n	8006950 <HAL_TIM_ConfigClockSource+0xd4>
 80068d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d6:	f200 8087 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	f000 8086 	beq.w	80069ee <HAL_TIM_ConfigClockSource+0x172>
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e6:	d87f      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
 80068e8:	2b70      	cmp	r3, #112	; 0x70
 80068ea:	d01a      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0xa6>
 80068ec:	2b70      	cmp	r3, #112	; 0x70
 80068ee:	d87b      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d050      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x11a>
 80068f4:	2b60      	cmp	r3, #96	; 0x60
 80068f6:	d877      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
 80068f8:	2b50      	cmp	r3, #80	; 0x50
 80068fa:	d03c      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0xfa>
 80068fc:	2b50      	cmp	r3, #80	; 0x50
 80068fe:	d873      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d058      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d86f      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006908:	2b30      	cmp	r3, #48	; 0x30
 800690a:	d064      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15a>
 800690c:	2b30      	cmp	r3, #48	; 0x30
 800690e:	d86b      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006910:	2b20      	cmp	r3, #32
 8006912:	d060      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006914:	2b20      	cmp	r3, #32
 8006916:	d867      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d05c      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15a>
 800691c:	2b10      	cmp	r3, #16
 800691e:	d05a      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006920:	e062      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6899      	ldr	r1, [r3, #8]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f000 fb5d 	bl	8006ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	609a      	str	r2, [r3, #8]
      break;
 800694e:	e04f      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6899      	ldr	r1, [r3, #8]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f000 fb46 	bl	8006ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006972:	609a      	str	r2, [r3, #8]
      break;
 8006974:	e03c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6859      	ldr	r1, [r3, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	461a      	mov	r2, r3
 8006984:	f000 faba 	bl	8006efc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2150      	movs	r1, #80	; 0x50
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fb13 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006994:	e02c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6859      	ldr	r1, [r3, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f000 fad9 	bl	8006f5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2160      	movs	r1, #96	; 0x60
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fb03 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 80069b4:	e01c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f000 fa9a 	bl	8006efc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2140      	movs	r1, #64	; 0x40
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 faf3 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 80069d4:	e00c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f000 faea 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 80069e6:	e003      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      break;
 80069ec:	e000      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a40      	ldr	r2, [pc, #256]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d00f      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a3d      	ldr	r2, [pc, #244]	; (8006b74 <TIM_Base_SetConfig+0x118>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a3c      	ldr	r2, [pc, #240]	; (8006b78 <TIM_Base_SetConfig+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a3b      	ldr	r2, [pc, #236]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a3a      	ldr	r2, [pc, #232]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d108      	bne.n	8006aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2f      	ldr	r2, [pc, #188]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d02b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abc:	d027      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2c      	ldr	r2, [pc, #176]	; (8006b74 <TIM_Base_SetConfig+0x118>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d023      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <TIM_Base_SetConfig+0x11c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01f      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a29      	ldr	r2, [pc, #164]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d017      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a28      	ldr	r2, [pc, #160]	; (8006b84 <TIM_Base_SetConfig+0x128>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a27      	ldr	r2, [pc, #156]	; (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00f      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a26      	ldr	r2, [pc, #152]	; (8006b8c <TIM_Base_SetConfig+0x130>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a25      	ldr	r2, [pc, #148]	; (8006b90 <TIM_Base_SetConfig+0x134>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d007      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a24      	ldr	r2, [pc, #144]	; (8006b94 <TIM_Base_SetConfig+0x138>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a23      	ldr	r2, [pc, #140]	; (8006b98 <TIM_Base_SetConfig+0x13c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d108      	bne.n	8006b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a0c      	ldr	r2, [pc, #48]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d103      	bne.n	8006b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	615a      	str	r2, [r3, #20]
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40010400 	.word	0x40010400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800
 8006b90:	40001800 	.word	0x40001800
 8006b94:	40001c00 	.word	0x40001c00
 8006b98:	40002000 	.word	0x40002000

08006b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 0302 	bic.w	r3, r3, #2
 8006be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <TIM_OC1_SetConfig+0xd8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_OC1_SetConfig+0x64>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <TIM_OC1_SetConfig+0xdc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d10c      	bne.n	8006c1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0308 	bic.w	r3, r3, #8
 8006c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f023 0304 	bic.w	r3, r3, #4
 8006c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <TIM_OC1_SetConfig+0xd8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_OC1_SetConfig+0x8e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <TIM_OC1_SetConfig+0xdc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d111      	bne.n	8006c4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	621a      	str	r2, [r3, #32]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	40010000 	.word	0x40010000
 8006c78:	40010400 	.word	0x40010400

08006c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	f023 0210 	bic.w	r2, r3, #16
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 0320 	bic.w	r3, r3, #32
 8006cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <TIM_OC2_SetConfig+0xe4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_OC2_SetConfig+0x68>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a21      	ldr	r2, [pc, #132]	; (8006d64 <TIM_OC2_SetConfig+0xe8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d10d      	bne.n	8006d00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <TIM_OC2_SetConfig+0xe4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_OC2_SetConfig+0x94>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <TIM_OC2_SetConfig+0xe8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d113      	bne.n	8006d38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40010400 	.word	0x40010400

08006d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a21      	ldr	r2, [pc, #132]	; (8006e48 <TIM_OC3_SetConfig+0xe0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC3_SetConfig+0x66>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a20      	ldr	r2, [pc, #128]	; (8006e4c <TIM_OC3_SetConfig+0xe4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d10d      	bne.n	8006dea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <TIM_OC3_SetConfig+0xe0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC3_SetConfig+0x92>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <TIM_OC3_SetConfig+0xe4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d113      	bne.n	8006e22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40010400 	.word	0x40010400

08006e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <TIM_OC4_SetConfig+0xa4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_OC4_SetConfig+0x68>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a11      	ldr	r2, [pc, #68]	; (8006ef8 <TIM_OC4_SetConfig+0xa8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d109      	bne.n	8006ecc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	019b      	lsls	r3, r3, #6
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40010400 	.word	0x40010400

08006efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	f023 0201 	bic.w	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f023 030a 	bic.w	r3, r3, #10
 8006f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b087      	sub	sp, #28
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f023 0210 	bic.w	r2, r3, #16
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	031b      	lsls	r3, r3, #12
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f043 0307 	orr.w	r3, r3, #7
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	609a      	str	r2, [r3, #8]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800700a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	021a      	lsls	r2, r3, #8
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	431a      	orrs	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4313      	orrs	r3, r2
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	609a      	str	r2, [r3, #8]
}
 8007024:	bf00      	nop
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2201      	movs	r2, #1
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	43db      	mvns	r3, r3
 8007052:	401a      	ands	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1a      	ldr	r2, [r3, #32]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	fa01 f303 	lsl.w	r3, r1, r3
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007090:	2302      	movs	r3, #2
 8007092:	e05a      	b.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a21      	ldr	r2, [pc, #132]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d022      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e0:	d01d      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1d      	ldr	r2, [pc, #116]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d018      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1a      	ldr	r2, [pc, #104]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00e      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a18      	ldr	r2, [pc, #96]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a17      	ldr	r2, [pc, #92]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d004      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a15      	ldr	r2, [pc, #84]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d10c      	bne.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4313      	orrs	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40010000 	.word	0x40010000
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40010400 	.word	0x40010400
 800716c:	40014000 	.word	0x40014000
 8007170:	40001800 	.word	0x40001800

08007174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800718c:	2302      	movs	r3, #2
 800718e:	e03d      	b.n	800720c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e03f      	b.n	80072d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fb fc6c 	bl	8002b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2224      	movs	r2, #36	; 0x24
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f829 	bl	80072dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695a      	ldr	r2, [r3, #20]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e0:	b0c0      	sub	sp, #256	; 0x100
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f8:	68d9      	ldr	r1, [r3, #12]
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	ea40 0301 	orr.w	r3, r0, r1
 8007304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	431a      	orrs	r2, r3
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	431a      	orrs	r2, r3
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007334:	f021 010c 	bic.w	r1, r1, #12
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007342:	430b      	orrs	r3, r1
 8007344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007356:	6999      	ldr	r1, [r3, #24]
 8007358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	ea40 0301 	orr.w	r3, r0, r1
 8007362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b8f      	ldr	r3, [pc, #572]	; (80075a8 <UART_SetConfig+0x2cc>)
 800736c:	429a      	cmp	r2, r3
 800736e:	d005      	beq.n	800737c <UART_SetConfig+0xa0>
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b8d      	ldr	r3, [pc, #564]	; (80075ac <UART_SetConfig+0x2d0>)
 8007378:	429a      	cmp	r2, r3
 800737a:	d104      	bne.n	8007386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800737c:	f7fe fd0a 	bl	8005d94 <HAL_RCC_GetPCLK2Freq>
 8007380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007384:	e003      	b.n	800738e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007386:	f7fe fcf1 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 800738a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007398:	f040 810c 	bne.w	80075b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800739c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073ae:	4622      	mov	r2, r4
 80073b0:	462b      	mov	r3, r5
 80073b2:	1891      	adds	r1, r2, r2
 80073b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80073b6:	415b      	adcs	r3, r3
 80073b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073be:	4621      	mov	r1, r4
 80073c0:	eb12 0801 	adds.w	r8, r2, r1
 80073c4:	4629      	mov	r1, r5
 80073c6:	eb43 0901 	adc.w	r9, r3, r1
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073de:	4690      	mov	r8, r2
 80073e0:	4699      	mov	r9, r3
 80073e2:	4623      	mov	r3, r4
 80073e4:	eb18 0303 	adds.w	r3, r8, r3
 80073e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073ec:	462b      	mov	r3, r5
 80073ee:	eb49 0303 	adc.w	r3, r9, r3
 80073f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800740a:	460b      	mov	r3, r1
 800740c:	18db      	adds	r3, r3, r3
 800740e:	653b      	str	r3, [r7, #80]	; 0x50
 8007410:	4613      	mov	r3, r2
 8007412:	eb42 0303 	adc.w	r3, r2, r3
 8007416:	657b      	str	r3, [r7, #84]	; 0x54
 8007418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800741c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007420:	f7f9 faf4 	bl	8000a0c <__aeabi_uldivmod>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4b61      	ldr	r3, [pc, #388]	; (80075b0 <UART_SetConfig+0x2d4>)
 800742a:	fba3 2302 	umull	r2, r3, r3, r2
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	011c      	lsls	r4, r3, #4
 8007432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007436:	2200      	movs	r2, #0
 8007438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800743c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007444:	4642      	mov	r2, r8
 8007446:	464b      	mov	r3, r9
 8007448:	1891      	adds	r1, r2, r2
 800744a:	64b9      	str	r1, [r7, #72]	; 0x48
 800744c:	415b      	adcs	r3, r3
 800744e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007454:	4641      	mov	r1, r8
 8007456:	eb12 0a01 	adds.w	sl, r2, r1
 800745a:	4649      	mov	r1, r9
 800745c:	eb43 0b01 	adc.w	fp, r3, r1
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800746c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007474:	4692      	mov	sl, r2
 8007476:	469b      	mov	fp, r3
 8007478:	4643      	mov	r3, r8
 800747a:	eb1a 0303 	adds.w	r3, sl, r3
 800747e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007482:	464b      	mov	r3, r9
 8007484:	eb4b 0303 	adc.w	r3, fp, r3
 8007488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800749c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074a0:	460b      	mov	r3, r1
 80074a2:	18db      	adds	r3, r3, r3
 80074a4:	643b      	str	r3, [r7, #64]	; 0x40
 80074a6:	4613      	mov	r3, r2
 80074a8:	eb42 0303 	adc.w	r3, r2, r3
 80074ac:	647b      	str	r3, [r7, #68]	; 0x44
 80074ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074b6:	f7f9 faa9 	bl	8000a0c <__aeabi_uldivmod>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	4b3b      	ldr	r3, [pc, #236]	; (80075b0 <UART_SetConfig+0x2d4>)
 80074c2:	fba3 2301 	umull	r2, r3, r3, r1
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	2264      	movs	r2, #100	; 0x64
 80074ca:	fb02 f303 	mul.w	r3, r2, r3
 80074ce:	1acb      	subs	r3, r1, r3
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074d6:	4b36      	ldr	r3, [pc, #216]	; (80075b0 <UART_SetConfig+0x2d4>)
 80074d8:	fba3 2302 	umull	r2, r3, r3, r2
 80074dc:	095b      	lsrs	r3, r3, #5
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074e4:	441c      	add	r4, r3
 80074e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	1891      	adds	r1, r2, r2
 80074fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007500:	415b      	adcs	r3, r3
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007508:	4641      	mov	r1, r8
 800750a:	1851      	adds	r1, r2, r1
 800750c:	6339      	str	r1, [r7, #48]	; 0x30
 800750e:	4649      	mov	r1, r9
 8007510:	414b      	adcs	r3, r1
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007520:	4659      	mov	r1, fp
 8007522:	00cb      	lsls	r3, r1, #3
 8007524:	4651      	mov	r1, sl
 8007526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800752a:	4651      	mov	r1, sl
 800752c:	00ca      	lsls	r2, r1, #3
 800752e:	4610      	mov	r0, r2
 8007530:	4619      	mov	r1, r3
 8007532:	4603      	mov	r3, r0
 8007534:	4642      	mov	r2, r8
 8007536:	189b      	adds	r3, r3, r2
 8007538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800753c:	464b      	mov	r3, r9
 800753e:	460a      	mov	r2, r1
 8007540:	eb42 0303 	adc.w	r3, r2, r3
 8007544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800755c:	460b      	mov	r3, r1
 800755e:	18db      	adds	r3, r3, r3
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28
 8007562:	4613      	mov	r3, r2
 8007564:	eb42 0303 	adc.w	r3, r2, r3
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800756a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800756e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007572:	f7f9 fa4b 	bl	8000a0c <__aeabi_uldivmod>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <UART_SetConfig+0x2d4>)
 800757c:	fba3 1302 	umull	r1, r3, r3, r2
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	2164      	movs	r1, #100	; 0x64
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	3332      	adds	r3, #50	; 0x32
 800758e:	4a08      	ldr	r2, [pc, #32]	; (80075b0 <UART_SetConfig+0x2d4>)
 8007590:	fba2 2303 	umull	r2, r3, r2, r3
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	f003 0207 	and.w	r2, r3, #7
 800759a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4422      	add	r2, r4
 80075a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075a4:	e105      	b.n	80077b2 <UART_SetConfig+0x4d6>
 80075a6:	bf00      	nop
 80075a8:	40011000 	.word	0x40011000
 80075ac:	40011400 	.word	0x40011400
 80075b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075c6:	4642      	mov	r2, r8
 80075c8:	464b      	mov	r3, r9
 80075ca:	1891      	adds	r1, r2, r2
 80075cc:	6239      	str	r1, [r7, #32]
 80075ce:	415b      	adcs	r3, r3
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
 80075d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075d6:	4641      	mov	r1, r8
 80075d8:	1854      	adds	r4, r2, r1
 80075da:	4649      	mov	r1, r9
 80075dc:	eb43 0501 	adc.w	r5, r3, r1
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	00eb      	lsls	r3, r5, #3
 80075ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ee:	00e2      	lsls	r2, r4, #3
 80075f0:	4614      	mov	r4, r2
 80075f2:	461d      	mov	r5, r3
 80075f4:	4643      	mov	r3, r8
 80075f6:	18e3      	adds	r3, r4, r3
 80075f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075fc:	464b      	mov	r3, r9
 80075fe:	eb45 0303 	adc.w	r3, r5, r3
 8007602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007622:	4629      	mov	r1, r5
 8007624:	008b      	lsls	r3, r1, #2
 8007626:	4621      	mov	r1, r4
 8007628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800762c:	4621      	mov	r1, r4
 800762e:	008a      	lsls	r2, r1, #2
 8007630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007634:	f7f9 f9ea 	bl	8000a0c <__aeabi_uldivmod>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4b60      	ldr	r3, [pc, #384]	; (80077c0 <UART_SetConfig+0x4e4>)
 800763e:	fba3 2302 	umull	r2, r3, r3, r2
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	011c      	lsls	r4, r3, #4
 8007646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	1891      	adds	r1, r2, r2
 800765e:	61b9      	str	r1, [r7, #24]
 8007660:	415b      	adcs	r3, r3
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007668:	4641      	mov	r1, r8
 800766a:	1851      	adds	r1, r2, r1
 800766c:	6139      	str	r1, [r7, #16]
 800766e:	4649      	mov	r1, r9
 8007670:	414b      	adcs	r3, r1
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007680:	4659      	mov	r1, fp
 8007682:	00cb      	lsls	r3, r1, #3
 8007684:	4651      	mov	r1, sl
 8007686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800768a:	4651      	mov	r1, sl
 800768c:	00ca      	lsls	r2, r1, #3
 800768e:	4610      	mov	r0, r2
 8007690:	4619      	mov	r1, r3
 8007692:	4603      	mov	r3, r0
 8007694:	4642      	mov	r2, r8
 8007696:	189b      	adds	r3, r3, r2
 8007698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800769c:	464b      	mov	r3, r9
 800769e:	460a      	mov	r2, r1
 80076a0:	eb42 0303 	adc.w	r3, r2, r3
 80076a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076c0:	4649      	mov	r1, r9
 80076c2:	008b      	lsls	r3, r1, #2
 80076c4:	4641      	mov	r1, r8
 80076c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ca:	4641      	mov	r1, r8
 80076cc:	008a      	lsls	r2, r1, #2
 80076ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076d2:	f7f9 f99b 	bl	8000a0c <__aeabi_uldivmod>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <UART_SetConfig+0x4e4>)
 80076dc:	fba3 1302 	umull	r1, r3, r3, r2
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	2164      	movs	r1, #100	; 0x64
 80076e4:	fb01 f303 	mul.w	r3, r1, r3
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	3332      	adds	r3, #50	; 0x32
 80076ee:	4a34      	ldr	r2, [pc, #208]	; (80077c0 <UART_SetConfig+0x4e4>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076fa:	441c      	add	r4, r3
 80076fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007700:	2200      	movs	r2, #0
 8007702:	673b      	str	r3, [r7, #112]	; 0x70
 8007704:	677a      	str	r2, [r7, #116]	; 0x74
 8007706:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800770a:	4642      	mov	r2, r8
 800770c:	464b      	mov	r3, r9
 800770e:	1891      	adds	r1, r2, r2
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	415b      	adcs	r3, r3
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800771a:	4641      	mov	r1, r8
 800771c:	1851      	adds	r1, r2, r1
 800771e:	6039      	str	r1, [r7, #0]
 8007720:	4649      	mov	r1, r9
 8007722:	414b      	adcs	r3, r1
 8007724:	607b      	str	r3, [r7, #4]
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007732:	4659      	mov	r1, fp
 8007734:	00cb      	lsls	r3, r1, #3
 8007736:	4651      	mov	r1, sl
 8007738:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773c:	4651      	mov	r1, sl
 800773e:	00ca      	lsls	r2, r1, #3
 8007740:	4610      	mov	r0, r2
 8007742:	4619      	mov	r1, r3
 8007744:	4603      	mov	r3, r0
 8007746:	4642      	mov	r2, r8
 8007748:	189b      	adds	r3, r3, r2
 800774a:	66bb      	str	r3, [r7, #104]	; 0x68
 800774c:	464b      	mov	r3, r9
 800774e:	460a      	mov	r2, r1
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	663b      	str	r3, [r7, #96]	; 0x60
 8007760:	667a      	str	r2, [r7, #100]	; 0x64
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800776e:	4649      	mov	r1, r9
 8007770:	008b      	lsls	r3, r1, #2
 8007772:	4641      	mov	r1, r8
 8007774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007778:	4641      	mov	r1, r8
 800777a:	008a      	lsls	r2, r1, #2
 800777c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007780:	f7f9 f944 	bl	8000a0c <__aeabi_uldivmod>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <UART_SetConfig+0x4e4>)
 800778a:	fba3 1302 	umull	r1, r3, r3, r2
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	2164      	movs	r1, #100	; 0x64
 8007792:	fb01 f303 	mul.w	r3, r1, r3
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	3332      	adds	r3, #50	; 0x32
 800779c:	4a08      	ldr	r2, [pc, #32]	; (80077c0 <UART_SetConfig+0x4e4>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	f003 020f 	and.w	r2, r3, #15
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4422      	add	r2, r4
 80077b0:	609a      	str	r2, [r3, #8]
}
 80077b2:	bf00      	nop
 80077b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077b8:	46bd      	mov	sp, r7
 80077ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077be:	bf00      	nop
 80077c0:	51eb851f 	.word	0x51eb851f

080077c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077c4:	b084      	sub	sp, #16
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	f107 001c 	add.w	r0, r7, #28
 80077d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d122      	bne.n	8007822 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d105      	bne.n	8007816 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 faa2 	bl	8007d60 <USB_CoreReset>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	e01a      	b.n	8007858 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa96 	bl	8007d60 <USB_CoreReset>
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
 800784a:	e005      	b.n	8007858 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	2b01      	cmp	r3, #1
 800785c:	d10b      	bne.n	8007876 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f043 0206 	orr.w	r2, r3, #6
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f043 0220 	orr.w	r2, r3, #32
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007882:	b004      	add	sp, #16
 8007884:	4770      	bx	lr

08007886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f023 0201 	bic.w	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d115      	bne.n	80078f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078d6:	2001      	movs	r0, #1
 80078d8:	f7fb fb4a 	bl	8002f70 <HAL_Delay>
      ms++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa2e 	bl	8007d44 <USB_GetMode>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d01e      	beq.n	800792c <USB_SetCurrentMode+0x84>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b31      	cmp	r3, #49	; 0x31
 80078f2:	d9f0      	bls.n	80078d6 <USB_SetCurrentMode+0x2e>
 80078f4:	e01a      	b.n	800792c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d115      	bne.n	8007928 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007908:	2001      	movs	r0, #1
 800790a:	f7fb fb31 	bl	8002f70 <HAL_Delay>
      ms++;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3301      	adds	r3, #1
 8007912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fa15 	bl	8007d44 <USB_GetMode>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <USB_SetCurrentMode+0x84>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b31      	cmp	r3, #49	; 0x31
 8007924:	d9f0      	bls.n	8007908 <USB_SetCurrentMode+0x60>
 8007926:	e001      	b.n	800792c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e005      	b.n	8007938 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b32      	cmp	r3, #50	; 0x32
 8007930:	d101      	bne.n	8007936 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007940:	b084      	sub	sp, #16
 8007942:	b580      	push	{r7, lr}
 8007944:	b086      	sub	sp, #24
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800794e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800795a:	2300      	movs	r3, #0
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	e009      	b.n	8007974 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	3340      	adds	r3, #64	; 0x40
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	2200      	movs	r2, #0
 800796c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	3301      	adds	r3, #1
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b0e      	cmp	r3, #14
 8007978:	d9f2      	bls.n	8007960 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800797a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11c      	bne.n	80079ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800798e:	f043 0302 	orr.w	r3, r3, #2
 8007992:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38
 80079b8:	e00b      	b.n	80079d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079d8:	461a      	mov	r2, r3
 80079da:	2300      	movs	r3, #0
 80079dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e4:	4619      	mov	r1, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ec:	461a      	mov	r2, r3
 80079ee:	680b      	ldr	r3, [r1, #0]
 80079f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d10c      	bne.n	8007a12 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d104      	bne.n	8007a08 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079fe:	2100      	movs	r1, #0
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f965 	bl	8007cd0 <USB_SetDevSpeed>
 8007a06:	e008      	b.n	8007a1a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a08:	2101      	movs	r1, #1
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f960 	bl	8007cd0 <USB_SetDevSpeed>
 8007a10:	e003      	b.n	8007a1a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a12:	2103      	movs	r1, #3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f95b 	bl	8007cd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a1a:	2110      	movs	r1, #16
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f8f3 	bl	8007c08 <USB_FlushTxFifo>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f91f 	bl	8007c70 <USB_FlushRxFifo>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	461a      	mov	r2, r3
 8007a44:	2300      	movs	r3, #0
 8007a46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4e:	461a      	mov	r2, r3
 8007a50:	2300      	movs	r3, #0
 8007a52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	e043      	b.n	8007aee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a7c:	d118      	bne.n	8007ab0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	461a      	mov	r2, r3
 8007a92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	e013      	b.n	8007ac2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	e008      	b.n	8007ac2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abc:	461a      	mov	r2, r3
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ace:	461a      	mov	r2, r3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ae6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	3301      	adds	r3, #1
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d3b7      	bcc.n	8007a66 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	e043      	b.n	8007b84 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b12:	d118      	bne.n	8007b46 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	461a      	mov	r2, r3
 8007b28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e013      	b.n	8007b58 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	e008      	b.n	8007b58 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	461a      	mov	r2, r3
 8007b54:	2300      	movs	r3, #0
 8007b56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b64:	461a      	mov	r2, r3
 8007b66:	2300      	movs	r3, #0
 8007b68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b76:	461a      	mov	r2, r3
 8007b78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	3301      	adds	r3, #1
 8007b82:	613b      	str	r3, [r7, #16]
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d3b7      	bcc.n	8007afc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007bac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d105      	bne.n	8007bc0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f043 0210 	orr.w	r2, r3, #16
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699a      	ldr	r2, [r3, #24]
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <USB_DevInit+0x2c4>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	f043 0208 	orr.w	r2, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d107      	bne.n	8007bf4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bec:	f043 0304 	orr.w	r3, r3, #4
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c00:	b004      	add	sp, #16
 8007c02:	4770      	bx	lr
 8007c04:	803c3800 	.word	0x803c3800

08007c08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <USB_FlushTxFifo+0x64>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d901      	bls.n	8007c28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e01b      	b.n	8007c60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	daf2      	bge.n	8007c16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	019b      	lsls	r3, r3, #6
 8007c38:	f043 0220 	orr.w	r2, r3, #32
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <USB_FlushTxFifo+0x64>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d901      	bls.n	8007c52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e006      	b.n	8007c60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d0f0      	beq.n	8007c40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	00030d40 	.word	0x00030d40

08007c70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4a11      	ldr	r2, [pc, #68]	; (8007ccc <USB_FlushRxFifo+0x5c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d901      	bls.n	8007c8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e018      	b.n	8007cc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	daf2      	bge.n	8007c7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2210      	movs	r2, #16
 8007c9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a08      	ldr	r2, [pc, #32]	; (8007ccc <USB_FlushRxFifo+0x5c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d901      	bls.n	8007cb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e006      	b.n	8007cc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0310 	and.w	r3, r3, #16
 8007cba:	2b10      	cmp	r3, #16
 8007cbc:	d0f0      	beq.n	8007ca0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	00030d40 	.word	0x00030d40

08007cd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	68f9      	ldr	r1, [r7, #12]
 8007cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d1c:	f023 0303 	bic.w	r3, r3, #3
 8007d20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d30:	f043 0302 	orr.w	r3, r3, #2
 8007d34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	f003 0301 	and.w	r3, r3, #1
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4a13      	ldr	r2, [pc, #76]	; (8007dc4 <USB_CoreReset+0x64>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d901      	bls.n	8007d7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e01b      	b.n	8007db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	daf2      	bge.n	8007d6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f043 0201 	orr.w	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4a09      	ldr	r2, [pc, #36]	; (8007dc4 <USB_CoreReset+0x64>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d901      	bls.n	8007da8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e006      	b.n	8007db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d0f0      	beq.n	8007d96 <USB_CoreReset+0x36>

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	00030d40 	.word	0x00030d40

08007dc8 <__NVIC_SetPriority>:
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	6039      	str	r1, [r7, #0]
 8007dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db0a      	blt.n	8007df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	490c      	ldr	r1, [pc, #48]	; (8007e14 <__NVIC_SetPriority+0x4c>)
 8007de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007de6:	0112      	lsls	r2, r2, #4
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	440b      	add	r3, r1
 8007dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007df0:	e00a      	b.n	8007e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	4908      	ldr	r1, [pc, #32]	; (8007e18 <__NVIC_SetPriority+0x50>)
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	3b04      	subs	r3, #4
 8007e00:	0112      	lsls	r2, r2, #4
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	440b      	add	r3, r1
 8007e06:	761a      	strb	r2, [r3, #24]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	e000e100 	.word	0xe000e100
 8007e18:	e000ed00 	.word	0xe000ed00

08007e1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <SysTick_Handler+0x1c>)
 8007e22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e24:	f001 ffd2 	bl	8009dcc <xTaskGetSchedulerState>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d001      	beq.n	8007e32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e2e:	f002 fdf3 	bl	800aa18 <xPortSysTickHandler>
  }
}
 8007e32:	bf00      	nop
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	e000e010 	.word	0xe000e010

08007e3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e40:	2100      	movs	r1, #0
 8007e42:	f06f 0004 	mvn.w	r0, #4
 8007e46:	f7ff ffbf 	bl	8007dc8 <__NVIC_SetPriority>
#endif
}
 8007e4a:	bf00      	nop
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e56:	f3ef 8305 	mrs	r3, IPSR
 8007e5a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007e62:	f06f 0305 	mvn.w	r3, #5
 8007e66:	607b      	str	r3, [r7, #4]
 8007e68:	e00c      	b.n	8007e84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <osKernelInitialize+0x44>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d105      	bne.n	8007e7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e72:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <osKernelInitialize+0x44>)
 8007e74:	2201      	movs	r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	607b      	str	r3, [r7, #4]
 8007e7c:	e002      	b.n	8007e84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e84:	687b      	ldr	r3, [r7, #4]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20001244 	.word	0x20001244

08007e98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e9e:	f3ef 8305 	mrs	r3, IPSR
 8007ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8007ea4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007eaa:	f06f 0305 	mvn.w	r3, #5
 8007eae:	607b      	str	r3, [r7, #4]
 8007eb0:	e010      	b.n	8007ed4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007eb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <osKernelStart+0x48>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d109      	bne.n	8007ece <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007eba:	f7ff ffbf 	bl	8007e3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ebe:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <osKernelStart+0x48>)
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ec4:	f001 fa88 	bl	80093d8 <vTaskStartScheduler>
      stat = osOK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	607b      	str	r3, [r7, #4]
 8007ecc:	e002      	b.n	8007ed4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ed4:	687b      	ldr	r3, [r7, #4]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20001244 	.word	0x20001244

08007ee4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08e      	sub	sp, #56	; 0x38
 8007ee8:	af04      	add	r7, sp, #16
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef4:	f3ef 8305 	mrs	r3, IPSR
 8007ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8007efa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d17e      	bne.n	8007ffe <osThreadNew+0x11a>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d07b      	beq.n	8007ffe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f06:	2380      	movs	r3, #128	; 0x80
 8007f08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f0a:	2318      	movs	r3, #24
 8007f0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f12:	f04f 33ff 	mov.w	r3, #4294967295
 8007f16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d045      	beq.n	8007faa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <osThreadNew+0x48>
        name = attr->name;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <osThreadNew+0x6e>
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	2b38      	cmp	r3, #56	; 0x38
 8007f44:	d805      	bhi.n	8007f52 <osThreadNew+0x6e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <osThreadNew+0x72>
        return (NULL);
 8007f52:	2300      	movs	r3, #0
 8007f54:	e054      	b.n	8008000 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	089b      	lsrs	r3, r3, #2
 8007f64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00e      	beq.n	8007f8c <osThreadNew+0xa8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	2bbb      	cmp	r3, #187	; 0xbb
 8007f74:	d90a      	bls.n	8007f8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d006      	beq.n	8007f8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <osThreadNew+0xa8>
        mem = 1;
 8007f86:	2301      	movs	r3, #1
 8007f88:	61bb      	str	r3, [r7, #24]
 8007f8a:	e010      	b.n	8007fae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10c      	bne.n	8007fae <osThreadNew+0xca>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d108      	bne.n	8007fae <osThreadNew+0xca>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <osThreadNew+0xca>
          mem = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	e001      	b.n	8007fae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d110      	bne.n	8007fd6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fbc:	9202      	str	r2, [sp, #8]
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	6a3a      	ldr	r2, [r7, #32]
 8007fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f001 f818 	bl	8009000 <xTaskCreateStatic>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	613b      	str	r3, [r7, #16]
 8007fd4:	e013      	b.n	8007ffe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d110      	bne.n	8007ffe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f107 0310 	add.w	r3, r7, #16
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f001 f863 	bl	80090ba <xTaskCreate>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d001      	beq.n	8007ffe <osThreadNew+0x11a>
            hTask = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ffe:	693b      	ldr	r3, [r7, #16]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3728      	adds	r7, #40	; 0x28
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008010:	f3ef 8305 	mrs	r3, IPSR
 8008014:	60bb      	str	r3, [r7, #8]
  return(result);
 8008016:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <osDelay+0x1c>
    stat = osErrorISR;
 800801c:	f06f 0305 	mvn.w	r3, #5
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e007      	b.n	8008034 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <osDelay+0x2c>
      vTaskDelay(ticks);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f99e 	bl	8009370 <vTaskDelay>
    }
  }

  return (stat);
 8008034:	68fb      	ldr	r3, [r7, #12]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4a07      	ldr	r2, [pc, #28]	; (800806c <vApplicationGetIdleTaskMemory+0x2c>)
 8008050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4a06      	ldr	r2, [pc, #24]	; (8008070 <vApplicationGetIdleTaskMemory+0x30>)
 8008056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2280      	movs	r2, #128	; 0x80
 800805c:	601a      	str	r2, [r3, #0]
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20001248 	.word	0x20001248
 8008070:	20001304 	.word	0x20001304

08008074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a07      	ldr	r2, [pc, #28]	; (80080a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4a06      	ldr	r2, [pc, #24]	; (80080a4 <vApplicationGetTimerTaskMemory+0x30>)
 800808a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008092:	601a      	str	r2, [r3, #0]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20001504 	.word	0x20001504
 80080a4:	200015c0 	.word	0x200015c0

080080a8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80080cc:	2320      	movs	r3, #32
 80080ce:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b20      	cmp	r3, #32
 80080d4:	d00a      	beq.n	80080ec <xEventGroupCreateStatic+0x44>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60fb      	str	r3, [r7, #12]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3304      	adds	r3, #4
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f9dd 	bl	80084c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2201      	movs	r2, #1
 800810a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800810c:	697b      	ldr	r3, [r7, #20]
	}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b090      	sub	sp, #64	; 0x40
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800812e:	2300      	movs	r3, #0
 8008130:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <xEventGroupWaitBits+0x36>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	623b      	str	r3, [r7, #32]
}
 800814a:	bf00      	nop
 800814c:	e7fe      	b.n	800814c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <xEventGroupWaitBits+0x56>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	61fb      	str	r3, [r7, #28]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10a      	bne.n	800818a <xEventGroupWaitBits+0x72>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	61bb      	str	r3, [r7, #24]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800818a:	f001 fe1f 	bl	8009dcc <xTaskGetSchedulerState>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <xEventGroupWaitBits+0x82>
 8008194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <xEventGroupWaitBits+0x86>
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <xEventGroupWaitBits+0x88>
 800819e:	2300      	movs	r3, #0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <xEventGroupWaitBits+0xa2>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	617b      	str	r3, [r7, #20]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80081ba:	f001 f97d 	bl	80094b8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80081be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081ca:	f000 f943 	bl	8008454 <prvTestWaitCondition>
 80081ce:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00e      	beq.n	80081f4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80081d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d028      	beq.n	8008236 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80081e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	43db      	mvns	r3, r3
 80081ec:	401a      	ands	r2, r3
 80081ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	e020      	b.n	8008236 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80081f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d104      	bne.n	8008204 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80081fe:	2301      	movs	r3, #1
 8008200:	633b      	str	r3, [r7, #48]	; 0x30
 8008202:	e018      	b.n	8008236 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008210:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800821e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008222:	1d18      	adds	r0, r3, #4
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	4313      	orrs	r3, r2
 800822a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800822c:	4619      	mov	r1, r3
 800822e:	f001 fb41 	bl	80098b4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008236:	f001 f94d 	bl	80094d4 <xTaskResumeAll>
 800823a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800823c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800823e:	2b00      	cmp	r3, #0
 8008240:	d031      	beq.n	80082a6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	d107      	bne.n	8008258 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8008248:	4b19      	ldr	r3, [pc, #100]	; (80082b0 <xEventGroupWaitBits+0x198>)
 800824a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008258:	f001 fe44 	bl	8009ee4 <uxTaskResetEventItemValue>
 800825c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800825e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d11a      	bne.n	800829e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8008268:	f002 fb44 	bl	800a8f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008278:	f000 f8ec 	bl	8008454 <prvTestWaitCondition>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	43db      	mvns	r3, r3
 8008290:	401a      	ands	r2, r3
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008294:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008296:	2301      	movs	r3, #1
 8008298:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800829a:	f002 fb5b 	bl	800a954 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800829e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80082a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3740      	adds	r7, #64	; 0x40
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <xEventGroupClearBits+0x2a>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60fb      	str	r3, [r7, #12]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <xEventGroupClearBits+0x4a>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	60bb      	str	r3, [r7, #8]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80082fe:	f002 faf9 	bl	800a8f4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	43db      	mvns	r3, r3
 8008310:	401a      	ands	r2, r3
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008316:	f002 fb1d 	bl	800a954 <vPortExitCritical>

	return uxReturn;
 800831a:	693b      	ldr	r3, [r7, #16]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08e      	sub	sp, #56	; 0x38
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800832e:	2300      	movs	r3, #0
 8008330:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008336:	2300      	movs	r3, #0
 8008338:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <xEventGroupSetBits+0x32>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <xEventGroupSetBits+0x52>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	60fb      	str	r3, [r7, #12]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008378:	3304      	adds	r3, #4
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	3308      	adds	r3, #8
 8008380:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008382:	f001 f899 	bl	80094b8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	431a      	orrs	r2, r3
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008398:	e03c      	b.n	8008414 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083b0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80083b8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d4:	e008      	b.n	80083e8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	4013      	ands	r3, r2
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d101      	bne.n	80083e8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d010      	beq.n	8008410 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80083f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008408:	4619      	mov	r1, r3
 800840a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800840c:	f001 fb1e 	bl	8009a4c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	429a      	cmp	r2, r3
 800841a:	d1be      	bne.n	800839a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	43db      	mvns	r3, r3
 8008424:	401a      	ands	r2, r3
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800842a:	f001 f853 	bl	80094d4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	681b      	ldr	r3, [r3, #0]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3738      	adds	r7, #56	; 0x38
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff ff6c 	bl	8008324 <xEventGroupSetBits>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d107      	bne.n	800847a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4013      	ands	r3, r2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e007      	b.n	800848a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4013      	ands	r3, r2
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	429a      	cmp	r2, r3
 8008484:	d101      	bne.n	800848a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008486:	2301      	movs	r3, #1
 8008488:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800848a:	697b      	ldr	r3, [r7, #20]
}
 800848c:	4618      	mov	r0, r3
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	68f9      	ldr	r1, [r7, #12]
 80084aa:	4804      	ldr	r0, [pc, #16]	; (80084bc <xEventGroupSetBitsFromISR+0x24>)
 80084ac:	f002 f8d4 	bl	800a658 <xTimerPendFunctionCallFromISR>
 80084b0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80084b2:	697b      	ldr	r3, [r7, #20]
	}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	0800843b 	.word	0x0800843b

080084c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f103 0208 	add.w	r2, r3, #8
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295
 80084d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f103 0208 	add.w	r2, r3, #8
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f103 0208 	add.w	r2, r3, #8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008578:	d103      	bne.n	8008582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	e00c      	b.n	800859c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3308      	adds	r3, #8
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	e002      	b.n	8008590 <vListInsert+0x2e>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	429a      	cmp	r2, r3
 800859a:	d2f6      	bcs.n	800858a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	601a      	str	r2, [r3, #0]
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6892      	ldr	r2, [r2, #8]
 80085ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6852      	ldr	r2, [r2, #4]
 80085f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d103      	bne.n	8008608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	1e5a      	subs	r2, r3, #1
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <xQueueGenericReset+0x2a>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	60bb      	str	r3, [r7, #8]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008652:	f002 f94f 	bl	800a8f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865e:	68f9      	ldr	r1, [r7, #12]
 8008660:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008662:	fb01 f303 	mul.w	r3, r1, r3
 8008666:	441a      	add	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	3b01      	subs	r3, #1
 8008684:	68f9      	ldr	r1, [r7, #12]
 8008686:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008688:	fb01 f303 	mul.w	r3, r1, r3
 800868c:	441a      	add	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	22ff      	movs	r2, #255	; 0xff
 8008696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	22ff      	movs	r2, #255	; 0xff
 800869e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d114      	bne.n	80086d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01a      	beq.n	80086e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3310      	adds	r3, #16
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 f965 	bl	8009984 <xTaskRemoveFromEventList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d012      	beq.n	80086e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086c0:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <xQueueGenericReset+0xcc>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	e009      	b.n	80086e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3310      	adds	r3, #16
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7ff fef2 	bl	80084c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3324      	adds	r3, #36	; 0x24
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff feed 	bl	80084c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086e6:	f002 f935 	bl	800a954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086ea:	2301      	movs	r3, #1
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08e      	sub	sp, #56	; 0x38
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10a      	bne.n	8008722 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800871e:	bf00      	nop
 8008720:	e7fe      	b.n	8008720 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <xQueueGenericCreateStatic+0x52>
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <xQueueGenericCreateStatic+0x56>
 800874a:	2301      	movs	r3, #1
 800874c:	e000      	b.n	8008750 <xQueueGenericCreateStatic+0x58>
 800874e:	2300      	movs	r3, #0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	623b      	str	r3, [r7, #32]
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <xQueueGenericCreateStatic+0x7e>
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <xQueueGenericCreateStatic+0x82>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueGenericCreateStatic+0x84>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	61fb      	str	r3, [r7, #28]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008796:	2350      	movs	r3, #80	; 0x50
 8008798:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b50      	cmp	r3, #80	; 0x50
 800879e:	d00a      	beq.n	80087b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	61bb      	str	r3, [r7, #24]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00d      	beq.n	80087de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	4613      	mov	r3, r2
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f805 	bl	80087e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3730      	adds	r7, #48	; 0x30
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e002      	b.n	800880a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008816:	2101      	movs	r1, #1
 8008818:	69b8      	ldr	r0, [r7, #24]
 800881a:	f7ff ff05 	bl	8008628 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08e      	sub	sp, #56	; 0x38
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800883e:	2300      	movs	r3, #0
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xQueueGenericSend+0x32>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <xQueueGenericSend+0x40>
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <xQueueGenericSend+0x44>
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <xQueueGenericSend+0x46>
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <xQueueGenericSend+0x60>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b02      	cmp	r3, #2
 8008894:	d103      	bne.n	800889e <xQueueGenericSend+0x6e>
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889a:	2b01      	cmp	r3, #1
 800889c:	d101      	bne.n	80088a2 <xQueueGenericSend+0x72>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <xQueueGenericSend+0x74>
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <xQueueGenericSend+0x8e>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	623b      	str	r3, [r7, #32]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088be:	f001 fa85 	bl	8009dcc <xTaskGetSchedulerState>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d102      	bne.n	80088ce <xQueueGenericSend+0x9e>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <xQueueGenericSend+0xa2>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <xQueueGenericSend+0xa4>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <xQueueGenericSend+0xbe>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	61fb      	str	r3, [r7, #28]
}
 80088ea:	bf00      	nop
 80088ec:	e7fe      	b.n	80088ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088ee:	f002 f801 	bl	800a8f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d302      	bcc.n	8008904 <xQueueGenericSend+0xd4>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d129      	bne.n	8008958 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890a:	f000 fa0b 	bl	8008d24 <prvCopyDataToQueue>
 800890e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d010      	beq.n	800893a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	3324      	adds	r3, #36	; 0x24
 800891c:	4618      	mov	r0, r3
 800891e:	f001 f831 	bl	8009984 <xTaskRemoveFromEventList>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d013      	beq.n	8008950 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008928:	4b3f      	ldr	r3, [pc, #252]	; (8008a28 <xQueueGenericSend+0x1f8>)
 800892a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	e00a      	b.n	8008950 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d007      	beq.n	8008950 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008940:	4b39      	ldr	r3, [pc, #228]	; (8008a28 <xQueueGenericSend+0x1f8>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008950:	f002 f800 	bl	800a954 <vPortExitCritical>
				return pdPASS;
 8008954:	2301      	movs	r3, #1
 8008956:	e063      	b.n	8008a20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800895e:	f001 fff9 	bl	800a954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008962:	2300      	movs	r3, #0
 8008964:	e05c      	b.n	8008a20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800896c:	f107 0314 	add.w	r3, r7, #20
 8008970:	4618      	mov	r0, r3
 8008972:	f001 f8cd 	bl	8009b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008976:	2301      	movs	r3, #1
 8008978:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800897a:	f001 ffeb 	bl	800a954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800897e:	f000 fd9b 	bl	80094b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008982:	f001 ffb7 	bl	800a8f4 <vPortEnterCritical>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800898c:	b25b      	sxtb	r3, r3
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d103      	bne.n	800899c <xQueueGenericSend+0x16c>
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800899c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089a2:	b25b      	sxtb	r3, r3
 80089a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a8:	d103      	bne.n	80089b2 <xQueueGenericSend+0x182>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089b2:	f001 ffcf 	bl	800a954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089b6:	1d3a      	adds	r2, r7, #4
 80089b8:	f107 0314 	add.w	r3, r7, #20
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 f8bc 	bl	8009b3c <xTaskCheckForTimeOut>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d124      	bne.n	8008a14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089cc:	f000 faa2 	bl	8008f14 <prvIsQueueFull>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d018      	beq.n	8008a08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	3310      	adds	r3, #16
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 ff44 	bl	800986c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e6:	f000 fa2d 	bl	8008e44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089ea:	f000 fd73 	bl	80094d4 <xTaskResumeAll>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f47f af7c 	bne.w	80088ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089f6:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <xQueueGenericSend+0x1f8>)
 80089f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	e772      	b.n	80088ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a0a:	f000 fa1b 	bl	8008e44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a0e:	f000 fd61 	bl	80094d4 <xTaskResumeAll>
 8008a12:	e76c      	b.n	80088ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a16:	f000 fa15 	bl	8008e44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a1a:	f000 fd5b 	bl	80094d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3738      	adds	r7, #56	; 0x38
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b090      	sub	sp, #64	; 0x40
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d103      	bne.n	8008a68 <xQueueGenericSendFromISR+0x3c>
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <xQueueGenericSendFromISR+0x40>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e000      	b.n	8008a6e <xQueueGenericSendFromISR+0x42>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d103      	bne.n	8008a96 <xQueueGenericSendFromISR+0x6a>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <xQueueGenericSendFromISR+0x6e>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <xQueueGenericSendFromISR+0x70>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	623b      	str	r3, [r7, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ab6:	f001 ffff 	bl	800aab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008aba:	f3ef 8211 	mrs	r2, BASEPRI
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	61fa      	str	r2, [r7, #28]
 8008ad0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ad2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ad4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d302      	bcc.n	8008ae8 <xQueueGenericSendFromISR+0xbc>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d12f      	bne.n	8008b48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008afe:	f000 f911 	bl	8008d24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0a:	d112      	bne.n	8008b32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d016      	beq.n	8008b42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	3324      	adds	r3, #36	; 0x24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 ff33 	bl	8009984 <xTaskRemoveFromEventList>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00e      	beq.n	8008b42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00b      	beq.n	8008b42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	e007      	b.n	8008b42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b36:	3301      	adds	r3, #1
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	b25a      	sxtb	r2, r3
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b42:	2301      	movs	r3, #1
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b46:	e001      	b.n	8008b4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3740      	adds	r7, #64	; 0x40
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b70:	2300      	movs	r3, #0
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <xQueueReceive+0x30>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	623b      	str	r3, [r7, #32]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d103      	bne.n	8008ba2 <xQueueReceive+0x3e>
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <xQueueReceive+0x42>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e000      	b.n	8008ba8 <xQueueReceive+0x44>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <xQueueReceive+0x5e>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	61fb      	str	r3, [r7, #28]
}
 8008bbe:	bf00      	nop
 8008bc0:	e7fe      	b.n	8008bc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bc2:	f001 f903 	bl	8009dcc <xTaskGetSchedulerState>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <xQueueReceive+0x6e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <xQueueReceive+0x72>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e000      	b.n	8008bd8 <xQueueReceive+0x74>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <xQueueReceive+0x8e>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	61bb      	str	r3, [r7, #24]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bf2:	f001 fe7f 	bl	800a8f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01f      	beq.n	8008c42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c06:	f000 f8f7 	bl	8008df8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	1e5a      	subs	r2, r3, #1
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00f      	beq.n	8008c3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	3310      	adds	r3, #16
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 feb0 	bl	8009984 <xTaskRemoveFromEventList>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c2a:	4b3d      	ldr	r3, [pc, #244]	; (8008d20 <xQueueReceive+0x1bc>)
 8008c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c3a:	f001 fe8b 	bl	800a954 <vPortExitCritical>
				return pdPASS;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e069      	b.n	8008d16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c48:	f001 fe84 	bl	800a954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e062      	b.n	8008d16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d106      	bne.n	8008c64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c56:	f107 0310 	add.w	r3, r7, #16
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 ff58 	bl	8009b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c64:	f001 fe76 	bl	800a954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c68:	f000 fc26 	bl	80094b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c6c:	f001 fe42 	bl	800a8f4 <vPortEnterCritical>
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c76:	b25b      	sxtb	r3, r3
 8008c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7c:	d103      	bne.n	8008c86 <xQueueReceive+0x122>
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c8c:	b25b      	sxtb	r3, r3
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d103      	bne.n	8008c9c <xQueueReceive+0x138>
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c9c:	f001 fe5a 	bl	800a954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ca0:	1d3a      	adds	r2, r7, #4
 8008ca2:	f107 0310 	add.w	r3, r7, #16
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 ff47 	bl	8009b3c <xTaskCheckForTimeOut>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d123      	bne.n	8008cfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cb6:	f000 f917 	bl	8008ee8 <prvIsQueueEmpty>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	3324      	adds	r3, #36	; 0x24
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fdcf 	bl	800986c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cd0:	f000 f8b8 	bl	8008e44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cd4:	f000 fbfe 	bl	80094d4 <xTaskResumeAll>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d189      	bne.n	8008bf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008cde:	4b10      	ldr	r3, [pc, #64]	; (8008d20 <xQueueReceive+0x1bc>)
 8008ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	e780      	b.n	8008bf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cf2:	f000 f8a7 	bl	8008e44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cf6:	f000 fbed 	bl	80094d4 <xTaskResumeAll>
 8008cfa:	e77a      	b.n	8008bf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfe:	f000 f8a1 	bl	8008e44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d02:	f000 fbe7 	bl	80094d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d08:	f000 f8ee 	bl	8008ee8 <prvIsQueueEmpty>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f43f af6f 	beq.w	8008bf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3730      	adds	r7, #48	; 0x30
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	e000ed04 	.word	0xe000ed04

08008d24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d30:	2300      	movs	r3, #0
 8008d32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10d      	bne.n	8008d5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d14d      	bne.n	8008de6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 f85a 	bl	8009e08 <xTaskPriorityDisinherit>
 8008d54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	609a      	str	r2, [r3, #8]
 8008d5c:	e043      	b.n	8008de6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d119      	bne.n	8008d98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6858      	ldr	r0, [r3, #4]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	f003 f8aa 	bl	800bec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	441a      	add	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d32b      	bcc.n	8008de6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]
 8008d96:	e026      	b.n	8008de6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	68d8      	ldr	r0, [r3, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da0:	461a      	mov	r2, r3
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	f003 f890 	bl	800bec8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db0:	425b      	negs	r3, r3
 8008db2:	441a      	add	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d207      	bcs.n	8008dd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	425b      	negs	r3, r3
 8008dce:	441a      	add	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d105      	bne.n	8008de6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008dee:	697b      	ldr	r3, [r7, #20]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d018      	beq.n	8008e3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	441a      	add	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d303      	bcc.n	8008e2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68d9      	ldr	r1, [r3, #12]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e34:	461a      	mov	r2, r3
 8008e36:	6838      	ldr	r0, [r7, #0]
 8008e38:	f003 f846 	bl	800bec8 <memcpy>
	}
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e4c:	f001 fd52 	bl	800a8f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e58:	e011      	b.n	8008e7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d012      	beq.n	8008e88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3324      	adds	r3, #36	; 0x24
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fd8c 	bl	8009984 <xTaskRemoveFromEventList>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e72:	f000 fec5 	bl	8009c00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	dce9      	bgt.n	8008e5a <prvUnlockQueue+0x16>
 8008e86:	e000      	b.n	8008e8a <prvUnlockQueue+0x46>
					break;
 8008e88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	22ff      	movs	r2, #255	; 0xff
 8008e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e92:	f001 fd5f 	bl	800a954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e96:	f001 fd2d 	bl	800a8f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ea0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ea2:	e011      	b.n	8008ec8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d012      	beq.n	8008ed2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3310      	adds	r3, #16
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fd67 	bl	8009984 <xTaskRemoveFromEventList>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ebc:	f000 fea0 	bl	8009c00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dce9      	bgt.n	8008ea4 <prvUnlockQueue+0x60>
 8008ed0:	e000      	b.n	8008ed4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ed2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	22ff      	movs	r2, #255	; 0xff
 8008ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008edc:	f001 fd3a 	bl	800a954 <vPortExitCritical>
}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ef0:	f001 fd00 	bl	800a8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008efc:	2301      	movs	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	e001      	b.n	8008f06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f06:	f001 fd25 	bl	800a954 <vPortExitCritical>

	return xReturn;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f1c:	f001 fcea 	bl	800a8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d102      	bne.n	8008f32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	e001      	b.n	8008f36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f36:	f001 fd0d 	bl	800a954 <vPortExitCritical>

	return xReturn;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	e014      	b.n	8008f7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f54:	4a0f      	ldr	r2, [pc, #60]	; (8008f94 <vQueueAddToRegistry+0x50>)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10b      	bne.n	8008f78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f60:	490c      	ldr	r1, [pc, #48]	; (8008f94 <vQueueAddToRegistry+0x50>)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f6a:	4a0a      	ldr	r2, [pc, #40]	; (8008f94 <vQueueAddToRegistry+0x50>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	4413      	add	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f76:	e006      	b.n	8008f86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b07      	cmp	r3, #7
 8008f82:	d9e7      	bls.n	8008f54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	200019c0 	.word	0x200019c0

08008f98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fa8:	f001 fca4 	bl	800a8f4 <vPortEnterCritical>
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb2:	b25b      	sxtb	r3, r3
 8008fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb8:	d103      	bne.n	8008fc2 <vQueueWaitForMessageRestricted+0x2a>
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fc8:	b25b      	sxtb	r3, r3
 8008fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fce:	d103      	bne.n	8008fd8 <vQueueWaitForMessageRestricted+0x40>
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fd8:	f001 fcbc 	bl	800a954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d106      	bne.n	8008ff2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	3324      	adds	r3, #36	; 0x24
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fc9d 	bl	800992c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ff2:	6978      	ldr	r0, [r7, #20]
 8008ff4:	f7ff ff26 	bl	8008e44 <prvUnlockQueue>
	}
 8008ff8:	bf00      	nop
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08e      	sub	sp, #56	; 0x38
 8009004:	af04      	add	r7, sp, #16
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800900e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	623b      	str	r3, [r7, #32]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <xTaskCreateStatic+0x46>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	61fb      	str	r3, [r7, #28]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009046:	23bc      	movs	r3, #188	; 0xbc
 8009048:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2bbc      	cmp	r3, #188	; 0xbc
 800904e:	d00a      	beq.n	8009066 <xTaskCreateStatic+0x66>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	61bb      	str	r3, [r7, #24]
}
 8009062:	bf00      	nop
 8009064:	e7fe      	b.n	8009064 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009066:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	2b00      	cmp	r3, #0
 800906c:	d01e      	beq.n	80090ac <xTaskCreateStatic+0xac>
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01b      	beq.n	80090ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800907c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	2202      	movs	r2, #2
 8009082:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009086:	2300      	movs	r3, #0
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	9302      	str	r3, [sp, #8]
 800908e:	f107 0314 	add.w	r3, r7, #20
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 f850 	bl	8009144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090a6:	f000 f8f3 	bl	8009290 <prvAddNewTaskToReadyList>
 80090aa:	e001      	b.n	80090b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80090ac:	2300      	movs	r3, #0
 80090ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090b0:	697b      	ldr	r3, [r7, #20]
	}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3728      	adds	r7, #40	; 0x28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b08c      	sub	sp, #48	; 0x30
 80090be:	af04      	add	r7, sp, #16
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	4613      	mov	r3, r2
 80090c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090ca:	88fb      	ldrh	r3, [r7, #6]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 fd32 	bl	800ab38 <pvPortMalloc>
 80090d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00e      	beq.n	80090fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090dc:	20bc      	movs	r0, #188	; 0xbc
 80090de:	f001 fd2b 	bl	800ab38 <pvPortMalloc>
 80090e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30
 80090f0:	e005      	b.n	80090fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090f2:	6978      	ldr	r0, [r7, #20]
 80090f4:	f001 fdec 	bl	800acd0 <vPortFree>
 80090f8:	e001      	b.n	80090fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d017      	beq.n	8009134 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800910c:	88fa      	ldrh	r2, [r7, #6]
 800910e:	2300      	movs	r3, #0
 8009110:	9303      	str	r3, [sp, #12]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	9302      	str	r3, [sp, #8]
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 f80e 	bl	8009144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009128:	69f8      	ldr	r0, [r7, #28]
 800912a:	f000 f8b1 	bl	8009290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800912e:	2301      	movs	r3, #1
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	e002      	b.n	800913a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009134:	f04f 33ff 	mov.w	r3, #4294967295
 8009138:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800913a:	69bb      	ldr	r3, [r7, #24]
	}
 800913c:	4618      	mov	r0, r3
 800913e:	3720      	adds	r7, #32
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	461a      	mov	r2, r3
 800915c:	21a5      	movs	r1, #165	; 0xa5
 800915e:	f002 fec1 	bl	800bee4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800916c:	3b01      	subs	r3, #1
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	f023 0307 	bic.w	r3, r3, #7
 800917a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	617b      	str	r3, [r7, #20]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01f      	beq.n	80091e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091a2:	2300      	movs	r3, #0
 80091a4:	61fb      	str	r3, [r7, #28]
 80091a6:	e012      	b.n	80091ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	7819      	ldrb	r1, [r3, #0]
 80091b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	4413      	add	r3, r2
 80091b6:	3334      	adds	r3, #52	; 0x34
 80091b8:	460a      	mov	r2, r1
 80091ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d006      	beq.n	80091d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	3301      	adds	r3, #1
 80091cc:	61fb      	str	r3, [r7, #28]
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	2b0f      	cmp	r3, #15
 80091d2:	d9e9      	bls.n	80091a8 <prvInitialiseNewTask+0x64>
 80091d4:	e000      	b.n	80091d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80091d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091e0:	e003      	b.n	80091ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	2b37      	cmp	r3, #55	; 0x37
 80091ee:	d901      	bls.n	80091f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091f0:	2337      	movs	r3, #55	; 0x37
 80091f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	2200      	movs	r2, #0
 8009204:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	3304      	adds	r3, #4
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff f978 	bl	8008500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	3318      	adds	r3, #24
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff f973 	bl	8008500 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800922e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	2200      	movs	r2, #0
 800923c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	3354      	adds	r3, #84	; 0x54
 8009244:	2260      	movs	r2, #96	; 0x60
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f002 fe4b 	bl	800bee4 <memset>
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	4a0c      	ldr	r2, [pc, #48]	; (8009284 <prvInitialiseNewTask+0x140>)
 8009252:	659a      	str	r2, [r3, #88]	; 0x58
 8009254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009256:	4a0c      	ldr	r2, [pc, #48]	; (8009288 <prvInitialiseNewTask+0x144>)
 8009258:	65da      	str	r2, [r3, #92]	; 0x5c
 800925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925c:	4a0b      	ldr	r2, [pc, #44]	; (800928c <prvInitialiseNewTask+0x148>)
 800925e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	69b8      	ldr	r0, [r7, #24]
 8009266:	f001 fa17 	bl	800a698 <pxPortInitialiseStack>
 800926a:	4602      	mov	r2, r0
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800927c:	bf00      	nop
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	0800c1a4 	.word	0x0800c1a4
 8009288:	0800c1c4 	.word	0x0800c1c4
 800928c:	0800c184 	.word	0x0800c184

08009290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009298:	f001 fb2c 	bl	800a8f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800929c:	4b2d      	ldr	r3, [pc, #180]	; (8009354 <prvAddNewTaskToReadyList+0xc4>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3301      	adds	r3, #1
 80092a2:	4a2c      	ldr	r2, [pc, #176]	; (8009354 <prvAddNewTaskToReadyList+0xc4>)
 80092a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092a6:	4b2c      	ldr	r3, [pc, #176]	; (8009358 <prvAddNewTaskToReadyList+0xc8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d109      	bne.n	80092c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092ae:	4a2a      	ldr	r2, [pc, #168]	; (8009358 <prvAddNewTaskToReadyList+0xc8>)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092b4:	4b27      	ldr	r3, [pc, #156]	; (8009354 <prvAddNewTaskToReadyList+0xc4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d110      	bne.n	80092de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092bc:	f000 fcc4 	bl	8009c48 <prvInitialiseTaskLists>
 80092c0:	e00d      	b.n	80092de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092c2:	4b26      	ldr	r3, [pc, #152]	; (800935c <prvAddNewTaskToReadyList+0xcc>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092ca:	4b23      	ldr	r3, [pc, #140]	; (8009358 <prvAddNewTaskToReadyList+0xc8>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d802      	bhi.n	80092de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092d8:	4a1f      	ldr	r2, [pc, #124]	; (8009358 <prvAddNewTaskToReadyList+0xc8>)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092de:	4b20      	ldr	r3, [pc, #128]	; (8009360 <prvAddNewTaskToReadyList+0xd0>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3301      	adds	r3, #1
 80092e4:	4a1e      	ldr	r2, [pc, #120]	; (8009360 <prvAddNewTaskToReadyList+0xd0>)
 80092e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092e8:	4b1d      	ldr	r3, [pc, #116]	; (8009360 <prvAddNewTaskToReadyList+0xd0>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f4:	4b1b      	ldr	r3, [pc, #108]	; (8009364 <prvAddNewTaskToReadyList+0xd4>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d903      	bls.n	8009304 <prvAddNewTaskToReadyList+0x74>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009300:	4a18      	ldr	r2, [pc, #96]	; (8009364 <prvAddNewTaskToReadyList+0xd4>)
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4a15      	ldr	r2, [pc, #84]	; (8009368 <prvAddNewTaskToReadyList+0xd8>)
 8009312:	441a      	add	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3304      	adds	r3, #4
 8009318:	4619      	mov	r1, r3
 800931a:	4610      	mov	r0, r2
 800931c:	f7ff f8fd 	bl	800851a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009320:	f001 fb18 	bl	800a954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009324:	4b0d      	ldr	r3, [pc, #52]	; (800935c <prvAddNewTaskToReadyList+0xcc>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00e      	beq.n	800934a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <prvAddNewTaskToReadyList+0xc8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	429a      	cmp	r2, r3
 8009338:	d207      	bcs.n	800934a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800933a:	4b0c      	ldr	r3, [pc, #48]	; (800936c <prvAddNewTaskToReadyList+0xdc>)
 800933c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800934a:	bf00      	nop
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20001ed4 	.word	0x20001ed4
 8009358:	20001a00 	.word	0x20001a00
 800935c:	20001ee0 	.word	0x20001ee0
 8009360:	20001ef0 	.word	0x20001ef0
 8009364:	20001edc 	.word	0x20001edc
 8009368:	20001a04 	.word	0x20001a04
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d017      	beq.n	80093b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009382:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <vTaskDelay+0x60>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <vTaskDelay+0x30>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	60bb      	str	r3, [r7, #8]
}
 800939c:	bf00      	nop
 800939e:	e7fe      	b.n	800939e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093a0:	f000 f88a 	bl	80094b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093a4:	2100      	movs	r1, #0
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fdb4 	bl	8009f14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093ac:	f000 f892 	bl	80094d4 <xTaskResumeAll>
 80093b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d107      	bne.n	80093c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <vTaskDelay+0x64>)
 80093ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093c8:	bf00      	nop
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20001efc 	.word	0x20001efc
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08a      	sub	sp, #40	; 0x28
 80093dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093e6:	463a      	mov	r2, r7
 80093e8:	1d39      	adds	r1, r7, #4
 80093ea:	f107 0308 	add.w	r3, r7, #8
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fe26 	bl	8008040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	9202      	str	r2, [sp, #8]
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	2300      	movs	r3, #0
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	2300      	movs	r3, #0
 8009404:	460a      	mov	r2, r1
 8009406:	4924      	ldr	r1, [pc, #144]	; (8009498 <vTaskStartScheduler+0xc0>)
 8009408:	4824      	ldr	r0, [pc, #144]	; (800949c <vTaskStartScheduler+0xc4>)
 800940a:	f7ff fdf9 	bl	8009000 <xTaskCreateStatic>
 800940e:	4603      	mov	r3, r0
 8009410:	4a23      	ldr	r2, [pc, #140]	; (80094a0 <vTaskStartScheduler+0xc8>)
 8009412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009414:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <vTaskStartScheduler+0xc8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800941c:	2301      	movs	r3, #1
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	e001      	b.n	8009426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d102      	bne.n	8009432 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800942c:	f000 fdc6 	bl	8009fbc <xTimerCreateTimerTask>
 8009430:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d11b      	bne.n	8009470 <vTaskStartScheduler+0x98>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	613b      	str	r3, [r7, #16]
}
 800944a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800944c:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <vTaskStartScheduler+0xcc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3354      	adds	r3, #84	; 0x54
 8009452:	4a15      	ldr	r2, [pc, #84]	; (80094a8 <vTaskStartScheduler+0xd0>)
 8009454:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009456:	4b15      	ldr	r3, [pc, #84]	; (80094ac <vTaskStartScheduler+0xd4>)
 8009458:	f04f 32ff 	mov.w	r2, #4294967295
 800945c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800945e:	4b14      	ldr	r3, [pc, #80]	; (80094b0 <vTaskStartScheduler+0xd8>)
 8009460:	2201      	movs	r2, #1
 8009462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009464:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <vTaskStartScheduler+0xdc>)
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800946a:	f001 f9a1 	bl	800a7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800946e:	e00e      	b.n	800948e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009476:	d10a      	bne.n	800948e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	60fb      	str	r3, [r7, #12]
}
 800948a:	bf00      	nop
 800948c:	e7fe      	b.n	800948c <vTaskStartScheduler+0xb4>
}
 800948e:	bf00      	nop
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	0800c0bc 	.word	0x0800c0bc
 800949c:	08009c19 	.word	0x08009c19
 80094a0:	20001ef8 	.word	0x20001ef8
 80094a4:	20001a00 	.word	0x20001a00
 80094a8:	200001a0 	.word	0x200001a0
 80094ac:	20001ef4 	.word	0x20001ef4
 80094b0:	20001ee0 	.word	0x20001ee0
 80094b4:	20001ed8 	.word	0x20001ed8

080094b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094b8:	b480      	push	{r7}
 80094ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094bc:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <vTaskSuspendAll+0x18>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3301      	adds	r3, #1
 80094c2:	4a03      	ldr	r2, [pc, #12]	; (80094d0 <vTaskSuspendAll+0x18>)
 80094c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094c6:	bf00      	nop
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	20001efc 	.word	0x20001efc

080094d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094e2:	4b42      	ldr	r3, [pc, #264]	; (80095ec <xTaskResumeAll+0x118>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <xTaskResumeAll+0x2c>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	603b      	str	r3, [r7, #0]
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009500:	f001 f9f8 	bl	800a8f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009504:	4b39      	ldr	r3, [pc, #228]	; (80095ec <xTaskResumeAll+0x118>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3b01      	subs	r3, #1
 800950a:	4a38      	ldr	r2, [pc, #224]	; (80095ec <xTaskResumeAll+0x118>)
 800950c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800950e:	4b37      	ldr	r3, [pc, #220]	; (80095ec <xTaskResumeAll+0x118>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d162      	bne.n	80095dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009516:	4b36      	ldr	r3, [pc, #216]	; (80095f0 <xTaskResumeAll+0x11c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d05e      	beq.n	80095dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800951e:	e02f      	b.n	8009580 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009520:	4b34      	ldr	r3, [pc, #208]	; (80095f4 <xTaskResumeAll+0x120>)
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3318      	adds	r3, #24
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff f851 	bl	80085d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3304      	adds	r3, #4
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff f84c 	bl	80085d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009540:	4b2d      	ldr	r3, [pc, #180]	; (80095f8 <xTaskResumeAll+0x124>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	429a      	cmp	r2, r3
 8009546:	d903      	bls.n	8009550 <xTaskResumeAll+0x7c>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	4a2a      	ldr	r2, [pc, #168]	; (80095f8 <xTaskResumeAll+0x124>)
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4a27      	ldr	r2, [pc, #156]	; (80095fc <xTaskResumeAll+0x128>)
 800955e:	441a      	add	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f7fe ffd7 	bl	800851a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009570:	4b23      	ldr	r3, [pc, #140]	; (8009600 <xTaskResumeAll+0x12c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	429a      	cmp	r2, r3
 8009578:	d302      	bcc.n	8009580 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800957a:	4b22      	ldr	r3, [pc, #136]	; (8009604 <xTaskResumeAll+0x130>)
 800957c:	2201      	movs	r2, #1
 800957e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009580:	4b1c      	ldr	r3, [pc, #112]	; (80095f4 <xTaskResumeAll+0x120>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1cb      	bne.n	8009520 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800958e:	f000 fbfd 	bl	8009d8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009592:	4b1d      	ldr	r3, [pc, #116]	; (8009608 <xTaskResumeAll+0x134>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d010      	beq.n	80095c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800959e:	f000 f847 	bl	8009630 <xTaskIncrementTick>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80095a8:	4b16      	ldr	r3, [pc, #88]	; (8009604 <xTaskResumeAll+0x130>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1f1      	bne.n	800959e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80095ba:	4b13      	ldr	r3, [pc, #76]	; (8009608 <xTaskResumeAll+0x134>)
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095c0:	4b10      	ldr	r3, [pc, #64]	; (8009604 <xTaskResumeAll+0x130>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d009      	beq.n	80095dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095c8:	2301      	movs	r3, #1
 80095ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095cc:	4b0f      	ldr	r3, [pc, #60]	; (800960c <xTaskResumeAll+0x138>)
 80095ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095dc:	f001 f9ba 	bl	800a954 <vPortExitCritical>

	return xAlreadyYielded;
 80095e0:	68bb      	ldr	r3, [r7, #8]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20001efc 	.word	0x20001efc
 80095f0:	20001ed4 	.word	0x20001ed4
 80095f4:	20001e94 	.word	0x20001e94
 80095f8:	20001edc 	.word	0x20001edc
 80095fc:	20001a04 	.word	0x20001a04
 8009600:	20001a00 	.word	0x20001a00
 8009604:	20001ee8 	.word	0x20001ee8
 8009608:	20001ee4 	.word	0x20001ee4
 800960c:	e000ed04 	.word	0xe000ed04

08009610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009616:	4b05      	ldr	r3, [pc, #20]	; (800962c <xTaskGetTickCount+0x1c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800961c:	687b      	ldr	r3, [r7, #4]
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20001ed8 	.word	0x20001ed8

08009630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800963a:	4b4f      	ldr	r3, [pc, #316]	; (8009778 <xTaskIncrementTick+0x148>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f040 808f 	bne.w	8009762 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009644:	4b4d      	ldr	r3, [pc, #308]	; (800977c <xTaskIncrementTick+0x14c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800964c:	4a4b      	ldr	r2, [pc, #300]	; (800977c <xTaskIncrementTick+0x14c>)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d120      	bne.n	800969a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009658:	4b49      	ldr	r3, [pc, #292]	; (8009780 <xTaskIncrementTick+0x150>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <xTaskIncrementTick+0x48>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	603b      	str	r3, [r7, #0]
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <xTaskIncrementTick+0x46>
 8009678:	4b41      	ldr	r3, [pc, #260]	; (8009780 <xTaskIncrementTick+0x150>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	4b41      	ldr	r3, [pc, #260]	; (8009784 <xTaskIncrementTick+0x154>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a3f      	ldr	r2, [pc, #252]	; (8009780 <xTaskIncrementTick+0x150>)
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	4a3f      	ldr	r2, [pc, #252]	; (8009784 <xTaskIncrementTick+0x154>)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	4b3e      	ldr	r3, [pc, #248]	; (8009788 <xTaskIncrementTick+0x158>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	4a3d      	ldr	r2, [pc, #244]	; (8009788 <xTaskIncrementTick+0x158>)
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	f000 fb79 	bl	8009d8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800969a:	4b3c      	ldr	r3, [pc, #240]	; (800978c <xTaskIncrementTick+0x15c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d349      	bcc.n	8009738 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096a4:	4b36      	ldr	r3, [pc, #216]	; (8009780 <xTaskIncrementTick+0x150>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ae:	4b37      	ldr	r3, [pc, #220]	; (800978c <xTaskIncrementTick+0x15c>)
 80096b0:	f04f 32ff 	mov.w	r2, #4294967295
 80096b4:	601a      	str	r2, [r3, #0]
					break;
 80096b6:	e03f      	b.n	8009738 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b8:	4b31      	ldr	r3, [pc, #196]	; (8009780 <xTaskIncrementTick+0x150>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d203      	bcs.n	80096d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096d0:	4a2e      	ldr	r2, [pc, #184]	; (800978c <xTaskIncrementTick+0x15c>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096d6:	e02f      	b.n	8009738 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	3304      	adds	r3, #4
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fe ff79 	bl	80085d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	3318      	adds	r3, #24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe ff70 	bl	80085d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f8:	4b25      	ldr	r3, [pc, #148]	; (8009790 <xTaskIncrementTick+0x160>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d903      	bls.n	8009708 <xTaskIncrementTick+0xd8>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	4a22      	ldr	r2, [pc, #136]	; (8009790 <xTaskIncrementTick+0x160>)
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970c:	4613      	mov	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4a1f      	ldr	r2, [pc, #124]	; (8009794 <xTaskIncrementTick+0x164>)
 8009716:	441a      	add	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	3304      	adds	r3, #4
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f7fe fefb 	bl	800851a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009728:	4b1b      	ldr	r3, [pc, #108]	; (8009798 <xTaskIncrementTick+0x168>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	429a      	cmp	r2, r3
 8009730:	d3b8      	bcc.n	80096a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009732:	2301      	movs	r3, #1
 8009734:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009736:	e7b5      	b.n	80096a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009738:	4b17      	ldr	r3, [pc, #92]	; (8009798 <xTaskIncrementTick+0x168>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	4915      	ldr	r1, [pc, #84]	; (8009794 <xTaskIncrementTick+0x164>)
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	440b      	add	r3, r1
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d901      	bls.n	8009754 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009750:	2301      	movs	r3, #1
 8009752:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009754:	4b11      	ldr	r3, [pc, #68]	; (800979c <xTaskIncrementTick+0x16c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800975c:	2301      	movs	r3, #1
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	e004      	b.n	800976c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009762:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <xTaskIncrementTick+0x170>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3301      	adds	r3, #1
 8009768:	4a0d      	ldr	r2, [pc, #52]	; (80097a0 <xTaskIncrementTick+0x170>)
 800976a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800976c:	697b      	ldr	r3, [r7, #20]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20001efc 	.word	0x20001efc
 800977c:	20001ed8 	.word	0x20001ed8
 8009780:	20001e8c 	.word	0x20001e8c
 8009784:	20001e90 	.word	0x20001e90
 8009788:	20001eec 	.word	0x20001eec
 800978c:	20001ef4 	.word	0x20001ef4
 8009790:	20001edc 	.word	0x20001edc
 8009794:	20001a04 	.word	0x20001a04
 8009798:	20001a00 	.word	0x20001a00
 800979c:	20001ee8 	.word	0x20001ee8
 80097a0:	20001ee4 	.word	0x20001ee4

080097a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097aa:	4b2a      	ldr	r3, [pc, #168]	; (8009854 <vTaskSwitchContext+0xb0>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097b2:	4b29      	ldr	r3, [pc, #164]	; (8009858 <vTaskSwitchContext+0xb4>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097b8:	e046      	b.n	8009848 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80097ba:	4b27      	ldr	r3, [pc, #156]	; (8009858 <vTaskSwitchContext+0xb4>)
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c0:	4b26      	ldr	r3, [pc, #152]	; (800985c <vTaskSwitchContext+0xb8>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	e010      	b.n	80097ea <vTaskSwitchContext+0x46>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10a      	bne.n	80097e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	607b      	str	r3, [r7, #4]
}
 80097e0:	bf00      	nop
 80097e2:	e7fe      	b.n	80097e2 <vTaskSwitchContext+0x3e>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	491d      	ldr	r1, [pc, #116]	; (8009860 <vTaskSwitchContext+0xbc>)
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0e4      	beq.n	80097c8 <vTaskSwitchContext+0x24>
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4a15      	ldr	r2, [pc, #84]	; (8009860 <vTaskSwitchContext+0xbc>)
 800980a:	4413      	add	r3, r2
 800980c:	60bb      	str	r3, [r7, #8]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	605a      	str	r2, [r3, #4]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	3308      	adds	r3, #8
 8009820:	429a      	cmp	r2, r3
 8009822:	d104      	bne.n	800982e <vTaskSwitchContext+0x8a>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	605a      	str	r2, [r3, #4]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	4a0b      	ldr	r2, [pc, #44]	; (8009864 <vTaskSwitchContext+0xc0>)
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	4a08      	ldr	r2, [pc, #32]	; (800985c <vTaskSwitchContext+0xb8>)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800983e:	4b09      	ldr	r3, [pc, #36]	; (8009864 <vTaskSwitchContext+0xc0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3354      	adds	r3, #84	; 0x54
 8009844:	4a08      	ldr	r2, [pc, #32]	; (8009868 <vTaskSwitchContext+0xc4>)
 8009846:	6013      	str	r3, [r2, #0]
}
 8009848:	bf00      	nop
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	20001efc 	.word	0x20001efc
 8009858:	20001ee8 	.word	0x20001ee8
 800985c:	20001edc 	.word	0x20001edc
 8009860:	20001a04 	.word	0x20001a04
 8009864:	20001a00 	.word	0x20001a00
 8009868:	200001a0 	.word	0x200001a0

0800986c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	60fb      	str	r3, [r7, #12]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009892:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <vTaskPlaceOnEventList+0x44>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3318      	adds	r3, #24
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7fe fe61 	bl	8008562 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098a0:	2101      	movs	r1, #1
 80098a2:	6838      	ldr	r0, [r7, #0]
 80098a4:	f000 fb36 	bl	8009f14 <prvAddCurrentTaskToDelayedList>
}
 80098a8:	bf00      	nop
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20001a00 	.word	0x20001a00

080098b4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	617b      	str	r3, [r7, #20]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80098dc:	4b11      	ldr	r3, [pc, #68]	; (8009924 <vTaskPlaceOnUnorderedEventList+0x70>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	613b      	str	r3, [r7, #16]
}
 80098f6:	bf00      	nop
 80098f8:	e7fe      	b.n	80098f8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80098fa:	4b0b      	ldr	r3, [pc, #44]	; (8009928 <vTaskPlaceOnUnorderedEventList+0x74>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009904:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009906:	4b08      	ldr	r3, [pc, #32]	; (8009928 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3318      	adds	r3, #24
 800990c:	4619      	mov	r1, r3
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f7fe fe03 	bl	800851a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009914:	2101      	movs	r1, #1
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fafc 	bl	8009f14 <prvAddCurrentTaskToDelayedList>
}
 800991c:	bf00      	nop
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20001efc 	.word	0x20001efc
 8009928:	20001a00 	.word	0x20001a00

0800992c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	617b      	str	r3, [r7, #20]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <vTaskPlaceOnEventListRestricted+0x54>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3318      	adds	r3, #24
 800995a:	4619      	mov	r1, r3
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7fe fddc 	bl	800851a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009968:	f04f 33ff 	mov.w	r3, #4294967295
 800996c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	68b8      	ldr	r0, [r7, #8]
 8009972:	f000 facf 	bl	8009f14 <prvAddCurrentTaskToDelayedList>
	}
 8009976:	bf00      	nop
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20001a00 	.word	0x20001a00

08009984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10a      	bne.n	80099b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	60fb      	str	r3, [r7, #12]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	3318      	adds	r3, #24
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fe0d 	bl	80085d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ba:	4b1e      	ldr	r3, [pc, #120]	; (8009a34 <xTaskRemoveFromEventList+0xb0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d11d      	bne.n	80099fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe fe04 	bl	80085d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d0:	4b19      	ldr	r3, [pc, #100]	; (8009a38 <xTaskRemoveFromEventList+0xb4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d903      	bls.n	80099e0 <xTaskRemoveFromEventList+0x5c>
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	4a16      	ldr	r2, [pc, #88]	; (8009a38 <xTaskRemoveFromEventList+0xb4>)
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4a13      	ldr	r2, [pc, #76]	; (8009a3c <xTaskRemoveFromEventList+0xb8>)
 80099ee:	441a      	add	r2, r3
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fe fd8f 	bl	800851a <vListInsertEnd>
 80099fc:	e005      	b.n	8009a0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	3318      	adds	r3, #24
 8009a02:	4619      	mov	r1, r3
 8009a04:	480e      	ldr	r0, [pc, #56]	; (8009a40 <xTaskRemoveFromEventList+0xbc>)
 8009a06:	f7fe fd88 	bl	800851a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0e:	4b0d      	ldr	r3, [pc, #52]	; (8009a44 <xTaskRemoveFromEventList+0xc0>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d905      	bls.n	8009a24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <xTaskRemoveFromEventList+0xc4>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	e001      	b.n	8009a28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a28:	697b      	ldr	r3, [r7, #20]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20001efc 	.word	0x20001efc
 8009a38:	20001edc 	.word	0x20001edc
 8009a3c:	20001a04 	.word	0x20001a04
 8009a40:	20001e94 	.word	0x20001e94
 8009a44:	20001a00 	.word	0x20001a00
 8009a48:	20001ee8 	.word	0x20001ee8

08009a4c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009a56:	4b29      	ldr	r3, [pc, #164]	; (8009afc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	613b      	str	r3, [r7, #16]
}
 8009a70:	bf00      	nop
 8009a72:	e7fe      	b.n	8009a72 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	60fb      	str	r3, [r7, #12]
}
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7fe fd97 	bl	80085d4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fd92 	bl	80085d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab4:	4b12      	ldr	r3, [pc, #72]	; (8009b00 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d903      	bls.n	8009ac4 <vTaskRemoveFromUnorderedEventList+0x78>
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	4a0f      	ldr	r2, [pc, #60]	; (8009b00 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4a0c      	ldr	r2, [pc, #48]	; (8009b04 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009ad2:	441a      	add	r2, r3
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7fe fd1d 	bl	800851a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae4:	4b08      	ldr	r3, [pc, #32]	; (8009b08 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d902      	bls.n	8009af4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009af0:	2201      	movs	r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
	}
}
 8009af4:	bf00      	nop
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20001efc 	.word	0x20001efc
 8009b00:	20001edc 	.word	0x20001edc
 8009b04:	20001a04 	.word	0x20001a04
 8009b08:	20001a00 	.word	0x20001a00
 8009b0c:	20001ee8 	.word	0x20001ee8

08009b10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <vTaskInternalSetTimeOutState+0x24>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b20:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <vTaskInternalSetTimeOutState+0x28>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	605a      	str	r2, [r3, #4]
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20001eec 	.word	0x20001eec
 8009b38:	20001ed8 	.word	0x20001ed8

08009b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b088      	sub	sp, #32
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	613b      	str	r3, [r7, #16]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	60fb      	str	r3, [r7, #12]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b7e:	f000 feb9 	bl	800a8f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b82:	4b1d      	ldr	r3, [pc, #116]	; (8009bf8 <xTaskCheckForTimeOut+0xbc>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9a:	d102      	bne.n	8009ba2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	61fb      	str	r3, [r7, #28]
 8009ba0:	e023      	b.n	8009bea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <xTaskCheckForTimeOut+0xc0>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d007      	beq.n	8009bbe <xTaskCheckForTimeOut+0x82>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d302      	bcc.n	8009bbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	61fb      	str	r3, [r7, #28]
 8009bbc:	e015      	b.n	8009bea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d20b      	bcs.n	8009be0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	1ad2      	subs	r2, r2, r3
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff ff9b 	bl	8009b10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
 8009bde:	e004      	b.n	8009bea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009be6:	2301      	movs	r3, #1
 8009be8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bea:	f000 feb3 	bl	800a954 <vPortExitCritical>

	return xReturn;
 8009bee:	69fb      	ldr	r3, [r7, #28]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3720      	adds	r7, #32
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	20001ed8 	.word	0x20001ed8
 8009bfc:	20001eec 	.word	0x20001eec

08009c00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c04:	4b03      	ldr	r3, [pc, #12]	; (8009c14 <vTaskMissedYield+0x14>)
 8009c06:	2201      	movs	r2, #1
 8009c08:	601a      	str	r2, [r3, #0]
}
 8009c0a:	bf00      	nop
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	20001ee8 	.word	0x20001ee8

08009c18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c20:	f000 f852 	bl	8009cc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c24:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <prvIdleTask+0x28>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d9f9      	bls.n	8009c20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c2c:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <prvIdleTask+0x2c>)
 8009c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c3c:	e7f0      	b.n	8009c20 <prvIdleTask+0x8>
 8009c3e:	bf00      	nop
 8009c40:	20001a04 	.word	0x20001a04
 8009c44:	e000ed04 	.word	0xe000ed04

08009c48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c4e:	2300      	movs	r3, #0
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	e00c      	b.n	8009c6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4a12      	ldr	r2, [pc, #72]	; (8009ca8 <prvInitialiseTaskLists+0x60>)
 8009c60:	4413      	add	r3, r2
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fc2c 	bl	80084c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	607b      	str	r3, [r7, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b37      	cmp	r3, #55	; 0x37
 8009c72:	d9ef      	bls.n	8009c54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c74:	480d      	ldr	r0, [pc, #52]	; (8009cac <prvInitialiseTaskLists+0x64>)
 8009c76:	f7fe fc23 	bl	80084c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c7a:	480d      	ldr	r0, [pc, #52]	; (8009cb0 <prvInitialiseTaskLists+0x68>)
 8009c7c:	f7fe fc20 	bl	80084c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c80:	480c      	ldr	r0, [pc, #48]	; (8009cb4 <prvInitialiseTaskLists+0x6c>)
 8009c82:	f7fe fc1d 	bl	80084c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c86:	480c      	ldr	r0, [pc, #48]	; (8009cb8 <prvInitialiseTaskLists+0x70>)
 8009c88:	f7fe fc1a 	bl	80084c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c8c:	480b      	ldr	r0, [pc, #44]	; (8009cbc <prvInitialiseTaskLists+0x74>)
 8009c8e:	f7fe fc17 	bl	80084c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c92:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <prvInitialiseTaskLists+0x78>)
 8009c94:	4a05      	ldr	r2, [pc, #20]	; (8009cac <prvInitialiseTaskLists+0x64>)
 8009c96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c98:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <prvInitialiseTaskLists+0x7c>)
 8009c9a:	4a05      	ldr	r2, [pc, #20]	; (8009cb0 <prvInitialiseTaskLists+0x68>)
 8009c9c:	601a      	str	r2, [r3, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20001a04 	.word	0x20001a04
 8009cac:	20001e64 	.word	0x20001e64
 8009cb0:	20001e78 	.word	0x20001e78
 8009cb4:	20001e94 	.word	0x20001e94
 8009cb8:	20001ea8 	.word	0x20001ea8
 8009cbc:	20001ec0 	.word	0x20001ec0
 8009cc0:	20001e8c 	.word	0x20001e8c
 8009cc4:	20001e90 	.word	0x20001e90

08009cc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cce:	e019      	b.n	8009d04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cd0:	f000 fe10 	bl	800a8f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd4:	4b10      	ldr	r3, [pc, #64]	; (8009d18 <prvCheckTasksWaitingTermination+0x50>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fc77 	bl	80085d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <prvCheckTasksWaitingTermination+0x54>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	4a0b      	ldr	r2, [pc, #44]	; (8009d1c <prvCheckTasksWaitingTermination+0x54>)
 8009cee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cf0:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <prvCheckTasksWaitingTermination+0x58>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	4a0a      	ldr	r2, [pc, #40]	; (8009d20 <prvCheckTasksWaitingTermination+0x58>)
 8009cf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cfa:	f000 fe2b 	bl	800a954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f810 	bl	8009d24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d04:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <prvCheckTasksWaitingTermination+0x58>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e1      	bne.n	8009cd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d0c:	bf00      	nop
 8009d0e:	bf00      	nop
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20001ea8 	.word	0x20001ea8
 8009d1c:	20001ed4 	.word	0x20001ed4
 8009d20:	20001ebc 	.word	0x20001ebc

08009d24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3354      	adds	r3, #84	; 0x54
 8009d30:	4618      	mov	r0, r3
 8009d32:	f002 f939 	bl	800bfa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d108      	bne.n	8009d52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 ffc3 	bl	800acd0 <vPortFree>
				vPortFree( pxTCB );
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 ffc0 	bl	800acd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d50:	e018      	b.n	8009d84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d103      	bne.n	8009d64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 ffb7 	bl	800acd0 <vPortFree>
	}
 8009d62:	e00f      	b.n	8009d84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d00a      	beq.n	8009d84 <prvDeleteTCB+0x60>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	60fb      	str	r3, [r7, #12]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <prvDeleteTCB+0x5e>
	}
 8009d84:	bf00      	nop
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d92:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <prvResetNextTaskUnblockTime+0x38>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d104      	bne.n	8009da6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d9c:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <prvResetNextTaskUnblockTime+0x3c>)
 8009d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009da2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009da4:	e008      	b.n	8009db8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da6:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <prvResetNextTaskUnblockTime+0x38>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	4a04      	ldr	r2, [pc, #16]	; (8009dc8 <prvResetNextTaskUnblockTime+0x3c>)
 8009db6:	6013      	str	r3, [r2, #0]
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	20001e8c 	.word	0x20001e8c
 8009dc8:	20001ef4 	.word	0x20001ef4

08009dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dd2:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <xTaskGetSchedulerState+0x34>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d102      	bne.n	8009de0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	e008      	b.n	8009df2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009de0:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <xTaskGetSchedulerState+0x38>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009de8:	2302      	movs	r3, #2
 8009dea:	607b      	str	r3, [r7, #4]
 8009dec:	e001      	b.n	8009df2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dee:	2300      	movs	r3, #0
 8009df0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009df2:	687b      	ldr	r3, [r7, #4]
	}
 8009df4:	4618      	mov	r0, r3
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	20001ee0 	.word	0x20001ee0
 8009e04:	20001efc 	.word	0x20001efc

08009e08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d056      	beq.n	8009ecc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e1e:	4b2e      	ldr	r3, [pc, #184]	; (8009ed8 <xTaskPriorityDisinherit+0xd0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d00a      	beq.n	8009e3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	60fb      	str	r3, [r7, #12]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	60bb      	str	r3, [r7, #8]
}
 8009e58:	bf00      	nop
 8009e5a:	e7fe      	b.n	8009e5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e60:	1e5a      	subs	r2, r3, #1
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d02c      	beq.n	8009ecc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d128      	bne.n	8009ecc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fba8 	bl	80085d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9c:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <xTaskPriorityDisinherit+0xd4>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d903      	bls.n	8009eac <xTaskPriorityDisinherit+0xa4>
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	4a0c      	ldr	r2, [pc, #48]	; (8009edc <xTaskPriorityDisinherit+0xd4>)
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4a09      	ldr	r2, [pc, #36]	; (8009ee0 <xTaskPriorityDisinherit+0xd8>)
 8009eba:	441a      	add	r2, r3
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	f7fe fb29 	bl	800851a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ecc:	697b      	ldr	r3, [r7, #20]
	}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20001a00 	.word	0x20001a00
 8009edc:	20001edc 	.word	0x20001edc
 8009ee0:	20001a04 	.word	0x20001a04

08009ee4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009eea:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <uxTaskResetEventItemValue+0x2c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef2:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <uxTaskResetEventItemValue+0x2c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef8:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <uxTaskResetEventItemValue+0x2c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009f00:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009f02:	687b      	ldr	r3, [r7, #4]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	20001a00 	.word	0x20001a00

08009f14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f1e:	4b21      	ldr	r3, [pc, #132]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f24:	4b20      	ldr	r3, [pc, #128]	; (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fb52 	bl	80085d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f36:	d10a      	bne.n	8009f4e <prvAddCurrentTaskToDelayedList+0x3a>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d007      	beq.n	8009f4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f3e:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4819      	ldr	r0, [pc, #100]	; (8009fac <prvAddCurrentTaskToDelayedList+0x98>)
 8009f48:	f7fe fae7 	bl	800851a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f4c:	e026      	b.n	8009f9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f56:	4b14      	ldr	r3, [pc, #80]	; (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d209      	bcs.n	8009f7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f66:	4b12      	ldr	r3, [pc, #72]	; (8009fb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7fe faf5 	bl	8008562 <vListInsert>
}
 8009f78:	e010      	b.n	8009f9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4619      	mov	r1, r3
 8009f86:	4610      	mov	r0, r2
 8009f88:	f7fe faeb 	bl	8008562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d202      	bcs.n	8009f9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f96:	4a08      	ldr	r2, [pc, #32]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	6013      	str	r3, [r2, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20001ed8 	.word	0x20001ed8
 8009fa8:	20001a00 	.word	0x20001a00
 8009fac:	20001ec0 	.word	0x20001ec0
 8009fb0:	20001e90 	.word	0x20001e90
 8009fb4:	20001e8c 	.word	0x20001e8c
 8009fb8:	20001ef4 	.word	0x20001ef4

08009fbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08a      	sub	sp, #40	; 0x28
 8009fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fc6:	f000 fb07 	bl	800a5d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fca:	4b1c      	ldr	r3, [pc, #112]	; (800a03c <xTimerCreateTimerTask+0x80>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d021      	beq.n	800a016 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fda:	1d3a      	adds	r2, r7, #4
 8009fdc:	f107 0108 	add.w	r1, r7, #8
 8009fe0:	f107 030c 	add.w	r3, r7, #12
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe f845 	bl	8008074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	9202      	str	r2, [sp, #8]
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	460a      	mov	r2, r1
 8009ffc:	4910      	ldr	r1, [pc, #64]	; (800a040 <xTimerCreateTimerTask+0x84>)
 8009ffe:	4811      	ldr	r0, [pc, #68]	; (800a044 <xTimerCreateTimerTask+0x88>)
 800a000:	f7fe fffe 	bl	8009000 <xTaskCreateStatic>
 800a004:	4603      	mov	r3, r0
 800a006:	4a10      	ldr	r2, [pc, #64]	; (800a048 <xTimerCreateTimerTask+0x8c>)
 800a008:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a00a:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <xTimerCreateTimerTask+0x8c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a012:	2301      	movs	r3, #1
 800a014:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	613b      	str	r3, [r7, #16]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a032:	697b      	ldr	r3, [r7, #20]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20001f30 	.word	0x20001f30
 800a040:	0800c0c4 	.word	0x0800c0c4
 800a044:	0800a181 	.word	0x0800a181
 800a048:	20001f34 	.word	0x20001f34

0800a04c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b08a      	sub	sp, #40	; 0x28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
 800a058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10a      	bne.n	800a07a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	623b      	str	r3, [r7, #32]
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a07a:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <xTimerGenericCommand+0x98>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d02a      	beq.n	800a0d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b05      	cmp	r3, #5
 800a092:	dc18      	bgt.n	800a0c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a094:	f7ff fe9a 	bl	8009dcc <xTaskGetSchedulerState>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d109      	bne.n	800a0b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a09e:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <xTimerGenericCommand+0x98>)
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	f107 0110 	add.w	r1, r7, #16
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0aa:	f7fe fbc1 	bl	8008830 <xQueueGenericSend>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24
 800a0b0:	e012      	b.n	800a0d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0b2:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <xTimerGenericCommand+0x98>)
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	f107 0110 	add.w	r1, r7, #16
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f7fe fbb7 	bl	8008830 <xQueueGenericSend>
 800a0c2:	6278      	str	r0, [r7, #36]	; 0x24
 800a0c4:	e008      	b.n	800a0d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0c6:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <xTimerGenericCommand+0x98>)
 800a0c8:	6818      	ldr	r0, [r3, #0]
 800a0ca:	f107 0110 	add.w	r1, r7, #16
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	f7fe fcab 	bl	8008a2c <xQueueGenericSendFromISR>
 800a0d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3728      	adds	r7, #40	; 0x28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20001f30 	.word	0x20001f30

0800a0e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f2:	4b22      	ldr	r3, [pc, #136]	; (800a17c <prvProcessExpiredTimer+0x94>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	3304      	adds	r3, #4
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe fa67 	bl	80085d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d022      	beq.n	800a15a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	699a      	ldr	r2, [r3, #24]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	18d1      	adds	r1, r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	6978      	ldr	r0, [r7, #20]
 800a122:	f000 f8d1 	bl	800a2c8 <prvInsertTimerInActiveList>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01f      	beq.n	800a16c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a12c:	2300      	movs	r3, #0
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	2300      	movs	r3, #0
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	2100      	movs	r1, #0
 800a136:	6978      	ldr	r0, [r7, #20]
 800a138:	f7ff ff88 	bl	800a04c <xTimerGenericCommand>
 800a13c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d113      	bne.n	800a16c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	60fb      	str	r3, [r7, #12]
}
 800a156:	bf00      	nop
 800a158:	e7fe      	b.n	800a158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a160:	f023 0301 	bic.w	r3, r3, #1
 800a164:	b2da      	uxtb	r2, r3
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	6978      	ldr	r0, [r7, #20]
 800a172:	4798      	blx	r3
}
 800a174:	bf00      	nop
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	20001f28 	.word	0x20001f28

0800a180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a188:	f107 0308 	add.w	r3, r7, #8
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f857 	bl	800a240 <prvGetNextExpireTime>
 800a192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4619      	mov	r1, r3
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 f803 	bl	800a1a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a19e:	f000 f8d5 	bl	800a34c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1a2:	e7f1      	b.n	800a188 <prvTimerTask+0x8>

0800a1a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1ae:	f7ff f983 	bl	80094b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1b2:	f107 0308 	add.w	r3, r7, #8
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f866 	bl	800a288 <prvSampleTimeNow>
 800a1bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d130      	bne.n	800a226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10a      	bne.n	800a1e0 <prvProcessTimerOrBlockTask+0x3c>
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d806      	bhi.n	800a1e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1d2:	f7ff f97f 	bl	80094d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1d6:	68f9      	ldr	r1, [r7, #12]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff ff85 	bl	800a0e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1de:	e024      	b.n	800a22a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d008      	beq.n	800a1f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1e6:	4b13      	ldr	r3, [pc, #76]	; (800a234 <prvProcessTimerOrBlockTask+0x90>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <prvProcessTimerOrBlockTask+0x50>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e000      	b.n	800a1f6 <prvProcessTimerOrBlockTask+0x52>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1f8:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <prvProcessTimerOrBlockTask+0x94>)
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	4619      	mov	r1, r3
 800a206:	f7fe fec7 	bl	8008f98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a20a:	f7ff f963 	bl	80094d4 <xTaskResumeAll>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a214:	4b09      	ldr	r3, [pc, #36]	; (800a23c <prvProcessTimerOrBlockTask+0x98>)
 800a216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	f3bf 8f6f 	isb	sy
}
 800a224:	e001      	b.n	800a22a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a226:	f7ff f955 	bl	80094d4 <xTaskResumeAll>
}
 800a22a:	bf00      	nop
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20001f2c 	.word	0x20001f2c
 800a238:	20001f30 	.word	0x20001f30
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a248:	4b0e      	ldr	r3, [pc, #56]	; (800a284 <prvGetNextExpireTime+0x44>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <prvGetNextExpireTime+0x16>
 800a252:	2201      	movs	r2, #1
 800a254:	e000      	b.n	800a258 <prvGetNextExpireTime+0x18>
 800a256:	2200      	movs	r2, #0
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d105      	bne.n	800a270 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a264:	4b07      	ldr	r3, [pc, #28]	; (800a284 <prvGetNextExpireTime+0x44>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	e001      	b.n	800a274 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a274:	68fb      	ldr	r3, [r7, #12]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	20001f28 	.word	0x20001f28

0800a288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a290:	f7ff f9be 	bl	8009610 <xTaskGetTickCount>
 800a294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <prvSampleTimeNow+0x3c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d205      	bcs.n	800a2ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2a0:	f000 f936 	bl	800a510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	e002      	b.n	800a2b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2b2:	4a04      	ldr	r2, [pc, #16]	; (800a2c4 <prvSampleTimeNow+0x3c>)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20001f38 	.word	0x20001f38

0800a2c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d812      	bhi.n	800a314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	1ad2      	subs	r2, r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d302      	bcc.n	800a302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	e01b      	b.n	800a33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a302:	4b10      	ldr	r3, [pc, #64]	; (800a344 <prvInsertTimerInActiveList+0x7c>)
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3304      	adds	r3, #4
 800a30a:	4619      	mov	r1, r3
 800a30c:	4610      	mov	r0, r2
 800a30e:	f7fe f928 	bl	8008562 <vListInsert>
 800a312:	e012      	b.n	800a33a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d206      	bcs.n	800a32a <prvInsertTimerInActiveList+0x62>
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d302      	bcc.n	800a32a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a324:	2301      	movs	r3, #1
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	e007      	b.n	800a33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a32a:	4b07      	ldr	r3, [pc, #28]	; (800a348 <prvInsertTimerInActiveList+0x80>)
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3304      	adds	r3, #4
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7fe f914 	bl	8008562 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a33a:	697b      	ldr	r3, [r7, #20]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20001f2c 	.word	0x20001f2c
 800a348:	20001f28 	.word	0x20001f28

0800a34c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08e      	sub	sp, #56	; 0x38
 800a350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a352:	e0ca      	b.n	800a4ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	da18      	bge.n	800a38c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a35a:	1d3b      	adds	r3, r7, #4
 800a35c:	3304      	adds	r3, #4
 800a35e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	61fb      	str	r3, [r7, #28]
}
 800a378:	bf00      	nop
 800a37a:	e7fe      	b.n	800a37a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a382:	6850      	ldr	r0, [r2, #4]
 800a384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a386:	6892      	ldr	r2, [r2, #8]
 800a388:	4611      	mov	r1, r2
 800a38a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f2c0 80aa 	blt.w	800a4e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe f915 	bl	80085d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff ff6b 	bl	800a288 <prvSampleTimeNow>
 800a3b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b09      	cmp	r3, #9
 800a3b8:	f200 8097 	bhi.w	800a4ea <prvProcessReceivedCommands+0x19e>
 800a3bc:	a201      	add	r2, pc, #4	; (adr r2, 800a3c4 <prvProcessReceivedCommands+0x78>)
 800a3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c2:	bf00      	nop
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	0800a3ed 	.word	0x0800a3ed
 800a3cc:	0800a3ed 	.word	0x0800a3ed
 800a3d0:	0800a461 	.word	0x0800a461
 800a3d4:	0800a475 	.word	0x0800a475
 800a3d8:	0800a4bf 	.word	0x0800a4bf
 800a3dc:	0800a3ed 	.word	0x0800a3ed
 800a3e0:	0800a3ed 	.word	0x0800a3ed
 800a3e4:	0800a461 	.word	0x0800a461
 800a3e8:	0800a475 	.word	0x0800a475
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f2:	f043 0301 	orr.w	r3, r3, #1
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	18d1      	adds	r1, r2, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a40c:	f7ff ff5c 	bl	800a2c8 <prvInsertTimerInActiveList>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d069      	beq.n	800a4ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a41c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d05e      	beq.n	800a4ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	441a      	add	r2, r3
 800a434:	2300      	movs	r3, #0
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	2300      	movs	r3, #0
 800a43a:	2100      	movs	r1, #0
 800a43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a43e:	f7ff fe05 	bl	800a04c <xTimerGenericCommand>
 800a442:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d14f      	bne.n	800a4ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	61bb      	str	r3, [r7, #24]
}
 800a45c:	bf00      	nop
 800a45e:	e7fe      	b.n	800a45e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a472:	e03a      	b.n	800a4ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a47a:	f043 0301 	orr.w	r3, r3, #1
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	617b      	str	r3, [r7, #20]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	18d1      	adds	r1, r2, r3
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b8:	f7ff ff06 	bl	800a2c8 <prvInsertTimerInActiveList>
					break;
 800a4bc:	e015      	b.n	800a4ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4c4:	f003 0302 	and.w	r3, r3, #2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d103      	bne.n	800a4d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ce:	f000 fbff 	bl	800acd0 <vPortFree>
 800a4d2:	e00a      	b.n	800a4ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4da:	f023 0301 	bic.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4e6:	e000      	b.n	800a4ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a4e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4ea:	4b08      	ldr	r3, [pc, #32]	; (800a50c <prvProcessReceivedCommands+0x1c0>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	1d39      	adds	r1, r7, #4
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fb36 	bl	8008b64 <xQueueReceive>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f47f af2a 	bne.w	800a354 <prvProcessReceivedCommands+0x8>
	}
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	3730      	adds	r7, #48	; 0x30
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20001f30 	.word	0x20001f30

0800a510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a516:	e048      	b.n	800a5aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a518:	4b2d      	ldr	r3, [pc, #180]	; (800a5d0 <prvSwitchTimerLists+0xc0>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a522:	4b2b      	ldr	r3, [pc, #172]	; (800a5d0 <prvSwitchTimerLists+0xc0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3304      	adds	r3, #4
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe f84f 	bl	80085d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d02e      	beq.n	800a5aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4413      	add	r3, r2
 800a554:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d90e      	bls.n	800a57c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a56a:	4b19      	ldr	r3, [pc, #100]	; (800a5d0 <prvSwitchTimerLists+0xc0>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3304      	adds	r3, #4
 800a572:	4619      	mov	r1, r3
 800a574:	4610      	mov	r0, r2
 800a576:	f7fd fff4 	bl	8008562 <vListInsert>
 800a57a:	e016      	b.n	800a5aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a57c:	2300      	movs	r3, #0
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	2300      	movs	r3, #0
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	2100      	movs	r1, #0
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff fd60 	bl	800a04c <xTimerGenericCommand>
 800a58c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	603b      	str	r3, [r7, #0]
}
 800a5a6:	bf00      	nop
 800a5a8:	e7fe      	b.n	800a5a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5aa:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <prvSwitchTimerLists+0xc0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1b1      	bne.n	800a518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <prvSwitchTimerLists+0xc0>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5ba:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <prvSwitchTimerLists+0xc4>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a04      	ldr	r2, [pc, #16]	; (800a5d0 <prvSwitchTimerLists+0xc0>)
 800a5c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5c2:	4a04      	ldr	r2, [pc, #16]	; (800a5d4 <prvSwitchTimerLists+0xc4>)
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	6013      	str	r3, [r2, #0]
}
 800a5c8:	bf00      	nop
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20001f28 	.word	0x20001f28
 800a5d4:	20001f2c 	.word	0x20001f2c

0800a5d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5de:	f000 f989 	bl	800a8f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5e2:	4b15      	ldr	r3, [pc, #84]	; (800a638 <prvCheckForValidListAndQueue+0x60>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d120      	bne.n	800a62c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5ea:	4814      	ldr	r0, [pc, #80]	; (800a63c <prvCheckForValidListAndQueue+0x64>)
 800a5ec:	f7fd ff68 	bl	80084c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5f0:	4813      	ldr	r0, [pc, #76]	; (800a640 <prvCheckForValidListAndQueue+0x68>)
 800a5f2:	f7fd ff65 	bl	80084c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5f6:	4b13      	ldr	r3, [pc, #76]	; (800a644 <prvCheckForValidListAndQueue+0x6c>)
 800a5f8:	4a10      	ldr	r2, [pc, #64]	; (800a63c <prvCheckForValidListAndQueue+0x64>)
 800a5fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5fc:	4b12      	ldr	r3, [pc, #72]	; (800a648 <prvCheckForValidListAndQueue+0x70>)
 800a5fe:	4a10      	ldr	r2, [pc, #64]	; (800a640 <prvCheckForValidListAndQueue+0x68>)
 800a600:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a602:	2300      	movs	r3, #0
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	4b11      	ldr	r3, [pc, #68]	; (800a64c <prvCheckForValidListAndQueue+0x74>)
 800a608:	4a11      	ldr	r2, [pc, #68]	; (800a650 <prvCheckForValidListAndQueue+0x78>)
 800a60a:	2110      	movs	r1, #16
 800a60c:	200a      	movs	r0, #10
 800a60e:	f7fe f873 	bl	80086f8 <xQueueGenericCreateStatic>
 800a612:	4603      	mov	r3, r0
 800a614:	4a08      	ldr	r2, [pc, #32]	; (800a638 <prvCheckForValidListAndQueue+0x60>)
 800a616:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a618:	4b07      	ldr	r3, [pc, #28]	; (800a638 <prvCheckForValidListAndQueue+0x60>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d005      	beq.n	800a62c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a620:	4b05      	ldr	r3, [pc, #20]	; (800a638 <prvCheckForValidListAndQueue+0x60>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	490b      	ldr	r1, [pc, #44]	; (800a654 <prvCheckForValidListAndQueue+0x7c>)
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe fc8c 	bl	8008f44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a62c:	f000 f992 	bl	800a954 <vPortExitCritical>
}
 800a630:	bf00      	nop
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	20001f30 	.word	0x20001f30
 800a63c:	20001f00 	.word	0x20001f00
 800a640:	20001f14 	.word	0x20001f14
 800a644:	20001f28 	.word	0x20001f28
 800a648:	20001f2c 	.word	0x20001f2c
 800a64c:	20001fdc 	.word	0x20001fdc
 800a650:	20001f3c 	.word	0x20001f3c
 800a654:	0800c0cc 	.word	0x0800c0cc

0800a658 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	; 0x28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a666:	f06f 0301 	mvn.w	r3, #1
 800a66a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a678:	4b06      	ldr	r3, [pc, #24]	; (800a694 <xTimerPendFunctionCallFromISR+0x3c>)
 800a67a:	6818      	ldr	r0, [r3, #0]
 800a67c:	f107 0114 	add.w	r1, r7, #20
 800a680:	2300      	movs	r3, #0
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	f7fe f9d2 	bl	8008a2c <xQueueGenericSendFromISR>
 800a688:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3728      	adds	r7, #40	; 0x28
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20001f30 	.word	0x20001f30

0800a698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3b04      	subs	r3, #4
 800a6a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	f023 0201 	bic.w	r2, r3, #1
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3b04      	subs	r3, #4
 800a6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6c8:	4a0c      	ldr	r2, [pc, #48]	; (800a6fc <pxPortInitialiseStack+0x64>)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3b14      	subs	r3, #20
 800a6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3b04      	subs	r3, #4
 800a6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f06f 0202 	mvn.w	r2, #2
 800a6e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3b20      	subs	r3, #32
 800a6ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	0800a701 	.word	0x0800a701

0800a700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a70a:	4b12      	ldr	r3, [pc, #72]	; (800a754 <prvTaskExitError+0x54>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a712:	d00a      	beq.n	800a72a <prvTaskExitError+0x2a>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	60fb      	str	r3, [r7, #12]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <prvTaskExitError+0x28>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	60bb      	str	r3, [r7, #8]
}
 800a73c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a73e:	bf00      	nop
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0fc      	beq.n	800a740 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	2000000c 	.word	0x2000000c
	...

0800a760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <pxCurrentTCBConst2>)
 800a762:	6819      	ldr	r1, [r3, #0]
 800a764:	6808      	ldr	r0, [r1, #0]
 800a766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76a:	f380 8809 	msr	PSP, r0
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f04f 0000 	mov.w	r0, #0
 800a776:	f380 8811 	msr	BASEPRI, r0
 800a77a:	4770      	bx	lr
 800a77c:	f3af 8000 	nop.w

0800a780 <pxCurrentTCBConst2>:
 800a780:	20001a00 	.word	0x20001a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop

0800a788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a788:	4808      	ldr	r0, [pc, #32]	; (800a7ac <prvPortStartFirstTask+0x24>)
 800a78a:	6800      	ldr	r0, [r0, #0]
 800a78c:	6800      	ldr	r0, [r0, #0]
 800a78e:	f380 8808 	msr	MSP, r0
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	f380 8814 	msr	CONTROL, r0
 800a79a:	b662      	cpsie	i
 800a79c:	b661      	cpsie	f
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	df00      	svc	0
 800a7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7aa:	bf00      	nop
 800a7ac:	e000ed08 	.word	0xe000ed08

0800a7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7b6:	4b46      	ldr	r3, [pc, #280]	; (800a8d0 <xPortStartScheduler+0x120>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a46      	ldr	r2, [pc, #280]	; (800a8d4 <xPortStartScheduler+0x124>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d10a      	bne.n	800a7d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	613b      	str	r3, [r7, #16]
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7d6:	4b3e      	ldr	r3, [pc, #248]	; (800a8d0 <xPortStartScheduler+0x120>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a3f      	ldr	r2, [pc, #252]	; (800a8d8 <xPortStartScheduler+0x128>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d10a      	bne.n	800a7f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	60fb      	str	r3, [r7, #12]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7f6:	4b39      	ldr	r3, [pc, #228]	; (800a8dc <xPortStartScheduler+0x12c>)
 800a7f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	22ff      	movs	r2, #255	; 0xff
 800a806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	4b31      	ldr	r3, [pc, #196]	; (800a8e0 <xPortStartScheduler+0x130>)
 800a81c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a81e:	4b31      	ldr	r3, [pc, #196]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a820:	2207      	movs	r2, #7
 800a822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a824:	e009      	b.n	800a83a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a826:	4b2f      	ldr	r3, [pc, #188]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	4a2d      	ldr	r2, [pc, #180]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a82e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	b2db      	uxtb	r3, r3
 800a838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a83a:	78fb      	ldrb	r3, [r7, #3]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a842:	2b80      	cmp	r3, #128	; 0x80
 800a844:	d0ef      	beq.n	800a826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a846:	4b27      	ldr	r3, [pc, #156]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f1c3 0307 	rsb	r3, r3, #7
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d00a      	beq.n	800a868 <xPortStartScheduler+0xb8>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	60bb      	str	r3, [r7, #8]
}
 800a864:	bf00      	nop
 800a866:	e7fe      	b.n	800a866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a868:	4b1e      	ldr	r3, [pc, #120]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	021b      	lsls	r3, r3, #8
 800a86e:	4a1d      	ldr	r2, [pc, #116]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a872:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a87a:	4a1a      	ldr	r2, [pc, #104]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a87c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	b2da      	uxtb	r2, r3
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a886:	4b18      	ldr	r3, [pc, #96]	; (800a8e8 <xPortStartScheduler+0x138>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a17      	ldr	r2, [pc, #92]	; (800a8e8 <xPortStartScheduler+0x138>)
 800a88c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a892:	4b15      	ldr	r3, [pc, #84]	; (800a8e8 <xPortStartScheduler+0x138>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a14      	ldr	r2, [pc, #80]	; (800a8e8 <xPortStartScheduler+0x138>)
 800a898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a89c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a89e:	f000 f8dd 	bl	800aa5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8a2:	4b12      	ldr	r3, [pc, #72]	; (800a8ec <xPortStartScheduler+0x13c>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8a8:	f000 f8fc 	bl	800aaa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8ac:	4b10      	ldr	r3, [pc, #64]	; (800a8f0 <xPortStartScheduler+0x140>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a0f      	ldr	r2, [pc, #60]	; (800a8f0 <xPortStartScheduler+0x140>)
 800a8b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8b8:	f7ff ff66 	bl	800a788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8bc:	f7fe ff72 	bl	80097a4 <vTaskSwitchContext>
	prvTaskExitError();
 800a8c0:	f7ff ff1e 	bl	800a700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	e000ed00 	.word	0xe000ed00
 800a8d4:	410fc271 	.word	0x410fc271
 800a8d8:	410fc270 	.word	0x410fc270
 800a8dc:	e000e400 	.word	0xe000e400
 800a8e0:	2000202c 	.word	0x2000202c
 800a8e4:	20002030 	.word	0x20002030
 800a8e8:	e000ed20 	.word	0xe000ed20
 800a8ec:	2000000c 	.word	0x2000000c
 800a8f0:	e000ef34 	.word	0xe000ef34

0800a8f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	607b      	str	r3, [r7, #4]
}
 800a90c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a90e:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <vPortEnterCritical+0x58>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	3301      	adds	r3, #1
 800a914:	4a0d      	ldr	r2, [pc, #52]	; (800a94c <vPortEnterCritical+0x58>)
 800a916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a918:	4b0c      	ldr	r3, [pc, #48]	; (800a94c <vPortEnterCritical+0x58>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d10f      	bne.n	800a940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a920:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <vPortEnterCritical+0x5c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <vPortEnterCritical+0x4c>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	603b      	str	r3, [r7, #0]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <vPortEnterCritical+0x4a>
	}
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	2000000c 	.word	0x2000000c
 800a950:	e000ed04 	.word	0xe000ed04

0800a954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a95a:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <vPortExitCritical+0x50>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10a      	bne.n	800a978 <vPortExitCritical+0x24>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	607b      	str	r3, [r7, #4]
}
 800a974:	bf00      	nop
 800a976:	e7fe      	b.n	800a976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a978:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <vPortExitCritical+0x50>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <vPortExitCritical+0x50>)
 800a980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a982:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <vPortExitCritical+0x50>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d105      	bne.n	800a996 <vPortExitCritical+0x42>
 800a98a:	2300      	movs	r3, #0
 800a98c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	f383 8811 	msr	BASEPRI, r3
}
 800a994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	2000000c 	.word	0x2000000c
	...

0800a9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9b0:	f3ef 8009 	mrs	r0, PSP
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	4b15      	ldr	r3, [pc, #84]	; (800aa10 <pxCurrentTCBConst>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	f01e 0f10 	tst.w	lr, #16
 800a9c0:	bf08      	it	eq
 800a9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ca:	6010      	str	r0, [r2, #0]
 800a9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9d4:	f380 8811 	msr	BASEPRI, r0
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f7fe fee0 	bl	80097a4 <vTaskSwitchContext>
 800a9e4:	f04f 0000 	mov.w	r0, #0
 800a9e8:	f380 8811 	msr	BASEPRI, r0
 800a9ec:	bc09      	pop	{r0, r3}
 800a9ee:	6819      	ldr	r1, [r3, #0]
 800a9f0:	6808      	ldr	r0, [r1, #0]
 800a9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f6:	f01e 0f10 	tst.w	lr, #16
 800a9fa:	bf08      	it	eq
 800a9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa00:	f380 8809 	msr	PSP, r0
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	f3af 8000 	nop.w

0800aa10 <pxCurrentTCBConst>:
 800aa10:	20001a00 	.word	0x20001a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa14:	bf00      	nop
 800aa16:	bf00      	nop

0800aa18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	607b      	str	r3, [r7, #4]
}
 800aa30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa32:	f7fe fdfd 	bl	8009630 <xTaskIncrementTick>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa3c:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <xPortSysTickHandler+0x40>)
 800aa3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	2300      	movs	r3, #0
 800aa46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	f383 8811 	msr	BASEPRI, r3
}
 800aa4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	e000ed04 	.word	0xe000ed04

0800aa5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa60:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <vPortSetupTimerInterrupt+0x34>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa66:	4b0b      	ldr	r3, [pc, #44]	; (800aa94 <vPortSetupTimerInterrupt+0x38>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	; (800aa98 <vPortSetupTimerInterrupt+0x3c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a0a      	ldr	r2, [pc, #40]	; (800aa9c <vPortSetupTimerInterrupt+0x40>)
 800aa72:	fba2 2303 	umull	r2, r3, r2, r3
 800aa76:	099b      	lsrs	r3, r3, #6
 800aa78:	4a09      	ldr	r2, [pc, #36]	; (800aaa0 <vPortSetupTimerInterrupt+0x44>)
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa7e:	4b04      	ldr	r3, [pc, #16]	; (800aa90 <vPortSetupTimerInterrupt+0x34>)
 800aa80:	2207      	movs	r2, #7
 800aa82:	601a      	str	r2, [r3, #0]
}
 800aa84:	bf00      	nop
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	e000e010 	.word	0xe000e010
 800aa94:	e000e018 	.word	0xe000e018
 800aa98:	20000000 	.word	0x20000000
 800aa9c:	10624dd3 	.word	0x10624dd3
 800aaa0:	e000e014 	.word	0xe000e014

0800aaa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aaa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aab4 <vPortEnableVFP+0x10>
 800aaa8:	6801      	ldr	r1, [r0, #0]
 800aaaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aaae:	6001      	str	r1, [r0, #0]
 800aab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aab2:	bf00      	nop
 800aab4:	e000ed88 	.word	0xe000ed88

0800aab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aabe:	f3ef 8305 	mrs	r3, IPSR
 800aac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b0f      	cmp	r3, #15
 800aac8:	d914      	bls.n	800aaf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaca:	4a17      	ldr	r2, [pc, #92]	; (800ab28 <vPortValidateInterruptPriority+0x70>)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aad4:	4b15      	ldr	r3, [pc, #84]	; (800ab2c <vPortValidateInterruptPriority+0x74>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	7afa      	ldrb	r2, [r7, #11]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d20a      	bcs.n	800aaf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	607b      	str	r3, [r7, #4]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aaf4:	4b0e      	ldr	r3, [pc, #56]	; (800ab30 <vPortValidateInterruptPriority+0x78>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aafc:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <vPortValidateInterruptPriority+0x7c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d90a      	bls.n	800ab1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	603b      	str	r3, [r7, #0]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <vPortValidateInterruptPriority+0x60>
	}
 800ab1a:	bf00      	nop
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	e000e3f0 	.word	0xe000e3f0
 800ab2c:	2000202c 	.word	0x2000202c
 800ab30:	e000ed0c 	.word	0xe000ed0c
 800ab34:	20002030 	.word	0x20002030

0800ab38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08a      	sub	sp, #40	; 0x28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab44:	f7fe fcb8 	bl	80094b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab48:	4b5b      	ldr	r3, [pc, #364]	; (800acb8 <pvPortMalloc+0x180>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab50:	f000 f920 	bl	800ad94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab54:	4b59      	ldr	r3, [pc, #356]	; (800acbc <pvPortMalloc+0x184>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f040 8093 	bne.w	800ac88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01d      	beq.n	800aba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ab68:	2208      	movs	r2, #8
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d014      	beq.n	800aba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f023 0307 	bic.w	r3, r3, #7
 800ab80:	3308      	adds	r3, #8
 800ab82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <pvPortMalloc+0x6c>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	617b      	str	r3, [r7, #20]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d06e      	beq.n	800ac88 <pvPortMalloc+0x150>
 800abaa:	4b45      	ldr	r3, [pc, #276]	; (800acc0 <pvPortMalloc+0x188>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d869      	bhi.n	800ac88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abb4:	4b43      	ldr	r3, [pc, #268]	; (800acc4 <pvPortMalloc+0x18c>)
 800abb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abb8:	4b42      	ldr	r3, [pc, #264]	; (800acc4 <pvPortMalloc+0x18c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abbe:	e004      	b.n	800abca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d903      	bls.n	800abdc <pvPortMalloc+0xa4>
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f1      	bne.n	800abc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abdc:	4b36      	ldr	r3, [pc, #216]	; (800acb8 <pvPortMalloc+0x180>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d050      	beq.n	800ac88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2208      	movs	r2, #8
 800abec:	4413      	add	r3, r2
 800abee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	1ad2      	subs	r2, r2, r3
 800ac00:	2308      	movs	r3, #8
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d91f      	bls.n	800ac48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <pvPortMalloc+0xf8>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	613b      	str	r3, [r7, #16]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac42:	69b8      	ldr	r0, [r7, #24]
 800ac44:	f000 f908 	bl	800ae58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac48:	4b1d      	ldr	r3, [pc, #116]	; (800acc0 <pvPortMalloc+0x188>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	4a1b      	ldr	r2, [pc, #108]	; (800acc0 <pvPortMalloc+0x188>)
 800ac54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac56:	4b1a      	ldr	r3, [pc, #104]	; (800acc0 <pvPortMalloc+0x188>)
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	4b1b      	ldr	r3, [pc, #108]	; (800acc8 <pvPortMalloc+0x190>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d203      	bcs.n	800ac6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac62:	4b17      	ldr	r3, [pc, #92]	; (800acc0 <pvPortMalloc+0x188>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <pvPortMalloc+0x190>)
 800ac68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	4b13      	ldr	r3, [pc, #76]	; (800acbc <pvPortMalloc+0x184>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	431a      	orrs	r2, r3
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac7e:	4b13      	ldr	r3, [pc, #76]	; (800accc <pvPortMalloc+0x194>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3301      	adds	r3, #1
 800ac84:	4a11      	ldr	r2, [pc, #68]	; (800accc <pvPortMalloc+0x194>)
 800ac86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac88:	f7fe fc24 	bl	80094d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	f003 0307 	and.w	r3, r3, #7
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <pvPortMalloc+0x174>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	60fb      	str	r3, [r7, #12]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <pvPortMalloc+0x172>
	return pvReturn;
 800acac:	69fb      	ldr	r3, [r7, #28]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3728      	adds	r7, #40	; 0x28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20005c3c 	.word	0x20005c3c
 800acbc:	20005c50 	.word	0x20005c50
 800acc0:	20005c40 	.word	0x20005c40
 800acc4:	20005c34 	.word	0x20005c34
 800acc8:	20005c44 	.word	0x20005c44
 800accc:	20005c48 	.word	0x20005c48

0800acd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d04d      	beq.n	800ad7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ace2:	2308      	movs	r3, #8
 800ace4:	425b      	negs	r3, r3
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	4413      	add	r3, r2
 800acea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	4b24      	ldr	r3, [pc, #144]	; (800ad88 <vPortFree+0xb8>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4013      	ands	r3, r2
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10a      	bne.n	800ad14 <vPortFree+0x44>
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	60fb      	str	r3, [r7, #12]
}
 800ad10:	bf00      	nop
 800ad12:	e7fe      	b.n	800ad12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <vPortFree+0x62>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	60bb      	str	r3, [r7, #8]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	4b14      	ldr	r3, [pc, #80]	; (800ad88 <vPortFree+0xb8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d01e      	beq.n	800ad7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d11a      	bne.n	800ad7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b0e      	ldr	r3, [pc, #56]	; (800ad88 <vPortFree+0xb8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	43db      	mvns	r3, r3
 800ad52:	401a      	ands	r2, r3
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad58:	f7fe fbae 	bl	80094b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	4b0a      	ldr	r3, [pc, #40]	; (800ad8c <vPortFree+0xbc>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4413      	add	r3, r2
 800ad66:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <vPortFree+0xbc>)
 800ad68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad6a:	6938      	ldr	r0, [r7, #16]
 800ad6c:	f000 f874 	bl	800ae58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <vPortFree+0xc0>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	4a06      	ldr	r2, [pc, #24]	; (800ad90 <vPortFree+0xc0>)
 800ad78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad7a:	f7fe fbab 	bl	80094d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad7e:	bf00      	nop
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20005c50 	.word	0x20005c50
 800ad8c:	20005c40 	.word	0x20005c40
 800ad90:	20005c4c 	.word	0x20005c4c

0800ad94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ad9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ada0:	4b27      	ldr	r3, [pc, #156]	; (800ae40 <prvHeapInit+0xac>)
 800ada2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00c      	beq.n	800adc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3307      	adds	r3, #7
 800adb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 0307 	bic.w	r3, r3, #7
 800adba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	4a1f      	ldr	r2, [pc, #124]	; (800ae40 <prvHeapInit+0xac>)
 800adc4:	4413      	add	r3, r2
 800adc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adcc:	4a1d      	ldr	r2, [pc, #116]	; (800ae44 <prvHeapInit+0xb0>)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800add2:	4b1c      	ldr	r3, [pc, #112]	; (800ae44 <prvHeapInit+0xb0>)
 800add4:	2200      	movs	r2, #0
 800add6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	4413      	add	r3, r2
 800adde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ade0:	2208      	movs	r2, #8
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	1a9b      	subs	r3, r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f023 0307 	bic.w	r3, r3, #7
 800adee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4a15      	ldr	r2, [pc, #84]	; (800ae48 <prvHeapInit+0xb4>)
 800adf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800adf6:	4b14      	ldr	r3, [pc, #80]	; (800ae48 <prvHeapInit+0xb4>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2200      	movs	r2, #0
 800adfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adfe:	4b12      	ldr	r3, [pc, #72]	; (800ae48 <prvHeapInit+0xb4>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	1ad2      	subs	r2, r2, r3
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae14:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <prvHeapInit+0xb4>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	4a0a      	ldr	r2, [pc, #40]	; (800ae4c <prvHeapInit+0xb8>)
 800ae22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <prvHeapInit+0xbc>)
 800ae2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae2c:	4b09      	ldr	r3, [pc, #36]	; (800ae54 <prvHeapInit+0xc0>)
 800ae2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae32:	601a      	str	r2, [r3, #0]
}
 800ae34:	bf00      	nop
 800ae36:	3714      	adds	r7, #20
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20002034 	.word	0x20002034
 800ae44:	20005c34 	.word	0x20005c34
 800ae48:	20005c3c 	.word	0x20005c3c
 800ae4c:	20005c44 	.word	0x20005c44
 800ae50:	20005c40 	.word	0x20005c40
 800ae54:	20005c50 	.word	0x20005c50

0800ae58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae60:	4b28      	ldr	r3, [pc, #160]	; (800af04 <prvInsertBlockIntoFreeList+0xac>)
 800ae62:	60fb      	str	r3, [r7, #12]
 800ae64:	e002      	b.n	800ae6c <prvInsertBlockIntoFreeList+0x14>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d8f7      	bhi.n	800ae66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	4413      	add	r3, r2
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d108      	bne.n	800ae9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	441a      	add	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	441a      	add	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d118      	bne.n	800aee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	4b15      	ldr	r3, [pc, #84]	; (800af08 <prvInsertBlockIntoFreeList+0xb0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d00d      	beq.n	800aed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	441a      	add	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	e008      	b.n	800aee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aed6:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <prvInsertBlockIntoFreeList+0xb0>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	e003      	b.n	800aee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d002      	beq.n	800aef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aef6:	bf00      	nop
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	20005c34 	.word	0x20005c34
 800af08:	20005c3c 	.word	0x20005c3c

0800af0c <vHWOutInit>:
void vGetAverDataFromRAW(uint16_t * Indata, uint16_t *OutData, uint16_t InIndex, uint16_t OutIndex, uint8_t Size,uint16_t FrameSize, uint16_t BufferSize);



void vHWOutInit(OUT_NAME_TYPE out_name, TIM_HandleTypeDef * ptim, uint32_t  channel,  float power, uint16_t overload_timer, float overload_power, uint8_t PWM)
{
 800af0c:	b5b0      	push	{r4, r5, r7, lr}
 800af0e:	b08e      	sub	sp, #56	; 0x38
 800af10:	af00      	add	r7, sp, #0
 800af12:	6139      	str	r1, [r7, #16]
 800af14:	60fa      	str	r2, [r7, #12]
 800af16:	ed87 0a02 	vstr	s0, [r7, #8]
 800af1a:	461a      	mov	r2, r3
 800af1c:	edc7 0a01 	vstr	s1, [r7, #4]
 800af20:	4603      	mov	r3, r0
 800af22:	75fb      	strb	r3, [r7, #23]
 800af24:	4613      	mov	r3, r2
 800af26:	82bb      	strh	r3, [r7, #20]
	out[out_name].ptim = ptim;
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	4a3c      	ldr	r2, [pc, #240]	; (800b01c <vHWOutInit+0x110>)
 800af2c:	2158      	movs	r1, #88	; 0x58
 800af2e:	fb01 f303 	mul.w	r3, r1, r3
 800af32:	4413      	add	r3, r2
 800af34:	3304      	adds	r3, #4
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	601a      	str	r2, [r3, #0]
	out[out_name].channel = channel;
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	4a37      	ldr	r2, [pc, #220]	; (800b01c <vHWOutInit+0x110>)
 800af3e:	2158      	movs	r1, #88	; 0x58
 800af40:	fb01 f303 	mul.w	r3, r1, r3
 800af44:	4413      	add	r3, r2
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	601a      	str	r2, [r3, #0]
	out[out_name].power = power;
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	4a33      	ldr	r2, [pc, #204]	; (800b01c <vHWOutInit+0x110>)
 800af4e:	2158      	movs	r1, #88	; 0x58
 800af50:	fb01 f303 	mul.w	r3, r1, r3
 800af54:	4413      	add	r3, r2
 800af56:	330c      	adds	r3, #12
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	601a      	str	r2, [r3, #0]
	out[out_name].overload_power = overload_power;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	4a2f      	ldr	r2, [pc, #188]	; (800b01c <vHWOutInit+0x110>)
 800af60:	2158      	movs	r1, #88	; 0x58
 800af62:	fb01 f303 	mul.w	r3, r1, r3
 800af66:	4413      	add	r3, r2
 800af68:	3310      	adds	r3, #16
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	601a      	str	r2, [r3, #0]
	out[out_name].overload_config_timer = overload_timer;
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	4a2a      	ldr	r2, [pc, #168]	; (800b01c <vHWOutInit+0x110>)
 800af72:	2158      	movs	r1, #88	; 0x58
 800af74:	fb01 f303 	mul.w	r3, r1, r3
 800af78:	4413      	add	r3, r2
 800af7a:	3316      	adds	r3, #22
 800af7c:	8aba      	ldrh	r2, [r7, #20]
 800af7e:	801a      	strh	r2, [r3, #0]
	out[out_name].overload_timer = 0;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	4a26      	ldr	r2, [pc, #152]	; (800b01c <vHWOutInit+0x110>)
 800af84:	2158      	movs	r1, #88	; 0x58
 800af86:	fb01 f303 	mul.w	r3, r1, r3
 800af8a:	4413      	add	r3, r2
 800af8c:	3318      	adds	r3, #24
 800af8e:	2200      	movs	r2, #0
 800af90:	801a      	strh	r2, [r3, #0]
	out[out_name].out_logic_state =OUT_OFF;
 800af92:	7dfb      	ldrb	r3, [r7, #23]
 800af94:	4a21      	ldr	r2, [pc, #132]	; (800b01c <vHWOutInit+0x110>)
 800af96:	2158      	movs	r1, #88	; 0x58
 800af98:	fb01 f303 	mul.w	r3, r1, r3
 800af9c:	4413      	add	r3, r2
 800af9e:	3308      	adds	r3, #8
 800afa0:	2201      	movs	r2, #1
 800afa2:	701a      	strb	r2, [r3, #0]
	out[out_name].out_state =STATE_OUT_OFF;
 800afa4:	7dfb      	ldrb	r3, [r7, #23]
 800afa6:	4a1d      	ldr	r2, [pc, #116]	; (800b01c <vHWOutInit+0x110>)
 800afa8:	2158      	movs	r1, #88	; 0x58
 800afaa:	fb01 f303 	mul.w	r3, r1, r3
 800afae:	4413      	add	r3, r2
 800afb0:	3309      	adds	r3, #9
 800afb2:	2200      	movs	r2, #0
 800afb4:	701a      	strb	r2, [r3, #0]
	out[out_name].error_flag = ERROR_OFF;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	4a18      	ldr	r2, [pc, #96]	; (800b01c <vHWOutInit+0x110>)
 800afba:	2158      	movs	r1, #88	; 0x58
 800afbc:	fb01 f303 	mul.w	r3, r1, r3
 800afc0:	4413      	add	r3, r2
 800afc2:	3320      	adds	r3, #32
 800afc4:	2200      	movs	r2, #0
 800afc6:	701a      	strb	r2, [r3, #0]
	out[out_name].error_count = 0;
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	4a14      	ldr	r2, [pc, #80]	; (800b01c <vHWOutInit+0x110>)
 800afcc:	2158      	movs	r1, #88	; 0x58
 800afce:	fb01 f303 	mul.w	r3, r1, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	331a      	adds	r3, #26
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
	out[out_name].restart_timer =0;
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	4a0f      	ldr	r2, [pc, #60]	; (800b01c <vHWOutInit+0x110>)
 800afde:	2158      	movs	r1, #88	; 0x58
 800afe0:	fb01 f303 	mul.w	r3, r1, r3
 800afe4:	4413      	add	r3, r2
 800afe6:	331c      	adds	r3, #28
 800afe8:	2200      	movs	r2, #0
 800afea:	801a      	strh	r2, [r3, #0]
	out[out_name].restart_config_timer =1000;
 800afec:	7dfb      	ldrb	r3, [r7, #23]
 800afee:	4a0b      	ldr	r2, [pc, #44]	; (800b01c <vHWOutInit+0x110>)
 800aff0:	2158      	movs	r1, #88	; 0x58
 800aff2:	fb01 f303 	mul.w	r3, r1, r3
 800aff6:	4413      	add	r3, r2
 800aff8:	331e      	adds	r3, #30
 800affa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800affe:	801a      	strh	r2, [r3, #0]
	out[out_name].PWM = PWM;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	4a06      	ldr	r2, [pc, #24]	; (800b01c <vHWOutInit+0x110>)
 800b004:	2158      	movs	r1, #88	; 0x58
 800b006:	fb01 f303 	mul.w	r3, r1, r3
 800b00a:	4413      	add	r3, r2
 800b00c:	3314      	adds	r3, #20
 800b00e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800b012:	701a      	strb	r2, [r3, #0]
	for (uint8_t j=0; j< 4U; j++)
 800b014:	2300      	movs	r3, #0
 800b016:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b01a:	e0e6      	b.n	800b1ea <vHWOutInit+0x2de>
 800b01c:	20005ce8 	.word	0x20005ce8
	{
		//Проверяем что хоты одно значение АЦП не равно нулю,что-то не словить делением на ноль.
		if ((CurSensData[out_name][j].Data !=0) || (CurSensData[out_name][j+1].Data !=0 ))
 800b020:	7dfa      	ldrb	r2, [r7, #23]
 800b022:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800b026:	489f      	ldr	r0, [pc, #636]	; (800b2a4 <vHWOutInit+0x398>)
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	440b      	add	r3, r1
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4403      	add	r3, r0
 800b034:	885b      	ldrh	r3, [r3, #2]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10e      	bne.n	800b058 <vHWOutInit+0x14c>
 800b03a:	7dfa      	ldrb	r2, [r7, #23]
 800b03c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b040:	1c59      	adds	r1, r3, #1
 800b042:	4898      	ldr	r0, [pc, #608]	; (800b2a4 <vHWOutInit+0x398>)
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	440b      	add	r3, r1
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4403      	add	r3, r0
 800b050:	885b      	ldrh	r3, [r3, #2]
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 80c4 	beq.w	800b1e0 <vHWOutInit+0x2d4>
		{
			out[out_name].CSC[j].data = CurSensData[out_name][j+1].Data;
 800b058:	7df9      	ldrb	r1, [r7, #23]
 800b05a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b05e:	1c5c      	adds	r4, r3, #1
 800b060:	7df8      	ldrb	r0, [r7, #23]
 800b062:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b066:	4d8f      	ldr	r5, [pc, #572]	; (800b2a4 <vHWOutInit+0x398>)
 800b068:	460b      	mov	r3, r1
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	440b      	add	r3, r1
 800b06e:	4423      	add	r3, r4
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	442b      	add	r3, r5
 800b074:	885c      	ldrh	r4, [r3, #2]
 800b076:	498c      	ldr	r1, [pc, #560]	; (800b2a8 <vHWOutInit+0x39c>)
 800b078:	4613      	mov	r3, r2
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	4413      	add	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	2258      	movs	r2, #88	; 0x58
 800b082:	fb00 f202 	mul.w	r2, r0, r2
 800b086:	4413      	add	r3, r2
 800b088:	440b      	add	r3, r1
 800b08a:	3324      	adds	r3, #36	; 0x24
 800b08c:	4622      	mov	r2, r4
 800b08e:	801a      	strh	r2, [r3, #0]
			out[out_name].CSC[j].k = ( CurSensData[out_name][j].KOOF -  CurSensData[out_name][j+1].KOOF) / ( CurSensData[out_name][j].Data- CurSensData[out_name][j+1].Data);
 800b090:	7dfa      	ldrb	r2, [r7, #23]
 800b092:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800b096:	4883      	ldr	r0, [pc, #524]	; (800b2a4 <vHWOutInit+0x398>)
 800b098:	4613      	mov	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	440b      	add	r3, r1
 800b0a0:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800b0a4:	461c      	mov	r4, r3
 800b0a6:	7dfa      	ldrb	r2, [r7, #23]
 800b0a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0ac:	1c59      	adds	r1, r3, #1
 800b0ae:	487d      	ldr	r0, [pc, #500]	; (800b2a4 <vHWOutInit+0x398>)
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	440b      	add	r3, r1
 800b0b8:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800b0bc:	1ae1      	subs	r1, r4, r3
 800b0be:	7dfa      	ldrb	r2, [r7, #23]
 800b0c0:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800b0c4:	4c77      	ldr	r4, [pc, #476]	; (800b2a4 <vHWOutInit+0x398>)
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	4403      	add	r3, r0
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4423      	add	r3, r4
 800b0d2:	885b      	ldrh	r3, [r3, #2]
 800b0d4:	461d      	mov	r5, r3
 800b0d6:	7dfa      	ldrb	r2, [r7, #23]
 800b0d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0dc:	1c58      	adds	r0, r3, #1
 800b0de:	4c71      	ldr	r4, [pc, #452]	; (800b2a4 <vHWOutInit+0x398>)
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	4403      	add	r3, r0
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4423      	add	r3, r4
 800b0ec:	885b      	ldrh	r3, [r3, #2]
 800b0ee:	1aeb      	subs	r3, r5, r3
 800b0f0:	fb91 f3f3 	sdiv	r3, r1, r3
 800b0f4:	7df9      	ldrb	r1, [r7, #23]
 800b0f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b102:	4869      	ldr	r0, [pc, #420]	; (800b2a8 <vHWOutInit+0x39c>)
 800b104:	4613      	mov	r3, r2
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	4413      	add	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	2258      	movs	r2, #88	; 0x58
 800b10e:	fb01 f202 	mul.w	r2, r1, r2
 800b112:	4413      	add	r3, r2
 800b114:	4403      	add	r3, r0
 800b116:	3328      	adds	r3, #40	; 0x28
 800b118:	edc3 7a00 	vstr	s15, [r3]
			out[out_name].CSC[j].b = ( CurSensData[out_name][j].Data * CurSensData[out_name][j+1].KOOF - CurSensData[out_name][j+1].Data * CurSensData[out_name][j].KOOF)/(CurSensData[out_name][j].Data + CurSensData[out_name][j+1].Data);
 800b11c:	7dfa      	ldrb	r2, [r7, #23]
 800b11e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800b122:	4860      	ldr	r0, [pc, #384]	; (800b2a4 <vHWOutInit+0x398>)
 800b124:	4613      	mov	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	440b      	add	r3, r1
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4403      	add	r3, r0
 800b130:	885b      	ldrh	r3, [r3, #2]
 800b132:	461c      	mov	r4, r3
 800b134:	7dfa      	ldrb	r2, [r7, #23]
 800b136:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b13a:	1c59      	adds	r1, r3, #1
 800b13c:	4859      	ldr	r0, [pc, #356]	; (800b2a4 <vHWOutInit+0x398>)
 800b13e:	4613      	mov	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	440b      	add	r3, r1
 800b146:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800b14a:	fb03 f104 	mul.w	r1, r3, r4
 800b14e:	7dfa      	ldrb	r2, [r7, #23]
 800b150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b154:	1c58      	adds	r0, r3, #1
 800b156:	4c53      	ldr	r4, [pc, #332]	; (800b2a4 <vHWOutInit+0x398>)
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	4403      	add	r3, r0
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4423      	add	r3, r4
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	461d      	mov	r5, r3
 800b168:	7dfa      	ldrb	r2, [r7, #23]
 800b16a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800b16e:	4c4d      	ldr	r4, [pc, #308]	; (800b2a4 <vHWOutInit+0x398>)
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	4403      	add	r3, r0
 800b178:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 800b17c:	fb05 f303 	mul.w	r3, r5, r3
 800b180:	1ac9      	subs	r1, r1, r3
 800b182:	7dfa      	ldrb	r2, [r7, #23]
 800b184:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800b188:	4c46      	ldr	r4, [pc, #280]	; (800b2a4 <vHWOutInit+0x398>)
 800b18a:	4613      	mov	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	4403      	add	r3, r0
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4423      	add	r3, r4
 800b196:	885b      	ldrh	r3, [r3, #2]
 800b198:	461d      	mov	r5, r3
 800b19a:	7dfa      	ldrb	r2, [r7, #23]
 800b19c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1a0:	1c58      	adds	r0, r3, #1
 800b1a2:	4c40      	ldr	r4, [pc, #256]	; (800b2a4 <vHWOutInit+0x398>)
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	4403      	add	r3, r0
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4423      	add	r3, r4
 800b1b0:	885b      	ldrh	r3, [r3, #2]
 800b1b2:	442b      	add	r3, r5
 800b1b4:	fb91 f3f3 	sdiv	r3, r1, r3
 800b1b8:	7df9      	ldrb	r1, [r7, #23]
 800b1ba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b1be:	ee07 3a90 	vmov	s15, r3
 800b1c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1c6:	4838      	ldr	r0, [pc, #224]	; (800b2a8 <vHWOutInit+0x39c>)
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	4413      	add	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	2258      	movs	r2, #88	; 0x58
 800b1d2:	fb01 f202 	mul.w	r2, r1, r2
 800b1d6:	4413      	add	r3, r2
 800b1d8:	4403      	add	r3, r0
 800b1da:	332c      	adds	r3, #44	; 0x2c
 800b1dc:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t j=0; j< 4U; j++)
 800b1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b1ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	f67f af16 	bls.w	800b020 <vHWOutInit+0x114>
		}
	}

    TIM_OC_InitTypeDef sConfigOC = {0};
 800b1f4:	f107 0318 	add.w	r3, r7, #24
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	601a      	str	r2, [r3, #0]
 800b1fc:	605a      	str	r2, [r3, #4]
 800b1fe:	609a      	str	r2, [r3, #8]
 800b200:	60da      	str	r2, [r3, #12]
 800b202:	611a      	str	r2, [r3, #16]
 800b204:	615a      	str	r2, [r3, #20]
 800b206:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b208:	2360      	movs	r3, #96	; 0x60
 800b20a:	61bb      	str	r3, [r7, #24]
	sConfigOC.Pulse = (uint32_t)( out[out_name].ptim ->Init.Period *(float)out[out_name].PWM/100);
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	4a26      	ldr	r2, [pc, #152]	; (800b2a8 <vHWOutInit+0x39c>)
 800b210:	2158      	movs	r1, #88	; 0x58
 800b212:	fb01 f303 	mul.w	r3, r1, r3
 800b216:	4413      	add	r3, r2
 800b218:	3304      	adds	r3, #4
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b226:	7dfb      	ldrb	r3, [r7, #23]
 800b228:	4a1f      	ldr	r2, [pc, #124]	; (800b2a8 <vHWOutInit+0x39c>)
 800b22a:	2158      	movs	r1, #88	; 0x58
 800b22c:	fb01 f303 	mul.w	r3, r1, r3
 800b230:	4413      	add	r3, r2
 800b232:	3314      	adds	r3, #20
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b242:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b2ac <vHWOutInit+0x3a0>
 800b246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b24a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b24e:	ee17 3a90 	vmov	r3, s15
 800b252:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b254:	2300      	movs	r3, #0
 800b256:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b258:	2300      	movs	r3, #0
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b25c:	2300      	movs	r3, #0
 800b25e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b260:	2300      	movs	r3, #0
 800b262:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b264:	2300      	movs	r3, #0
 800b266:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(out[out_name].ptim , &sConfigOC, out[out_name].channel) != HAL_OK)
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	4a0f      	ldr	r2, [pc, #60]	; (800b2a8 <vHWOutInit+0x39c>)
 800b26c:	2158      	movs	r1, #88	; 0x58
 800b26e:	fb01 f303 	mul.w	r3, r1, r3
 800b272:	4413      	add	r3, r2
 800b274:	3304      	adds	r3, #4
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	4a0b      	ldr	r2, [pc, #44]	; (800b2a8 <vHWOutInit+0x39c>)
 800b27c:	2158      	movs	r1, #88	; 0x58
 800b27e:	fb01 f303 	mul.w	r3, r1, r3
 800b282:	4413      	add	r3, r2
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	f107 0318 	add.w	r3, r7, #24
 800b28a:	4619      	mov	r1, r3
 800b28c:	f7fb fa34 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <vHWOutInit+0x38e>
	{
	    Error_Handler();
 800b296:	f7f6 ffcd 	bl	8002234 <Error_Handler>
	}
}
 800b29a:	bf00      	nop
 800b29c:	3738      	adds	r7, #56	; 0x38
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000010 	.word	0x20000010
 800b2a8:	20005ce8 	.word	0x20005ce8
 800b2ac:	42c80000 	.word	0x42c80000

0800b2b0 <vHWOutResete>:
	xEventGroupClearBits (xOutEvent, ( 0x1 < out_name) );
}


void vHWOutResete( OUT_NAME_TYPE out_name)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
	 HAL_TIM_PWM_Stop(out[out_name].ptim,  out[out_name].channel);
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	4a10      	ldr	r2, [pc, #64]	; (800b300 <vHWOutResete+0x50>)
 800b2be:	2158      	movs	r1, #88	; 0x58
 800b2c0:	fb01 f303 	mul.w	r3, r1, r3
 800b2c4:	4413      	add	r3, r2
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	490c      	ldr	r1, [pc, #48]	; (800b300 <vHWOutResete+0x50>)
 800b2ce:	2058      	movs	r0, #88	; 0x58
 800b2d0:	fb00 f303 	mul.w	r3, r0, r3
 800b2d4:	440b      	add	r3, r1
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4610      	mov	r0, r2
 800b2dc:	f7fb f838 	bl	8006350 <HAL_TIM_PWM_Stop>
	 out_register &= ~(0x1<< out_name);
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e8:	43db      	mvns	r3, r3
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4b05      	ldr	r3, [pc, #20]	; (800b304 <vHWOutResete+0x54>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	4a04      	ldr	r2, [pc, #16]	; (800b304 <vHWOutResete+0x54>)
 800b2f4:	6013      	str	r3, [r2, #0]

}
 800b2f6:	bf00      	nop
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20005ce8 	.word	0x20005ce8
 800b304:	20006408 	.word	0x20006408

0800b308 <vHWOutSet>:

void vHWOutSet( OUT_NAME_TYPE out_name, uint8_t power)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08a      	sub	sp, #40	; 0x28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	460a      	mov	r2, r1
 800b312:	71fb      	strb	r3, [r7, #7]
 800b314:	4613      	mov	r3, r2
 800b316:	71bb      	strb	r3, [r7, #6]
   TIM_OC_InitTypeDef sConfigOC = {0};
 800b318:	f107 030c 	add.w	r3, r7, #12
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	605a      	str	r2, [r3, #4]
 800b322:	609a      	str	r2, [r3, #8]
 800b324:	60da      	str	r2, [r3, #12]
 800b326:	611a      	str	r2, [r3, #16]
 800b328:	615a      	str	r2, [r3, #20]
 800b32a:	619a      	str	r2, [r3, #24]
   //В зависимости от номера выхода выибраетм таймер и канал таймера PWM
   if ( power != 100 )
 800b32c:	79bb      	ldrb	r3, [r7, #6]
 800b32e:	2b64      	cmp	r3, #100	; 0x64
 800b330:	d048      	beq.n	800b3c4 <vHWOutSet+0xbc>
   {
   	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b332:	2360      	movs	r3, #96	; 0x60
 800b334:	60fb      	str	r3, [r7, #12]
   	  sConfigOC.Pulse = (uint32_t )((float)power/100 * (out[out_name].ptim->Init.Period *(float)out[out_name].PWM/100 ));
 800b336:	79bb      	ldrb	r3, [r7, #6]
 800b338:	ee07 3a90 	vmov	s15, r3
 800b33c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b340:	eddf 6a31 	vldr	s13, [pc, #196]	; 800b408 <vHWOutSet+0x100>
 800b344:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b348:	79fb      	ldrb	r3, [r7, #7]
 800b34a:	4a30      	ldr	r2, [pc, #192]	; (800b40c <vHWOutSet+0x104>)
 800b34c:	2158      	movs	r1, #88	; 0x58
 800b34e:	fb01 f303 	mul.w	r3, r1, r3
 800b352:	4413      	add	r3, r2
 800b354:	3304      	adds	r3, #4
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b362:	79fb      	ldrb	r3, [r7, #7]
 800b364:	4a29      	ldr	r2, [pc, #164]	; (800b40c <vHWOutSet+0x104>)
 800b366:	2158      	movs	r1, #88	; 0x58
 800b368:	fb01 f303 	mul.w	r3, r1, r3
 800b36c:	4413      	add	r3, r2
 800b36e:	3314      	adds	r3, #20
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b37e:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b408 <vHWOutSet+0x100>
 800b382:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b38e:	ee17 3a90 	vmov	r3, s15
 800b392:	613b      	str	r3, [r7, #16]
   	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
   	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b398:	2300      	movs	r3, #0
 800b39a:	61fb      	str	r3, [r7, #28]
   	  HAL_TIM_PWM_ConfigChannel(out[out_name].ptim, &sConfigOC, out[out_name].channel);
 800b39c:	79fb      	ldrb	r3, [r7, #7]
 800b39e:	4a1b      	ldr	r2, [pc, #108]	; (800b40c <vHWOutSet+0x104>)
 800b3a0:	2158      	movs	r1, #88	; 0x58
 800b3a2:	fb01 f303 	mul.w	r3, r1, r3
 800b3a6:	4413      	add	r3, r2
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
 800b3ae:	4a17      	ldr	r2, [pc, #92]	; (800b40c <vHWOutSet+0x104>)
 800b3b0:	2158      	movs	r1, #88	; 0x58
 800b3b2:	fb01 f303 	mul.w	r3, r1, r3
 800b3b6:	4413      	add	r3, r2
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	f107 030c 	add.w	r3, r7, #12
 800b3be:	4619      	mov	r1, r3
 800b3c0:	f7fb f99a 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>

   }
   HAL_TIM_PWM_Start(out[out_name].ptim,out[out_name].channel);
 800b3c4:	79fb      	ldrb	r3, [r7, #7]
 800b3c6:	4a11      	ldr	r2, [pc, #68]	; (800b40c <vHWOutSet+0x104>)
 800b3c8:	2158      	movs	r1, #88	; 0x58
 800b3ca:	fb01 f303 	mul.w	r3, r1, r3
 800b3ce:	4413      	add	r3, r2
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	79fb      	ldrb	r3, [r7, #7]
 800b3d6:	490d      	ldr	r1, [pc, #52]	; (800b40c <vHWOutSet+0x104>)
 800b3d8:	2058      	movs	r0, #88	; 0x58
 800b3da:	fb00 f303 	mul.w	r3, r0, r3
 800b3de:	440b      	add	r3, r1
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	f7fa feeb 	bl	80061c0 <HAL_TIM_PWM_Start>
   out_register |= 0x1<< out_name;
 800b3ea:	79fb      	ldrb	r3, [r7, #7]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	4b06      	ldr	r3, [pc, #24]	; (800b410 <vHWOutSet+0x108>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	4a05      	ldr	r2, [pc, #20]	; (800b410 <vHWOutSet+0x108>)
 800b3fc:	6013      	str	r3, [r2, #0]
}
 800b3fe:	bf00      	nop
 800b400:	3728      	adds	r7, #40	; 0x28
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	42c80000 	.word	0x42c80000
 800b40c:	20005ce8 	.word	0x20005ce8
 800b410:	20006408 	.word	0x20006408

0800b414 <vOutInit>:
}



void vOutInit()
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af02      	add	r7, sp, #8
	//Инициализация портов упраления ключами
	HAL_GPIO_WritePin(GPIOG, Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 800b41a:	2201      	movs	r2, #1
 800b41c:	f641 413e 	movw	r1, #7230	; 0x1c3e
 800b420:	4894      	ldr	r0, [pc, #592]	; (800b674 <vOutInit+0x260>)
 800b422:	f7f9 fdb7 	bl	8004f94 <HAL_GPIO_WritePin>
	                          |Cs_Dis8_17_18_Pin|Cs_Dis8_15_16_Pin|Cs_Dis20_3_Pin|Cs_Dis20_4_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin, GPIO_PIN_SET);
 800b426:	2201      	movs	r2, #1
 800b428:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800b42c:	4892      	ldr	r0, [pc, #584]	; (800b678 <vOutInit+0x264>)
 800b42e:	f7f9 fdb1 	bl	8004f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Cs_Dis20_6_GPIO_Port, Cs_Dis20_6_Pin, GPIO_PIN_SET);
 800b432:	2201      	movs	r2, #1
 800b434:	2180      	movs	r1, #128	; 0x80
 800b436:	4891      	ldr	r0, [pc, #580]	; (800b67c <vOutInit+0x268>)
 800b438:	f7f9 fdac 	bl	8004f94 <HAL_GPIO_WritePin>

	vHWOutInit(OUT_1, &htim4, TIM_CHANNEL_3, 20.0, 1000, 60, 100 );
 800b43c:	2364      	movs	r3, #100	; 0x64
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	eddf 0a8f 	vldr	s1, [pc, #572]	; 800b680 <vOutInit+0x26c>
 800b444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b448:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b44c:	2208      	movs	r2, #8
 800b44e:	498d      	ldr	r1, [pc, #564]	; (800b684 <vOutInit+0x270>)
 800b450:	2000      	movs	r0, #0
 800b452:	f7ff fd5b 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_2, &htim4, TIM_CHANNEL_4, 20.0, 1000, 60, 100 );
 800b456:	2364      	movs	r3, #100	; 0x64
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	eddf 0a89 	vldr	s1, [pc, #548]	; 800b680 <vOutInit+0x26c>
 800b45e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b462:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b466:	220c      	movs	r2, #12
 800b468:	4986      	ldr	r1, [pc, #536]	; (800b684 <vOutInit+0x270>)
 800b46a:	2001      	movs	r0, #1
 800b46c:	f7ff fd4e 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_3, &htim2, TIM_CHANNEL_1, 20.0, 1000, 60, 100 );
 800b470:	2364      	movs	r3, #100	; 0x64
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	eddf 0a82 	vldr	s1, [pc, #520]	; 800b680 <vOutInit+0x26c>
 800b478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b47c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b480:	2200      	movs	r2, #0
 800b482:	4981      	ldr	r1, [pc, #516]	; (800b688 <vOutInit+0x274>)
 800b484:	2002      	movs	r0, #2
 800b486:	f7ff fd41 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_4, &htim3, TIM_CHANNEL_2, 20.0, 1000, 60, 100 );
 800b48a:	2364      	movs	r3, #100	; 0x64
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800b680 <vOutInit+0x26c>
 800b492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b496:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b49a:	2204      	movs	r2, #4
 800b49c:	497b      	ldr	r1, [pc, #492]	; (800b68c <vOutInit+0x278>)
 800b49e:	2003      	movs	r0, #3
 800b4a0:	f7ff fd34 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_5, &htim1, TIM_CHANNEL_3, 20.0, 1000, 60, 100 );
 800b4a4:	2364      	movs	r3, #100	; 0x64
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	eddf 0a75 	vldr	s1, [pc, #468]	; 800b680 <vOutInit+0x26c>
 800b4ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4b0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	4976      	ldr	r1, [pc, #472]	; (800b690 <vOutInit+0x27c>)
 800b4b8:	2004      	movs	r0, #4
 800b4ba:	f7ff fd27 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_6, &htim1, TIM_CHANNEL_4, 20.0, 1000, 60, 100 );
 800b4be:	2364      	movs	r3, #100	; 0x64
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b680 <vOutInit+0x26c>
 800b4c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4ca:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b4ce:	220c      	movs	r2, #12
 800b4d0:	496f      	ldr	r1, [pc, #444]	; (800b690 <vOutInit+0x27c>)
 800b4d2:	2005      	movs	r0, #5
 800b4d4:	f7ff fd1a 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_7, &htim12, TIM_CHANNEL_1,20.0, 1000, 60, 100 );
 800b4d8:	2364      	movs	r3, #100	; 0x64
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	eddf 0a68 	vldr	s1, [pc, #416]	; 800b680 <vOutInit+0x26c>
 800b4e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4e4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	496a      	ldr	r1, [pc, #424]	; (800b694 <vOutInit+0x280>)
 800b4ec:	2006      	movs	r0, #6
 800b4ee:	f7ff fd0d 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_8, &htim4, TIM_CHANNEL_2, 20.0, 1000, 60, 100 );
 800b4f2:	2364      	movs	r3, #100	; 0x64
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b680 <vOutInit+0x26c>
 800b4fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4fe:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b502:	2204      	movs	r2, #4
 800b504:	495f      	ldr	r1, [pc, #380]	; (800b684 <vOutInit+0x270>)
 800b506:	2007      	movs	r0, #7
 800b508:	f7ff fd00 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_9, &htim1, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800b50c:	2364      	movs	r3, #100	; 0x64
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b514:	2300      	movs	r3, #0
 800b516:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b51a:	2200      	movs	r2, #0
 800b51c:	495c      	ldr	r1, [pc, #368]	; (800b690 <vOutInit+0x27c>)
 800b51e:	2008      	movs	r0, #8
 800b520:	f7ff fcf4 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_10, &htim1, TIM_CHANNEL_2,8.0, 0, 8.0, 100 );
 800b524:	2364      	movs	r3, #100	; 0x64
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b52c:	2300      	movs	r3, #0
 800b52e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b532:	2204      	movs	r2, #4
 800b534:	4956      	ldr	r1, [pc, #344]	; (800b690 <vOutInit+0x27c>)
 800b536:	2009      	movs	r0, #9
 800b538:	f7ff fce8 	bl	800af0c <vHWOutInit>
	//vHWOutInit(OUT_11, &htim2, TIM_CHANNEL_4, 8.0, 0, 8.0, 100 );
//	vHWOutInit(OUT_12, &htim2, TIM_CHANNEL_3, 8.0, 0, 8.0, 100 );
	vHWOutInit(OUT_13, &htim8, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800b53c:	2364      	movs	r3, #100	; 0x64
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b544:	2300      	movs	r3, #0
 800b546:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b54a:	2200      	movs	r2, #0
 800b54c:	4952      	ldr	r1, [pc, #328]	; (800b698 <vOutInit+0x284>)
 800b54e:	200c      	movs	r0, #12
 800b550:	f7ff fcdc 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_14, &htim8, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 800b554:	2364      	movs	r3, #100	; 0x64
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b55c:	2300      	movs	r3, #0
 800b55e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b562:	2204      	movs	r2, #4
 800b564:	494c      	ldr	r1, [pc, #304]	; (800b698 <vOutInit+0x284>)
 800b566:	200d      	movs	r0, #13
 800b568:	f7ff fcd0 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_15, &htim3, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800b56c:	2364      	movs	r3, #100	; 0x64
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b574:	2300      	movs	r3, #0
 800b576:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b57a:	2200      	movs	r2, #0
 800b57c:	4943      	ldr	r1, [pc, #268]	; (800b68c <vOutInit+0x278>)
 800b57e:	200e      	movs	r0, #14
 800b580:	f7ff fcc4 	bl	800af0c <vHWOutInit>
//	vHWOutInit(OUT_16, &htim2, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
	vHWOutInit(OUT_17, &htim8, TIM_CHANNEL_3, 8.0, 0, 8.0, 100 );
 800b584:	2364      	movs	r3, #100	; 0x64
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b58c:	2300      	movs	r3, #0
 800b58e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b592:	2208      	movs	r2, #8
 800b594:	4940      	ldr	r1, [pc, #256]	; (800b698 <vOutInit+0x284>)
 800b596:	2010      	movs	r0, #16
 800b598:	f7ff fcb8 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_18,  &htim8, TIM_CHANNEL_4, 8.0, 0, 8.0, 100 );
 800b59c:	2364      	movs	r3, #100	; 0x64
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b5aa:	220c      	movs	r2, #12
 800b5ac:	493a      	ldr	r1, [pc, #232]	; (800b698 <vOutInit+0x284>)
 800b5ae:	2011      	movs	r0, #17
 800b5b0:	f7ff fcac 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_19, &htim12, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 800b5b4:	2364      	movs	r3, #100	; 0x64
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b5bc:	2300      	movs	r3, #0
 800b5be:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b5c2:	2204      	movs	r2, #4
 800b5c4:	4933      	ldr	r1, [pc, #204]	; (800b694 <vOutInit+0x280>)
 800b5c6:	2012      	movs	r0, #18
 800b5c8:	f7ff fca0 	bl	800af0c <vHWOutInit>
	vHWOutInit(OUT_20, &htim4, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800b5cc:	2364      	movs	r3, #100	; 0x64
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4929      	ldr	r1, [pc, #164]	; (800b684 <vOutInit+0x270>)
 800b5de:	2013      	movs	r0, #19
 800b5e0:	f7ff fc94 	bl	800af0c <vHWOutInit>
	vHWOutSet(OUT_1,100);
 800b5e4:	2164      	movs	r1, #100	; 0x64
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7ff fe8e 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_2,100);
 800b5ec:	2164      	movs	r1, #100	; 0x64
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	f7ff fe8a 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_3,100);
 800b5f4:	2164      	movs	r1, #100	; 0x64
 800b5f6:	2002      	movs	r0, #2
 800b5f8:	f7ff fe86 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_4,100);
 800b5fc:	2164      	movs	r1, #100	; 0x64
 800b5fe:	2003      	movs	r0, #3
 800b600:	f7ff fe82 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_5,100);
 800b604:	2164      	movs	r1, #100	; 0x64
 800b606:	2004      	movs	r0, #4
 800b608:	f7ff fe7e 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_6,100);
 800b60c:	2164      	movs	r1, #100	; 0x64
 800b60e:	2005      	movs	r0, #5
 800b610:	f7ff fe7a 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_7,100);
 800b614:	2164      	movs	r1, #100	; 0x64
 800b616:	2006      	movs	r0, #6
 800b618:	f7ff fe76 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_8,100);
 800b61c:	2164      	movs	r1, #100	; 0x64
 800b61e:	2007      	movs	r0, #7
 800b620:	f7ff fe72 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_9,100);
 800b624:	2164      	movs	r1, #100	; 0x64
 800b626:	2008      	movs	r0, #8
 800b628:	f7ff fe6e 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_10,100);
 800b62c:	2164      	movs	r1, #100	; 0x64
 800b62e:	2009      	movs	r0, #9
 800b630:	f7ff fe6a 	bl	800b308 <vHWOutSet>
	//vHWOutSet(OUT_11,100);
	//vHWOutSet(OUT_12,00);
	vHWOutSet(OUT_13,100);
 800b634:	2164      	movs	r1, #100	; 0x64
 800b636:	200c      	movs	r0, #12
 800b638:	f7ff fe66 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_14,100);
 800b63c:	2164      	movs	r1, #100	; 0x64
 800b63e:	200d      	movs	r0, #13
 800b640:	f7ff fe62 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_15,100);
 800b644:	2164      	movs	r1, #100	; 0x64
 800b646:	200e      	movs	r0, #14
 800b648:	f7ff fe5e 	bl	800b308 <vHWOutSet>
	//vHWOutSet(OUT_16,100);
	vHWOutSet(OUT_17,100);
 800b64c:	2164      	movs	r1, #100	; 0x64
 800b64e:	2010      	movs	r0, #16
 800b650:	f7ff fe5a 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_18,100);
 800b654:	2164      	movs	r1, #100	; 0x64
 800b656:	2011      	movs	r0, #17
 800b658:	f7ff fe56 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_19,100);
 800b65c:	2164      	movs	r1, #100	; 0x64
 800b65e:	2012      	movs	r0, #18
 800b660:	f7ff fe52 	bl	800b308 <vHWOutSet>
	vHWOutSet(OUT_20,100);
 800b664:	2164      	movs	r1, #100	; 0x64
 800b666:	2013      	movs	r0, #19
 800b668:	f7ff fe4e 	bl	800b308 <vHWOutSet>

}
 800b66c:	bf00      	nop
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	40021800 	.word	0x40021800
 800b678:	40020c00 	.word	0x40020c00
 800b67c:	40021000 	.word	0x40021000
 800b680:	42700000 	.word	0x42700000
 800b684:	200005b8 	.word	0x200005b8
 800b688:	20000528 	.word	0x20000528
 800b68c:	20000570 	.word	0x20000570
 800b690:	200004e0 	.word	0x200004e0
 800b694:	200006d8 	.word	0x200006d8
 800b698:	20000648 	.word	0x20000648

0800b69c <vADCTask>:
 // vADCConfigInit();
  return;
}

void vADCTask(void * argument)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af02      	add	r7, sp, #8
 800b6a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vADCTask */
  xADCEvent = xEventGroupCreateStatic(&xADCCreatedEventGroup );
 800b6a4:	4820      	ldr	r0, [pc, #128]	; (800b728 <vADCTask+0x8c>)
 800b6a6:	f7fc fcff 	bl	80080a8 <xEventGroupCreateStatic>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	4a1f      	ldr	r2, [pc, #124]	; (800b72c <vADCTask+0x90>)
 800b6ae:	6013      	str	r3, [r2, #0]

//  HAL_TIM_Base_Start_IT( &htim3 );
  HAL_TIM_Base_Start( &htim2 );
 800b6b0:	481f      	ldr	r0, [pc, #124]	; (800b730 <vADCTask+0x94>)
 800b6b2:	f7fa fc05 	bl	8005ec0 <HAL_TIM_Base_Start>

  //HAL_TIM_Base_Start_IT( &htim8 );
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	f7fc fca6 	bl	8008008 <osDelay>
	//HAL_ADC_Start_DMA( &hadc1,( uint32_t* )&ADC1_IN_Buffer, ( ADC_FRAME_SIZE * ADC1_CHANNELS ));
//	HAL_ADC_Start_DMA( &hadc2,( uint32_t* )&ADC2_IN_Buffer, ( ADC_FRAME_SIZE * ADC2_CHANNELS ));
	  HAL_ADC_Start_DMA( &hadc3,( uint32_t* )&ADC3_IN_Buffer, ( ADC_FRAME_SIZE * ADC3_CHANNELS ));
 800b6bc:	221b      	movs	r2, #27
 800b6be:	491d      	ldr	r1, [pc, #116]	; (800b734 <vADCTask+0x98>)
 800b6c0:	481d      	ldr	r0, [pc, #116]	; (800b738 <vADCTask+0x9c>)
 800b6c2:	f7f7 fcbd 	bl	8003040 <HAL_ADC_Start_DMA>
	  __HAL_TIM_ENABLE(&htim2);
 800b6c6:	4b1a      	ldr	r3, [pc, #104]	; (800b730 <vADCTask+0x94>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	4b18      	ldr	r3, [pc, #96]	; (800b730 <vADCTask+0x94>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f042 0201 	orr.w	r2, r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]
//	HAL_TIM_OC_Start_IT( &htim5, TIM_CHANNEL_3);
//	HAL_TIM_OC_Start_IT( &htim5, TIM_CHANNEL_2);
//	HAL_TIM_OC_Start_IT( &htim5, TIM_CHANNEL_1);
	xEventGroupWaitBits( xADCEvent, ( ADC3_READY  ), pdTRUE, pdTRUE, portMAX_DELAY );
 800b6d6:	4b15      	ldr	r3, [pc, #84]	; (800b72c <vADCTask+0x90>)
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	f04f 33ff 	mov.w	r3, #4294967295
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	2104      	movs	r1, #4
 800b6e6:	f7fc fd17 	bl	8008118 <xEventGroupWaitBits>
//	HAL_ADC_Stop_DMA(&hadc1);
	HAL_ADC_Stop_DMA(&hadc2);
 800b6ea:	4814      	ldr	r0, [pc, #80]	; (800b73c <vADCTask+0xa0>)
 800b6ec:	f7f7 fdb8 	bl	8003260 <HAL_ADC_Stop_DMA>
	__HAL_TIM_DISABLE(&htim2);
 800b6f0:	4b0f      	ldr	r3, [pc, #60]	; (800b730 <vADCTask+0x94>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6a1a      	ldr	r2, [r3, #32]
 800b6f6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10f      	bne.n	800b720 <vADCTask+0x84>
 800b700:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <vADCTask+0x94>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6a1a      	ldr	r2, [r3, #32]
 800b706:	f240 4344 	movw	r3, #1092	; 0x444
 800b70a:	4013      	ands	r3, r2
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d107      	bne.n	800b720 <vADCTask+0x84>
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <vADCTask+0x94>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	4b06      	ldr	r3, [pc, #24]	; (800b730 <vADCTask+0x94>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f022 0201 	bic.w	r2, r2, #1
 800b71e:	601a      	str	r2, [r3, #0]
//	HAL_TIM_OC_Stop_IT( &htim5, TIM_CHANNEL_3);
//	HAL_TIM_OC_Stop_IT( &htim5, TIM_CHANNEL_2);
//	HAL_TIM_OC_Stop_IT( &htim5, TIM_CHANNEL_1);
//	HAL_ADC_Stop_DMA(&hadc3);
	vDataConvertToFloat();
 800b720:	f000 f852 	bl	800b7c8 <vDataConvertToFloat>
	  osDelay(1);
 800b724:	e7c7      	b.n	800b6b6 <vADCTask+0x1a>
 800b726:	bf00      	nop
 800b728:	20006410 	.word	0x20006410
 800b72c:	2000640c 	.word	0x2000640c
 800b730:	20000528 	.word	0x20000528
 800b734:	20005cb0 	.word	0x20005cb0
 800b738:	200002fc 	.word	0x200002fc
 800b73c:	200002b4 	.word	0x200002b4

0800b740 <vGetAverDataFromRAW>:
/*
 * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
 * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
 */
void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint16_t InIndex, uint16_t OutIndex, uint8_t Size,uint16_t FrameSize, uint16_t BufferSize)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	4611      	mov	r1, r2
 800b74c:	461a      	mov	r2, r3
 800b74e:	460b      	mov	r3, r1
 800b750:	80fb      	strh	r3, [r7, #6]
 800b752:	4613      	mov	r3, r2
 800b754:	80bb      	strh	r3, [r7, #4]
	uint32_t temp;
	for (uint8_t i=0;i<Size;i++)
 800b756:	2300      	movs	r3, #0
 800b758:	74fb      	strb	r3, [r7, #19]
 800b75a:	e029      	b.n	800b7b0 <vGetAverDataFromRAW+0x70>
	{
		for (uint8_t j=0;j<FrameSize;j++)
 800b75c:	2300      	movs	r3, #0
 800b75e:	74bb      	strb	r3, [r7, #18]
 800b760:	e012      	b.n	800b788 <vGetAverDataFromRAW+0x48>
		{
		  temp = temp + InData[InIndex+i+j*BufferSize];
 800b762:	88fa      	ldrh	r2, [r7, #6]
 800b764:	7cfb      	ldrb	r3, [r7, #19]
 800b766:	441a      	add	r2, r3
 800b768:	7cbb      	ldrb	r3, [r7, #18]
 800b76a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800b76c:	fb01 f303 	mul.w	r3, r1, r3
 800b770:	4413      	add	r3, r2
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	4413      	add	r3, r2
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	4413      	add	r3, r2
 800b780:	617b      	str	r3, [r7, #20]
		for (uint8_t j=0;j<FrameSize;j++)
 800b782:	7cbb      	ldrb	r3, [r7, #18]
 800b784:	3301      	adds	r3, #1
 800b786:	74bb      	strb	r3, [r7, #18]
 800b788:	7cbb      	ldrb	r3, [r7, #18]
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b78e:	429a      	cmp	r2, r3
 800b790:	d8e7      	bhi.n	800b762 <vGetAverDataFromRAW+0x22>
		}
		OutData[OutIndex+i] = temp / FrameSize;
 800b792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	fbb2 f1f3 	udiv	r1, r2, r3
 800b79a:	88ba      	ldrh	r2, [r7, #4]
 800b79c:	7cfb      	ldrb	r3, [r7, #19]
 800b79e:	4413      	add	r3, r2
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	b28a      	uxth	r2, r1
 800b7a8:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0;i<Size;i++)
 800b7aa:	7cfb      	ldrb	r3, [r7, #19]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	74fb      	strb	r3, [r7, #19]
 800b7b0:	7cfa      	ldrb	r2, [r7, #19]
 800b7b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d3d0      	bcc.n	800b75c <vGetAverDataFromRAW+0x1c>
	}
}
 800b7ba:	bf00      	nop
 800b7bc:	bf00      	nop
 800b7be:	371c      	adds	r7, #28
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <vDataConvertToFloat>:

/*
 *  Функция усредняет данные из буфеера АЦП, и пробразует их значения
 */
void vDataConvertToFloat( void)
{
 800b7c8:	b590      	push	{r4, r7, lr}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af04      	add	r7, sp, #16
	uint8_t i;
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 7-8
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawCurData, 0U, 6U, 2U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800b7ce:	2308      	movs	r3, #8
 800b7d0:	9302      	str	r3, [sp, #8]
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	2306      	movs	r3, #6
 800b7dc:	2200      	movs	r2, #0
 800b7de:	4998      	ldr	r1, [pc, #608]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b7e0:	4898      	ldr	r0, [pc, #608]	; (800ba44 <vDataConvertToFloat+0x27c>)
 800b7e2:	f7ff ffad 	bl	800b740 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 19-20
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawCurData, 2U, 18U, 2U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800b7e6:	2308      	movs	r3, #8
 800b7e8:	9302      	str	r3, [sp, #8]
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	2312      	movs	r3, #18
 800b7f4:	2202      	movs	r2, #2
 800b7f6:	4992      	ldr	r1, [pc, #584]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b7f8:	4892      	ldr	r0, [pc, #584]	; (800ba44 <vDataConvertToFloat+0x27c>)
 800b7fa:	f7ff ffa1 	bl	800b740 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов AIN
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawVData, 4U, 0U, 4U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800b7fe:	2308      	movs	r3, #8
 800b800:	9302      	str	r3, [sp, #8]
 800b802:	2303      	movs	r3, #3
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	2304      	movs	r3, #4
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	2300      	movs	r3, #0
 800b80c:	2204      	movs	r2, #4
 800b80e:	498e      	ldr	r1, [pc, #568]	; (800ba48 <vDataConvertToFloat+0x280>)
 800b810:	488c      	ldr	r0, [pc, #560]	; (800ba44 <vDataConvertToFloat+0x27c>)
 800b812:	f7ff ff95 	bl	800b740 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 2 данныех каналов каналов тока 4-6
	 vGetAverDataFromRAW((uint16_t *)&ADC2_IN_Buffer, (uint16_t *)&muRawCurData,0U, 3U, 3U ,ADC_FRAME_SIZE,ADC2_CHANNELS);
 800b816:	2307      	movs	r3, #7
 800b818:	9302      	str	r3, [sp, #8]
 800b81a:	2303      	movs	r3, #3
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	2303      	movs	r3, #3
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	2303      	movs	r3, #3
 800b824:	2200      	movs	r2, #0
 800b826:	4986      	ldr	r1, [pc, #536]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b828:	4888      	ldr	r0, [pc, #544]	; (800ba4c <vDataConvertToFloat+0x284>)
 800b82a:	f7ff ff89 	bl	800b740 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 2 данныех каналов каналов тока 9-12
	 vGetAverDataFromRAW((uint16_t *)&ADC2_IN_Buffer, (uint16_t *)&muRawCurData, 3U, 8U, 4U ,ADC_FRAME_SIZE,ADC2_CHANNELS);
 800b82e:	2307      	movs	r3, #7
 800b830:	9302      	str	r3, [sp, #8]
 800b832:	2303      	movs	r3, #3
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	2304      	movs	r3, #4
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	2308      	movs	r3, #8
 800b83c:	2203      	movs	r2, #3
 800b83e:	4980      	ldr	r1, [pc, #512]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b840:	4882      	ldr	r0, [pc, #520]	; (800ba4c <vDataConvertToFloat+0x284>)
 800b842:	f7ff ff7d 	bl	800b740 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 1-3
	 vGetAverDataFromRAW((uint16_t *)&ADC3_IN_Buffer, (uint16_t *)&muRawCurData, 0U, 0U, 3U ,ADC_FRAME_SIZE,ADC3_CHANNELS);
 800b846:	2309      	movs	r3, #9
 800b848:	9302      	str	r3, [sp, #8]
 800b84a:	2303      	movs	r3, #3
 800b84c:	9301      	str	r3, [sp, #4]
 800b84e:	2303      	movs	r3, #3
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	2300      	movs	r3, #0
 800b854:	2200      	movs	r2, #0
 800b856:	497a      	ldr	r1, [pc, #488]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b858:	487d      	ldr	r0, [pc, #500]	; (800ba50 <vDataConvertToFloat+0x288>)
 800b85a:	f7ff ff71 	bl	800b740 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 13-18
	 vGetAverDataFromRAW((uint16_t *)&ADC3_IN_Buffer, (uint16_t *)&muRawCurData, 3U, 12U, 5U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800b85e:	2308      	movs	r3, #8
 800b860:	9302      	str	r3, [sp, #8]
 800b862:	2303      	movs	r3, #3
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	2305      	movs	r3, #5
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	230c      	movs	r3, #12
 800b86c:	2203      	movs	r2, #3
 800b86e:	4974      	ldr	r1, [pc, #464]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b870:	4877      	ldr	r0, [pc, #476]	; (800ba50 <vDataConvertToFloat+0x288>)
 800b872:	f7ff ff65 	bl	800b740 <vGetAverDataFromRAW>
	 //Преобразование во флоат данных AIN
	 for ( i = 0; i < 4U; i++ )
 800b876:	2300      	movs	r3, #0
 800b878:	71fb      	strb	r3, [r7, #7]
 800b87a:	e024      	b.n	800b8c6 <vDataConvertToFloat+0xfe>
	 {
		 mfVData[ i ] = muRawVData[ i ] * COOF;
 800b87c:	79fb      	ldrb	r3, [r7, #7]
 800b87e:	4a72      	ldr	r2, [pc, #456]	; (800ba48 <vDataConvertToFloat+0x280>)
 800b880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b884:	461a      	mov	r2, r3
 800b886:	4b73      	ldr	r3, [pc, #460]	; (800ba54 <vDataConvertToFloat+0x28c>)
 800b888:	fb02 f303 	mul.w	r3, r2, r3
 800b88c:	4a72      	ldr	r2, [pc, #456]	; (800ba58 <vDataConvertToFloat+0x290>)
 800b88e:	fb82 1203 	smull	r1, r2, r2, r3
 800b892:	1412      	asrs	r2, r2, #16
 800b894:	17db      	asrs	r3, r3, #31
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	4618      	mov	r0, r3
 800b89a:	f7f4 fdeb 	bl	8000474 <__aeabi_i2d>
 800b89e:	a366      	add	r3, pc, #408	; (adr r3, 800ba38 <vDataConvertToFloat+0x270>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f7f4 fe50 	bl	8000548 <__aeabi_dmul>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	79fc      	ldrb	r4, [r7, #7]
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	f7f5 f85b 	bl	800096c <__aeabi_d2f>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	4968      	ldr	r1, [pc, #416]	; (800ba5c <vDataConvertToFloat+0x294>)
 800b8ba:	00a3      	lsls	r3, r4, #2
 800b8bc:	440b      	add	r3, r1
 800b8be:	601a      	str	r2, [r3, #0]
	 for ( i = 0; i < 4U; i++ )
 800b8c0:	79fb      	ldrb	r3, [r7, #7]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	71fb      	strb	r3, [r7, #7]
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	2b03      	cmp	r3, #3
 800b8ca:	d9d7      	bls.n	800b87c <vDataConvertToFloat+0xb4>
	 }
	 //Преобразвоание во float данных тока каналов 1-20
	 for ( i =0; i < 20U ; i++)
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	71fb      	strb	r3, [r7, #7]
 800b8d0:	e0a8      	b.n	800ba24 <vDataConvertToFloat+0x25c>
	{
		 if  (muRawCurData[ i ] == 0xFFF)
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	4a5a      	ldr	r2, [pc, #360]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b8d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8da:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d109      	bne.n	800b8f6 <vDataConvertToFloat+0x12e>
		 {
			 out[i].error_flag  = ERROR_ON;
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	4a5e      	ldr	r2, [pc, #376]	; (800ba60 <vDataConvertToFloat+0x298>)
 800b8e6:	2158      	movs	r1, #88	; 0x58
 800b8e8:	fb01 f303 	mul.w	r3, r1, r3
 800b8ec:	4413      	add	r3, r2
 800b8ee:	3320      	adds	r3, #32
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	e093      	b.n	800ba1e <vDataConvertToFloat+0x256>
		 }
		 else
		 {
			 out[i].error_flag  = ERROR_OFF;
 800b8f6:	79fb      	ldrb	r3, [r7, #7]
 800b8f8:	4a59      	ldr	r2, [pc, #356]	; (800ba60 <vDataConvertToFloat+0x298>)
 800b8fa:	2158      	movs	r1, #88	; 0x58
 800b8fc:	fb01 f303 	mul.w	r3, r1, r3
 800b900:	4413      	add	r3, r2
 800b902:	3320      	adds	r3, #32
 800b904:	2200      	movs	r2, #0
 800b906:	701a      	strb	r2, [r3, #0]
			 for (uint8_t r = 0; r < 4U; r++)
 800b908:	2300      	movs	r3, #0
 800b90a:	71bb      	strb	r3, [r7, #6]
 800b90c:	e083      	b.n	800ba16 <vDataConvertToFloat+0x24e>
			 {
				 if ( muRawCurData[ i ] < out[i].CSC[r].data )
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	4a4b      	ldr	r2, [pc, #300]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b912:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b916:	79f8      	ldrb	r0, [r7, #7]
 800b918:	79ba      	ldrb	r2, [r7, #6]
 800b91a:	4c51      	ldr	r4, [pc, #324]	; (800ba60 <vDataConvertToFloat+0x298>)
 800b91c:	4613      	mov	r3, r2
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	2258      	movs	r2, #88	; 0x58
 800b926:	fb00 f202 	mul.w	r2, r0, r2
 800b92a:	4413      	add	r3, r2
 800b92c:	4423      	add	r3, r4
 800b92e:	3324      	adds	r3, #36	; 0x24
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	4299      	cmp	r1, r3
 800b934:	d26c      	bcs.n	800ba10 <vDataConvertToFloat+0x248>
				 {
					 out[i].current = ( (float) muRawCurData [ i ] * out[i].CSC[r].k  + out[i].CSC[r].b ) *K /RR;
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	4a41      	ldr	r2, [pc, #260]	; (800ba40 <vDataConvertToFloat+0x278>)
 800b93a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b93e:	ee07 3a90 	vmov	s15, r3
 800b942:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b946:	79f9      	ldrb	r1, [r7, #7]
 800b948:	79ba      	ldrb	r2, [r7, #6]
 800b94a:	4845      	ldr	r0, [pc, #276]	; (800ba60 <vDataConvertToFloat+0x298>)
 800b94c:	4613      	mov	r3, r2
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	4413      	add	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	2258      	movs	r2, #88	; 0x58
 800b956:	fb01 f202 	mul.w	r2, r1, r2
 800b95a:	4413      	add	r3, r2
 800b95c:	4403      	add	r3, r0
 800b95e:	3328      	adds	r3, #40	; 0x28
 800b960:	edd3 7a00 	vldr	s15, [r3]
 800b964:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b968:	79f9      	ldrb	r1, [r7, #7]
 800b96a:	79ba      	ldrb	r2, [r7, #6]
 800b96c:	483c      	ldr	r0, [pc, #240]	; (800ba60 <vDataConvertToFloat+0x298>)
 800b96e:	4613      	mov	r3, r2
 800b970:	005b      	lsls	r3, r3, #1
 800b972:	4413      	add	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	2258      	movs	r2, #88	; 0x58
 800b978:	fb01 f202 	mul.w	r2, r1, r2
 800b97c:	4413      	add	r3, r2
 800b97e:	4403      	add	r3, r0
 800b980:	332c      	adds	r3, #44	; 0x2c
 800b982:	edd3 7a00 	vldr	s15, [r3]
 800b986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b98a:	ee17 0a90 	vmov	r0, s15
 800b98e:	f7f4 fd83 	bl	8000498 <__aeabi_f2d>
 800b992:	a329      	add	r3, pc, #164	; (adr r3, 800ba38 <vDataConvertToFloat+0x270>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f7f4 fdd6 	bl	8000548 <__aeabi_dmul>
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f04f 0200 	mov.w	r2, #0
 800b9a8:	4b2e      	ldr	r3, [pc, #184]	; (800ba64 <vDataConvertToFloat+0x29c>)
 800b9aa:	f7f4 fef7 	bl	800079c <__aeabi_ddiv>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	79fc      	ldrb	r4, [r7, #7]
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	f7f4 ffd8 	bl	800096c <__aeabi_d2f>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	4928      	ldr	r1, [pc, #160]	; (800ba60 <vDataConvertToFloat+0x298>)
 800b9c0:	2358      	movs	r3, #88	; 0x58
 800b9c2:	fb04 f303 	mul.w	r3, r4, r3
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3354      	adds	r3, #84	; 0x54
 800b9ca:	601a      	str	r2, [r3, #0]
					 if (out[i].current > out[i].power )
 800b9cc:	79fb      	ldrb	r3, [r7, #7]
 800b9ce:	4a24      	ldr	r2, [pc, #144]	; (800ba60 <vDataConvertToFloat+0x298>)
 800b9d0:	2158      	movs	r1, #88	; 0x58
 800b9d2:	fb01 f303 	mul.w	r3, r1, r3
 800b9d6:	4413      	add	r3, r2
 800b9d8:	3354      	adds	r3, #84	; 0x54
 800b9da:	ed93 7a00 	vldr	s14, [r3]
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	4a1f      	ldr	r2, [pc, #124]	; (800ba60 <vDataConvertToFloat+0x298>)
 800b9e2:	2158      	movs	r1, #88	; 0x58
 800b9e4:	fb01 f303 	mul.w	r3, r1, r3
 800b9e8:	4413      	add	r3, r2
 800b9ea:	330c      	adds	r3, #12
 800b9ec:	edd3 7a00 	vldr	s15, [r3]
 800b9f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f8:	dc00      	bgt.n	800b9fc <vDataConvertToFloat+0x234>
					 {
						 out[i].error_flag = ERROR_OVERLOAD;
					 }
					 break;
 800b9fa:	e010      	b.n	800ba1e <vDataConvertToFloat+0x256>
						 out[i].error_flag = ERROR_OVERLOAD;
 800b9fc:	79fb      	ldrb	r3, [r7, #7]
 800b9fe:	4a18      	ldr	r2, [pc, #96]	; (800ba60 <vDataConvertToFloat+0x298>)
 800ba00:	2158      	movs	r1, #88	; 0x58
 800ba02:	fb01 f303 	mul.w	r3, r1, r3
 800ba06:	4413      	add	r3, r2
 800ba08:	3320      	adds	r3, #32
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	701a      	strb	r2, [r3, #0]
					 break;
 800ba0e:	e006      	b.n	800ba1e <vDataConvertToFloat+0x256>
			 for (uint8_t r = 0; r < 4U; r++)
 800ba10:	79bb      	ldrb	r3, [r7, #6]
 800ba12:	3301      	adds	r3, #1
 800ba14:	71bb      	strb	r3, [r7, #6]
 800ba16:	79bb      	ldrb	r3, [r7, #6]
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	f67f af78 	bls.w	800b90e <vDataConvertToFloat+0x146>
	 for ( i =0; i < 20U ; i++)
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	3301      	adds	r3, #1
 800ba22:	71fb      	strb	r3, [r7, #7]
 800ba24:	79fb      	ldrb	r3, [r7, #7]
 800ba26:	2b13      	cmp	r3, #19
 800ba28:	f67f af53 	bls.w	800b8d2 <vDataConvertToFloat+0x10a>
				 }
			 }
		 }
	}
}
 800ba2c:	bf00      	nop
 800ba2e:	bf00      	nop
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd90      	pop	{r4, r7, pc}
 800ba36:	bf00      	nop
 800ba38:	e734d9b4 	.word	0xe734d9b4
 800ba3c:	3f4a680c 	.word	0x3f4a680c
 800ba40:	200063c8 	.word	0x200063c8
 800ba44:	20005c54 	.word	0x20005c54
 800ba48:	200063f0 	.word	0x200063f0
 800ba4c:	20005c84 	.word	0x20005c84
 800ba50:	20005cb0 	.word	0x20005cb0
 800ba54:	000222e0 	.word	0x000222e0
 800ba58:	6fd91d85 	.word	0x6fd91d85
 800ba5c:	200063f8 	.word	0x200063f8
 800ba60:	20005ce8 	.word	0x20005ce8
 800ba64:	408f4000 	.word	0x408f4000

0800ba68 <vOutContolTask>:


void vOutContolTask(void * argument)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
	uint8_t temp_power,cur_power;
	xOutEvent = xEventGroupCreateStatic(&xOutCreatedEventGroup );
 800ba70:	48ac      	ldr	r0, [pc, #688]	; (800bd24 <vOutContolTask+0x2bc>)
 800ba72:	f7fc fb19 	bl	80080a8 <xEventGroupCreateStatic>
 800ba76:	4603      	mov	r3, r0
 800ba78:	4aab      	ldr	r2, [pc, #684]	; (800bd28 <vOutContolTask+0x2c0>)
 800ba7a:	6013      	str	r3, [r2, #0]
	EventBits_t config_state;
	vOutInit();
 800ba7c:	f7ff fcca 	bl	800b414 <vOutInit>
	for(;;)
	{
		   vTaskDelay(1);
 800ba80:	2001      	movs	r0, #1
 800ba82:	f7fd fc75 	bl	8009370 <vTaskDelay>
		   config_state = xEventGroupGetBits (xOutEvent); //Получаем состоние конфигурационных флагов
 800ba86:	4ba8      	ldr	r3, [pc, #672]	; (800bd28 <vOutContolTask+0x2c0>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fc fc11 	bl	80082b4 <xEventGroupClearBits>
 800ba92:	6138      	str	r0, [r7, #16]
			for (uint8_t i=0; i<OUT_COUNT;i++)
 800ba94:	2300      	movs	r3, #0
 800ba96:	75bb      	strb	r3, [r7, #22]
 800ba98:	e19e      	b.n	800bdd8 <vOutContolTask+0x370>
			{
				if ( (config_state & ((uint32_t)0x1< i)) ==0 ) //Если канал не находится в режиме конфигурации, то переходим к обработке
 800ba9a:	7dbb      	ldrb	r3, [r7, #22]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	bf8c      	ite	hi
 800baa0:	2301      	movhi	r3, #1
 800baa2:	2300      	movls	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	461a      	mov	r2, r3
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	4013      	ands	r3, r2
 800baac:	2b00      	cmp	r3, #0
 800baae:	f040 8189 	bne.w	800bdc4 <vOutContolTask+0x35c>
				{
					switch (out[i].out_state)
 800bab2:	7dbb      	ldrb	r3, [r7, #22]
 800bab4:	4a9d      	ldr	r2, [pc, #628]	; (800bd2c <vOutContolTask+0x2c4>)
 800bab6:	2158      	movs	r1, #88	; 0x58
 800bab8:	fb01 f303 	mul.w	r3, r1, r3
 800babc:	4413      	add	r3, r2
 800babe:	3309      	adds	r3, #9
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b10      	cmp	r3, #16
 800bac4:	f200 8185 	bhi.w	800bdd2 <vOutContolTask+0x36a>
 800bac8:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <vOutContolTask+0x68>)
 800baca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bace:	bf00      	nop
 800bad0:	0800bb15 	.word	0x0800bb15
 800bad4:	0800bb55 	.word	0x0800bb55
 800bad8:	0800bc61 	.word	0x0800bc61
 800badc:	0800bdd3 	.word	0x0800bdd3
 800bae0:	0800bdd3 	.word	0x0800bdd3
 800bae4:	0800bdd3 	.word	0x0800bdd3
 800bae8:	0800bdd3 	.word	0x0800bdd3
 800baec:	0800bdd3 	.word	0x0800bdd3
 800baf0:	0800bcd7 	.word	0x0800bcd7
 800baf4:	0800bdd3 	.word	0x0800bdd3
 800baf8:	0800bdd3 	.word	0x0800bdd3
 800bafc:	0800bdd3 	.word	0x0800bdd3
 800bb00:	0800bdd3 	.word	0x0800bdd3
 800bb04:	0800bdd3 	.word	0x0800bdd3
 800bb08:	0800bdd3 	.word	0x0800bdd3
 800bb0c:	0800bdd3 	.word	0x0800bdd3
 800bb10:	0800bd31 	.word	0x0800bd31
					{
					case STATE_OUT_OFF: //Состония входа - выключен
							if (out[i].out_logic_state == OUT_ON)  //Если обнаружено логическое соостония -вкл, то переходим в состония включения
 800bb14:	7dbb      	ldrb	r3, [r7, #22]
 800bb16:	4a85      	ldr	r2, [pc, #532]	; (800bd2c <vOutContolTask+0x2c4>)
 800bb18:	2158      	movs	r1, #88	; 0x58
 800bb1a:	fb01 f303 	mul.w	r3, r1, r3
 800bb1e:	4413      	add	r3, r2
 800bb20:	3308      	adds	r3, #8
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f040 814f 	bne.w	800bdc8 <vOutContolTask+0x360>
							{
								out[i].out_state = STATE_OUT_ON_PROCESS;
 800bb2a:	7dbb      	ldrb	r3, [r7, #22]
 800bb2c:	4a7f      	ldr	r2, [pc, #508]	; (800bd2c <vOutContolTask+0x2c4>)
 800bb2e:	2158      	movs	r1, #88	; 0x58
 800bb30:	fb01 f303 	mul.w	r3, r1, r3
 800bb34:	4413      	add	r3, r2
 800bb36:	3309      	adds	r3, #9
 800bb38:	2201      	movs	r2, #1
 800bb3a:	701a      	strb	r2, [r3, #0]
								out[i].overload_timer = 0U;
 800bb3c:	7dbb      	ldrb	r3, [r7, #22]
 800bb3e:	4a7b      	ldr	r2, [pc, #492]	; (800bd2c <vOutContolTask+0x2c4>)
 800bb40:	2158      	movs	r1, #88	; 0x58
 800bb42:	fb01 f303 	mul.w	r3, r1, r3
 800bb46:	4413      	add	r3, r2
 800bb48:	3318      	adds	r3, #24
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	801a      	strh	r2, [r3, #0]
								cur_power = START_POWER;
 800bb4e:	231e      	movs	r3, #30
 800bb50:	75fb      	strb	r3, [r7, #23]
							}
							break;
 800bb52:	e139      	b.n	800bdc8 <vOutContolTask+0x360>
					case STATE_OUT_ON_PROCESS: //Состояния влючения
							out[i].overload_timer++;
 800bb54:	7dbb      	ldrb	r3, [r7, #22]
 800bb56:	4975      	ldr	r1, [pc, #468]	; (800bd2c <vOutContolTask+0x2c4>)
 800bb58:	2258      	movs	r2, #88	; 0x58
 800bb5a:	fb03 f202 	mul.w	r2, r3, r2
 800bb5e:	440a      	add	r2, r1
 800bb60:	3218      	adds	r2, #24
 800bb62:	8812      	ldrh	r2, [r2, #0]
 800bb64:	3201      	adds	r2, #1
 800bb66:	b290      	uxth	r0, r2
 800bb68:	4a70      	ldr	r2, [pc, #448]	; (800bd2c <vOutContolTask+0x2c4>)
 800bb6a:	2158      	movs	r1, #88	; 0x58
 800bb6c:	fb01 f303 	mul.w	r3, r1, r3
 800bb70:	4413      	add	r3, r2
 800bb72:	3318      	adds	r3, #24
 800bb74:	4602      	mov	r2, r0
 800bb76:	801a      	strh	r2, [r3, #0]
							if ( (out[i].error_flag == ERROR_ON) || (out[i].error_flag == ERROR_OVERLOAD) ) //Если обнаружена перегрузка
 800bb78:	7dbb      	ldrb	r3, [r7, #22]
 800bb7a:	4a6c      	ldr	r2, [pc, #432]	; (800bd2c <vOutContolTask+0x2c4>)
 800bb7c:	2158      	movs	r1, #88	; 0x58
 800bb7e:	fb01 f303 	mul.w	r3, r1, r3
 800bb82:	4413      	add	r3, r2
 800bb84:	3320      	adds	r3, #32
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d009      	beq.n	800bba0 <vOutContolTask+0x138>
 800bb8c:	7dbb      	ldrb	r3, [r7, #22]
 800bb8e:	4a67      	ldr	r2, [pc, #412]	; (800bd2c <vOutContolTask+0x2c4>)
 800bb90:	2158      	movs	r1, #88	; 0x58
 800bb92:	fb01 f303 	mul.w	r3, r1, r3
 800bb96:	4413      	add	r3, r2
 800bb98:	3320      	adds	r3, #32
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	d10d      	bne.n	800bbbc <vOutContolTask+0x154>
							{
								vHWOutResete(i);  //Выключаем выход
 800bba0:	7dbb      	ldrb	r3, [r7, #22]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fb84 	bl	800b2b0 <vHWOutResete>
								out[i].out_state = STATE_OUT_ERROR_PROCESS; //Переходим в состония бработки ошибок
 800bba8:	7dbb      	ldrb	r3, [r7, #22]
 800bbaa:	4a60      	ldr	r2, [pc, #384]	; (800bd2c <vOutContolTask+0x2c4>)
 800bbac:	2158      	movs	r1, #88	; 0x58
 800bbae:	fb01 f303 	mul.w	r3, r1, r3
 800bbb2:	4413      	add	r3, r2
 800bbb4:	3309      	adds	r3, #9
 800bbb6:	2208      	movs	r2, #8
 800bbb8:	701a      	strb	r2, [r3, #0]
								break;
 800bbba:	e10a      	b.n	800bdd2 <vOutContolTask+0x36a>
							}
							if  ( out[i].overload_timer >= out[i].overload_config_timer ) //Если прошло время полонго пуска
 800bbbc:	7dbb      	ldrb	r3, [r7, #22]
 800bbbe:	4a5b      	ldr	r2, [pc, #364]	; (800bd2c <vOutContolTask+0x2c4>)
 800bbc0:	2158      	movs	r1, #88	; 0x58
 800bbc2:	fb01 f303 	mul.w	r3, r1, r3
 800bbc6:	4413      	add	r3, r2
 800bbc8:	3318      	adds	r3, #24
 800bbca:	881a      	ldrh	r2, [r3, #0]
 800bbcc:	7dbb      	ldrb	r3, [r7, #22]
 800bbce:	4957      	ldr	r1, [pc, #348]	; (800bd2c <vOutContolTask+0x2c4>)
 800bbd0:	2058      	movs	r0, #88	; 0x58
 800bbd2:	fb00 f303 	mul.w	r3, r0, r3
 800bbd6:	440b      	add	r3, r1
 800bbd8:	3316      	adds	r3, #22
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d30b      	bcc.n	800bbf8 <vOutContolTask+0x190>
							{
									out[i].out_state = STATE_OUT_ON; //переходим в стосония влючено и запускаем выход на 100% мощности
 800bbe0:	7dbb      	ldrb	r3, [r7, #22]
 800bbe2:	4a52      	ldr	r2, [pc, #328]	; (800bd2c <vOutContolTask+0x2c4>)
 800bbe4:	2158      	movs	r1, #88	; 0x58
 800bbe6:	fb01 f303 	mul.w	r3, r1, r3
 800bbea:	4413      	add	r3, r2
 800bbec:	3309      	adds	r3, #9
 800bbee:	2202      	movs	r2, #2
 800bbf0:	701a      	strb	r2, [r3, #0]
									cur_power = 100;
 800bbf2:	2364      	movs	r3, #100	; 0x64
 800bbf4:	75fb      	strb	r3, [r7, #23]
 800bbf6:	e02c      	b.n	800bc52 <vOutContolTask+0x1ea>
							}
							else
							{   //время пуска не прошоло, вычисляем текущую мощность, котору надо пдать на выход.
								temp_power =(uint8_t) (float)out[i].overload_timer/out[i].overload_config_timer*100;
 800bbf8:	7dbb      	ldrb	r3, [r7, #22]
 800bbfa:	4a4c      	ldr	r2, [pc, #304]	; (800bd2c <vOutContolTask+0x2c4>)
 800bbfc:	2158      	movs	r1, #88	; 0x58
 800bbfe:	fb01 f303 	mul.w	r3, r1, r3
 800bc02:	4413      	add	r3, r2
 800bc04:	3318      	adds	r3, #24
 800bc06:	881b      	ldrh	r3, [r3, #0]
 800bc08:	ee07 3a90 	vmov	s15, r3
 800bc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc14:	edc7 7a00 	vstr	s15, [r7]
 800bc18:	783b      	ldrb	r3, [r7, #0]
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	7dbb      	ldrb	r3, [r7, #22]
 800bc20:	4a42      	ldr	r2, [pc, #264]	; (800bd2c <vOutContolTask+0x2c4>)
 800bc22:	2158      	movs	r1, #88	; 0x58
 800bc24:	fb01 f303 	mul.w	r3, r1, r3
 800bc28:	4413      	add	r3, r2
 800bc2a:	3316      	adds	r3, #22
 800bc2c:	881b      	ldrh	r3, [r3, #0]
 800bc2e:	fb90 f3f3 	sdiv	r3, r0, r3
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	461a      	mov	r2, r3
 800bc36:	0092      	lsls	r2, r2, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	0091      	lsls	r1, r2, #2
 800bc3e:	461a      	mov	r2, r3
 800bc40:	460b      	mov	r3, r1
 800bc42:	4413      	add	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	73fb      	strb	r3, [r7, #15]
								if (temp_power > START_POWER)
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
 800bc4a:	2b1e      	cmp	r3, #30
 800bc4c:	d901      	bls.n	800bc52 <vOutContolTask+0x1ea>
								{
									cur_power = temp_power;
 800bc4e:	7bfb      	ldrb	r3, [r7, #15]
 800bc50:	75fb      	strb	r3, [r7, #23]
								}
							}
							vHWOutSet(i,cur_power);
 800bc52:	7dfa      	ldrb	r2, [r7, #23]
 800bc54:	7dbb      	ldrb	r3, [r7, #22]
 800bc56:	4611      	mov	r1, r2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fb55 	bl	800b308 <vHWOutSet>
							break;
 800bc5e:	e0b8      	b.n	800bdd2 <vOutContolTask+0x36a>
						case STATE_OUT_ON:  // Состояние входа - включен
								//Если система обнаружила ошибку ключа или ток больше номинального
								if ( (out[i].error_flag == ERROR_ON) || (out[i].error_flag == ERROR_OVERLOAD) )
 800bc60:	7dbb      	ldrb	r3, [r7, #22]
 800bc62:	4a32      	ldr	r2, [pc, #200]	; (800bd2c <vOutContolTask+0x2c4>)
 800bc64:	2158      	movs	r1, #88	; 0x58
 800bc66:	fb01 f303 	mul.w	r3, r1, r3
 800bc6a:	4413      	add	r3, r2
 800bc6c:	3320      	adds	r3, #32
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d009      	beq.n	800bc88 <vOutContolTask+0x220>
 800bc74:	7dbb      	ldrb	r3, [r7, #22]
 800bc76:	4a2d      	ldr	r2, [pc, #180]	; (800bd2c <vOutContolTask+0x2c4>)
 800bc78:	2158      	movs	r1, #88	; 0x58
 800bc7a:	fb01 f303 	mul.w	r3, r1, r3
 800bc7e:	4413      	add	r3, r2
 800bc80:	3320      	adds	r3, #32
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d10d      	bne.n	800bca4 <vOutContolTask+0x23c>
								{
									vHWOutResete(i);
 800bc88:	7dbb      	ldrb	r3, [r7, #22]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff fb10 	bl	800b2b0 <vHWOutResete>
									out[i].out_state = STATE_OUT_ERROR_PROCESS;
 800bc90:	7dbb      	ldrb	r3, [r7, #22]
 800bc92:	4a26      	ldr	r2, [pc, #152]	; (800bd2c <vOutContolTask+0x2c4>)
 800bc94:	2158      	movs	r1, #88	; 0x58
 800bc96:	fb01 f303 	mul.w	r3, r1, r3
 800bc9a:	4413      	add	r3, r2
 800bc9c:	3309      	adds	r3, #9
 800bc9e:	2208      	movs	r2, #8
 800bca0:	701a      	strb	r2, [r3, #0]
									break;
 800bca2:	e096      	b.n	800bdd2 <vOutContolTask+0x36a>
								}
								if  (out[i].out_logic_state == OUT_OFF)
 800bca4:	7dbb      	ldrb	r3, [r7, #22]
 800bca6:	4a21      	ldr	r2, [pc, #132]	; (800bd2c <vOutContolTask+0x2c4>)
 800bca8:	2158      	movs	r1, #88	; 0x58
 800bcaa:	fb01 f303 	mul.w	r3, r1, r3
 800bcae:	4413      	add	r3, r2
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	f040 8089 	bne.w	800bdcc <vOutContolTask+0x364>
								{
									vHWOutResete(i);
 800bcba:	7dbb      	ldrb	r3, [r7, #22]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7ff faf7 	bl	800b2b0 <vHWOutResete>
									out[i].out_state = STATE_OUT_OFF;
 800bcc2:	7dbb      	ldrb	r3, [r7, #22]
 800bcc4:	4a19      	ldr	r2, [pc, #100]	; (800bd2c <vOutContolTask+0x2c4>)
 800bcc6:	2158      	movs	r1, #88	; 0x58
 800bcc8:	fb01 f303 	mul.w	r3, r1, r3
 800bccc:	4413      	add	r3, r2
 800bcce:	3309      	adds	r3, #9
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	701a      	strb	r2, [r3, #0]
								}
								break;
 800bcd4:	e07a      	b.n	800bdcc <vOutContolTask+0x364>
						case STATE_OUT_ERROR_PROCESS:
							   if (out[i].error_count == 1)
 800bcd6:	7dbb      	ldrb	r3, [r7, #22]
 800bcd8:	4a14      	ldr	r2, [pc, #80]	; (800bd2c <vOutContolTask+0x2c4>)
 800bcda:	2158      	movs	r1, #88	; 0x58
 800bcdc:	fb01 f303 	mul.w	r3, r1, r3
 800bce0:	4413      	add	r3, r2
 800bce2:	331a      	adds	r3, #26
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d109      	bne.n	800bcfe <vOutContolTask+0x296>
							   {
								   out[i].out_state = STATE_OUT_ERROR;
 800bcea:	7dbb      	ldrb	r3, [r7, #22]
 800bcec:	4a0f      	ldr	r2, [pc, #60]	; (800bd2c <vOutContolTask+0x2c4>)
 800bcee:	2158      	movs	r1, #88	; 0x58
 800bcf0:	fb01 f303 	mul.w	r3, r1, r3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	3309      	adds	r3, #9
 800bcf8:	2204      	movs	r2, #4
 800bcfa:	701a      	strb	r2, [r3, #0]
								   break;
 800bcfc:	e069      	b.n	800bdd2 <vOutContolTask+0x36a>
							   }
							   out[i].restart_timer = 0U;
 800bcfe:	7dbb      	ldrb	r3, [r7, #22]
 800bd00:	4a0a      	ldr	r2, [pc, #40]	; (800bd2c <vOutContolTask+0x2c4>)
 800bd02:	2158      	movs	r1, #88	; 0x58
 800bd04:	fb01 f303 	mul.w	r3, r1, r3
 800bd08:	4413      	add	r3, r2
 800bd0a:	331c      	adds	r3, #28
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	801a      	strh	r2, [r3, #0]
							   out[i].out_state = STATE_OUT_RESTART_PROCESS;
 800bd10:	7dbb      	ldrb	r3, [r7, #22]
 800bd12:	4a06      	ldr	r2, [pc, #24]	; (800bd2c <vOutContolTask+0x2c4>)
 800bd14:	2158      	movs	r1, #88	; 0x58
 800bd16:	fb01 f303 	mul.w	r3, r1, r3
 800bd1a:	4413      	add	r3, r2
 800bd1c:	3309      	adds	r3, #9
 800bd1e:	2210      	movs	r2, #16
 800bd20:	701a      	strb	r2, [r3, #0]
							   break;
 800bd22:	e056      	b.n	800bdd2 <vOutContolTask+0x36a>
 800bd24:	20006434 	.word	0x20006434
 800bd28:	20006430 	.word	0x20006430
 800bd2c:	20005ce8 	.word	0x20005ce8
						case STATE_OUT_ERROR:
							 break;
						case STATE_OUT_RESTART_PROCESS:
							out[i].restart_timer++;
 800bd30:	7dbb      	ldrb	r3, [r7, #22]
 800bd32:	492c      	ldr	r1, [pc, #176]	; (800bde4 <vOutContolTask+0x37c>)
 800bd34:	2258      	movs	r2, #88	; 0x58
 800bd36:	fb03 f202 	mul.w	r2, r3, r2
 800bd3a:	440a      	add	r2, r1
 800bd3c:	321c      	adds	r2, #28
 800bd3e:	8812      	ldrh	r2, [r2, #0]
 800bd40:	3201      	adds	r2, #1
 800bd42:	b290      	uxth	r0, r2
 800bd44:	4a27      	ldr	r2, [pc, #156]	; (800bde4 <vOutContolTask+0x37c>)
 800bd46:	2158      	movs	r1, #88	; 0x58
 800bd48:	fb01 f303 	mul.w	r3, r1, r3
 800bd4c:	4413      	add	r3, r2
 800bd4e:	331c      	adds	r3, #28
 800bd50:	4602      	mov	r2, r0
 800bd52:	801a      	strh	r2, [r3, #0]
							if  ( out[i].restart_timer >= out[i].restart_config_timer )
 800bd54:	7dbb      	ldrb	r3, [r7, #22]
 800bd56:	4a23      	ldr	r2, [pc, #140]	; (800bde4 <vOutContolTask+0x37c>)
 800bd58:	2158      	movs	r1, #88	; 0x58
 800bd5a:	fb01 f303 	mul.w	r3, r1, r3
 800bd5e:	4413      	add	r3, r2
 800bd60:	331c      	adds	r3, #28
 800bd62:	881a      	ldrh	r2, [r3, #0]
 800bd64:	7dbb      	ldrb	r3, [r7, #22]
 800bd66:	491f      	ldr	r1, [pc, #124]	; (800bde4 <vOutContolTask+0x37c>)
 800bd68:	2058      	movs	r0, #88	; 0x58
 800bd6a:	fb00 f303 	mul.w	r3, r0, r3
 800bd6e:	440b      	add	r3, r1
 800bd70:	331e      	adds	r3, #30
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d32b      	bcc.n	800bdd0 <vOutContolTask+0x368>
							{
								if (out[i].error_count > 1)
 800bd78:	7dbb      	ldrb	r3, [r7, #22]
 800bd7a:	4a1a      	ldr	r2, [pc, #104]	; (800bde4 <vOutContolTask+0x37c>)
 800bd7c:	2158      	movs	r1, #88	; 0x58
 800bd7e:	fb01 f303 	mul.w	r3, r1, r3
 800bd82:	4413      	add	r3, r2
 800bd84:	331a      	adds	r3, #26
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d921      	bls.n	800bdd0 <vOutContolTask+0x368>
								{
									out[i].out_state = STATE_OUT_OFF;
 800bd8c:	7dbb      	ldrb	r3, [r7, #22]
 800bd8e:	4a15      	ldr	r2, [pc, #84]	; (800bde4 <vOutContolTask+0x37c>)
 800bd90:	2158      	movs	r1, #88	; 0x58
 800bd92:	fb01 f303 	mul.w	r3, r1, r3
 800bd96:	4413      	add	r3, r2
 800bd98:	3309      	adds	r3, #9
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	701a      	strb	r2, [r3, #0]
									out[i].error_count--;
 800bd9e:	7dbb      	ldrb	r3, [r7, #22]
 800bda0:	4910      	ldr	r1, [pc, #64]	; (800bde4 <vOutContolTask+0x37c>)
 800bda2:	2258      	movs	r2, #88	; 0x58
 800bda4:	fb03 f202 	mul.w	r2, r3, r2
 800bda8:	440a      	add	r2, r1
 800bdaa:	321a      	adds	r2, #26
 800bdac:	7812      	ldrb	r2, [r2, #0]
 800bdae:	3a01      	subs	r2, #1
 800bdb0:	b2d0      	uxtb	r0, r2
 800bdb2:	4a0c      	ldr	r2, [pc, #48]	; (800bde4 <vOutContolTask+0x37c>)
 800bdb4:	2158      	movs	r1, #88	; 0x58
 800bdb6:	fb01 f303 	mul.w	r3, r1, r3
 800bdba:	4413      	add	r3, r2
 800bdbc:	331a      	adds	r3, #26
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	701a      	strb	r2, [r3, #0]
									break;
 800bdc2:	e006      	b.n	800bdd2 <vOutContolTask+0x36a>
								}
							}
							break;
					}
				}
 800bdc4:	bf00      	nop
 800bdc6:	e004      	b.n	800bdd2 <vOutContolTask+0x36a>
							break;
 800bdc8:	bf00      	nop
 800bdca:	e002      	b.n	800bdd2 <vOutContolTask+0x36a>
								break;
 800bdcc:	bf00      	nop
 800bdce:	e000      	b.n	800bdd2 <vOutContolTask+0x36a>
							break;
 800bdd0:	bf00      	nop
			for (uint8_t i=0; i<OUT_COUNT;i++)
 800bdd2:	7dbb      	ldrb	r3, [r7, #22]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	75bb      	strb	r3, [r7, #22]
 800bdd8:	7dbb      	ldrb	r3, [r7, #22]
 800bdda:	2b13      	cmp	r3, #19
 800bddc:	f67f ae5d 	bls.w	800ba9a <vOutContolTask+0x32>
		   vTaskDelay(1);
 800bde0:	e64e      	b.n	800ba80 <vOutContolTask+0x18>
 800bde2:	bf00      	nop
 800bde4:	20005ce8 	.word	0x20005ce8

0800bde8 <vADC_Ready>:
}



 void vADC_Ready ( uint8_t adc_number )
 {
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	71fb      	strb	r3, [r7, #7]
   static portBASE_TYPE xHigherPriorityTaskWoken;

   xHigherPriorityTaskWoken = pdFALSE;
 800bdf2:	4b1b      	ldr	r3, [pc, #108]	; (800be60 <vADC_Ready+0x78>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
   switch ( adc_number )
 800bdf8:	79fb      	ldrb	r3, [r7, #7]
 800bdfa:	2b04      	cmp	r3, #4
 800bdfc:	d006      	beq.n	800be0c <vADC_Ready+0x24>
 800bdfe:	2b04      	cmp	r3, #4
 800be00:	dc1c      	bgt.n	800be3c <vADC_Ready+0x54>
 800be02:	2b01      	cmp	r3, #1
 800be04:	d012      	beq.n	800be2c <vADC_Ready+0x44>
 800be06:	2b02      	cmp	r3, #2
 800be08:	d008      	beq.n	800be1c <vADC_Ready+0x34>
       break;
     case ADC1_READY:
       xEventGroupSetBitsFromISR( xADCEvent, ADC1_READY, &xHigherPriorityTaskWoken );
       break;
     default:
       break;
 800be0a:	e017      	b.n	800be3c <vADC_Ready+0x54>
       xEventGroupSetBitsFromISR( xADCEvent, ADC3_READY, &xHigherPriorityTaskWoken );
 800be0c:	4b15      	ldr	r3, [pc, #84]	; (800be64 <vADC_Ready+0x7c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a13      	ldr	r2, [pc, #76]	; (800be60 <vADC_Ready+0x78>)
 800be12:	2104      	movs	r1, #4
 800be14:	4618      	mov	r0, r3
 800be16:	f7fc fb3f 	bl	8008498 <xEventGroupSetBitsFromISR>
       break;
 800be1a:	e010      	b.n	800be3e <vADC_Ready+0x56>
       xEventGroupSetBitsFromISR( xADCEvent, ADC2_READY, &xHigherPriorityTaskWoken );
 800be1c:	4b11      	ldr	r3, [pc, #68]	; (800be64 <vADC_Ready+0x7c>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a0f      	ldr	r2, [pc, #60]	; (800be60 <vADC_Ready+0x78>)
 800be22:	2102      	movs	r1, #2
 800be24:	4618      	mov	r0, r3
 800be26:	f7fc fb37 	bl	8008498 <xEventGroupSetBitsFromISR>
       break;
 800be2a:	e008      	b.n	800be3e <vADC_Ready+0x56>
       xEventGroupSetBitsFromISR( xADCEvent, ADC1_READY, &xHigherPriorityTaskWoken );
 800be2c:	4b0d      	ldr	r3, [pc, #52]	; (800be64 <vADC_Ready+0x7c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a0b      	ldr	r2, [pc, #44]	; (800be60 <vADC_Ready+0x78>)
 800be32:	2101      	movs	r1, #1
 800be34:	4618      	mov	r0, r3
 800be36:	f7fc fb2f 	bl	8008498 <xEventGroupSetBitsFromISR>
       break;
 800be3a:	e000      	b.n	800be3e <vADC_Ready+0x56>
       break;
 800be3c:	bf00      	nop
   }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800be3e:	4b08      	ldr	r3, [pc, #32]	; (800be60 <vADC_Ready+0x78>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d008      	beq.n	800be58 <vADC_Ready+0x70>
 800be46:	4b08      	ldr	r3, [pc, #32]	; (800be68 <vADC_Ready+0x80>)
 800be48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	f3bf 8f6f 	isb	sy
   return;
 800be56:	bf00      	nop
 800be58:	bf00      	nop
 }
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	20006454 	.word	0x20006454
 800be64:	2000640c 	.word	0x2000640c
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <vLuaTask>:
#include "FreeRTOS.h"
#include "script.c"


void vLuaTask(void *argument)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 //    luaL_openlibs(L); // open standard libraries
 //    luaL_loadstring(L, lib );
 //    luaL_loadstring(L, mainscript);
	 while(1)
	 {
		  vTaskDelay(1 );
 800be74:	2001      	movs	r0, #1
 800be76:	f7fd fa7b 	bl	8009370 <vTaskDelay>
	 {
 800be7a:	e7fb      	b.n	800be74 <vLuaTask+0x8>

0800be7c <__libc_init_array>:
 800be7c:	b570      	push	{r4, r5, r6, lr}
 800be7e:	4d0d      	ldr	r5, [pc, #52]	; (800beb4 <__libc_init_array+0x38>)
 800be80:	4c0d      	ldr	r4, [pc, #52]	; (800beb8 <__libc_init_array+0x3c>)
 800be82:	1b64      	subs	r4, r4, r5
 800be84:	10a4      	asrs	r4, r4, #2
 800be86:	2600      	movs	r6, #0
 800be88:	42a6      	cmp	r6, r4
 800be8a:	d109      	bne.n	800bea0 <__libc_init_array+0x24>
 800be8c:	4d0b      	ldr	r5, [pc, #44]	; (800bebc <__libc_init_array+0x40>)
 800be8e:	4c0c      	ldr	r4, [pc, #48]	; (800bec0 <__libc_init_array+0x44>)
 800be90:	f000 f8f2 	bl	800c078 <_init>
 800be94:	1b64      	subs	r4, r4, r5
 800be96:	10a4      	asrs	r4, r4, #2
 800be98:	2600      	movs	r6, #0
 800be9a:	42a6      	cmp	r6, r4
 800be9c:	d105      	bne.n	800beaa <__libc_init_array+0x2e>
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea4:	4798      	blx	r3
 800bea6:	3601      	adds	r6, #1
 800bea8:	e7ee      	b.n	800be88 <__libc_init_array+0xc>
 800beaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800beae:	4798      	blx	r3
 800beb0:	3601      	adds	r6, #1
 800beb2:	e7f2      	b.n	800be9a <__libc_init_array+0x1e>
 800beb4:	0800c1ec 	.word	0x0800c1ec
 800beb8:	0800c1ec 	.word	0x0800c1ec
 800bebc:	0800c1ec 	.word	0x0800c1ec
 800bec0:	0800c1f0 	.word	0x0800c1f0

0800bec4 <__retarget_lock_acquire_recursive>:
 800bec4:	4770      	bx	lr

0800bec6 <__retarget_lock_release_recursive>:
 800bec6:	4770      	bx	lr

0800bec8 <memcpy>:
 800bec8:	440a      	add	r2, r1
 800beca:	4291      	cmp	r1, r2
 800becc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bed0:	d100      	bne.n	800bed4 <memcpy+0xc>
 800bed2:	4770      	bx	lr
 800bed4:	b510      	push	{r4, lr}
 800bed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bede:	4291      	cmp	r1, r2
 800bee0:	d1f9      	bne.n	800bed6 <memcpy+0xe>
 800bee2:	bd10      	pop	{r4, pc}

0800bee4 <memset>:
 800bee4:	4402      	add	r2, r0
 800bee6:	4603      	mov	r3, r0
 800bee8:	4293      	cmp	r3, r2
 800beea:	d100      	bne.n	800beee <memset+0xa>
 800beec:	4770      	bx	lr
 800beee:	f803 1b01 	strb.w	r1, [r3], #1
 800bef2:	e7f9      	b.n	800bee8 <memset+0x4>

0800bef4 <_free_r>:
 800bef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bef6:	2900      	cmp	r1, #0
 800bef8:	d044      	beq.n	800bf84 <_free_r+0x90>
 800befa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800befe:	9001      	str	r0, [sp, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f1a1 0404 	sub.w	r4, r1, #4
 800bf06:	bfb8      	it	lt
 800bf08:	18e4      	addlt	r4, r4, r3
 800bf0a:	f000 f8a9 	bl	800c060 <__malloc_lock>
 800bf0e:	4a1e      	ldr	r2, [pc, #120]	; (800bf88 <_free_r+0x94>)
 800bf10:	9801      	ldr	r0, [sp, #4]
 800bf12:	6813      	ldr	r3, [r2, #0]
 800bf14:	b933      	cbnz	r3, 800bf24 <_free_r+0x30>
 800bf16:	6063      	str	r3, [r4, #4]
 800bf18:	6014      	str	r4, [r2, #0]
 800bf1a:	b003      	add	sp, #12
 800bf1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf20:	f000 b8a4 	b.w	800c06c <__malloc_unlock>
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	d908      	bls.n	800bf3a <_free_r+0x46>
 800bf28:	6825      	ldr	r5, [r4, #0]
 800bf2a:	1961      	adds	r1, r4, r5
 800bf2c:	428b      	cmp	r3, r1
 800bf2e:	bf01      	itttt	eq
 800bf30:	6819      	ldreq	r1, [r3, #0]
 800bf32:	685b      	ldreq	r3, [r3, #4]
 800bf34:	1949      	addeq	r1, r1, r5
 800bf36:	6021      	streq	r1, [r4, #0]
 800bf38:	e7ed      	b.n	800bf16 <_free_r+0x22>
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	b10b      	cbz	r3, 800bf44 <_free_r+0x50>
 800bf40:	42a3      	cmp	r3, r4
 800bf42:	d9fa      	bls.n	800bf3a <_free_r+0x46>
 800bf44:	6811      	ldr	r1, [r2, #0]
 800bf46:	1855      	adds	r5, r2, r1
 800bf48:	42a5      	cmp	r5, r4
 800bf4a:	d10b      	bne.n	800bf64 <_free_r+0x70>
 800bf4c:	6824      	ldr	r4, [r4, #0]
 800bf4e:	4421      	add	r1, r4
 800bf50:	1854      	adds	r4, r2, r1
 800bf52:	42a3      	cmp	r3, r4
 800bf54:	6011      	str	r1, [r2, #0]
 800bf56:	d1e0      	bne.n	800bf1a <_free_r+0x26>
 800bf58:	681c      	ldr	r4, [r3, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	6053      	str	r3, [r2, #4]
 800bf5e:	4421      	add	r1, r4
 800bf60:	6011      	str	r1, [r2, #0]
 800bf62:	e7da      	b.n	800bf1a <_free_r+0x26>
 800bf64:	d902      	bls.n	800bf6c <_free_r+0x78>
 800bf66:	230c      	movs	r3, #12
 800bf68:	6003      	str	r3, [r0, #0]
 800bf6a:	e7d6      	b.n	800bf1a <_free_r+0x26>
 800bf6c:	6825      	ldr	r5, [r4, #0]
 800bf6e:	1961      	adds	r1, r4, r5
 800bf70:	428b      	cmp	r3, r1
 800bf72:	bf04      	itt	eq
 800bf74:	6819      	ldreq	r1, [r3, #0]
 800bf76:	685b      	ldreq	r3, [r3, #4]
 800bf78:	6063      	str	r3, [r4, #4]
 800bf7a:	bf04      	itt	eq
 800bf7c:	1949      	addeq	r1, r1, r5
 800bf7e:	6021      	streq	r1, [r4, #0]
 800bf80:	6054      	str	r4, [r2, #4]
 800bf82:	e7ca      	b.n	800bf1a <_free_r+0x26>
 800bf84:	b003      	add	sp, #12
 800bf86:	bd30      	pop	{r4, r5, pc}
 800bf88:	2000645c 	.word	0x2000645c

0800bf8c <cleanup_glue>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	460c      	mov	r4, r1
 800bf90:	6809      	ldr	r1, [r1, #0]
 800bf92:	4605      	mov	r5, r0
 800bf94:	b109      	cbz	r1, 800bf9a <cleanup_glue+0xe>
 800bf96:	f7ff fff9 	bl	800bf8c <cleanup_glue>
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfa2:	f7ff bfa7 	b.w	800bef4 <_free_r>
	...

0800bfa8 <_reclaim_reent>:
 800bfa8:	4b2c      	ldr	r3, [pc, #176]	; (800c05c <_reclaim_reent+0xb4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4283      	cmp	r3, r0
 800bfae:	b570      	push	{r4, r5, r6, lr}
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	d051      	beq.n	800c058 <_reclaim_reent+0xb0>
 800bfb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfb6:	b143      	cbz	r3, 800bfca <_reclaim_reent+0x22>
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d14a      	bne.n	800c054 <_reclaim_reent+0xac>
 800bfbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc0:	6819      	ldr	r1, [r3, #0]
 800bfc2:	b111      	cbz	r1, 800bfca <_reclaim_reent+0x22>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f7ff ff95 	bl	800bef4 <_free_r>
 800bfca:	6961      	ldr	r1, [r4, #20]
 800bfcc:	b111      	cbz	r1, 800bfd4 <_reclaim_reent+0x2c>
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f7ff ff90 	bl	800bef4 <_free_r>
 800bfd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfd6:	b111      	cbz	r1, 800bfde <_reclaim_reent+0x36>
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f7ff ff8b 	bl	800bef4 <_free_r>
 800bfde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bfe0:	b111      	cbz	r1, 800bfe8 <_reclaim_reent+0x40>
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7ff ff86 	bl	800bef4 <_free_r>
 800bfe8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bfea:	b111      	cbz	r1, 800bff2 <_reclaim_reent+0x4a>
 800bfec:	4620      	mov	r0, r4
 800bfee:	f7ff ff81 	bl	800bef4 <_free_r>
 800bff2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bff4:	b111      	cbz	r1, 800bffc <_reclaim_reent+0x54>
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7ff ff7c 	bl	800bef4 <_free_r>
 800bffc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bffe:	b111      	cbz	r1, 800c006 <_reclaim_reent+0x5e>
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff ff77 	bl	800bef4 <_free_r>
 800c006:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c008:	b111      	cbz	r1, 800c010 <_reclaim_reent+0x68>
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7ff ff72 	bl	800bef4 <_free_r>
 800c010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c012:	b111      	cbz	r1, 800c01a <_reclaim_reent+0x72>
 800c014:	4620      	mov	r0, r4
 800c016:	f7ff ff6d 	bl	800bef4 <_free_r>
 800c01a:	69a3      	ldr	r3, [r4, #24]
 800c01c:	b1e3      	cbz	r3, 800c058 <_reclaim_reent+0xb0>
 800c01e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c020:	4620      	mov	r0, r4
 800c022:	4798      	blx	r3
 800c024:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c026:	b1b9      	cbz	r1, 800c058 <_reclaim_reent+0xb0>
 800c028:	4620      	mov	r0, r4
 800c02a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c02e:	f7ff bfad 	b.w	800bf8c <cleanup_glue>
 800c032:	5949      	ldr	r1, [r1, r5]
 800c034:	b941      	cbnz	r1, 800c048 <_reclaim_reent+0xa0>
 800c036:	3504      	adds	r5, #4
 800c038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c03a:	2d80      	cmp	r5, #128	; 0x80
 800c03c:	68d9      	ldr	r1, [r3, #12]
 800c03e:	d1f8      	bne.n	800c032 <_reclaim_reent+0x8a>
 800c040:	4620      	mov	r0, r4
 800c042:	f7ff ff57 	bl	800bef4 <_free_r>
 800c046:	e7ba      	b.n	800bfbe <_reclaim_reent+0x16>
 800c048:	680e      	ldr	r6, [r1, #0]
 800c04a:	4620      	mov	r0, r4
 800c04c:	f7ff ff52 	bl	800bef4 <_free_r>
 800c050:	4631      	mov	r1, r6
 800c052:	e7ef      	b.n	800c034 <_reclaim_reent+0x8c>
 800c054:	2500      	movs	r5, #0
 800c056:	e7ef      	b.n	800c038 <_reclaim_reent+0x90>
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	bf00      	nop
 800c05c:	200001a0 	.word	0x200001a0

0800c060 <__malloc_lock>:
 800c060:	4801      	ldr	r0, [pc, #4]	; (800c068 <__malloc_lock+0x8>)
 800c062:	f7ff bf2f 	b.w	800bec4 <__retarget_lock_acquire_recursive>
 800c066:	bf00      	nop
 800c068:	20006458 	.word	0x20006458

0800c06c <__malloc_unlock>:
 800c06c:	4801      	ldr	r0, [pc, #4]	; (800c074 <__malloc_unlock+0x8>)
 800c06e:	f7ff bf2a 	b.w	800bec6 <__retarget_lock_release_recursive>
 800c072:	bf00      	nop
 800c074:	20006458 	.word	0x20006458

0800c078 <_init>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	bf00      	nop
 800c07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07e:	bc08      	pop	{r3}
 800c080:	469e      	mov	lr, r3
 800c082:	4770      	bx	lr

0800c084 <_fini>:
 800c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c086:	bf00      	nop
 800c088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08a:	bc08      	pop	{r3}
 800c08c:	469e      	mov	lr, r3
 800c08e:	4770      	bx	lr
