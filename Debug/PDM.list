
PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021a48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001704  08021bd8  08021bd8  00031bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080232dc  080232dc  00040504  2**0
                  CONTENTS
  4 .ARM          00000008  080232dc  080232dc  000332dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080232e4  080232e4  00040504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080232e4  080232e4  000332e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080232e8  080232e8  000332e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000504  20000000  080232ec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040504  2**0
                  CONTENTS
 10 .bss          0000fe78  20000504  20000504  00040504  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001037c  2001037c  00040504  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040504  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004ac32  00000000  00000000  00040534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008969  00000000  00000000  0008b166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003140  00000000  00000000  00093ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002fa8  00000000  00000000  00096c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000abd9  00000000  00000000  00099bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036634  00000000  00000000  000a4791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efbea  00000000  00000000  000dadc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ca9af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000eb88  00000000  00000000  001caa00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001d9588  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  001d95ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000504 	.word	0x20000504
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021bc0 	.word	0x08021bc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000508 	.word	0x20000508
 80001cc:	08021bc0 	.word	0x08021bc0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <setjmp>:
 8000270:	46ec      	mov	ip, sp
 8000272:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000276:	f04f 0000 	mov.w	r0, #0
 800027a:	4770      	bx	lr

0800027c <longjmp>:
 800027c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000280:	46e5      	mov	sp, ip
 8000282:	0008      	movs	r0, r1
 8000284:	bf08      	it	eq
 8000286:	2001      	moveq	r0, #1
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop

0800028c <strcmp>:
 800028c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000294:	2a01      	cmp	r2, #1
 8000296:	bf28      	it	cs
 8000298:	429a      	cmpcs	r2, r3
 800029a:	d0f7      	beq.n	800028c <strcmp>
 800029c:	1ad0      	subs	r0, r2, r3
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9aa 	b.w	8000fd4 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff33 	bl	8000b0c <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca9 	bl	8000628 <__aeabi_dmul>
 8000cd6:	f7ff ff57 	bl	8000b88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc2a 	bl	8000534 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fca0 	bl	8000628 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fae2 	bl	80002b8 <__aeabi_dsub>
 8000cf4:	f7ff ff48 	bl	8000b88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468e      	mov	lr, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d14d      	bne.n	8000dae <__udivmoddi4+0xaa>
 8000d12:	428a      	cmp	r2, r1
 8000d14:	4694      	mov	ip, r2
 8000d16:	d969      	bls.n	8000dec <__udivmoddi4+0xe8>
 8000d18:	fab2 f282 	clz	r2, r2
 8000d1c:	b152      	cbz	r2, 8000d34 <__udivmoddi4+0x30>
 8000d1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d22:	f1c2 0120 	rsb	r1, r2, #32
 8000d26:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d32:	4094      	lsls	r4, r2
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	0c21      	lsrs	r1, r4, #16
 8000d3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d3e:	fa1f f78c 	uxth.w	r7, ip
 8000d42:	fb08 e316 	mls	r3, r8, r6, lr
 8000d46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4a:	fb06 f107 	mul.w	r1, r6, r7
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x64>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 811f 	bcs.w	8000f9c <__udivmoddi4+0x298>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 811c 	bls.w	8000f9c <__udivmoddi4+0x298>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 f707 	mul.w	r7, r0, r7
 8000d7c:	42a7      	cmp	r7, r4
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x92>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d88:	f080 810a 	bcs.w	8000fa0 <__udivmoddi4+0x29c>
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	f240 8107 	bls.w	8000fa0 <__udivmoddi4+0x29c>
 8000d92:	4464      	add	r4, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9a:	1be4      	subs	r4, r4, r7
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa4>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xc2>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80ef 	beq.w	8000f96 <__udivmoddi4+0x292>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x160>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd4>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80f9 	bhi.w	8000fca <__udivmoddi4+0x2c6>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	469e      	mov	lr, r3
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa4>
 8000de6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa4>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xec>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 8092 	bne.w	8000f1e <__udivmoddi4+0x21a>
 8000dfa:	eba1 010c 	sub.w	r1, r1, ip
 8000dfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	2601      	movs	r6, #1
 8000e08:	0c20      	lsrs	r0, r4, #16
 8000e0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e16:	fb0e f003 	mul.w	r0, lr, r3
 8000e1a:	4288      	cmp	r0, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x12c>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x12a>
 8000e28:	4288      	cmp	r0, r1
 8000e2a:	f200 80cb 	bhi.w	8000fc4 <__udivmoddi4+0x2c0>
 8000e2e:	4643      	mov	r3, r8
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1110 	mls	r1, r7, r0, r1
 8000e3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e40:	fb0e fe00 	mul.w	lr, lr, r0
 8000e44:	45a6      	cmp	lr, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x156>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e50:	d202      	bcs.n	8000e58 <__udivmoddi4+0x154>
 8000e52:	45a6      	cmp	lr, r4
 8000e54:	f200 80bb 	bhi.w	8000fce <__udivmoddi4+0x2ca>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e62:	e79c      	b.n	8000d9e <__udivmoddi4+0x9a>
 8000e64:	f1c6 0720 	rsb	r7, r6, #32
 8000e68:	40b3      	lsls	r3, r6
 8000e6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e72:	fa20 f407 	lsr.w	r4, r0, r7
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	431c      	orrs	r4, r3
 8000e7c:	40f9      	lsrs	r1, r7
 8000e7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e82:	fa00 f306 	lsl.w	r3, r0, r6
 8000e86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8a:	0c20      	lsrs	r0, r4, #16
 8000e8c:	fa1f fe8c 	uxth.w	lr, ip
 8000e90:	fb09 1118 	mls	r1, r9, r8, r1
 8000e94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e98:	fb08 f00e 	mul.w	r0, r8, lr
 8000e9c:	4288      	cmp	r0, r1
 8000e9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea2:	d90b      	bls.n	8000ebc <__udivmoddi4+0x1b8>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eac:	f080 8088 	bcs.w	8000fc0 <__udivmoddi4+0x2bc>
 8000eb0:	4288      	cmp	r0, r1
 8000eb2:	f240 8085 	bls.w	8000fc0 <__udivmoddi4+0x2bc>
 8000eb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	1a09      	subs	r1, r1, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ec8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ecc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed0:	458e      	cmp	lr, r1
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1e2>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000edc:	d26c      	bcs.n	8000fb8 <__udivmoddi4+0x2b4>
 8000ede:	458e      	cmp	lr, r1
 8000ee0:	d96a      	bls.n	8000fb8 <__udivmoddi4+0x2b4>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4461      	add	r1, ip
 8000ee6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eea:	fba0 9402 	umull	r9, r4, r0, r2
 8000eee:	eba1 010e 	sub.w	r1, r1, lr
 8000ef2:	42a1      	cmp	r1, r4
 8000ef4:	46c8      	mov	r8, r9
 8000ef6:	46a6      	mov	lr, r4
 8000ef8:	d356      	bcc.n	8000fa8 <__udivmoddi4+0x2a4>
 8000efa:	d053      	beq.n	8000fa4 <__udivmoddi4+0x2a0>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x212>
 8000efe:	ebb3 0208 	subs.w	r2, r3, r8
 8000f02:	eb61 010e 	sbc.w	r1, r1, lr
 8000f06:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f0e:	40f1      	lsrs	r1, r6
 8000f10:	431f      	orrs	r7, r3
 8000f12:	e9c5 7100 	strd	r7, r1, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	f1c2 0320 	rsb	r3, r2, #32
 8000f22:	40d8      	lsrs	r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2c:	4091      	lsls	r1, r2
 8000f2e:	4301      	orrs	r1, r0
 8000f30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f34:	fa1f fe8c 	uxth.w	lr, ip
 8000f38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f40:	0c0b      	lsrs	r3, r1, #16
 8000f42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f46:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4a:	429e      	cmp	r6, r3
 8000f4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x260>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5a:	d22f      	bcs.n	8000fbc <__udivmoddi4+0x2b8>
 8000f5c:	429e      	cmp	r6, r3
 8000f5e:	d92d      	bls.n	8000fbc <__udivmoddi4+0x2b8>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1b9b      	subs	r3, r3, r6
 8000f66:	b289      	uxth	r1, r1
 8000f68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f74:	fb06 f30e 	mul.w	r3, r6, lr
 8000f78:	428b      	cmp	r3, r1
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x28a>
 8000f7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f84:	d216      	bcs.n	8000fb4 <__udivmoddi4+0x2b0>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d914      	bls.n	8000fb4 <__udivmoddi4+0x2b0>
 8000f8a:	3e02      	subs	r6, #2
 8000f8c:	4461      	add	r1, ip
 8000f8e:	1ac9      	subs	r1, r1, r3
 8000f90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f94:	e738      	b.n	8000e08 <__udivmoddi4+0x104>
 8000f96:	462e      	mov	r6, r5
 8000f98:	4628      	mov	r0, r5
 8000f9a:	e705      	b.n	8000da8 <__udivmoddi4+0xa4>
 8000f9c:	4606      	mov	r6, r0
 8000f9e:	e6e3      	b.n	8000d68 <__udivmoddi4+0x64>
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	e6f8      	b.n	8000d96 <__udivmoddi4+0x92>
 8000fa4:	454b      	cmp	r3, r9
 8000fa6:	d2a9      	bcs.n	8000efc <__udivmoddi4+0x1f8>
 8000fa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb0:	3801      	subs	r0, #1
 8000fb2:	e7a3      	b.n	8000efc <__udivmoddi4+0x1f8>
 8000fb4:	4646      	mov	r6, r8
 8000fb6:	e7ea      	b.n	8000f8e <__udivmoddi4+0x28a>
 8000fb8:	4620      	mov	r0, r4
 8000fba:	e794      	b.n	8000ee6 <__udivmoddi4+0x1e2>
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	e7d1      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fc0:	46d0      	mov	r8, sl
 8000fc2:	e77b      	b.n	8000ebc <__udivmoddi4+0x1b8>
 8000fc4:	3b02      	subs	r3, #2
 8000fc6:	4461      	add	r1, ip
 8000fc8:	e732      	b.n	8000e30 <__udivmoddi4+0x12c>
 8000fca:	4630      	mov	r0, r6
 8000fcc:	e709      	b.n	8000de2 <__udivmoddi4+0xde>
 8000fce:	4464      	add	r4, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e742      	b.n	8000e5a <__udivmoddi4+0x156>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <prv_send_can_message>:
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
uint32_t TxMailbox;
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t *buffer) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    static  CAN_TxHeaderTypeDef pTXHeader;
    uint8_t success = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]

    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0) {
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 ffb0 	bl	8003f50 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d027      	beq.n	8001046 <prv_send_can_message+0x6e>

        pTXHeader.DLC                = (uint32_t)buffer->DLC;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	791b      	ldrb	r3, [r3, #4]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <prv_send_can_message+0x78>)
 8000ffe:	611a      	str	r2, [r3, #16]
        pTXHeader.ExtId              = 0U;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <prv_send_can_message+0x78>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
        pTXHeader.IDE                = CAN_ID_STD;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <prv_send_can_message+0x78>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
        pTXHeader.RTR                = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0b9b      	lsrs	r3, r3, #14
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <prv_send_can_message+0x78>)
 8001018:	60d3      	str	r3, [r2, #12]
        pTXHeader.StdId              = buffer->ident & CANID_MASK;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <prv_send_can_message+0x78>)
 8001024:	6013      	str	r3, [r2, #0]
        pTXHeader.TransmitGlobalTime = DISABLE;
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <prv_send_can_message+0x78>)
 8001028:	2200      	movs	r2, #0
 800102a:	751a      	strb	r2, [r3, #20]

        /* Now add message to FIFO. Should not fail */
        if (HAL_CAN_AddTxMessage(CANmodule->CANptr,  &pTXHeader, buffer->data, &TxMailbox) == HAL_OK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	1d5a      	adds	r2, r3, #5
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <prv_send_can_message+0x7c>)
 8001036:	4906      	ldr	r1, [pc, #24]	; (8001050 <prv_send_can_message+0x78>)
 8001038:	f002 feaf 	bl	8003d9a <HAL_CAN_AddTxMessage>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <prv_send_can_message+0x6e>
        {
        	success = 1;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
        }
    }
    return success;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000528 	.word	0x20000528
 8001054:	20000524 	.word	0x20000524

08001058 <CAN_SendMessage>:




void CAN_SendMessage()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0


	CANModule_local->firstCANtxMessage = false;
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <CAN_SendMessage+0xb8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
	CANModule_local->bufferInhibitFlag = false;
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <CAN_SendMessage+0xb8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
    if(CANModule_local->CANtxCount > 0U)
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <CAN_SendMessage+0xb8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001074:	b29b      	uxth	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d045      	beq.n	8001106 <CAN_SendMessage+0xae>
    {
        uint16_t i;             /* index of transmitting message */
        CO_CANtx_t *buffer = &CANModule_local->txArray[0];
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <CAN_SendMessage+0xb8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
        CO_LOCK_CAN_SEND(CANModule_local);
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <CAN_SendMessage+0xb8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001086:	f3ef 8210 	mrs	r2, PRIMASK
 800108a:	607a      	str	r2, [r7, #4]
  return(result);
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop

        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <CAN_SendMessage+0xb8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	8a1b      	ldrh	r3, [r3, #16]
 800109a:	81fb      	strh	r3, [r7, #14]
 800109c:	e021      	b.n	80010e2 <CAN_SendMessage+0x8a>
                   /* Try to send message */
                   if (buffer->bufferFull) {
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d017      	beq.n	80010d6 <CAN_SendMessage+0x7e>
                       if (prv_send_can_message(CANModule_local, buffer)) {
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <CAN_SendMessage+0xb8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff93 	bl	8000fd8 <prv_send_can_message>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00e      	beq.n	80010d6 <CAN_SendMessage+0x7e>
                           buffer->bufferFull = false;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
                           CANModule_local->CANtxCount--;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <CAN_SendMessage+0xb8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80010c4:	b292      	uxth	r2, r2
 80010c6:	3a01      	subs	r2, #1
 80010c8:	b292      	uxth	r2, r2
 80010ca:	849a      	strh	r2, [r3, #36]	; 0x24
                           CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <CAN_SendMessage+0xb8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	6952      	ldr	r2, [r2, #20]
 80010d4:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	3b01      	subs	r3, #1
 80010da:	81fb      	strh	r3, [r7, #14]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	3318      	adds	r3, #24
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1da      	bne.n	800109e <CAN_SendMessage+0x46>
                       }
                   }
               }
        /* Clear counter if no more messages */
        if(i == 0U){
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <CAN_SendMessage+0x9e>
        	CANModule_local->CANtxCount = 0U;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <CAN_SendMessage+0xb8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <CAN_SendMessage+0xb8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f383 8810 	msr	PRIMASK, r3
}
 8001104:	bf00      	nop
    }
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000520 	.word	0x20000520

08001114 <HAL_CAN_TxMailbox0CompleteCallback>:



void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 800111c:	f7ff ff9c 	bl	8001058 <CAN_SendMessage>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 8001130:	f7ff ff92 	bl	8001058 <CAN_SendMessage>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 8001144:	f7ff ff88 	bl	8001058 <CAN_SendMessage>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <prv_read_can_received_msg>:


static void  prv_read_can_received_msg(CAN_HandleTypeDef* can, uint32_t fifo) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
    static CAN_RxHeaderTypeDef rx;
    static CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t *buffer = NULL;              /* receive message buffer from CO_CANmodule_t object. */
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
    uint16_t index;                         /* index of received message */
    uint32_t rcvMsgIdent;                   /* identifier of the received message */
    uint8_t messageFound = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	747b      	strb	r3, [r7, #17]

    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(can, fifo, &rx, rcvMsg.data) != HAL_OK)
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <prv_read_can_received_msg+0x104>)
 8001164:	4a3c      	ldr	r2, [pc, #240]	; (8001258 <prv_read_can_received_msg+0x108>)
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f002 ff26 	bl	8003fba <HAL_CAN_GetRxMessage>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d16a      	bne.n	800124a <prv_read_can_received_msg+0xfa>
    {
        return;
    }

    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx.StdId  | (rx.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <prv_read_can_received_msg+0x108>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a37      	ldr	r2, [pc, #220]	; (8001258 <prv_read_can_received_msg+0x108>)
 800117a:	68d2      	ldr	r2, [r2, #12]
 800117c:	2a02      	cmp	r2, #2
 800117e:	d102      	bne.n	8001186 <prv_read_can_received_msg+0x36>
 8001180:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001184:	e000      	b.n	8001188 <prv_read_can_received_msg+0x38>
 8001186:	2200      	movs	r2, #0
 8001188:	4313      	orrs	r3, r2
 800118a:	4a34      	ldr	r2, [pc, #208]	; (800125c <prv_read_can_received_msg+0x10c>)
 800118c:	6013      	str	r3, [r2, #0]
    rcvMsg.dlc = rx.DLC;
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <prv_read_can_received_msg+0x108>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <prv_read_can_received_msg+0x10c>)
 8001196:	711a      	strb	r2, [r3, #4]
    rcvMsgIdent = rcvMsg.ident;
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <prv_read_can_received_msg+0x10c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <prv_read_can_received_msg+0x110>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01f      	beq.n	80011e8 <prv_read_can_received_msg+0x98>

    	buffer = CANModule_local->rxArray;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <prv_read_can_received_msg+0x110>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	617b      	str	r3, [r7, #20]
    	        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <prv_read_can_received_msg+0x110>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	891b      	ldrh	r3, [r3, #8]
 80011b6:	827b      	strh	r3, [r7, #18]
 80011b8:	e012      	b.n	80011e0 <prv_read_can_received_msg+0x90>
    	            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4053      	eors	r3, r2
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	8852      	ldrh	r2, [r2, #2]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <prv_read_can_received_msg+0x84>
    	                messageFound = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	747b      	strb	r3, [r7, #17]
    	                break;
 80011d2:	e028      	b.n	8001226 <prv_read_can_received_msg+0xd6>
    	        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80011d4:	8a7b      	ldrh	r3, [r7, #18]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	827b      	strh	r3, [r7, #18]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	330c      	adds	r3, #12
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	8a7b      	ldrh	r3, [r7, #18]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e9      	bne.n	80011ba <prv_read_can_received_msg+0x6a>
 80011e6:	e01e      	b.n	8001226 <prv_read_can_received_msg+0xd6>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <prv_read_can_received_msg+0x110>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	617b      	str	r3, [r7, #20]
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <prv_read_can_received_msg+0x110>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	891b      	ldrh	r3, [r3, #8]
 80011f6:	827b      	strh	r3, [r7, #18]
 80011f8:	e012      	b.n	8001220 <prv_read_can_received_msg+0xd0>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4053      	eors	r3, r2
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	8852      	ldrh	r2, [r2, #2]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <prv_read_can_received_msg+0xc4>
                messageFound = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	747b      	strb	r3, [r7, #17]
                break;
 8001212:	e008      	b.n	8001226 <prv_read_can_received_msg+0xd6>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8001214:	8a7b      	ldrh	r3, [r7, #18]
 8001216:	3b01      	subs	r3, #1
 8001218:	827b      	strh	r3, [r7, #18]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	330c      	adds	r3, #12
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e9      	bne.n	80011fa <prv_read_can_received_msg+0xaa>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8001226:	7c7b      	ldrb	r3, [r7, #17]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00f      	beq.n	800124c <prv_read_can_received_msg+0xfc>
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00c      	beq.n	800124c <prv_read_can_received_msg+0xfc>
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <prv_read_can_received_msg+0xfc>
        buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	6852      	ldr	r2, [r2, #4]
 8001242:	4906      	ldr	r1, [pc, #24]	; (800125c <prv_read_can_received_msg+0x10c>)
 8001244:	4610      	mov	r0, r2
 8001246:	4798      	blx	r3
 8001248:	e000      	b.n	800124c <prv_read_can_received_msg+0xfc>
        return;
 800124a:	bf00      	nop
    }
}
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000561 	.word	0x20000561
 8001258:	20000540 	.word	0x20000540
 800125c:	2000055c 	.word	0x2000055c
 8001260:	20000520 	.word	0x20000520

08001264 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	prv_read_can_received_msg(hcan, CAN_RX_FIFO0);
 800126c:	2100      	movs	r1, #0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff6e 	bl	8001150 <prv_read_can_received_msg>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	prv_read_can_received_msg(hcan, CAN_RX_FIFO1);
 8001284:	2101      	movs	r1, #1
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff62 	bl	8001150 <prv_read_can_received_msg>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001298:	f001 ffb2 	bl	8003200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129c:	f000 f860 	bl	8001360 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80012a0:	f000 ff74 	bl	800218c <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 ffa2 	bl	80021ec <MX_GPIO_Init>
  MX_ADC1_Init();
 80012a8:	f000 f8c4 	bl	8001434 <MX_ADC1_Init>
  MX_ADC3_Init();
 80012ac:	f000 fa1c 	bl	80016e8 <MX_ADC3_Init>
  MX_ADC2_Init();
 80012b0:	f000 f974 	bl	800159c <MX_ADC2_Init>
  MX_CAN1_Init();
 80012b4:	f000 fada 	bl	800186c <MX_CAN1_Init>
  MX_TIM1_Init();
 80012b8:	f000 fb3a 	bl	8001930 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012bc:	f000 fbfc 	bl	8001ab8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c0:	f000 fc86 	bl	8001bd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012c4:	f000 fd06 	bl	8001cd4 <MX_TIM4_Init>
  MX_TIM8_Init();
 80012c8:	f000 fd9c 	bl	8001e04 <MX_TIM8_Init>
  MX_TIM9_Init();
 80012cc:	f000 fe5e 	bl	8001f8c <MX_TIM9_Init>
  MX_TIM12_Init();
 80012d0:	f000 fe96 	bl	8002000 <MX_TIM12_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012d4:	f000 ff2c 	bl	8002130 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80012d8:	f000 ff58 	bl	800218c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012dc:	f000 fefe 	bl	80020dc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80012e0:	f000 faf8 	bl	80018d4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012e4:	f018 fb8a 	bl	80199fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <main+0x9c>)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4811      	ldr	r0, [pc, #68]	; (8001334 <main+0xa0>)
 80012ee:	f018 fbcf 	bl	8019a90 <osThreadNew>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a10      	ldr	r2, [pc, #64]	; (8001338 <main+0xa4>)
 80012f6:	6013      	str	r3, [r2, #0]

  /* creation of luaTask */
  luaTaskHandle = osThreadNew(vLuaTask, NULL, &luaTask_attributes);
 80012f8:	4a10      	ldr	r2, [pc, #64]	; (800133c <main+0xa8>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <main+0xac>)
 80012fe:	f018 fbc7 	bl	8019a90 <osThreadNew>
 8001302:	4603      	mov	r3, r0
 8001304:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <main+0xb0>)
 8001306:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(vADCTask, NULL, &ADCTask_attributes);
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <main+0xb4>)
 800130a:	2100      	movs	r1, #0
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <main+0xb8>)
 800130e:	f018 fbbf 	bl	8019a90 <osThreadNew>
 8001312:	4603      	mov	r3, r0
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <main+0xbc>)
 8001316:	6013      	str	r3, [r2, #0]

  /* creation of OutContolTask */
  OutContolTaskHandle = osThreadNew(vOutContolTask, NULL, &OutContolTask_attributes);
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <main+0xc0>)
 800131a:	2100      	movs	r1, #0
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <main+0xc4>)
 800131e:	f018 fbb7 	bl	8019a90 <osThreadNew>
 8001322:	4603      	mov	r3, r0
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <main+0xc8>)
 8001326:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001328:	f018 fb8c 	bl	8019a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800132c:	e7fe      	b.n	800132c <main+0x98>
 800132e:	bf00      	nop
 8001330:	080228e0 	.word	0x080228e0
 8001334:	080023ed 	.word	0x080023ed
 8001338:	20000f28 	.word	0x20000f28
 800133c:	08022904 	.word	0x08022904
 8001340:	0801dad5 	.word	0x0801dad5
 8001344:	20000f2c 	.word	0x20000f2c
 8001348:	08022928 	.word	0x08022928
 800134c:	0801d2c5 	.word	0x0801d2c5
 8001350:	20000f30 	.word	0x20000f30
 8001354:	0802294c 	.word	0x0802294c
 8001358:	0801d6d1 	.word	0x0801d6d1
 800135c:	200011f0 	.word	0x200011f0

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	2230      	movs	r2, #48	; 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f01d fc86 	bl	801ec80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a27      	ldr	r2, [pc, #156]	; (800142c <SystemClock_Config+0xcc>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <SystemClock_Config+0xcc>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <SystemClock_Config+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a21      	ldr	r2, [pc, #132]	; (8001430 <SystemClock_Config+0xd0>)
 80013aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <SystemClock_Config+0xd0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013bc:	2301      	movs	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c6:	2302      	movs	r3, #2
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013d4:	23a8      	movs	r3, #168	; 0xa8
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d8:	2302      	movs	r3, #2
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013dc:	2307      	movs	r3, #7
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 f9db 	bl	80057a0 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013f0:	f001 f816 	bl	8002420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2302      	movs	r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001400:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2105      	movs	r1, #5
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fc3c 	bl	8005c90 <HAL_RCC_ClockConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800141e:	f000 ffff 	bl	8002420 <Error_Handler>
  }
}
 8001422:	bf00      	nop
 8001424:	3750      	adds	r7, #80	; 0x50
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40007000 	.word	0x40007000

08001434 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001446:	4b52      	ldr	r3, [pc, #328]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001448:	4a52      	ldr	r2, [pc, #328]	; (8001594 <MX_ADC1_Init+0x160>)
 800144a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <MX_ADC1_Init+0x15c>)
 800144e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001452:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800145a:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <MX_ADC1_Init+0x15c>)
 800145c:	2201      	movs	r2, #1
 800145e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001460:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001462:	2201      	movs	r2, #1
 8001464:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001466:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146e:	4b48      	ldr	r3, [pc, #288]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001470:	2200      	movs	r2, #0
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001474:	4b46      	ldr	r3, [pc, #280]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001476:	4a48      	ldr	r2, [pc, #288]	; (8001598 <MX_ADC1_Init+0x164>)
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800147a:	4b45      	ldr	r3, [pc, #276]	; (8001590 <MX_ADC1_Init+0x15c>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001480:	4b43      	ldr	r3, [pc, #268]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001482:	2208      	movs	r2, #8
 8001484:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001486:	4b42      	ldr	r3, [pc, #264]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148e:	4b40      	ldr	r3, [pc, #256]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001490:	2201      	movs	r2, #1
 8001492:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001494:	483e      	ldr	r0, [pc, #248]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001496:	f001 ff19 	bl	80032cc <HAL_ADC_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014a0:	f000 ffbe 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014a4:	2304      	movs	r3, #4
 80014a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80014ac:	2303      	movs	r3, #3
 80014ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4836      	ldr	r0, [pc, #216]	; (8001590 <MX_ADC1_Init+0x15c>)
 80014b6:	f002 f8d5 	bl	8003664 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014c0:	f000 ffae 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014c4:	2307      	movs	r3, #7
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	482f      	ldr	r0, [pc, #188]	; (8001590 <MX_ADC1_Init+0x15c>)
 80014d2:	f002 f8c7 	bl	8003664 <HAL_ADC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014dc:	f000 ffa0 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014e0:	2306      	movs	r3, #6
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80014e4:	2303      	movs	r3, #3
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4828      	ldr	r0, [pc, #160]	; (8001590 <MX_ADC1_Init+0x15c>)
 80014ee:	f002 f8b9 	bl	8003664 <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80014f8:	f000 ff92 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014fc:	2305      	movs	r3, #5
 80014fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001500:	2304      	movs	r3, #4
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <MX_ADC1_Init+0x15c>)
 800150a:	f002 f8ab 	bl	8003664 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001514:	f000 ff84 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001518:	230e      	movs	r3, #14
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800151c:	2305      	movs	r3, #5
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	481a      	ldr	r0, [pc, #104]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001526:	f002 f89d 	bl	8003664 <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001530:	f000 ff76 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001534:	230f      	movs	r3, #15
 8001536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001538:	2306      	movs	r3, #6
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4813      	ldr	r0, [pc, #76]	; (8001590 <MX_ADC1_Init+0x15c>)
 8001542:	f002 f88f 	bl	8003664 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800154c:	f000 ff68 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001550:	2308      	movs	r3, #8
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001554:	2307      	movs	r3, #7
 8001556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <MX_ADC1_Init+0x15c>)
 800155e:	f002 f881 	bl	8003664 <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001568:	f000 ff5a 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800156c:	2309      	movs	r3, #9
 800156e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001570:	2308      	movs	r3, #8
 8001572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_ADC1_Init+0x15c>)
 800157a:	f002 f873 	bl	8003664 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001584:	f000 ff4c 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000056c 	.word	0x2000056c
 8001594:	40012000 	.word	0x40012000
 8001598:	0f000001 	.word	0x0f000001

0800159c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80015ae:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <MX_ADC2_Init+0x140>)
 80015b0:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <MX_ADC2_Init+0x144>)
 80015b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80015b4:	4b49      	ldr	r3, [pc, #292]	; (80016dc <MX_ADC2_Init+0x140>)
 80015b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <MX_ADC2_Init+0x140>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80015c2:	4b46      	ldr	r3, [pc, #280]	; (80016dc <MX_ADC2_Init+0x140>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80015c8:	4b44      	ldr	r3, [pc, #272]	; (80016dc <MX_ADC2_Init+0x140>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015ce:	4b43      	ldr	r3, [pc, #268]	; (80016dc <MX_ADC2_Init+0x140>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <MX_ADC2_Init+0x140>)
 80015d8:	2200      	movs	r2, #0
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015dc:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <MX_ADC2_Init+0x140>)
 80015de:	4a41      	ldr	r2, [pc, #260]	; (80016e4 <MX_ADC2_Init+0x148>)
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e2:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <MX_ADC2_Init+0x140>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 80015e8:	4b3c      	ldr	r3, [pc, #240]	; (80016dc <MX_ADC2_Init+0x140>)
 80015ea:	2207      	movs	r2, #7
 80015ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <MX_ADC2_Init+0x140>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f6:	4b39      	ldr	r3, [pc, #228]	; (80016dc <MX_ADC2_Init+0x140>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015fc:	4837      	ldr	r0, [pc, #220]	; (80016dc <MX_ADC2_Init+0x140>)
 80015fe:	f001 fe65 	bl	80032cc <HAL_ADC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001608:	f000 ff0a 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800160c:	230b      	movs	r3, #11
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001614:	2303      	movs	r3, #3
 8001616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	4619      	mov	r1, r3
 800161c:	482f      	ldr	r0, [pc, #188]	; (80016dc <MX_ADC2_Init+0x140>)
 800161e:	f002 f821 	bl	8003664 <HAL_ADC_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001628:	f000 fefa 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4828      	ldr	r0, [pc, #160]	; (80016dc <MX_ADC2_Init+0x140>)
 800163a:	f002 f813 	bl	8003664 <HAL_ADC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001644:	f000 feec 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001648:	2301      	movs	r3, #1
 800164a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800164c:	2303      	movs	r3, #3
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4821      	ldr	r0, [pc, #132]	; (80016dc <MX_ADC2_Init+0x140>)
 8001656:	f002 f805 	bl	8003664 <HAL_ADC_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001660:	f000 fede 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001664:	230d      	movs	r3, #13
 8001666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001668:	2304      	movs	r3, #4
 800166a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	4619      	mov	r1, r3
 8001670:	481a      	ldr	r0, [pc, #104]	; (80016dc <MX_ADC2_Init+0x140>)
 8001672:	f001 fff7 	bl	8003664 <HAL_ADC_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800167c:	f000 fed0 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001680:	230c      	movs	r3, #12
 8001682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001684:	2305      	movs	r3, #5
 8001686:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <MX_ADC2_Init+0x140>)
 800168e:	f001 ffe9 	bl	8003664 <HAL_ADC_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001698:	f000 fec2 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800169c:	2303      	movs	r3, #3
 800169e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016a0:	2306      	movs	r3, #6
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_ADC2_Init+0x140>)
 80016aa:	f001 ffdb 	bl	8003664 <HAL_ADC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80016b4:	f000 feb4 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016bc:	2307      	movs	r3, #7
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_ADC2_Init+0x140>)
 80016c6:	f001 ffcd 	bl	8003664 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80016d0:	f000 fea6 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200005b4 	.word	0x200005b4
 80016e0:	40012100 	.word	0x40012100
 80016e4:	0f000001 	.word	0x0f000001

080016e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ee:	463b      	mov	r3, r7
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80016fa:	4b59      	ldr	r3, [pc, #356]	; (8001860 <MX_ADC3_Init+0x178>)
 80016fc:	4a59      	ldr	r2, [pc, #356]	; (8001864 <MX_ADC3_Init+0x17c>)
 80016fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001700:	4b57      	ldr	r3, [pc, #348]	; (8001860 <MX_ADC3_Init+0x178>)
 8001702:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001706:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001708:	4b55      	ldr	r3, [pc, #340]	; (8001860 <MX_ADC3_Init+0x178>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800170e:	4b54      	ldr	r3, [pc, #336]	; (8001860 <MX_ADC3_Init+0x178>)
 8001710:	2201      	movs	r2, #1
 8001712:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001714:	4b52      	ldr	r3, [pc, #328]	; (8001860 <MX_ADC3_Init+0x178>)
 8001716:	2201      	movs	r2, #1
 8001718:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <MX_ADC3_Init+0x178>)
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001722:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <MX_ADC3_Init+0x178>)
 8001724:	2200      	movs	r2, #0
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <MX_ADC3_Init+0x178>)
 800172a:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <MX_ADC3_Init+0x180>)
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <MX_ADC3_Init+0x178>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 9;
 8001734:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <MX_ADC3_Init+0x178>)
 8001736:	2209      	movs	r2, #9
 8001738:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800173a:	4b49      	ldr	r3, [pc, #292]	; (8001860 <MX_ADC3_Init+0x178>)
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <MX_ADC3_Init+0x178>)
 8001744:	2201      	movs	r2, #1
 8001746:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001748:	4845      	ldr	r0, [pc, #276]	; (8001860 <MX_ADC3_Init+0x178>)
 800174a:	f001 fdbf 	bl	80032cc <HAL_ADC_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001754:	f000 fe64 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001758:	230e      	movs	r3, #14
 800175a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001760:	2303      	movs	r3, #3
 8001762:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	483d      	ldr	r0, [pc, #244]	; (8001860 <MX_ADC3_Init+0x178>)
 800176a:	f001 ff7b 	bl	8003664 <HAL_ADC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001774:	f000 fe54 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001778:	2309      	movs	r3, #9
 800177a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800177c:	2302      	movs	r3, #2
 800177e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	4836      	ldr	r0, [pc, #216]	; (8001860 <MX_ADC3_Init+0x178>)
 8001786:	f001 ff6d 	bl	8003664 <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8001790:	f000 fe46 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001794:	2307      	movs	r3, #7
 8001796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001798:	2303      	movs	r3, #3
 800179a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	482f      	ldr	r0, [pc, #188]	; (8001860 <MX_ADC3_Init+0x178>)
 80017a2:	f001 ff5f 	bl	8003664 <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80017ac:	f000 fe38 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017b0:	2304      	movs	r3, #4
 80017b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017b4:	2304      	movs	r3, #4
 80017b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4828      	ldr	r0, [pc, #160]	; (8001860 <MX_ADC3_Init+0x178>)
 80017be:	f001 ff51 	bl	8003664 <HAL_ADC_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80017c8:	f000 fe2a 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80017cc:	230f      	movs	r3, #15
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017d0:	2305      	movs	r3, #5
 80017d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <MX_ADC3_Init+0x178>)
 80017da:	f001 ff43 	bl	8003664 <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80017e4:	f000 fe1c 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017e8:	2308      	movs	r3, #8
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017ec:	2306      	movs	r3, #6
 80017ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	4619      	mov	r1, r3
 80017f4:	481a      	ldr	r0, [pc, #104]	; (8001860 <MX_ADC3_Init+0x178>)
 80017f6:	f001 ff35 	bl	8003664 <HAL_ADC_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8001800:	f000 fe0e 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001804:	230a      	movs	r3, #10
 8001806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001808:	2307      	movs	r3, #7
 800180a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	4619      	mov	r1, r3
 8001810:	4813      	ldr	r0, [pc, #76]	; (8001860 <MX_ADC3_Init+0x178>)
 8001812:	f001 ff27 	bl	8003664 <HAL_ADC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 800181c:	f000 fe00 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001820:	2306      	movs	r3, #6
 8001822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001824:	2308      	movs	r3, #8
 8001826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_ADC3_Init+0x178>)
 800182e:	f001 ff19 	bl	8003664 <HAL_ADC_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8001838:	f000 fdf2 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800183c:	2305      	movs	r3, #5
 800183e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001840:	2309      	movs	r3, #9
 8001842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001844:	463b      	mov	r3, r7
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_ADC3_Init+0x178>)
 800184a:	f001 ff0b 	bl	8003664 <HAL_ADC_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_ADC3_Init+0x170>
  {
    Error_Handler();
 8001854:	f000 fde4 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200005fc 	.word	0x200005fc
 8001864:	40012200 	.word	0x40012200
 8001868:	0f000001 	.word	0x0f000001

0800186c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_CAN1_Init+0x60>)
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <MX_CAN1_Init+0x64>)
 8001874:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_CAN1_Init+0x60>)
 8001878:	2210      	movs	r2, #16
 800187a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_CAN1_Init+0x60>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_CAN1_Init+0x60>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_CAN1_Init+0x60>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_CAN1_Init+0x60>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <MX_CAN1_Init+0x60>)
 8001896:	2200      	movs	r2, #0
 8001898:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_CAN1_Init+0x60>)
 800189c:	2200      	movs	r2, #0
 800189e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <MX_CAN1_Init+0x60>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_CAN1_Init+0x60>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <MX_CAN1_Init+0x60>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_CAN1_Init+0x60>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_CAN1_Init+0x60>)
 80018ba:	f002 f973 	bl	8003ba4 <HAL_CAN_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80018c4:	f000 fdac 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000764 	.word	0x20000764
 80018d0:	40006400 	.word	0x40006400

080018d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_I2C2_Init+0x50>)
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <MX_I2C2_Init+0x54>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_I2C2_Init+0x50>)
 80018e0:	4a12      	ldr	r2, [pc, #72]	; (800192c <MX_I2C2_Init+0x58>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_I2C2_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_I2C2_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_I2C2_Init+0x50>)
 80018f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <MX_I2C2_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_I2C2_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_I2C2_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_I2C2_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_I2C2_Init+0x50>)
 8001912:	f003 fce3 	bl	80052dc <HAL_I2C_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800191c:	f000 fd80 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000078c 	.word	0x2000078c
 8001928:	40005800 	.word	0x40005800
 800192c:	000186a0 	.word	0x000186a0

08001930 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b096      	sub	sp, #88	; 0x58
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2220      	movs	r2, #32
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f01d f989 	bl	801ec80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001970:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <MX_TIM1_Init+0x184>)
 8001972:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001974:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <MX_TIM1_Init+0x180>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001980:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001986:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <MX_TIM1_Init+0x180>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800198e:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800199a:	4845      	ldr	r0, [pc, #276]	; (8001ab0 <MX_TIM1_Init+0x180>)
 800199c:	f004 fbca 	bl	8006134 <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80019a6:	f000 fd3b 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019b4:	4619      	mov	r1, r3
 80019b6:	483e      	ldr	r0, [pc, #248]	; (8001ab0 <MX_TIM1_Init+0x180>)
 80019b8:	f004 ffd8 	bl	800696c <HAL_TIM_ConfigClockSource>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019c2:	f000 fd2d 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019c6:	483a      	ldr	r0, [pc, #232]	; (8001ab0 <MX_TIM1_Init+0x180>)
 80019c8:	f004 fc74 	bl	80062b4 <HAL_TIM_PWM_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80019d2:	f000 fd25 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019e2:	4619      	mov	r1, r3
 80019e4:	4832      	ldr	r0, [pc, #200]	; (8001ab0 <MX_TIM1_Init+0x180>)
 80019e6:	f005 fbc1 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019f0:	f000 fd16 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f4:	2360      	movs	r3, #96	; 0x60
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a00:	2300      	movs	r3, #0
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4825      	ldr	r0, [pc, #148]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001a1a:	f004 fee5 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001a24:	f000 fcfc 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001a32:	f004 fed9 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001a3c:	f000 fcf0 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a44:	2208      	movs	r2, #8
 8001a46:	4619      	mov	r1, r3
 8001a48:	4819      	ldr	r0, [pc, #100]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001a4a:	f004 fecd 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a54:	f000 fce4 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	220c      	movs	r2, #12
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001a62:	f004 fec1 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001a6c:	f000 fcd8 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001a94:	f005 fbe6 	bl	8007264 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001a9e:	f000 fcbf 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aa2:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <MX_TIM1_Init+0x180>)
 8001aa4:	f001 f81c 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 8001aa8:	bf00      	nop
 8001aaa:	3758      	adds	r7, #88	; 0x58
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200007e0 	.word	0x200007e0
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	; 0x38
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]
 8001ae6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae8:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42;
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001af2:	222a      	movs	r2, #42	; 0x2a
 8001af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af6:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001afc:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001afe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b04:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b12:	482e      	ldr	r0, [pc, #184]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001b14:	f004 fb0e 	bl	8006134 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b1e:	f000 fc7f 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4827      	ldr	r0, [pc, #156]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001b30:	f004 ff1c 	bl	800696c <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b3a:	f000 fc71 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b3e:	4823      	ldr	r0, [pc, #140]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001b40:	f004 fbb8 	bl	80062b4 <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b4a:	f000 fc69 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	481b      	ldr	r0, [pc, #108]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001b5e:	f005 fb05 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b68:	f000 fc5a 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4812      	ldr	r0, [pc, #72]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001b84:	f004 fe30 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b8e:	f000 fc47 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2208      	movs	r2, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001b9a:	f004 fe25 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001ba4:	f000 fc3c 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	220c      	movs	r2, #12
 8001bac:	4619      	mov	r1, r3
 8001bae:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001bb0:	f004 fe1a 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001bba:	f000 fc31 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM2_Init+0x114>)
 8001bc0:	f000 ff8e 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 8001bc4:	bf00      	nop
 8001bc6:	3738      	adds	r7, #56	; 0x38
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000828 	.word	0x20000828

08001bd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08e      	sub	sp, #56	; 0x38
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	615a      	str	r2, [r3, #20]
 8001bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c02:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <MX_TIM3_Init+0x100>)
 8001c04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c08:	222a      	movs	r2, #42	; 0x2a
 8001c0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001c12:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c26:	4829      	ldr	r0, [pc, #164]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c28:	f004 fa84 	bl	8006134 <HAL_TIM_Base_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c32:	f000 fbf5 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4822      	ldr	r0, [pc, #136]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c44:	f004 fe92 	bl	800696c <HAL_TIM_ConfigClockSource>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c4e:	f000 fbe7 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c52:	481e      	ldr	r0, [pc, #120]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c54:	f004 fb2e 	bl	80062b4 <HAL_TIM_PWM_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c5e:	f000 fbdf 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8001c62:	2360      	movs	r3, #96	; 0x60
 8001c64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4816      	ldr	r0, [pc, #88]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c72:	f005 fa7b 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c7c:	f000 fbd0 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c80:	2360      	movs	r3, #96	; 0x60
 8001c82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	4619      	mov	r1, r3
 8001c96:	480d      	ldr	r0, [pc, #52]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001c98:	f004 fda6 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ca2:	f000 fbbd 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2204      	movs	r2, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001cae:	f004 fd9b 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001cb8:	f000 fbb2 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <MX_TIM3_Init+0xfc>)
 8001cbe:	f000 ff0f 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 8001cc2:	bf00      	nop
 8001cc4:	3738      	adds	r7, #56	; 0x38
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000870 	.word	0x20000870
 8001cd0:	40000400 	.word	0x40000400

08001cd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08e      	sub	sp, #56	; 0x38
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	615a      	str	r2, [r3, #20]
 8001d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d04:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d06:	4a3e      	ldr	r2, [pc, #248]	; (8001e00 <MX_TIM4_Init+0x12c>)
 8001d08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 43;
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d0c:	222b      	movs	r2, #43	; 0x2b
 8001d0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001d16:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1e:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d2a:	4834      	ldr	r0, [pc, #208]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d2c:	f004 fa02 	bl	8006134 <HAL_TIM_Base_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d36:	f000 fb73 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d44:	4619      	mov	r1, r3
 8001d46:	482d      	ldr	r0, [pc, #180]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d48:	f004 fe10 	bl	800696c <HAL_TIM_ConfigClockSource>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d52:	f000 fb65 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d56:	4829      	ldr	r0, [pc, #164]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d58:	f004 faac 	bl	80062b4 <HAL_TIM_PWM_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d62:	f000 fb5d 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	4619      	mov	r1, r3
 8001d74:	4821      	ldr	r0, [pc, #132]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d76:	f005 f9f9 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d80:	f000 fb4e 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d84:	2360      	movs	r3, #96	; 0x60
 8001d86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4818      	ldr	r0, [pc, #96]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001d9c:	f004 fd24 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001da6:	f000 fb3b 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2204      	movs	r2, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4812      	ldr	r0, [pc, #72]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001db2:	f004 fd19 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001dbc:	f000 fb30 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001dc8:	f004 fd0e 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001dd2:	f000 fb25 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	220c      	movs	r2, #12
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4807      	ldr	r0, [pc, #28]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001dde:	f004 fd03 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001de8:	f000 fb1a 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <MX_TIM4_Init+0x128>)
 8001dee:	f000 fe77 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 8001df2:	bf00      	nop
 8001df4:	3738      	adds	r7, #56	; 0x38
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200008b8 	.word	0x200008b8
 8001e00:	40000800 	.word	0x40000800

08001e04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b096      	sub	sp, #88	; 0x58
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2220      	movs	r2, #32
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f01c ff1f 	bl	801ec80 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e42:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e44:	4a50      	ldr	r2, [pc, #320]	; (8001f88 <MX_TIM8_Init+0x184>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 42;
 8001e48:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e4a:	222a      	movs	r2, #42	; 0x2a
 8001e4c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e5a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e62:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e68:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e6e:	4845      	ldr	r0, [pc, #276]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e70:	f004 f960 	bl	8006134 <HAL_TIM_Base_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001e7a:	f000 fad1 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e88:	4619      	mov	r1, r3
 8001e8a:	483e      	ldr	r0, [pc, #248]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e8c:	f004 fd6e 	bl	800696c <HAL_TIM_ConfigClockSource>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001e96:	f000 fac3 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e9a:	483a      	ldr	r0, [pc, #232]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001e9c:	f004 fa0a 	bl	80062b4 <HAL_TIM_PWM_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001ea6:	f000 fabb 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001eb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4832      	ldr	r0, [pc, #200]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001eba:	f005 f957 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ec4:	f000 faac 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec8:	2360      	movs	r3, #96	; 0x60
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4825      	ldr	r0, [pc, #148]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001eee:	f004 fc7b 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001ef8:	f000 fa92 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	2204      	movs	r2, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	481f      	ldr	r0, [pc, #124]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001f06:	f004 fc6f 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001f10:	f000 fa86 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4819      	ldr	r0, [pc, #100]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001f1e:	f004 fc63 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001f28:	f000 fa7a 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f30:	220c      	movs	r2, #12
 8001f32:	4619      	mov	r1, r3
 8001f34:	4813      	ldr	r0, [pc, #76]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001f36:	f004 fc57 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001f40:	f000 fa6e 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001f68:	f005 f97c 	bl	8007264 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001f72:	f000 fa55 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <MX_TIM8_Init+0x180>)
 8001f78:	f000 fdb2 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 8001f7c:	bf00      	nop
 8001f7e:	3758      	adds	r7, #88	; 0x58
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000900 	.word	0x20000900
 8001f88:	40010400 	.word	0x40010400

08001f8c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	463b      	mov	r3, r7
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_TIM9_Init+0x6c>)
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <MX_TIM9_Init+0x70>)
 8001fa2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <MX_TIM9_Init+0x6c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <MX_TIM9_Init+0x6c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_TIM9_Init+0x6c>)
 8001fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_TIM9_Init+0x6c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_TIM9_Init+0x6c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <MX_TIM9_Init+0x6c>)
 8001fc6:	f004 f8b5 	bl	8006134 <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001fd0:	f000 fa26 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fda:	463b      	mov	r3, r7
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <MX_TIM9_Init+0x6c>)
 8001fe0:	f004 fcc4 	bl	800696c <HAL_TIM_ConfigClockSource>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001fea:	f000 fa19 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000948 	.word	0x20000948
 8001ffc:	40014000 	.word	0x40014000

08002000 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]
 8002022:	615a      	str	r2, [r3, #20]
 8002024:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <MX_TIM12_Init+0xd4>)
 8002028:	4a2b      	ldr	r2, [pc, #172]	; (80020d8 <MX_TIM12_Init+0xd8>)
 800202a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 43;
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <MX_TIM12_Init+0xd4>)
 800202e:	222b      	movs	r2, #43	; 0x2b
 8002030:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <MX_TIM12_Init+0xd4>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <MX_TIM12_Init+0xd4>)
 800203a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800203e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <MX_TIM12_Init+0xd4>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <MX_TIM12_Init+0xd4>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800204c:	4821      	ldr	r0, [pc, #132]	; (80020d4 <MX_TIM12_Init+0xd4>)
 800204e:	f004 f871 	bl	8006134 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002058:	f000 f9e2 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002060:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002062:	f107 0320 	add.w	r3, r7, #32
 8002066:	4619      	mov	r1, r3
 8002068:	481a      	ldr	r0, [pc, #104]	; (80020d4 <MX_TIM12_Init+0xd4>)
 800206a:	f004 fc7f 	bl	800696c <HAL_TIM_ConfigClockSource>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002074:	f000 f9d4 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002078:	4816      	ldr	r0, [pc, #88]	; (80020d4 <MX_TIM12_Init+0xd4>)
 800207a:	f004 f91b 	bl	80062b4 <HAL_TIM_PWM_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002084:	f000 f9cc 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002088:	2360      	movs	r3, #96	; 0x60
 800208a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	4619      	mov	r1, r3
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <MX_TIM12_Init+0xd4>)
 80020a0:	f004 fba2 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80020aa:	f000 f9b9 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2204      	movs	r2, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <MX_TIM12_Init+0xd4>)
 80020b6:	f004 fb97 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80020c0:	f000 f9ae 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <MX_TIM12_Init+0xd4>)
 80020c6:	f000 fd0b 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 80020ca:	bf00      	nop
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000990 	.word	0x20000990
 80020d8:	40001800 	.word	0x40001800

080020dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <MX_USART2_UART_Init+0x50>)
 80020e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 8002114:	f005 f90c 	bl	8007330 <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800211e:	f000 f97f 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200009d8 	.word	0x200009d8
 800212c:	40004400 	.word	0x40004400

08002130 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002136:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800213a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800213e:	2204      	movs	r2, #4
 8002140:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002144:	2202      	movs	r2, #2
 8002146:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002150:	2202      	movs	r2, #2
 8002152:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002156:	2201      	movs	r2, #1
 8002158:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002168:	2201      	movs	r2, #1
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002174:	f003 f9f6 	bl	8005564 <HAL_PCD_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800217e:	f000 f94f 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000a1c 	.word	0x20000a1c

0800218c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_DMA_Init+0x5c>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <MX_DMA_Init+0x5c>)
 800219c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_DMA_Init+0x5c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2105      	movs	r1, #5
 80021b2:	2038      	movs	r0, #56	; 0x38
 80021b4:	f002 fad2 	bl	800475c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021b8:	2038      	movs	r0, #56	; 0x38
 80021ba:	f002 faeb 	bl	8004794 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2105      	movs	r1, #5
 80021c2:	203a      	movs	r0, #58	; 0x3a
 80021c4:	f002 faca 	bl	800475c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80021c8:	203a      	movs	r0, #58	; 0x3a
 80021ca:	f002 fae3 	bl	8004794 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2105      	movs	r1, #5
 80021d2:	203c      	movs	r0, #60	; 0x3c
 80021d4:	f002 fac2 	bl	800475c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80021d8:	203c      	movs	r0, #60	; 0x3c
 80021da:	f002 fadb 	bl	8004794 <HAL_NVIC_EnableIRQ>

}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
 8002206:	4b73      	ldr	r3, [pc, #460]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a72      	ldr	r2, [pc, #456]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002228:	f043 0320 	orr.w	r3, r3, #32
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	4b65      	ldr	r3, [pc, #404]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a64      	ldr	r2, [pc, #400]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b62      	ldr	r3, [pc, #392]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	4b5e      	ldr	r3, [pc, #376]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a5d      	ldr	r2, [pc, #372]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b5b      	ldr	r3, [pc, #364]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a56      	ldr	r2, [pc, #344]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a4f      	ldr	r2, [pc, #316]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a48      	ldr	r2, [pc, #288]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a41      	ldr	r2, [pc, #260]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <MX_GPIO_Init+0x1e8>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 80022e2:	2201      	movs	r2, #1
 80022e4:	f641 413e 	movw	r1, #7230	; 0x1c3e
 80022e8:	483b      	ldr	r0, [pc, #236]	; (80023d8 <MX_GPIO_Init+0x1ec>)
 80022ea:	f002 ffdd 	bl	80052a8 <HAL_GPIO_WritePin>
                          |Cs_Dis8_17_18_Pin|Cs_Dis8_15_16_Pin|Cs_Dis20_3_Pin|Cs_Dis20_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cs_Dis20_6_GPIO_Port, Cs_Dis20_6_Pin, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	483a      	ldr	r0, [pc, #232]	; (80023dc <MX_GPIO_Init+0x1f0>)
 80022f4:	f002 ffd8 	bl	80052a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80022fe:	4838      	ldr	r0, [pc, #224]	; (80023e0 <MX_GPIO_Init+0x1f4>)
 8002300:	f002 ffd2 	bl	80052a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	21c0      	movs	r1, #192	; 0xc0
 8002308:	4833      	ldr	r0, [pc, #204]	; (80023d8 <MX_GPIO_Init+0x1ec>)
 800230a:	f002 ffcd 	bl	80052a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Din3_Pin Din4_Pin Din5_Pin Din6_Pin
                           Din7_Pin Din1_Pin Din2_Pin */
  GPIO_InitStruct.Pin = Din3_Pin|Din4_Pin|Din5_Pin|Din6_Pin
 800230e:	237f      	movs	r3, #127	; 0x7f
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
                          |Din7_Pin|Din1_Pin|Din2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002316:	2302      	movs	r3, #2
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	482e      	ldr	r0, [pc, #184]	; (80023dc <MX_GPIO_Init+0x1f0>)
 8002322:	f002 fe25 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Din10_Pin Din11_Pin Din12_Pin */
  GPIO_InitStruct.Pin = Din10_Pin|Din11_Pin|Din12_Pin;
 8002326:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	482a      	ldr	r0, [pc, #168]	; (80023e4 <MX_GPIO_Init+0x1f8>)
 800233c:	f002 fe18 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cs_Dis20_5_Pin Cs_Dis20_2_Pin Cs_Dis20_1_Pin Cs_Dis8_13_14_Pin
                           Cs_Dis8_17_18_Pin PG6 PG7 Cs_Dis8_15_16_Pin
                           Cs_Dis20_3_Pin Cs_Dis20_4_Pin */
  GPIO_InitStruct.Pin = Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 8002340:	f641 43fe 	movw	r3, #7422	; 0x1cfe
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
                          |Cs_Dis8_17_18_Pin|GPIO_PIN_6|GPIO_PIN_7|Cs_Dis8_15_16_Pin
                          |Cs_Dis20_3_Pin|Cs_Dis20_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	2301      	movs	r3, #1
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	4619      	mov	r1, r3
 8002358:	481f      	ldr	r0, [pc, #124]	; (80023d8 <MX_GPIO_Init+0x1ec>)
 800235a:	f002 fe09 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cs_Dis20_6_Pin */
  GPIO_InitStruct.Pin = Cs_Dis20_6_Pin;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Cs_Dis20_6_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	4619      	mov	r1, r3
 8002374:	4819      	ldr	r0, [pc, #100]	; (80023dc <MX_GPIO_Init+0x1f0>)
 8002376:	f002 fdfb 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cs_Dis8_9_10_Pin */
  GPIO_InitStruct.Pin = Cs_Dis8_9_10_Pin;
 800237a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cs_Dis8_9_10_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238c:	4619      	mov	r1, r3
 800238e:	4813      	ldr	r0, [pc, #76]	; (80023dc <MX_GPIO_Init+0x1f0>)
 8002390:	f002 fdee 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cs_Dis8_11_12_Pin Cs_Dis20_7_Pin Cs_Dis8_19_20_Pin Cs_Dis20_8_Pin */
  GPIO_InitStruct.Pin = Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin;
 8002394:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	4619      	mov	r1, r3
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <MX_GPIO_Init+0x1f4>)
 80023ae:	f002 fddf 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Din9_Pin Din8_Pin */
  GPIO_InitStruct.Pin = Din9_Pin|Din8_Pin;
 80023b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c4:	4619      	mov	r1, r3
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <MX_GPIO_Init+0x1fc>)
 80023c8:	f002 fdd2 	bl	8004f70 <HAL_GPIO_Init>

}
 80023cc:	bf00      	nop
 80023ce:	3738      	adds	r7, #56	; 0x38
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40021800 	.word	0x40021800
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40020c00 	.word	0x40020c00
 80023e4:	40021400 	.word	0x40021400
 80023e8:	40020400 	.word	0x40020400

080023ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f017 fbdd 	bl	8019bb4 <osDelay>
 80023fa:	e7fb      	b.n	80023f4 <StartDefaultTask+0x8>

080023fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800240e:	f000 ff19 	bl	8003244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40002000 	.word	0x40002000

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	e7fe      	b.n	8002428 <Error_Handler+0x8>
	...

0800242c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_MspInit+0x54>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a11      	ldr	r2, [pc, #68]	; (8002480 <HAL_MspInit+0x54>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_MspInit+0x54>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_MspInit+0x54>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_MspInit+0x54>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_MspInit+0x54>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	210f      	movs	r1, #15
 800246e:	f06f 0001 	mvn.w	r0, #1
 8002472:	f002 f973 	bl	800475c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b092      	sub	sp, #72	; 0x48
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a84      	ldr	r2, [pc, #528]	; (80026b4 <HAL_ADC_MspInit+0x230>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	f040 808c 	bne.w	80025c0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
 80024ac:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	4a81      	ldr	r2, [pc, #516]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6453      	str	r3, [r2, #68]	; 0x44
 80024b8:	4b7f      	ldr	r3, [pc, #508]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c8:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4a7a      	ldr	r2, [pc, #488]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6313      	str	r3, [r2, #48]	; 0x30
 80024d4:	4b78      	ldr	r3, [pc, #480]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e4:	4b74      	ldr	r3, [pc, #464]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	4a73      	ldr	r2, [pc, #460]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6313      	str	r3, [r2, #48]	; 0x30
 80024f0:	4b71      	ldr	r3, [pc, #452]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4a6c      	ldr	r2, [pc, #432]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 8002506:	f043 0302 	orr.w	r3, r3, #2
 800250a:	6313      	str	r3, [r2, #48]	; 0x30
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = CS20_7_Pin|CS8_20_Pin|CS8_19_Pin|CS20_8_Pin;
 8002518:	23f0      	movs	r3, #240	; 0xf0
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800251c:	2303      	movs	r3, #3
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002528:	4619      	mov	r1, r3
 800252a:	4864      	ldr	r0, [pc, #400]	; (80026bc <HAL_ADC_MspInit+0x238>)
 800252c:	f002 fd20 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_4_Pin|ADC1_5_Pin;
 8002530:	2330      	movs	r3, #48	; 0x30
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002534:	2303      	movs	r3, #3
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002540:	4619      	mov	r1, r3
 8002542:	485f      	ldr	r0, [pc, #380]	; (80026c0 <HAL_ADC_MspInit+0x23c>)
 8002544:	f002 fd14 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_8_Pin|ADC1_9_Pin;
 8002548:	2303      	movs	r3, #3
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254c:	2303      	movs	r3, #3
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002558:	4619      	mov	r1, r3
 800255a:	485a      	ldr	r0, [pc, #360]	; (80026c4 <HAL_ADC_MspInit+0x240>)
 800255c:	f002 fd08 	bl	8004f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 8002562:	4a5a      	ldr	r2, [pc, #360]	; (80026cc <HAL_ADC_MspInit+0x248>)
 8002564:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002566:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002572:	4b55      	ldr	r3, [pc, #340]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 800257a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002580:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 8002582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002586:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002588:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002596:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800259c:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025a2:	4849      	ldr	r0, [pc, #292]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 80025a4:	f002 f904 	bl	80047b0 <HAL_DMA_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80025ae:	f7ff ff37 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a44      	ldr	r2, [pc, #272]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
 80025b8:	4a43      	ldr	r2, [pc, #268]	; (80026c8 <HAL_ADC_MspInit+0x244>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80025be:	e105      	b.n	80027cc <HAL_ADC_MspInit+0x348>
  else if(hadc->Instance==ADC2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a42      	ldr	r2, [pc, #264]	; (80026d0 <HAL_ADC_MspInit+0x24c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	f040 8088 	bne.w	80026dc <HAL_ADC_MspInit+0x258>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80025d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025da:	6453      	str	r3, [r2, #68]	; 0x44
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	4b32      	ldr	r3, [pc, #200]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_ADC_MspInit+0x234>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS20_4_Pin|CS8_10_Pin|CS8_9_Pin;
 8002620:	230e      	movs	r3, #14
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002624:	2303      	movs	r3, #3
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002630:	4619      	mov	r1, r3
 8002632:	4823      	ldr	r0, [pc, #140]	; (80026c0 <HAL_ADC_MspInit+0x23c>)
 8002634:	f002 fc9c 	bl	8004f70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS20_5_Pin|CS20_6_Pin|CS8_12_Pin|CS8_11_Pin;
 8002638:	230f      	movs	r3, #15
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800263c:	2303      	movs	r3, #3
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002648:	4619      	mov	r1, r3
 800264a:	481c      	ldr	r0, [pc, #112]	; (80026bc <HAL_ADC_MspInit+0x238>)
 800264c:	f002 fc90 	bl	8004f70 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 8002652:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <HAL_ADC_MspInit+0x254>)
 8002654:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002656:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 8002658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 800266c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002670:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 8002674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002678:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 800267c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002680:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 8002684:	2200      	movs	r2, #0
 8002686:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 800268a:	2200      	movs	r2, #0
 800268c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 8002690:	2200      	movs	r2, #0
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002694:	480f      	ldr	r0, [pc, #60]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 8002696:	f002 f88b 	bl	80047b0 <HAL_DMA_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_ADC_MspInit+0x220>
      Error_Handler();
 80026a0:	f7ff febe 	bl	8002420 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_ADC_MspInit+0x250>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026b0:	e08c      	b.n	80027cc <HAL_ADC_MspInit+0x348>
 80026b2:	bf00      	nop
 80026b4:	40012000 	.word	0x40012000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020000 	.word	0x40020000
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40020400 	.word	0x40020400
 80026c8:	20000644 	.word	0x20000644
 80026cc:	40026470 	.word	0x40026470
 80026d0:	40012100 	.word	0x40012100
 80026d4:	200006a4 	.word	0x200006a4
 80026d8:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_ADC_MspInit+0x350>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d172      	bne.n	80027cc <HAL_ADC_MspInit+0x348>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a3a      	ldr	r2, [pc, #232]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 80026f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a33      	ldr	r2, [pc, #204]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 800270c:	f043 0320 	orr.w	r3, r3, #32
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_ADC_MspInit+0x354>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CS20_2_Pin|CS20_1_Pin|CS8_14_Pin|CS8_13_Pin
 800273a:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002740:	2303      	movs	r3, #3
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002748:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800274c:	4619      	mov	r1, r3
 800274e:	4823      	ldr	r0, [pc, #140]	; (80027dc <HAL_ADC_MspInit+0x358>)
 8002750:	f002 fc0e 	bl	8004f70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS8_16_Pin;
 8002754:	2301      	movs	r3, #1
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002758:	2303      	movs	r3, #3
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(CS8_16_GPIO_Port, &GPIO_InitStruct);
 8002760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002764:	4619      	mov	r1, r3
 8002766:	481e      	ldr	r0, [pc, #120]	; (80027e0 <HAL_ADC_MspInit+0x35c>)
 8002768:	f002 fc02 	bl	8004f70 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_ADC_MspInit+0x364>)
 8002770:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 8002774:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002778:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800277a:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 8002788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 8002790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002794:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 8002798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800279c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80027b0:	480c      	ldr	r0, [pc, #48]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 80027b2:	f001 fffd 	bl	80047b0 <HAL_DMA_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_ADC_MspInit+0x33c>
      Error_Handler();
 80027bc:	f7ff fe30 	bl	8002420 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_ADC_MspInit+0x360>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027cc:	bf00      	nop
 80027ce:	3748      	adds	r7, #72	; 0x48
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40012200 	.word	0x40012200
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40021400 	.word	0x40021400
 80027e0:	40020800 	.word	0x40020800
 80027e4:	20000704 	.word	0x20000704
 80027e8:	40026410 	.word	0x40026410

080027ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <HAL_CAN_MspInit+0xb4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d143      	bne.n	8002896 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_CAN_MspInit+0xb8>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_CAN_MspInit+0xb8>)
 8002818:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_CAN_MspInit+0xb8>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_CAN_MspInit+0xb8>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <HAL_CAN_MspInit+0xb8>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_CAN_MspInit+0xb8>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002846:	2303      	movs	r3, #3
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002856:	2309      	movs	r3, #9
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4811      	ldr	r0, [pc, #68]	; (80028a8 <HAL_CAN_MspInit+0xbc>)
 8002862:	f002 fb85 	bl	8004f70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2105      	movs	r1, #5
 800286a:	2013      	movs	r0, #19
 800286c:	f001 ff76 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002870:	2013      	movs	r0, #19
 8002872:	f001 ff8f 	bl	8004794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2105      	movs	r1, #5
 800287a:	2014      	movs	r0, #20
 800287c:	f001 ff6e 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002880:	2014      	movs	r0, #20
 8002882:	f001 ff87 	bl	8004794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2105      	movs	r1, #5
 800288a:	2015      	movs	r0, #21
 800288c:	f001 ff66 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002890:	2015      	movs	r0, #21
 8002892:	f001 ff7f 	bl	8004794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3728      	adds	r7, #40	; 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40006400 	.word	0x40006400
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020c00 	.word	0x40020c00

080028ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_I2C_MspInit+0x84>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d12b      	bne.n	8002926 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028d8:	f043 0320 	orr.w	r3, r3, #32
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028ea:	2303      	movs	r3, #3
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ee:	2312      	movs	r3, #18
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028fa:	2304      	movs	r3, #4
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <HAL_I2C_MspInit+0x8c>)
 8002906:	f002 fb33 	bl	8004f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_I2C_MspInit+0x88>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_I2C_MspInit+0x88>)
 8002914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_I2C_MspInit+0x88>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	; 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40005800 	.word	0x40005800
 8002934:	40023800 	.word	0x40023800
 8002938:	40021400 	.word	0x40021400

0800293c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5e      	ldr	r2, [pc, #376]	; (8002ac4 <HAL_TIM_Base_MspInit+0x188>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10e      	bne.n	800296c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
 8002952:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b5a      	ldr	r3, [pc, #360]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800296a:	e0a6      	b.n	8002aba <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002974:	d116      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	2105      	movs	r1, #5
 8002996:	201c      	movs	r0, #28
 8002998:	f001 fee0 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800299c:	201c      	movs	r0, #28
 800299e:	f001 fef9 	bl	8004794 <HAL_NVIC_EnableIRQ>
}
 80029a2:	e08a      	b.n	8002aba <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM3)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_TIM_Base_MspInit+0x190>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	4b45      	ldr	r3, [pc, #276]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a44      	ldr	r2, [pc, #272]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	69fb      	ldr	r3, [r7, #28]
}
 80029ca:	e076      	b.n	8002aba <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM4)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a3f      	ldr	r2, [pc, #252]	; (8002ad0 <HAL_TIM_Base_MspInit+0x194>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a3a      	ldr	r2, [pc, #232]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	69bb      	ldr	r3, [r7, #24]
}
 80029f2:	e062      	b.n	8002aba <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM8)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a36      	ldr	r2, [pc, #216]	; (8002ad4 <HAL_TIM_Base_MspInit+0x198>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d12e      	bne.n	8002a5c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a30      	ldr	r2, [pc, #192]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2105      	movs	r1, #5
 8002a1e:	202b      	movs	r0, #43	; 0x2b
 8002a20:	f001 fe9c 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002a24:	202b      	movs	r0, #43	; 0x2b
 8002a26:	f001 feb5 	bl	8004794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	202c      	movs	r0, #44	; 0x2c
 8002a30:	f001 fe94 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002a34:	202c      	movs	r0, #44	; 0x2c
 8002a36:	f001 fead 	bl	8004794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	210f      	movs	r1, #15
 8002a3e:	202d      	movs	r0, #45	; 0x2d
 8002a40:	f001 fe8c 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002a44:	202d      	movs	r0, #45	; 0x2d
 8002a46:	f001 fea5 	bl	8004794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2105      	movs	r1, #5
 8002a4e:	202e      	movs	r0, #46	; 0x2e
 8002a50:	f001 fe84 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002a54:	202e      	movs	r0, #46	; 0x2e
 8002a56:	f001 fe9d 	bl	8004794 <HAL_NVIC_EnableIRQ>
}
 8002a5a:	e02e      	b.n	8002aba <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM9)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_TIM_Base_MspInit+0x19c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6453      	str	r3, [r2, #68]	; 0x44
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
}
 8002a82:	e01a      	b.n	8002aba <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM12)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_TIM_Base_MspInit+0x1a0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d115      	bne.n	8002aba <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_TIM_Base_MspInit+0x18c>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2105      	movs	r1, #5
 8002aae:	202b      	movs	r0, #43	; 0x2b
 8002ab0:	f001 fe54 	bl	800475c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ab4:	202b      	movs	r0, #43	; 0x2b
 8002ab6:	f001 fe6d 	bl	8004794 <HAL_NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40010400 	.word	0x40010400
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40001800 	.word	0x40001800

08002ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08e      	sub	sp, #56	; 0x38
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_TIM_MspPostInit+0x1d8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d11f      	bne.n	8002b42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
 8002b06:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a6c      	ldr	r2, [pc, #432]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002b0c:	f043 0310 	orr.w	r3, r3, #16
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = InCH8_9_Pin|InCH8_10_Pin|InCH20_5_Pin|InCH20_6_Pin;
 8002b1e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4861      	ldr	r0, [pc, #388]	; (8002cc0 <HAL_TIM_MspPostInit+0x1e0>)
 8002b3c:	f002 fa18 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002b40:	e0b6      	b.n	8002cb0 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4a:	d11f      	bne.n	8002b8c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	4b5a      	ldr	r3, [pc, #360]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	4a59      	ldr	r2, [pc, #356]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5c:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = InCH8_12_Pin|InCH8_11_Pin|InCH8_16_Pin;
 8002b68:	f640 4308 	movw	r3, #3080	; 0xc08
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b82:	4619      	mov	r1, r3
 8002b84:	484f      	ldr	r0, [pc, #316]	; (8002cc4 <HAL_TIM_MspPostInit+0x1e4>)
 8002b86:	f002 f9f3 	bl	8004f70 <HAL_GPIO_Init>
}
 8002b8a:	e091      	b.n	8002cb0 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_TIM_MspPostInit+0x1e8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d11e      	bne.n	8002bd4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	4b48      	ldr	r3, [pc, #288]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a47      	ldr	r2, [pc, #284]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = InCH8_15_Pin|InCH20_4_Pin;
 8002bb2:	2330      	movs	r3, #48	; 0x30
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bca:	4619      	mov	r1, r3
 8002bcc:	483d      	ldr	r0, [pc, #244]	; (8002cc4 <HAL_TIM_MspPostInit+0x1e4>)
 8002bce:	f002 f9cf 	bl	8004f70 <HAL_GPIO_Init>
}
 8002bd2:	e06d      	b.n	8002cb0 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM4)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3c      	ldr	r2, [pc, #240]	; (8002ccc <HAL_TIM_MspPostInit+0x1ec>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d11f      	bne.n	8002c1e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a35      	ldr	r2, [pc, #212]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002be8:	f043 0308 	orr.w	r3, r3, #8
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = InCH8_20_Pin|InCH20_8_Pin|InCH20_1_Pin|InCH20_2_Pin;
 8002bfa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c14:	4619      	mov	r1, r3
 8002c16:	482e      	ldr	r0, [pc, #184]	; (8002cd0 <HAL_TIM_MspPostInit+0x1f0>)
 8002c18:	f002 f9aa 	bl	8004f70 <HAL_GPIO_Init>
}
 8002c1c:	e048      	b.n	8002cb0 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_TIM_MspPostInit+0x1f4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d11f      	bne.n	8002c68 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6313      	str	r3, [r2, #48]	; 0x30
 8002c38:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = InCH8_13_Pin|InCH8_14_Pin|InCH8_17_Pin|InCH8_18_Pin;
 8002c44:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c56:	2303      	movs	r3, #3
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5e:	4619      	mov	r1, r3
 8002c60:	481d      	ldr	r0, [pc, #116]	; (8002cd8 <HAL_TIM_MspPostInit+0x1f8>)
 8002c62:	f002 f985 	bl	8004f70 <HAL_GPIO_Init>
}
 8002c66:	e023      	b.n	8002cb0 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM12)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_TIM_MspPostInit+0x1fc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d11e      	bne.n	8002cb0 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_TIM_MspPostInit+0x1dc>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = InCH20_7_Pin|InCH8_19_Pin;
 8002c8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002ca0:	2309      	movs	r3, #9
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <HAL_TIM_MspPostInit+0x1e4>)
 8002cac:	f002 f960 	bl	8004f70 <HAL_GPIO_Init>
}
 8002cb0:	bf00      	nop
 8002cb2:	3738      	adds	r7, #56	; 0x38
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40020c00 	.word	0x40020c00
 8002cd4:	40010400 	.word	0x40010400
 8002cd8:	40020800 	.word	0x40020800
 8002cdc:	40001800 	.word	0x40001800

08002ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <HAL_UART_MspInit+0x84>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d12b      	bne.n	8002d5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <HAL_UART_MspInit+0x88>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_UART_MspInit+0x88>)
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <HAL_UART_MspInit+0x88>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_UART_MspInit+0x88>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_UART_MspInit+0x88>)
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_UART_MspInit+0x88>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d3a:	2360      	movs	r3, #96	; 0x60
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d4a:	2307      	movs	r3, #7
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	4805      	ldr	r0, [pc, #20]	; (8002d6c <HAL_UART_MspInit+0x8c>)
 8002d56:	f002 f90b 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40004400 	.word	0x40004400
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40020c00 	.word	0x40020c00

08002d70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d90:	d13f      	bne.n	8002e12 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002dae:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002dc0:	230a      	movs	r3, #10
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4815      	ldr	r0, [pc, #84]	; (8002e20 <HAL_PCD_MspInit+0xb0>)
 8002dcc:	f002 f8d0 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	480e      	ldr	r0, [pc, #56]	; (8002e20 <HAL_PCD_MspInit+0xb0>)
 8002de6:	f002 f8c3 	bl	8004f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df4:	6353      	str	r3, [r2, #52]	; 0x34
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000

08002e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08c      	sub	sp, #48	; 0x30
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	202d      	movs	r0, #45	; 0x2d
 8002e3a:	f001 fc8f 	bl	800475c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e3e:	202d      	movs	r0, #45	; 0x2d
 8002e40:	f001 fca8 	bl	8004794 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <HAL_InitTick+0xa4>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <HAL_InitTick+0xa4>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6413      	str	r3, [r2, #64]	; 0x40
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_InitTick+0xa4>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e60:	f107 0210 	add.w	r2, r7, #16
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 f930 	bl	80060d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e70:	f003 f906 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 8002e74:	4603      	mov	r3, r0
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <HAL_InitTick+0xa8>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	3b01      	subs	r3, #1
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_InitTick+0xac>)
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_InitTick+0xb0>)
 8002e8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_InitTick+0xac>)
 8002e90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e94:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_InitTick+0xac>)
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_InitTick+0xac>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_InitTick+0xac>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8002ea8:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <HAL_InitTick+0xac>)
 8002eaa:	f003 f943 	bl	8006134 <HAL_TIM_Base_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002eb4:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <HAL_InitTick+0xac>)
 8002eb6:	f003 f98d 	bl	80061d4 <HAL_TIM_Base_Start_IT>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	e000      	b.n	8002ec0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3730      	adds	r7, #48	; 0x30
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	431bde83 	.word	0x431bde83
 8002ed0:	200014b0 	.word	0x200014b0
 8002ed4:	40002000 	.word	0x40002000

08002ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002edc:	e7fe      	b.n	8002edc <NMI_Handler+0x4>

08002ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <HardFault_Handler+0x4>

08002ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <MemManage_Handler+0x4>

08002eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <BusFault_Handler+0x4>

08002ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <UsageFault_Handler+0x4>

08002ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <CAN1_TX_IRQHandler+0x10>)
 8002f0a:	f001 f968 	bl	80041de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000764 	.word	0x20000764

08002f18 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <CAN1_RX0_IRQHandler+0x10>)
 8002f1e:	f001 f95e 	bl	80041de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000764 	.word	0x20000764

08002f2c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <CAN1_RX1_IRQHandler+0x10>)
 8002f32:	f001 f954 	bl	80041de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000764 	.word	0x20000764

08002f40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <TIM2_IRQHandler+0x10>)
 8002f46:	f003 fb47 	bl	80065d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000828 	.word	0x20000828

08002f54 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002f58:	4803      	ldr	r0, [pc, #12]	; (8002f68 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002f5a:	f003 fb3d 	bl	80065d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002f5e:	4803      	ldr	r0, [pc, #12]	; (8002f6c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002f60:	f003 fb3a 	bl	80065d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000900 	.word	0x20000900
 8002f6c:	20000990 	.word	0x20000990

08002f70 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002f76:	f003 fb2f 	bl	80065d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000900 	.word	0x20000900

08002f84 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002f88:	4803      	ldr	r0, [pc, #12]	; (8002f98 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002f8a:	f003 fb25 	bl	80065d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002f8e:	4803      	ldr	r0, [pc, #12]	; (8002f9c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002f90:	f003 fb22 	bl	80065d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000900 	.word	0x20000900
 8002f9c:	200014b0 	.word	0x200014b0

08002fa0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <TIM8_CC_IRQHandler+0x10>)
 8002fa6:	f003 fb17 	bl	80065d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000900 	.word	0x20000900

08002fb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	vADC_Ready(ADC3_READY);
 8002fb8:	2004      	movs	r0, #4
 8002fba:	f01a fd49 	bl	801da50 <vADC_Ready>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002fbe:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <DMA2_Stream0_IRQHandler+0x14>)
 8002fc0:	f001 fd6c 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000704 	.word	0x20000704

08002fcc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	vADC_Ready(ADC2_READY);
 8002fd0:	2002      	movs	r0, #2
 8002fd2:	f01a fd3d 	bl	801da50 <vADC_Ready>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002fd6:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <DMA2_Stream2_IRQHandler+0x14>)
 8002fd8:	f001 fd60 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	200006a4 	.word	0x200006a4

08002fe4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */
   vADC_Ready(ADC1_READY);
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f01a fd31 	bl	801da50 <vADC_Ready>
  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fee:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <DMA2_Stream4_IRQHandler+0x14>)
 8002ff0:	f001 fd54 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000644 	.word	0x20000644

08002ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
	return 1;
 8003000:	2301      	movs	r3, #1
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <_kill>:

int _kill(int pid, int sig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003016:	f01b fa53 	bl	801e4c0 <__errno>
 800301a:	4603      	mov	r3, r0
 800301c:	2216      	movs	r2, #22
 800301e:	601a      	str	r2, [r3, #0]
	return -1;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_exit>:

void _exit (int status)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ffe7 	bl	800300c <_kill>
	while (1) {}		/* Make sure we hang here */
 800303e:	e7fe      	b.n	800303e <_exit+0x12>

08003040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e00a      	b.n	8003068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003052:	f3af 8000 	nop.w
 8003056:	4601      	mov	r1, r0
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	60ba      	str	r2, [r7, #8]
 800305e:	b2ca      	uxtb	r2, r1
 8003060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3301      	adds	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	dbf0      	blt.n	8003052 <_read+0x12>
	}

return len;
 8003070:	687b      	ldr	r3, [r7, #4]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e009      	b.n	80030a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	60ba      	str	r2, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3301      	adds	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	dbf1      	blt.n	800308c <_write+0x12>
	}
	return len;
 80030a8:	687b      	ldr	r3, [r7, #4]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_close>:

int _close(int file)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
	return -1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030da:	605a      	str	r2, [r3, #4]
	return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_isatty>:

int _isatty(int file)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
	return 1;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	return 0;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <_sbrk+0x5c>)
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <_sbrk+0x60>)
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <_sbrk+0x64>)
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <_sbrk+0x68>)
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800314c:	f01b f9b8 	bl	801e4c0 <__errno>
 8003150:	4603      	mov	r3, r0
 8003152:	220c      	movs	r2, #12
 8003154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
 800315a:	e009      	b.n	8003170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <_sbrk+0x64>)
 800316c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20020000 	.word	0x20020000
 800317c:	00000400 	.word	0x00000400
 8003180:	200014f8 	.word	0x200014f8
 8003184:	20010380 	.word	0x20010380

08003188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <SystemInit+0x20>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <SystemInit+0x20>)
 8003194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031b0:	480d      	ldr	r0, [pc, #52]	; (80031e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031b2:	490e      	ldr	r1, [pc, #56]	; (80031ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031b4:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c8:	4c0b      	ldr	r4, [pc, #44]	; (80031f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031d6:	f7ff ffd7 	bl	8003188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031da:	f01b fc6f 	bl	801eabc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031de:	f7fe f859 	bl	8001294 <main>
  bx  lr    
 80031e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ec:	20000504 	.word	0x20000504
  ldr r2, =_sidata
 80031f0:	080232ec 	.word	0x080232ec
  ldr r2, =_sbss
 80031f4:	20000504 	.word	0x20000504
  ldr r4, =_ebss
 80031f8:	2001037c 	.word	0x2001037c

080031fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031fc:	e7fe      	b.n	80031fc <ADC_IRQHandler>
	...

08003200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_Init+0x40>)
 800320a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_Init+0x40>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_Init+0x40>)
 8003216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800321a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_Init+0x40>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003228:	2003      	movs	r0, #3
 800322a:	f001 fa8c 	bl	8004746 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322e:	200f      	movs	r0, #15
 8003230:	f7ff fdf8 	bl	8002e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003234:	f7ff f8fa 	bl	800242c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00

08003244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_IncTick+0x20>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x24>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4413      	add	r3, r2
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_IncTick+0x24>)
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000008 	.word	0x20000008
 8003268:	200014fc 	.word	0x200014fc

0800326c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return uwTick;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_GetTick+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	200014fc 	.word	0x200014fc

08003284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff ffee 	bl	800326c <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d005      	beq.n	80032aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_Delay+0x44>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032aa:	bf00      	nop
 80032ac:	f7ff ffde 	bl	800326c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d8f7      	bhi.n	80032ac <HAL_Delay+0x28>
  {
  }
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000008 	.word	0x20000008

080032cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e033      	b.n	800334a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff f8ca 	bl	8002484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003312:	f023 0302 	bic.w	r3, r3, #2
 8003316:	f043 0202 	orr.w	r2, r3, #2
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fac2 	bl	80038a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
 800333a:	e001      	b.n	8003340 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_ADC_Start_DMA+0x1e>
 800336e:	2302      	movs	r3, #2
 8003370:	e0e9      	b.n	8003546 <HAL_ADC_Start_DMA+0x1f2>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d018      	beq.n	80033ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003398:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <HAL_ADC_Start_DMA+0x1fc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6d      	ldr	r2, [pc, #436]	; (8003554 <HAL_ADC_Start_DMA+0x200>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0c9a      	lsrs	r2, r3, #18
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033ac:	e002      	b.n	80033b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f9      	bne.n	80033ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d107      	bne.n	80033da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 80a1 	bne.w	800352c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003414:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d106      	bne.n	8003438 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f023 0206 	bic.w	r2, r3, #6
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
 8003436:	e002      	b.n	800343e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003446:	4b44      	ldr	r3, [pc, #272]	; (8003558 <HAL_ADC_Start_DMA+0x204>)
 8003448:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	4a43      	ldr	r2, [pc, #268]	; (800355c <HAL_ADC_Start_DMA+0x208>)
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	4a42      	ldr	r2, [pc, #264]	; (8003560 <HAL_ADC_Start_DMA+0x20c>)
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	4a41      	ldr	r2, [pc, #260]	; (8003564 <HAL_ADC_Start_DMA+0x210>)
 8003460:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800346a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800347a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800348a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	334c      	adds	r3, #76	; 0x4c
 8003496:	4619      	mov	r1, r3
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f001 fa36 	bl	800490c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d12a      	bne.n	8003502 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2d      	ldr	r2, [pc, #180]	; (8003568 <HAL_ADC_Start_DMA+0x214>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d015      	beq.n	80034e2 <HAL_ADC_Start_DMA+0x18e>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2c      	ldr	r2, [pc, #176]	; (800356c <HAL_ADC_Start_DMA+0x218>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d105      	bne.n	80034cc <HAL_ADC_Start_DMA+0x178>
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_ADC_Start_DMA+0x204>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_ADC_Start_DMA+0x21c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d136      	bne.n	8003544 <HAL_ADC_Start_DMA+0x1f0>
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_ADC_Start_DMA+0x204>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d130      	bne.n	8003544 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d129      	bne.n	8003544 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	e020      	b.n	8003544 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_ADC_Start_DMA+0x214>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d11b      	bne.n	8003544 <HAL_ADC_Start_DMA+0x1f0>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d114      	bne.n	8003544 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	e00b      	b.n	8003544 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f043 0210 	orr.w	r2, r3, #16
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000000 	.word	0x20000000
 8003554:	431bde83 	.word	0x431bde83
 8003558:	40012300 	.word	0x40012300
 800355c:	08003aa1 	.word	0x08003aa1
 8003560:	08003b5b 	.word	0x08003b5b
 8003564:	08003b77 	.word	0x08003b77
 8003568:	40012000 	.word	0x40012000
 800356c:	40012100 	.word	0x40012100
 8003570:	40012200 	.word	0x40012200

08003574 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_ADC_Stop_DMA+0x1a>
 800358a:	2302      	movs	r3, #2
 800358c:	e048      	b.n	8003620 <HAL_ADC_Stop_DMA+0xac>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d130      	bne.n	8003616 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d10f      	bne.n	80035f2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 f9f0 	bl	80049bc <HAL_DMA_Abort>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003600:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x1c>
 800367c:	2302      	movs	r3, #2
 800367e:	e105      	b.n	800388c <HAL_ADC_ConfigChannel+0x228>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b09      	cmp	r3, #9
 800368e:	d925      	bls.n	80036dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	3b1e      	subs	r3, #30
 80036a6:	2207      	movs	r2, #7
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43da      	mvns	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	400a      	ands	r2, r1
 80036b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68d9      	ldr	r1, [r3, #12]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	4603      	mov	r3, r0
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4403      	add	r3, r0
 80036ce:	3b1e      	subs	r3, #30
 80036d0:	409a      	lsls	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	e022      	b.n	8003722 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6919      	ldr	r1, [r3, #16]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	2207      	movs	r2, #7
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	400a      	ands	r2, r1
 80036fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6919      	ldr	r1, [r3, #16]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4618      	mov	r0, r3
 8003712:	4603      	mov	r3, r0
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4403      	add	r3, r0
 8003718:	409a      	lsls	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d824      	bhi.n	8003774 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	3b05      	subs	r3, #5
 800373c:	221f      	movs	r2, #31
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43da      	mvns	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	400a      	ands	r2, r1
 800374a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	4618      	mov	r0, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	3b05      	subs	r3, #5
 8003766:	fa00 f203 	lsl.w	r2, r0, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	635a      	str	r2, [r3, #52]	; 0x34
 8003772:	e04c      	b.n	800380e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	d824      	bhi.n	80037c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	3b23      	subs	r3, #35	; 0x23
 800378e:	221f      	movs	r2, #31
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43da      	mvns	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	400a      	ands	r2, r1
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4618      	mov	r0, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	3b23      	subs	r3, #35	; 0x23
 80037b8:	fa00 f203 	lsl.w	r2, r0, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
 80037c4:	e023      	b.n	800380e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	3b41      	subs	r3, #65	; 0x41
 80037d8:	221f      	movs	r2, #31
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	400a      	ands	r2, r1
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	4618      	mov	r0, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	3b41      	subs	r3, #65	; 0x41
 8003802:	fa00 f203 	lsl.w	r2, r0, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_ADC_ConfigChannel+0x234>)
 8003810:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <HAL_ADC_ConfigChannel+0x238>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d109      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1cc>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b12      	cmp	r3, #18
 8003822:	d105      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_ADC_ConfigChannel+0x238>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d123      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x21e>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b10      	cmp	r3, #16
 8003840:	d003      	beq.n	800384a <HAL_ADC_ConfigChannel+0x1e6>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b11      	cmp	r3, #17
 8003848:	d11b      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b10      	cmp	r3, #16
 800385c:	d111      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_ADC_ConfigChannel+0x23c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_ADC_ConfigChannel+0x240>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	0c9a      	lsrs	r2, r3, #18
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003874:	e002      	b.n	800387c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3b01      	subs	r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f9      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40012300 	.word	0x40012300
 800389c:	40012000 	.word	0x40012000
 80038a0:	20000000 	.word	0x20000000
 80038a4:	431bde83 	.word	0x431bde83

080038a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038b0:	4b79      	ldr	r3, [pc, #484]	; (8003a98 <ADC_Init+0x1f0>)
 80038b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	021a      	lsls	r2, r3, #8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003922:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6899      	ldr	r1, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <ADC_Init+0x1f4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d022      	beq.n	8003986 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800394e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003970:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6899      	ldr	r1, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	e00f      	b.n	80039a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0202 	bic.w	r2, r2, #2
 80039b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7e1b      	ldrb	r3, [r3, #24]
 80039c0:	005a      	lsls	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	3b01      	subs	r3, #1
 8003a00:	035a      	lsls	r2, r3, #13
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	e007      	b.n	8003a1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	051a      	lsls	r2, r3, #20
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6899      	ldr	r1, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a5e:	025a      	lsls	r2, r3, #9
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6899      	ldr	r1, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	029a      	lsls	r2, r3, #10
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012300 	.word	0x40012300
 8003a9c:	0f000001 	.word	0x0f000001

08003aa0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d13c      	bne.n	8003b34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d12b      	bne.n	8003b2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d127      	bne.n	8003b2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d119      	bne.n	8003b2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0220 	bic.w	r2, r2, #32
 8003b06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fd7b 	bl	8003628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b32:	e00e      	b.n	8003b52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fd85 	bl	8003650 <HAL_ADC_ErrorCallback>
}
 8003b46:	e004      	b.n	8003b52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fd67 	bl	800363c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2240      	movs	r2, #64	; 0x40
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0204 	orr.w	r2, r3, #4
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff fd5a 	bl	8003650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0ed      	b.n	8003d92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe fe12 	bl	80027ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bd8:	f7ff fb48 	bl	800326c <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bde:	e012      	b.n	8003c06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003be0:	f7ff fb44 	bl	800326c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b0a      	cmp	r3, #10
 8003bec:	d90b      	bls.n	8003c06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0c5      	b.n	8003d92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0e5      	beq.n	8003be0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0202 	bic.w	r2, r2, #2
 8003c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c24:	f7ff fb22 	bl	800326c <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c2a:	e012      	b.n	8003c52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c2c:	f7ff fb1e 	bl	800326c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b0a      	cmp	r3, #10
 8003c38:	d90b      	bls.n	8003c52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2205      	movs	r2, #5
 8003c4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e09f      	b.n	8003d92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7e1b      	ldrb	r3, [r3, #24]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d108      	bne.n	8003c7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	e007      	b.n	8003c8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7e5b      	ldrb	r3, [r3, #25]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d108      	bne.n	8003ca4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e007      	b.n	8003cb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7e9b      	ldrb	r3, [r3, #26]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d108      	bne.n	8003cce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0220 	orr.w	r2, r2, #32
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e007      	b.n	8003cde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0220 	bic.w	r2, r2, #32
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7edb      	ldrb	r3, [r3, #27]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0210 	bic.w	r2, r2, #16
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e007      	b.n	8003d08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0210 	orr.w	r2, r2, #16
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7f1b      	ldrb	r3, [r3, #28]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d108      	bne.n	8003d22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0208 	bic.w	r2, r2, #8
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7f5b      	ldrb	r3, [r3, #29]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d108      	bne.n	8003d4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0204 	orr.w	r2, r2, #4
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e007      	b.n	8003d5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	ea42 0103 	orr.w	r1, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b089      	sub	sp, #36	; 0x24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003db8:	7ffb      	ldrb	r3, [r7, #31]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d003      	beq.n	8003dc6 <HAL_CAN_AddTxMessage+0x2c>
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	f040 80b8 	bne.w	8003f36 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a0 	beq.w	8003f26 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	0e1b      	lsrs	r3, r3, #24
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d907      	bls.n	8003e06 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e09e      	b.n	8003f44 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e06:	2201      	movs	r2, #1
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10d      	bne.n	8003e34 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	6809      	ldr	r1, [r1, #0]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	440b      	add	r3, r1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e00f      	b.n	8003e54 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e3e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e44:	68f9      	ldr	r1, [r7, #12]
 8003e46:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003e48:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	440b      	add	r3, r1
 8003e52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6819      	ldr	r1, [r3, #0]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3318      	adds	r3, #24
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	440b      	add	r3, r1
 8003e64:	3304      	adds	r3, #4
 8003e66:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	7d1b      	ldrb	r3, [r3, #20]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d111      	bne.n	8003e94 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3318      	adds	r3, #24
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	6811      	ldr	r1, [r2, #0]
 8003e84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	440b      	add	r3, r1
 8003e90:	3304      	adds	r3, #4
 8003e92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3307      	adds	r3, #7
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	061a      	lsls	r2, r3, #24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3306      	adds	r3, #6
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3305      	adds	r3, #5
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	3204      	adds	r2, #4
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	6811      	ldr	r1, [r2, #0]
 8003ebc:	ea43 0200 	orr.w	r2, r3, r0
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	440b      	add	r3, r1
 8003ec6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003eca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3303      	adds	r3, #3
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	061a      	lsls	r2, r3, #24
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	041b      	lsls	r3, r3, #16
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	7812      	ldrb	r2, [r2, #0]
 8003eec:	4610      	mov	r0, r2
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	6811      	ldr	r1, [r2, #0]
 8003ef2:	ea43 0200 	orr.w	r2, r3, r0
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	440b      	add	r3, r1
 8003efc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003f00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3318      	adds	r3, #24
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	4413      	add	r3, r2
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	6811      	ldr	r1, [r2, #0]
 8003f14:	f043 0201 	orr.w	r2, r3, #1
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3318      	adds	r3, #24
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	440b      	add	r3, r1
 8003f20:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e00e      	b.n	8003f44 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e006      	b.n	8003f44 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3724      	adds	r7, #36	; 0x24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f62:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d002      	beq.n	8003f70 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d11d      	bne.n	8003fac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003fac:	68fb      	ldr	r3, [r7, #12]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d003      	beq.n	8003fde <HAL_CAN_GetRxMessage+0x24>
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	f040 80f3 	bne.w	80041c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10e      	bne.n	8004002 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0e7      	b.n	80041d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0d8      	b.n	80041d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	331b      	adds	r3, #27
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	4413      	add	r3, r2
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0204 	and.w	r2, r3, #4
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10c      	bne.n	8004058 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	331b      	adds	r3, #27
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	4413      	add	r3, r2
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0d5b      	lsrs	r3, r3, #21
 800404e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e00b      	b.n	8004070 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	331b      	adds	r3, #27
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	4413      	add	r3, r2
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	08db      	lsrs	r3, r3, #3
 8004068:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	331b      	adds	r3, #27
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	4413      	add	r3, r2
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0202 	and.w	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	331b      	adds	r3, #27
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	4413      	add	r3, r2
 8004092:	3304      	adds	r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	331b      	adds	r3, #27
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	331b      	adds	r3, #27
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0a1a      	lsrs	r2, r3, #8
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	4413      	add	r3, r2
 8004108:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	0c1a      	lsrs	r2, r3, #16
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	3302      	adds	r3, #2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	0e1a      	lsrs	r2, r3, #24
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	3303      	adds	r3, #3
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	4413      	add	r3, r2
 800413c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	4413      	add	r3, r2
 8004154:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0a1a      	lsrs	r2, r3, #8
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	3305      	adds	r3, #5
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	4413      	add	r3, r2
 800416e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0c1a      	lsrs	r2, r3, #16
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	3306      	adds	r3, #6
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0e1a      	lsrs	r2, r3, #24
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	3307      	adds	r3, #7
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d108      	bne.n	80041b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0220 	orr.w	r2, r2, #32
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	e007      	b.n	80041c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0220 	orr.w	r2, r2, #32
 80041be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e006      	b.n	80041d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b08a      	sub	sp, #40	; 0x28
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d07c      	beq.n	800431e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d023      	beq.n	8004276 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2201      	movs	r2, #1
 8004234:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7fc ff67 	bl	8001114 <HAL_CAN_TxMailbox0CompleteCallback>
 8004246:	e016      	b.n	8004276 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
 800425a:	e00c      	b.n	8004276 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
 800426e:	e002      	b.n	8004276 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f96b 	bl	800454c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d024      	beq.n	80042ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fc ff47 	bl	8001128 <HAL_CAN_TxMailbox1CompleteCallback>
 800429a:	e016      	b.n	80042ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d004      	beq.n	80042b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
 80042ae:	e00c      	b.n	80042ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	e002      	b.n	80042ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f94b 	bl	8004560 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d024      	beq.n	800431e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7fc ff27 	bl	800113c <HAL_CAN_TxMailbox2CompleteCallback>
 80042ee:	e016      	b.n	800431e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	e00c      	b.n	800431e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
 8004316:	e002      	b.n	800431e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f92b 	bl	8004574 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00c      	beq.n	8004342 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004338:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2210      	movs	r2, #16
 8004340:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2208      	movs	r2, #8
 800435c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f912 	bl	8004588 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fc ff71 	bl	8001264 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00c      	beq.n	80043a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2210      	movs	r2, #16
 80043a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d006      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2208      	movs	r2, #8
 80043c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8ea 	bl	800459c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fc ff4b 	bl	800127c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8d4 	bl	80045b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d006      	beq.n	800442a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2208      	movs	r2, #8
 8004422:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8cd 	bl	80045c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d07b      	beq.n	800452c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d072      	beq.n	8004524 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	f043 0302 	orr.w	r3, r3, #2
 8004474:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	f043 0304 	orr.w	r3, r3, #4
 8004490:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d043      	beq.n	8004524 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03e      	beq.n	8004524 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ac:	2b60      	cmp	r3, #96	; 0x60
 80044ae:	d02b      	beq.n	8004508 <HAL_CAN_IRQHandler+0x32a>
 80044b0:	2b60      	cmp	r3, #96	; 0x60
 80044b2:	d82e      	bhi.n	8004512 <HAL_CAN_IRQHandler+0x334>
 80044b4:	2b50      	cmp	r3, #80	; 0x50
 80044b6:	d022      	beq.n	80044fe <HAL_CAN_IRQHandler+0x320>
 80044b8:	2b50      	cmp	r3, #80	; 0x50
 80044ba:	d82a      	bhi.n	8004512 <HAL_CAN_IRQHandler+0x334>
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d019      	beq.n	80044f4 <HAL_CAN_IRQHandler+0x316>
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d826      	bhi.n	8004512 <HAL_CAN_IRQHandler+0x334>
 80044c4:	2b30      	cmp	r3, #48	; 0x30
 80044c6:	d010      	beq.n	80044ea <HAL_CAN_IRQHandler+0x30c>
 80044c8:	2b30      	cmp	r3, #48	; 0x30
 80044ca:	d822      	bhi.n	8004512 <HAL_CAN_IRQHandler+0x334>
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d002      	beq.n	80044d6 <HAL_CAN_IRQHandler+0x2f8>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d005      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80044d4:	e01d      	b.n	8004512 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	f043 0308 	orr.w	r3, r3, #8
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044de:	e019      	b.n	8004514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f043 0310 	orr.w	r3, r3, #16
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044e8:	e014      	b.n	8004514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	f043 0320 	orr.w	r3, r3, #32
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044f2:	e00f      	b.n	8004514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044fc:	e00a      	b.n	8004514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004506:	e005      	b.n	8004514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004510:	e000      	b.n	8004514 <HAL_CAN_IRQHandler+0x336>
            break;
 8004512:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004522:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2204      	movs	r2, #4
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f84a 	bl	80045d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004544:	bf00      	nop
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <__NVIC_SetPriorityGrouping+0x44>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004608:	4013      	ands	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800461e:	4a04      	ldr	r2, [pc, #16]	; (8004630 <__NVIC_SetPriorityGrouping+0x44>)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	60d3      	str	r3, [r2, #12]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <__NVIC_GetPriorityGrouping+0x18>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	0a1b      	lsrs	r3, r3, #8
 800463e:	f003 0307 	and.w	r3, r3, #7
}
 8004642:	4618      	mov	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	2b00      	cmp	r3, #0
 8004660:	db0b      	blt.n	800467a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	f003 021f 	and.w	r2, r3, #31
 8004668:	4907      	ldr	r1, [pc, #28]	; (8004688 <__NVIC_EnableIRQ+0x38>)
 800466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2001      	movs	r0, #1
 8004672:	fa00 f202 	lsl.w	r2, r0, r2
 8004676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000e100 	.word	0xe000e100

0800468c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469c:	2b00      	cmp	r3, #0
 800469e:	db0a      	blt.n	80046b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	490c      	ldr	r1, [pc, #48]	; (80046d8 <__NVIC_SetPriority+0x4c>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	0112      	lsls	r2, r2, #4
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	440b      	add	r3, r1
 80046b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b4:	e00a      	b.n	80046cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4908      	ldr	r1, [pc, #32]	; (80046dc <__NVIC_SetPriority+0x50>)
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	3b04      	subs	r3, #4
 80046c4:	0112      	lsls	r2, r2, #4
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	440b      	add	r3, r1
 80046ca:	761a      	strb	r2, [r3, #24]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000e100 	.word	0xe000e100
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	; 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f1c3 0307 	rsb	r3, r3, #7
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	bf28      	it	cs
 80046fe:	2304      	movcs	r3, #4
 8004700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3304      	adds	r3, #4
 8004706:	2b06      	cmp	r3, #6
 8004708:	d902      	bls.n	8004710 <NVIC_EncodePriority+0x30>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3b03      	subs	r3, #3
 800470e:	e000      	b.n	8004712 <NVIC_EncodePriority+0x32>
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	f04f 32ff 	mov.w	r2, #4294967295
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	401a      	ands	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004728:	f04f 31ff 	mov.w	r1, #4294967295
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa01 f303 	lsl.w	r3, r1, r3
 8004732:	43d9      	mvns	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	4313      	orrs	r3, r2
         );
}
 800473a:	4618      	mov	r0, r3
 800473c:	3724      	adds	r7, #36	; 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ff4c 	bl	80045ec <__NVIC_SetPriorityGrouping>
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800476e:	f7ff ff61 	bl	8004634 <__NVIC_GetPriorityGrouping>
 8004772:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	f7ff ffb1 	bl	80046e0 <NVIC_EncodePriority>
 800477e:	4602      	mov	r2, r0
 8004780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff80 	bl	800468c <__NVIC_SetPriority>
}
 800478c:	bf00      	nop
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff ff54 	bl	8004650 <__NVIC_EnableIRQ>
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7fe fd56 	bl	800326c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e099      	b.n	8004900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ec:	e00f      	b.n	800480e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ee:	f7fe fd3d 	bl	800326c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d908      	bls.n	800480e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2203      	movs	r2, #3
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e078      	b.n	8004900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e8      	bne.n	80047ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4b38      	ldr	r3, [pc, #224]	; (8004908 <HAL_DMA_Init+0x158>)
 8004828:	4013      	ands	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800483a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2b04      	cmp	r3, #4
 8004866:	d107      	bne.n	8004878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	4313      	orrs	r3, r2
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d117      	bne.n	80048d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fadf 	bl	8004e78 <DMA_CheckFifoParam>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2240      	movs	r2, #64	; 0x40
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ce:	2301      	movs	r3, #1
 80048d0:	e016      	b.n	8004900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa96 	bl	8004e0c <DMA_CalcBaseAndBitshift>
 80048e0:	4603      	mov	r3, r0
 80048e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	223f      	movs	r2, #63	; 0x3f
 80048ea:	409a      	lsls	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	f010803f 	.word	0xf010803f

0800490c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_DMA_Start_IT+0x26>
 800492e:	2302      	movs	r3, #2
 8004930:	e040      	b.n	80049b4 <HAL_DMA_Start_IT+0xa8>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d12f      	bne.n	80049a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fa28 	bl	8004db0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	223f      	movs	r2, #63	; 0x3f
 8004966:	409a      	lsls	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0216 	orr.w	r2, r2, #22
 800497a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0208 	orr.w	r2, r2, #8
 8004992:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e005      	b.n	80049b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049ae:	2302      	movs	r3, #2
 80049b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049ca:	f7fe fc4f 	bl	800326c <HAL_GetTick>
 80049ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d008      	beq.n	80049ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e052      	b.n	8004a94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0216 	bic.w	r2, r2, #22
 80049fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <HAL_DMA_Abort+0x62>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0208 	bic.w	r2, r2, #8
 8004a2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a3e:	e013      	b.n	8004a68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a40:	f7fe fc14 	bl	800326c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b05      	cmp	r3, #5
 8004a4c:	d90c      	bls.n	8004a68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2203      	movs	r2, #3
 8004a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e015      	b.n	8004a94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e4      	bne.n	8004a40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7a:	223f      	movs	r2, #63	; 0x3f
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004aa8:	4b8e      	ldr	r3, [pc, #568]	; (8004ce4 <HAL_DMA_IRQHandler+0x248>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a8e      	ldr	r2, [pc, #568]	; (8004ce8 <HAL_DMA_IRQHandler+0x24c>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	0a9b      	lsrs	r3, r3, #10
 8004ab4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01a      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	2208      	movs	r2, #8
 8004af6:	409a      	lsls	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	f043 0201 	orr.w	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d012      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f043 0202 	orr.w	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b42:	2204      	movs	r2, #4
 8004b44:	409a      	lsls	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d012      	beq.n	8004b74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	2204      	movs	r2, #4
 8004b62:	409a      	lsls	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	f043 0204 	orr.w	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b78:	2210      	movs	r2, #16
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d043      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d03c      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	2210      	movs	r2, #16
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d018      	beq.n	8004bde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d108      	bne.n	8004bcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d024      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	4798      	blx	r3
 8004bca:	e01f      	b.n	8004c0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
 8004bdc:	e016      	b.n	8004c0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d107      	bne.n	8004bfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0208 	bic.w	r2, r2, #8
 8004bfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	2220      	movs	r2, #32
 8004c12:	409a      	lsls	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 808f 	beq.w	8004d3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8087 	beq.w	8004d3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	2220      	movs	r2, #32
 8004c34:	409a      	lsls	r2, r3
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b05      	cmp	r3, #5
 8004c44:	d136      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0216 	bic.w	r2, r2, #22
 8004c54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <HAL_DMA_IRQHandler+0x1da>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0208 	bic.w	r2, r2, #8
 8004c84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	223f      	movs	r2, #63	; 0x3f
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d07e      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
        }
        return;
 8004cb2:	e079      	b.n	8004da8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01d      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d031      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
 8004ce0:	e02c      	b.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
 8004ce2:	bf00      	nop
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d023      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
 8004cfc:	e01e      	b.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10f      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0210 	bic.w	r2, r2, #16
 8004d1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d032      	beq.n	8004daa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d022      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2205      	movs	r2, #5
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d307      	bcc.n	8004d84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f2      	bne.n	8004d68 <HAL_DMA_IRQHandler+0x2cc>
 8004d82:	e000      	b.n	8004d86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
 8004da6:	e000      	b.n	8004daa <HAL_DMA_IRQHandler+0x30e>
        return;
 8004da8:	bf00      	nop
    }
  }
}
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d108      	bne.n	8004df0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dee:	e007      	b.n	8004e00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	3b10      	subs	r3, #16
 8004e1c:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <DMA_CalcBaseAndBitshift+0x64>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <DMA_CalcBaseAndBitshift+0x68>)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d909      	bls.n	8004e4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	1d1a      	adds	r2, r3, #4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004e4c:	e007      	b.n	8004e5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e56:	f023 0303 	bic.w	r3, r3, #3
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	aaaaaaab 	.word	0xaaaaaaab
 8004e74:	08022988 	.word	0x08022988

08004e78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d11f      	bne.n	8004ed2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d856      	bhi.n	8004f46 <DMA_CheckFifoParam+0xce>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <DMA_CheckFifoParam+0x28>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004ec3 	.word	0x08004ec3
 8004ea8:	08004eb1 	.word	0x08004eb1
 8004eac:	08004f47 	.word	0x08004f47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d046      	beq.n	8004f4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec0:	e043      	b.n	8004f4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eca:	d140      	bne.n	8004f4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed0:	e03d      	b.n	8004f4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	d121      	bne.n	8004f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d837      	bhi.n	8004f52 <DMA_CheckFifoParam+0xda>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <DMA_CheckFifoParam+0x70>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004eff 	.word	0x08004eff
 8004ef0:	08004ef9 	.word	0x08004ef9
 8004ef4:	08004f11 	.word	0x08004f11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e030      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d025      	beq.n	8004f56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0e:	e022      	b.n	8004f56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f18:	d11f      	bne.n	8004f5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f1e:	e01c      	b.n	8004f5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d903      	bls.n	8004f2e <DMA_CheckFifoParam+0xb6>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d003      	beq.n	8004f34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f2c:	e018      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	73fb      	strb	r3, [r7, #15]
      break;
 8004f32:	e015      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00e      	beq.n	8004f5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
      break;
 8004f44:	e00b      	b.n	8004f5e <DMA_CheckFifoParam+0xe6>
      break;
 8004f46:	bf00      	nop
 8004f48:	e00a      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
      break;
 8004f4a:	bf00      	nop
 8004f4c:	e008      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
      break;
 8004f4e:	bf00      	nop
 8004f50:	e006      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
      break;
 8004f52:	bf00      	nop
 8004f54:	e004      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
      break;
 8004f56:	bf00      	nop
 8004f58:	e002      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f5a:	bf00      	nop
 8004f5c:	e000      	b.n	8004f60 <DMA_CheckFifoParam+0xe8>
      break;
 8004f5e:	bf00      	nop
    }
  } 
  
  return status; 
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop

08004f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e16b      	b.n	8005264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	f040 815a 	bne.w	800525e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d005      	beq.n	8004fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d130      	bne.n	8005024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	2203      	movs	r2, #3
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f003 0201 	and.w	r2, r3, #1
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	2b03      	cmp	r3, #3
 800502e:	d017      	beq.n	8005060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	2203      	movs	r2, #3
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d123      	bne.n	80050b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	08da      	lsrs	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3208      	adds	r2, #8
 8005074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	220f      	movs	r2, #15
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	08da      	lsrs	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3208      	adds	r2, #8
 80050ae:	69b9      	ldr	r1, [r7, #24]
 80050b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	2203      	movs	r2, #3
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 0203 	and.w	r2, r3, #3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80b4 	beq.w	800525e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	4b60      	ldr	r3, [pc, #384]	; (800527c <HAL_GPIO_Init+0x30c>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	4a5f      	ldr	r2, [pc, #380]	; (800527c <HAL_GPIO_Init+0x30c>)
 8005100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005104:	6453      	str	r3, [r2, #68]	; 0x44
 8005106:	4b5d      	ldr	r3, [pc, #372]	; (800527c <HAL_GPIO_Init+0x30c>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005112:	4a5b      	ldr	r2, [pc, #364]	; (8005280 <HAL_GPIO_Init+0x310>)
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	3302      	adds	r3, #2
 800511a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	220f      	movs	r2, #15
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a52      	ldr	r2, [pc, #328]	; (8005284 <HAL_GPIO_Init+0x314>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d02b      	beq.n	8005196 <HAL_GPIO_Init+0x226>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a51      	ldr	r2, [pc, #324]	; (8005288 <HAL_GPIO_Init+0x318>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d025      	beq.n	8005192 <HAL_GPIO_Init+0x222>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a50      	ldr	r2, [pc, #320]	; (800528c <HAL_GPIO_Init+0x31c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01f      	beq.n	800518e <HAL_GPIO_Init+0x21e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a4f      	ldr	r2, [pc, #316]	; (8005290 <HAL_GPIO_Init+0x320>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d019      	beq.n	800518a <HAL_GPIO_Init+0x21a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a4e      	ldr	r2, [pc, #312]	; (8005294 <HAL_GPIO_Init+0x324>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <HAL_GPIO_Init+0x216>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a4d      	ldr	r2, [pc, #308]	; (8005298 <HAL_GPIO_Init+0x328>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00d      	beq.n	8005182 <HAL_GPIO_Init+0x212>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a4c      	ldr	r2, [pc, #304]	; (800529c <HAL_GPIO_Init+0x32c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <HAL_GPIO_Init+0x20e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a4b      	ldr	r2, [pc, #300]	; (80052a0 <HAL_GPIO_Init+0x330>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <HAL_GPIO_Init+0x20a>
 8005176:	2307      	movs	r3, #7
 8005178:	e00e      	b.n	8005198 <HAL_GPIO_Init+0x228>
 800517a:	2308      	movs	r3, #8
 800517c:	e00c      	b.n	8005198 <HAL_GPIO_Init+0x228>
 800517e:	2306      	movs	r3, #6
 8005180:	e00a      	b.n	8005198 <HAL_GPIO_Init+0x228>
 8005182:	2305      	movs	r3, #5
 8005184:	e008      	b.n	8005198 <HAL_GPIO_Init+0x228>
 8005186:	2304      	movs	r3, #4
 8005188:	e006      	b.n	8005198 <HAL_GPIO_Init+0x228>
 800518a:	2303      	movs	r3, #3
 800518c:	e004      	b.n	8005198 <HAL_GPIO_Init+0x228>
 800518e:	2302      	movs	r3, #2
 8005190:	e002      	b.n	8005198 <HAL_GPIO_Init+0x228>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <HAL_GPIO_Init+0x228>
 8005196:	2300      	movs	r3, #0
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	f002 0203 	and.w	r2, r2, #3
 800519e:	0092      	lsls	r2, r2, #2
 80051a0:	4093      	lsls	r3, r2
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a8:	4935      	ldr	r1, [pc, #212]	; (8005280 <HAL_GPIO_Init+0x310>)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	089b      	lsrs	r3, r3, #2
 80051ae:	3302      	adds	r3, #2
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051b6:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <HAL_GPIO_Init+0x334>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	43db      	mvns	r3, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4013      	ands	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051da:	4a32      	ldr	r2, [pc, #200]	; (80052a4 <HAL_GPIO_Init+0x334>)
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051e0:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <HAL_GPIO_Init+0x334>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005204:	4a27      	ldr	r2, [pc, #156]	; (80052a4 <HAL_GPIO_Init+0x334>)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800520a:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <HAL_GPIO_Init+0x334>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	43db      	mvns	r3, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800522e:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <HAL_GPIO_Init+0x334>)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005234:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <HAL_GPIO_Init+0x334>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005258:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <HAL_GPIO_Init+0x334>)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	3301      	adds	r3, #1
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b0f      	cmp	r3, #15
 8005268:	f67f ae90 	bls.w	8004f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	3724      	adds	r7, #36	; 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800
 8005280:	40013800 	.word	0x40013800
 8005284:	40020000 	.word	0x40020000
 8005288:	40020400 	.word	0x40020400
 800528c:	40020800 	.word	0x40020800
 8005290:	40020c00 	.word	0x40020c00
 8005294:	40021000 	.word	0x40021000
 8005298:	40021400 	.word	0x40021400
 800529c:	40021800 	.word	0x40021800
 80052a0:	40021c00 	.word	0x40021c00
 80052a4:	40013c00 	.word	0x40013c00

080052a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
 80052b4:	4613      	mov	r3, r2
 80052b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052b8:	787b      	ldrb	r3, [r7, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052c4:	e003      	b.n	80052ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052c6:	887b      	ldrh	r3, [r7, #2]
 80052c8:	041a      	lsls	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	619a      	str	r2, [r3, #24]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e12b      	b.n	8005546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd fad2 	bl	80028ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800532e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800533e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005340:	f000 fe9e 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 8005344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4a81      	ldr	r2, [pc, #516]	; (8005550 <HAL_I2C_Init+0x274>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d807      	bhi.n	8005360 <HAL_I2C_Init+0x84>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a80      	ldr	r2, [pc, #512]	; (8005554 <HAL_I2C_Init+0x278>)
 8005354:	4293      	cmp	r3, r2
 8005356:	bf94      	ite	ls
 8005358:	2301      	movls	r3, #1
 800535a:	2300      	movhi	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e006      	b.n	800536e <HAL_I2C_Init+0x92>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a7d      	ldr	r2, [pc, #500]	; (8005558 <HAL_I2C_Init+0x27c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	bf94      	ite	ls
 8005368:	2301      	movls	r3, #1
 800536a:	2300      	movhi	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e0e7      	b.n	8005546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a78      	ldr	r2, [pc, #480]	; (800555c <HAL_I2C_Init+0x280>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	0c9b      	lsrs	r3, r3, #18
 8005380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a6a      	ldr	r2, [pc, #424]	; (8005550 <HAL_I2C_Init+0x274>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d802      	bhi.n	80053b0 <HAL_I2C_Init+0xd4>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3301      	adds	r3, #1
 80053ae:	e009      	b.n	80053c4 <HAL_I2C_Init+0xe8>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	4a69      	ldr	r2, [pc, #420]	; (8005560 <HAL_I2C_Init+0x284>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	099b      	lsrs	r3, r3, #6
 80053c2:	3301      	adds	r3, #1
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	495c      	ldr	r1, [pc, #368]	; (8005550 <HAL_I2C_Init+0x274>)
 80053e0:	428b      	cmp	r3, r1
 80053e2:	d819      	bhi.n	8005418 <HAL_I2C_Init+0x13c>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1e59      	subs	r1, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053f8:	400b      	ands	r3, r1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_I2C_Init+0x138>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1e59      	subs	r1, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	fbb1 f3f3 	udiv	r3, r1, r3
 800540c:	3301      	adds	r3, #1
 800540e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005412:	e051      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005414:	2304      	movs	r3, #4
 8005416:	e04f      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d111      	bne.n	8005444 <HAL_I2C_Init+0x168>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1e58      	subs	r0, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	440b      	add	r3, r1
 800542e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005432:	3301      	adds	r3, #1
 8005434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	e012      	b.n	800546a <HAL_I2C_Init+0x18e>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1e58      	subs	r0, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	0099      	lsls	r1, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	fbb0 f3f3 	udiv	r3, r0, r3
 800545a:	3301      	adds	r3, #1
 800545c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_I2C_Init+0x196>
 800546e:	2301      	movs	r3, #1
 8005470:	e022      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10e      	bne.n	8005498 <HAL_I2C_Init+0x1bc>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1e58      	subs	r0, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6859      	ldr	r1, [r3, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	440b      	add	r3, r1
 8005488:	fbb0 f3f3 	udiv	r3, r0, r3
 800548c:	3301      	adds	r3, #1
 800548e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005496:	e00f      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1e58      	subs	r0, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6859      	ldr	r1, [r3, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	0099      	lsls	r1, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ae:	3301      	adds	r3, #1
 80054b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	6809      	ldr	r1, [r1, #0]
 80054bc:	4313      	orrs	r3, r2
 80054be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6911      	ldr	r1, [r2, #16]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68d2      	ldr	r2, [r2, #12]
 80054f2:	4311      	orrs	r1, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	000186a0 	.word	0x000186a0
 8005554:	001e847f 	.word	0x001e847f
 8005558:	003d08ff 	.word	0x003d08ff
 800555c:	431bde83 	.word	0x431bde83
 8005560:	10624dd3 	.word	0x10624dd3

08005564 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005566:	b08f      	sub	sp, #60	; 0x3c
 8005568:	af0a      	add	r7, sp, #40	; 0x28
 800556a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e10f      	b.n	8005796 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7fd fbed 	bl	8002d70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2203      	movs	r2, #3
 800559a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f002 f9de 	bl	8007976 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	687e      	ldr	r6, [r7, #4]
 80055c2:	466d      	mov	r5, sp
 80055c4:	f106 0410 	add.w	r4, r6, #16
 80055c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80055d8:	1d33      	adds	r3, r6, #4
 80055da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055dc:	6838      	ldr	r0, [r7, #0]
 80055de:	f002 f969 	bl	80078b4 <USB_CoreInit>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0d0      	b.n	8005796 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f002 f9cc 	bl	8007998 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005600:	2300      	movs	r3, #0
 8005602:	73fb      	strb	r3, [r7, #15]
 8005604:	e04a      	b.n	800569c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005606:	7bfa      	ldrb	r2, [r7, #15]
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	333d      	adds	r3, #61	; 0x3d
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	333c      	adds	r3, #60	; 0x3c
 800562a:	7bfa      	ldrb	r2, [r7, #15]
 800562c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800562e:	7bfa      	ldrb	r2, [r7, #15]
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	b298      	uxth	r0, r3
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	3344      	adds	r3, #68	; 0x44
 8005642:	4602      	mov	r2, r0
 8005644:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3340      	adds	r3, #64	; 0x40
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	3348      	adds	r3, #72	; 0x48
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800566e:	7bfa      	ldrb	r2, [r7, #15]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	334c      	adds	r3, #76	; 0x4c
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	3354      	adds	r3, #84	; 0x54
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	3301      	adds	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d3af      	bcc.n	8005606 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
 80056aa:	e044      	b.n	8005736 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056ac:	7bfa      	ldrb	r2, [r7, #15]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80056d4:	7bfa      	ldrb	r2, [r7, #15]
 80056d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056d8:	7bfa      	ldrb	r2, [r7, #15]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800571a:	7bfa      	ldrb	r2, [r7, #15]
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	3301      	adds	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d3b5      	bcc.n	80056ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	603b      	str	r3, [r7, #0]
 8005746:	687e      	ldr	r6, [r7, #4]
 8005748:	466d      	mov	r5, sp
 800574a:	f106 0410 	add.w	r4, r6, #16
 800574e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005756:	e894 0003 	ldmia.w	r4, {r0, r1}
 800575a:	e885 0003 	stmia.w	r5, {r0, r1}
 800575e:	1d33      	adds	r3, r6, #4
 8005760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005762:	6838      	ldr	r0, [r7, #0]
 8005764:	f002 f964 	bl	8007a30 <USB_DevInit>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e00d      	b.n	8005796 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f002 fb2f 	bl	8007df2 <USB_DevDisconnect>

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080057a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e267      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d075      	beq.n	80058aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057be:	4b88      	ldr	r3, [pc, #544]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d00c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ca:	4b85      	ldr	r3, [pc, #532]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d112      	bne.n	80057fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057d6:	4b82      	ldr	r3, [pc, #520]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e2:	d10b      	bne.n	80057fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	4b7e      	ldr	r3, [pc, #504]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d05b      	beq.n	80058a8 <HAL_RCC_OscConfig+0x108>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d157      	bne.n	80058a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e242      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d106      	bne.n	8005814 <HAL_RCC_OscConfig+0x74>
 8005806:	4b76      	ldr	r3, [pc, #472]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a75      	ldr	r2, [pc, #468]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e01d      	b.n	8005850 <HAL_RCC_OscConfig+0xb0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800581c:	d10c      	bne.n	8005838 <HAL_RCC_OscConfig+0x98>
 800581e:	4b70      	ldr	r3, [pc, #448]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6f      	ldr	r2, [pc, #444]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b6d      	ldr	r3, [pc, #436]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a6c      	ldr	r2, [pc, #432]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e00b      	b.n	8005850 <HAL_RCC_OscConfig+0xb0>
 8005838:	4b69      	ldr	r3, [pc, #420]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a68      	ldr	r2, [pc, #416]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 800583e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4b66      	ldr	r3, [pc, #408]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a65      	ldr	r2, [pc, #404]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 800584a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800584e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d013      	beq.n	8005880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fd fd08 	bl	800326c <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005860:	f7fd fd04 	bl	800326c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	; 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e207      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005872:	4b5b      	ldr	r3, [pc, #364]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0xc0>
 800587e:	e014      	b.n	80058aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fd fcf4 	bl	800326c <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005888:	f7fd fcf0 	bl	800326c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	; 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e1f3      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589a:	4b51      	ldr	r3, [pc, #324]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0xe8>
 80058a6:	e000      	b.n	80058aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d063      	beq.n	800597e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058b6:	4b4a      	ldr	r3, [pc, #296]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058c2:	4b47      	ldr	r3, [pc, #284]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d11c      	bne.n	8005908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ce:	4b44      	ldr	r3, [pc, #272]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d116      	bne.n	8005908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058da:	4b41      	ldr	r3, [pc, #260]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_RCC_OscConfig+0x152>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e1c7      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f2:	4b3b      	ldr	r3, [pc, #236]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4937      	ldr	r1, [pc, #220]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005906:	e03a      	b.n	800597e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d020      	beq.n	8005952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005910:	4b34      	ldr	r3, [pc, #208]	; (80059e4 <HAL_RCC_OscConfig+0x244>)
 8005912:	2201      	movs	r2, #1
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fd fca9 	bl	800326c <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800591e:	f7fd fca5 	bl	800326c <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e1a8      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005930:	4b2b      	ldr	r3, [pc, #172]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593c:	4b28      	ldr	r3, [pc, #160]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4925      	ldr	r1, [pc, #148]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]
 8005950:	e015      	b.n	800597e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005952:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <HAL_RCC_OscConfig+0x244>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fd fc88 	bl	800326c <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005960:	f7fd fc84 	bl	800326c <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e187      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005972:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d036      	beq.n	80059f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <HAL_RCC_OscConfig+0x248>)
 8005994:	2201      	movs	r2, #1
 8005996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005998:	f7fd fc68 	bl	800326c <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059a0:	f7fd fc64 	bl	800326c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e167      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b2:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <HAL_RCC_OscConfig+0x240>)
 80059b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0x200>
 80059be:	e01b      	b.n	80059f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_RCC_OscConfig+0x248>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059c6:	f7fd fc51 	bl	800326c <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	e00e      	b.n	80059ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ce:	f7fd fc4d 	bl	800326c <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d907      	bls.n	80059ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e150      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
 80059e0:	40023800 	.word	0x40023800
 80059e4:	42470000 	.word	0x42470000
 80059e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ec:	4b88      	ldr	r3, [pc, #544]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 80059ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ea      	bne.n	80059ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8097 	beq.w	8005b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0a:	4b81      	ldr	r3, [pc, #516]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10f      	bne.n	8005a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	4b7d      	ldr	r3, [pc, #500]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	4a7c      	ldr	r2, [pc, #496]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6413      	str	r3, [r2, #64]	; 0x40
 8005a26:	4b7a      	ldr	r3, [pc, #488]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a36:	4b77      	ldr	r3, [pc, #476]	; (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d118      	bne.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a42:	4b74      	ldr	r3, [pc, #464]	; (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a73      	ldr	r2, [pc, #460]	; (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a4e:	f7fd fc0d 	bl	800326c <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a56:	f7fd fc09 	bl	800326c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e10c      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a68:	4b6a      	ldr	r3, [pc, #424]	; (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCC_OscConfig+0x2ea>
 8005a7c:	4b64      	ldr	r3, [pc, #400]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	4a63      	ldr	r2, [pc, #396]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	6713      	str	r3, [r2, #112]	; 0x70
 8005a88:	e01c      	b.n	8005ac4 <HAL_RCC_OscConfig+0x324>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d10c      	bne.n	8005aac <HAL_RCC_OscConfig+0x30c>
 8005a92:	4b5f      	ldr	r3, [pc, #380]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	4a5e      	ldr	r2, [pc, #376]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a98:	f043 0304 	orr.w	r3, r3, #4
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9e:	4b5c      	ldr	r3, [pc, #368]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	4a5b      	ldr	r2, [pc, #364]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aaa:	e00b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x324>
 8005aac:	4b58      	ldr	r3, [pc, #352]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	4a57      	ldr	r2, [pc, #348]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab8:	4b55      	ldr	r3, [pc, #340]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	4a54      	ldr	r2, [pc, #336]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005abe:	f023 0304 	bic.w	r3, r3, #4
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d015      	beq.n	8005af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fd fbce 	bl	800326c <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fd fbca 	bl	800326c <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e0cb      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aea:	4b49      	ldr	r3, [pc, #292]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ee      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x334>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af8:	f7fd fbb8 	bl	800326c <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b00:	f7fd fbb4 	bl	800326c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0b5      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b16:	4b3e      	ldr	r3, [pc, #248]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1ee      	bne.n	8005b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b28:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	4a38      	ldr	r2, [pc, #224]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80a1 	beq.w	8005c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b3e:	4b34      	ldr	r3, [pc, #208]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d05c      	beq.n	8005c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d141      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b52:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b58:	f7fd fb88 	bl	800326c <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fd fb84 	bl	800326c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e087      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b72:	4b27      	ldr	r3, [pc, #156]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f0      	bne.n	8005b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69da      	ldr	r2, [r3, #28]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	019b      	lsls	r3, r3, #6
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	3b01      	subs	r3, #1
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	061b      	lsls	r3, r3, #24
 8005ba2:	491b      	ldr	r1, [pc, #108]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bae:	f7fd fb5d 	bl	800326c <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb6:	f7fd fb59 	bl	800326c <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e05c      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f0      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x416>
 8005bd4:	e054      	b.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fd fb46 	bl	800326c <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be4:	f7fd fb42 	bl	800326c <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e045      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x444>
 8005c02:	e03d      	b.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d107      	bne.n	8005c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e038      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40007000 	.word	0x40007000
 8005c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <HAL_RCC_OscConfig+0x4ec>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d028      	beq.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d121      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d11a      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d111      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	3b01      	subs	r3, #1
 8005c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d107      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d001      	beq.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800

08005c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0cc      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b68      	ldr	r3, [pc, #416]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d90c      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b65      	ldr	r3, [pc, #404]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	4b63      	ldr	r3, [pc, #396]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0b8      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce4:	4b59      	ldr	r3, [pc, #356]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a58      	ldr	r2, [pc, #352]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cfc:	4b53      	ldr	r3, [pc, #332]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a52      	ldr	r2, [pc, #328]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b50      	ldr	r3, [pc, #320]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	494d      	ldr	r1, [pc, #308]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d044      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d119      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4e:	4b3f      	ldr	r3, [pc, #252]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e06f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5e:	4b3b      	ldr	r3, [pc, #236]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e067      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6e:	4b37      	ldr	r3, [pc, #220]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4934      	ldr	r1, [pc, #208]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d80:	f7fd fa74 	bl	800326c <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d88:	f7fd fa70 	bl	800326c <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e04f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	4b2b      	ldr	r3, [pc, #172]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 020c 	and.w	r2, r3, #12
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1eb      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d20c      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b22      	ldr	r3, [pc, #136]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e032      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4916      	ldr	r1, [pc, #88]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e02:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490e      	ldr	r1, [pc, #56]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e16:	f000 f821 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	490a      	ldr	r1, [pc, #40]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	5ccb      	ldrb	r3, [r1, r3]
 8005e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fc fff4 	bl	8002e24 <HAL_InitTick>

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023c00 	.word	0x40023c00
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	08022970 	.word	0x08022970
 8005e54:	20000000 	.word	0x20000000
 8005e58:	20000004 	.word	0x20000004

08005e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e60:	b094      	sub	sp, #80	; 0x50
 8005e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	647b      	str	r3, [r7, #68]	; 0x44
 8005e68:	2300      	movs	r3, #0
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e74:	4b79      	ldr	r3, [pc, #484]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 030c 	and.w	r3, r3, #12
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d00d      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x40>
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	f200 80e1 	bhi.w	8006048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_RCC_GetSysClockFreq+0x34>
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e8e:	e0db      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e90:	4b73      	ldr	r3, [pc, #460]	; (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e94:	e0db      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e96:	4b73      	ldr	r3, [pc, #460]	; (8006064 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e9a:	e0d8      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e9c:	4b6f      	ldr	r3, [pc, #444]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ea6:	4b6d      	ldr	r3, [pc, #436]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d063      	beq.n	8005f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	2200      	movs	r2, #0
 8005eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f04f 0100 	mov.w	r1, #0
 8005eda:	0159      	lsls	r1, r3, #5
 8005edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ee0:	0150      	lsls	r0, r2, #5
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	1a51      	subs	r1, r2, r1
 8005eea:	6139      	str	r1, [r7, #16]
 8005eec:	4629      	mov	r1, r5
 8005eee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f00:	4659      	mov	r1, fp
 8005f02:	018b      	lsls	r3, r1, #6
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	018a      	lsls	r2, r1, #6
 8005f0e:	4651      	mov	r1, sl
 8005f10:	ebb2 0801 	subs.w	r8, r2, r1
 8005f14:	4659      	mov	r1, fp
 8005f16:	eb63 0901 	sbc.w	r9, r3, r1
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f2e:	4690      	mov	r8, r2
 8005f30:	4699      	mov	r9, r3
 8005f32:	4623      	mov	r3, r4
 8005f34:	eb18 0303 	adds.w	r3, r8, r3
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	eb49 0303 	adc.w	r3, r9, r3
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f4e:	4629      	mov	r1, r5
 8005f50:	024b      	lsls	r3, r1, #9
 8005f52:	4621      	mov	r1, r4
 8005f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f58:	4621      	mov	r1, r4
 8005f5a:	024a      	lsls	r2, r1, #9
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f62:	2200      	movs	r2, #0
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f6c:	f7fa fe7c 	bl	8000c68 <__aeabi_uldivmod>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4613      	mov	r3, r2
 8005f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f78:	e058      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f7a:	4b38      	ldr	r3, [pc, #224]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	099b      	lsrs	r3, r3, #6
 8005f80:	2200      	movs	r2, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	4611      	mov	r1, r2
 8005f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f8a:	623b      	str	r3, [r7, #32]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	f04f 0000 	mov.w	r0, #0
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	0159      	lsls	r1, r3, #5
 8005fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fa6:	0150      	lsls	r0, r2, #5
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4641      	mov	r1, r8
 8005fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8005fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	00eb      	lsls	r3, r5, #3
 8005fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fe2:	00e2      	lsls	r2, r4, #3
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	4643      	mov	r3, r8
 8005fea:	18e3      	adds	r3, r4, r3
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	464b      	mov	r3, r9
 8005ff0:	eb45 0303 	adc.w	r3, r5, r3
 8005ff4:	607b      	str	r3, [r7, #4]
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006002:	4629      	mov	r1, r5
 8006004:	028b      	lsls	r3, r1, #10
 8006006:	4621      	mov	r1, r4
 8006008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800600c:	4621      	mov	r1, r4
 800600e:	028a      	lsls	r2, r1, #10
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006016:	2200      	movs	r2, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	61fa      	str	r2, [r7, #28]
 800601c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006020:	f7fa fe22 	bl	8000c68 <__aeabi_uldivmod>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4613      	mov	r3, r2
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	3301      	adds	r3, #1
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800603c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800603e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006046:	e002      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 800604a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800604c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800604e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006050:	4618      	mov	r0, r3
 8006052:	3750      	adds	r7, #80	; 0x50
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800
 8006060:	00f42400 	.word	0x00f42400
 8006064:	007a1200 	.word	0x007a1200

08006068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <HAL_RCC_GetHCLKFreq+0x14>)
 800606e:	681b      	ldr	r3, [r3, #0]
}
 8006070:	4618      	mov	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	20000000 	.word	0x20000000

08006080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006084:	f7ff fff0 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 8006088:	4602      	mov	r2, r0
 800608a:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	0a9b      	lsrs	r3, r3, #10
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	4903      	ldr	r1, [pc, #12]	; (80060a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006096:	5ccb      	ldrb	r3, [r1, r3]
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40023800 	.word	0x40023800
 80060a4:	08022980 	.word	0x08022980

080060a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060ac:	f7ff ffdc 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0b5b      	lsrs	r3, r3, #13
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	; (80060cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	08022980 	.word	0x08022980

080060d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	220f      	movs	r2, #15
 80060de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060e0:	4b12      	ldr	r3, [pc, #72]	; (800612c <HAL_RCC_GetClockConfig+0x5c>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0203 	and.w	r2, r3, #3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <HAL_RCC_GetClockConfig+0x5c>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_RCC_GetClockConfig+0x5c>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCC_GetClockConfig+0x5c>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	08db      	lsrs	r3, r3, #3
 800610a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <HAL_RCC_GetClockConfig+0x60>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0207 	and.w	r2, r3, #7
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40023800 	.word	0x40023800
 8006130:	40023c00 	.word	0x40023c00

08006134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e041      	b.n	80061ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fc fbee 	bl	800293c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f000 fcea 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d001      	beq.n	80061ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e04e      	b.n	800628a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a23      	ldr	r2, [pc, #140]	; (8006298 <HAL_TIM_Base_Start_IT+0xc4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d022      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x80>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006216:	d01d      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x80>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1f      	ldr	r2, [pc, #124]	; (800629c <HAL_TIM_Base_Start_IT+0xc8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d018      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x80>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d013      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x80>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00e      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x80>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d009      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x80>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a19      	ldr	r2, [pc, #100]	; (80062ac <HAL_TIM_Base_Start_IT+0xd8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x80>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d111      	bne.n	8006278 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b06      	cmp	r3, #6
 8006264:	d010      	beq.n	8006288 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006276:	e007      	b.n	8006288 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40010000 	.word	0x40010000
 800629c:	40000400 	.word	0x40000400
 80062a0:	40000800 	.word	0x40000800
 80062a4:	40000c00 	.word	0x40000c00
 80062a8:	40010400 	.word	0x40010400
 80062ac:	40014000 	.word	0x40014000
 80062b0:	40001800 	.word	0x40001800

080062b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e041      	b.n	800634a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f839 	bl	8006352 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 fc2a 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_TIM_PWM_Start+0x24>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e022      	b.n	80063d2 <HAL_TIM_PWM_Start+0x6a>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b04      	cmp	r3, #4
 8006390:	d109      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x3e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b01      	cmp	r3, #1
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	e015      	b.n	80063d2 <HAL_TIM_PWM_Start+0x6a>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d109      	bne.n	80063c0 <HAL_TIM_PWM_Start+0x58>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e008      	b.n	80063d2 <HAL_TIM_PWM_Start+0x6a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	bf14      	ite	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2300      	moveq	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e07c      	b.n	80064d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <HAL_TIM_PWM_Start+0x82>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e8:	e013      	b.n	8006412 <HAL_TIM_PWM_Start+0xaa>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d104      	bne.n	80063fa <HAL_TIM_PWM_Start+0x92>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f8:	e00b      	b.n	8006412 <HAL_TIM_PWM_Start+0xaa>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d104      	bne.n	800640a <HAL_TIM_PWM_Start+0xa2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006408:	e003      	b.n	8006412 <HAL_TIM_PWM_Start+0xaa>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2201      	movs	r2, #1
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fe80 	bl	8007120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2d      	ldr	r2, [pc, #180]	; (80064dc <HAL_TIM_PWM_Start+0x174>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_TIM_PWM_Start+0xcc>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <HAL_TIM_PWM_Start+0x178>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d101      	bne.n	8006438 <HAL_TIM_PWM_Start+0xd0>
 8006434:	2301      	movs	r3, #1
 8006436:	e000      	b.n	800643a <HAL_TIM_PWM_Start+0xd2>
 8006438:	2300      	movs	r3, #0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a22      	ldr	r2, [pc, #136]	; (80064dc <HAL_TIM_PWM_Start+0x174>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d022      	beq.n	800649e <HAL_TIM_PWM_Start+0x136>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006460:	d01d      	beq.n	800649e <HAL_TIM_PWM_Start+0x136>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1f      	ldr	r2, [pc, #124]	; (80064e4 <HAL_TIM_PWM_Start+0x17c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d018      	beq.n	800649e <HAL_TIM_PWM_Start+0x136>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <HAL_TIM_PWM_Start+0x180>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <HAL_TIM_PWM_Start+0x136>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1c      	ldr	r2, [pc, #112]	; (80064ec <HAL_TIM_PWM_Start+0x184>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_TIM_PWM_Start+0x136>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a16      	ldr	r2, [pc, #88]	; (80064e0 <HAL_TIM_PWM_Start+0x178>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_TIM_PWM_Start+0x136>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <HAL_TIM_PWM_Start+0x188>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIM_PWM_Start+0x136>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <HAL_TIM_PWM_Start+0x18c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d111      	bne.n	80064c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b06      	cmp	r3, #6
 80064ae:	d010      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c0:	e007      	b.n	80064d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40010400 	.word	0x40010400
 80064e4:	40000400 	.word	0x40000400
 80064e8:	40000800 	.word	0x40000800
 80064ec:	40000c00 	.word	0x40000c00
 80064f0:	40014000 	.word	0x40014000
 80064f4:	40001800 	.word	0x40001800

080064f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fe08 	bl	8007120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <HAL_TIM_PWM_Stop+0xd8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <HAL_TIM_PWM_Stop+0x2c>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <HAL_TIM_PWM_Stop+0xdc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d101      	bne.n	8006528 <HAL_TIM_PWM_Stop+0x30>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <HAL_TIM_PWM_Stop+0x32>
 8006528:	2300      	movs	r3, #0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d017      	beq.n	800655e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	f241 1311 	movw	r3, #4369	; 0x1111
 8006538:	4013      	ands	r3, r2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10f      	bne.n	800655e <HAL_TIM_PWM_Stop+0x66>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	f240 4344 	movw	r3, #1092	; 0x444
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d107      	bne.n	800655e <HAL_TIM_PWM_Stop+0x66>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a1a      	ldr	r2, [r3, #32]
 8006564:	f241 1311 	movw	r3, #4369	; 0x1111
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <HAL_TIM_PWM_Stop+0x96>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a1a      	ldr	r2, [r3, #32]
 8006574:	f240 4344 	movw	r3, #1092	; 0x444
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <HAL_TIM_PWM_Stop+0x96>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0201 	bic.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Stop+0xa6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800659c:	e013      	b.n	80065c6 <HAL_TIM_PWM_Stop+0xce>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Stop+0xb6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ac:	e00b      	b.n	80065c6 <HAL_TIM_PWM_Stop+0xce>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Stop+0xc6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065bc:	e003      	b.n	80065c6 <HAL_TIM_PWM_Stop+0xce>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40010400 	.word	0x40010400

080065d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d122      	bne.n	8006634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d11b      	bne.n	8006634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0202 	mvn.w	r2, #2
 8006604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa77 	bl	8006b0e <HAL_TIM_IC_CaptureCallback>
 8006620:	e005      	b.n	800662e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa69 	bl	8006afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fa7a 	bl	8006b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b04      	cmp	r3, #4
 8006640:	d122      	bne.n	8006688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b04      	cmp	r3, #4
 800664e:	d11b      	bne.n	8006688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0204 	mvn.w	r2, #4
 8006658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa4d 	bl	8006b0e <HAL_TIM_IC_CaptureCallback>
 8006674:	e005      	b.n	8006682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa3f 	bl	8006afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa50 	bl	8006b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b08      	cmp	r3, #8
 8006694:	d122      	bne.n	80066dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d11b      	bne.n	80066dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0208 	mvn.w	r2, #8
 80066ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2204      	movs	r2, #4
 80066b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa23 	bl	8006b0e <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa15 	bl	8006afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa26 	bl	8006b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d122      	bne.n	8006730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b10      	cmp	r3, #16
 80066f6:	d11b      	bne.n	8006730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0210 	mvn.w	r2, #16
 8006700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2208      	movs	r2, #8
 8006706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9f9 	bl	8006b0e <HAL_TIM_IC_CaptureCallback>
 800671c:	e005      	b.n	800672a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f9eb 	bl	8006afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f9fc 	bl	8006b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	d10e      	bne.n	800675c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b01      	cmp	r3, #1
 800674a:	d107      	bne.n	800675c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0201 	mvn.w	r2, #1
 8006754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fb fe50 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d10e      	bne.n	8006788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006774:	2b80      	cmp	r3, #128	; 0x80
 8006776:	d107      	bne.n	8006788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fdca 	bl	800731c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d10e      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d107      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f9c1 	bl	8006b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d10e      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d107      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0220 	mvn.w	r2, #32
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fd94 	bl	8007308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006802:	2302      	movs	r3, #2
 8006804:	e0ae      	b.n	8006964 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b0c      	cmp	r3, #12
 8006812:	f200 809f 	bhi.w	8006954 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	08006851 	.word	0x08006851
 8006820:	08006955 	.word	0x08006955
 8006824:	08006955 	.word	0x08006955
 8006828:	08006955 	.word	0x08006955
 800682c:	08006891 	.word	0x08006891
 8006830:	08006955 	.word	0x08006955
 8006834:	08006955 	.word	0x08006955
 8006838:	08006955 	.word	0x08006955
 800683c:	080068d3 	.word	0x080068d3
 8006840:	08006955 	.word	0x08006955
 8006844:	08006955 	.word	0x08006955
 8006848:	08006955 	.word	0x08006955
 800684c:	08006913 	.word	0x08006913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fa18 	bl	8006c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0208 	orr.w	r2, r2, #8
 800686a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699a      	ldr	r2, [r3, #24]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0204 	bic.w	r2, r2, #4
 800687a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6999      	ldr	r1, [r3, #24]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	691a      	ldr	r2, [r3, #16]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	619a      	str	r2, [r3, #24]
      break;
 800688e:	e064      	b.n	800695a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fa68 	bl	8006d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699a      	ldr	r2, [r3, #24]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6999      	ldr	r1, [r3, #24]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	021a      	lsls	r2, r3, #8
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	619a      	str	r2, [r3, #24]
      break;
 80068d0:	e043      	b.n	800695a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fabd 	bl	8006e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0208 	orr.w	r2, r2, #8
 80068ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69da      	ldr	r2, [r3, #28]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0204 	bic.w	r2, r2, #4
 80068fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69d9      	ldr	r1, [r3, #28]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	61da      	str	r2, [r3, #28]
      break;
 8006910:	e023      	b.n	800695a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fb11 	bl	8006f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800692c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69d9      	ldr	r1, [r3, #28]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	021a      	lsls	r2, r3, #8
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	61da      	str	r2, [r3, #28]
      break;
 8006952:	e002      	b.n	800695a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
      break;
 8006958:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006962:	7dfb      	ldrb	r3, [r7, #23]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_TIM_ConfigClockSource+0x1c>
 8006984:	2302      	movs	r3, #2
 8006986:	e0b4      	b.n	8006af2 <HAL_TIM_ConfigClockSource+0x186>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c0:	d03e      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0xd4>
 80069c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c6:	f200 8087 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ce:	f000 8086 	beq.w	8006ade <HAL_TIM_ConfigClockSource+0x172>
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	d87f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069d8:	2b70      	cmp	r3, #112	; 0x70
 80069da:	d01a      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0xa6>
 80069dc:	2b70      	cmp	r3, #112	; 0x70
 80069de:	d87b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e0:	2b60      	cmp	r3, #96	; 0x60
 80069e2:	d050      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x11a>
 80069e4:	2b60      	cmp	r3, #96	; 0x60
 80069e6:	d877      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e8:	2b50      	cmp	r3, #80	; 0x50
 80069ea:	d03c      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0xfa>
 80069ec:	2b50      	cmp	r3, #80	; 0x50
 80069ee:	d873      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d058      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d86f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b30      	cmp	r3, #48	; 0x30
 80069fa:	d064      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d86b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d060      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d867      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d05c      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d05a      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a10:	e062      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6899      	ldr	r1, [r3, #8]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f000 fb5d 	bl	80070e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	609a      	str	r2, [r3, #8]
      break;
 8006a3e:	e04f      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f000 fb46 	bl	80070e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a62:	609a      	str	r2, [r3, #8]
      break;
 8006a64:	e03c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f000 faba 	bl	8006fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2150      	movs	r1, #80	; 0x50
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fb13 	bl	80070aa <TIM_ITRx_SetConfig>
      break;
 8006a84:	e02c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6859      	ldr	r1, [r3, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f000 fad9 	bl	800704a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2160      	movs	r1, #96	; 0x60
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fb03 	bl	80070aa <TIM_ITRx_SetConfig>
      break;
 8006aa4:	e01c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f000 fa9a 	bl	8006fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 faf3 	bl	80070aa <TIM_ITRx_SetConfig>
      break;
 8006ac4:	e00c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f000 faea 	bl	80070aa <TIM_ITRx_SetConfig>
      break;
 8006ad6:	e003      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
      break;
 8006adc:	e000      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a40      	ldr	r2, [pc, #256]	; (8006c60 <TIM_Base_SetConfig+0x114>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6a:	d00f      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a3d      	ldr	r2, [pc, #244]	; (8006c64 <TIM_Base_SetConfig+0x118>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00b      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a3c      	ldr	r2, [pc, #240]	; (8006c68 <TIM_Base_SetConfig+0x11c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a3b      	ldr	r2, [pc, #236]	; (8006c6c <TIM_Base_SetConfig+0x120>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3a      	ldr	r2, [pc, #232]	; (8006c70 <TIM_Base_SetConfig+0x124>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d108      	bne.n	8006b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a2f      	ldr	r2, [pc, #188]	; (8006c60 <TIM_Base_SetConfig+0x114>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d02b      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bac:	d027      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a2c      	ldr	r2, [pc, #176]	; (8006c64 <TIM_Base_SetConfig+0x118>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d023      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a2b      	ldr	r2, [pc, #172]	; (8006c68 <TIM_Base_SetConfig+0x11c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d01f      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2a      	ldr	r2, [pc, #168]	; (8006c6c <TIM_Base_SetConfig+0x120>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01b      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a29      	ldr	r2, [pc, #164]	; (8006c70 <TIM_Base_SetConfig+0x124>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d017      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a28      	ldr	r2, [pc, #160]	; (8006c74 <TIM_Base_SetConfig+0x128>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <TIM_Base_SetConfig+0x12c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00f      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a26      	ldr	r2, [pc, #152]	; (8006c7c <TIM_Base_SetConfig+0x130>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a25      	ldr	r2, [pc, #148]	; (8006c80 <TIM_Base_SetConfig+0x134>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a24      	ldr	r2, [pc, #144]	; (8006c84 <TIM_Base_SetConfig+0x138>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a23      	ldr	r2, [pc, #140]	; (8006c88 <TIM_Base_SetConfig+0x13c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d108      	bne.n	8006c10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <TIM_Base_SetConfig+0x114>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_Base_SetConfig+0xf8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <TIM_Base_SetConfig+0x124>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d103      	bne.n	8006c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	615a      	str	r2, [r3, #20]
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40010400 	.word	0x40010400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40014400 	.word	0x40014400
 8006c7c:	40014800 	.word	0x40014800
 8006c80:	40001800 	.word	0x40001800
 8006c84:	40001c00 	.word	0x40001c00
 8006c88:	40002000 	.word	0x40002000

08006c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f023 0201 	bic.w	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 0302 	bic.w	r3, r3, #2
 8006cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <TIM_OC1_SetConfig+0xd8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC1_SetConfig+0x64>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <TIM_OC1_SetConfig+0xdc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10c      	bne.n	8006d0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f023 0308 	bic.w	r3, r3, #8
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 0304 	bic.w	r3, r3, #4
 8006d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a15      	ldr	r2, [pc, #84]	; (8006d64 <TIM_OC1_SetConfig+0xd8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d003      	beq.n	8006d1a <TIM_OC1_SetConfig+0x8e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a14      	ldr	r2, [pc, #80]	; (8006d68 <TIM_OC1_SetConfig+0xdc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d111      	bne.n	8006d3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	621a      	str	r2, [r3, #32]
}
 8006d58:	bf00      	nop
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400

08006d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f023 0210 	bic.w	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0320 	bic.w	r3, r3, #32
 8006db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a22      	ldr	r2, [pc, #136]	; (8006e50 <TIM_OC2_SetConfig+0xe4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC2_SetConfig+0x68>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a21      	ldr	r2, [pc, #132]	; (8006e54 <TIM_OC2_SetConfig+0xe8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d10d      	bne.n	8006df0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a17      	ldr	r2, [pc, #92]	; (8006e50 <TIM_OC2_SetConfig+0xe4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_OC2_SetConfig+0x94>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <TIM_OC2_SetConfig+0xe8>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d113      	bne.n	8006e28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40010400 	.word	0x40010400

08006e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a21      	ldr	r2, [pc, #132]	; (8006f38 <TIM_OC3_SetConfig+0xe0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_OC3_SetConfig+0x66>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a20      	ldr	r2, [pc, #128]	; (8006f3c <TIM_OC3_SetConfig+0xe4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d10d      	bne.n	8006eda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a16      	ldr	r2, [pc, #88]	; (8006f38 <TIM_OC3_SetConfig+0xe0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_OC3_SetConfig+0x92>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <TIM_OC3_SetConfig+0xe4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d113      	bne.n	8006f12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40010000 	.word	0x40010000
 8006f3c:	40010400 	.word	0x40010400

08006f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	031b      	lsls	r3, r3, #12
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a12      	ldr	r2, [pc, #72]	; (8006fe4 <TIM_OC4_SetConfig+0xa4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC4_SetConfig+0x68>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a11      	ldr	r2, [pc, #68]	; (8006fe8 <TIM_OC4_SetConfig+0xa8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d109      	bne.n	8006fbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	019b      	lsls	r3, r3, #6
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	40010400 	.word	0x40010400

08006fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	f023 0201 	bic.w	r2, r3, #1
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f023 030a 	bic.w	r3, r3, #10
 8007028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f023 0210 	bic.w	r2, r3, #16
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	031b      	lsls	r3, r3, #12
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f043 0307 	orr.w	r3, r3, #7
 80070cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	609a      	str	r2, [r3, #8]
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	021a      	lsls	r2, r3, #8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	431a      	orrs	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4313      	orrs	r3, r2
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	609a      	str	r2, [r3, #8]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2201      	movs	r2, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1a      	ldr	r2, [r3, #32]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	43db      	mvns	r3, r3
 8007142:	401a      	ands	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	fa01 f303 	lsl.w	r3, r1, r3
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
	...

0800716c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007180:	2302      	movs	r3, #2
 8007182:	e05a      	b.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a21      	ldr	r2, [pc, #132]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d022      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d0:	d01d      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1d      	ldr	r2, [pc, #116]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d018      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1a      	ldr	r2, [pc, #104]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00e      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a18      	ldr	r2, [pc, #96]	; (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d009      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a17      	ldr	r2, [pc, #92]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d004      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a15      	ldr	r2, [pc, #84]	; (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d10c      	bne.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	4313      	orrs	r3, r2
 800721e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40010000 	.word	0x40010000
 800724c:	40000400 	.word	0x40000400
 8007250:	40000800 	.word	0x40000800
 8007254:	40000c00 	.word	0x40000c00
 8007258:	40010400 	.word	0x40010400
 800725c:	40014000 	.word	0x40014000
 8007260:	40001800 	.word	0x40001800

08007264 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800727c:	2302      	movs	r3, #2
 800727e:	e03d      	b.n	80072fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e03f      	b.n	80073c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fb fcc2 	bl	8002ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2224      	movs	r2, #36	; 0x24
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f829 	bl	80073cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695a      	ldr	r2, [r3, #20]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d0:	b0c0      	sub	sp, #256	; 0x100
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e8:	68d9      	ldr	r1, [r3, #12]
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	ea40 0301 	orr.w	r3, r0, r1
 80073f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	431a      	orrs	r2, r3
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	431a      	orrs	r2, r3
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007424:	f021 010c 	bic.w	r1, r1, #12
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007432:	430b      	orrs	r3, r1
 8007434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007446:	6999      	ldr	r1, [r3, #24]
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	ea40 0301 	orr.w	r3, r0, r1
 8007452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b8f      	ldr	r3, [pc, #572]	; (8007698 <UART_SetConfig+0x2cc>)
 800745c:	429a      	cmp	r2, r3
 800745e:	d005      	beq.n	800746c <UART_SetConfig+0xa0>
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4b8d      	ldr	r3, [pc, #564]	; (800769c <UART_SetConfig+0x2d0>)
 8007468:	429a      	cmp	r2, r3
 800746a:	d104      	bne.n	8007476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800746c:	f7fe fe1c 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8007470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007474:	e003      	b.n	800747e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007476:	f7fe fe03 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 800747a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007488:	f040 810c 	bne.w	80076a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800748c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007490:	2200      	movs	r2, #0
 8007492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800749a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	1891      	adds	r1, r2, r2
 80074a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80074a6:	415b      	adcs	r3, r3
 80074a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074ae:	4621      	mov	r1, r4
 80074b0:	eb12 0801 	adds.w	r8, r2, r1
 80074b4:	4629      	mov	r1, r5
 80074b6:	eb43 0901 	adc.w	r9, r3, r1
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ce:	4690      	mov	r8, r2
 80074d0:	4699      	mov	r9, r3
 80074d2:	4623      	mov	r3, r4
 80074d4:	eb18 0303 	adds.w	r3, r8, r3
 80074d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074dc:	462b      	mov	r3, r5
 80074de:	eb49 0303 	adc.w	r3, r9, r3
 80074e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80074f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074fa:	460b      	mov	r3, r1
 80074fc:	18db      	adds	r3, r3, r3
 80074fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007500:	4613      	mov	r3, r2
 8007502:	eb42 0303 	adc.w	r3, r2, r3
 8007506:	657b      	str	r3, [r7, #84]	; 0x54
 8007508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800750c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007510:	f7f9 fbaa 	bl	8000c68 <__aeabi_uldivmod>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4b61      	ldr	r3, [pc, #388]	; (80076a0 <UART_SetConfig+0x2d4>)
 800751a:	fba3 2302 	umull	r2, r3, r3, r2
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	011c      	lsls	r4, r3, #4
 8007522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007526:	2200      	movs	r2, #0
 8007528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800752c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007534:	4642      	mov	r2, r8
 8007536:	464b      	mov	r3, r9
 8007538:	1891      	adds	r1, r2, r2
 800753a:	64b9      	str	r1, [r7, #72]	; 0x48
 800753c:	415b      	adcs	r3, r3
 800753e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007544:	4641      	mov	r1, r8
 8007546:	eb12 0a01 	adds.w	sl, r2, r1
 800754a:	4649      	mov	r1, r9
 800754c:	eb43 0b01 	adc.w	fp, r3, r1
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800755c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007564:	4692      	mov	sl, r2
 8007566:	469b      	mov	fp, r3
 8007568:	4643      	mov	r3, r8
 800756a:	eb1a 0303 	adds.w	r3, sl, r3
 800756e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007572:	464b      	mov	r3, r9
 8007574:	eb4b 0303 	adc.w	r3, fp, r3
 8007578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800758c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007590:	460b      	mov	r3, r1
 8007592:	18db      	adds	r3, r3, r3
 8007594:	643b      	str	r3, [r7, #64]	; 0x40
 8007596:	4613      	mov	r3, r2
 8007598:	eb42 0303 	adc.w	r3, r2, r3
 800759c:	647b      	str	r3, [r7, #68]	; 0x44
 800759e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075a6:	f7f9 fb5f 	bl	8000c68 <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	4b3b      	ldr	r3, [pc, #236]	; (80076a0 <UART_SetConfig+0x2d4>)
 80075b2:	fba3 2301 	umull	r2, r3, r3, r1
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	2264      	movs	r2, #100	; 0x64
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
 80075be:	1acb      	subs	r3, r1, r3
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075c6:	4b36      	ldr	r3, [pc, #216]	; (80076a0 <UART_SetConfig+0x2d4>)
 80075c8:	fba3 2302 	umull	r2, r3, r3, r2
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075d4:	441c      	add	r4, r3
 80075d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	1891      	adds	r1, r2, r2
 80075ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80075f0:	415b      	adcs	r3, r3
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075f8:	4641      	mov	r1, r8
 80075fa:	1851      	adds	r1, r2, r1
 80075fc:	6339      	str	r1, [r7, #48]	; 0x30
 80075fe:	4649      	mov	r1, r9
 8007600:	414b      	adcs	r3, r1
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007610:	4659      	mov	r1, fp
 8007612:	00cb      	lsls	r3, r1, #3
 8007614:	4651      	mov	r1, sl
 8007616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800761a:	4651      	mov	r1, sl
 800761c:	00ca      	lsls	r2, r1, #3
 800761e:	4610      	mov	r0, r2
 8007620:	4619      	mov	r1, r3
 8007622:	4603      	mov	r3, r0
 8007624:	4642      	mov	r2, r8
 8007626:	189b      	adds	r3, r3, r2
 8007628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800762c:	464b      	mov	r3, r9
 800762e:	460a      	mov	r2, r1
 8007630:	eb42 0303 	adc.w	r3, r2, r3
 8007634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800764c:	460b      	mov	r3, r1
 800764e:	18db      	adds	r3, r3, r3
 8007650:	62bb      	str	r3, [r7, #40]	; 0x28
 8007652:	4613      	mov	r3, r2
 8007654:	eb42 0303 	adc.w	r3, r2, r3
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800765a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800765e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007662:	f7f9 fb01 	bl	8000c68 <__aeabi_uldivmod>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <UART_SetConfig+0x2d4>)
 800766c:	fba3 1302 	umull	r1, r3, r3, r2
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	2164      	movs	r1, #100	; 0x64
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	3332      	adds	r3, #50	; 0x32
 800767e:	4a08      	ldr	r2, [pc, #32]	; (80076a0 <UART_SetConfig+0x2d4>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	f003 0207 	and.w	r2, r3, #7
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4422      	add	r2, r4
 8007692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007694:	e105      	b.n	80078a2 <UART_SetConfig+0x4d6>
 8007696:	bf00      	nop
 8007698:	40011000 	.word	0x40011000
 800769c:	40011400 	.word	0x40011400
 80076a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076b6:	4642      	mov	r2, r8
 80076b8:	464b      	mov	r3, r9
 80076ba:	1891      	adds	r1, r2, r2
 80076bc:	6239      	str	r1, [r7, #32]
 80076be:	415b      	adcs	r3, r3
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
 80076c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076c6:	4641      	mov	r1, r8
 80076c8:	1854      	adds	r4, r2, r1
 80076ca:	4649      	mov	r1, r9
 80076cc:	eb43 0501 	adc.w	r5, r3, r1
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	00eb      	lsls	r3, r5, #3
 80076da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076de:	00e2      	lsls	r2, r4, #3
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	4643      	mov	r3, r8
 80076e6:	18e3      	adds	r3, r4, r3
 80076e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076ec:	464b      	mov	r3, r9
 80076ee:	eb45 0303 	adc.w	r3, r5, r3
 80076f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007712:	4629      	mov	r1, r5
 8007714:	008b      	lsls	r3, r1, #2
 8007716:	4621      	mov	r1, r4
 8007718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800771c:	4621      	mov	r1, r4
 800771e:	008a      	lsls	r2, r1, #2
 8007720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007724:	f7f9 faa0 	bl	8000c68 <__aeabi_uldivmod>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4b60      	ldr	r3, [pc, #384]	; (80078b0 <UART_SetConfig+0x4e4>)
 800772e:	fba3 2302 	umull	r2, r3, r3, r2
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	011c      	lsls	r4, r3, #4
 8007736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800773a:	2200      	movs	r2, #0
 800773c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	1891      	adds	r1, r2, r2
 800774e:	61b9      	str	r1, [r7, #24]
 8007750:	415b      	adcs	r3, r3
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007758:	4641      	mov	r1, r8
 800775a:	1851      	adds	r1, r2, r1
 800775c:	6139      	str	r1, [r7, #16]
 800775e:	4649      	mov	r1, r9
 8007760:	414b      	adcs	r3, r1
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007770:	4659      	mov	r1, fp
 8007772:	00cb      	lsls	r3, r1, #3
 8007774:	4651      	mov	r1, sl
 8007776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800777a:	4651      	mov	r1, sl
 800777c:	00ca      	lsls	r2, r1, #3
 800777e:	4610      	mov	r0, r2
 8007780:	4619      	mov	r1, r3
 8007782:	4603      	mov	r3, r0
 8007784:	4642      	mov	r2, r8
 8007786:	189b      	adds	r3, r3, r2
 8007788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800778c:	464b      	mov	r3, r9
 800778e:	460a      	mov	r2, r1
 8007790:	eb42 0303 	adc.w	r3, r2, r3
 8007794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077b0:	4649      	mov	r1, r9
 80077b2:	008b      	lsls	r3, r1, #2
 80077b4:	4641      	mov	r1, r8
 80077b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ba:	4641      	mov	r1, r8
 80077bc:	008a      	lsls	r2, r1, #2
 80077be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077c2:	f7f9 fa51 	bl	8000c68 <__aeabi_uldivmod>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4b39      	ldr	r3, [pc, #228]	; (80078b0 <UART_SetConfig+0x4e4>)
 80077cc:	fba3 1302 	umull	r1, r3, r3, r2
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	2164      	movs	r1, #100	; 0x64
 80077d4:	fb01 f303 	mul.w	r3, r1, r3
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	3332      	adds	r3, #50	; 0x32
 80077de:	4a34      	ldr	r2, [pc, #208]	; (80078b0 <UART_SetConfig+0x4e4>)
 80077e0:	fba2 2303 	umull	r2, r3, r2, r3
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077ea:	441c      	add	r4, r3
 80077ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077f0:	2200      	movs	r2, #0
 80077f2:	673b      	str	r3, [r7, #112]	; 0x70
 80077f4:	677a      	str	r2, [r7, #116]	; 0x74
 80077f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80077fa:	4642      	mov	r2, r8
 80077fc:	464b      	mov	r3, r9
 80077fe:	1891      	adds	r1, r2, r2
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	415b      	adcs	r3, r3
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800780a:	4641      	mov	r1, r8
 800780c:	1851      	adds	r1, r2, r1
 800780e:	6039      	str	r1, [r7, #0]
 8007810:	4649      	mov	r1, r9
 8007812:	414b      	adcs	r3, r1
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007822:	4659      	mov	r1, fp
 8007824:	00cb      	lsls	r3, r1, #3
 8007826:	4651      	mov	r1, sl
 8007828:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800782c:	4651      	mov	r1, sl
 800782e:	00ca      	lsls	r2, r1, #3
 8007830:	4610      	mov	r0, r2
 8007832:	4619      	mov	r1, r3
 8007834:	4603      	mov	r3, r0
 8007836:	4642      	mov	r2, r8
 8007838:	189b      	adds	r3, r3, r2
 800783a:	66bb      	str	r3, [r7, #104]	; 0x68
 800783c:	464b      	mov	r3, r9
 800783e:	460a      	mov	r2, r1
 8007840:	eb42 0303 	adc.w	r3, r2, r3
 8007844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	663b      	str	r3, [r7, #96]	; 0x60
 8007850:	667a      	str	r2, [r7, #100]	; 0x64
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800785e:	4649      	mov	r1, r9
 8007860:	008b      	lsls	r3, r1, #2
 8007862:	4641      	mov	r1, r8
 8007864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007868:	4641      	mov	r1, r8
 800786a:	008a      	lsls	r2, r1, #2
 800786c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007870:	f7f9 f9fa 	bl	8000c68 <__aeabi_uldivmod>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <UART_SetConfig+0x4e4>)
 800787a:	fba3 1302 	umull	r1, r3, r3, r2
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	2164      	movs	r1, #100	; 0x64
 8007882:	fb01 f303 	mul.w	r3, r1, r3
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	3332      	adds	r3, #50	; 0x32
 800788c:	4a08      	ldr	r2, [pc, #32]	; (80078b0 <UART_SetConfig+0x4e4>)
 800788e:	fba2 2303 	umull	r2, r3, r2, r3
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4422      	add	r2, r4
 80078a0:	609a      	str	r2, [r3, #8]
}
 80078a2:	bf00      	nop
 80078a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078a8:	46bd      	mov	sp, r7
 80078aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ae:	bf00      	nop
 80078b0:	51eb851f 	.word	0x51eb851f

080078b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078b4:	b084      	sub	sp, #16
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	f107 001c 	add.w	r0, r7, #28
 80078c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d122      	bne.n	8007912 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80078e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d105      	bne.n	8007906 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 faa2 	bl	8007e50 <USB_CoreReset>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]
 8007910:	e01a      	b.n	8007948 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa96 	bl	8007e50 <USB_CoreReset>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d106      	bne.n	800793c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
 800793a:	e005      	b.n	8007948 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	2b01      	cmp	r3, #1
 800794c:	d10b      	bne.n	8007966 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f043 0206 	orr.w	r2, r3, #6
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f043 0220 	orr.w	r2, r3, #32
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007966:	7bfb      	ldrb	r3, [r7, #15]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007972:	b004      	add	sp, #16
 8007974:	4770      	bx	lr

08007976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f023 0201 	bic.w	r2, r3, #1
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d115      	bne.n	80079e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079c6:	2001      	movs	r0, #1
 80079c8:	f7fb fc5c 	bl	8003284 <HAL_Delay>
      ms++;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa2e 	bl	8007e34 <USB_GetMode>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d01e      	beq.n	8007a1c <USB_SetCurrentMode+0x84>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b31      	cmp	r3, #49	; 0x31
 80079e2:	d9f0      	bls.n	80079c6 <USB_SetCurrentMode+0x2e>
 80079e4:	e01a      	b.n	8007a1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d115      	bne.n	8007a18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079f8:	2001      	movs	r0, #1
 80079fa:	f7fb fc43 	bl	8003284 <HAL_Delay>
      ms++;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa15 	bl	8007e34 <USB_GetMode>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <USB_SetCurrentMode+0x84>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b31      	cmp	r3, #49	; 0x31
 8007a14:	d9f0      	bls.n	80079f8 <USB_SetCurrentMode+0x60>
 8007a16:	e001      	b.n	8007a1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e005      	b.n	8007a28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b32      	cmp	r3, #50	; 0x32
 8007a20:	d101      	bne.n	8007a26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a30:	b084      	sub	sp, #16
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b086      	sub	sp, #24
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	e009      	b.n	8007a64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3340      	adds	r3, #64	; 0x40
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	3301      	adds	r3, #1
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	2b0e      	cmp	r3, #14
 8007a68:	d9f2      	bls.n	8007a50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11c      	bne.n	8007aaa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7e:	f043 0302 	orr.w	r3, r3, #2
 8007a82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8007aa8:	e00b      	b.n	8007ac2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ac8:	461a      	mov	r2, r3
 8007aca:	2300      	movs	r3, #0
 8007acc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007adc:	461a      	mov	r2, r3
 8007ade:	680b      	ldr	r3, [r1, #0]
 8007ae0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d10c      	bne.n	8007b02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007aee:	2100      	movs	r1, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f965 	bl	8007dc0 <USB_SetDevSpeed>
 8007af6:	e008      	b.n	8007b0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007af8:	2101      	movs	r1, #1
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f960 	bl	8007dc0 <USB_SetDevSpeed>
 8007b00:	e003      	b.n	8007b0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b02:	2103      	movs	r1, #3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f95b 	bl	8007dc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b0a:	2110      	movs	r1, #16
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f8f3 	bl	8007cf8 <USB_FlushTxFifo>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f91f 	bl	8007d60 <USB_FlushRxFifo>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b32:	461a      	mov	r2, r3
 8007b34:	2300      	movs	r3, #0
 8007b36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	461a      	mov	r2, r3
 8007b40:	2300      	movs	r3, #0
 8007b42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	e043      	b.n	8007bde <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b6c:	d118      	bne.n	8007ba0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b80:	461a      	mov	r2, r3
 8007b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	e013      	b.n	8007bb2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b96:	461a      	mov	r2, r3
 8007b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	e008      	b.n	8007bb2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	461a      	mov	r2, r3
 8007bae:	2300      	movs	r3, #0
 8007bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d3b7      	bcc.n	8007b56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007be6:	2300      	movs	r3, #0
 8007be8:	613b      	str	r3, [r7, #16]
 8007bea:	e043      	b.n	8007c74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c02:	d118      	bne.n	8007c36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c16:	461a      	mov	r2, r3
 8007c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e013      	b.n	8007c48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	e008      	b.n	8007c48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c42:	461a      	mov	r2, r3
 8007c44:	2300      	movs	r3, #0
 8007c46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c54:	461a      	mov	r2, r3
 8007c56:	2300      	movs	r3, #0
 8007c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c66:	461a      	mov	r2, r3
 8007c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3301      	adds	r3, #1
 8007c72:	613b      	str	r3, [r7, #16]
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d3b7      	bcc.n	8007bec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d105      	bne.n	8007cb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f043 0210 	orr.w	r2, r3, #16
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	699a      	ldr	r2, [r3, #24]
 8007cb4:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <USB_DevInit+0x2c4>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f043 0208 	orr.w	r2, r3, #8
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d107      	bne.n	8007ce4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cdc:	f043 0304 	orr.w	r3, r3, #4
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cf0:	b004      	add	sp, #16
 8007cf2:	4770      	bx	lr
 8007cf4:	803c3800 	.word	0x803c3800

08007cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <USB_FlushTxFifo+0x64>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d901      	bls.n	8007d18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e01b      	b.n	8007d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	daf2      	bge.n	8007d06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	019b      	lsls	r3, r3, #6
 8007d28:	f043 0220 	orr.w	r2, r3, #32
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4a08      	ldr	r2, [pc, #32]	; (8007d5c <USB_FlushTxFifo+0x64>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d901      	bls.n	8007d42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e006      	b.n	8007d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d0f0      	beq.n	8007d30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	00030d40 	.word	0x00030d40

08007d60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4a11      	ldr	r2, [pc, #68]	; (8007dbc <USB_FlushRxFifo+0x5c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d901      	bls.n	8007d7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e018      	b.n	8007db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	daf2      	bge.n	8007d6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2210      	movs	r2, #16
 8007d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4a08      	ldr	r2, [pc, #32]	; (8007dbc <USB_FlushRxFifo+0x5c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d901      	bls.n	8007da2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e006      	b.n	8007db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d0f0      	beq.n	8007d90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	00030d40 	.word	0x00030d40

08007dc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007de0:	4313      	orrs	r3, r2
 8007de2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e0c:	f023 0303 	bic.w	r3, r3, #3
 8007e10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e20:	f043 0302 	orr.w	r3, r3, #2
 8007e24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	f003 0301 	and.w	r3, r3, #1
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4a13      	ldr	r2, [pc, #76]	; (8007eb4 <USB_CoreReset+0x64>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d901      	bls.n	8007e6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e01b      	b.n	8007ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	daf2      	bge.n	8007e5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f043 0201 	orr.w	r2, r3, #1
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4a09      	ldr	r2, [pc, #36]	; (8007eb4 <USB_CoreReset+0x64>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d901      	bls.n	8007e98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e006      	b.n	8007ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d0f0      	beq.n	8007e86 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	00030d40 	.word	0x00030d40

08007eb8 <index2value>:

/*
** Convert an acceptable index to a pointer to its respective value.
** Non-valid indices return the special nil value 'G(L)->nilvalue'.
*/
static TValue *index2value (lua_State *L, int idx) {
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	617b      	str	r3, [r7, #20]
  if (idx > 0) {
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dd10      	ble.n	8007ef0 <index2value+0x38>
    StkId o = ci->func + idx;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
    api_check(L, idx <= L->ci->top - (ci->func + 1), "unacceptable index");
    if (o >= L->top) return &G(L)->nilvalue;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d303      	bcc.n	8007eec <index2value+0x34>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	332c      	adds	r3, #44	; 0x2c
 8007eea:	e034      	b.n	8007f56 <index2value+0x9e>
    else return s2v(o);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	e032      	b.n	8007f56 <index2value+0x9e>
  }
  else if (!ispseudo(idx)) {  /* negative index */
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	f513 5f7a 	cmn.w	r3, #16000	; 0x3e80
 8007ef6:	dd05      	ble.n	8007f04 <index2value+0x4c>
    api_check(L, idx != 0 && -idx <= L->top - (ci->func + 1), "invalid index");
    return s2v(L->top + idx);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	4413      	add	r3, r2
 8007f02:	e028      	b.n	8007f56 <index2value+0x9e>
  }
  else if (idx == LUA_REGISTRYINDEX)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	f513 5f7a 	cmn.w	r3, #16000	; 0x3e80
 8007f0a:	d103      	bne.n	8007f14 <index2value+0x5c>
    return &G(L)->l_registry;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	3324      	adds	r3, #36	; 0x24
 8007f12:	e020      	b.n	8007f56 <index2value+0x9e>
  else {  /* upvalues */
    idx = LUA_REGISTRYINDEX - idx;
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <index2value+0xac>)
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	603b      	str	r3, [r7, #0]
    api_check(L, idx <= MAXUPVAL + 1, "upvalue index too large");
    if (ttisCclosure(s2v(ci->func))) {  /* C closure? */
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	791b      	ldrb	r3, [r3, #4]
 8007f22:	2b66      	cmp	r3, #102	; 0x66
 8007f24:	d114      	bne.n	8007f50 <index2value+0x98>
      CClosure *func = clCvalue(s2v(ci->func));
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	613b      	str	r3, [r7, #16]
      return (idx <= func->nupvalues) ? &func->upvalue[idx-1]
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	799b      	ldrb	r3, [r3, #6]
 8007f32:	461a      	mov	r2, r3
                                      : &G(L)->nilvalue;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	4293      	cmp	r3, r2
 8007f38:	dc06      	bgt.n	8007f48 <index2value+0x90>
      return (idx <= func->nupvalues) ? &func->upvalue[idx-1]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	3b01      	subs	r3, #1
                                      : &G(L)->nilvalue;
 8007f3e:	3302      	adds	r3, #2
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	4413      	add	r3, r2
 8007f46:	e006      	b.n	8007f56 <index2value+0x9e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	332c      	adds	r3, #44	; 0x2c
 8007f4e:	e002      	b.n	8007f56 <index2value+0x9e>
    }
    else {  /* light C function or Lua function (through a hook)?) */
      api_check(L, ttislcf(s2v(ci->func)), "caller not a C function");
      return &G(L)->nilvalue;  /* no upvalues */
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	332c      	adds	r3, #44	; 0x2c
    }
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	ffffc180 	.word	0xffffc180

08007f68 <lua_atpanic>:
  }
  lua_unlock(to);
}


LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  lua_CFunction old;
  lua_lock(L);
  old = G(L)->panic;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f7a:	60fb      	str	r3, [r7, #12]
  G(L)->panic = panicf;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  lua_unlock(L);
  return old;
 8007f86:	68fb      	ldr	r3, [r7, #12]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <lua_tolstring>:
  const TValue *o = index2value(L, idx);
  return !l_isfalse(o);
}


LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  TValue *o;
  lua_lock(L);
  o = index2value(L, idx);
 8007fa0:	68b9      	ldr	r1, [r7, #8]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff ff88 	bl	8007eb8 <index2value>
 8007fa8:	6178      	str	r0, [r7, #20]
  if (!ttisstring(o)) {
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d01e      	beq.n	8007ff4 <lua_tolstring+0x60>
    if (!cvt2str(o)) {  /* not convertible? */
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	791b      	ldrb	r3, [r3, #4]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d007      	beq.n	8007fd2 <lua_tolstring+0x3e>
      if (len != NULL) *len = 0;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <lua_tolstring+0x3a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
      lua_unlock(L);
      return NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e024      	b.n	800801c <lua_tolstring+0x88>
    }
    luaO_tostring(L, o);
 8007fd2:	6979      	ldr	r1, [r7, #20]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f005 fa29 	bl	800d42c <luaO_tostring>
    luaC_checkGC(L);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dd02      	ble.n	8007fea <lua_tolstring+0x56>
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f004 fe53 	bl	800cc90 <luaC_step>
    o = index2value(L, idx);  /* previous call may reallocate the stack */
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff ff63 	bl	8007eb8 <index2value>
 8007ff2:	6178      	str	r0, [r7, #20]
  }
  if (len != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00d      	beq.n	8008016 <lua_tolstring+0x82>
    *len = vslen(o);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	791b      	ldrb	r3, [r3, #4]
 8008000:	2b04      	cmp	r3, #4
 8008002:	d103      	bne.n	800800c <lua_tolstring+0x78>
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	79db      	ldrb	r3, [r3, #7]
 800800a:	e002      	b.n	8008012 <lua_tolstring+0x7e>
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6013      	str	r3, [r2, #0]
  lua_unlock(L);
  return svalue(o);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3310      	adds	r3, #16
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <lua_setwarnf>:
  G(L)->frealloc = f;
  lua_unlock(L);
}


void lua_setwarnf (lua_State *L, lua_WarnFunction f, void *ud) {
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  lua_lock(L);
  G(L)->ud_warn = ud;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  G(L)->warnf = f;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  lua_unlock(L);
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <l_alloc>:
}


#include "luaeheap.h"

static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  (void)ud; (void)osize;  /* not used */
  if (nsize == 0) {
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <l_alloc+0x1e>
    luaFreeFunction(ptr);
 8008064:	68b8      	ldr	r0, [r7, #8]
 8008066:	f008 faab 	bl	80105c0 <luaFree>
    return NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	e01a      	b.n	80080a4 <l_alloc+0x54>
  }
  else {
    void *newblock = luaMallocFunction(nsize);  /* alloc a new block */
 800806e:	6838      	ldr	r0, [r7, #0]
 8008070:	f008 fa12 	bl	8010498 <luaMalloc>
 8008074:	6178      	str	r0, [r7, #20]
    if (newblock == NULL) return NULL;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <l_alloc+0x30>
 800807c:	2300      	movs	r3, #0
 800807e:	e011      	b.n	80080a4 <l_alloc+0x54>
    if (ptr) {
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00d      	beq.n	80080a2 <l_alloc+0x52>
      size_t commonsize = (osize < nsize) ? osize : nsize;
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4293      	cmp	r3, r2
 800808c:	bf28      	it	cs
 800808e:	4613      	movcs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]
      memcpy(newblock, ptr, commonsize);
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	6978      	ldr	r0, [r7, #20]
 8008098:	f016 fdca 	bl	801ec30 <memcpy>
      luaFreeFunction(ptr);
 800809c:	68b8      	ldr	r0, [r7, #8]
 800809e:	f008 fa8f 	bl	80105c0 <luaFree>
    }
    return newblock;
 80080a2:	697b      	ldr	r3, [r7, #20]
  }
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <panic>:




static int panic (lua_State *L) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  const char *msg = lua_tostring(L, -1);
 80080b4:	2200      	movs	r2, #0
 80080b6:	f04f 31ff 	mov.w	r1, #4294967295
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff ff6a 	bl	8007f94 <lua_tolstring>
 80080c0:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) msg = "error object is not a string";
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <panic+0x20>
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <panic+0x48>)
 80080ca:	60fb      	str	r3, [r7, #12]
  lua_writestringerror("PANIC: unprotected error in call to Lua API (%s)\n",
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <panic+0x4c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	4909      	ldr	r1, [pc, #36]	; (80080fc <panic+0x50>)
 80080d6:	4618      	mov	r0, r3
 80080d8:	f016 fba2 	bl	801e820 <fiprintf>
 80080dc:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <panic+0x4c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f016 fab4 	bl	801e650 <fflush>
                        msg);
  return 0;  /* return to Lua to abort */
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	08021eec 	.word	0x08021eec
 80080f8:	20000330 	.word	0x20000330
 80080fc:	08021f0c 	.word	0x08021f0c

08008100 <checkcontrol>:

/*
** Check whether message is a control message. If so, execute the
** control or ignore it if unknown.
*/
static int checkcontrol (lua_State *L, const char *message, int tocont) {
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  if (tocont || *(message++) != '@')  /* not a control message? */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d105      	bne.n	800811e <checkcontrol+0x1e>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	60ba      	str	r2, [r7, #8]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b40      	cmp	r3, #64	; 0x40
 800811c:	d001      	beq.n	8008122 <checkcontrol+0x22>
    return 0;
 800811e:	2300      	movs	r3, #0
 8008120:	e019      	b.n	8008156 <checkcontrol+0x56>
  else {
    if (strcmp(message, "off") == 0)
 8008122:	490f      	ldr	r1, [pc, #60]	; (8008160 <checkcontrol+0x60>)
 8008124:	68b8      	ldr	r0, [r7, #8]
 8008126:	f7f8 f8b1 	bl	800028c <strcmp>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d105      	bne.n	800813c <checkcontrol+0x3c>
      lua_setwarnf(L, warnfoff, L);  /* turn warnings off */
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	490c      	ldr	r1, [pc, #48]	; (8008164 <checkcontrol+0x64>)
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff ff75 	bl	8008024 <lua_setwarnf>
 800813a:	e00b      	b.n	8008154 <checkcontrol+0x54>
    else if (strcmp(message, "on") == 0)
 800813c:	490a      	ldr	r1, [pc, #40]	; (8008168 <checkcontrol+0x68>)
 800813e:	68b8      	ldr	r0, [r7, #8]
 8008140:	f7f8 f8a4 	bl	800028c <strcmp>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d104      	bne.n	8008154 <checkcontrol+0x54>
      lua_setwarnf(L, warnfon, L);   /* turn warnings on */
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4907      	ldr	r1, [pc, #28]	; (800816c <checkcontrol+0x6c>)
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff ff68 	bl	8008024 <lua_setwarnf>
    return 1;  /* it was a control message */
 8008154:	2301      	movs	r3, #1
  }
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	08021f40 	.word	0x08021f40
 8008164:	08008171 	.word	0x08008171
 8008168:	08021f44 	.word	0x08021f44
 800816c:	08008205 	.word	0x08008205

08008170 <warnfoff>:


static void warnfoff (void *ud, const char *message, int tocont) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  checkcontrol((lua_State *)ud, message, tocont);
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff ffbd 	bl	8008100 <checkcontrol>
}
 8008186:	bf00      	nop
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <warnfcont>:

/*
** Writes the message and handle 'tocont', finishing the message
** if needed and setting the next warn function.
*/
static void warnfcont (void *ud, const char *message, int tocont) {
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  lua_State *L = (lua_State *)ud;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	617b      	str	r3, [r7, #20]
  lua_writestringerror("%s", message);  /* write message */
 80081a0:	4b15      	ldr	r3, [pc, #84]	; (80081f8 <warnfcont+0x68>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	4619      	mov	r1, r3
 80081a8:	68b8      	ldr	r0, [r7, #8]
 80081aa:	f016 fbf1 	bl	801e990 <fputs>
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <warnfcont+0x68>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f016 fa4b 	bl	801e650 <fflush>
  if (tocont)  /* not the last part? */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <warnfcont+0x3c>
    lua_setwarnf(L, warnfcont, L);  /* to be continued */
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	490e      	ldr	r1, [pc, #56]	; (80081fc <warnfcont+0x6c>)
 80081c4:	6978      	ldr	r0, [r7, #20]
 80081c6:	f7ff ff2d 	bl	8008024 <lua_setwarnf>
  else {  /* last part */
    lua_writestringerror("%s", "\n");  /* finish message with end-of-line */
    lua_setwarnf(L, warnfon, L);  /* next call is a new message */
  }
}
 80081ca:	e011      	b.n	80081f0 <warnfcont+0x60>
    lua_writestringerror("%s", "\n");  /* finish message with end-of-line */
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <warnfcont+0x68>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	4619      	mov	r1, r3
 80081d4:	200a      	movs	r0, #10
 80081d6:	f016 fb6d 	bl	801e8b4 <fputc>
 80081da:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <warnfcont+0x68>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f016 fa35 	bl	801e650 <fflush>
    lua_setwarnf(L, warnfon, L);  /* next call is a new message */
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4905      	ldr	r1, [pc, #20]	; (8008200 <warnfcont+0x70>)
 80081ea:	6978      	ldr	r0, [r7, #20]
 80081ec:	f7ff ff1a 	bl	8008024 <lua_setwarnf>
}
 80081f0:	bf00      	nop
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20000330 	.word	0x20000330
 80081fc:	08008191 	.word	0x08008191
 8008200:	08008205 	.word	0x08008205

08008204 <warnfon>:


static void warnfon (void *ud, const char *message, int tocont) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  if (checkcontrol((lua_State *)ud, message, tocont))  /* control message? */
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff ff73 	bl	8008100 <checkcontrol>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d113      	bne.n	8008248 <warnfon+0x44>
    return;  /* nothing else to be done */
  lua_writestringerror("%s", "Lua warning: ");  /* start a new warning */
 8008220:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <warnfon+0x4c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	220d      	movs	r2, #13
 8008228:	2101      	movs	r1, #1
 800822a:	480a      	ldr	r0, [pc, #40]	; (8008254 <warnfon+0x50>)
 800822c:	f016 fc38 	bl	801eaa0 <fwrite>
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <warnfon+0x4c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	4618      	mov	r0, r3
 8008238:	f016 fa0a 	bl	801e650 <fflush>
  warnfcont(ud, message, tocont);  /* finish processing */
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f7ff ffa5 	bl	8008190 <warnfcont>
 8008246:	e000      	b.n	800824a <warnfon+0x46>
    return;  /* nothing else to be done */
 8008248:	bf00      	nop
}
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20000330 	.word	0x20000330
 8008254:	08021f48 	.word	0x08021f48

08008258 <luaL_newstate>:


LUALIB_API lua_State *luaL_newstate (void) {
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
  lua_State *L = lua_newstate(l_alloc, NULL);
 800825e:	2100      	movs	r1, #0
 8008260:	480c      	ldr	r0, [pc, #48]	; (8008294 <luaL_newstate+0x3c>)
 8008262:	f005 fef3 	bl	800e04c <lua_newstate>
 8008266:	6078      	str	r0, [r7, #4]
  if (l_likely(L)) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	bf14      	ite	ne
 800826e:	2301      	movne	r3, #1
 8008270:	2300      	moveq	r3, #0
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	d008      	beq.n	800828a <luaL_newstate+0x32>
    lua_atpanic(L, &panic);
 8008278:	4907      	ldr	r1, [pc, #28]	; (8008298 <luaL_newstate+0x40>)
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fe74 	bl	8007f68 <lua_atpanic>
    lua_setwarnf(L, warnfoff, L);  /* default is warnings off */
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	4906      	ldr	r1, [pc, #24]	; (800829c <luaL_newstate+0x44>)
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff fecd 	bl	8008024 <lua_setwarnf>
  }
  return L;
 800828a:	687b      	ldr	r3, [r7, #4]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	08008051 	.word	0x08008051
 8008298:	080080ad 	.word	0x080080ad
 800829c:	08008171 	.word	0x08008171

080082a0 <currentpc>:

static const char *funcnamefromcall (lua_State *L, CallInfo *ci,
                                                   const char **name);


static int currentpc (CallInfo *ci) {
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  lua_assert(isLua(ci));
  return pcRel(ci->u.l.savedpc, ci_func(ci)->p);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	109b      	asrs	r3, r3, #2
 80082ba:	3b01      	subs	r3, #1
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <getbaseline>:
** The assertion that the estimate is a lower bound for the correct base
** is valid as long as the debug info has been generated with the same
** value for MAXIWTHABS or smaller. (Previous releases use a little
** smaller value.)
*/
static int getbaseline (const Proto *f, int pc, int *basepc) {
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  if (f->sizeabslineinfo == 0 || pc < f->abslineinfo[0].pc) {
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <getbaseline+0x20>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	da06      	bge.n	80082f6 <getbaseline+0x2e>
    *basepc = -1;  /* start from the beginning */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	601a      	str	r2, [r3, #0]
    return f->linedefined;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f4:	e025      	b.n	8008342 <getbaseline+0x7a>
  }
  else {
    int i = cast_uint(pc) / MAXIWTHABS - 1;  /* get an estimate */
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	09db      	lsrs	r3, r3, #7
 80082fa:	3b01      	subs	r3, #1
 80082fc:	617b      	str	r3, [r7, #20]
    /* estimate must be a lower bound of the correct base */
    lua_assert(i < 0 ||
              (i < f->sizeabslineinfo && f->abslineinfo[i].pc <= pc));
    while (i + 1 < f->sizeabslineinfo && pc >= f->abslineinfo[i + 1].pc)
 80082fe:	e002      	b.n	8008306 <getbaseline+0x3e>
      i++;  /* low estimate; adjust it */
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	3301      	adds	r3, #1
 8008304:	617b      	str	r3, [r7, #20]
    while (i + 1 < f->sizeabslineinfo && pc >= f->abslineinfo[i + 1].pc)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	429a      	cmp	r2, r3
 8008310:	da09      	bge.n	8008326 <getbaseline+0x5e>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	3301      	adds	r3, #1
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	4413      	add	r3, r2
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	429a      	cmp	r2, r3
 8008324:	daec      	bge.n	8008300 <getbaseline+0x38>
    *basepc = f->abslineinfo[i].pc;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	4413      	add	r3, r2
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	601a      	str	r2, [r3, #0]
    return f->abslineinfo[i].line;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	4413      	add	r3, r2
 8008340:	685b      	ldr	r3, [r3, #4]
  }
}
 8008342:	4618      	mov	r0, r3
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <luaG_getfuncline>:
/*
** Get the line corresponding to instruction 'pc' in function 'f';
** first gets a base line and from there does the increments until
** the desired instruction.
*/
int luaG_getfuncline (const Proto *f, int pc) {
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  if (f->lineinfo == NULL)  /* no debug information? */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <luaG_getfuncline+0x18>
    return -1;
 8008360:	f04f 33ff 	mov.w	r3, #4294967295
 8008364:	e019      	b.n	800839a <luaG_getfuncline+0x4c>
  else {
    int basepc;
    int baseline = getbaseline(f, pc, &basepc);
 8008366:	f107 0308 	add.w	r3, r7, #8
 800836a:	461a      	mov	r2, r3
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff ffaa 	bl	80082c8 <getbaseline>
 8008374:	60f8      	str	r0, [r7, #12]
    while (basepc++ < pc) {  /* walk until given instruction */
 8008376:	e009      	b.n	800838c <luaG_getfuncline+0x3e>
      lua_assert(f->lineinfo[basepc] != ABSLINEINFO);
      baseline += f->lineinfo[basepc];  /* correct line */
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	4413      	add	r3, r2
 8008380:	f993 3000 	ldrsb.w	r3, [r3]
 8008384:	461a      	mov	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
    while (basepc++ < pc) {  /* walk until given instruction */
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	60ba      	str	r2, [r7, #8]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	dcef      	bgt.n	8008378 <luaG_getfuncline+0x2a>
    }
    return baseline;
 8008398:	68fb      	ldr	r3, [r7, #12]
  }
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <getcurrentline>:


static int getcurrentline (CallInfo *ci) {
 80083a2:	b590      	push	{r4, r7, lr}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  return luaG_getfuncline(ci_func(ci)->p, currentpc(ci));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68dc      	ldr	r4, [r3, #12]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff ff74 	bl	80082a0 <currentpc>
 80083b8:	4603      	mov	r3, r0
 80083ba:	4619      	mov	r1, r3
 80083bc:	4620      	mov	r0, r4
 80083be:	f7ff ffc6 	bl	800834e <luaG_getfuncline>
 80083c2:	4603      	mov	r3, r0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd90      	pop	{r4, r7, pc}

080083cc <upvalname>:
  lua_unlock(L);
  return status;
}


static const char *upvalname (const Proto *p, int uv) {
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  TString *s = check_exp(uv < p->sizeupvalues, p->upvalues[uv].name);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	4413      	add	r3, r2
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
  if (s == NULL) return "?";
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <upvalname+0x22>
 80083ea:	4b05      	ldr	r3, [pc, #20]	; (8008400 <upvalname+0x34>)
 80083ec:	e001      	b.n	80083f2 <upvalname+0x26>
  else return getstr(s);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3310      	adds	r3, #16
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	08021fc4 	.word	0x08021fc4

08008404 <findvararg>:


static const char *findvararg (CallInfo *ci, int n, StkId *pos) {
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  if (clLvalue(s2v(ci->func))->p->is_vararg) {
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	79db      	ldrb	r3, [r3, #7]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d015      	beq.n	800844a <findvararg+0x46>
    int nextra = ci->u.l.nextraargs;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	617b      	str	r3, [r7, #20]
    if (n >= -nextra) {  /* 'n' is negative */
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	425b      	negs	r3, r3
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	429a      	cmp	r2, r3
 800842c:	db0d      	blt.n	800844a <findvararg+0x46>
      *pos = ci->func - nextra - (n + 1);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	6979      	ldr	r1, [r7, #20]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4419      	add	r1, r3
 8008438:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800843c:	1a5b      	subs	r3, r3, r1
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	441a      	add	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	601a      	str	r2, [r3, #0]
      return "(vararg)";  /* generic name for any vararg */
 8008446:	4b04      	ldr	r3, [pc, #16]	; (8008458 <findvararg+0x54>)
 8008448:	e000      	b.n	800844c <findvararg+0x48>
    }
  }
  return NULL;  /* no such vararg */
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	08021fc8 	.word	0x08021fc8

0800845c <luaG_findlocal>:


const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n, StkId *pos) {
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b089      	sub	sp, #36	; 0x24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
  StkId base = ci->func + 1;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	61bb      	str	r3, [r7, #24]
  const char *name = NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	61fb      	str	r3, [r7, #28]
  if (isLua(ci)) {
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d117      	bne.n	80084b2 <luaG_findlocal+0x56>
    if (n < 0)  /* access to vararg values? */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	da06      	bge.n	8008496 <luaG_findlocal+0x3a>
      return findvararg(ci, n, pos);
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	68b8      	ldr	r0, [r7, #8]
 800848e:	f7ff ffb9 	bl	8008404 <findvararg>
 8008492:	4603      	mov	r3, r0
 8008494:	e041      	b.n	800851a <luaG_findlocal+0xbe>
    else
      name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68dc      	ldr	r4, [r3, #12]
 800849e:	68b8      	ldr	r0, [r7, #8]
 80084a0:	f7ff fefe 	bl	80082a0 <currentpc>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	4620      	mov	r0, r4
 80084ac:	f002 f905 	bl	800a6ba <luaF_getlocalname>
 80084b0:	61f8      	str	r0, [r7, #28]
  }
  if (name == NULL) {  /* no 'standard' name? */
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d123      	bne.n	8008500 <luaG_findlocal+0xa4>
    StkId limit = (ci == L->ci) ? L->top : ci->next->func;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d102      	bne.n	80084c8 <luaG_findlocal+0x6c>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	e002      	b.n	80084ce <luaG_findlocal+0x72>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	617b      	str	r3, [r7, #20]
    if (limit - base >= n && n > 0) {  /* is 'n' inside 'ci' stack? */
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	10db      	asrs	r3, r3, #3
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4293      	cmp	r3, r2
 80084de:	dc0d      	bgt.n	80084fc <luaG_findlocal+0xa0>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dd0a      	ble.n	80084fc <luaG_findlocal+0xa0>
      /* generic name for any valid slot */
      name = isLua(ci) ? "(temporary)" : "(C temporary)";
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <luaG_findlocal+0x9a>
 80084f2:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <luaG_findlocal+0xc8>)
 80084f4:	e000      	b.n	80084f8 <luaG_findlocal+0x9c>
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <luaG_findlocal+0xcc>)
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	e001      	b.n	8008500 <luaG_findlocal+0xa4>
    }
    else
      return NULL;  /* no name */
 80084fc:	2300      	movs	r3, #0
 80084fe:	e00c      	b.n	800851a <luaG_findlocal+0xbe>
  }
  if (pos)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d008      	beq.n	8008518 <luaG_findlocal+0xbc>
    *pos = base + (n - 1);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800850c:	3b01      	subs	r3, #1
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	441a      	add	r2, r3
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	601a      	str	r2, [r3, #0]
  return name;
 8008518:	69fb      	ldr	r3, [r7, #28]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3724      	adds	r7, #36	; 0x24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd90      	pop	{r4, r7, pc}
 8008522:	bf00      	nop
 8008524:	08021fd4 	.word	0x08021fd4
 8008528:	08021fe0 	.word	0x08021fe0

0800852c <kname>:


/*
** Find a "name" for the constant 'c'.
*/
static void kname (const Proto *p, int c, const char **name) {
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  TValue *kvalue = &p->k[c];
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4413      	add	r3, r2
 8008542:	617b      	str	r3, [r7, #20]
  *name = (ttisstring(kvalue)) ? svalue(kvalue) : "?";
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	791b      	ldrb	r3, [r3, #4]
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	2b04      	cmp	r3, #4
 800854e:	d103      	bne.n	8008558 <kname+0x2c>
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3310      	adds	r3, #16
 8008556:	e000      	b.n	800855a <kname+0x2e>
 8008558:	4b04      	ldr	r3, [pc, #16]	; (800856c <kname+0x40>)
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6013      	str	r3, [r2, #0]
}
 800855e:	bf00      	nop
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	08021fc4 	.word	0x08021fc4

08008570 <rname>:


/*
** Find a "name" for the register 'c'.
*/
static void rname (const Proto *p, int pc, int c, const char **name) {
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
  const char *what = getobjname(p, pc, c, name); /* search for 'c' */
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 f91d 	bl	80087c4 <getobjname>
 800858a:	6178      	str	r0, [r7, #20]
  if (!(what && *what == 'c'))  /* did not find a constant name? */
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <rname+0x2a>
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b63      	cmp	r3, #99	; 0x63
 8008598:	d002      	beq.n	80085a0 <rname+0x30>
    *name = "?";
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	4a02      	ldr	r2, [pc, #8]	; (80085a8 <rname+0x38>)
 800859e:	601a      	str	r2, [r3, #0]
}
 80085a0:	bf00      	nop
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	08021fc4 	.word	0x08021fc4

080085ac <rkname>:


/*
** Find a "name" for a 'C' value in an RK instruction.
*/
static void rkname (const Proto *p, int pc, Instruction i, const char **name) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
  int c = GETARG_C(i);  /* key index */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	0e1b      	lsrs	r3, r3, #24
 80085be:	617b      	str	r3, [r7, #20]
  if (GETARG_k(i))  /* is 'c' a constant? */
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	0bdb      	lsrs	r3, r3, #15
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <rkname+0x2c>
    kname(p, c, name);
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	6979      	ldr	r1, [r7, #20]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff ffab 	bl	800852c <kname>
  else  /* 'c' is a register */
    rname(p, pc, c, name);
}
 80085d6:	e005      	b.n	80085e4 <rkname+0x38>
    rname(p, pc, c, name);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	68b9      	ldr	r1, [r7, #8]
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff ffc6 	bl	8008570 <rname>
}
 80085e4:	bf00      	nop
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <filterpc>:


static int filterpc (int pc, int jmptarget) {
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  if (pc < jmptarget)  /* is code conditional (inside a jump)? */
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	da02      	bge.n	8008604 <filterpc+0x18>
    return -1;  /* cannot know who sets that register */
 80085fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008602:	e000      	b.n	8008606 <filterpc+0x1a>
  else return pc;  /* current position sets that register */
 8008604:	687b      	ldr	r3, [r7, #4]
}
 8008606:	4618      	mov	r0, r3
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
	...

08008614 <findsetreg>:


/*
** Try to find last instruction before 'lastpc' that modified register 'reg'.
*/
static int findsetreg (const Proto *p, int lastpc, int reg) {
 8008614:	b580      	push	{r7, lr}
 8008616:	b08e      	sub	sp, #56	; 0x38
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  int pc;
  int setreg = -1;  /* keep last instruction that changed 'reg' */
 8008620:	f04f 33ff 	mov.w	r3, #4294967295
 8008624:	633b      	str	r3, [r7, #48]	; 0x30
  int jmptarget = 0;  /* any code before this address is conditional */
 8008626:	2300      	movs	r3, #0
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (testMMMode(GET_OPCODE(p->code[lastpc])))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863c:	4a46      	ldr	r2, [pc, #280]	; (8008758 <findsetreg+0x144>)
 800863e:	5cd3      	ldrb	r3, [r2, r3]
 8008640:	b25b      	sxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	da02      	bge.n	800864c <findsetreg+0x38>
    lastpc--;  /* previous instruction was not actually executed */
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	3b01      	subs	r3, #1
 800864a:	60bb      	str	r3, [r7, #8]
  for (pc = 0; pc < lastpc; pc++) {
 800864c:	2300      	movs	r3, #0
 800864e:	637b      	str	r3, [r7, #52]	; 0x34
 8008650:	e079      	b.n	8008746 <findsetreg+0x132>
    Instruction i = p->code[pc];
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
    OpCode op = GET_OPCODE(i);
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int a = GETARG_A(i);
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	09db      	lsrs	r3, r3, #7
 8008670:	b2db      	uxtb	r3, r3
 8008672:	61fb      	str	r3, [r7, #28]
    int change;  /* true if current instruction changed 'reg' */
    switch (op) {
 8008674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008678:	2b4c      	cmp	r3, #76	; 0x4c
 800867a:	d01d      	beq.n	80086b8 <findsetreg+0xa4>
 800867c:	2b4c      	cmp	r3, #76	; 0x4c
 800867e:	dc46      	bgt.n	800870e <findsetreg+0xfa>
 8008680:	2b45      	cmp	r3, #69	; 0x45
 8008682:	dc44      	bgt.n	800870e <findsetreg+0xfa>
 8008684:	2b44      	cmp	r3, #68	; 0x44
 8008686:	da21      	bge.n	80086cc <findsetreg+0xb8>
 8008688:	2b08      	cmp	r3, #8
 800868a:	d002      	beq.n	8008692 <findsetreg+0x7e>
 800868c:	2b38      	cmp	r3, #56	; 0x38
 800868e:	d026      	beq.n	80086de <findsetreg+0xca>
 8008690:	e03d      	b.n	800870e <findsetreg+0xfa>
      case OP_LOADNIL: {  /* set registers from 'a' to 'a+b' */
        int b = GETARG_B(i);
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	0c1b      	lsrs	r3, r3, #16
 8008696:	b2db      	uxtb	r3, r3
 8008698:	613b      	str	r3, [r7, #16]
        change = (a <= reg && reg <= a + b);
 800869a:	69fa      	ldr	r2, [r7, #28]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	dc07      	bgt.n	80086b2 <findsetreg+0x9e>
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	4413      	add	r3, r2
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	dc01      	bgt.n	80086b2 <findsetreg+0x9e>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e000      	b.n	80086b4 <findsetreg+0xa0>
 80086b2:	2300      	movs	r3, #0
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80086b6:	e03b      	b.n	8008730 <findsetreg+0x11c>
      }
      case OP_TFORCALL: {  /* affect all regs above its base */
        change = (reg >= a + 2);
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	3301      	adds	r3, #1
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	429a      	cmp	r2, r3
 80086c0:	bfcc      	ite	gt
 80086c2:	2301      	movgt	r3, #1
 80086c4:	2300      	movle	r3, #0
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80086ca:	e031      	b.n	8008730 <findsetreg+0x11c>
      }
      case OP_CALL:
      case OP_TAILCALL: {  /* affect all registers above base */
        change = (reg >= a);
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	bfac      	ite	ge
 80086d4:	2301      	movge	r3, #1
 80086d6:	2300      	movlt	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80086dc:	e028      	b.n	8008730 <findsetreg+0x11c>
      }
      case OP_JMP: {  /* doesn't change registers, but changes 'jmptarget' */
        int b = GETARG_sJ(i);
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	09db      	lsrs	r3, r3, #7
 80086e2:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80086e6:	3301      	adds	r3, #1
 80086e8:	61bb      	str	r3, [r7, #24]
        int dest = pc + 1 + b;
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	3301      	adds	r3, #1
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	4413      	add	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]
        /* jump does not skip 'lastpc' and is larger than current one? */
        if (dest <= lastpc && dest > jmptarget)
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	dc05      	bgt.n	8008708 <findsetreg+0xf4>
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	429a      	cmp	r2, r3
 8008702:	dd01      	ble.n	8008708 <findsetreg+0xf4>
          jmptarget = dest;  /* update 'jmptarget' */
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c
        change = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800870c:	e010      	b.n	8008730 <findsetreg+0x11c>
      }
      default:  /* any instruction that sets A */
        change = (testAMode(op) && reg == a);
 800870e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008712:	4a11      	ldr	r2, [pc, #68]	; (8008758 <findsetreg+0x144>)
 8008714:	5cd3      	ldrb	r3, [r2, r3]
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <findsetreg+0x116>
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	429a      	cmp	r2, r3
 8008724:	d101      	bne.n	800872a <findsetreg+0x116>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <findsetreg+0x118>
 800872a:	2300      	movs	r3, #0
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800872e:	bf00      	nop
    }
    if (change)
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	d004      	beq.n	8008740 <findsetreg+0x12c>
      setreg = filterpc(pc, jmptarget);
 8008736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008738:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800873a:	f7ff ff57 	bl	80085ec <filterpc>
 800873e:	6338      	str	r0, [r7, #48]	; 0x30
  for (pc = 0; pc < lastpc; pc++) {
 8008740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008742:	3301      	adds	r3, #1
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
 8008746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	429a      	cmp	r2, r3
 800874c:	db81      	blt.n	8008652 <findsetreg+0x3e>
  }
  return setreg;
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008750:	4618      	mov	r0, r3
 8008752:	3738      	adds	r7, #56	; 0x38
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	08022c30 	.word	0x08022c30

0800875c <gxf>:

/*
** Check whether table being indexed by instruction 'i' is the
** environment '_ENV'
*/
static const char *gxf (const Proto *p, int pc, Instruction i, int isup) {
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
  int t = GETARG_B(i);  /* table index */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	0c1b      	lsrs	r3, r3, #16
 800876e:	b2db      	uxtb	r3, r3
 8008770:	617b      	str	r3, [r7, #20]
  const char *name;  /* name of indexed variable */
  if (isup)  /* is an upvalue? */
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d006      	beq.n	8008786 <gxf+0x2a>
    name = upvalname(p, t);
 8008778:	6979      	ldr	r1, [r7, #20]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7ff fe26 	bl	80083cc <upvalname>
 8008780:	4603      	mov	r3, r0
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	e006      	b.n	8008794 <gxf+0x38>
  else
    getobjname(p, pc, t, &name);
 8008786:	f107 0310 	add.w	r3, r7, #16
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f818 	bl	80087c4 <getobjname>
  return (name && strcmp(name, LUA_ENV) == 0) ? "global" : "field";
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <gxf+0x52>
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	4906      	ldr	r1, [pc, #24]	; (80087b8 <gxf+0x5c>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f7 fd74 	bl	800028c <strcmp>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <gxf+0x52>
 80087aa:	4b04      	ldr	r3, [pc, #16]	; (80087bc <gxf+0x60>)
 80087ac:	e000      	b.n	80087b0 <gxf+0x54>
 80087ae:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <gxf+0x64>)
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	08022010 	.word	0x08022010
 80087bc:	08022018 	.word	0x08022018
 80087c0:	08022020 	.word	0x08022020

080087c4 <getobjname>:


static const char *getobjname (const Proto *p, int lastpc, int reg,
                               const char **name) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08c      	sub	sp, #48	; 0x30
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
  int pc;
  *name = luaF_getlocalname(p, reg + 1, lastpc);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3301      	adds	r3, #1
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4619      	mov	r1, r3
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f001 ff6d 	bl	800a6ba <luaF_getlocalname>
 80087e0:	4602      	mov	r2, r0
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	601a      	str	r2, [r3, #0]
  if (*name)  /* is a local? */
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <getobjname+0x2e>
    return "local";
 80087ee:	4b6d      	ldr	r3, [pc, #436]	; (80089a4 <getobjname+0x1e0>)
 80087f0:	e0d4      	b.n	800899c <getobjname+0x1d8>
  /* else try symbolic execution */
  pc = findsetreg(p, lastpc, reg);
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f7ff ff0c 	bl	8008614 <findsetreg>
 80087fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (pc != -1) {  /* could find instruction? */
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	f000 80c2 	beq.w	800898c <getobjname+0x1c8>
    Instruction i = p->code[pc];
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	62bb      	str	r3, [r7, #40]	; 0x28
    OpCode op = GET_OPCODE(i);
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	b2db      	uxtb	r3, r3
 800881a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800881e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    switch (op) {
 8008822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008826:	2b14      	cmp	r3, #20
 8008828:	f200 80b2 	bhi.w	8008990 <getobjname+0x1cc>
 800882c:	a201      	add	r2, pc, #4	; (adr r2, 8008834 <getobjname+0x70>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008889 	.word	0x08008889
 8008838:	08008991 	.word	0x08008991
 800883c:	08008991 	.word	0x08008991
 8008840:	08008931 	.word	0x08008931
 8008844:	08008931 	.word	0x08008931
 8008848:	08008991 	.word	0x08008991
 800884c:	08008991 	.word	0x08008991
 8008850:	08008991 	.word	0x08008991
 8008854:	08008991 	.word	0x08008991
 8008858:	08008919 	.word	0x08008919
 800885c:	08008991 	.word	0x08008991
 8008860:	080088ad 	.word	0x080088ad
 8008864:	080088cd 	.word	0x080088cd
 8008868:	080088ef 	.word	0x080088ef
 800886c:	080088f9 	.word	0x080088f9
 8008870:	08008991 	.word	0x08008991
 8008874:	08008991 	.word	0x08008991
 8008878:	08008991 	.word	0x08008991
 800887c:	08008991 	.word	0x08008991
 8008880:	08008991 	.word	0x08008991
 8008884:	0800897d 	.word	0x0800897d
      case OP_MOVE: {
        int b = GETARG_B(i);  /* move from 'b' to 'a' */
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	0c1b      	lsrs	r3, r3, #16
 800888c:	b2db      	uxtb	r3, r3
 800888e:	613b      	str	r3, [r7, #16]
        if (b < GETARG_A(i))
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	09db      	lsrs	r3, r3, #7
 8008894:	b2db      	uxtb	r3, r3
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	429a      	cmp	r2, r3
 800889a:	da7b      	bge.n	8008994 <getobjname+0x1d0>
          return getobjname(p, pc, b, name);  /* get name for 'b' */
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f7ff ff8e 	bl	80087c4 <getobjname>
 80088a8:	4603      	mov	r3, r0
 80088aa:	e077      	b.n	800899c <getobjname+0x1d8>
        break;
      }
      case OP_GETTABUP: {
        int k = GETARG_C(i);  /* key index */
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	0e1b      	lsrs	r3, r3, #24
 80088b0:	61bb      	str	r3, [r7, #24]
        kname(p, k, name);
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	69b9      	ldr	r1, [r7, #24]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff fe38 	bl	800852c <kname>
        return gxf(p, pc, i, 1);
 80088bc:	2301      	movs	r3, #1
 80088be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff ff4a 	bl	800875c <gxf>
 80088c8:	4603      	mov	r3, r0
 80088ca:	e067      	b.n	800899c <getobjname+0x1d8>
      }
      case OP_GETTABLE: {
        int k = GETARG_C(i);  /* key index */
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	0e1b      	lsrs	r3, r3, #24
 80088d0:	61fb      	str	r3, [r7, #28]
        rname(p, pc, k, name);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f7ff fe49 	bl	8008570 <rname>
        return gxf(p, pc, i, 0);
 80088de:	2300      	movs	r3, #0
 80088e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff ff39 	bl	800875c <gxf>
 80088ea:	4603      	mov	r3, r0
 80088ec:	e056      	b.n	800899c <getobjname+0x1d8>
      }
      case OP_GETI: {
        *name = "integer index";
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	4a2d      	ldr	r2, [pc, #180]	; (80089a8 <getobjname+0x1e4>)
 80088f2:	601a      	str	r2, [r3, #0]
        return "field";
 80088f4:	4b2d      	ldr	r3, [pc, #180]	; (80089ac <getobjname+0x1e8>)
 80088f6:	e051      	b.n	800899c <getobjname+0x1d8>
      }
      case OP_GETFIELD: {
        int k = GETARG_C(i);  /* key index */
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	0e1b      	lsrs	r3, r3, #24
 80088fc:	623b      	str	r3, [r7, #32]
        kname(p, k, name);
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	6a39      	ldr	r1, [r7, #32]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff fe12 	bl	800852c <kname>
        return gxf(p, pc, i, 0);
 8008908:	2300      	movs	r3, #0
 800890a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff ff24 	bl	800875c <gxf>
 8008914:	4603      	mov	r3, r0
 8008916:	e041      	b.n	800899c <getobjname+0x1d8>
      }
      case OP_GETUPVAL: {
        *name = upvalname(p, GETARG_B(i));
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	b2db      	uxtb	r3, r3
 800891e:	4619      	mov	r1, r3
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f7ff fd53 	bl	80083cc <upvalname>
 8008926:	4602      	mov	r2, r0
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	601a      	str	r2, [r3, #0]
        return "upvalue";
 800892c:	4b20      	ldr	r3, [pc, #128]	; (80089b0 <getobjname+0x1ec>)
 800892e:	e035      	b.n	800899c <getobjname+0x1d8>
      }
      case OP_LOADK:
      case OP_LOADKX: {
        int b = (op == OP_LOADK) ? GETARG_Bx(i)
                                 : GETARG_Ax(p->code[pc + 1]);
 8008930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008934:	2b03      	cmp	r3, #3
 8008936:	d102      	bne.n	800893e <getobjname+0x17a>
        int b = (op == OP_LOADK) ? GETARG_Bx(i)
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	0bdb      	lsrs	r3, r3, #15
 800893c:	e007      	b.n	800894e <getobjname+0x18a>
                                 : GETARG_Ax(p->code[pc + 1]);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	3301      	adds	r3, #1
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	09db      	lsrs	r3, r3, #7
        int b = (op == OP_LOADK) ? GETARG_Bx(i)
 800894e:	617b      	str	r3, [r7, #20]
        if (ttisstring(&p->k[b])) {
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	4413      	add	r3, r2
 800895a:	791b      	ldrb	r3, [r3, #4]
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	2b04      	cmp	r3, #4
 8008962:	d119      	bne.n	8008998 <getobjname+0x1d4>
          *name = svalue(&p->k[b]);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	4413      	add	r3, r2
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f103 0210 	add.w	r2, r3, #16
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	601a      	str	r2, [r3, #0]
          return "constant";
 8008978:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <getobjname+0x1f0>)
 800897a:	e00f      	b.n	800899c <getobjname+0x1d8>
        }
        break;
      }
      case OP_SELF: {
        rkname(p, pc, i, name);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f7ff fe12 	bl	80085ac <rkname>
        return "method";
 8008988:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <getobjname+0x1f4>)
 800898a:	e007      	b.n	800899c <getobjname+0x1d8>
      }
      default: break;  /* go through to return NULL */
    }
  }
 800898c:	bf00      	nop
 800898e:	e004      	b.n	800899a <getobjname+0x1d6>
      default: break;  /* go through to return NULL */
 8008990:	bf00      	nop
 8008992:	e002      	b.n	800899a <getobjname+0x1d6>
        break;
 8008994:	bf00      	nop
 8008996:	e000      	b.n	800899a <getobjname+0x1d6>
        break;
 8008998:	bf00      	nop
  return NULL;  /* could not find reasonable name */
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3730      	adds	r7, #48	; 0x30
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	08022028 	.word	0x08022028
 80089a8:	08022030 	.word	0x08022030
 80089ac:	08022020 	.word	0x08022020
 80089b0:	08022040 	.word	0x08022040
 80089b4:	08022048 	.word	0x08022048
 80089b8:	08022054 	.word	0x08022054

080089bc <funcnamefromcode>:
** (Only works when function was called by a Lua function.)
** Returns what the name is (e.g., "for iterator", "method",
** "metamethod") and sets '*name' to point to the name.
*/
static const char *funcnamefromcode (lua_State *L, const Proto *p,
                                     int pc, const char **name) {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
  TMS tm = (TMS)0;  /* (initial value avoids warnings) */
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
  Instruction i = p->code[pc];  /* calling instruction */
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	613b      	str	r3, [r7, #16]
  switch (GET_OPCODE(i)) {
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e4:	3b0b      	subs	r3, #11
 80089e6:	2b41      	cmp	r3, #65	; 0x41
 80089e8:	f200 80b9 	bhi.w	8008b5e <funcnamefromcode+0x1a2>
 80089ec:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <funcnamefromcode+0x38>)
 80089ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f2:	bf00      	nop
 80089f4:	08008b1b 	.word	0x08008b1b
 80089f8:	08008b1b 	.word	0x08008b1b
 80089fc:	08008b1b 	.word	0x08008b1b
 8008a00:	08008b1b 	.word	0x08008b1b
 8008a04:	08008b21 	.word	0x08008b21
 8008a08:	08008b21 	.word	0x08008b21
 8008a0c:	08008b21 	.word	0x08008b21
 8008a10:	08008b21 	.word	0x08008b21
 8008a14:	08008b5f 	.word	0x08008b5f
 8008a18:	08008b1b 	.word	0x08008b1b
 8008a1c:	08008b5f 	.word	0x08008b5f
 8008a20:	08008b5f 	.word	0x08008b5f
 8008a24:	08008b5f 	.word	0x08008b5f
 8008a28:	08008b5f 	.word	0x08008b5f
 8008a2c:	08008b5f 	.word	0x08008b5f
 8008a30:	08008b5f 	.word	0x08008b5f
 8008a34:	08008b5f 	.word	0x08008b5f
 8008a38:	08008b5f 	.word	0x08008b5f
 8008a3c:	08008b5f 	.word	0x08008b5f
 8008a40:	08008b5f 	.word	0x08008b5f
 8008a44:	08008b5f 	.word	0x08008b5f
 8008a48:	08008b5f 	.word	0x08008b5f
 8008a4c:	08008b5f 	.word	0x08008b5f
 8008a50:	08008b5f 	.word	0x08008b5f
 8008a54:	08008b5f 	.word	0x08008b5f
 8008a58:	08008b5f 	.word	0x08008b5f
 8008a5c:	08008b5f 	.word	0x08008b5f
 8008a60:	08008b5f 	.word	0x08008b5f
 8008a64:	08008b5f 	.word	0x08008b5f
 8008a68:	08008b5f 	.word	0x08008b5f
 8008a6c:	08008b5f 	.word	0x08008b5f
 8008a70:	08008b5f 	.word	0x08008b5f
 8008a74:	08008b5f 	.word	0x08008b5f
 8008a78:	08008b5f 	.word	0x08008b5f
 8008a7c:	08008b5f 	.word	0x08008b5f
 8008a80:	08008b27 	.word	0x08008b27
 8008a84:	08008b27 	.word	0x08008b27
 8008a88:	08008b27 	.word	0x08008b27
 8008a8c:	08008b2f 	.word	0x08008b2f
 8008a90:	08008b35 	.word	0x08008b35
 8008a94:	08008b5f 	.word	0x08008b5f
 8008a98:	08008b3b 	.word	0x08008b3b
 8008a9c:	08008b41 	.word	0x08008b41
 8008aa0:	08008b59 	.word	0x08008b59
 8008aa4:	08008b5f 	.word	0x08008b5f
 8008aa8:	08008b5f 	.word	0x08008b5f
 8008aac:	08008b47 	.word	0x08008b47
 8008ab0:	08008b4d 	.word	0x08008b4d
 8008ab4:	08008b53 	.word	0x08008b53
 8008ab8:	08008b5f 	.word	0x08008b5f
 8008abc:	08008b5f 	.word	0x08008b5f
 8008ac0:	08008b4d 	.word	0x08008b4d
 8008ac4:	08008b53 	.word	0x08008b53
 8008ac8:	08008b4d 	.word	0x08008b4d
 8008acc:	08008b53 	.word	0x08008b53
 8008ad0:	08008b5f 	.word	0x08008b5f
 8008ad4:	08008b5f 	.word	0x08008b5f
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008afd 	.word	0x08008afd
 8008ae0:	08008b59 	.word	0x08008b59
 8008ae4:	08008b5f 	.word	0x08008b5f
 8008ae8:	08008b5f 	.word	0x08008b5f
 8008aec:	08008b5f 	.word	0x08008b5f
 8008af0:	08008b5f 	.word	0x08008b5f
 8008af4:	08008b5f 	.word	0x08008b5f
 8008af8:	08008b11 	.word	0x08008b11
    case OP_CALL:
    case OP_TAILCALL:
      return getobjname(p, pc, GETARG_A(i), name);  /* get function name */
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	09db      	lsrs	r3, r3, #7
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6879      	ldr	r1, [r7, #4]
 8008b06:	68b8      	ldr	r0, [r7, #8]
 8008b08:	f7ff fe5c 	bl	80087c4 <getobjname>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	e033      	b.n	8008b78 <funcnamefromcode+0x1bc>
    case OP_TFORCALL: {  /* for iterator */
      *name = "for iterator";
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	4a1b      	ldr	r2, [pc, #108]	; (8008b80 <funcnamefromcode+0x1c4>)
 8008b14:	601a      	str	r2, [r3, #0]
       return "for iterator";
 8008b16:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <funcnamefromcode+0x1c4>)
 8008b18:	e02e      	b.n	8008b78 <funcnamefromcode+0x1bc>
    }
    /* other instructions can do calls through metamethods */
    case OP_SELF: case OP_GETTABUP: case OP_GETTABLE:
    case OP_GETI: case OP_GETFIELD:
      tm = TM_INDEX;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1e:	e020      	b.n	8008b62 <funcnamefromcode+0x1a6>
    case OP_SETTABUP: case OP_SETTABLE: case OP_SETI: case OP_SETFIELD:
      tm = TM_NEWINDEX;
 8008b20:	2301      	movs	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
      break;
 8008b24:	e01d      	b.n	8008b62 <funcnamefromcode+0x1a6>
    case OP_MMBIN: case OP_MMBINI: case OP_MMBINK: {
      tm = cast(TMS, GETARG_C(i));
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	0e1b      	lsrs	r3, r3, #24
 8008b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b2c:	e019      	b.n	8008b62 <funcnamefromcode+0x1a6>
    }
    case OP_UNM: tm = TM_UNM; break;
 8008b2e:	2312      	movs	r3, #18
 8008b30:	75fb      	strb	r3, [r7, #23]
 8008b32:	e016      	b.n	8008b62 <funcnamefromcode+0x1a6>
    case OP_BNOT: tm = TM_BNOT; break;
 8008b34:	2313      	movs	r3, #19
 8008b36:	75fb      	strb	r3, [r7, #23]
 8008b38:	e013      	b.n	8008b62 <funcnamefromcode+0x1a6>
    case OP_LEN: tm = TM_LEN; break;
 8008b3a:	2304      	movs	r3, #4
 8008b3c:	75fb      	strb	r3, [r7, #23]
 8008b3e:	e010      	b.n	8008b62 <funcnamefromcode+0x1a6>
    case OP_CONCAT: tm = TM_CONCAT; break;
 8008b40:	2316      	movs	r3, #22
 8008b42:	75fb      	strb	r3, [r7, #23]
 8008b44:	e00d      	b.n	8008b62 <funcnamefromcode+0x1a6>
    case OP_EQ: tm = TM_EQ; break;
 8008b46:	2305      	movs	r3, #5
 8008b48:	75fb      	strb	r3, [r7, #23]
 8008b4a:	e00a      	b.n	8008b62 <funcnamefromcode+0x1a6>
    /* no cases for OP_EQI and OP_EQK, as they don't call metamethods */
    case OP_LT: case OP_LTI: case OP_GTI: tm = TM_LT; break;
 8008b4c:	2314      	movs	r3, #20
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	e007      	b.n	8008b62 <funcnamefromcode+0x1a6>
    case OP_LE: case OP_LEI: case OP_GEI: tm = TM_LE; break;
 8008b52:	2315      	movs	r3, #21
 8008b54:	75fb      	strb	r3, [r7, #23]
 8008b56:	e004      	b.n	8008b62 <funcnamefromcode+0x1a6>
    case OP_CLOSE: case OP_RETURN: tm = TM_CLOSE; break;
 8008b58:	2318      	movs	r3, #24
 8008b5a:	75fb      	strb	r3, [r7, #23]
 8008b5c:	e001      	b.n	8008b62 <funcnamefromcode+0x1a6>
    default:
      return NULL;  /* cannot find a reasonable name */
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e00a      	b.n	8008b78 <funcnamefromcode+0x1bc>
  }
  *name = getstr(G(L)->tmname[tm]) + 2;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	7dfa      	ldrb	r2, [r7, #23]
 8008b68:	3226      	adds	r2, #38	; 0x26
 8008b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6e:	3310      	adds	r3, #16
 8008b70:	1c9a      	adds	r2, r3, #2
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	601a      	str	r2, [r3, #0]
  return "metamethod";
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <funcnamefromcode+0x1c8>)
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	0802205c 	.word	0x0802205c
 8008b84:	0802206c 	.word	0x0802206c

08008b88 <funcnamefromcall>:

/*
** Try to find a name for a function based on how it was called.
*/
static const char *funcnamefromcall (lua_State *L, CallInfo *ci,
                                                   const char **name) {
 8008b88:	b590      	push	{r4, r7, lr}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  if (ci->callstatus & CIST_HOOKED) {  /* was it called inside a hook? */
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <funcnamefromcall+0x22>
    *name = "?";
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a14      	ldr	r2, [pc, #80]	; (8008bf4 <funcnamefromcall+0x6c>)
 8008ba4:	601a      	str	r2, [r3, #0]
    return "hook";
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <funcnamefromcall+0x70>)
 8008ba8:	e020      	b.n	8008bec <funcnamefromcall+0x64>
  }
  else if (ci->callstatus & CIST_FIN) {  /* was it called as a finalizer? */
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <funcnamefromcall+0x38>
    *name = "__gc";
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a10      	ldr	r2, [pc, #64]	; (8008bfc <funcnamefromcall+0x74>)
 8008bba:	601a      	str	r2, [r3, #0]
    return "metamethod";  /* report it as such */
 8008bbc:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <funcnamefromcall+0x78>)
 8008bbe:	e015      	b.n	8008bec <funcnamefromcall+0x64>
  }
  else if (isLua(ci))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10e      	bne.n	8008bea <funcnamefromcall+0x62>
    return funcnamefromcode(L, ci_func(ci)->p, currentpc(ci), name);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68dc      	ldr	r4, [r3, #12]
 8008bd4:	68b8      	ldr	r0, [r7, #8]
 8008bd6:	f7ff fb63 	bl	80082a0 <currentpc>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4621      	mov	r1, r4
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f7ff feeb 	bl	80089bc <funcnamefromcode>
 8008be6:	4603      	mov	r3, r0
 8008be8:	e000      	b.n	8008bec <funcnamefromcall+0x64>
  else
    return NULL;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}
 8008bf4:	08021fc4 	.word	0x08021fc4
 8008bf8:	08022078 	.word	0x08022078
 8008bfc:	08022080 	.word	0x08022080
 8008c00:	0802206c 	.word	0x0802206c

08008c04 <isinstack>:
** Check whether pointer 'o' points to some value in the stack
** frame of the current function. Because 'o' may not point to a
** value in this stack, we cannot compare it with the region
** boundaries (undefined behaviour in ISO C).
*/
static int isinstack (CallInfo *ci, const TValue *o) {
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  StkId pos;
  for (pos = ci->func + 1; pos < ci->top; pos++) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3308      	adds	r3, #8
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	e008      	b.n	8008c2a <isinstack+0x26>
    if (o == s2v(pos))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d101      	bne.n	8008c24 <isinstack+0x20>
      return 1;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e008      	b.n	8008c36 <isinstack+0x32>
  for (pos = ci->func + 1; pos < ci->top; pos++) {
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3308      	adds	r3, #8
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d3f1      	bcc.n	8008c18 <isinstack+0x14>
  }
  return 0;  /* not found */
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
	...

08008c44 <getupvalname>:
** Checks whether value 'o' came from an upvalue. (That can only happen
** with instructions OP_GETTABUP/OP_SETTABUP, which operate directly on
** upvalues.)
*/
static const char *getupvalname (CallInfo *ci, const TValue *o,
                                 const char **name) {
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  LClosure *c = ci_func(ci);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	613b      	str	r3, [r7, #16]
  int i;
  for (i = 0; i < c->nupvalues; i++) {
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
 8008c5c:	e016      	b.n	8008c8c <getupvalname+0x48>
    if (c->upvals[i]->v == o) {
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	3204      	adds	r2, #4
 8008c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d10a      	bne.n	8008c86 <getupvalname+0x42>
      *name = upvalname(c->p, i);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	6979      	ldr	r1, [r7, #20]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff fba8 	bl	80083cc <upvalname>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
      return "upvalue";
 8008c82:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <getupvalname+0x60>)
 8008c84:	e009      	b.n	8008c9a <getupvalname+0x56>
  for (i = 0; i < c->nupvalues; i++) {
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	617b      	str	r3, [r7, #20]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	799b      	ldrb	r3, [r3, #6]
 8008c90:	461a      	mov	r2, r3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	4293      	cmp	r3, r2
 8008c96:	dbe2      	blt.n	8008c5e <getupvalname+0x1a>
    }
  }
  return NULL;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08022040 	.word	0x08022040

08008ca8 <formatvarinfo>:


static const char *formatvarinfo (lua_State *L, const char *kind,
                                                const char *name) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
  if (kind == NULL)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <formatvarinfo+0x16>
    return "";  /* no information */
 8008cba:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <formatvarinfo+0x2c>)
 8008cbc:	e006      	b.n	8008ccc <formatvarinfo+0x24>
  else
    return luaO_pushfstring(L, " (%s '%s')", kind, name);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	4905      	ldr	r1, [pc, #20]	; (8008cd8 <formatvarinfo+0x30>)
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f004 fe5d 	bl	800d984 <luaO_pushfstring>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	0802200c 	.word	0x0802200c
 8008cd8:	08022088 	.word	0x08022088

08008cdc <varinfo>:

/*
** Build a string with a "description" for the value 'o', such as
** "variable 'x'" or "upvalue 'y'".
*/
static const char *varinfo (lua_State *L, const TValue *o) {
 8008cdc:	b590      	push	{r4, r7, lr}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	613b      	str	r3, [r7, #16]
  const char *name = NULL;  /* to avoid warnings */
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]
  const char *kind = NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]
  if (isLua(ci)) {
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d126      	bne.n	8008d4e <varinfo+0x72>
    kind = getupvalname(ci, o, &name);  /* check whether 'o' is an upvalue */
 8008d00:	f107 030c 	add.w	r3, r7, #12
 8008d04:	461a      	mov	r2, r3
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6938      	ldr	r0, [r7, #16]
 8008d0a:	f7ff ff9b 	bl	8008c44 <getupvalname>
 8008d0e:	6178      	str	r0, [r7, #20]
    if (!kind && isinstack(ci, o))  /* no? try a register */
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d11b      	bne.n	8008d4e <varinfo+0x72>
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6938      	ldr	r0, [r7, #16]
 8008d1a:	f7ff ff73 	bl	8008c04 <isinstack>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d014      	beq.n	8008d4e <varinfo+0x72>
      kind = getobjname(ci_func(ci)->p, currentpc(ci),
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68dc      	ldr	r4, [r3, #12]
 8008d2c:	6938      	ldr	r0, [r7, #16]
 8008d2e:	f7ff fab7 	bl	80082a0 <currentpc>
 8008d32:	4601      	mov	r1, r0
                        cast_int(cast(StkId, o) - (ci->func + 1)), &name);
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	1ad3      	subs	r3, r2, r3
      kind = getobjname(ci_func(ci)->p, currentpc(ci),
 8008d3e:	10db      	asrs	r3, r3, #3
 8008d40:	461a      	mov	r2, r3
 8008d42:	f107 030c 	add.w	r3, r7, #12
 8008d46:	4620      	mov	r0, r4
 8008d48:	f7ff fd3c 	bl	80087c4 <getobjname>
 8008d4c:	6178      	str	r0, [r7, #20]
  }
  return formatvarinfo(L, kind, name);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	461a      	mov	r2, r3
 8008d52:	6979      	ldr	r1, [r7, #20]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff ffa7 	bl	8008ca8 <formatvarinfo>
 8008d5a:	4603      	mov	r3, r0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	371c      	adds	r7, #28
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd90      	pop	{r4, r7, pc}

08008d64 <typeerror>:

/*
** Raise a type error
*/
static l_noret typeerror (lua_State *L, const TValue *o, const char *op,
                          const char *extra) {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
  const char *t = luaT_objtypename(L, o);
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f007 f85b 	bl	800fe30 <luaT_objtypename>
 8008d7a:	6178      	str	r0, [r7, #20]
  luaG_runerror(L, "attempt to %s a %s value%s", op, t, extra);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	4901      	ldr	r1, [pc, #4]	; (8008d8c <typeerror+0x28>)
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 f931 	bl	8008fee <luaG_runerror>
 8008d8c:	08022094 	.word	0x08022094

08008d90 <luaG_typeerror>:

/*
** Raise a type error with "standard" information about the faulty
** object 'o' (using 'varinfo').
*/
l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
  typeerror(L, o, op, varinfo(L, o));
 8008d9c:	68b9      	ldr	r1, [r7, #8]
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f7ff ff9c 	bl	8008cdc <varinfo>
 8008da4:	4603      	mov	r3, r0
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff ffda 	bl	8008d64 <typeerror>

08008db0 <luaG_callerror>:
/*
** Raise an error for calling a non-callable object. Try to find a name
** for the object based on how it was called ('funcnamefromcall'); if it
** cannot get a name there, try 'varinfo'.
*/
l_noret luaG_callerror (lua_State *L, const TValue *o) {
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	617b      	str	r3, [r7, #20]
  const char *name = NULL;  /* to avoid warnings */
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60bb      	str	r3, [r7, #8]
  const char *kind = funcnamefromcall(L, ci, &name);
 8008dc4:	f107 0308 	add.w	r3, r7, #8
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6979      	ldr	r1, [r7, #20]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fedb 	bl	8008b88 <funcnamefromcall>
 8008dd2:	6138      	str	r0, [r7, #16]
  const char *extra = kind ? formatvarinfo(L, kind, name) : varinfo(L, o);
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d007      	beq.n	8008dea <luaG_callerror+0x3a>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	6939      	ldr	r1, [r7, #16]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7ff ff61 	bl	8008ca8 <formatvarinfo>
 8008de6:	4603      	mov	r3, r0
 8008de8:	e004      	b.n	8008df4 <luaG_callerror+0x44>
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff ff75 	bl	8008cdc <varinfo>
 8008df2:	4603      	mov	r3, r0
 8008df4:	60fb      	str	r3, [r7, #12]
  typeerror(L, o, "call", extra);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4a02      	ldr	r2, [pc, #8]	; (8008e04 <luaG_callerror+0x54>)
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff ffb1 	bl	8008d64 <typeerror>
 8008e02:	bf00      	nop
 8008e04:	080220b0 	.word	0x080220b0

08008e08 <luaG_forerror>:
}


l_noret luaG_forerror (lua_State *L, const TValue *o, const char *what) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  luaG_runerror(L, "bad 'for' %s (number expected, got %s)",
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f007 f80a 	bl	800fe30 <luaT_objtypename>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	4901      	ldr	r1, [pc, #4]	; (8008e28 <luaG_forerror+0x20>)
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 f8e3 	bl	8008fee <luaG_runerror>
 8008e28:	080220b8 	.word	0x080220b8

08008e2c <luaG_concaterror>:
                   what, luaT_objtypename(L, o));
}


l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  if (ttisstring(p1) || cvt2str(p1)) p1 = p2;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	791b      	ldrb	r3, [r3, #4]
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	d005      	beq.n	8008e50 <luaG_concaterror+0x24>
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	791b      	ldrb	r3, [r3, #4]
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d101      	bne.n	8008e54 <luaG_concaterror+0x28>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60bb      	str	r3, [r7, #8]
  luaG_typeerror(L, p1, "concatenate");
 8008e54:	4a02      	ldr	r2, [pc, #8]	; (8008e60 <luaG_concaterror+0x34>)
 8008e56:	68b9      	ldr	r1, [r7, #8]
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff ff99 	bl	8008d90 <luaG_typeerror>
 8008e5e:	bf00      	nop
 8008e60:	080220e0 	.word	0x080220e0

08008e64 <luaG_opinterror>:
}


l_noret luaG_opinterror (lua_State *L, const TValue *p1,
                         const TValue *p2, const char *msg) {
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
  if (!ttisnumber(p1))  /* first operand is wrong? */
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	791b      	ldrb	r3, [r3, #4]
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d001      	beq.n	8008e82 <luaG_opinterror+0x1e>
    p2 = p1;  /* now second is wrong */
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	607b      	str	r3, [r7, #4]
  luaG_typeerror(L, p2, msg);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f7ff ff82 	bl	8008d90 <luaG_typeerror>

08008e8c <luaG_tointerror>:


/*
** Error when both values are convertible to numbers, but not to integers
*/
l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  lua_Integer temp;
  if (!luaV_tointegerns(p1, &temp, LUA_FLOORN2I))
 8008e98:	f107 0314 	add.w	r3, r7, #20
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68b8      	ldr	r0, [r7, #8]
 8008ea2:	f007 fd2d 	bl	8010900 <luaV_tointegerns>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <luaG_tointerror+0x24>
    p2 = p1;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	607b      	str	r3, [r7, #4]
  luaG_runerror(L, "number%s has no integer representation", varinfo(L, p2));
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff ff12 	bl	8008cdc <varinfo>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4901      	ldr	r1, [pc, #4]	; (8008ec4 <luaG_tointerror+0x38>)
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 f895 	bl	8008fee <luaG_runerror>
 8008ec4:	080220ec 	.word	0x080220ec

08008ec8 <luaG_ordererror>:
}


l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
  const char *t1 = luaT_objtypename(L, p1);
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f006 ffaa 	bl	800fe30 <luaT_objtypename>
 8008edc:	6178      	str	r0, [r7, #20]
  const char *t2 = luaT_objtypename(L, p2);
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f006 ffa5 	bl	800fe30 <luaT_objtypename>
 8008ee6:	6138      	str	r0, [r7, #16]
  if (strcmp(t1, t2) == 0)
 8008ee8:	6939      	ldr	r1, [r7, #16]
 8008eea:	6978      	ldr	r0, [r7, #20]
 8008eec:	f7f7 f9ce 	bl	800028c <strcmp>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d104      	bne.n	8008f00 <luaG_ordererror+0x38>
    luaG_runerror(L, "attempt to compare two %s values", t1);
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4904      	ldr	r1, [pc, #16]	; (8008f0c <luaG_ordererror+0x44>)
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 f877 	bl	8008fee <luaG_runerror>
  else
    luaG_runerror(L, "attempt to compare %s with %s", t1, t2);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4902      	ldr	r1, [pc, #8]	; (8008f10 <luaG_ordererror+0x48>)
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f871 	bl	8008fee <luaG_runerror>
 8008f0c:	08022114 	.word	0x08022114
 8008f10:	08022138 	.word	0x08022138

08008f14 <luaG_addinfo>:
}


/* add src:line information to 'msg' */
const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,
                                        int line) {
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b096      	sub	sp, #88	; 0x58
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	603b      	str	r3, [r7, #0]
  char buff[LUA_IDSIZE];
  if (src)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d011      	beq.n	8008f4c <luaG_addinfo+0x38>
    luaO_chunkid(buff, getstr(src), tsslen(src));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f103 0110 	add.w	r1, r3, #16
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	791b      	ldrb	r3, [r3, #4]
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d102      	bne.n	8008f3c <luaG_addinfo+0x28>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	79db      	ldrb	r3, [r3, #7]
 8008f3a:	e001      	b.n	8008f40 <luaG_addinfo+0x2c>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f107 0014 	add.w	r0, r7, #20
 8008f44:	461a      	mov	r2, r3
 8008f46:	f004 fd33 	bl	800d9b0 <luaO_chunkid>
 8008f4a:	e003      	b.n	8008f54 <luaG_addinfo+0x40>
  else {  /* no source available; use "?" instead */
    buff[0] = '?'; buff[1] = '\0';
 8008f4c:	233f      	movs	r3, #63	; 0x3f
 8008f4e:	753b      	strb	r3, [r7, #20]
 8008f50:	2300      	movs	r3, #0
 8008f52:	757b      	strb	r3, [r7, #21]
  }
  return luaO_pushfstring(L, "%s:%d: %s", buff, line, msg);
 8008f54:	f107 0214 	add.w	r2, r7, #20
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	4904      	ldr	r1, [pc, #16]	; (8008f70 <luaG_addinfo+0x5c>)
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f004 fd0f 	bl	800d984 <luaO_pushfstring>
 8008f66:	4603      	mov	r3, r0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3750      	adds	r7, #80	; 0x50
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	08022158 	.word	0x08022158

08008f74 <luaG_errormsg>:


l_noret luaG_errormsg (lua_State *L) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  if (L->errfunc != 0) {  /* is there an error handling function? */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d030      	beq.n	8008fe6 <luaG_errormsg+0x72>
    StkId errfunc = restorestack(L, L->errfunc);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008f8c:	4413      	add	r3, r2
 8008f8e:	61fb      	str	r3, [r7, #28]
    lua_assert(ttisfunction(s2v(errfunc)));
    setobjs2s(L, L->top, L->top - 1);  /* move argument */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	3b08      	subs	r3, #8
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	6812      	ldr	r2, [r2, #0]
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	791a      	ldrb	r2, [r3, #4]
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	711a      	strb	r2, [r3, #4]
    setobjs2s(L, L->top - 1, errfunc);  /* push function */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	3b08      	subs	r3, #8
 8008fb4:	613b      	str	r3, [r7, #16]
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	6812      	ldr	r2, [r2, #0]
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	791a      	ldrb	r2, [r3, #4]
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	711a      	strb	r2, [r3, #4]
    L->top++;  /* assume EXTRA_STACK */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f103 0208 	add.w	r2, r3, #8
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60da      	str	r2, [r3, #12]
    luaD_callnoyield(L, L->top - 2, 1);  /* call it */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	3b10      	subs	r3, #16
 8008fdc:	2201      	movs	r2, #1
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f852 	bl	800a08a <luaD_callnoyield>
  }
  luaD_throw(L, LUA_ERRRUN);
 8008fe6:	2102      	movs	r1, #2
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f99b 	bl	8009324 <luaD_throw>

08008fee <luaG_runerror>:
}


l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {
 8008fee:	b40e      	push	{r1, r2, r3}
 8008ff0:	b590      	push	{r4, r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  CallInfo *ci = L->ci;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	617b      	str	r3, [r7, #20]
  const char *msg;
  va_list argp;
  luaC_checkGC(L);  /* error message uses memory */
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	dd02      	ble.n	800900e <luaG_runerror+0x20>
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f003 fe41 	bl	800cc90 <luaC_step>
  va_start(argp, fmt);
 800900e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009012:	60fb      	str	r3, [r7, #12]
  msg = luaO_pushvfstring(L, fmt, argp);  /* format message */
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f004 facb 	bl	800d5b4 <luaO_pushvfstring>
 800901e:	6138      	str	r0, [r7, #16]
  va_end(argp);
  if (isLua(ci))  /* if Lua function, add source:line information */
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009024:	f003 0302 	and.w	r3, r3, #2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10d      	bne.n	8009048 <luaG_runerror+0x5a>
    luaG_addinfo(L, msg, ci_func(ci)->p->source, getcurrentline(ci));
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009036:	6978      	ldr	r0, [r7, #20]
 8009038:	f7ff f9b3 	bl	80083a2 <getcurrentline>
 800903c:	4603      	mov	r3, r0
 800903e:	4622      	mov	r2, r4
 8009040:	6939      	ldr	r1, [r7, #16]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff ff66 	bl	8008f14 <luaG_addinfo>
  luaG_errormsg(L);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff ff93 	bl	8008f74 <luaG_errormsg>

0800904e <changedline>:
** one or a few instructions after 'oldpc' (it must be after, see
** caller), so try to avoid calling 'luaG_getfuncline'. If they are
** too far apart, there is a good chance of a ABSLINEINFO in the way,
** so it goes directly to 'luaG_getfuncline'.
*/
static int changedline (const Proto *p, int oldpc, int newpc) {
 800904e:	b590      	push	{r4, r7, lr}
 8009050:	b089      	sub	sp, #36	; 0x24
 8009052:	af00      	add	r7, sp, #0
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
  if (p->lineinfo == NULL)  /* no debug information? */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <changedline+0x18>
    return 0;
 8009062:	2300      	movs	r3, #0
 8009064:	e035      	b.n	80090d2 <changedline+0x84>
  if (newpc - oldpc < MAXIWTHABS / 2) {  /* not too far apart? */
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b3f      	cmp	r3, #63	; 0x3f
 800906e:	dc21      	bgt.n	80090b4 <changedline+0x66>
    int delta = 0;  /* line diference */
 8009070:	2300      	movs	r3, #0
 8009072:	61fb      	str	r3, [r7, #28]
    int pc = oldpc;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	61bb      	str	r3, [r7, #24]
    for (;;) {
      int lineinfo = p->lineinfo[++pc];
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	3301      	adds	r3, #1
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	4413      	add	r3, r2
 8009086:	f993 3000 	ldrsb.w	r3, [r3]
 800908a:	617b      	str	r3, [r7, #20]
      if (lineinfo == ABSLINEINFO)
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8009092:	d00e      	beq.n	80090b2 <changedline+0x64>
        break;  /* cannot compute delta; fall through */
      delta += lineinfo;
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	4413      	add	r3, r2
 800909a:	61fb      	str	r3, [r7, #28]
      if (pc == newpc)
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d1e9      	bne.n	8009078 <changedline+0x2a>
        return (delta != 0);  /* delta computed successfully */
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bf14      	ite	ne
 80090aa:	2301      	movne	r3, #1
 80090ac:	2300      	moveq	r3, #0
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	e00f      	b.n	80090d2 <changedline+0x84>
        break;  /* cannot compute delta; fall through */
 80090b2:	bf00      	nop
    }
  }
  /* either instructions are too far apart or there is an absolute line
     info in the way; compute line difference explicitly */
  return (luaG_getfuncline(p, oldpc) != luaG_getfuncline(p, newpc));
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff f949 	bl	800834e <luaG_getfuncline>
 80090bc:	4604      	mov	r4, r0
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff f944 	bl	800834e <luaG_getfuncline>
 80090c6:	4603      	mov	r3, r0
 80090c8:	429c      	cmp	r4, r3
 80090ca:	bf14      	ite	ne
 80090cc:	2301      	movne	r3, #1
 80090ce:	2300      	moveq	r3, #0
 80090d0:	b2db      	uxtb	r3, r3
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3724      	adds	r7, #36	; 0x24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd90      	pop	{r4, r7, pc}
	...

080090dc <luaG_traceexec>:
** invalid; if so, use zero as a valid value. (A wrong but valid 'oldpc'
** at most causes an extra call to a line hook.)
** This function is not "Protected" when called, so it should correct
** 'L->top' before calling anything that can run the GC.
*/
int luaG_traceexec (lua_State *L, const Instruction *pc) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08c      	sub	sp, #48	; 0x30
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
  lu_byte mask = L->hookmask;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  const Proto *p = ci_func(ci)->p;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	61fb      	str	r3, [r7, #28]
  int counthook;
  if (!(mask & (LUA_MASKLINE | LUA_MASKCOUNT))) {  /* no hooks? */
 80090fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009102:	f003 030c 	and.w	r3, r3, #12
 8009106:	2b00      	cmp	r3, #0
 8009108:	d104      	bne.n	8009114 <luaG_traceexec+0x38>
    ci->u.l.trap = 0;  /* don't need to stop again */
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	2200      	movs	r2, #0
 800910e:	615a      	str	r2, [r3, #20]
    return 0;  /* turn off 'trap' */
 8009110:	2300      	movs	r3, #0
 8009112:	e0ab      	b.n	800926c <luaG_traceexec+0x190>
  }
  pc++;  /* reference is always next instruction */
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	603b      	str	r3, [r7, #0]
  ci->u.l.savedpc = pc;  /* save 'pc' */
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	611a      	str	r2, [r3, #16]
  counthook = (--L->hookcount == 0 && (mask & LUA_MASKCOUNT));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009124:	1e5a      	subs	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	66da      	str	r2, [r3, #108]	; 0x6c
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d107      	bne.n	8009142 <luaG_traceexec+0x66>
 8009132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <luaG_traceexec+0x66>
 800913e:	2301      	movs	r3, #1
 8009140:	e000      	b.n	8009144 <luaG_traceexec+0x68>
 8009142:	2300      	movs	r3, #0
 8009144:	61bb      	str	r3, [r7, #24]
  if (counthook)
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <luaG_traceexec+0x7a>
    resethookcount(L);  /* reset count */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	66da      	str	r2, [r3, #108]	; 0x6c
 8009154:	e007      	b.n	8009166 <luaG_traceexec+0x8a>
  else if (!(mask & LUA_MASKLINE))
 8009156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <luaG_traceexec+0x8a>
    return 1;  /* no line hook and count != 0; nothing to be done now */
 8009162:	2301      	movs	r3, #1
 8009164:	e082      	b.n	800926c <luaG_traceexec+0x190>
  if (ci->callstatus & CIST_HOOKYIELD) {  /* called hook last time? */
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800916a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d008      	beq.n	8009184 <luaG_traceexec+0xa8>
    ci->callstatus &= ~CIST_HOOKYIELD;  /* erase mark */
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800917a:	b29a      	uxth	r2, r3
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	845a      	strh	r2, [r3, #34]	; 0x22
    return 1;  /* do not call hook again (VM yielded, so it did not move) */
 8009180:	2301      	movs	r3, #1
 8009182:	e073      	b.n	800926c <luaG_traceexec+0x190>
  }
  if (!isIT(*(ci->u.l.savedpc - 1)))  /* top not being used? */
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	3b04      	subs	r3, #4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009192:	4a38      	ldr	r2, [pc, #224]	; (8009274 <luaG_traceexec+0x198>)
 8009194:	5cd3      	ldrb	r3, [r2, r3]
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d007      	beq.n	80091ae <luaG_traceexec+0xd2>
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	3b04      	subs	r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	0c1b      	lsrs	r3, r3, #16
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <luaG_traceexec+0xda>
    L->top = ci->top;  /* correct top */
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60da      	str	r2, [r3, #12]
  if (counthook)
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d008      	beq.n	80091ce <luaG_traceexec+0xf2>
    luaD_hook(L, LUA_HOOKCOUNT, -1, 0, 0);  /* call count hook */
 80091bc:	2300      	movs	r3, #0
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	2300      	movs	r3, #0
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295
 80091c6:	2103      	movs	r1, #3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 faa2 	bl	8009712 <luaD_hook>
  if (mask & LUA_MASKLINE) {
 80091ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d02d      	beq.n	8009236 <luaG_traceexec+0x15a>
    /* 'L->oldpc' may be invalid; use zero in this case */
    int oldpc = (L->oldpc < p->sizecode) ? L->oldpc : 0;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	da02      	bge.n	80091ec <luaG_traceexec+0x110>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ea:	e000      	b.n	80091ee <luaG_traceexec+0x112>
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]
    int npci = pcRel(pc, p);
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	109b      	asrs	r3, r3, #2
 80091fa:	3b01      	subs	r3, #1
 80091fc:	613b      	str	r3, [r7, #16]
    if (npci <= oldpc ||  /* call hook when jump back (loop), */
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	429a      	cmp	r2, r3
 8009204:	dd07      	ble.n	8009216 <luaG_traceexec+0x13a>
        changedline(p, oldpc, npci)) {  /* or when enter new line */
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	6979      	ldr	r1, [r7, #20]
 800920a:	69f8      	ldr	r0, [r7, #28]
 800920c:	f7ff ff1f 	bl	800904e <changedline>
 8009210:	4603      	mov	r3, r0
    if (npci <= oldpc ||  /* call hook when jump back (loop), */
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00c      	beq.n	8009230 <luaG_traceexec+0x154>
      int newline = luaG_getfuncline(p, npci);
 8009216:	6939      	ldr	r1, [r7, #16]
 8009218:	69f8      	ldr	r0, [r7, #28]
 800921a:	f7ff f898 	bl	800834e <luaG_getfuncline>
 800921e:	60f8      	str	r0, [r7, #12]
      luaD_hook(L, LUA_HOOKLINE, newline, 0, 0);  /* call line hook */
 8009220:	2300      	movs	r3, #0
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	2102      	movs	r1, #2
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa71 	bl	8009712 <luaD_hook>
    }
    L->oldpc = npci;  /* 'pc' of last call to line hook */
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	665a      	str	r2, [r3, #100]	; 0x64
  }
  if (L->status == LUA_YIELD) {  /* did hook yield? */
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	799b      	ldrb	r3, [r3, #6]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d115      	bne.n	800926a <luaG_traceexec+0x18e>
    if (counthook)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <luaG_traceexec+0x16e>
      L->hookcount = 1;  /* undo decrement to zero */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	66da      	str	r2, [r3, #108]	; 0x6c
    ci->u.l.savedpc--;  /* undo increment (resume will increment it again) */
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	1f1a      	subs	r2, r3, #4
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	611a      	str	r2, [r3, #16]
    ci->callstatus |= CIST_HOOKYIELD;  /* mark that it yielded */
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925c:	b29a      	uxth	r2, r3
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	845a      	strh	r2, [r3, #34]	; 0x22
    luaD_throw(L, LUA_YIELD);
 8009262:	2101      	movs	r1, #1
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f85d 	bl	8009324 <luaD_throw>
  }
  return 1;  /* keep 'trap' on */
 800926a:	2301      	movs	r3, #1
}
 800926c:	4618      	mov	r0, r3
 800926e:	3728      	adds	r7, #40	; 0x28
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	08022c30 	.word	0x08022c30

08009278 <luaD_seterrorobj>:
  luai_jmpbuf b;
  volatile int status;  /* error code */
};


void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b08a      	sub	sp, #40	; 0x28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  switch (errcode) {
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b05      	cmp	r3, #5
 8009288:	d01a      	beq.n	80092c0 <luaD_seterrorobj+0x48>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b05      	cmp	r3, #5
 800928e:	dc2e      	bgt.n	80092ee <luaD_seterrorobj+0x76>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d027      	beq.n	80092e6 <luaD_seterrorobj+0x6e>
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2b04      	cmp	r3, #4
 800929a:	d128      	bne.n	80092ee <luaD_seterrorobj+0x76>
    case LUA_ERRMEM: {  /* memory error? */
      setsvalue2s(L, oldtop, G(L)->memerrmsg); /* reuse preregistered msg. */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	61fb      	str	r3, [r7, #28]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092a8:	61bb      	str	r3, [r7, #24]
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	791b      	ldrb	r3, [r3, #4]
 80092b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	711a      	strb	r2, [r3, #4]
      break;
 80092be:	e025      	b.n	800930c <luaD_seterrorobj+0x94>
    }
    case LUA_ERRERR: {
      setsvalue2s(L, oldtop, luaS_newliteral(L, "error in error handling"));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
 80092c4:	2217      	movs	r2, #23
 80092c6:	4916      	ldr	r1, [pc, #88]	; (8009320 <luaD_seterrorobj+0xa8>)
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f005 fab9 	bl	800e840 <luaS_newlstr>
 80092ce:	6238      	str	r0, [r7, #32]
 80092d0:	6a3a      	ldr	r2, [r7, #32]
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	791b      	ldrb	r3, [r3, #4]
 80092da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	711a      	strb	r2, [r3, #4]
      break;
 80092e4:	e012      	b.n	800930c <luaD_seterrorobj+0x94>
    }
    case LUA_OK: {  /* special case only for closing upvalues */
      setnilvalue(s2v(oldtop));  /* no error message */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	711a      	strb	r2, [r3, #4]
      break;
 80092ec:	e00e      	b.n	800930c <luaD_seterrorobj+0x94>
    }
    default: {
      lua_assert(errorstatus(errcode));  /* real error */
      setobjs2s(L, oldtop, L->top - 1);  /* error message on current top */
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	617b      	str	r3, [r7, #20]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	3b08      	subs	r3, #8
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	6812      	ldr	r2, [r2, #0]
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	791a      	ldrb	r2, [r3, #4]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	711a      	strb	r2, [r3, #4]
      break;
 800930a:	bf00      	nop
    }
  }
  L->top = oldtop + 1;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f103 0208 	add.w	r2, r3, #8
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	60da      	str	r2, [r3, #12]
}
 8009316:	bf00      	nop
 8009318:	3728      	adds	r7, #40	; 0x28
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	08022164 	.word	0x08022164

08009324 <luaD_throw>:


l_noret luaD_throw (lua_State *L, int errcode) {
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  if (L->errorJmp) {  /* thread has an error handler? */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <luaD_throw+0x28>
    L->errorJmp->status = errcode;  /* set status */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	661a      	str	r2, [r3, #96]	; 0x60
    LUAI_THROW(L, L->errorJmp);  /* jump to it */
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	3304      	adds	r3, #4
 8009344:	2101      	movs	r1, #1
 8009346:	4618      	mov	r0, r3
 8009348:	f7f6 ff98 	bl	800027c <longjmp>
  }
  else {  /* thread has no error handler */
    global_State *g = G(L);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	617b      	str	r3, [r7, #20]
    errcode = luaE_resetthread(L, errcode);  /* close all upvalues */
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f004 fe2b 	bl	800dfb0 <luaE_resetthread>
 800935a:	6038      	str	r0, [r7, #0]
    if (g->mainthread->errorJmp) {  /* main thread has a handler? */
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01a      	beq.n	800939e <luaD_throw+0x7a>
      setobjs2s(L, g->mainthread->top++, L->top - 1);  /* copy error obj. */
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800936e:	68d3      	ldr	r3, [r2, #12]
 8009370:	f103 0108 	add.w	r1, r3, #8
 8009374:	60d1      	str	r1, [r2, #12]
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	3b08      	subs	r3, #8
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	791a      	ldrb	r2, [r3, #4]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	711a      	strb	r2, [r3, #4]
      luaD_throw(g->mainthread, errcode);  /* re-throw in main thread */
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff ffc3 	bl	8009324 <luaD_throw>
    }
    else {  /* no handler at all; abort */
      if (g->panic) {  /* panic function? */
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d004      	beq.n	80093b2 <luaD_throw+0x8e>
        lua_unlock(L);
        g->panic(L);  /* call panic function (last chance to jump out) */
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
      }
      abort();
 80093b2:	f015 f87d 	bl	801e4b0 <abort>

080093b6 <luaD_rawrunprotected>:
    }
  }
}


int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b09e      	sub	sp, #120	; 0x78
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	607a      	str	r2, [r7, #4]
  l_uint32 oldnCcalls = L->nCcalls;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c6:	677b      	str	r3, [r7, #116]	; 0x74
  struct lua_longjmp lj;
  lj.status = LUA_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	673b      	str	r3, [r7, #112]	; 0x70
  lj.previous = L->errorJmp;  /* chain new error handler */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d0:	613b      	str	r3, [r7, #16]
  L->errorJmp = &lj;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f107 0210 	add.w	r2, r7, #16
 80093d8:	631a      	str	r2, [r3, #48]	; 0x30
  LUAI_TRY(L, &lj,
 80093da:	f107 0310 	add.w	r3, r7, #16
 80093de:	3304      	adds	r3, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7f6 ff45 	bl	8000270 <setjmp>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d103      	bne.n	80093f4 <luaD_rawrunprotected+0x3e>
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	4798      	blx	r3
    (*f)(L, ud);
  );
  L->errorJmp = lj.previous;  /* restore old error handler */
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30
  L->nCcalls = oldnCcalls;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80093fe:	661a      	str	r2, [r3, #96]	; 0x60
  return lj.status;
 8009400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8009402:	4618      	mov	r0, r3
 8009404:	3778      	adds	r7, #120	; 0x78
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <correctstack>:
/*
** {==================================================================
** Stack reallocation
** ===================================================================
*/
static void correctstack (lua_State *L, StkId oldstack, StkId newstack) {
 800940a:	b480      	push	{r7}
 800940c:	b087      	sub	sp, #28
 800940e:	af00      	add	r7, sp, #0
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	60b9      	str	r1, [r7, #8]
 8009414:	607a      	str	r2, [r7, #4]
  CallInfo *ci;
  UpVal *up;
  L->top = (L->top - oldstack) + newstack;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	441a      	add	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	60da      	str	r2, [r3, #12]
  L->tbclist = (L->tbclist - oldstack) + newstack;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	461a      	mov	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	441a      	add	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	625a      	str	r2, [r3, #36]	; 0x24
  for (up = L->openupval; up != NULL; up = up->u.open.next)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	e00c      	b.n	800945c <correctstack+0x52>
    up->v = s2v((uplevel(up) - oldstack) + newstack);
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4413      	add	r3, r2
 8009450:	461a      	mov	r2, r3
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	609a      	str	r2, [r3, #8]
  for (up = L->openupval; up != NULL; up = up->u.open.next)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	613b      	str	r3, [r7, #16]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1ef      	bne.n	8009442 <correctstack+0x38>
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	e01d      	b.n	80094a6 <correctstack+0x9c>
    ci->top = (ci->top - oldstack) + newstack;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	461a      	mov	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	441a      	add	r2, r3
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	605a      	str	r2, [r3, #4]
    ci->func = (ci->func - oldstack) + newstack;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	461a      	mov	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	441a      	add	r2, r3
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	601a      	str	r2, [r3, #0]
    if (isLua(ci))
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <correctstack+0x96>
      ci->u.l.trap = 1;  /* signal to update 'trap' in 'luaV_execute' */
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2201      	movs	r2, #1
 800949e:	615a      	str	r2, [r3, #20]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1de      	bne.n	800946a <correctstack+0x60>
  }
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <luaD_reallocstack>:
** (In ISO C, any pointer use after the pointer has been deallocated is
** undefined behavior.)
** In case of allocation error, raise an error or return false according
** to 'raiseerror'.
*/
int luaD_reallocstack (lua_State *L, int newsize, int raiseerror) {
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b088      	sub	sp, #32
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
  int oldsize = stacksize(L);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	699a      	ldr	r2, [r3, #24]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	10db      	asrs	r3, r3, #3
 80094d2:	61bb      	str	r3, [r7, #24]
  int i;
  StkId newstack = luaM_reallocvector(L, NULL, 0,
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	3305      	adds	r3, #5
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	2200      	movs	r2, #0
 80094dc:	2100      	movs	r1, #0
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f003 fcc4 	bl	800ce6c <luaM_realloc_>
 80094e4:	6178      	str	r0, [r7, #20]
                                      newsize + EXTRA_STACK, StackValue);
  lua_assert(newsize <= LUAI_MAXSTACK || newsize == ERRORSTACKSIZE);
  if (l_unlikely(newstack == NULL)) {  /* reallocation failed? */
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bf0c      	ite	eq
 80094ec:	2301      	moveq	r3, #1
 80094ee:	2300      	movne	r3, #0
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d008      	beq.n	8009508 <luaD_reallocstack+0x4e>
    if (raiseerror)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <luaD_reallocstack+0x4a>
      luaM_error(L);
 80094fc:	2104      	movs	r1, #4
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff ff10 	bl	8009324 <luaD_throw>
    else return 0;  /* do not raise an error */
 8009504:	2300      	movs	r3, #0
 8009506:	e038      	b.n	800957a <luaD_reallocstack+0xc0>
  }
  /* number of elements to be copied to the new stack */
  i = ((oldsize <= newsize) ? oldsize : newsize) + EXTRA_STACK;
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	4293      	cmp	r3, r2
 800950e:	bfa8      	it	ge
 8009510:	4613      	movge	r3, r2
 8009512:	3305      	adds	r3, #5
 8009514:	61fb      	str	r3, [r7, #28]
  memcpy(newstack, L->stack, i * sizeof(StackValue));
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	69d9      	ldr	r1, [r3, #28]
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	461a      	mov	r2, r3
 8009520:	6978      	ldr	r0, [r7, #20]
 8009522:	f015 fb85 	bl	801ec30 <memcpy>
  for (; i < newsize + EXTRA_STACK; i++)
 8009526:	e008      	b.n	800953a <luaD_reallocstack+0x80>
    setnilvalue(s2v(newstack + i)); /* erase new segment */
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	4413      	add	r3, r2
 8009530:	2200      	movs	r2, #0
 8009532:	711a      	strb	r2, [r3, #4]
  for (; i < newsize + EXTRA_STACK; i++)
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	3301      	adds	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	3304      	adds	r3, #4
 800953e:	69fa      	ldr	r2, [r7, #28]
 8009540:	429a      	cmp	r2, r3
 8009542:	ddf1      	ble.n	8009528 <luaD_reallocstack+0x6e>
  correctstack(L, L->stack, newstack);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	4619      	mov	r1, r3
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f7ff ff5c 	bl	800940a <correctstack>
  luaM_freearray(L, L->stack, oldsize + EXTRA_STACK);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	69d9      	ldr	r1, [r3, #28]
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	3305      	adds	r3, #5
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	461a      	mov	r2, r3
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f003 fc3e 	bl	800cde0 <luaM_free_>
  L->stack = newstack;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	61da      	str	r2, [r3, #28]
  L->stack_last = L->stack + newsize;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	69da      	ldr	r2, [r3, #28]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	441a      	add	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	619a      	str	r2, [r3, #24]
  return 1;
 8009578:	2301      	movs	r3, #1
}
 800957a:	4618      	mov	r0, r3
 800957c:	3720      	adds	r7, #32
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <luaD_growstack>:

/*
** Try to grow the stack by at least 'n' elements. when 'raiseerror'
** is true, raises any error; otherwise, return 0 in case of errors.
*/
int luaD_growstack (lua_State *L, int n, int raiseerror) {
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
  int size = stacksize(L);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	10db      	asrs	r3, r3, #3
 800959c:	61bb      	str	r3, [r7, #24]
  if (l_unlikely(size > LUAI_MAXSTACK)) {
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80095a4:	4293      	cmp	r3, r2
 80095a6:	bfcc      	ite	gt
 80095a8:	2301      	movgt	r3, #1
 80095aa:	2300      	movle	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d008      	beq.n	80095c4 <luaD_growstack+0x40>
    /* if stack is larger than maximum, thread is already using the
       extra space reserved for errors, that is, thread is handling
       a stack error; cannot grow further than that. */
    lua_assert(stacksize(L) == ERRORSTACKSIZE);
    if (raiseerror)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <luaD_growstack+0x3c>
      luaD_throw(L, LUA_ERRERR);  /* error inside message handler */
 80095b8:	2105      	movs	r1, #5
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff feb2 	bl	8009324 <luaD_throw>
    return 0;  /* if not 'raiseerror', just signal it */
 80095c0:	2300      	movs	r3, #0
 80095c2:	e039      	b.n	8009638 <luaD_growstack+0xb4>
  }
  else {
    int newsize = 2 * size;  /* tentative new size */
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	61fb      	str	r3, [r7, #28]
    int needed = cast_int(L->top - L->stack) + n;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	10db      	asrs	r3, r3, #3
 80095d6:	461a      	mov	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4413      	add	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]
    if (newsize > LUAI_MAXSTACK)  /* cannot cross the limit */
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80095e4:	4293      	cmp	r3, r2
 80095e6:	dd02      	ble.n	80095ee <luaD_growstack+0x6a>
      newsize = LUAI_MAXSTACK;
 80095e8:	f643 2398 	movw	r3, #15000	; 0x3a98
 80095ec:	61fb      	str	r3, [r7, #28]
    if (newsize < needed)  /* but must respect what was asked for */
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	da01      	bge.n	80095fa <luaD_growstack+0x76>
      newsize = needed;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	61fb      	str	r3, [r7, #28]
    if (l_likely(newsize <= LUAI_MAXSTACK))
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	f643 2298 	movw	r2, #15000	; 0x3a98
 8009600:	4293      	cmp	r3, r2
 8009602:	bfd4      	ite	le
 8009604:	2301      	movle	r3, #1
 8009606:	2300      	movgt	r3, #0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d006      	beq.n	800961c <luaD_growstack+0x98>
      return luaD_reallocstack(L, newsize, raiseerror);
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f7ff ff51 	bl	80094ba <luaD_reallocstack>
 8009618:	4603      	mov	r3, r0
 800961a:	e00d      	b.n	8009638 <luaD_growstack+0xb4>
    else {  /* stack overflow */
      /* add extra size to be able to handle the error message */
      luaD_reallocstack(L, ERRORSTACKSIZE, raiseerror);
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	f643 3160 	movw	r1, #15200	; 0x3b60
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff ff49 	bl	80094ba <luaD_reallocstack>
      if (raiseerror)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <luaD_growstack+0xb2>
        luaG_runerror(L, "stack overflow");
 800962e:	4904      	ldr	r1, [pc, #16]	; (8009640 <luaD_growstack+0xbc>)
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f7ff fcdc 	bl	8008fee <luaG_runerror>
      return 0;
 8009636:	2300      	movs	r3, #0
    }
  }
}
 8009638:	4618      	mov	r0, r3
 800963a:	3720      	adds	r7, #32
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	0802217c 	.word	0x0802217c

08009644 <stackinuse>:


static int stackinuse (lua_State *L) {
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  CallInfo *ci;
  int res;
  StkId lim = L->top;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	60fb      	str	r3, [r7, #12]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e00a      	b.n	8009670 <stackinuse+0x2c>
    if (lim < ci->top) lim = ci->top;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	429a      	cmp	r2, r3
 8009662:	d202      	bcs.n	800966a <stackinuse+0x26>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	60fb      	str	r3, [r7, #12]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1f1      	bne.n	800965a <stackinuse+0x16>
  }
  lua_assert(lim <= L->stack_last);
  res = cast_int(lim - L->stack) + 1;  /* part of stack in use */
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	10db      	asrs	r3, r3, #3
 8009680:	3301      	adds	r3, #1
 8009682:	613b      	str	r3, [r7, #16]
  if (res < LUA_MINSTACK)
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2b13      	cmp	r3, #19
 8009688:	dc01      	bgt.n	800968e <stackinuse+0x4a>
    res = LUA_MINSTACK;  /* ensure a minimum size */
 800968a:	2314      	movs	r3, #20
 800968c:	613b      	str	r3, [r7, #16]
  return res;
 800968e:	693b      	ldr	r3, [r7, #16]
}
 8009690:	4618      	mov	r0, r3
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <luaD_shrinkstack>:
** As a particular case, if stack was handling a stack overflow and now
** it is not, 'max' (limited by LUAI_MAXSTACK) will be smaller than
** stacksize (equal to ERRORSTACKSIZE in this case), and so the stack
** will be reduced to a "regular" size.
*/
void luaD_shrinkstack (lua_State *L) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  int inuse = stackinuse(L);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7ff ffcd 	bl	8009644 <stackinuse>
 80096aa:	60f8      	str	r0, [r7, #12]
  int nsize = inuse * 2;  /* proposed new size */
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	617b      	str	r3, [r7, #20]
  int max = inuse * 3;  /* maximum "reasonable" size */
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4613      	mov	r3, r2
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	4413      	add	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
  if (max > LUAI_MAXSTACK) {
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f643 2298 	movw	r2, #15000	; 0x3a98
 80096c2:	4293      	cmp	r3, r2
 80096c4:	dd0a      	ble.n	80096dc <luaD_shrinkstack+0x40>
    max = LUAI_MAXSTACK;  /* respect stack limit */
 80096c6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80096ca:	613b      	str	r3, [r7, #16]
    if (nsize > LUAI_MAXSTACK)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f643 2298 	movw	r2, #15000	; 0x3a98
 80096d2:	4293      	cmp	r3, r2
 80096d4:	dd02      	ble.n	80096dc <luaD_shrinkstack+0x40>
      nsize = LUAI_MAXSTACK;
 80096d6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80096da:	617b      	str	r3, [r7, #20]
  }
  /* if thread is currently not handling a stack overflow and its
     size is larger than maximum "reasonable" size, shrink it */
  if (inuse <= LUAI_MAXSTACK && stacksize(L) > max)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f643 2298 	movw	r2, #15000	; 0x3a98
 80096e2:	4293      	cmp	r3, r2
 80096e4:	dc0e      	bgt.n	8009704 <luaD_shrinkstack+0x68>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	10db      	asrs	r3, r3, #3
 80096f2:	461a      	mov	r2, r3
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	4293      	cmp	r3, r2
 80096f8:	da04      	bge.n	8009704 <luaD_shrinkstack+0x68>
    luaD_reallocstack(L, nsize, 0);  /* ok if that fails */
 80096fa:	2200      	movs	r2, #0
 80096fc:	6979      	ldr	r1, [r7, #20]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff fedb 	bl	80094ba <luaD_reallocstack>
  else  /* don't change stack */
    condmovestack(L,{},{});  /* (change only for debugging) */
  luaE_shrinkCI(L);  /* shrink CI list */
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f004 fa9d 	bl	800dc44 <luaE_shrinkCI>
}
 800970a:	bf00      	nop
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <luaD_hook>:
** Call a hook for the given event. Make sure there is a hook to be
** called. (Both 'L->hook' and 'L->hookmask', which trigger this
** function, can be changed asynchronously by signals.)
*/
void luaD_hook (lua_State *L, int event, int line,
                              int ftransfer, int ntransfer) {
 8009712:	b580      	push	{r7, lr}
 8009714:	b0a4      	sub	sp, #144	; 0x90
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	607a      	str	r2, [r7, #4]
 800971e:	603b      	str	r3, [r7, #0]
  lua_Hook hook = L->hook;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (hook && L->allowhook) {  /* make sure there is a hook */
 8009728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 80a0 	beq.w	8009872 <luaD_hook+0x160>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	79db      	ldrb	r3, [r3, #7]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 809b 	beq.w	8009872 <luaD_hook+0x160>
    int mask = CIST_HOOKED;
 800973c:	2308      	movs	r3, #8
 800973e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    CallInfo *ci = L->ci;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    ptrdiff_t top = savestack(L, L->top);  /* preserve original 'top' */
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    ptrdiff_t ci_top = savestack(L, ci->top);  /* idem for 'ci->top' */
 8009758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	67fb      	str	r3, [r7, #124]	; 0x7c
    lua_Debug ar;
    ar.event = event;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	613b      	str	r3, [r7, #16]
    ar.currentline = line;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	62bb      	str	r3, [r7, #40]	; 0x28
    ar.i_ci = ci;
 800976e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009772:	67bb      	str	r3, [r7, #120]	; 0x78
    if (ntransfer != 0) {
 8009774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009778:	2b00      	cmp	r3, #0
 800977a:	d010      	beq.n	800979e <luaD_hook+0x8c>
      mask |= CIST_TRAN;  /* 'ci' has transfer information */
 800977c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009784:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      ci->u2.transferinfo.ftransfer = ftransfer;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	b29a      	uxth	r2, r3
 800978c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009790:	839a      	strh	r2, [r3, #28]
      ci->u2.transferinfo.ntransfer = ntransfer;
 8009792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009796:	b29a      	uxth	r2, r3
 8009798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800979c:	83da      	strh	r2, [r3, #30]
    }
    if (isLua(ci) && L->top < ci->top)
 800979e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <luaD_hook+0xb2>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d204      	bcs.n	80097c4 <luaD_hook+0xb2>
      L->top = ci->top;  /* protect entire activation register */
 80097ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	60da      	str	r2, [r3, #12]
    luaD_checkstack(L, LUA_MINSTACK);  /* ensure minimum stack size */
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	699a      	ldr	r2, [r3, #24]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	2ba0      	cmp	r3, #160	; 0xa0
 80097d0:	bfd4      	ite	le
 80097d2:	2301      	movle	r3, #1
 80097d4:	2300      	movgt	r3, #0
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <luaD_hook+0xd4>
 80097dc:	2201      	movs	r2, #1
 80097de:	2114      	movs	r1, #20
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7ff fecf 	bl	8009584 <luaD_growstack>
    if (ci->top < L->top + LUA_MINSTACK)
 80097e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	33a0      	adds	r3, #160	; 0xa0
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d206      	bcs.n	8009804 <luaD_hook+0xf2>
      ci->top = L->top + LUA_MINSTACK;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80097fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009802:	605a      	str	r2, [r3, #4]
    L->allowhook = 0;  /* cannot call hooks inside a hook */
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	71da      	strb	r2, [r3, #7]
    ci->callstatus |= mask;
 800980a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800980e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009810:	b21a      	sxth	r2, r3
 8009812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009816:	b21b      	sxth	r3, r3
 8009818:	4313      	orrs	r3, r2
 800981a:	b21b      	sxth	r3, r3
 800981c:	b29a      	uxth	r2, r3
 800981e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009822:	845a      	strh	r2, [r3, #34]	; 0x22
    lua_unlock(L);
    (*hook)(L, &ar);
 8009824:	f107 0210 	add.w	r2, r7, #16
 8009828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800982c:	4611      	mov	r1, r2
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	4798      	blx	r3
    lua_lock(L);
    lua_assert(!L->allowhook);
    L->allowhook = 1;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	71da      	strb	r2, [r3, #7]
    ci->top = restorestack(L, ci_top);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	69da      	ldr	r2, [r3, #28]
 800983c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800983e:	441a      	add	r2, r3
 8009840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009844:	605a      	str	r2, [r3, #4]
    L->top = restorestack(L, top);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	69da      	ldr	r2, [r3, #28]
 800984a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800984e:	441a      	add	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	60da      	str	r2, [r3, #12]
    ci->callstatus &= ~mask;
 8009854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009858:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800985a:	b21a      	sxth	r2, r3
 800985c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009860:	b21b      	sxth	r3, r3
 8009862:	43db      	mvns	r3, r3
 8009864:	b21b      	sxth	r3, r3
 8009866:	4013      	ands	r3, r2
 8009868:	b21b      	sxth	r3, r3
 800986a:	b29a      	uxth	r2, r3
 800986c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009870:	845a      	strh	r2, [r3, #34]	; 0x22
  }
}
 8009872:	bf00      	nop
 8009874:	3790      	adds	r7, #144	; 0x90
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <luaD_hookcall>:
/*
** Executes a call hook for Lua functions. This function is called
** whenever 'hookmask' is not zero, so it checks whether call hooks are
** active.
*/
void luaD_hookcall (lua_State *L, CallInfo *ci) {
 800987a:	b580      	push	{r7, lr}
 800987c:	b086      	sub	sp, #24
 800987e:	af02      	add	r7, sp, #8
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
  L->oldpc = 0;  /* set 'oldpc' for new function */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	665a      	str	r2, [r3, #100]	; 0x64
  if (L->hookmask & LUA_MASKCALL) {  /* is call hook on? */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d01e      	beq.n	80098d4 <luaD_hookcall+0x5a>
    int event = (ci->callstatus & CIST_TAIL) ? LUA_HOOKTAILCALL
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                                             : LUA_HOOKCALL;
 800989a:	10db      	asrs	r3, r3, #3
    int event = (ci->callstatus & CIST_TAIL) ? LUA_HOOKTAILCALL
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	60fb      	str	r3, [r7, #12]
    Proto *p = ci_func(ci)->p;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	60bb      	str	r3, [r7, #8]
    ci->u.l.savedpc++;  /* hooks assume 'pc' is already incremented */
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	1d1a      	adds	r2, r3, #4
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	611a      	str	r2, [r3, #16]
    luaD_hook(L, event, -1, 1, p->numparams);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	799b      	ldrb	r3, [r3, #6]
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	2301      	movs	r3, #1
 80098be:	f04f 32ff 	mov.w	r2, #4294967295
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7ff ff24 	bl	8009712 <luaD_hook>
    ci->u.l.savedpc--;  /* correct 'pc' */
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	1f1a      	subs	r2, r3, #4
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	611a      	str	r2, [r3, #16]
  }
}
 80098d4:	bf00      	nop
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <rethook>:
/*
** Executes a return hook for Lua and C functions and sets/corrects
** 'oldpc'. (Note that this correction is needed by the line hook, so it
** is done even when return hooks are off.)
*/
static void rethook (lua_State *L, CallInfo *ci, int nres) {
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	; 0x28
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
  if (L->hookmask & LUA_MASKRET) {  /* is return hook on? */
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ec:	f003 0302 	and.w	r3, r3, #2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d03d      	beq.n	8009970 <rethook+0x94>
    StkId firstres = L->top - nres;  /* index of first result */
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	425b      	negs	r3, r3
 80098fe:	4413      	add	r3, r2
 8009900:	61bb      	str	r3, [r7, #24]
    int delta = 0;  /* correction for vararg functions */
 8009902:	2300      	movs	r3, #0
 8009904:	61fb      	str	r3, [r7, #28]
    int ftransfer;
    if (isLua(ci)) {
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10f      	bne.n	8009932 <rethook+0x56>
      Proto *p = ci_func(ci)->p;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	617b      	str	r3, [r7, #20]
      if (p->is_vararg)
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	79db      	ldrb	r3, [r3, #7]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d006      	beq.n	8009932 <rethook+0x56>
        delta = ci->u.l.nextraargs + p->numparams + 1;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	7992      	ldrb	r2, [r2, #6]
 800992c:	4413      	add	r3, r2
 800992e:	3301      	adds	r3, #1
 8009930:	61fb      	str	r3, [r7, #28]
    }
    ci->func += delta;  /* if vararg, back to virtual 'func' */
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	00db      	lsls	r3, r3, #3
 800993a:	441a      	add	r2, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	601a      	str	r2, [r3, #0]
    ftransfer = cast(unsigned short, firstres - ci->func);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	10db      	asrs	r3, r3, #3
 800994a:	b29b      	uxth	r3, r3
 800994c:	613b      	str	r3, [r7, #16]
    luaD_hook(L, LUA_HOOKRET, -1, ftransfer, nres);  /* call it */
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f04f 32ff 	mov.w	r2, #4294967295
 8009958:	2101      	movs	r1, #1
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff fed9 	bl	8009712 <luaD_hook>
    ci->func -= delta;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	425b      	negs	r3, r3
 800996a:	441a      	add	r2, r3
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	601a      	str	r2, [r3, #0]
  }
  if (isLua(ci = ci->previous))
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	60bb      	str	r3, [r7, #8]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800997a:	f003 0302 	and.w	r3, r3, #2
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10b      	bne.n	800999a <rethook+0xbe>
    L->oldpc = pcRel(ci->u.l.savedpc, ci_func(ci)->p);  /* set 'oldpc' */
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	691a      	ldr	r2, [r3, #16]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	109b      	asrs	r3, r3, #2
 8009994:	1e5a      	subs	r2, r3, #1
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	665a      	str	r2, [r3, #100]	; 0x64
}
 800999a:	bf00      	nop
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <luaD_tryfuncTM>:
/*
** Check whether 'func' has a '__call' metafield. If so, put it in the
** stack, below original 'func', so that 'luaD_precall' can call it. Raise
** an error if there is no '__call' metafield.
*/
StkId luaD_tryfuncTM (lua_State *L, StkId func) {
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b08a      	sub	sp, #40	; 0x28
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
  const TValue *tm;
  StkId p;
  checkstackGCp(L, 1, func);  /* space for metamethod */
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699a      	ldr	r2, [r3, #24]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	2b08      	cmp	r3, #8
 80099b8:	bfd4      	ite	le
 80099ba:	2301      	movle	r3, #1
 80099bc:	2300      	movgt	r3, #0
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d016      	beq.n	80099f2 <luaD_tryfuncTM+0x50>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	623b      	str	r3, [r7, #32]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dd02      	ble.n	80099de <luaD_tryfuncTM+0x3c>
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f003 f959 	bl	800cc90 <luaC_step>
 80099de:	2201      	movs	r2, #1
 80099e0:	2101      	movs	r1, #1
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff fdce 	bl	8009584 <luaD_growstack>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	69da      	ldr	r2, [r3, #28]
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	4413      	add	r3, r2
 80099f0:	603b      	str	r3, [r7, #0]
  tm = luaT_gettmbyobj(L, s2v(func), TM_CALL);  /* (after previous GC) */
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2217      	movs	r2, #23
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f006 f9dd 	bl	800fdb8 <luaT_gettmbyobj>
 80099fe:	61f8      	str	r0, [r7, #28]
  if (l_unlikely(ttisnil(tm)))
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	791b      	ldrb	r3, [r3, #4]
 8009a04:	f003 030f 	and.w	r3, r3, #15
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	bf0c      	ite	eq
 8009a0c:	2301      	moveq	r3, #1
 8009a0e:	2300      	movne	r3, #0
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d004      	beq.n	8009a20 <luaD_tryfuncTM+0x7e>
    luaG_callerror(L, s2v(func));  /* nothing to call */
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff f9c8 	bl	8008db0 <luaG_callerror>
  for (p = L->top; p > func; p--)  /* open space for metamethod */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	627b      	str	r3, [r7, #36]	; 0x24
 8009a26:	e00f      	b.n	8009a48 <luaD_tryfuncTM+0xa6>
    setobjs2s(L, p, p-1);
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	613b      	str	r3, [r7, #16]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	3b08      	subs	r3, #8
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	6812      	ldr	r2, [r2, #0]
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	791a      	ldrb	r2, [r3, #4]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	711a      	strb	r2, [r3, #4]
  for (p = L->top; p > func; p--)  /* open space for metamethod */
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	3b08      	subs	r3, #8
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24
 8009a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d8eb      	bhi.n	8009a28 <luaD_tryfuncTM+0x86>
  L->top++;  /* stack space pre-allocated by the caller */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f103 0208 	add.w	r2, r3, #8
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	60da      	str	r2, [r3, #12]
  setobj2s(L, func, tm);  /* metamethod is the new function to be called */
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	61bb      	str	r3, [r7, #24]
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	6812      	ldr	r2, [r2, #0]
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	791a      	ldrb	r2, [r3, #4]
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	711a      	strb	r2, [r3, #4]
  return func;
 8009a74:	683b      	ldr	r3, [r7, #0]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3728      	adds	r7, #40	; 0x28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <moveresults>:
** Given 'nres' results at 'firstResult', move 'wanted' of them to 'res'.
** Handle most typical cases (zero results for commands, one result for
** expressions, multiple results for tail calls/single parameters)
** separated.
*/
l_sinline void moveresults (lua_State *L, StkId res, int nres, int wanted) {
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b08c      	sub	sp, #48	; 0x30
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
 8009a8a:	603b      	str	r3, [r7, #0]
  StkId firstresult;
  int i;
  switch (wanted) {  /* handle typical cases separately */
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d00d      	beq.n	8009aae <moveresults+0x30>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	dc2b      	bgt.n	8009af0 <moveresults+0x72>
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9e:	d024      	beq.n	8009aea <moveresults+0x6c>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d124      	bne.n	8009af0 <moveresults+0x72>
    case 0:  /* no values needed */
      L->top = res;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	60da      	str	r2, [r3, #12]
      return;
 8009aac:	e09f      	b.n	8009bee <moveresults+0x170>
    case 1:  /* one value needed */
      if (nres == 0)   /* no results? */
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d103      	bne.n	8009abc <moveresults+0x3e>
        setnilvalue(s2v(res));  /* adjust with nil */
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	711a      	strb	r2, [r3, #4]
 8009aba:	e010      	b.n	8009ade <moveresults+0x60>
      else  /* at least one result */
        setobjs2s(L, res, L->top - nres);  /* move it to proper place */
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	425b      	negs	r3, r3
 8009aca:	4413      	add	r3, r2
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad2:	6812      	ldr	r2, [r2, #0]
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	791a      	ldrb	r2, [r3, #4]
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	711a      	strb	r2, [r3, #4]
      L->top = res + 1;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f103 0208 	add.w	r2, r3, #8
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	60da      	str	r2, [r3, #12]
      return;
 8009ae8:	e081      	b.n	8009bee <moveresults+0x170>
    case LUA_MULTRET:
      wanted = nres;  /* we want all results */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	603b      	str	r3, [r7, #0]
      break;
 8009aee:	e041      	b.n	8009b74 <moveresults+0xf6>
    default:  /* two/more results and/or to-be-closed variables */
      if (hastocloseCfunc(wanted)) {  /* to-be-closed variables? */
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af6:	da3c      	bge.n	8009b72 <moveresults+0xf4>
        ptrdiff_t savedres = savestack(L, res);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	623b      	str	r3, [r7, #32]
        L->ci->callstatus |= CIST_CLSRET;  /* in case of yields */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b10:	b292      	uxth	r2, r2
 8009b12:	845a      	strh	r2, [r3, #34]	; 0x22
        L->ci->u2.nres = nres;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	61da      	str	r2, [r3, #28]
        luaF_close(L, res, CLOSEKTOP, 1);
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 fd4c 	bl	800a5c2 <luaF_close>
        L->ci->callstatus &= ~CIST_CLSRET;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009b38:	b292      	uxth	r2, r2
 8009b3a:	845a      	strh	r2, [r3, #34]	; 0x22
        if (L->hookmask)  /* if needed, call hook after '__close's */
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d006      	beq.n	8009b52 <moveresults+0xd4>
          rethook(L, L->ci, nres);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7ff fec5 	bl	80098dc <rethook>
        res = restorestack(L, savedres);  /* close and hook can move stack */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	69da      	ldr	r2, [r3, #28]
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	4413      	add	r3, r2
 8009b5a:	60bb      	str	r3, [r7, #8]
        wanted = decodeNresults(wanted);
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	f06f 0302 	mvn.w	r3, #2
 8009b62:	1a9b      	subs	r3, r3, r2
 8009b64:	603b      	str	r3, [r7, #0]
        if (wanted == LUA_MULTRET)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6c:	d101      	bne.n	8009b72 <moveresults+0xf4>
          wanted = nres;  /* we want all results */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
      }
      break;
 8009b72:	bf00      	nop
  }
  /* generic case */
  firstresult = L->top - nres;  /* index of first result */
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	425b      	negs	r3, r3
 8009b7e:	4413      	add	r3, r2
 8009b80:	61fb      	str	r3, [r7, #28]
  if (nres > wanted)  /* extra results? */
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	dd01      	ble.n	8009b8e <moveresults+0x110>
    nres = wanted;  /* don't need them */
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nres; i++)  /* move all results to correct place */
 8009b8e:	2300      	movs	r3, #0
 8009b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b92:	e014      	b.n	8009bbe <moveresults+0x140>
    setobjs2s(L, res + i, firstresult + i);
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	69fa      	ldr	r2, [r7, #28]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	617b      	str	r3, [r7, #20]
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	6812      	ldr	r2, [r2, #0]
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	791a      	ldrb	r2, [r3, #4]
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	711a      	strb	r2, [r3, #4]
  for (i = 0; i < nres; i++)  /* move all results to correct place */
 8009bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bba:	3301      	adds	r3, #1
 8009bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	dbe6      	blt.n	8009b94 <moveresults+0x116>
  for (; i < wanted; i++)  /* complete wanted number of results */
 8009bc6:	e008      	b.n	8009bda <moveresults+0x15c>
    setnilvalue(s2v(res + i));
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	00db      	lsls	r3, r3, #3
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	4413      	add	r3, r2
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	711a      	strb	r2, [r3, #4]
  for (; i < wanted; i++)  /* complete wanted number of results */
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	dbf2      	blt.n	8009bc8 <moveresults+0x14a>
  L->top = res + wanted;  /* top points after the last result */
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	441a      	add	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	60da      	str	r2, [r3, #12]
}
 8009bee:	3730      	adds	r7, #48	; 0x30
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <luaD_poscall>:
** Finishes a function call: calls hook if necessary, moves current
** number of results to proper place, and returns to previous call
** info. If function has to close variables, hook must be called after
** that.
*/
void luaD_poscall (lua_State *L, CallInfo *ci, int nres) {
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  int wanted = ci->nresults;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009c06:	617b      	str	r3, [r7, #20]
  if (l_unlikely(L->hookmask && !hastocloseCfunc(wanted)))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d005      	beq.n	8009c1c <luaD_poscall+0x28>
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c16:	db01      	blt.n	8009c1c <luaD_poscall+0x28>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <luaD_poscall+0x2a>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bf14      	ite	ne
 8009c22:	2301      	movne	r3, #1
 8009c24:	2300      	moveq	r3, #0
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d004      	beq.n	8009c36 <luaD_poscall+0x42>
    rethook(L, ci, nres);
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f7ff fe53 	bl	80098dc <rethook>
  /* move results to proper place */
  moveresults(L, ci->func, nres, wanted);
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6819      	ldr	r1, [r3, #0]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f7ff ff1d 	bl	8009a7e <moveresults>
  /* function cannot be in any of these cases when returning */
  lua_assert(!(ci->callstatus &
        (CIST_HOOKED | CIST_YPCALL | CIST_FIN | CIST_TRAN | CIST_CLSRET)));
  L->ci = ci->previous;  /* back to caller (after closing variables) */
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	615a      	str	r2, [r3, #20]
}
 8009c4c:	bf00      	nop
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <prepCallInfo>:

#define next_ci(L)  (L->ci->next ? L->ci->next : luaE_extendCI(L))


l_sinline CallInfo *prepCallInfo (lua_State *L, StkId func, int nret,
                                                int mask, StkId top) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
  CallInfo *ci = L->ci = next_ci(L);  /* new frame */
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <prepCallInfo+0x20>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	e003      	b.n	8009c7c <prepCallInfo+0x28>
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f003 ff9c 	bl	800dbb2 <luaE_extendCI>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	6153      	str	r3, [r2, #20]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	617b      	str	r3, [r7, #20]
  ci->func = func;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	601a      	str	r2, [r3, #0]
  ci->nresults = nret;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	b21a      	sxth	r2, r3
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	841a      	strh	r2, [r3, #32]
  ci->callstatus = mask;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	845a      	strh	r2, [r3, #34]	; 0x22
  ci->top = top;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	6a3a      	ldr	r2, [r7, #32]
 8009ca0:	605a      	str	r2, [r3, #4]
  return ci;
 8009ca2:	697b      	ldr	r3, [r7, #20]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <precallC>:

/*
** precall for C functions
*/
l_sinline int precallC (lua_State *L, StkId func, int nresults,
                                            lua_CFunction f) {
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af02      	add	r7, sp, #8
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
  int n;  /* number of returns */
  CallInfo *ci;
  checkstackGCp(L, LUA_MINSTACK, func);  /* ensure minimum stack size */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	699a      	ldr	r2, [r3, #24]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	2ba0      	cmp	r3, #160	; 0xa0
 8009cc6:	bfd4      	ite	le
 8009cc8:	2301      	movle	r3, #1
 8009cca:	2300      	movgt	r3, #0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d016      	beq.n	8009d00 <precallC+0x54>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	61fb      	str	r3, [r7, #28]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	dd02      	ble.n	8009cec <precallC+0x40>
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f002 ffd2 	bl	800cc90 <luaC_step>
 8009cec:	2201      	movs	r2, #1
 8009cee:	2114      	movs	r1, #20
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff fc47 	bl	8009584 <luaD_growstack>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	69da      	ldr	r2, [r3, #28]
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	60bb      	str	r3, [r7, #8]
  L->ci = ci = prepCallInfo(L, func, nresults, CIST_C,
                               L->top + LUA_MINSTACK);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68db      	ldr	r3, [r3, #12]
  L->ci = ci = prepCallInfo(L, func, nresults, CIST_C,
 8009d04:	33a0      	adds	r3, #160	; 0xa0
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	2302      	movs	r3, #2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f7ff ffa0 	bl	8009c54 <prepCallInfo>
 8009d14:	61b8      	str	r0, [r7, #24]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	615a      	str	r2, [r3, #20]
  lua_assert(ci->top <= L->stack_last);
  if (l_unlikely(L->hookmask & LUA_MASKCALL)) {
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bf14      	ite	ne
 8009d28:	2301      	movne	r3, #1
 8009d2a:	2300      	moveq	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00f      	beq.n	8009d52 <precallC+0xa6>
    int narg = cast_int(L->top - func) - 1;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	68da      	ldr	r2, [r3, #12]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	10db      	asrs	r3, r3, #3
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	617b      	str	r3, [r7, #20]
    luaD_hook(L, LUA_HOOKCALL, -1, 1, narg);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	2301      	movs	r3, #1
 8009d46:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff fce0 	bl	8009712 <luaD_hook>
  }
  lua_unlock(L);
  n = (*f)(L);  /* do the actual call */
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	4798      	blx	r3
 8009d58:	6138      	str	r0, [r7, #16]
  lua_lock(L);
  api_checknelems(L, n);
  luaD_poscall(L, ci, n);
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	69b9      	ldr	r1, [r7, #24]
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7ff ff48 	bl	8009bf4 <luaD_poscall>
  return n;
 8009d64:	693b      	ldr	r3, [r7, #16]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <luaD_pretailcall>:
** of the current call info. 'narg1' is the number of arguments plus 1
** (so that it includes the function itself). Return the number of
** results, if it was a C function, or -1 for a Lua function.
*/
int luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func,
                                    int narg1, int delta) {
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b08c      	sub	sp, #48	; 0x30
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
 8009d7a:	603b      	str	r3, [r7, #0]
 retry:
  switch (ttypetag(s2v(func))) {
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	791b      	ldrb	r3, [r3, #4]
 8009d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d84:	2b26      	cmp	r3, #38	; 0x26
 8009d86:	d007      	beq.n	8009d98 <luaD_pretailcall+0x2a>
 8009d88:	2b26      	cmp	r3, #38	; 0x26
 8009d8a:	f300 80a0 	bgt.w	8009ece <luaD_pretailcall+0x160>
 8009d8e:	2b06      	cmp	r3, #6
 8009d90:	d017      	beq.n	8009dc2 <luaD_pretailcall+0x54>
 8009d92:	2b16      	cmp	r3, #22
 8009d94:	d00b      	beq.n	8009dae <luaD_pretailcall+0x40>
 8009d96:	e09a      	b.n	8009ece <luaD_pretailcall+0x160>
    case LUA_VCCL:  /* C closure */
      return precallC(L, func, LUA_MULTRET, clCvalue(s2v(func))->f);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7ff ff81 	bl	8009cac <precallC>
 8009daa:	4603      	mov	r3, r0
 8009dac:	e098      	b.n	8009ee0 <luaD_pretailcall+0x172>
    case LUA_VLCF:  /* light C function */
      return precallC(L, func, LUA_MULTRET, fvalue(s2v(func)));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f04f 32ff 	mov.w	r2, #4294967295
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7ff ff77 	bl	8009cac <precallC>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	e08e      	b.n	8009ee0 <luaD_pretailcall+0x172>
    case LUA_VLCL: {  /* Lua function */
      Proto *p = clLvalue(s2v(func))->p;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      int fsize = p->maxstacksize;  /* frame size */
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	7a1b      	ldrb	r3, [r3, #8]
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
      int nfixparams = p->numparams;
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	799b      	ldrb	r3, [r3, #6]
 8009dd4:	623b      	str	r3, [r7, #32]
      int i;
      checkstackGCp(L, fsize - delta, func);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	10db      	asrs	r3, r3, #3
 8009de2:	4619      	mov	r1, r3
 8009de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	4299      	cmp	r1, r3
 8009dec:	bfd4      	ite	le
 8009dee:	2301      	movle	r3, #1
 8009df0:	2300      	movgt	r3, #0
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d019      	beq.n	8009e2c <luaD_pretailcall+0xbe>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	61fb      	str	r3, [r7, #28]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dd02      	ble.n	8009e12 <luaD_pretailcall+0xa4>
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f002 ff3f 	bl	800cc90 <luaC_step>
 8009e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2201      	movs	r2, #1
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7ff fbb1 	bl	8009584 <luaD_growstack>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	69da      	ldr	r2, [r3, #28]
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	4413      	add	r3, r2
 8009e2a:	607b      	str	r3, [r7, #4]
      ci->func -= delta;  /* restore 'func' (if vararg) */
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	425b      	negs	r3, r3
 8009e36:	441a      	add	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	601a      	str	r2, [r3, #0]
      for (i = 0; i < narg1; i++)  /* move down function and arguments */
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e40:	e015      	b.n	8009e6e <luaD_pretailcall+0x100>
        setobjs2s(L, ci->func + i, func + i);
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	00db      	lsls	r3, r3, #3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	61bb      	str	r3, [r7, #24]
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	4413      	add	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	6812      	ldr	r2, [r2, #0]
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	791a      	ldrb	r2, [r3, #4]
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	711a      	strb	r2, [r3, #4]
      for (i = 0; i < narg1; i++)  /* move down function and arguments */
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	dbe5      	blt.n	8009e42 <luaD_pretailcall+0xd4>
      func = ci->func;  /* moved-down function */
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	607b      	str	r3, [r7, #4]
      for (; narg1 <= nfixparams; narg1++)
 8009e7c:	e008      	b.n	8009e90 <luaD_pretailcall+0x122>
        setnilvalue(s2v(func + narg1));  /* complete missing arguments */
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	4413      	add	r3, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	711a      	strb	r2, [r3, #4]
      for (; narg1 <= nfixparams; narg1++)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	ddf2      	ble.n	8009e7e <luaD_pretailcall+0x110>
      ci->top = func + 1 + fsize;  /* top for new function */
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	00db      	lsls	r3, r3, #3
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	441a      	add	r2, r3
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	605a      	str	r2, [r3, #4]
      lua_assert(ci->top <= L->stack_last);
      ci->u.l.savedpc = p->code;  /* starting point */
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	611a      	str	r2, [r3, #16]
      ci->callstatus |= CIST_TAIL;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009eb2:	f043 0320 	orr.w	r3, r3, #32
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	845a      	strh	r2, [r3, #34]	; 0x22
      L->top = func + narg1;  /* set top */
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	441a      	add	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	60da      	str	r2, [r3, #12]
      return -1;
 8009ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ecc:	e008      	b.n	8009ee0 <luaD_pretailcall+0x172>
    }
    default: {  /* not a function */
      func = luaD_tryfuncTM(L, func);  /* try to get '__call' metamethod */
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7ff fd66 	bl	80099a2 <luaD_tryfuncTM>
 8009ed6:	6078      	str	r0, [r7, #4]
      /* return luaD_pretailcall(L, ci, func, narg1 + 1, delta); */
      narg1++;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	603b      	str	r3, [r7, #0]
      goto retry;  /* try again */
 8009ede:	e74d      	b.n	8009d7c <luaD_pretailcall+0xe>
    }
  }
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3730      	adds	r7, #48	; 0x30
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <luaD_precall>:
** are on the stack, right after the function.  Returns the CallInfo
** to be executed, if it was a Lua function. Otherwise (a C function)
** returns NULL, with all the results on the stack, starting at the
** original function position.
*/
CallInfo *luaD_precall (lua_State *L, StkId func, int nresults) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08c      	sub	sp, #48	; 0x30
 8009eec:	af02      	add	r7, sp, #8
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 retry:
  switch (ttypetag(s2v(func))) {
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	791b      	ldrb	r3, [r3, #4]
 8009ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009efc:	2b26      	cmp	r3, #38	; 0x26
 8009efe:	d006      	beq.n	8009f0e <luaD_precall+0x26>
 8009f00:	2b26      	cmp	r3, #38	; 0x26
 8009f02:	dc74      	bgt.n	8009fee <luaD_precall+0x106>
 8009f04:	2b06      	cmp	r3, #6
 8009f06:	d015      	beq.n	8009f34 <luaD_precall+0x4c>
 8009f08:	2b16      	cmp	r3, #22
 8009f0a:	d00a      	beq.n	8009f22 <luaD_precall+0x3a>
 8009f0c:	e06f      	b.n	8009fee <luaD_precall+0x106>
    case LUA_VCCL:  /* C closure */
      precallC(L, func, nresults, clCvalue(s2v(func))->f);
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f7ff fec7 	bl	8009cac <precallC>
      return NULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	e06b      	b.n	8009ffa <luaD_precall+0x112>
    case LUA_VLCF:  /* light C function */
      precallC(L, func, nresults, fvalue(s2v(func)));
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff febe 	bl	8009cac <precallC>
      return NULL;
 8009f30:	2300      	movs	r3, #0
 8009f32:	e062      	b.n	8009ffa <luaD_precall+0x112>
    case LUA_VLCL: {  /* Lua function */
      CallInfo *ci;
      Proto *p = clLvalue(s2v(func))->p;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	623b      	str	r3, [r7, #32]
      int narg = cast_int(L->top - func) - 1;  /* number of real arguments */
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	10db      	asrs	r3, r3, #3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
      int nfixparams = p->numparams;
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	799b      	ldrb	r3, [r3, #6]
 8009f4e:	61fb      	str	r3, [r7, #28]
      int fsize = p->maxstacksize;  /* frame size */
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	7a1b      	ldrb	r3, [r3, #8]
 8009f54:	61bb      	str	r3, [r7, #24]
      checkstackGCp(L, fsize, func);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	699a      	ldr	r2, [r3, #24]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	10db      	asrs	r3, r3, #3
 8009f62:	461a      	mov	r2, r3
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	4293      	cmp	r3, r2
 8009f68:	bfac      	ite	ge
 8009f6a:	2301      	movge	r3, #1
 8009f6c:	2300      	movlt	r3, #0
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d016      	beq.n	8009fa2 <luaD_precall+0xba>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	617b      	str	r3, [r7, #20]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dd02      	ble.n	8009f8e <luaD_precall+0xa6>
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f002 fe81 	bl	800cc90 <luaC_step>
 8009f8e:	2201      	movs	r2, #1
 8009f90:	69b9      	ldr	r1, [r7, #24]
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff faf6 	bl	8009584 <luaD_growstack>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	60bb      	str	r3, [r7, #8]
      L->ci = ci = prepCallInfo(L, func, nresults, 0, func + 1 + fsize);
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	4413      	add	r3, r2
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f7ff fe4d 	bl	8009c54 <prepCallInfo>
 8009fba:	6138      	str	r0, [r7, #16]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	615a      	str	r2, [r3, #20]
      ci->u.l.savedpc = p->code;  /* starting point */
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	611a      	str	r2, [r3, #16]
      for (; narg < nfixparams; narg++)
 8009fca:	e00a      	b.n	8009fe2 <luaD_precall+0xfa>
        setnilvalue(s2v(L->top++));  /* complete missing arguments */
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f103 0108 	add.w	r1, r3, #8
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	60d1      	str	r1, [r2, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	711a      	strb	r2, [r3, #4]
      for (; narg < nfixparams; narg++)
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	3301      	adds	r3, #1
 8009fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	dbf0      	blt.n	8009fcc <luaD_precall+0xe4>
      lua_assert(ci->top <= L->stack_last);
      return ci;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	e005      	b.n	8009ffa <luaD_precall+0x112>
    }
    default: {  /* not a function */
      func = luaD_tryfuncTM(L, func);  /* try to get '__call' metamethod */
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f7ff fcd6 	bl	80099a2 <luaD_tryfuncTM>
 8009ff6:	60b8      	str	r0, [r7, #8]
      /* return luaD_precall(L, func, nresults); */
      goto retry;  /* try again with metamethod */
 8009ff8:	e77c      	b.n	8009ef4 <luaD_precall+0xc>
    }
  }
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3728      	adds	r7, #40	; 0x28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <ccall>:
/*
** Call a function (C or Lua) through C. 'inc' can be 1 (increment
** number of recursive invocations in the C stack) or nyci (the same
** plus increment number of non-yieldable calls).
*/
l_sinline void ccall (lua_State *L, StkId func, int nResults, int inc) {
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	603b      	str	r3, [r7, #0]
  CallInfo *ci;
  L->nCcalls += inc;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	441a      	add	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	661a      	str	r2, [r3, #96]	; 0x60
  if (l_unlikely(getCcalls(L) >= LUAI_MAXCCALLS))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a020:	b29b      	uxth	r3, r3
 800a022:	2bc7      	cmp	r3, #199	; 0xc7
 800a024:	bf8c      	ite	hi
 800a026:	2301      	movhi	r3, #1
 800a028:	2300      	movls	r3, #0
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <ccall+0x34>
    luaE_checkcstack(L);
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f003 fe39 	bl	800dca8 <luaE_checkcstack>
  if ((ci = luaD_precall(L, func, nResults)) != NULL) {  /* Lua function? */
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	68b9      	ldr	r1, [r7, #8]
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff ff54 	bl	8009ee8 <luaD_precall>
 800a040:	6178      	str	r0, [r7, #20]
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d006      	beq.n	800a056 <ccall+0x54>
    ci->callstatus = CIST_FRESH;  /* mark that it is a "fresh" execute */
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2204      	movs	r2, #4
 800a04c:	845a      	strh	r2, [r3, #34]	; 0x22
    luaV_execute(L, ci);  /* call it */
 800a04e:	6979      	ldr	r1, [r7, #20]
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f007 fea5 	bl	8011da0 <luaV_execute>
  }
  L->nCcalls -= inc;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	1ad2      	subs	r2, r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a062:	bf00      	nop
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <luaD_call>:


/*
** External interface for 'ccall'
*/
void luaD_call (lua_State *L, StkId func, int nResults) {
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	60f8      	str	r0, [r7, #12]
 800a072:	60b9      	str	r1, [r7, #8]
 800a074:	607a      	str	r2, [r7, #4]
  ccall(L, func, nResults, 1);
 800a076:	2301      	movs	r3, #1
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	68b9      	ldr	r1, [r7, #8]
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7ff ffc0 	bl	800a002 <ccall>
}
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <luaD_callnoyield>:


/*
** Similar to 'luaD_call', but does not allow yields during the call.
*/
void luaD_callnoyield (lua_State *L, StkId func, int nResults) {
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
  ccall(L, func, nResults, nyci);
 800a096:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7ff ffaf 	bl	800a002 <ccall>
}
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <closepaux>:


/*
** Auxiliary function to call 'luaF_close' in protected mode.
*/
static void closepaux (lua_State *L, void *ud) {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  struct CloseP *pcl = cast(struct CloseP *, ud);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]
  luaF_close(L, pcl->level, pcl->status, 0);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6819      	ldr	r1, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fa7c 	bl	800a5c2 <luaF_close>
}
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <luaD_closeprotected>:

/*
** Calls 'luaF_close' in protected mode. Return the original status
** or, in case of errors, the new status.
*/
int luaD_closeprotected (lua_State *L, ptrdiff_t level, int status) {
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  CallInfo *old_ci = L->ci;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	61fb      	str	r3, [r7, #28]
  lu_byte old_allowhooks = L->allowhook;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	79db      	ldrb	r3, [r3, #7]
 800a0ea:	76fb      	strb	r3, [r7, #27]
  for (;;) {  /* keep closing upvalues until no more errors */
    struct CloseP pcl;
    pcl.level = restorestack(L, level); pcl.status = status;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	69da      	ldr	r2, [r3, #28]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	617b      	str	r3, [r7, #20]
    status = luaD_rawrunprotected(L, &closepaux, &pcl);
 800a0fa:	f107 0310 	add.w	r3, r7, #16
 800a0fe:	461a      	mov	r2, r3
 800a100:	490c      	ldr	r1, [pc, #48]	; (800a134 <luaD_closeprotected+0x60>)
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff f957 	bl	80093b6 <luaD_rawrunprotected>
 800a108:	6078      	str	r0, [r7, #4]
    if (l_likely(status == LUA_OK))  /* no more errors? */
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bf0c      	ite	eq
 800a110:	2301      	moveq	r3, #1
 800a112:	2300      	movne	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <luaD_closeprotected+0x4a>
      return pcl.status;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	e006      	b.n	800a12c <luaD_closeprotected+0x58>
    else {  /* an error occurred; restore saved state and repeat */
      L->ci = old_ci;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	69fa      	ldr	r2, [r7, #28]
 800a122:	615a      	str	r2, [r3, #20]
      L->allowhook = old_allowhooks;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	7efa      	ldrb	r2, [r7, #27]
 800a128:	71da      	strb	r2, [r3, #7]
  for (;;) {  /* keep closing upvalues until no more errors */
 800a12a:	e7df      	b.n	800a0ec <luaD_closeprotected+0x18>
    }
  }
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3720      	adds	r7, #32
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	0800a0ad 	.word	0x0800a0ad

0800a138 <luaD_pcall>:
** Call the C function 'func' in protected mode, restoring basic
** thread information ('allowhook', etc.) and in particular
** its stack level in case of errors.
*/
int luaD_pcall (lua_State *L, Pfunc func, void *u,
                ptrdiff_t old_top, ptrdiff_t ef) {
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	603b      	str	r3, [r7, #0]
  int status;
  CallInfo *old_ci = L->ci;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	61bb      	str	r3, [r7, #24]
  lu_byte old_allowhooks = L->allowhook;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	79db      	ldrb	r3, [r3, #7]
 800a150:	75fb      	strb	r3, [r7, #23]
  ptrdiff_t old_errfunc = L->errfunc;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a156:	613b      	str	r3, [r7, #16]
  L->errfunc = ef;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a15c:	65da      	str	r2, [r3, #92]	; 0x5c
  status = luaD_rawrunprotected(L, func, u);
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff f927 	bl	80093b6 <luaD_rawrunprotected>
 800a168:	61f8      	str	r0, [r7, #28]
  if (l_unlikely(status != LUA_OK)) {  /* an error occurred? */
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bf14      	ite	ne
 800a170:	2301      	movne	r3, #1
 800a172:	2300      	moveq	r3, #0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d017      	beq.n	800a1aa <luaD_pcall+0x72>
    L->ci = old_ci;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	615a      	str	r2, [r3, #20]
    L->allowhook = old_allowhooks;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	7dfa      	ldrb	r2, [r7, #23]
 800a184:	71da      	strb	r2, [r3, #7]
    status = luaD_closeprotected(L, old_top, status);
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff ffa2 	bl	800a0d4 <luaD_closeprotected>
 800a190:	61f8      	str	r0, [r7, #28]
    luaD_seterrorobj(L, status, restorestack(L, old_top));
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	69da      	ldr	r2, [r3, #28]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	4413      	add	r3, r2
 800a19a:	461a      	mov	r2, r3
 800a19c:	69f9      	ldr	r1, [r7, #28]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7ff f86a 	bl	8009278 <luaD_seterrorobj>
    luaD_shrinkstack(L);   /* restore stack size in case of overflow */
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7ff fa79 	bl	800969c <luaD_shrinkstack>
  }
  L->errfunc = old_errfunc;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	65da      	str	r2, [r3, #92]	; 0x5c
  return status;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3720      	adds	r7, #32
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <luaF_newLclosure>:
  c->nupvalues = cast_byte(nupvals);
  return c;
}


LClosure *luaF_newLclosure (lua_State *L, int nupvals) {
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b084      	sub	sp, #16
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
  GCObject *o = luaC_newobj(L, LUA_VLCL, sizeLclosure(nupvals));
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	2106      	movs	r1, #6
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fc15 	bl	800a9fe <luaC_newobj>
 800a1d4:	60f8      	str	r0, [r7, #12]
  LClosure *c = gco2lcl(o);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	60bb      	str	r3, [r7, #8]
  c->p = NULL;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	60da      	str	r2, [r3, #12]
  c->nupvalues = cast_byte(nupvals);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	719a      	strb	r2, [r3, #6]
  while (nupvals--) c->upvals[nupvals] = NULL;
 800a1e8:	e005      	b.n	800a1f6 <luaF_newLclosure+0x3c>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	3204      	adds	r2, #4
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	1e5a      	subs	r2, r3, #1
 800a1fa:	603a      	str	r2, [r7, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1f4      	bne.n	800a1ea <luaF_newLclosure+0x30>
  return c;
 800a200:	68bb      	ldr	r3, [r7, #8]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <newupval>:

/*
** Create a new upvalue at the given level, and link it to the list of
** open upvalues of 'L' after entry 'prev'.
**/
static UpVal *newupval (lua_State *L, int tbc, StkId level, UpVal **prev) {
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b088      	sub	sp, #32
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	603b      	str	r3, [r7, #0]
  GCObject *o = luaC_newobj(L, LUA_VUPVAL, sizeof(UpVal));
 800a218:	2214      	movs	r2, #20
 800a21a:	2109      	movs	r1, #9
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 fbee 	bl	800a9fe <luaC_newobj>
 800a222:	61f8      	str	r0, [r7, #28]
  UpVal *uv = gco2upv(o);
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	61bb      	str	r3, [r7, #24]
  UpVal *next = *prev;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	617b      	str	r3, [r7, #20]
  uv->v = s2v(level);  /* current value lives in the stack */
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	609a      	str	r2, [r3, #8]
  uv->tbc = tbc;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	b2da      	uxtb	r2, r3
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	719a      	strb	r2, [r3, #6]
  uv->u.open.next = next;  /* link it to list of open upvalues */
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	60da      	str	r2, [r3, #12]
  uv->u.open.previous = prev;
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	611a      	str	r2, [r3, #16]
  if (next)
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d004      	beq.n	800a258 <newupval+0x4e>
    next->u.open.previous = &uv->u.open.next;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	f103 020c 	add.w	r2, r3, #12
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	611a      	str	r2, [r3, #16]
  *prev = uv;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	601a      	str	r2, [r3, #0]
  if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	429a      	cmp	r2, r3
 800a266:	d10a      	bne.n	800a27e <newupval+0x74>
    L->twups = G(L)->twups;  /* link it to the list */
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c
    G(L)->twups = L;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
  return uv;
 800a27e:	69bb      	ldr	r3, [r7, #24]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <luaF_findupval>:

/*
** Find and reuse, or create if it does not exist, an upvalue
** at the given level.
*/
UpVal *luaF_findupval (lua_State *L, StkId level) {
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  UpVal **pp = &L->openupval;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3320      	adds	r3, #32
 800a296:	60fb      	str	r3, [r7, #12]
  UpVal *p;
  lua_assert(isintwups(L) || L->openupval == NULL);
  while ((p = *pp) != NULL && uplevel(p) >= level) {  /* search for it */
 800a298:	e009      	b.n	800a2ae <luaF_findupval+0x26>
    lua_assert(!isdead(G(L), p));
    if (uplevel(p) == level)  /* corresponding upvalue? */
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d101      	bne.n	800a2a8 <luaF_findupval+0x20>
      return p;  /* return it */
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	e014      	b.n	800a2d2 <luaF_findupval+0x4a>
    pp = &p->u.open.next;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	330c      	adds	r3, #12
 800a2ac:	60fb      	str	r3, [r7, #12]
  while ((p = *pp) != NULL && uplevel(p) >= level) {  /* search for it */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	60bb      	str	r3, [r7, #8]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <luaF_findupval+0x3c>
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d9ea      	bls.n	800a29a <luaF_findupval+0x12>
  }
  /* not found: create a new upvalue after 'pp' */
  return newupval(L, 0, level, pp);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff ff9d 	bl	800a20a <newupval>
 800a2d0:	4603      	mov	r3, r0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <callclosemethod>:
/*
** Call closing method for object 'obj' with error message 'err'. The
** boolean 'yy' controls whether the call is yieldable.
** (This function assumes EXTRA_STACK.)
*/
static void callclosemethod (lua_State *L, TValue *obj, TValue *err, int yy) {
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b08c      	sub	sp, #48	; 0x30
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	60f8      	str	r0, [r7, #12]
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	607a      	str	r2, [r7, #4]
 800a2e6:	603b      	str	r3, [r7, #0]
  StkId top = L->top;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  const TValue *tm = luaT_gettmbyobj(L, obj, TM_CLOSE);
 800a2ee:	2218      	movs	r2, #24
 800a2f0:	68b9      	ldr	r1, [r7, #8]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f005 fd60 	bl	800fdb8 <luaT_gettmbyobj>
 800a2f8:	62b8      	str	r0, [r7, #40]	; 0x28
  setobj2s(L, top, tm);  /* will call metamethod... */
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	623b      	str	r3, [r7, #32]
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	6a3a      	ldr	r2, [r7, #32]
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	791a      	ldrb	r2, [r3, #4]
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	711a      	strb	r2, [r3, #4]
  setobj2s(L, top + 1, obj);  /* with 'self' as the 1st argument */
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	3308      	adds	r3, #8
 800a316:	61fb      	str	r3, [r7, #28]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	61bb      	str	r3, [r7, #24]
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	6812      	ldr	r2, [r2, #0]
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	791a      	ldrb	r2, [r3, #4]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	711a      	strb	r2, [r3, #4]
  setobj2s(L, top + 2, err);  /* and error msg. as 2nd argument */
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32e:	3310      	adds	r3, #16
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	6812      	ldr	r2, [r2, #0]
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	791a      	ldrb	r2, [r3, #4]
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	711a      	strb	r2, [r3, #4]
  L->top = top + 3;  /* add function and arguments */
 800a346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a348:	f103 0218 	add.w	r2, r3, #24
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	60da      	str	r2, [r3, #12]
  if (yy)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <callclosemethod+0x88>
    luaD_call(L, top, 0);
 800a356:	2200      	movs	r2, #0
 800a358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fe85 	bl	800a06a <luaD_call>
  else
    luaD_callnoyield(L, top, 0);
}
 800a360:	e004      	b.n	800a36c <callclosemethod+0x92>
    luaD_callnoyield(L, top, 0);
 800a362:	2200      	movs	r2, #0
 800a364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f7ff fe8f 	bl	800a08a <luaD_callnoyield>
}
 800a36c:	bf00      	nop
 800a36e:	3730      	adds	r7, #48	; 0x30
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <checkclosemth>:

/*
** Check whether object at given level has a close metamethod and raise
** an error if not.
*/
static void checkclosemth (lua_State *L, StkId level) {
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  const TValue *tm = luaT_gettmbyobj(L, s2v(level), TM_CLOSE);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2218      	movs	r2, #24
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f005 fd17 	bl	800fdb8 <luaT_gettmbyobj>
 800a38a:	6138      	str	r0, [r7, #16]
  if (ttisnil(tm)) {  /* no metamethod? */
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	791b      	ldrb	r3, [r3, #4]
 800a390:	f003 030f 	and.w	r3, r3, #15
 800a394:	2b00      	cmp	r3, #0
 800a396:	d118      	bne.n	800a3ca <checkclosemth+0x56>
    int idx = cast_int(level - L->ci->func);  /* variable index */
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	10db      	asrs	r3, r3, #3
 800a3a4:	60fb      	str	r3, [r7, #12]
    const char *vname = luaG_findlocal(L, L->ci, idx, NULL);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6959      	ldr	r1, [r3, #20]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7fe f854 	bl	800845c <luaG_findlocal>
 800a3b4:	6178      	str	r0, [r7, #20]
    if (vname == NULL) vname = "?";
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <checkclosemth+0x4c>
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <checkclosemth+0x60>)
 800a3be:	617b      	str	r3, [r7, #20]
    luaG_runerror(L, "variable '%s' got a non-closable value", vname);
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	4905      	ldr	r1, [pc, #20]	; (800a3d8 <checkclosemth+0x64>)
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7fe fe12 	bl	8008fee <luaG_runerror>
  }
}
 800a3ca:	bf00      	nop
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0802227c 	.word	0x0802227c
 800a3d8:	08022280 	.word	0x08022280

0800a3dc <prepcallclosemth>:
** If status is CLOSEKTOP, the call to the closing method will be pushed
** at the top of the stack. Otherwise, values can be pushed right after
** the 'level' of the upvalue being closed, as everything after that
** won't be used again.
*/
static void prepcallclosemth (lua_State *L, StkId level, int status, int yy) {
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
 800a3e8:	603b      	str	r3, [r7, #0]
  TValue *uv = s2v(level);  /* value being closed */
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	613b      	str	r3, [r7, #16]
  TValue *errobj;
  if (status == CLOSEKTOP)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f4:	d104      	bne.n	800a400 <prepcallclosemth+0x24>
    errobj = &G(L)->nilvalue;  /* error object is nil */
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	332c      	adds	r3, #44	; 0x2c
 800a3fc:	617b      	str	r3, [r7, #20]
 800a3fe:	e009      	b.n	800a414 <prepcallclosemth+0x38>
  else {  /* 'luaD_seterrorobj' will set top to level + 2 */
    errobj = s2v(level + 1);  /* error object goes after 'uv' */
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	3308      	adds	r3, #8
 800a404:	617b      	str	r3, [r7, #20]
    luaD_seterrorobj(L, status, level + 1);  /* set error object */
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	3308      	adds	r3, #8
 800a40a:	461a      	mov	r2, r3
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7fe ff32 	bl	8009278 <luaD_seterrorobj>
  }
  callclosemethod(L, uv, errobj, yy);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	6939      	ldr	r1, [r7, #16]
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff ff5d 	bl	800a2da <callclosemethod>
}
 800a420:	bf00      	nop
 800a422:	3718      	adds	r7, #24
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <luaF_newtbcupval>:


/*
** Insert a variable in the list of to-be-closed variables.
*/
void luaF_newtbcupval (lua_State *L, StkId level) {
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  lua_assert(level > L->tbclist);
  if (l_isfalse(s2v(level)))
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	791b      	ldrb	r3, [r3, #4]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d02a      	beq.n	800a490 <luaF_newtbcupval+0x68>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	791b      	ldrb	r3, [r3, #4]
 800a43e:	f003 030f 	and.w	r3, r3, #15
 800a442:	2b00      	cmp	r3, #0
 800a444:	d024      	beq.n	800a490 <luaF_newtbcupval+0x68>
    return;  /* false doesn't need to be closed */
  checkclosemth(L, level);  /* value must have a close method */
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff ff93 	bl	800a374 <checkclosemth>
  while (cast_uint(level - L->tbclist) > MAXDELTA) {
 800a44e:	e00b      	b.n	800a468 <luaF_newtbcupval+0x40>
    L->tbclist += MAXDELTA;  /* create a dummy node at maximum delta */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a454:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 800a458:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	6253      	str	r3, [r2, #36]	; 0x24
    L->tbclist->tbclist.delta = 0;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	2200      	movs	r2, #0
 800a466:	80da      	strh	r2, [r3, #6]
  while (cast_uint(level - L->tbclist) > MAXDELTA) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	461a      	mov	r2, r3
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <luaF_newtbcupval+0x70>)
 800a474:	429a      	cmp	r2, r3
 800a476:	d8eb      	bhi.n	800a450 <luaF_newtbcupval+0x28>
  }
  level->tbclist.delta = cast(unsigned short, level - L->tbclist);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	10db      	asrs	r3, r3, #3
 800a482:	b29a      	uxth	r2, r3
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	80da      	strh	r2, [r3, #6]
  L->tbclist = level;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	625a      	str	r2, [r3, #36]	; 0x24
 800a48e:	e000      	b.n	800a492 <luaF_newtbcupval+0x6a>
    return;  /* false doesn't need to be closed */
 800a490:	bf00      	nop
}
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	0007fff8 	.word	0x0007fff8

0800a49c <luaF_unlinkupval>:


void luaF_unlinkupval (UpVal *uv) {
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  lua_assert(upisopen(uv));
  *uv->u.open.previous = uv->u.open.next;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	68d2      	ldr	r2, [r2, #12]
 800a4ac:	601a      	str	r2, [r3, #0]
  if (uv->u.open.next)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d004      	beq.n	800a4c0 <luaF_unlinkupval+0x24>
    uv->u.open.next->u.open.previous = uv->u.open.previous;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6912      	ldr	r2, [r2, #16]
 800a4be:	611a      	str	r2, [r3, #16]
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <luaF_closeupval>:


/*
** Close all upvalues up to the given stack level.
*/
void luaF_closeupval (lua_State *L, StkId level) {
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  UpVal *uv;
  StkId upl;  /* stack index pointed by 'uv' */
  while ((uv = L->openupval) != NULL && (upl = uplevel(uv)) >= level) {
 800a4d6:	e03c      	b.n	800a552 <luaF_closeupval+0x86>
    TValue *slot = &uv->u.value;  /* new position for value */
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	330c      	adds	r3, #12
 800a4dc:	617b      	str	r3, [r7, #20]
    lua_assert(uplevel(uv) < L->top);
    luaF_unlinkupval(uv);  /* remove upvalue from 'openupval' list */
 800a4de:	69f8      	ldr	r0, [r7, #28]
 800a4e0:	f7ff ffdc 	bl	800a49c <luaF_unlinkupval>
    setobj(L, slot, uv->v);  /* move value to upvalue slot */
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	613b      	str	r3, [r7, #16]
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	60fb      	str	r3, [r7, #12]
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	601a      	str	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	791a      	ldrb	r2, [r3, #4]
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	711a      	strb	r2, [r3, #4]
    uv->v = slot;  /* now current value lives here */
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	609a      	str	r2, [r3, #8]
    if (!iswhite(uv)) {  /* neither white nor dead? */
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	795b      	ldrb	r3, [r3, #5]
 800a508:	f003 0318 	and.w	r3, r3, #24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d120      	bne.n	800a552 <luaF_closeupval+0x86>
      nw2black(uv);  /* closed upvalues cannot be gray */
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	795b      	ldrb	r3, [r3, #5]
 800a514:	f043 0320 	orr.w	r3, r3, #32
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	715a      	strb	r2, [r3, #5]
      luaC_barrier(L, uv, slot);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	791b      	ldrb	r3, [r3, #4]
 800a522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a526:	2b00      	cmp	r3, #0
 800a528:	d013      	beq.n	800a552 <luaF_closeupval+0x86>
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	795b      	ldrb	r3, [r3, #5]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00d      	beq.n	800a552 <luaF_closeupval+0x86>
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	795b      	ldrb	r3, [r3, #5]
 800a53c:	f003 0318 	and.w	r3, r3, #24
 800a540:	2b00      	cmp	r3, #0
 800a542:	d006      	beq.n	800a552 <luaF_closeupval+0x86>
 800a544:	69f9      	ldr	r1, [r7, #28]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f9b3 	bl	800a8b8 <luaC_barrier_>
  while ((uv = L->openupval) != NULL && (upl = uplevel(uv)) >= level) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	61fb      	str	r3, [r7, #28]
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d006      	beq.n	800a56c <luaF_closeupval+0xa0>
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	61bb      	str	r3, [r7, #24]
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d2b5      	bcs.n	800a4d8 <luaF_closeupval+0xc>
    }
  }
}
 800a56c:	bf00      	nop
 800a56e:	3720      	adds	r7, #32
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <poptbclist>:


/*
** Remove firt element from the tbclist plus its dummy nodes.
*/
static void poptbclist (lua_State *L) {
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  StkId tbc = L->tbclist;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	60fb      	str	r3, [r7, #12]
  lua_assert(tbc->tbclist.delta > 0);  /* first element cannot be dummy */
  tbc -= tbc->tbclist.delta;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	88db      	ldrh	r3, [r3, #6]
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	425b      	negs	r3, r3
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	4413      	add	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
  while (tbc > L->stack && tbc->tbclist.delta == 0)
 800a590:	e005      	b.n	800a59e <poptbclist+0x2a>
    tbc -= MAXDELTA;  /* remove dummy nodes */
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f5a3 23ff 	sub.w	r3, r3, #522240	; 0x7f800
 800a598:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 800a59c:	60fb      	str	r3, [r7, #12]
  while (tbc > L->stack && tbc->tbclist.delta == 0)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d903      	bls.n	800a5b0 <poptbclist+0x3c>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	88db      	ldrh	r3, [r3, #6]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0f0      	beq.n	800a592 <poptbclist+0x1e>
  L->tbclist = tbc;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <luaF_close>:

/*
** Close all upvalues and to-be-closed variables up to the given stack
** level.
*/
void luaF_close (lua_State *L, StkId level, int status, int yy) {
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b086      	sub	sp, #24
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	60b9      	str	r1, [r7, #8]
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	603b      	str	r3, [r7, #0]
  ptrdiff_t levelrel = savestack(L, level);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	617b      	str	r3, [r7, #20]
  luaF_closeupval(L, level);  /* first, close the upvalues */
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f7ff ff75 	bl	800a4cc <luaF_closeupval>
  while (L->tbclist >= level) {  /* traverse tbc's down to that level */
 800a5e2:	e010      	b.n	800a606 <luaF_close+0x44>
    StkId tbc = L->tbclist;  /* get variable index */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	613b      	str	r3, [r7, #16]
    poptbclist(L);  /* remove it from list */
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff ffc2 	bl	800a574 <poptbclist>
    prepcallclosemth(L, tbc, status, yy);  /* close variable */
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	6939      	ldr	r1, [r7, #16]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7ff fef0 	bl	800a3dc <prepcallclosemth>
    level = restorestack(L, levelrel);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	69da      	ldr	r2, [r3, #28]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	4413      	add	r3, r2
 800a604:	60bb      	str	r3, [r7, #8]
  while (L->tbclist >= level) {  /* traverse tbc's down to that level */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d9e9      	bls.n	800a5e4 <luaF_close+0x22>
  }
}
 800a610:	bf00      	nop
 800a612:	bf00      	nop
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <luaF_freeproto>:
  f->source = NULL;
  return f;
}


void luaF_freeproto (lua_State *L, Proto *f) {
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
  luaM_freearray(L, f->code, f->sizecode);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	461a      	mov	r2, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f002 fbd5 	bl	800cde0 <luaM_free_>
  luaM_freearray(L, f->p, f->sizep);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	461a      	mov	r2, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f002 fbcc 	bl	800cde0 <luaM_free_>
  luaM_freearray(L, f->k, f->sizek);
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	461a      	mov	r2, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f002 fbc3 	bl	800cde0 <luaM_free_>
  luaM_freearray(L, f->lineinfo, f->sizelineinfo);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	461a      	mov	r2, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f002 fbbb 	bl	800cde0 <luaM_free_>
  luaM_freearray(L, f->abslineinfo, f->sizeabslineinfo);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	461a      	mov	r2, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f002 fbb2 	bl	800cde0 <luaM_free_>
  luaM_freearray(L, f->locvars, f->sizelocvars);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	6a1b      	ldr	r3, [r3, #32]
 800a684:	461a      	mov	r2, r3
 800a686:	4613      	mov	r3, r2
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	461a      	mov	r2, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f002 fba5 	bl	800cde0 <luaM_free_>
  luaM_freearray(L, f->upvalues, f->sizeupvalues);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f002 fb9c 	bl	800cde0 <luaM_free_>
  luaM_free(L, f);
 800a6a8:	2254      	movs	r2, #84	; 0x54
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f002 fb97 	bl	800cde0 <luaM_free_>
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <luaF_getlocalname>:

/*
** Look for n-th local variable at line 'line' in function 'func'.
** Returns NULL if not found.
*/
const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {
 800a6ba:	b480      	push	{r7}
 800a6bc:	b087      	sub	sp, #28
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i<f->sizelocvars && f->locvars[i].startpc <= pc; i++) {
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]
 800a6ca:	e01f      	b.n	800a70c <luaF_getlocalname+0x52>
    if (pc < f->locvars[i].endpc) {  /* is variable active? */
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	da10      	bge.n	800a706 <luaF_getlocalname+0x4c>
      local_number--;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	60bb      	str	r3, [r7, #8]
      if (local_number == 0)
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <luaF_getlocalname+0x4c>
        return getstr(f->locvars[i].varname);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	440b      	add	r3, r1
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3310      	adds	r3, #16
 800a704:	e014      	b.n	800a730 <luaF_getlocalname+0x76>
  for (i = 0; i<f->sizelocvars && f->locvars[i].startpc <= pc; i++) {
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	3301      	adds	r3, #1
 800a70a:	617b      	str	r3, [r7, #20]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	429a      	cmp	r2, r3
 800a714:	da0b      	bge.n	800a72e <luaF_getlocalname+0x74>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	4613      	mov	r3, r2
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	440b      	add	r3, r1
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	dace      	bge.n	800a6cc <luaF_getlocalname+0x12>
    }
  }
  return NULL;  /* not found */
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	371c      	adds	r7, #28
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <getgclist>:
** one after last element in a hash array
*/
#define gnodelast(h)	gnode(h, cast_sizet(sizenode(h)))


static GCObject **getgclist (GCObject *o) {
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  switch (o->tt) {
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	791b      	ldrb	r3, [r3, #4]
 800a748:	3b05      	subs	r3, #5
 800a74a:	2b21      	cmp	r3, #33	; 0x21
 800a74c:	d85a      	bhi.n	800a804 <getgclist+0xc8>
 800a74e:	a201      	add	r2, pc, #4	; (adr r2, 800a754 <getgclist+0x18>)
 800a750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a754:	0800a7dd 	.word	0x0800a7dd
 800a758:	0800a7e3 	.word	0x0800a7e3
 800a75c:	0800a7fb 	.word	0x0800a7fb
 800a760:	0800a7ef 	.word	0x0800a7ef
 800a764:	0800a805 	.word	0x0800a805
 800a768:	0800a7f5 	.word	0x0800a7f5
 800a76c:	0800a805 	.word	0x0800a805
 800a770:	0800a805 	.word	0x0800a805
 800a774:	0800a805 	.word	0x0800a805
 800a778:	0800a805 	.word	0x0800a805
 800a77c:	0800a805 	.word	0x0800a805
 800a780:	0800a805 	.word	0x0800a805
 800a784:	0800a805 	.word	0x0800a805
 800a788:	0800a805 	.word	0x0800a805
 800a78c:	0800a805 	.word	0x0800a805
 800a790:	0800a805 	.word	0x0800a805
 800a794:	0800a805 	.word	0x0800a805
 800a798:	0800a805 	.word	0x0800a805
 800a79c:	0800a805 	.word	0x0800a805
 800a7a0:	0800a805 	.word	0x0800a805
 800a7a4:	0800a805 	.word	0x0800a805
 800a7a8:	0800a805 	.word	0x0800a805
 800a7ac:	0800a805 	.word	0x0800a805
 800a7b0:	0800a805 	.word	0x0800a805
 800a7b4:	0800a805 	.word	0x0800a805
 800a7b8:	0800a805 	.word	0x0800a805
 800a7bc:	0800a805 	.word	0x0800a805
 800a7c0:	0800a805 	.word	0x0800a805
 800a7c4:	0800a805 	.word	0x0800a805
 800a7c8:	0800a805 	.word	0x0800a805
 800a7cc:	0800a805 	.word	0x0800a805
 800a7d0:	0800a805 	.word	0x0800a805
 800a7d4:	0800a805 	.word	0x0800a805
 800a7d8:	0800a7e9 	.word	0x0800a7e9
    case LUA_VTABLE: return &gco2t(o)->gclist;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	331c      	adds	r3, #28
 800a7e0:	e011      	b.n	800a806 <getgclist+0xca>
    case LUA_VLCL: return &gco2lcl(o)->gclist;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	e00e      	b.n	800a806 <getgclist+0xca>
    case LUA_VCCL: return &gco2ccl(o)->gclist;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3308      	adds	r3, #8
 800a7ec:	e00b      	b.n	800a806 <getgclist+0xca>
    case LUA_VTHREAD: return &gco2th(o)->gclist;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3328      	adds	r3, #40	; 0x28
 800a7f2:	e008      	b.n	800a806 <getgclist+0xca>
    case LUA_VPROTO: return &gco2p(o)->gclist;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3350      	adds	r3, #80	; 0x50
 800a7f8:	e005      	b.n	800a806 <getgclist+0xca>
    case LUA_VUSERDATA: {
      Udata *u = gco2u(o);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	60fb      	str	r3, [r7, #12]
      lua_assert(u->nuvalue > 0);
      return &u->gclist;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3310      	adds	r3, #16
 800a802:	e000      	b.n	800a806 <getgclist+0xca>
    }
    default: lua_assert(0); return 0;
 800a804:	2300      	movs	r3, #0
  }
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop

0800a814 <linkgclist_>:
** Link a collectable object 'o' with a known type into the list 'p'.
** (Must be a macro to access the 'gclist' field in different types.)
*/
#define linkgclist(o,p)	linkgclist_(obj2gco(o), &(o)->gclist, &(p))

static void linkgclist_ (GCObject *o, GCObject **pnext, GCObject **list) {
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  lua_assert(!isgray(o));  /* cannot be in a gray list */
  *pnext = *list;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	601a      	str	r2, [r3, #0]
  *list = o;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	601a      	str	r2, [r3, #0]
  set2gray(o);  /* now it is */
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	795b      	ldrb	r3, [r3, #5]
 800a832:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a836:	b2da      	uxtb	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	715a      	strb	r2, [r3, #5]
}
 800a83c:	bf00      	nop
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <clearkey>:
** entry in the table: its removal could break a chain and could break
** a table traversal.  Other places never manipulate dead keys, because
** its associated empty value is enough to signal that the entry is
** logically empty.
*/
static void clearkey (Node *n) {
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  lua_assert(isempty(gval(n)));
  if (keyiscollectable(n))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	795b      	ldrb	r3, [r3, #5]
 800a854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <clearkey+0x1a>
    setdeadkey(n);  /* unused key; remove it */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	220b      	movs	r2, #11
 800a860:	715a      	strb	r2, [r3, #5]
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <iscleared>:
** table. Non-collectable objects are never removed from weak
** tables. Strings behave as 'values', so are never removed too. for
** other objects: if really collected, cannot keep them; for objects
** being finalized, keep them in keys, but not in values
*/
static int iscleared (global_State *g, const GCObject *o) {
 800a86e:	b580      	push	{r7, lr}
 800a870:	b082      	sub	sp, #8
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	6039      	str	r1, [r7, #0]
  if (o == NULL) return 0;  /* non-collectable value */
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <iscleared+0x14>
 800a87e:	2300      	movs	r3, #0
 800a880:	e016      	b.n	800a8b0 <iscleared+0x42>
  else if (novariant(o->tt) == LUA_TSTRING) {
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	791b      	ldrb	r3, [r3, #4]
 800a886:	f003 030f 	and.w	r3, r3, #15
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	d10c      	bne.n	800a8a8 <iscleared+0x3a>
    markobject(g, o);  /* strings are 'values', so are never weak */
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	795b      	ldrb	r3, [r3, #5]
 800a892:	f003 0318 	and.w	r3, r3, #24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d004      	beq.n	800a8a4 <iscleared+0x36>
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f8d8 	bl	800aa54 <reallymarkobject>
    return 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	e003      	b.n	800a8b0 <iscleared+0x42>
  }
  else return iswhite(o);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	795b      	ldrb	r3, [r3, #5]
 800a8ac:	f003 0318 	and.w	r3, r3, #24
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <luaC_barrier_>:
** incremental sweep phase, it clears the black object to white (sweep
** it) to avoid other barrier calls for this same object. (That cannot
** be done is generational mode, as its sweep does not distinguish
** whites from deads.)
*/
void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
  global_State *g = G(L);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	617b      	str	r3, [r7, #20]
  lua_assert(isblack(o) && iswhite(v) && !isdead(g, v) && !isdead(g, o));
  if (keepinvariant(g)) {  /* must keep invariant? */
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d816      	bhi.n	800a902 <luaC_barrier_+0x4a>
    reallymarkobject(g, v);  /* restore invariant */
 800a8d4:	6879      	ldr	r1, [r7, #4]
 800a8d6:	6978      	ldr	r0, [r7, #20]
 800a8d8:	f000 f8bc 	bl	800aa54 <reallymarkobject>
    if (isold(o)) {
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	795b      	ldrb	r3, [r3, #5]
 800a8e0:	f003 0306 	and.w	r3, r3, #6
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d023      	beq.n	800a930 <luaC_barrier_+0x78>
      lua_assert(!isold(v));  /* white object could not be old */
      setage(v, G_OLD0);  /* restore generational invariant */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	795b      	ldrb	r3, [r3, #5]
 800a8ec:	b25b      	sxtb	r3, r3
 800a8ee:	f023 0307 	bic.w	r3, r3, #7
 800a8f2:	b25b      	sxtb	r3, r3
 800a8f4:	f043 0302 	orr.w	r3, r3, #2
 800a8f8:	b25b      	sxtb	r3, r3
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	715a      	strb	r2, [r3, #5]
  else {  /* sweep phase */
    lua_assert(issweepphase(g));
    if (g->gckind == KGC_INC)  /* incremental mode? */
      makewhite(g, o);  /* mark 'o' as white to avoid other barriers */
  }
}
 800a900:	e016      	b.n	800a930 <luaC_barrier_+0x78>
    if (g->gckind == KGC_INC)  /* incremental mode? */
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d111      	bne.n	800a930 <luaC_barrier_+0x78>
      makewhite(g, o);  /* mark 'o' as white to avoid other barriers */
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	795b      	ldrb	r3, [r3, #5]
 800a910:	b25b      	sxtb	r3, r3
 800a912:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a916:	b25a      	sxtb	r2, r3
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a91e:	b25b      	sxtb	r3, r3
 800a920:	f003 0318 	and.w	r3, r3, #24
 800a924:	b25b      	sxtb	r3, r3
 800a926:	4313      	orrs	r3, r2
 800a928:	b25b      	sxtb	r3, r3
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	715a      	strb	r2, [r3, #5]
}
 800a930:	bf00      	nop
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <luaC_barrierback_>:

/*
** barrier that moves collector backward, that is, mark the black object
** pointing to a white object as gray again.
*/
void luaC_barrierback_ (lua_State *L, GCObject *o) {
 800a938:	b590      	push	{r4, r7, lr}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	60fb      	str	r3, [r7, #12]
  lua_assert(isblack(o) && !isdead(g, o));
  lua_assert((g->gckind == KGC_GEN) == (isold(o) && getage(o) != G_TOUCHED1));
  if (getage(o) == G_TOUCHED2)  /* already in gray list? */
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	795b      	ldrb	r3, [r3, #5]
 800a94c:	f003 0307 	and.w	r3, r3, #7
 800a950:	2b06      	cmp	r3, #6
 800a952:	d107      	bne.n	800a964 <luaC_barrierback_+0x2c>
    set2gray(o);  /* make it gray to become touched1 */
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	795b      	ldrb	r3, [r3, #5]
 800a958:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	715a      	strb	r2, [r3, #5]
 800a962:	e00a      	b.n	800a97a <luaC_barrierback_+0x42>
  else  /* link it in 'grayagain' and paint it gray */
    linkobjgclist(o, g->grayagain);
 800a964:	683c      	ldr	r4, [r7, #0]
 800a966:	6838      	ldr	r0, [r7, #0]
 800a968:	f7ff fee8 	bl	800a73c <getgclist>
 800a96c:	4601      	mov	r1, r0
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3354      	adds	r3, #84	; 0x54
 800a972:	461a      	mov	r2, r3
 800a974:	4620      	mov	r0, r4
 800a976:	f7ff ff4d 	bl	800a814 <linkgclist_>
  if (isold(o))  /* generational mode? */
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	795b      	ldrb	r3, [r3, #5]
 800a97e:	f003 0306 	and.w	r3, r3, #6
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00b      	beq.n	800a99e <luaC_barrierback_+0x66>
    setage(o, G_TOUCHED1);  /* touched in current cycle */
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	795b      	ldrb	r3, [r3, #5]
 800a98a:	b25b      	sxtb	r3, r3
 800a98c:	f023 0307 	bic.w	r3, r3, #7
 800a990:	b25b      	sxtb	r3, r3
 800a992:	f043 0305 	orr.w	r3, r3, #5
 800a996:	b25b      	sxtb	r3, r3
 800a998:	b2da      	uxtb	r2, r3
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	715a      	strb	r2, [r3, #5]
}
 800a99e:	bf00      	nop
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd90      	pop	{r4, r7, pc}

0800a9a6 <luaC_fix>:


void luaC_fix (lua_State *L, GCObject *o) {
 800a9a6:	b480      	push	{r7}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	60fb      	str	r3, [r7, #12]
  lua_assert(g->allgc == o);  /* object must be 1st in 'allgc' list! */
  set2gray(o);  /* they will be gray forever */
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	795b      	ldrb	r3, [r3, #5]
 800a9ba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	715a      	strb	r2, [r3, #5]
  setage(o, G_OLD);  /* and old forever */
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	795b      	ldrb	r3, [r3, #5]
 800a9c8:	b25b      	sxtb	r3, r3
 800a9ca:	f023 0307 	bic.w	r3, r3, #7
 800a9ce:	b25b      	sxtb	r3, r3
 800a9d0:	f043 0304 	orr.w	r3, r3, #4
 800a9d4:	b25b      	sxtb	r3, r3
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	715a      	strb	r2, [r3, #5]
  g->allgc = o->next;  /* remove object from 'allgc' list */
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	645a      	str	r2, [r3, #68]	; 0x44
  o->next = g->fixedgc;  /* link it to 'fixedgc' list */
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	601a      	str	r2, [r3, #0]
  g->fixedgc = o;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a9f2:	bf00      	nop
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <luaC_newobj>:

/*
** create a new collectable object (with given type and size) and link
** it to 'allgc' list.
*/
GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
  global_State *g = G(L);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	617b      	str	r3, [r7, #20]
  GCObject *o = cast(GCObject *, luaM_newobject(L, novariant(tt), sz));
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	f003 030f 	and.w	r3, r3, #15
 800aa16:	461a      	mov	r2, r3
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f002 fa64 	bl	800cee8 <luaM_malloc_>
 800aa20:	6138      	str	r0, [r7, #16]
  o->marked = luaC_white(g);
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa28:	f003 0318 	and.w	r3, r3, #24
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	715a      	strb	r2, [r3, #5]
  o->tt = tt;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	711a      	strb	r2, [r3, #4]
  o->next = g->allgc;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	601a      	str	r2, [r3, #0]
  g->allgc = o;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	645a      	str	r2, [r3, #68]	; 0x44
  return o;
 800aa48:	693b      	ldr	r3, [r7, #16]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
	...

0800aa54 <reallymarkobject>:
** gray list to be visited (and turned black) later.  Both userdata and
** upvalues can call this function recursively, but this recursion goes
** for at most two levels: An upvalue cannot refer to another upvalue
** (only closures can), and a userdata's metatable must be a table.
*/
static void reallymarkobject (global_State *g, GCObject *o) {
 800aa54:	b590      	push	{r4, r7, lr}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  switch (o->tt) {
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	791b      	ldrb	r3, [r3, #4]
 800aa62:	3b04      	subs	r3, #4
 800aa64:	2b22      	cmp	r3, #34	; 0x22
 800aa66:	f200 80b9 	bhi.w	800abdc <reallymarkobject+0x188>
 800aa6a:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <reallymarkobject+0x1c>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aafd 	.word	0x0800aafd
 800aa74:	0800abc5 	.word	0x0800abc5
 800aa78:	0800abc5 	.word	0x0800abc5
 800aa7c:	0800ab7d 	.word	0x0800ab7d
 800aa80:	0800abc5 	.word	0x0800abc5
 800aa84:	0800ab17 	.word	0x0800ab17
 800aa88:	0800abc5 	.word	0x0800abc5
 800aa8c:	0800abdd 	.word	0x0800abdd
 800aa90:	0800abdd 	.word	0x0800abdd
 800aa94:	0800abdd 	.word	0x0800abdd
 800aa98:	0800abdd 	.word	0x0800abdd
 800aa9c:	0800abdd 	.word	0x0800abdd
 800aaa0:	0800abdd 	.word	0x0800abdd
 800aaa4:	0800abdd 	.word	0x0800abdd
 800aaa8:	0800abdd 	.word	0x0800abdd
 800aaac:	0800abdd 	.word	0x0800abdd
 800aab0:	0800aafd 	.word	0x0800aafd
 800aab4:	0800abdd 	.word	0x0800abdd
 800aab8:	0800abdd 	.word	0x0800abdd
 800aabc:	0800abdd 	.word	0x0800abdd
 800aac0:	0800abdd 	.word	0x0800abdd
 800aac4:	0800abdd 	.word	0x0800abdd
 800aac8:	0800abdd 	.word	0x0800abdd
 800aacc:	0800abdd 	.word	0x0800abdd
 800aad0:	0800abdd 	.word	0x0800abdd
 800aad4:	0800abdd 	.word	0x0800abdd
 800aad8:	0800abdd 	.word	0x0800abdd
 800aadc:	0800abdd 	.word	0x0800abdd
 800aae0:	0800abdd 	.word	0x0800abdd
 800aae4:	0800abdd 	.word	0x0800abdd
 800aae8:	0800abdd 	.word	0x0800abdd
 800aaec:	0800abdd 	.word	0x0800abdd
 800aaf0:	0800abdd 	.word	0x0800abdd
 800aaf4:	0800abdd 	.word	0x0800abdd
 800aaf8:	0800abc5 	.word	0x0800abc5
    case LUA_VSHRSTR:
    case LUA_VLNGSTR: {
      set2black(o);  /* nothing to visit */
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	795b      	ldrb	r3, [r3, #5]
 800ab00:	b25b      	sxtb	r3, r3
 800ab02:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800ab06:	b25b      	sxtb	r3, r3
 800ab08:	f043 0320 	orr.w	r3, r3, #32
 800ab0c:	b25b      	sxtb	r3, r3
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	715a      	strb	r2, [r3, #5]
      break;
 800ab14:	e065      	b.n	800abe2 <reallymarkobject+0x18e>
    }
    case LUA_VUPVAL: {
      UpVal *uv = gco2upv(o);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	60fb      	str	r3, [r7, #12]
      if (upisopen(uv))
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	689a      	ldr	r2, [r3, #8]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	330c      	adds	r3, #12
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d007      	beq.n	800ab36 <reallymarkobject+0xe2>
        set2gray(uv);  /* open upvalues are kept gray */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	795b      	ldrb	r3, [r3, #5]
 800ab2a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	715a      	strb	r2, [r3, #5]
 800ab34:	e00b      	b.n	800ab4e <reallymarkobject+0xfa>
      else
        set2black(uv);  /* closed upvalues are visited here */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	795b      	ldrb	r3, [r3, #5]
 800ab3a:	b25b      	sxtb	r3, r3
 800ab3c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800ab40:	b25b      	sxtb	r3, r3
 800ab42:	f043 0320 	orr.w	r3, r3, #32
 800ab46:	b25b      	sxtb	r3, r3
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	715a      	strb	r2, [r3, #5]
      markvalue(g, uv->v);  /* mark its content */
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	791b      	ldrb	r3, [r3, #4]
 800ab54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d041      	beq.n	800abe0 <reallymarkobject+0x18c>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	795b      	ldrb	r3, [r3, #5]
 800ab64:	f003 0318 	and.w	r3, r3, #24
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d039      	beq.n	800abe0 <reallymarkobject+0x18c>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff ff6d 	bl	800aa54 <reallymarkobject>
      break;
 800ab7a:	e031      	b.n	800abe0 <reallymarkobject+0x18c>
    }
    case LUA_VUSERDATA: {
      Udata *u = gco2u(o);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	60bb      	str	r3, [r7, #8]
      if (u->nuvalue == 0) {  /* no user values? */
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	88db      	ldrh	r3, [r3, #6]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d11d      	bne.n	800abc4 <reallymarkobject+0x170>
        markobjectN(g, u->metatable);  /* mark its metatable */
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00c      	beq.n	800abaa <reallymarkobject+0x156>
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	795b      	ldrb	r3, [r3, #5]
 800ab96:	f003 0318 	and.w	r3, r3, #24
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d005      	beq.n	800abaa <reallymarkobject+0x156>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff ff55 	bl	800aa54 <reallymarkobject>
        set2black(u);  /* nothing else to mark */
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	795b      	ldrb	r3, [r3, #5]
 800abae:	b25b      	sxtb	r3, r3
 800abb0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800abb4:	b25b      	sxtb	r3, r3
 800abb6:	f043 0320 	orr.w	r3, r3, #32
 800abba:	b25b      	sxtb	r3, r3
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	715a      	strb	r2, [r3, #5]
        break;
 800abc2:	e00e      	b.n	800abe2 <reallymarkobject+0x18e>
      }
      /* else... */
    }  /* FALLTHROUGH */
    case LUA_VLCL: case LUA_VCCL: case LUA_VTABLE:
    case LUA_VTHREAD: case LUA_VPROTO: {
      linkobjgclist(o, g->gray);  /* to be visited later */
 800abc4:	683c      	ldr	r4, [r7, #0]
 800abc6:	6838      	ldr	r0, [r7, #0]
 800abc8:	f7ff fdb8 	bl	800a73c <getgclist>
 800abcc:	4601      	mov	r1, r0
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3350      	adds	r3, #80	; 0x50
 800abd2:	461a      	mov	r2, r3
 800abd4:	4620      	mov	r0, r4
 800abd6:	f7ff fe1d 	bl	800a814 <linkgclist_>
      break;
 800abda:	e002      	b.n	800abe2 <reallymarkobject+0x18e>
    }
    default: lua_assert(0); break;
 800abdc:	bf00      	nop
 800abde:	e000      	b.n	800abe2 <reallymarkobject+0x18e>
      break;
 800abe0:	bf00      	nop
  }
}
 800abe2:	bf00      	nop
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd90      	pop	{r4, r7, pc}
 800abea:	bf00      	nop

0800abec <markmt>:


/*
** mark metamethods for basic types
*/
static void markmt (global_State *g) {
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  int i;
  for (i=0; i < LUA_NUMTAGS; i++)
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	e01f      	b.n	800ac3a <markmt+0x4e>
    markobjectN(g, g->mt[i]);
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	333e      	adds	r3, #62	; 0x3e
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d014      	beq.n	800ac34 <markmt+0x48>
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	333e      	adds	r3, #62	; 0x3e
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	795b      	ldrb	r3, [r3, #5]
 800ac18:	f003 0318 	and.w	r3, r3, #24
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d009      	beq.n	800ac34 <markmt+0x48>
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	333e      	adds	r3, #62	; 0x3e
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff ff10 	bl	800aa54 <reallymarkobject>
  for (i=0; i < LUA_NUMTAGS; i++)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3301      	adds	r3, #1
 800ac38:	60fb      	str	r3, [r7, #12]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	dddc      	ble.n	800abfa <markmt+0xe>
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <markbeingfnz>:


/*
** mark all objects in list of being-finalized
*/
static lu_mem markbeingfnz (global_State *g) {
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  GCObject *o;
  lu_mem count = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60bb      	str	r3, [r7, #8]
  for (o = g->tobefnz; o != NULL; o = o->next) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	e010      	b.n	800ac80 <markbeingfnz+0x36>
    count++;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60bb      	str	r3, [r7, #8]
    markobject(g, o);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	795b      	ldrb	r3, [r3, #5]
 800ac68:	f003 0318 	and.w	r3, r3, #24
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d004      	beq.n	800ac7a <markbeingfnz+0x30>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7ff feed 	bl	800aa54 <reallymarkobject>
  for (o = g->tobefnz; o != NULL; o = o->next) {
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60fb      	str	r3, [r7, #12]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1eb      	bne.n	800ac5e <markbeingfnz+0x14>
  }
  return count;
 800ac86:	68bb      	ldr	r3, [r7, #8]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <remarkupvals>:
** any visited upvalue must be young too.) Also removes the thread from
** the list, as it was already visited. Removes also threads with no
** upvalues, as they have nothing to be checked. (If the thread gets an
** upvalue later, it will be linked in the list again.)
*/
static int remarkupvals (global_State *g) {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  lua_State *thread;
  lua_State **p = &g->twups;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3388      	adds	r3, #136	; 0x88
 800ac9c:	617b      	str	r3, [r7, #20]
  int work = 0;  /* estimate of how much work was done here */
 800ac9e:	2300      	movs	r3, #0
 800aca0:	613b      	str	r3, [r7, #16]
  while ((thread = *p) != NULL) {
 800aca2:	e040      	b.n	800ad26 <remarkupvals+0x96>
    work++;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	3301      	adds	r3, #1
 800aca8:	613b      	str	r3, [r7, #16]
    if (!iswhite(thread) && thread->openupval != NULL)
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	795b      	ldrb	r3, [r3, #5]
 800acae:	f003 0318 	and.w	r3, r3, #24
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d107      	bne.n	800acc6 <remarkupvals+0x36>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <remarkupvals+0x36>
      p = &thread->twups;  /* keep marked thread with upvalues in the list */
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	332c      	adds	r3, #44	; 0x2c
 800acc2:	617b      	str	r3, [r7, #20]
 800acc4:	e02f      	b.n	800ad26 <remarkupvals+0x96>
    else {  /* thread is not marked or without upvalues */
      UpVal *uv;
      lua_assert(!isold(thread) || thread->openupval == NULL);
      *p = thread->twups;  /* remove thread from the list */
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	601a      	str	r2, [r3, #0]
      thread->twups = thread;  /* mark that it is out of list */
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	62da      	str	r2, [r3, #44]	; 0x2c
      for (uv = thread->openupval; uv != NULL; uv = uv->u.open.next) {
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	e021      	b.n	800ad20 <remarkupvals+0x90>
        lua_assert(getage(uv) <= getage(thread));
        work++;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	3301      	adds	r3, #1
 800ace0:	613b      	str	r3, [r7, #16]
        if (!iswhite(uv)) {  /* upvalue already visited? */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	795b      	ldrb	r3, [r3, #5]
 800ace6:	f003 0318 	and.w	r3, r3, #24
 800acea:	2b00      	cmp	r3, #0
 800acec:	d115      	bne.n	800ad1a <remarkupvals+0x8a>
          lua_assert(upisopen(uv) && isgray(uv));
          markvalue(g, uv->v);  /* mark its value */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	791b      	ldrb	r3, [r3, #4]
 800acf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00e      	beq.n	800ad1a <remarkupvals+0x8a>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	795b      	ldrb	r3, [r3, #5]
 800ad04:	f003 0318 	and.w	r3, r3, #24
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d006      	beq.n	800ad1a <remarkupvals+0x8a>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff fe9d 	bl	800aa54 <reallymarkobject>
      for (uv = thread->openupval; uv != NULL; uv = uv->u.open.next) {
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1da      	bne.n	800acdc <remarkupvals+0x4c>
  while ((thread = *p) != NULL) {
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	60bb      	str	r3, [r7, #8]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1b8      	bne.n	800aca4 <remarkupvals+0x14>
        }
      }
    }
  }
  return work;
 800ad32:	693b      	ldr	r3, [r7, #16]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <cleargraylists>:


static void cleargraylists (global_State *g) {
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  g->gray = g->grayagain = NULL;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	655a      	str	r2, [r3, #84]	; 0x54
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	651a      	str	r2, [r3, #80]	; 0x50
  g->weak = g->allweak = g->ephemeron = NULL;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	661a      	str	r2, [r3, #96]	; 0x60
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	659a      	str	r2, [r3, #88]	; 0x58
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <restartcollection>:


/*
** mark root set and reset all gray lists, to start a new collection
*/
static void restartcollection (global_State *g) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  cleargraylists(g);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff ffdd 	bl	800ad3c <cleargraylists>
  markobject(g, g->mainthread);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad88:	795b      	ldrb	r3, [r3, #5]
 800ad8a:	f003 0318 	and.w	r3, r3, #24
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d006      	beq.n	800ada0 <restartcollection+0x2c>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff fe5a 	bl	800aa54 <reallymarkobject>
  markvalue(g, &g->l_registry);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ada6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00c      	beq.n	800adc8 <restartcollection+0x54>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	795b      	ldrb	r3, [r3, #5]
 800adb4:	f003 0318 	and.w	r3, r3, #24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <restartcollection+0x54>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff fe46 	bl	800aa54 <reallymarkobject>
  markmt(g);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff ff0f 	bl	800abec <markmt>
  markbeingfnz(g);  /* mark any finalizing object left from previous cycle */
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7ff ff3b 	bl	800ac4a <markbeingfnz>
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <genlink>:
** more efficient to avoid adding elements that will be removed.) Only
** TOUCHED1 objects need to be in the list. TOUCHED2 doesn't need to go
** back to a gray list, but then it must become OLD. (That is what
** 'correctgraylist' does when it finds a TOUCHED2 object.)
*/
static void genlink (global_State *g, GCObject *o) {
 800addc:	b590      	push	{r4, r7, lr}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  lua_assert(isblack(o));
  if (getage(o) == G_TOUCHED1) {  /* touched in this cycle? */
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	795b      	ldrb	r3, [r3, #5]
 800adea:	f003 0307 	and.w	r3, r3, #7
 800adee:	2b05      	cmp	r3, #5
 800adf0:	d10b      	bne.n	800ae0a <genlink+0x2e>
    linkobjgclist(o, g->grayagain);  /* link it back in 'grayagain' */
 800adf2:	683c      	ldr	r4, [r7, #0]
 800adf4:	6838      	ldr	r0, [r7, #0]
 800adf6:	f7ff fca1 	bl	800a73c <getgclist>
 800adfa:	4601      	mov	r1, r0
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3354      	adds	r3, #84	; 0x54
 800ae00:	461a      	mov	r2, r3
 800ae02:	4620      	mov	r0, r4
 800ae04:	f7ff fd06 	bl	800a814 <linkgclist_>
  }  /* everything else do not need to be linked back */
  else if (getage(o) == G_TOUCHED2)
    changeage(o, G_TOUCHED2, G_OLD);  /* advance age */
}
 800ae08:	e00c      	b.n	800ae24 <genlink+0x48>
  else if (getage(o) == G_TOUCHED2)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	795b      	ldrb	r3, [r3, #5]
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d106      	bne.n	800ae24 <genlink+0x48>
    changeage(o, G_TOUCHED2, G_OLD);  /* advance age */
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	795b      	ldrb	r3, [r3, #5]
 800ae1a:	f083 0302 	eor.w	r3, r3, #2
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	715a      	strb	r2, [r3, #5]
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd90      	pop	{r4, r7, pc}

0800ae2c <traverseweakvalue>:
** Traverse a table with weak values and link it to proper list. During
** propagate phase, keep it in 'grayagain' list, to be revisited in the
** atomic phase. In the atomic phase, if table has any white value,
** put it in 'weak' list, to be cleared.
*/
static void traverseweakvalue (global_State *g, Table *h) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  Node *n, *limit = gnodelast(h);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	691a      	ldr	r2, [r3, #16]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	79db      	ldrb	r3, [r3, #7]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	2310      	movs	r3, #16
 800ae42:	408b      	lsls	r3, r1
 800ae44:	4413      	add	r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]
  /* if there is array part, assume it may have white values (it is not
     worth traversing it now just to check) */
  int hasclears = (h->alimit > 0);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bf14      	ite	ne
 800ae50:	2301      	movne	r3, #1
 800ae52:	2300      	moveq	r3, #0
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	613b      	str	r3, [r7, #16]
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	617b      	str	r3, [r7, #20]
 800ae5e:	e035      	b.n	800aecc <traverseweakvalue+0xa0>
    if (isempty(gval(n)))  /* entry is empty? */
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	791b      	ldrb	r3, [r3, #4]
 800ae64:	f003 030f 	and.w	r3, r3, #15
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d103      	bne.n	800ae74 <traverseweakvalue+0x48>
      clearkey(n);  /* clear its key */
 800ae6c:	6978      	ldr	r0, [r7, #20]
 800ae6e:	f7ff fceb 	bl	800a848 <clearkey>
 800ae72:	e028      	b.n	800aec6 <traverseweakvalue+0x9a>
    else {
      lua_assert(!keyisnil(n));
      markkey(g, n);
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	795b      	ldrb	r3, [r3, #5]
 800ae78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00c      	beq.n	800ae9a <traverseweakvalue+0x6e>
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	795b      	ldrb	r3, [r3, #5]
 800ae86:	f003 0318 	and.w	r3, r3, #24
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d005      	beq.n	800ae9a <traverseweakvalue+0x6e>
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	4619      	mov	r1, r3
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7ff fddd 	bl	800aa54 <reallymarkobject>
      if (!hasclears && iscleared(g, gcvalueN(gval(n))))  /* a white value? */
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d112      	bne.n	800aec6 <traverseweakvalue+0x9a>
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	791b      	ldrb	r3, [r3, #4]
 800aea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <traverseweakvalue+0x86>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	e000      	b.n	800aeb4 <traverseweakvalue+0x88>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff fcd9 	bl	800a86e <iscleared>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d001      	beq.n	800aec6 <traverseweakvalue+0x9a>
        hasclears = 1;  /* table will have to be cleared */
 800aec2:	2301      	movs	r3, #1
 800aec4:	613b      	str	r3, [r7, #16]
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	3310      	adds	r3, #16
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d3c5      	bcc.n	800ae60 <traverseweakvalue+0x34>
    }
  }
  if (g->gcstate == GCSatomic && hasclears)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d10c      	bne.n	800aef8 <traverseweakvalue+0xcc>
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d009      	beq.n	800aef8 <traverseweakvalue+0xcc>
    linkgclist(h, g->weak);  /* has to be cleared later */
 800aee4:	6838      	ldr	r0, [r7, #0]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	f103 011c 	add.w	r1, r3, #28
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3358      	adds	r3, #88	; 0x58
 800aef0:	461a      	mov	r2, r3
 800aef2:	f7ff fc8f 	bl	800a814 <linkgclist_>
 800aef6:	e009      	b.n	800af0c <traverseweakvalue+0xe0>
  else
    linkgclist(h, g->grayagain);  /* must retraverse it in atomic phase */
 800aef8:	6838      	ldr	r0, [r7, #0]
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	f103 011c 	add.w	r1, r3, #28
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3354      	adds	r3, #84	; 0x54
 800af04:	461a      	mov	r2, r3
 800af06:	f7ff fc85 	bl	800a814 <linkgclist_>
}
 800af0a:	bf00      	nop
 800af0c:	bf00      	nop
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <traverseephemeron>:
** black). Otherwise, if it has any white key, table has to be cleared
** (in the atomic phase). In generational mode, some tables
** must be kept in some gray list for post-processing; this is done
** by 'genlink'.
*/
static int traverseephemeron (global_State *g, Table *h, int inv) {
 800af14:	b580      	push	{r7, lr}
 800af16:	b08c      	sub	sp, #48	; 0x30
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  int marked = 0;  /* true if an object is marked in this traversal */
 800af20:	2300      	movs	r3, #0
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c
  int hasclears = 0;  /* true if table has white keys */
 800af24:	2300      	movs	r3, #0
 800af26:	62bb      	str	r3, [r7, #40]	; 0x28
  int hasww = 0;  /* true if table has entry "white-key -> white-value" */
 800af28:	2300      	movs	r3, #0
 800af2a:	627b      	str	r3, [r7, #36]	; 0x24
  unsigned int i;
  unsigned int asize = luaH_realasize(h);
 800af2c:	68b8      	ldr	r0, [r7, #8]
 800af2e:	f003 ff35 	bl	800ed9c <luaH_realasize>
 800af32:	61f8      	str	r0, [r7, #28]
  unsigned int nsize = sizenode(h);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	79db      	ldrb	r3, [r3, #7]
 800af38:	461a      	mov	r2, r3
 800af3a:	2301      	movs	r3, #1
 800af3c:	4093      	lsls	r3, r2
 800af3e:	61bb      	str	r3, [r7, #24]
  /* traverse array part */
  for (i = 0; i < asize; i++) {
 800af40:	2300      	movs	r3, #0
 800af42:	623b      	str	r3, [r7, #32]
 800af44:	e023      	b.n	800af8e <traverseephemeron+0x7a>
    if (valiswhite(&h->array[i])) {
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	68da      	ldr	r2, [r3, #12]
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	00db      	lsls	r3, r3, #3
 800af4e:	4413      	add	r3, r2
 800af50:	791b      	ldrb	r3, [r3, #4]
 800af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d016      	beq.n	800af88 <traverseephemeron+0x74>
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	4413      	add	r3, r2
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	795b      	ldrb	r3, [r3, #5]
 800af68:	f003 0318 	and.w	r3, r3, #24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <traverseephemeron+0x74>
      marked = 1;
 800af70:	2301      	movs	r3, #1
 800af72:	62fb      	str	r3, [r7, #44]	; 0x2c
      reallymarkobject(g, gcvalue(&h->array[i]));
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	68da      	ldr	r2, [r3, #12]
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	4413      	add	r3, r2
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4619      	mov	r1, r3
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f7ff fd66 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < asize; i++) {
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	3301      	adds	r3, #1
 800af8c:	623b      	str	r3, [r7, #32]
 800af8e:	6a3a      	ldr	r2, [r7, #32]
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	429a      	cmp	r2, r3
 800af94:	d3d7      	bcc.n	800af46 <traverseephemeron+0x32>
    }
  }
  /* traverse hash part; if 'inv', traverse descending
     (see 'convergeephemerons') */
  for (i = 0; i < nsize; i++) {
 800af96:	2300      	movs	r3, #0
 800af98:	623b      	str	r3, [r7, #32]
 800af9a:	e056      	b.n	800b04a <traverseephemeron+0x136>
    Node *n = inv ? gnode(h, nsize - 1 - i) : gnode(h, i);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d008      	beq.n	800afb4 <traverseephemeron+0xa0>
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	691a      	ldr	r2, [r3, #16]
 800afa6:	69b9      	ldr	r1, [r7, #24]
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	1acb      	subs	r3, r1, r3
 800afac:	3b01      	subs	r3, #1
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	4413      	add	r3, r2
 800afb2:	e004      	b.n	800afbe <traverseephemeron+0xaa>
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	6a3b      	ldr	r3, [r7, #32]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	4413      	add	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]
    if (isempty(gval(n)))  /* entry is empty? */
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	791b      	ldrb	r3, [r3, #4]
 800afc4:	f003 030f 	and.w	r3, r3, #15
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d103      	bne.n	800afd4 <traverseephemeron+0xc0>
      clearkey(n);  /* clear its key */
 800afcc:	6978      	ldr	r0, [r7, #20]
 800afce:	f7ff fc3b 	bl	800a848 <clearkey>
 800afd2:	e037      	b.n	800b044 <traverseephemeron+0x130>
    else if (iscleared(g, gckeyN(n))) {  /* key is not marked (yet)? */
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	795b      	ldrb	r3, [r3, #5]
 800afd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <traverseephemeron+0xd2>
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	e000      	b.n	800afe8 <traverseephemeron+0xd4>
 800afe6:	2300      	movs	r3, #0
 800afe8:	4619      	mov	r1, r3
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7ff fc3f 	bl	800a86e <iscleared>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d011      	beq.n	800b01a <traverseephemeron+0x106>
      hasclears = 1;  /* table must be cleared */
 800aff6:	2301      	movs	r3, #1
 800aff8:	62bb      	str	r3, [r7, #40]	; 0x28
      if (valiswhite(gval(n)))  /* value not marked yet? */
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	791b      	ldrb	r3, [r3, #4]
 800affe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b002:	2b00      	cmp	r3, #0
 800b004:	d01e      	beq.n	800b044 <traverseephemeron+0x130>
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	795b      	ldrb	r3, [r3, #5]
 800b00c:	f003 0318 	and.w	r3, r3, #24
 800b010:	2b00      	cmp	r3, #0
 800b012:	d017      	beq.n	800b044 <traverseephemeron+0x130>
        hasww = 1;  /* white-white entry */
 800b014:	2301      	movs	r3, #1
 800b016:	627b      	str	r3, [r7, #36]	; 0x24
 800b018:	e014      	b.n	800b044 <traverseephemeron+0x130>
    }
    else if (valiswhite(gval(n))) {  /* value not marked yet? */
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	791b      	ldrb	r3, [r3, #4]
 800b01e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00e      	beq.n	800b044 <traverseephemeron+0x130>
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	795b      	ldrb	r3, [r3, #5]
 800b02c:	f003 0318 	and.w	r3, r3, #24
 800b030:	2b00      	cmp	r3, #0
 800b032:	d007      	beq.n	800b044 <traverseephemeron+0x130>
      marked = 1;
 800b034:	2301      	movs	r3, #1
 800b036:	62fb      	str	r3, [r7, #44]	; 0x2c
      reallymarkobject(g, gcvalue(gval(n)));  /* mark it now */
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4619      	mov	r1, r3
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff fd08 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < nsize; i++) {
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	3301      	adds	r3, #1
 800b048:	623b      	str	r3, [r7, #32]
 800b04a:	6a3a      	ldr	r2, [r7, #32]
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d3a4      	bcc.n	800af9c <traverseephemeron+0x88>
    }
  }
  /* link table into proper list */
  if (g->gcstate == GCSpropagate)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d109      	bne.n	800b070 <traverseephemeron+0x15c>
    linkgclist(h, g->grayagain);  /* must retraverse it in atomic phase */
 800b05c:	68b8      	ldr	r0, [r7, #8]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	f103 011c 	add.w	r1, r3, #28
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3354      	adds	r3, #84	; 0x54
 800b068:	461a      	mov	r2, r3
 800b06a:	f7ff fbd3 	bl	800a814 <linkgclist_>
 800b06e:	e01e      	b.n	800b0ae <traverseephemeron+0x19a>
  else if (hasww)  /* table has white->white entries? */
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	2b00      	cmp	r3, #0
 800b074:	d009      	beq.n	800b08a <traverseephemeron+0x176>
    linkgclist(h, g->ephemeron);  /* have to propagate again */
 800b076:	68b8      	ldr	r0, [r7, #8]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f103 011c 	add.w	r1, r3, #28
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	335c      	adds	r3, #92	; 0x5c
 800b082:	461a      	mov	r2, r3
 800b084:	f7ff fbc6 	bl	800a814 <linkgclist_>
 800b088:	e011      	b.n	800b0ae <traverseephemeron+0x19a>
  else if (hasclears)  /* table has white keys? */
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d009      	beq.n	800b0a4 <traverseephemeron+0x190>
    linkgclist(h, g->allweak);  /* may have to clean white keys */
 800b090:	68b8      	ldr	r0, [r7, #8]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	f103 011c 	add.w	r1, r3, #28
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3360      	adds	r3, #96	; 0x60
 800b09c:	461a      	mov	r2, r3
 800b09e:	f7ff fbb9 	bl	800a814 <linkgclist_>
 800b0a2:	e004      	b.n	800b0ae <traverseephemeron+0x19a>
  else
    genlink(g, obj2gco(h));  /* check whether collector still needs to see it */
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f7ff fe97 	bl	800addc <genlink>
  return marked;
 800b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3730      	adds	r7, #48	; 0x30
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <traversestrongtable>:


static void traversestrongtable (global_State *g, Table *h) {
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  Node *n, *limit = gnodelast(h);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	691a      	ldr	r2, [r3, #16]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	79db      	ldrb	r3, [r3, #7]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	2310      	movs	r3, #16
 800b0ce:	408b      	lsls	r3, r1
 800b0d0:	4413      	add	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]
  unsigned int i;
  unsigned int asize = luaH_realasize(h);
 800b0d4:	6838      	ldr	r0, [r7, #0]
 800b0d6:	f003 fe61 	bl	800ed9c <luaH_realasize>
 800b0da:	60b8      	str	r0, [r7, #8]
  for (i = 0; i < asize; i++)  /* traverse array part */
 800b0dc:	2300      	movs	r3, #0
 800b0de:	613b      	str	r3, [r7, #16]
 800b0e0:	e021      	b.n	800b126 <traversestrongtable+0x6e>
    markvalue(g, &h->array[i]);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	68da      	ldr	r2, [r3, #12]
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	00db      	lsls	r3, r3, #3
 800b0ea:	4413      	add	r3, r2
 800b0ec:	791b      	ldrb	r3, [r3, #4]
 800b0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d014      	beq.n	800b120 <traversestrongtable+0x68>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	68da      	ldr	r2, [r3, #12]
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	00db      	lsls	r3, r3, #3
 800b0fe:	4413      	add	r3, r2
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	795b      	ldrb	r3, [r3, #5]
 800b104:	f003 0318 	and.w	r3, r3, #24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d009      	beq.n	800b120 <traversestrongtable+0x68>
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	68da      	ldr	r2, [r3, #12]
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	4413      	add	r3, r2
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff fc9a 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < asize; i++)  /* traverse array part */
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	3301      	adds	r3, #1
 800b124:	613b      	str	r3, [r7, #16]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d3d9      	bcc.n	800b0e2 <traversestrongtable+0x2a>
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	e032      	b.n	800b19c <traversestrongtable+0xe4>
    if (isempty(gval(n)))  /* entry is empty? */
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	791b      	ldrb	r3, [r3, #4]
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d103      	bne.n	800b14a <traversestrongtable+0x92>
      clearkey(n);  /* clear its key */
 800b142:	6978      	ldr	r0, [r7, #20]
 800b144:	f7ff fb80 	bl	800a848 <clearkey>
 800b148:	e025      	b.n	800b196 <traversestrongtable+0xde>
    else {
      lua_assert(!keyisnil(n));
      markkey(g, n);
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	795b      	ldrb	r3, [r3, #5]
 800b14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00c      	beq.n	800b170 <traversestrongtable+0xb8>
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	795b      	ldrb	r3, [r3, #5]
 800b15c:	f003 0318 	and.w	r3, r3, #24
 800b160:	2b00      	cmp	r3, #0
 800b162:	d005      	beq.n	800b170 <traversestrongtable+0xb8>
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff fc72 	bl	800aa54 <reallymarkobject>
      markvalue(g, gval(n));
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	791b      	ldrb	r3, [r3, #4]
 800b174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00c      	beq.n	800b196 <traversestrongtable+0xde>
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	795b      	ldrb	r3, [r3, #5]
 800b182:	f003 0318 	and.w	r3, r3, #24
 800b186:	2b00      	cmp	r3, #0
 800b188:	d005      	beq.n	800b196 <traversestrongtable+0xde>
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff fc5f 	bl	800aa54 <reallymarkobject>
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	3310      	adds	r3, #16
 800b19a:	617b      	str	r3, [r7, #20]
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d3c8      	bcc.n	800b136 <traversestrongtable+0x7e>
    }
  }
  genlink(g, obj2gco(h));
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7ff fe17 	bl	800addc <genlink>
}
 800b1ae:	bf00      	nop
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <traversetable>:


static lu_mem traversetable (global_State *g, Table *h) {
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b086      	sub	sp, #24
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
  const char *weakkey, *weakvalue;
  const TValue *mode = gfasttm(g, h->metatable, TM_MODE);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d013      	beq.n	800b1f0 <traversetable+0x3a>
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	799b      	ldrb	r3, [r3, #6]
 800b1ce:	f003 0308 	and.w	r3, r3, #8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <traversetable+0x36>
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	6998      	ldr	r0, [r3, #24]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	2103      	movs	r1, #3
 800b1e4:	f004 fdc4 	bl	800fd70 <luaT_gettm>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	e002      	b.n	800b1f2 <traversetable+0x3c>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e000      	b.n	800b1f2 <traversetable+0x3c>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
  markobjectN(g, h->metatable);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00c      	beq.n	800b216 <traversetable+0x60>
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	795b      	ldrb	r3, [r3, #5]
 800b202:	f003 0318 	and.w	r3, r3, #24
 800b206:	2b00      	cmp	r3, #0
 800b208:	d005      	beq.n	800b216 <traversetable+0x60>
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fc1f 	bl	800aa54 <reallymarkobject>
  if (mode && ttisstring(mode) &&  /* is there a weak mode? */
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d03b      	beq.n	800b294 <traversetable+0xde>
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	791b      	ldrb	r3, [r3, #4]
 800b220:	f003 030f 	and.w	r3, r3, #15
 800b224:	2b04      	cmp	r3, #4
 800b226:	d135      	bne.n	800b294 <traversetable+0xde>
      (cast_void(weakkey = strchr(svalue(mode), 'k')),
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3310      	adds	r3, #16
 800b22e:	216b      	movs	r1, #107	; 0x6b
 800b230:	4618      	mov	r0, r3
 800b232:	f014 fa8e 	bl	801f752 <strchr>
 800b236:	6138      	str	r0, [r7, #16]
       cast_void(weakvalue = strchr(svalue(mode), 'v')),
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3310      	adds	r3, #16
 800b23e:	2176      	movs	r1, #118	; 0x76
 800b240:	4618      	mov	r0, r3
 800b242:	f014 fa86 	bl	801f752 <strchr>
 800b246:	60f8      	str	r0, [r7, #12]
       (weakkey || weakvalue))) {  /* is really weak? */
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d102      	bne.n	800b254 <traversetable+0x9e>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <traversetable+0xa2>
 800b254:	2301      	movs	r3, #1
 800b256:	e000      	b.n	800b25a <traversetable+0xa4>
 800b258:	2300      	movs	r3, #0
  if (mode && ttisstring(mode) &&  /* is there a weak mode? */
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d01a      	beq.n	800b294 <traversetable+0xde>
    if (!weakkey)  /* strong keys? */
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d104      	bne.n	800b26e <traversetable+0xb8>
      traverseweakvalue(g, h);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7ff fde0 	bl	800ae2c <traverseweakvalue>
    if (!weakkey)  /* strong keys? */
 800b26c:	e016      	b.n	800b29c <traversetable+0xe6>
    else if (!weakvalue)  /* strong values? */
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d105      	bne.n	800b280 <traversetable+0xca>
      traverseephemeron(g, h, 0);
 800b274:	2200      	movs	r2, #0
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7ff fe4b 	bl	800af14 <traverseephemeron>
    if (!weakkey)  /* strong keys? */
 800b27e:	e00d      	b.n	800b29c <traversetable+0xe6>
    else  /* all weak */
      linkgclist(h, g->allweak);  /* nothing to traverse now */
 800b280:	6838      	ldr	r0, [r7, #0]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	f103 011c 	add.w	r1, r3, #28
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3360      	adds	r3, #96	; 0x60
 800b28c:	461a      	mov	r2, r3
 800b28e:	f7ff fac1 	bl	800a814 <linkgclist_>
    if (!weakkey)  /* strong keys? */
 800b292:	e003      	b.n	800b29c <traversetable+0xe6>
  }
  else  /* not weak */
    traversestrongtable(g, h);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff ff0e 	bl	800b0b8 <traversestrongtable>
  return 1 + h->alimit + 2 * allocsizenode(h);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	6952      	ldr	r2, [r2, #20]
 800b2a4:	2a00      	cmp	r2, #0
 800b2a6:	d005      	beq.n	800b2b4 <traversetable+0xfe>
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	79d2      	ldrb	r2, [r2, #7]
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	408a      	lsls	r2, r1
 800b2b2:	e000      	b.n	800b2b6 <traversetable+0x100>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4413      	add	r3, r2
 800b2b8:	3301      	adds	r3, #1
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <traverseudata>:


static int traverseudata (global_State *g, Udata *u) {
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6039      	str	r1, [r7, #0]
  int i;
  markobjectN(g, u->metatable);  /* mark its metatable */
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00c      	beq.n	800b2ee <traverseudata+0x2c>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	795b      	ldrb	r3, [r3, #5]
 800b2da:	f003 0318 	and.w	r3, r3, #24
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d005      	beq.n	800b2ee <traverseudata+0x2c>
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7ff fbb3 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < u->nuvalue; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	e01f      	b.n	800b334 <traverseudata+0x72>
    markvalue(g, &u->uv[i].uv);
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3303      	adds	r3, #3
 800b2fa:	00db      	lsls	r3, r3, #3
 800b2fc:	4413      	add	r3, r2
 800b2fe:	791b      	ldrb	r3, [r3, #4]
 800b300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b304:	2b00      	cmp	r3, #0
 800b306:	d012      	beq.n	800b32e <traverseudata+0x6c>
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	3203      	adds	r2, #3
 800b30e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b312:	795b      	ldrb	r3, [r3, #5]
 800b314:	f003 0318 	and.w	r3, r3, #24
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d008      	beq.n	800b32e <traverseudata+0x6c>
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	3203      	adds	r2, #3
 800b322:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7ff fb93 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < u->nuvalue; i++)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3301      	adds	r3, #1
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	88db      	ldrh	r3, [r3, #6]
 800b338:	461a      	mov	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4293      	cmp	r3, r2
 800b33e:	dbd9      	blt.n	800b2f4 <traverseudata+0x32>
  genlink(g, obj2gco(u));
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff fd49 	bl	800addc <genlink>
  return 1 + u->nuvalue;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	88db      	ldrh	r3, [r3, #6]
 800b34e:	3301      	adds	r3, #1
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <traverseproto>:
/*
** Traverse a prototype. (While a prototype is being build, its
** arrays can be larger than needed; the extra slots are filled with
** NULL, so the use of 'markobjectN')
*/
static int traverseproto (global_State *g, Proto *f) {
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  int i;
  markobjectN(g, f->source);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00c      	beq.n	800b384 <traverseproto+0x2c>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36e:	795b      	ldrb	r3, [r3, #5]
 800b370:	f003 0318 	and.w	r3, r3, #24
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <traverseproto+0x2c>
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7ff fb68 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < f->sizek; i++)  /* mark literals */
 800b384:	2300      	movs	r3, #0
 800b386:	60fb      	str	r3, [r7, #12]
 800b388:	e021      	b.n	800b3ce <traverseproto+0x76>
    markvalue(g, &f->k[i]);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	00db      	lsls	r3, r3, #3
 800b392:	4413      	add	r3, r2
 800b394:	791b      	ldrb	r3, [r3, #4]
 800b396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d014      	beq.n	800b3c8 <traverseproto+0x70>
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	00db      	lsls	r3, r3, #3
 800b3a6:	4413      	add	r3, r2
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	795b      	ldrb	r3, [r3, #5]
 800b3ac:	f003 0318 	and.w	r3, r3, #24
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d009      	beq.n	800b3c8 <traverseproto+0x70>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	4413      	add	r3, r2
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fb46 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < f->sizek; i++)  /* mark literals */
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	60fb      	str	r3, [r7, #12]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	dbd8      	blt.n	800b38a <traverseproto+0x32>
  for (i = 0; i < f->sizeupvalues; i++)  /* mark upvalue names */
 800b3d8:	2300      	movs	r3, #0
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	e01f      	b.n	800b41e <traverseproto+0xc6>
    markobjectN(g, f->upvalues[i].name);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d014      	beq.n	800b418 <traverseproto+0xc0>
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	00db      	lsls	r3, r3, #3
 800b3f6:	4413      	add	r3, r2
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	795b      	ldrb	r3, [r3, #5]
 800b3fc:	f003 0318 	and.w	r3, r3, #24
 800b400:	2b00      	cmp	r3, #0
 800b402:	d009      	beq.n	800b418 <traverseproto+0xc0>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	00db      	lsls	r3, r3, #3
 800b40c:	4413      	add	r3, r2
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff fb1e 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < f->sizeupvalues; i++)  /* mark upvalue names */
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	3301      	adds	r3, #1
 800b41c:	60fb      	str	r3, [r7, #12]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	429a      	cmp	r2, r3
 800b426:	dbda      	blt.n	800b3de <traverseproto+0x86>
  for (i = 0; i < f->sizep; i++)  /* mark nested protos */
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	e01f      	b.n	800b46e <traverseproto+0x116>
    markobjectN(g, f->p[i]);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d014      	beq.n	800b468 <traverseproto+0x110>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	795b      	ldrb	r3, [r3, #5]
 800b44c:	f003 0318 	and.w	r3, r3, #24
 800b450:	2b00      	cmp	r3, #0
 800b452:	d009      	beq.n	800b468 <traverseproto+0x110>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff faf6 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < f->sizep; i++)  /* mark nested protos */
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	3301      	adds	r3, #1
 800b46c:	60fb      	str	r3, [r7, #12]
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	69db      	ldr	r3, [r3, #28]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	429a      	cmp	r2, r3
 800b476:	dbda      	blt.n	800b42e <traverseproto+0xd6>
  for (i = 0; i < f->sizelocvars; i++)  /* mark local-variable names */
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	e028      	b.n	800b4d0 <traverseproto+0x178>
    markobjectN(g, f->locvars[i].varname);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	4613      	mov	r3, r2
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	4413      	add	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	440b      	add	r3, r1
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d01a      	beq.n	800b4ca <traverseproto+0x172>
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4613      	mov	r3, r2
 800b49c:	005b      	lsls	r3, r3, #1
 800b49e:	4413      	add	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	440b      	add	r3, r1
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	795b      	ldrb	r3, [r3, #5]
 800b4a8:	f003 0318 	and.w	r3, r3, #24
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00c      	beq.n	800b4ca <traverseproto+0x172>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	4413      	add	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	440b      	add	r3, r1
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7ff fac5 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < f->sizelocvars; i++)  /* mark local-variable names */
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	60fb      	str	r3, [r7, #12]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	dbd1      	blt.n	800b47e <traverseproto+0x126>
  return 1 + f->sizek + f->sizeupvalues + f->sizep + f->sizelocvars;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	1c5a      	adds	r2, r3, #1
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	441a      	add	r2, r3
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	441a      	add	r2, r3
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	6a1b      	ldr	r3, [r3, #32]
 800b4f0:	4413      	add	r3, r2
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <traverseCclosure>:


static int traverseCclosure (global_State *g, CClosure *cl) {
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < cl->nupvalues; i++)  /* mark its upvalues */
 800b504:	2300      	movs	r3, #0
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	e01f      	b.n	800b54a <traverseCclosure+0x50>
    markvalue(g, &cl->upvalue[i]);
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3302      	adds	r3, #2
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	4413      	add	r3, r2
 800b514:	791b      	ldrb	r3, [r3, #4]
 800b516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d012      	beq.n	800b544 <traverseCclosure+0x4a>
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	3202      	adds	r2, #2
 800b524:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b528:	795b      	ldrb	r3, [r3, #5]
 800b52a:	f003 0318 	and.w	r3, r3, #24
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d008      	beq.n	800b544 <traverseCclosure+0x4a>
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	3202      	adds	r2, #2
 800b538:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fa88 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++)  /* mark its upvalues */
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	3301      	adds	r3, #1
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	799b      	ldrb	r3, [r3, #6]
 800b54e:	461a      	mov	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4293      	cmp	r3, r2
 800b554:	dbd9      	blt.n	800b50a <traverseCclosure+0x10>
  return 1 + cl->nupvalues;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	799b      	ldrb	r3, [r3, #6]
 800b55a:	3301      	adds	r3, #1
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <traverseLclosure>:

/*
** Traverse a Lua closure, marking its prototype and its upvalues.
** (Both can be NULL while closure is being created.)
*/
static int traverseLclosure (global_State *g, LClosure *cl) {
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  int i;
  markobjectN(g, cl->p);  /* mark its prototype */
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00c      	beq.n	800b590 <traverseLclosure+0x2c>
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	795b      	ldrb	r3, [r3, #5]
 800b57c:	f003 0318 	and.w	r3, r3, #24
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <traverseLclosure+0x2c>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff fa62 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++) {  /* visit its upvalues */
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e016      	b.n	800b5c4 <traverseLclosure+0x60>
    UpVal *uv = cl->upvals[i];
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	3204      	adds	r2, #4
 800b59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a0:	60bb      	str	r3, [r7, #8]
    markobjectN(g, uv);  /* mark upvalue */
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00a      	beq.n	800b5be <traverseLclosure+0x5a>
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	795b      	ldrb	r3, [r3, #5]
 800b5ac:	f003 0318 	and.w	r3, r3, #24
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <traverseLclosure+0x5a>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff fa4b 	bl	800aa54 <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++) {  /* visit its upvalues */
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	799b      	ldrb	r3, [r3, #6]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	dbe2      	blt.n	800b596 <traverseLclosure+0x32>
  }
  return 1 + cl->nupvalues;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	799b      	ldrb	r3, [r3, #6]
 800b5d4:	3301      	adds	r3, #1
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <traversethread>:
** and therefore it must be visited again in the atomic phase. To ensure
** these visits, threads must return to a gray list if they are not new
** (which can only happen in generational mode) or if the traverse is in
** the propagate phase (which can only happen in incremental mode).
*/
static int traversethread (global_State *g, lua_State *th) {
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	6039      	str	r1, [r7, #0]
  UpVal *uv;
  StkId o = th->stack;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	69db      	ldr	r3, [r3, #28]
 800b5ec:	60bb      	str	r3, [r7, #8]
  if (isold(th) || g->gcstate == GCSpropagate)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	795b      	ldrb	r3, [r3, #5]
 800b5f2:	f003 0306 	and.w	r3, r3, #6
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d104      	bne.n	800b604 <traversethread+0x26>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b600:	2b00      	cmp	r3, #0
 800b602:	d108      	bne.n	800b616 <traversethread+0x38>
    linkgclist(th, g->grayagain);  /* insert into 'grayagain' list */
 800b604:	6838      	ldr	r0, [r7, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3354      	adds	r3, #84	; 0x54
 800b610:	461a      	mov	r2, r3
 800b612:	f7ff f8ff 	bl	800a814 <linkgclist_>
  if (o == NULL)
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d117      	bne.n	800b64c <traversethread+0x6e>
    return 1;  /* stack not completely built yet */
 800b61c:	2301      	movs	r3, #1
 800b61e:	e063      	b.n	800b6e8 <traversethread+0x10a>
  lua_assert(g->gcstate == GCSatomic ||
             th->openupval == NULL || isintwups(th));
  for (; o < th->top; o++)  /* mark live elements in the stack */
    markvalue(g, s2v(o));
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	791b      	ldrb	r3, [r3, #4]
 800b624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00c      	beq.n	800b646 <traversethread+0x68>
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	795b      	ldrb	r3, [r3, #5]
 800b632:	f003 0318 	and.w	r3, r3, #24
 800b636:	2b00      	cmp	r3, #0
 800b638:	d005      	beq.n	800b646 <traversethread+0x68>
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff fa07 	bl	800aa54 <reallymarkobject>
  for (; o < th->top; o++)  /* mark live elements in the stack */
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	3308      	adds	r3, #8
 800b64a:	60bb      	str	r3, [r7, #8]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	429a      	cmp	r2, r3
 800b654:	d3e4      	bcc.n	800b620 <traversethread+0x42>
  for (uv = th->openupval; uv != NULL; uv = uv->u.open.next)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	60fb      	str	r3, [r7, #12]
 800b65c:	e00d      	b.n	800b67a <traversethread+0x9c>
    markobject(g, uv);  /* open upvalues cannot be collected */
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	795b      	ldrb	r3, [r3, #5]
 800b662:	f003 0318 	and.w	r3, r3, #24
 800b666:	2b00      	cmp	r3, #0
 800b668:	d004      	beq.n	800b674 <traversethread+0x96>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff f9f0 	bl	800aa54 <reallymarkobject>
  for (uv = th->openupval; uv != NULL; uv = uv->u.open.next)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1ee      	bne.n	800b65e <traversethread+0x80>
  if (g->gcstate == GCSatomic) {  /* final traversal? */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b686:	2b02      	cmp	r3, #2
 800b688:	d11f      	bne.n	800b6ca <traversethread+0xec>
    for (; o < th->stack_last + EXTRA_STACK; o++)
 800b68a:	e005      	b.n	800b698 <traversethread+0xba>
      setnilvalue(s2v(o));  /* clear dead stack slice */
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2200      	movs	r2, #0
 800b690:	711a      	strb	r2, [r3, #4]
    for (; o < th->stack_last + EXTRA_STACK; o++)
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	3308      	adds	r3, #8
 800b696:	60bb      	str	r3, [r7, #8]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	3328      	adds	r3, #40	; 0x28
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d3f3      	bcc.n	800b68c <traversethread+0xae>
    /* 'remarkupvals' may have removed thread from 'twups' list */
    if (!isintwups(th) && th->openupval != NULL) {
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d115      	bne.n	800b6da <traversethread+0xfc>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d011      	beq.n	800b6da <traversethread+0xfc>
      th->twups = g->twups;  /* link it back to the list */
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	62da      	str	r2, [r3, #44]	; 0x2c
      g->twups = th;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800b6c8:	e007      	b.n	800b6da <traversethread+0xfc>
    }
  }
  else if (!g->gcemergency)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <traversethread+0xfc>
    luaD_shrinkstack(th); /* do not change stack in emergency cycle */
 800b6d4:	6838      	ldr	r0, [r7, #0]
 800b6d6:	f7fd ffe1 	bl	800969c <luaD_shrinkstack>
  return 1 + stacksize(th);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	699a      	ldr	r2, [r3, #24]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	10db      	asrs	r3, r3, #3
 800b6e6:	3301      	adds	r3, #1
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <propagatemark>:


/*
** traverse one gray object, turning it to black.
*/
static lu_mem propagatemark (global_State *g) {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  GCObject *o = g->gray;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fc:	60fb      	str	r3, [r7, #12]
  nw2black(o);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	795b      	ldrb	r3, [r3, #5]
 800b702:	f043 0320 	orr.w	r3, r3, #32
 800b706:	b2da      	uxtb	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	715a      	strb	r2, [r3, #5]
  g->gray = *getgclist(o);  /* remove from 'gray' list */
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff f815 	bl	800a73c <getgclist>
 800b712:	4603      	mov	r3, r0
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	651a      	str	r2, [r3, #80]	; 0x50
  switch (o->tt) {
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	791b      	ldrb	r3, [r3, #4]
 800b71e:	3b05      	subs	r3, #5
 800b720:	2b21      	cmp	r3, #33	; 0x21
 800b722:	d871      	bhi.n	800b808 <propagatemark+0x118>
 800b724:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <propagatemark+0x3c>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b7b5 	.word	0x0800b7b5
 800b730:	0800b7d1 	.word	0x0800b7d1
 800b734:	0800b7c3 	.word	0x0800b7c3
 800b738:	0800b7fb 	.word	0x0800b7fb
 800b73c:	0800b809 	.word	0x0800b809
 800b740:	0800b7ed 	.word	0x0800b7ed
 800b744:	0800b809 	.word	0x0800b809
 800b748:	0800b809 	.word	0x0800b809
 800b74c:	0800b809 	.word	0x0800b809
 800b750:	0800b809 	.word	0x0800b809
 800b754:	0800b809 	.word	0x0800b809
 800b758:	0800b809 	.word	0x0800b809
 800b75c:	0800b809 	.word	0x0800b809
 800b760:	0800b809 	.word	0x0800b809
 800b764:	0800b809 	.word	0x0800b809
 800b768:	0800b809 	.word	0x0800b809
 800b76c:	0800b809 	.word	0x0800b809
 800b770:	0800b809 	.word	0x0800b809
 800b774:	0800b809 	.word	0x0800b809
 800b778:	0800b809 	.word	0x0800b809
 800b77c:	0800b809 	.word	0x0800b809
 800b780:	0800b809 	.word	0x0800b809
 800b784:	0800b809 	.word	0x0800b809
 800b788:	0800b809 	.word	0x0800b809
 800b78c:	0800b809 	.word	0x0800b809
 800b790:	0800b809 	.word	0x0800b809
 800b794:	0800b809 	.word	0x0800b809
 800b798:	0800b809 	.word	0x0800b809
 800b79c:	0800b809 	.word	0x0800b809
 800b7a0:	0800b809 	.word	0x0800b809
 800b7a4:	0800b809 	.word	0x0800b809
 800b7a8:	0800b809 	.word	0x0800b809
 800b7ac:	0800b809 	.word	0x0800b809
 800b7b0:	0800b7df 	.word	0x0800b7df
    case LUA_VTABLE: return traversetable(g, gco2t(o));
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fcfc 	bl	800b1b6 <traversetable>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	e023      	b.n	800b80a <propagatemark+0x11a>
    case LUA_VUSERDATA: return traverseudata(g, gco2u(o));
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fd7b 	bl	800b2c2 <traverseudata>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	e01c      	b.n	800b80a <propagatemark+0x11a>
    case LUA_VLCL: return traverseLclosure(g, gco2lcl(o));
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff fec5 	bl	800b564 <traverseLclosure>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	e015      	b.n	800b80a <propagatemark+0x11a>
    case LUA_VCCL: return traverseCclosure(g, gco2ccl(o));
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f7ff fe89 	bl	800b4fa <traverseCclosure>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	e00e      	b.n	800b80a <propagatemark+0x11a>
    case LUA_VPROTO: return traverseproto(g, gco2p(o));
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff fdb1 	bl	800b358 <traverseproto>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	e007      	b.n	800b80a <propagatemark+0x11a>
    case LUA_VTHREAD: return traversethread(g, gco2th(o));
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff feed 	bl	800b5de <traversethread>
 800b804:	4603      	mov	r3, r0
 800b806:	e000      	b.n	800b80a <propagatemark+0x11a>
    default: lua_assert(0); return 0;
 800b808:	2300      	movs	r3, #0
  }
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop

0800b814 <propagateall>:


static lu_mem propagateall (global_State *g) {
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  lu_mem tot = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]
  while (g->gray)
 800b820:	e006      	b.n	800b830 <propagateall+0x1c>
    tot += propagatemark(g);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff ff64 	bl	800b6f0 <propagatemark>
 800b828:	4602      	mov	r2, r0
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	4413      	add	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
  while (g->gray)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1f4      	bne.n	800b822 <propagateall+0xe>
  return tot;
 800b838:	68fb      	ldr	r3, [r7, #12]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <convergeephemerons>:
** Repeat until it converges, that is, nothing new is marked. 'dir'
** inverts the direction of the traversals, trying to speed up
** convergence on chains in the same table.
**
*/
static void convergeephemerons (global_State *g) {
 800b842:	b580      	push	{r7, lr}
 800b844:	b088      	sub	sp, #32
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  int changed;
  int dir = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	61bb      	str	r3, [r7, #24]
  do {
    GCObject *w;
    GCObject *next = g->ephemeron;  /* get ephemeron list */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b852:	617b      	str	r3, [r7, #20]
    g->ephemeron = NULL;  /* tables may return to this list when traversed */
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	65da      	str	r2, [r3, #92]	; 0x5c
    changed = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	61fb      	str	r3, [r7, #28]
    while ((w = next) != NULL) {  /* for each ephemeron table */
 800b85e:	e018      	b.n	800b892 <convergeephemerons+0x50>
      Table *h = gco2t(w);
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	60fb      	str	r3, [r7, #12]
      next = h->gclist;  /* list is rebuilt during loop */
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	69db      	ldr	r3, [r3, #28]
 800b868:	617b      	str	r3, [r7, #20]
      nw2black(h);  /* out of the list (for now) */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	795b      	ldrb	r3, [r3, #5]
 800b86e:	f043 0320 	orr.w	r3, r3, #32
 800b872:	b2da      	uxtb	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	715a      	strb	r2, [r3, #5]
      if (traverseephemeron(g, h, dir)) {  /* marked some value? */
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	68f9      	ldr	r1, [r7, #12]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff fb49 	bl	800af14 <traverseephemeron>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d004      	beq.n	800b892 <convergeephemerons+0x50>
        propagateall(g);  /* propagate changes */
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff ffc3 	bl	800b814 <propagateall>
        changed = 1;  /* will have to revisit all ephemeron tables */
 800b88e:	2301      	movs	r3, #1
 800b890:	61fb      	str	r3, [r7, #28]
    while ((w = next) != NULL) {  /* for each ephemeron table */
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	613b      	str	r3, [r7, #16]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e1      	bne.n	800b860 <convergeephemerons+0x1e>
      }
    }
    dir = !dir;  /* invert direction next time */
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bf0c      	ite	eq
 800b8a2:	2301      	moveq	r3, #1
 800b8a4:	2300      	movne	r3, #0
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	61bb      	str	r3, [r7, #24]
  } while (changed);  /* repeat until no more changes */
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1ce      	bne.n	800b84e <convergeephemerons+0xc>
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	3720      	adds	r7, #32
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <clearbykeys>:


/*
** clear entries with unmarked keys from all weaktables in list 'l'
*/
static void clearbykeys (global_State *g, GCObject *l) {
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b086      	sub	sp, #24
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
  for (; l; l = gco2t(l)->gclist) {
 800b8c4:	e035      	b.n	800b932 <clearbykeys+0x78>
    Table *h = gco2t(l);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	613b      	str	r3, [r7, #16]
    Node *limit = gnodelast(h);
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	691a      	ldr	r2, [r3, #16]
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	79db      	ldrb	r3, [r3, #7]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	2310      	movs	r3, #16
 800b8d6:	408b      	lsls	r3, r1
 800b8d8:	4413      	add	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]
    Node *n;
    for (n = gnode(h, 0); n < limit; n++) {
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	e01f      	b.n	800b924 <clearbykeys+0x6a>
      if (iscleared(g, gckeyN(n)))  /* unmarked key? */
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	795b      	ldrb	r3, [r3, #5]
 800b8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <clearbykeys+0x3c>
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	e000      	b.n	800b8f8 <clearbykeys+0x3e>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7fe ffb7 	bl	800a86e <iscleared>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <clearbykeys+0x52>
        setempty(gval(n));  /* remove entry */
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2210      	movs	r2, #16
 800b90a:	711a      	strb	r2, [r3, #4]
      if (isempty(gval(n)))  /* is entry empty? */
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	791b      	ldrb	r3, [r3, #4]
 800b910:	f003 030f 	and.w	r3, r3, #15
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <clearbykeys+0x64>
        clearkey(n);  /* clear its key */
 800b918:	6978      	ldr	r0, [r7, #20]
 800b91a:	f7fe ff95 	bl	800a848 <clearkey>
    for (n = gnode(h, 0); n < limit; n++) {
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	3310      	adds	r3, #16
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d3db      	bcc.n	800b8e4 <clearbykeys+0x2a>
  for (; l; l = gco2t(l)->gclist) {
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	603b      	str	r3, [r7, #0]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1c6      	bne.n	800b8c6 <clearbykeys+0xc>
    }
  }
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <clearbyvalues>:

/*
** clear entries with unmarked values from all weaktables in list 'l' up
** to element 'f'
*/
static void clearbyvalues (global_State *g, GCObject *l, GCObject *f) {
 800b942:	b580      	push	{r7, lr}
 800b944:	b08a      	sub	sp, #40	; 0x28
 800b946:	af00      	add	r7, sp, #0
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	607a      	str	r2, [r7, #4]
  for (; l != f; l = gco2t(l)->gclist) {
 800b94e:	e05d      	b.n	800ba0c <clearbyvalues+0xca>
    Table *h = gco2t(l);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	61fb      	str	r3, [r7, #28]
    Node *n, *limit = gnodelast(h);
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	691a      	ldr	r2, [r3, #16]
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	79db      	ldrb	r3, [r3, #7]
 800b95c:	4619      	mov	r1, r3
 800b95e:	2310      	movs	r3, #16
 800b960:	408b      	lsls	r3, r1
 800b962:	4413      	add	r3, r2
 800b964:	61bb      	str	r3, [r7, #24]
    unsigned int i;
    unsigned int asize = luaH_realasize(h);
 800b966:	69f8      	ldr	r0, [r7, #28]
 800b968:	f003 fa18 	bl	800ed9c <luaH_realasize>
 800b96c:	6178      	str	r0, [r7, #20]
    for (i = 0; i < asize; i++) {
 800b96e:	2300      	movs	r3, #0
 800b970:	623b      	str	r3, [r7, #32]
 800b972:	e01c      	b.n	800b9ae <clearbyvalues+0x6c>
      TValue *o = &h->array[i];
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	68da      	ldr	r2, [r3, #12]
 800b978:	6a3b      	ldr	r3, [r7, #32]
 800b97a:	00db      	lsls	r3, r3, #3
 800b97c:	4413      	add	r3, r2
 800b97e:	613b      	str	r3, [r7, #16]
      if (iscleared(g, gcvalueN(o)))  /* value was collected? */
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	791b      	ldrb	r3, [r3, #4]
 800b984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <clearbyvalues+0x50>
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	e000      	b.n	800b994 <clearbyvalues+0x52>
 800b992:	2300      	movs	r3, #0
 800b994:	4619      	mov	r1, r3
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f7fe ff69 	bl	800a86e <iscleared>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d002      	beq.n	800b9a8 <clearbyvalues+0x66>
        setempty(o);  /* remove entry */
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	2210      	movs	r2, #16
 800b9a6:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < asize; i++) {
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	623b      	str	r3, [r7, #32]
 800b9ae:	6a3a      	ldr	r2, [r7, #32]
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d3de      	bcc.n	800b974 <clearbyvalues+0x32>
    }
    for (n = gnode(h, 0); n < limit; n++) {
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b9bc:	e01f      	b.n	800b9fe <clearbyvalues+0xbc>
      if (iscleared(g, gcvalueN(gval(n))))  /* unmarked value? */
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	791b      	ldrb	r3, [r3, #4]
 800b9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <clearbyvalues+0x8e>
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	e000      	b.n	800b9d2 <clearbyvalues+0x90>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7fe ff4a 	bl	800a86e <iscleared>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <clearbyvalues+0xa4>
        setempty(gval(n));  /* remove entry */
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	2210      	movs	r2, #16
 800b9e4:	711a      	strb	r2, [r3, #4]
      if (isempty(gval(n)))  /* is entry empty? */
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	791b      	ldrb	r3, [r3, #4]
 800b9ea:	f003 030f 	and.w	r3, r3, #15
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d102      	bne.n	800b9f8 <clearbyvalues+0xb6>
        clearkey(n);  /* clear its key */
 800b9f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9f4:	f7fe ff28 	bl	800a848 <clearkey>
    for (n = gnode(h, 0); n < limit; n++) {
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	3310      	adds	r3, #16
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d3db      	bcc.n	800b9be <clearbyvalues+0x7c>
  for (; l != f; l = gco2t(l)->gclist) {
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	69db      	ldr	r3, [r3, #28]
 800ba0a:	60bb      	str	r3, [r7, #8]
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d19d      	bne.n	800b950 <clearbyvalues+0xe>
    }
  }
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	3728      	adds	r7, #40	; 0x28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <freeupval>:


static void freeupval (lua_State *L, UpVal *uv) {
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
  if (upisopen(uv))
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	689a      	ldr	r2, [r3, #8]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	330c      	adds	r3, #12
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d002      	beq.n	800ba3a <freeupval+0x1c>
    luaF_unlinkupval(uv);
 800ba34:	6838      	ldr	r0, [r7, #0]
 800ba36:	f7fe fd31 	bl	800a49c <luaF_unlinkupval>
  luaM_free(L, uv);
 800ba3a:	2214      	movs	r2, #20
 800ba3c:	6839      	ldr	r1, [r7, #0]
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f001 f9ce 	bl	800cde0 <luaM_free_>
}
 800ba44:	bf00      	nop
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <freeobj>:


static void freeobj (lua_State *L, GCObject *o) {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b088      	sub	sp, #32
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  switch (o->tt) {
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	791b      	ldrb	r3, [r3, #4]
 800ba5a:	3b04      	subs	r3, #4
 800ba5c:	2b22      	cmp	r3, #34	; 0x22
 800ba5e:	f200 80a8 	bhi.w	800bbb2 <freeobj+0x166>
 800ba62:	a201      	add	r2, pc, #4	; (adr r2, 800ba68 <freeobj+0x1c>)
 800ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba68:	0800bb7f 	.word	0x0800bb7f
 800ba6c:	0800bb3d 	.word	0x0800bb3d
 800ba70:	0800bb0d 	.word	0x0800bb0d
 800ba74:	0800bb55 	.word	0x0800bb55
 800ba78:	0800bb49 	.word	0x0800bb49
 800ba7c:	0800bb01 	.word	0x0800bb01
 800ba80:	0800baf5 	.word	0x0800baf5
 800ba84:	0800bbb3 	.word	0x0800bbb3
 800ba88:	0800bbb3 	.word	0x0800bbb3
 800ba8c:	0800bbb3 	.word	0x0800bbb3
 800ba90:	0800bbb3 	.word	0x0800bbb3
 800ba94:	0800bbb3 	.word	0x0800bbb3
 800ba98:	0800bbb3 	.word	0x0800bbb3
 800ba9c:	0800bbb3 	.word	0x0800bbb3
 800baa0:	0800bbb3 	.word	0x0800bbb3
 800baa4:	0800bbb3 	.word	0x0800bbb3
 800baa8:	0800bb9d 	.word	0x0800bb9d
 800baac:	0800bbb3 	.word	0x0800bbb3
 800bab0:	0800bbb3 	.word	0x0800bbb3
 800bab4:	0800bbb3 	.word	0x0800bbb3
 800bab8:	0800bbb3 	.word	0x0800bbb3
 800babc:	0800bbb3 	.word	0x0800bbb3
 800bac0:	0800bbb3 	.word	0x0800bbb3
 800bac4:	0800bbb3 	.word	0x0800bbb3
 800bac8:	0800bbb3 	.word	0x0800bbb3
 800bacc:	0800bbb3 	.word	0x0800bbb3
 800bad0:	0800bbb3 	.word	0x0800bbb3
 800bad4:	0800bbb3 	.word	0x0800bbb3
 800bad8:	0800bbb3 	.word	0x0800bbb3
 800badc:	0800bbb3 	.word	0x0800bbb3
 800bae0:	0800bbb3 	.word	0x0800bbb3
 800bae4:	0800bbb3 	.word	0x0800bbb3
 800bae8:	0800bbb3 	.word	0x0800bbb3
 800baec:	0800bbb3 	.word	0x0800bbb3
 800baf0:	0800bb25 	.word	0x0800bb25
    case LUA_VPROTO:
      luaF_freeproto(L, gco2p(o));
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7fe fd8e 	bl	800a61a <luaF_freeproto>
      break;
 800bafe:	e058      	b.n	800bbb2 <freeobj+0x166>
    case LUA_VUPVAL:
      freeupval(L, gco2upv(o));
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff ff8a 	bl	800ba1e <freeupval>
      break;
 800bb0a:	e052      	b.n	800bbb2 <freeobj+0x166>
    case LUA_VLCL: {
      LClosure *cl = gco2lcl(o);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	613b      	str	r3, [r7, #16]
      luaM_freemem(L, cl, sizeLclosure(cl->nupvalues));
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	799b      	ldrb	r3, [r3, #6]
 800bb14:	3304      	adds	r3, #4
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6939      	ldr	r1, [r7, #16]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f001 f95f 	bl	800cde0 <luaM_free_>
      break;
 800bb22:	e046      	b.n	800bbb2 <freeobj+0x166>
    }
    case LUA_VCCL: {
      CClosure *cl = gco2ccl(o);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	61fb      	str	r3, [r7, #28]
      luaM_freemem(L, cl, sizeCclosure(cl->nupvalues));
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	799b      	ldrb	r3, [r3, #6]
 800bb2c:	3302      	adds	r3, #2
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	461a      	mov	r2, r3
 800bb32:	69f9      	ldr	r1, [r7, #28]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 f953 	bl	800cde0 <luaM_free_>
      break;
 800bb3a:	e03a      	b.n	800bbb2 <freeobj+0x166>
    }
    case LUA_VTABLE:
      luaH_free(L, gco2t(o));
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f003 fce2 	bl	800f50a <luaH_free>
      break;
 800bb46:	e034      	b.n	800bbb2 <freeobj+0x166>
    case LUA_VTHREAD:
      luaE_freethread(L, gco2th(o));
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f002 fa15 	bl	800df7c <luaE_freethread>
      break;
 800bb52:	e02e      	b.n	800bbb2 <freeobj+0x166>
    case LUA_VUSERDATA: {
      Udata *u = gco2u(o);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	617b      	str	r3, [r7, #20]
      luaM_freemem(L, o, sizeudata(u->nuvalue, u->len));
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	88db      	ldrh	r3, [r3, #6]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d004      	beq.n	800bb6a <freeobj+0x11e>
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	88db      	ldrh	r3, [r3, #6]
 800bb64:	3303      	adds	r3, #3
 800bb66:	00db      	lsls	r3, r3, #3
 800bb68:	e000      	b.n	800bb6c <freeobj+0x120>
 800bb6a:	2310      	movs	r3, #16
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	6892      	ldr	r2, [r2, #8]
 800bb70:	4413      	add	r3, r2
 800bb72:	461a      	mov	r2, r3
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f001 f932 	bl	800cde0 <luaM_free_>
      break;
 800bb7c:	e019      	b.n	800bbb2 <freeobj+0x166>
    }
    case LUA_VSHRSTR: {
      TString *ts = gco2ts(o);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	60fb      	str	r3, [r7, #12]
      luaS_remove(L, ts);  /* remove it from hash table */
 800bb82:	68f9      	ldr	r1, [r7, #12]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f002 fd78 	bl	800e67a <luaS_remove>
      luaM_freemem(L, ts, sizelstring(ts->shrlen));
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	79db      	ldrb	r3, [r3, #7]
 800bb8e:	3311      	adds	r3, #17
 800bb90:	461a      	mov	r2, r3
 800bb92:	68f9      	ldr	r1, [r7, #12]
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f001 f923 	bl	800cde0 <luaM_free_>
      break;
 800bb9a:	e00a      	b.n	800bbb2 <freeobj+0x166>
    }
    case LUA_VLNGSTR: {
      TString *ts = gco2ts(o);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	61bb      	str	r3, [r7, #24]
      luaM_freemem(L, ts, sizelstring(ts->u.lnglen));
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	3311      	adds	r3, #17
 800bba6:	461a      	mov	r2, r3
 800bba8:	69b9      	ldr	r1, [r7, #24]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f001 f918 	bl	800cde0 <luaM_free_>
      break;
 800bbb0:	bf00      	nop
    }
    default: lua_assert(0);
  }
}
 800bbb2:	bf00      	nop
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop

0800bbbc <sweeplist>:
** white; change all non-dead objects back to white, preparing for next
** collection cycle. Return where to continue the traversal or NULL if
** list is finished. ('*countout' gets the number of elements traversed.)
*/
static GCObject **sweeplist (lua_State *L, GCObject **p, int countin,
                             int *countout) {
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
  global_State *g = G(L);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	623b      	str	r3, [r7, #32]
  int ow = otherwhite(g);
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bbd6:	f083 0318 	eor.w	r3, r3, #24
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	61fb      	str	r3, [r7, #28]
  int i;
  int white = luaC_white(g);  /* current white */
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bbe4:	f003 0318 	and.w	r3, r3, #24
 800bbe8:	61bb      	str	r3, [r7, #24]
  for (i = 0; *p != NULL && i < countin; i++) {
 800bbea:	2300      	movs	r3, #0
 800bbec:	627b      	str	r3, [r7, #36]	; 0x24
 800bbee:	e024      	b.n	800bc3a <sweeplist+0x7e>
    GCObject *curr = *p;
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	617b      	str	r3, [r7, #20]
    int marked = curr->marked;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	795b      	ldrb	r3, [r3, #5]
 800bbfa:	613b      	str	r3, [r7, #16]
    if (isdeadm(ow, marked)) {  /* is 'curr' dead? */
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	4013      	ands	r3, r2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d008      	beq.n	800bc18 <sweeplist+0x5c>
      *p = curr->next;  /* remove 'curr' from list */
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	601a      	str	r2, [r3, #0]
      freeobj(L, curr);  /* erase 'curr' */
 800bc0e:	6979      	ldr	r1, [r7, #20]
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f7ff ff1b 	bl	800ba4c <freeobj>
 800bc16:	e00d      	b.n	800bc34 <sweeplist+0x78>
    }
    else {  /* change mark to 'white' */
      curr->marked = cast_byte((marked & ~maskgcbits) | white);
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	b25b      	sxtb	r3, r3
 800bc1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bc20:	b25a      	sxtb	r2, r3
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	b25b      	sxtb	r3, r3
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	715a      	strb	r2, [r3, #5]
      p = &curr->next;  /* go to next element */
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	60bb      	str	r3, [r7, #8]
  for (i = 0; *p != NULL && i < countin; i++) {
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	3301      	adds	r3, #1
 800bc38:	627b      	str	r3, [r7, #36]	; 0x24
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <sweeplist+0x8e>
 800bc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	dbd2      	blt.n	800bbf0 <sweeplist+0x34>
    }
  }
  if (countout)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <sweeplist+0x9a>
    *countout = i;  /* number of elements traversed */
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc54:	601a      	str	r2, [r3, #0]
  return (*p == NULL) ? NULL : p;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <sweeplist+0xa6>
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	e000      	b.n	800bc64 <sweeplist+0xa8>
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3728      	adds	r7, #40	; 0x28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <sweeptolive>:


/*
** sweep a list until a live object (or end of list)
*/
static GCObject **sweeptolive (lua_State *L, GCObject **p) {
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  GCObject **old = p;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	60fb      	str	r3, [r7, #12]
  do {
    p = sweeplist(L, p, 1, NULL);
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff ff9b 	bl	800bbbc <sweeplist>
 800bc86:	6038      	str	r0, [r7, #0]
  } while (p == old);
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d0f4      	beq.n	800bc7a <sweeptolive+0xe>
  return p;
 800bc90:	683b      	ldr	r3, [r7, #0]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <checkSizes>:
*/

/*
** If possible, shrink string table.
*/
static void checkSizes (lua_State *L, global_State *g) {
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	6039      	str	r1, [r7, #0]
  if (!g->gcemergency) {
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d11e      	bne.n	800bcec <checkSizes+0x52>
    if (g->strt.nuse < g->strt.size / 4) {  /* string table too big? */
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	69da      	ldr	r2, [r3, #28]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da00      	bge.n	800bcbc <checkSizes+0x22>
 800bcba:	3303      	adds	r3, #3
 800bcbc:	109b      	asrs	r3, r3, #2
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	da14      	bge.n	800bcec <checkSizes+0x52>
      l_mem olddebt = g->GCdebt;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	60fb      	str	r3, [r7, #12]
      luaS_resize(L, g->strt.size / 2);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	6a1b      	ldr	r3, [r3, #32]
 800bccc:	0fda      	lsrs	r2, r3, #31
 800bcce:	4413      	add	r3, r2
 800bcd0:	105b      	asrs	r3, r3, #1
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f002 fbc8 	bl	800e46a <luaS_resize>
      g->GCestimate += g->GCdebt - olddebt;  /* correct estimate */
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	68d1      	ldr	r1, [r2, #12]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	1a8a      	subs	r2, r1, r2
 800bce6:	441a      	add	r2, r3
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	611a      	str	r2, [r3, #16]
    }
  }
}
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <udata2finalize>:

/*
** Get the next udata to be finalized from the 'tobefnz' list, and
** link it back into the 'allgc' list.
*/
static GCObject *udata2finalize (global_State *g) {
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  GCObject *o = g->tobefnz;  /* get first element */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd00:	60fb      	str	r3, [r7, #12]
  lua_assert(tofinalize(o));
  g->tobefnz = o->next;  /* remove it from 'tobefnz' list */
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	665a      	str	r2, [r3, #100]	; 0x64
  o->next = g->allgc;  /* return it to 'allgc' list */
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	601a      	str	r2, [r3, #0]
  g->allgc = o;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	645a      	str	r2, [r3, #68]	; 0x44
  resetbit(o->marked, FINALIZEDBIT);  /* object is "normal" again */
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	795b      	ldrb	r3, [r3, #5]
 800bd1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	715a      	strb	r2, [r3, #5]
  if (issweepphase(g))
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d917      	bls.n	800bd60 <udata2finalize+0x6c>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bd36:	2b06      	cmp	r3, #6
 800bd38:	d812      	bhi.n	800bd60 <udata2finalize+0x6c>
    makewhite(g, o);  /* "sweep" object */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	795b      	ldrb	r3, [r3, #5]
 800bd3e:	b25b      	sxtb	r3, r3
 800bd40:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800bd44:	b25a      	sxtb	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd4c:	b25b      	sxtb	r3, r3
 800bd4e:	f003 0318 	and.w	r3, r3, #24
 800bd52:	b25b      	sxtb	r3, r3
 800bd54:	4313      	orrs	r3, r2
 800bd56:	b25b      	sxtb	r3, r3
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	715a      	strb	r2, [r3, #5]
 800bd5e:	e008      	b.n	800bd72 <udata2finalize+0x7e>
  else if (getage(o) == G_OLD1)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	795b      	ldrb	r3, [r3, #5]
 800bd64:	f003 0307 	and.w	r3, r3, #7
 800bd68:	2b03      	cmp	r3, #3
 800bd6a:	d102      	bne.n	800bd72 <udata2finalize+0x7e>
    g->firstold1 = o;  /* it is the first OLD1 object in the list */
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	679a      	str	r2, [r3, #120]	; 0x78
  return o;
 800bd72:	68fb      	ldr	r3, [r7, #12]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <dothecall>:


static void dothecall (lua_State *L, void *ud) {
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  UNUSED(ud);
  luaD_callnoyield(L, L->top - 2, 0);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	3b10      	subs	r3, #16
 800bd90:	2200      	movs	r2, #0
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7fe f978 	bl	800a08a <luaD_callnoyield>
}
 800bd9a:	bf00      	nop
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
	...

0800bda4 <GCTM>:


static void GCTM (lua_State *L) {
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b092      	sub	sp, #72	; 0x48
 800bda8:	af02      	add	r7, sp, #8
 800bdaa:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const TValue *tm;
  TValue v;
  lua_assert(!g->gcemergency);
  setgcovalue(L, &v, udata2finalize(g));
 800bdb2:	f107 030c 	add.w	r3, r7, #12
 800bdb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdba:	f7ff ff9b 	bl	800bcf4 <udata2finalize>
 800bdbe:	6378      	str	r0, [r7, #52]	; 0x34
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	791b      	ldrb	r3, [r3, #4]
 800bdca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	711a      	strb	r2, [r3, #4]
  tm = luaT_gettmbyobj(L, &v, TM_GC);
 800bdd4:	f107 030c 	add.w	r3, r7, #12
 800bdd8:	2202      	movs	r2, #2
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f003 ffeb 	bl	800fdb8 <luaT_gettmbyobj>
 800bde2:	6338      	str	r0, [r7, #48]	; 0x30
  if (!notm(tm)) {  /* is there a finalizer? */
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	791b      	ldrb	r3, [r3, #4]
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d072      	beq.n	800bed6 <GCTM+0x132>
    int status;
    lu_byte oldah = L->allowhook;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	79db      	ldrb	r3, [r3, #7]
 800bdf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int oldgcstp  = g->gcstp;
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdfe:	62bb      	str	r3, [r7, #40]	; 0x28
    g->gcstp |= GCSTPGC;  /* avoid GC steps */
 800be00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be06:	f043 0302 	orr.w	r3, r3, #2
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    L->allowhook = 0;  /* stop debug hooks during GC metamethod */
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	71da      	strb	r2, [r3, #7]
    setobj2s(L, L->top++, tm);  /* push finalizer... */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	f103 0108 	add.w	r1, r3, #8
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	60d1      	str	r1, [r2, #12]
 800be24:	627b      	str	r3, [r7, #36]	; 0x24
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	623b      	str	r3, [r7, #32]
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	6a3a      	ldr	r2, [r7, #32]
 800be2e:	6812      	ldr	r2, [r2, #0]
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	6a3b      	ldr	r3, [r7, #32]
 800be34:	791a      	ldrb	r2, [r3, #4]
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be38:	711a      	strb	r2, [r3, #4]
    setobj2s(L, L->top++, &v);  /* ... and its argument */
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	f103 0108 	add.w	r1, r3, #8
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	60d1      	str	r1, [r2, #12]
 800be46:	61fb      	str	r3, [r7, #28]
 800be48:	f107 030c 	add.w	r3, r7, #12
 800be4c:	61bb      	str	r3, [r7, #24]
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	69ba      	ldr	r2, [r7, #24]
 800be52:	6812      	ldr	r2, [r2, #0]
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	791a      	ldrb	r2, [r3, #4]
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	711a      	strb	r2, [r3, #4]
    L->ci->callstatus |= CIST_FIN;  /* will run a finalizer */
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800be6c:	b292      	uxth	r2, r2
 800be6e:	845a      	strh	r2, [r3, #34]	; 0x22
    status = luaD_pcall(L, dothecall, NULL, savestack(L, L->top - 2), 0);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	f1a3 0210 	sub.w	r2, r3, #16
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	2200      	movs	r2, #0
 800be80:	9200      	str	r2, [sp, #0]
 800be82:	2200      	movs	r2, #0
 800be84:	4916      	ldr	r1, [pc, #88]	; (800bee0 <GCTM+0x13c>)
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7fe f956 	bl	800a138 <luaD_pcall>
 800be8c:	6178      	str	r0, [r7, #20]
    L->ci->callstatus &= ~CIST_FIN;  /* not running a finalizer anymore */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be9c:	b292      	uxth	r2, r2
 800be9e:	845a      	strh	r2, [r3, #34]	; 0x22
    L->allowhook = oldah;  /* restore hooks */
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bea6:	71da      	strb	r2, [r3, #7]
    g->gcstp = oldgcstp;  /* restore state */
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    if (l_unlikely(status != LUA_OK)) {  /* error while running __gc? */
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	bf14      	ite	ne
 800beb8:	2301      	movne	r3, #1
 800beba:	2300      	moveq	r3, #0
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d009      	beq.n	800bed6 <GCTM+0x132>
      luaE_warnerror(L, "__gc");
 800bec2:	4908      	ldr	r1, [pc, #32]	; (800bee4 <GCTM+0x140>)
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f002 f9dd 	bl	800e284 <luaE_warnerror>
      L->top--;  /* pops error object */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	f1a3 0208 	sub.w	r2, r3, #8
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	60da      	str	r2, [r3, #12]
    }
  }
}
 800bed6:	bf00      	nop
 800bed8:	3740      	adds	r7, #64	; 0x40
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	0800bd81 	.word	0x0800bd81
 800bee4:	080222a8 	.word	0x080222a8

0800bee8 <runafewfinalizers>:


/*
** Call a few finalizers
*/
static int runafewfinalizers (lua_State *L, int n) {
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	60bb      	str	r3, [r7, #8]
  int i;
  for (i = 0; i < n && g->tobefnz; i++)
 800bef8:	2300      	movs	r3, #0
 800befa:	60fb      	str	r3, [r7, #12]
 800befc:	e005      	b.n	800bf0a <runafewfinalizers+0x22>
    GCTM(L);  /* call one finalizer */
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff ff50 	bl	800bda4 <GCTM>
  for (i = 0; i < n && g->tobefnz; i++)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3301      	adds	r3, #1
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	da03      	bge.n	800bf1a <runafewfinalizers+0x32>
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1f1      	bne.n	800befe <runafewfinalizers+0x16>
  return i;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <callallpendingfinalizers>:


/*
** call all pending finalizers
*/
static void callallpendingfinalizers (lua_State *L) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	60fb      	str	r3, [r7, #12]
  while (g->tobefnz)
 800bf32:	e002      	b.n	800bf3a <callallpendingfinalizers+0x16>
    GCTM(L);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff ff35 	bl	800bda4 <GCTM>
  while (g->tobefnz)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1f8      	bne.n	800bf34 <callallpendingfinalizers+0x10>
}
 800bf42:	bf00      	nop
 800bf44:	bf00      	nop
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <findlast>:


/*
** find last 'next' field in list 'p' list (to add elements in its end)
*/
static GCObject **findlast (GCObject **p) {
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  while (*p != NULL)
 800bf54:	e002      	b.n	800bf5c <findlast+0x10>
    p = &(*p)->next;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	607b      	str	r3, [r7, #4]
  while (*p != NULL)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1f8      	bne.n	800bf56 <findlast+0xa>
  return p;
 800bf64:	687b      	ldr	r3, [r7, #4]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <separatetobefnz>:
** finalization from list 'finobj' to list 'tobefnz' (to be finalized).
** (Note that objects after 'finobjold1' cannot be white, so they
** don't need to be traversed. In incremental mode, 'finobjold1' is NULL,
** so the whole list is traversed.)
*/
static void separatetobefnz (global_State *g, int all) {
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b086      	sub	sp, #24
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	6039      	str	r1, [r7, #0]
  GCObject *curr;
  GCObject **p = &g->finobj;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	334c      	adds	r3, #76	; 0x4c
 800bf80:	617b      	str	r3, [r7, #20]
  GCObject **lastnext = findlast(&g->tobefnz);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	3364      	adds	r3, #100	; 0x64
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7ff ffe0 	bl	800bf4c <findlast>
 800bf8c:	6138      	str	r0, [r7, #16]
  while ((curr = *p) != g->finobjold1) {  /* traverse all finalizable objects */
 800bf8e:	e021      	b.n	800bfd4 <separatetobefnz+0x62>
    lua_assert(tofinalize(curr));
    if (!(iswhite(curr) || all))  /* not being collected? */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	795b      	ldrb	r3, [r3, #5]
 800bf94:	f003 0318 	and.w	r3, r3, #24
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d105      	bne.n	800bfa8 <separatetobefnz+0x36>
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <separatetobefnz+0x36>
      p = &curr->next;  /* don't bother with it */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	617b      	str	r3, [r7, #20]
 800bfa6:	e015      	b.n	800bfd4 <separatetobefnz+0x62>
    else {
      if (curr == g->finobjsur)  /* removing 'finobjsur'? */
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d103      	bne.n	800bfba <separatetobefnz+0x48>
        g->finobjsur = curr->next;  /* correct it */
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	67da      	str	r2, [r3, #124]	; 0x7c
      *p = curr->next;  /* remove 'curr' from 'finobj' list */
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	601a      	str	r2, [r3, #0]
      curr->next = *lastnext;  /* link at the end of 'tobefnz' list */
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	601a      	str	r2, [r3, #0]
      *lastnext = curr;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	601a      	str	r2, [r3, #0]
      lastnext = &curr->next;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	613b      	str	r3, [r7, #16]
  while ((curr = *p) != g->finobjold1) {  /* traverse all finalizable objects */
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	60fb      	str	r3, [r7, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d1d4      	bne.n	800bf90 <separatetobefnz+0x1e>
    }
  }
}
 800bfe6:	bf00      	nop
 800bfe8:	bf00      	nop
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <sweep2old>:
** Sweep a list of objects to enter generational mode.  Deletes dead
** objects and turns the non dead to old. All non-dead threads---which
** are now old---must be in a gray list. Everything else is not in a
** gray list. Open upvalues are also kept gray.
*/
static void sweep2old (lua_State *L, GCObject **p) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  GCObject *curr;
  global_State *g = G(L);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	617b      	str	r3, [r7, #20]
  while ((curr = *p) != NULL) {
 800c000:	e045      	b.n	800c08e <sweep2old+0x9e>
    if (iswhite(curr)) {  /* is 'curr' dead? */
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	795b      	ldrb	r3, [r3, #5]
 800c006:	f003 0318 	and.w	r3, r3, #24
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d008      	beq.n	800c020 <sweep2old+0x30>
      lua_assert(isdead(g, curr));
      *p = curr->next;  /* remove 'curr' from list */
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	601a      	str	r2, [r3, #0]
      freeobj(L, curr);  /* erase 'curr' */
 800c016:	6939      	ldr	r1, [r7, #16]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff fd17 	bl	800ba4c <freeobj>
 800c01e:	e036      	b.n	800c08e <sweep2old+0x9e>
    }
    else {  /* all surviving objects become old */
      setage(curr, G_OLD);
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	795b      	ldrb	r3, [r3, #5]
 800c024:	b25b      	sxtb	r3, r3
 800c026:	f023 0307 	bic.w	r3, r3, #7
 800c02a:	b25b      	sxtb	r3, r3
 800c02c:	f043 0304 	orr.w	r3, r3, #4
 800c030:	b25b      	sxtb	r3, r3
 800c032:	b2da      	uxtb	r2, r3
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	715a      	strb	r2, [r3, #5]
      if (curr->tt == LUA_VTHREAD) {  /* threads must be watched */
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	791b      	ldrb	r3, [r3, #4]
 800c03c:	2b08      	cmp	r3, #8
 800c03e:	d10b      	bne.n	800c058 <sweep2old+0x68>
        lua_State *th = gco2th(curr);
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	60fb      	str	r3, [r7, #12]
        linkgclist(th, g->grayagain);  /* insert into 'grayagain' list */
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	3354      	adds	r3, #84	; 0x54
 800c050:	461a      	mov	r2, r3
 800c052:	f7fe fbdf 	bl	800a814 <linkgclist_>
 800c056:	e018      	b.n	800c08a <sweep2old+0x9a>
      }
      else if (curr->tt == LUA_VUPVAL && upisopen(gco2upv(curr)))
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	791b      	ldrb	r3, [r3, #4]
 800c05c:	2b09      	cmp	r3, #9
 800c05e:	d10d      	bne.n	800c07c <sweep2old+0x8c>
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	330c      	adds	r3, #12
 800c068:	429a      	cmp	r2, r3
 800c06a:	d007      	beq.n	800c07c <sweep2old+0x8c>
        set2gray(curr);  /* open upvalues are always gray */
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	795b      	ldrb	r3, [r3, #5]
 800c070:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800c074:	b2da      	uxtb	r2, r3
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	715a      	strb	r2, [r3, #5]
 800c07a:	e006      	b.n	800c08a <sweep2old+0x9a>
      else  /* everything else is black */
        nw2black(curr);
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	795b      	ldrb	r3, [r3, #5]
 800c080:	f043 0320 	orr.w	r3, r3, #32
 800c084:	b2da      	uxtb	r2, r3
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	715a      	strb	r2, [r3, #5]
      p = &curr->next;  /* go to next element */
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	603b      	str	r3, [r7, #0]
  while ((curr = *p) != NULL) {
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	613b      	str	r3, [r7, #16]
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1b3      	bne.n	800c002 <sweep2old+0x12>
    }
  }
}
 800c09a:	bf00      	nop
 800c09c:	bf00      	nop
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <sweepgen>:
** here, because these old-generation objects are usually not swept
** here.  They will all be advanced in 'correctgraylist'. That function
** will also remove objects turned white here from any gray list.
*/
static GCObject **sweepgen (lua_State *L, global_State *g, GCObject **p,
                            GCObject *limit, GCObject **pfirstold1) {
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
 800c0b0:	603b      	str	r3, [r7, #0]
    G_OLD,       /* from G_OLD1 */
    G_OLD,       /* from G_OLD (do not change) */
    G_TOUCHED1,  /* from G_TOUCHED1 (do not change) */
    G_TOUCHED2   /* from G_TOUCHED2 (do not change) */
  };
  int white = luaC_white(g);
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c0b8:	f003 0318 	and.w	r3, r3, #24
 800c0bc:	61fb      	str	r3, [r7, #28]
  GCObject *curr;
  while ((curr = *p) != limit) {
 800c0be:	e047      	b.n	800c150 <sweepgen+0xac>
    if (iswhite(curr)) {  /* is 'curr' dead? */
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	795b      	ldrb	r3, [r3, #5]
 800c0c4:	f003 0318 	and.w	r3, r3, #24
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d008      	beq.n	800c0de <sweepgen+0x3a>
      lua_assert(!isold(curr) && isdead(g, curr));
      *p = curr->next;  /* remove 'curr' from list */
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	601a      	str	r2, [r3, #0]
      freeobj(L, curr);  /* erase 'curr' */
 800c0d4:	69b9      	ldr	r1, [r7, #24]
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f7ff fcb8 	bl	800ba4c <freeobj>
 800c0dc:	e038      	b.n	800c150 <sweepgen+0xac>
    }
    else {  /* correct mark and age */
      if (getage(curr) == G_NEW) {  /* new objects go back to white */
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	795b      	ldrb	r3, [r3, #5]
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d111      	bne.n	800c10e <sweepgen+0x6a>
        int marked = curr->marked & ~maskgcbits;  /* erase GC bits */
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	795b      	ldrb	r3, [r3, #5]
 800c0ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c0f2:	617b      	str	r3, [r7, #20]
        curr->marked = cast_byte(marked | G_SURVIVAL | white);
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	b25b      	sxtb	r3, r3
 800c0f8:	f043 0301 	orr.w	r3, r3, #1
 800c0fc:	b25a      	sxtb	r2, r3
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	b25b      	sxtb	r3, r3
 800c102:	4313      	orrs	r3, r2
 800c104:	b25b      	sxtb	r3, r3
 800c106:	b2da      	uxtb	r2, r3
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	715a      	strb	r2, [r3, #5]
 800c10c:	e01e      	b.n	800c14c <sweepgen+0xa8>
      }
      else {  /* all other objects will be old, and so keep their color */
        setage(curr, nextage[getage(curr)]);
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	795b      	ldrb	r3, [r3, #5]
 800c112:	b25b      	sxtb	r3, r3
 800c114:	f023 0307 	bic.w	r3, r3, #7
 800c118:	b25a      	sxtb	r2, r3
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	795b      	ldrb	r3, [r3, #5]
 800c11e:	f003 0307 	and.w	r3, r3, #7
 800c122:	4911      	ldr	r1, [pc, #68]	; (800c168 <sweepgen+0xc4>)
 800c124:	5ccb      	ldrb	r3, [r1, r3]
 800c126:	b25b      	sxtb	r3, r3
 800c128:	4313      	orrs	r3, r2
 800c12a:	b25b      	sxtb	r3, r3
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	715a      	strb	r2, [r3, #5]
        if (getage(curr) == G_OLD1 && *pfirstold1 == NULL)
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	795b      	ldrb	r3, [r3, #5]
 800c136:	f003 0307 	and.w	r3, r3, #7
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d106      	bne.n	800c14c <sweepgen+0xa8>
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <sweepgen+0xa8>
          *pfirstold1 = curr;  /* first OLD1 object in the list */
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	69ba      	ldr	r2, [r7, #24]
 800c14a:	601a      	str	r2, [r3, #0]
      }
      p = &curr->next;  /* go to next element */
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	607b      	str	r3, [r7, #4]
  while ((curr = *p) != limit) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	61bb      	str	r3, [r7, #24]
 800c156:	69ba      	ldr	r2, [r7, #24]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d1b0      	bne.n	800c0c0 <sweepgen+0x1c>
    }
  }
  return p;
 800c15e:	687b      	ldr	r3, [r7, #4]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3720      	adds	r7, #32
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	08022a94 	.word	0x08022a94

0800c16c <whitelist>:
/*
** Traverse a list making all its elements white and clearing their
** age. In incremental mode, all objects are 'new' all the time,
** except for fixed strings (which are always old).
*/
static void whitelist (global_State *g, GCObject *p) {
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  int white = luaC_white(g);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c17c:	f003 0318 	and.w	r3, r3, #24
 800c180:	60fb      	str	r3, [r7, #12]
  for (; p != NULL; p = p->next)
 800c182:	e00f      	b.n	800c1a4 <whitelist+0x38>
    p->marked = cast_byte((p->marked & ~maskgcbits) | white);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	795b      	ldrb	r3, [r3, #5]
 800c188:	b25b      	sxtb	r3, r3
 800c18a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c18e:	b25a      	sxtb	r2, r3
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	b25b      	sxtb	r3, r3
 800c194:	4313      	orrs	r3, r2
 800c196:	b25b      	sxtb	r3, r3
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	715a      	strb	r2, [r3, #5]
  for (; p != NULL; p = p->next)
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1ec      	bne.n	800c184 <whitelist+0x18>
}
 800c1aa:	bf00      	nop
 800c1ac:	bf00      	nop
 800c1ae:	3714      	adds	r7, #20
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <correctgraylist>:
** be turned white and still be in the list. They are only removed.
** 'TOUCHED1' objects are advanced to 'TOUCHED2' and remain on the list;
** Non-white threads also remain on the list; 'TOUCHED2' objects become
** regular old; they and anything else are removed from the list.
*/
static GCObject **correctgraylist (GCObject **p) {
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  GCObject *curr;
  while ((curr = *p) != NULL) {
 800c1c0:	e041      	b.n	800c246 <correctgraylist+0x8e>
    GCObject **next = getgclist(curr);
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7fe faba 	bl	800a73c <getgclist>
 800c1c8:	60b8      	str	r0, [r7, #8]
    if (iswhite(curr))
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	795b      	ldrb	r3, [r3, #5]
 800c1ce:	f003 0318 	and.w	r3, r3, #24
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d12d      	bne.n	800c232 <correctgraylist+0x7a>
      goto remove;  /* remove all white objects */
    else if (getage(curr) == G_TOUCHED1) {  /* touched in this cycle? */
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	795b      	ldrb	r3, [r3, #5]
 800c1da:	f003 0307 	and.w	r3, r3, #7
 800c1de:	2b05      	cmp	r3, #5
 800c1e0:	d10e      	bne.n	800c200 <correctgraylist+0x48>
      lua_assert(isgray(curr));
      nw2black(curr);  /* make it black, for next barrier */
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	795b      	ldrb	r3, [r3, #5]
 800c1e6:	f043 0320 	orr.w	r3, r3, #32
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	715a      	strb	r2, [r3, #5]
      changeage(curr, G_TOUCHED1, G_TOUCHED2);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	795b      	ldrb	r3, [r3, #5]
 800c1f4:	f083 0303 	eor.w	r3, r3, #3
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	715a      	strb	r2, [r3, #5]
      goto remain;  /* keep it in the list and go to next element */
 800c1fe:	e01f      	b.n	800c240 <correctgraylist+0x88>
    }
    else if (curr->tt == LUA_VTHREAD) {
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	791b      	ldrb	r3, [r3, #4]
 800c204:	2b08      	cmp	r3, #8
 800c206:	d01a      	beq.n	800c23e <correctgraylist+0x86>
      lua_assert(isgray(curr));
      goto remain;  /* keep non-white threads on the list */
    }
    else {  /* everything else is removed */
      lua_assert(isold(curr));  /* young objects should be white here */
      if (getage(curr) == G_TOUCHED2)  /* advance from TOUCHED2... */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	795b      	ldrb	r3, [r3, #5]
 800c20c:	f003 0307 	and.w	r3, r3, #7
 800c210:	2b06      	cmp	r3, #6
 800c212:	d106      	bne.n	800c222 <correctgraylist+0x6a>
        changeage(curr, G_TOUCHED2, G_OLD);  /* ... to OLD */
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	795b      	ldrb	r3, [r3, #5]
 800c218:	f083 0302 	eor.w	r3, r3, #2
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	715a      	strb	r2, [r3, #5]
      nw2black(curr);  /* make object black (to be removed) */
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	795b      	ldrb	r3, [r3, #5]
 800c226:	f043 0320 	orr.w	r3, r3, #32
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	715a      	strb	r2, [r3, #5]
      goto remove;
 800c230:	e000      	b.n	800c234 <correctgraylist+0x7c>
      goto remove;  /* remove all white objects */
 800c232:	bf00      	nop
    }
    remove: *p = *next; continue;
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	e003      	b.n	800c246 <correctgraylist+0x8e>
      goto remain;  /* keep non-white threads on the list */
 800c23e:	bf00      	nop
    remain: p = next; continue;
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	607b      	str	r3, [r7, #4]
 800c244:	bf00      	nop
  while ((curr = *p) != NULL) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1b7      	bne.n	800c1c2 <correctgraylist+0xa>
  }
  return p;
 800c252:	687b      	ldr	r3, [r7, #4]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <correctgraylists>:


/*
** Correct all gray lists, coalescing them into 'grayagain'.
*/
static void correctgraylists (global_State *g) {
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  GCObject **list = correctgraylist(&g->grayagain);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3354      	adds	r3, #84	; 0x54
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff ffa5 	bl	800c1b8 <correctgraylist>
 800c26e:	60f8      	str	r0, [r7, #12]
  *list = g->weak; g->weak = NULL;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	659a      	str	r2, [r3, #88]	; 0x58
  list = correctgraylist(list);
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff ff9a 	bl	800c1b8 <correctgraylist>
 800c284:	60f8      	str	r0, [r7, #12]
  *list = g->allweak; g->allweak = NULL;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	661a      	str	r2, [r3, #96]	; 0x60
  list = correctgraylist(list);
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7ff ff8f 	bl	800c1b8 <correctgraylist>
 800c29a:	60f8      	str	r0, [r7, #12]
  *list = g->ephemeron; g->ephemeron = NULL;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	65da      	str	r2, [r3, #92]	; 0x5c
  correctgraylist(list);
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7ff ff84 	bl	800c1b8 <correctgraylist>
}
 800c2b0:	bf00      	nop
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <markold>:
/*
** Mark black 'OLD1' objects when starting a new young collection.
** Gray objects are already in some gray list, and so will be visited
** in the atomic step.
*/
static void markold (global_State *g, GCObject *from, GCObject *to) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  GCObject *p;
  for (p = from; p != to; p = p->next) {
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	617b      	str	r3, [r7, #20]
 800c2c8:	e019      	b.n	800c2fe <markold+0x46>
    if (getage(p) == G_OLD1) {
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	795b      	ldrb	r3, [r3, #5]
 800c2ce:	f003 0307 	and.w	r3, r3, #7
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d110      	bne.n	800c2f8 <markold+0x40>
      lua_assert(!iswhite(p));
      changeage(p, G_OLD1, G_OLD);  /* now they are old */
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	795b      	ldrb	r3, [r3, #5]
 800c2da:	f083 0307 	eor.w	r3, r3, #7
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	715a      	strb	r2, [r3, #5]
      if (isblack(p))
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	795b      	ldrb	r3, [r3, #5]
 800c2e8:	f003 0320 	and.w	r3, r3, #32
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d003      	beq.n	800c2f8 <markold+0x40>
        reallymarkobject(g, p);
 800c2f0:	6979      	ldr	r1, [r7, #20]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f7fe fbae 	bl	800aa54 <reallymarkobject>
  for (p = from; p != to; p = p->next) {
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	617b      	str	r3, [r7, #20]
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	429a      	cmp	r2, r3
 800c304:	d1e1      	bne.n	800c2ca <markold+0x12>
    }
  }
}
 800c306:	bf00      	nop
 800c308:	bf00      	nop
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <finishgencycle>:


/*
** Finish a young-generation collection.
*/
static void finishgencycle (lua_State *L, global_State *g) {
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  correctgraylists(g);
 800c31a:	6838      	ldr	r0, [r7, #0]
 800c31c:	f7ff ff9e 	bl	800c25c <correctgraylists>
  checkSizes(L, g);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff fcb9 	bl	800bc9a <checkSizes>
  g->gcstate = GCSpropagate;  /* skip restart */
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  if (!g->gcemergency)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c336:	2b00      	cmp	r3, #0
 800c338:	d102      	bne.n	800c340 <finishgencycle+0x30>
    callallpendingfinalizers(L);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff fdf2 	bl	800bf24 <callallpendingfinalizers>
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <youngcollection>:
/*
** Does a young collection. First, mark 'OLD1' objects. Then does the
** atomic step. Then, sweep all lists and advance pointers. Finally,
** finish the collection.
*/
static void youngcollection (lua_State *L, global_State *g) {
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af02      	add	r7, sp, #8
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  GCObject **psurvival;  /* to point to first non-dead survival object */
  GCObject *dummy;  /* dummy out parameter to 'sweepgen' */
  lua_assert(g->gcstate == GCSpropagate);
  if (g->firstold1) {  /* are there regular OLD1 objects? */
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00a      	beq.n	800c370 <youngcollection+0x28>
    markold(g, g->firstold1, g->reallyold);  /* mark them */
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c362:	461a      	mov	r2, r3
 800c364:	6838      	ldr	r0, [r7, #0]
 800c366:	f7ff ffa7 	bl	800c2b8 <markold>
    g->firstold1 = NULL;  /* no more OLD1 objects (for now) */
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2200      	movs	r2, #0
 800c36e:	679a      	str	r2, [r3, #120]	; 0x78
  }
  markold(g, g->finobj, g->finobjrold);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c37a:	461a      	mov	r2, r3
 800c37c:	6838      	ldr	r0, [r7, #0]
 800c37e:	f7ff ff9b 	bl	800c2b8 <markold>
  markold(g, g->tobefnz, NULL);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c386:	2200      	movs	r2, #0
 800c388:	4619      	mov	r1, r3
 800c38a:	6838      	ldr	r0, [r7, #0]
 800c38c:	f7ff ff94 	bl	800c2b8 <markold>
  atomic(L);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fa94 	bl	800c8be <atomic>

  /* sweep nursery and get a pointer to its last live element */
  g->gcstate = GCSswpallgc;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2203      	movs	r2, #3
 800c39a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  psurvival = sweepgen(L, g, &g->allgc, g->survival, &g->firstold1);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	3378      	adds	r3, #120	; 0x78
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7ff fe76 	bl	800c0a4 <sweepgen>
 800c3b8:	60f8      	str	r0, [r7, #12]
  /* sweep 'survival' */
  sweepgen(L, g, psurvival, g->old1, &g->firstold1);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	3378      	adds	r3, #120	; 0x78
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff fe6a 	bl	800c0a4 <sweepgen>
  g->reallyold = g->old1;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	675a      	str	r2, [r3, #116]	; 0x74
  g->old1 = *psurvival;  /* 'survival' survivals are old now */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	671a      	str	r2, [r3, #112]	; 0x70
  g->survival = g->allgc;  /* all news are survivals */
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* repeat for 'finobj' lists */
  dummy = NULL;  /* no 'firstold1' optimization for 'finobj' lists */
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	60bb      	str	r3, [r7, #8]
  psurvival = sweepgen(L, g, &g->finobj, g->finobjsur, &dummy);
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800c3f6:	f107 0308 	add.w	r3, r7, #8
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7ff fe4f 	bl	800c0a4 <sweepgen>
 800c406:	60f8      	str	r0, [r7, #12]
  /* sweep 'survival' */
  sweepgen(L, g, psurvival, g->finobjold1, &dummy);
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c40e:	f107 0308 	add.w	r3, r7, #8
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4613      	mov	r3, r2
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7ff fe42 	bl	800c0a4 <sweepgen>
  g->finobjrold = g->finobjold1;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  g->finobjold1 = *psurvival;  /* 'survival' survivals are old now */
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  g->finobjsur = g->finobj;  /* all news are survivals */
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	67da      	str	r2, [r3, #124]	; 0x7c

  sweepgen(L, g, &g->tobefnz, NULL, &dummy);
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800c444:	f107 0308 	add.w	r3, r7, #8
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	2300      	movs	r3, #0
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7ff fe28 	bl	800c0a4 <sweepgen>
  finishgencycle(L, g);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7ff ff5a 	bl	800c310 <finishgencycle>
}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <atomic2gen>:
** Clears all gray lists, sweeps objects, and prepare sublists to enter
** generational mode. The sweeps remove dead objects and turn all
** surviving objects to old. Threads go back to 'grayagain'; everything
** else is turned black (not in any gray list).
*/
static void atomic2gen (lua_State *L, global_State *g) {
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  cleargraylists(g);
 800c46e:	6838      	ldr	r0, [r7, #0]
 800c470:	f7fe fc64 	bl	800ad3c <cleargraylists>
  /* sweep all elements making them old */
  g->gcstate = GCSswpallgc;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	2203      	movs	r2, #3
 800c478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  sweep2old(L, &g->allgc);
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	3344      	adds	r3, #68	; 0x44
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff fdb4 	bl	800bff0 <sweep2old>
  /* everything alive now is old */
  g->reallyold = g->old1 = g->survival = g->allgc;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	66da      	str	r2, [r3, #108]	; 0x6c
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	671a      	str	r2, [r3, #112]	; 0x70
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	675a      	str	r2, [r3, #116]	; 0x74
  g->firstold1 = NULL;  /* there are no OLD1 objects anywhere */
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* repeat for 'finobj' lists */
  sweep2old(L, &g->finobj);
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	334c      	adds	r3, #76	; 0x4c
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7ff fd9f 	bl	800bff0 <sweep2old>
  g->finobjrold = g->finobjold1 = g->finobjsur = g->finobj;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	67da      	str	r2, [r3, #124]	; 0x7c
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  sweep2old(L, &g->tobefnz);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	3364      	adds	r3, #100	; 0x64
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7ff fd8a 	bl	800bff0 <sweep2old>

  g->gckind = KGC_GEN;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  g->lastatomic = 0;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	615a      	str	r2, [r3, #20]
  g->GCestimate = gettotalbytes(g);  /* base for memory control */
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	689a      	ldr	r2, [r3, #8]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	611a      	str	r2, [r3, #16]
  finishgencycle(L, g);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7ff ff07 	bl	800c310 <finishgencycle>
}
 800c502:	bf00      	nop
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <entergen>:
** Enter generational mode. Must go until the end of an atomic cycle
** to ensure that all objects are correctly marked and weak tables
** are cleared. Then, turn all objects into old and finishes the
** collection.
*/
static lu_mem entergen (lua_State *L, global_State *g) {
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b084      	sub	sp, #16
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	6039      	str	r1, [r7, #0]
  lu_mem numobjs;
  luaC_runtilstate(L, bitmask(GCSpause));  /* prepare to start a new cycle */
 800c514:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fb4f 	bl	800cbbc <luaC_runtilstate>
  luaC_runtilstate(L, bitmask(GCSpropagate));  /* start new cycle */
 800c51e:	2101      	movs	r1, #1
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fb4b 	bl	800cbbc <luaC_runtilstate>
  numobjs = atomic(L);  /* propagates all and then do the atomic stuff */
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f9c9 	bl	800c8be <atomic>
 800c52c:	60f8      	str	r0, [r7, #12]
  atomic2gen(L, g);
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff ff97 	bl	800c464 <atomic2gen>
  return numobjs;
 800c536:	68fb      	ldr	r3, [r7, #12]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <enterinc>:
/*
** Enter incremental mode. Turn all objects white, make all
** intermediate lists point to NULL (to avoid invalid pointers),
** and go to the pause state.
*/
static void enterinc (global_State *g) {
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  whitelist(g, g->allgc);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fe0c 	bl	800c16c <whitelist>
  g->reallyold = g->old1 = g->survival = NULL;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	66da      	str	r2, [r3, #108]	; 0x6c
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	671a      	str	r2, [r3, #112]	; 0x70
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	675a      	str	r2, [r3, #116]	; 0x74
  whitelist(g, g->finobj);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7ff fdfb 	bl	800c16c <whitelist>
  whitelist(g, g->tobefnz);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff fdf5 	bl	800c16c <whitelist>
  g->finobjrold = g->finobjold1 = g->finobjsur = NULL;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	67da      	str	r2, [r3, #124]	; 0x7c
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  g->gcstate = GCSpause;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2208      	movs	r2, #8
 800c5a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  g->gckind = KGC_INC;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  g->lastatomic = 0;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	615a      	str	r2, [r3, #20]
}
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <luaC_changemode>:


/*
** Change collector mode to 'newmode'.
*/
void luaC_changemode (lua_State *L, int newmode) {
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	60fb      	str	r3, [r7, #12]
  if (newmode != g->gckind) {
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d00a      	beq.n	800c5f0 <luaC_changemode+0x34>
    if (newmode == KGC_GEN)  /* entering generational mode? */
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d104      	bne.n	800c5ea <luaC_changemode+0x2e>
      entergen(L, g);
 800c5e0:	68f9      	ldr	r1, [r7, #12]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff ff91 	bl	800c50a <entergen>
 800c5e8:	e002      	b.n	800c5f0 <luaC_changemode+0x34>
    else
      enterinc(g);  /* entering incremental mode */
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f7ff ffa8 	bl	800c540 <enterinc>
  }
  g->lastatomic = 0;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	615a      	str	r2, [r3, #20]
}
 800c5f6:	bf00      	nop
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <fullgen>:


/*
** Does a full collection in generational mode.
*/
static lu_mem fullgen (lua_State *L, global_State *g) {
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	6039      	str	r1, [r7, #0]
  enterinc(g);
 800c608:	6838      	ldr	r0, [r7, #0]
 800c60a:	f7ff ff99 	bl	800c540 <enterinc>
  return entergen(L, g);
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff ff7a 	bl	800c50a <entergen>
 800c616:	4603      	mov	r3, r0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <setminordebt>:

/*
** Set debt for the next minor collection, which will happen when
** memory grows 'genminormul'%.
*/
static void setminordebt (global_State *g) {
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  luaE_setdebt(g, -(cast(l_mem, (gettotalbytes(g) / 100)) * g->genminormul));
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	4413      	add	r3, r2
 800c632:	461a      	mov	r2, r3
 800c634:	4b09      	ldr	r3, [pc, #36]	; (800c65c <setminordebt+0x3c>)
 800c636:	fba3 2302 	umull	r2, r3, r3, r2
 800c63a:	095b      	lsrs	r3, r3, #5
 800c63c:	461a      	mov	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c644:	fb02 f303 	mul.w	r3, r2, r3
 800c648:	425b      	negs	r3, r3
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f001 fa8b 	bl	800db68 <luaE_setdebt>
}
 800c652:	bf00      	nop
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	51eb851f 	.word	0x51eb851f

0800c660 <stepgenfull>:
** decide whether to return to generational mode. Instead, it uses the
** number of objects traversed (returned by 'atomic') as a proxy. The
** field 'g->lastatomic' keeps this count from the last collection.
** ('g->lastatomic != 0' also means that the last collection was bad.)
*/
static void stepgenfull (lua_State *L, global_State *g) {
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  lu_mem newatomic;  /* count of traversed objects */
  lu_mem lastatomic = g->lastatomic;  /* count from last collection */
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	60fb      	str	r3, [r7, #12]
  if (g->gckind == KGC_GEN)  /* still in generational mode? */
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c676:	2b01      	cmp	r3, #1
 800c678:	d102      	bne.n	800c680 <stepgenfull+0x20>
    enterinc(g);  /* enter incremental mode */
 800c67a:	6838      	ldr	r0, [r7, #0]
 800c67c:	f7ff ff60 	bl	800c540 <enterinc>
  luaC_runtilstate(L, bitmask(GCSpropagate));  /* start new cycle */
 800c680:	2101      	movs	r1, #1
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fa9a 	bl	800cbbc <luaC_runtilstate>
  newatomic = atomic(L);  /* mark everybody */
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f918 	bl	800c8be <atomic>
 800c68e:	60b8      	str	r0, [r7, #8]
  if (newatomic < lastatomic + (lastatomic >> 3)) {  /* good collection? */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	08da      	lsrs	r2, r3, #3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	4413      	add	r3, r2
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d207      	bcs.n	800c6ae <stepgenfull+0x4e>
    atomic2gen(L, g);  /* return to generational mode */
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7ff fedf 	bl	800c464 <atomic2gen>
    setminordebt(g);
 800c6a6:	6838      	ldr	r0, [r7, #0]
 800c6a8:	f7ff ffba 	bl	800c620 <setminordebt>
    entersweep(L);
    luaC_runtilstate(L, bitmask(GCSpause));  /* finish collection */
    setpause(g);
    g->lastatomic = newatomic;
  }
}
 800c6ac:	e015      	b.n	800c6da <stepgenfull+0x7a>
    g->GCestimate = gettotalbytes(g);  /* first estimate */;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	611a      	str	r2, [r3, #16]
    entersweep(L);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f8a2 	bl	800c808 <entersweep>
    luaC_runtilstate(L, bitmask(GCSpause));  /* finish collection */
 800c6c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fa77 	bl	800cbbc <luaC_runtilstate>
    setpause(g);
 800c6ce:	6838      	ldr	r0, [r7, #0]
 800c6d0:	f000 f862 	bl	800c798 <setpause>
    g->lastatomic = newatomic;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	615a      	str	r2, [r3, #20]
}
 800c6da:	bf00      	nop
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
	...

0800c6e4 <genstep>:
** go to 'stepgenfull'.
**
** 'GCdebt <= 0' means an explicit call to GC step with "size" zero;
** in that case, do a minor collection.
*/
static void genstep (lua_State *L, global_State *g) {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  if (g->lastatomic != 0)  /* last collection was a bad one? */
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d004      	beq.n	800c700 <genstep+0x1c>
    stepgenfull(L, g);  /* do a full step */
 800c6f6:	6839      	ldr	r1, [r7, #0]
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7ff ffb1 	bl	800c660 <stepgenfull>
      setminordebt(g);
      g->GCestimate = majorbase;  /* preserve base value */
    }
  }
  lua_assert(isdecGCmodegen(g));
}
 800c6fe:	e044      	b.n	800c78a <genstep+0xa6>
    lu_mem majorbase = g->GCestimate;  /* memory after last major collection */
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	617b      	str	r3, [r7, #20]
    lu_mem majorinc = (majorbase / 100) * getgcparam(g->genmajormul);
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	4a22      	ldr	r2, [pc, #136]	; (800c794 <genstep+0xb0>)
 800c70a:	fba2 2303 	umull	r2, r3, r2, r3
 800c70e:	095b      	lsrs	r3, r3, #5
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800c716:	fb02 f303 	mul.w	r3, r2, r3
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	613b      	str	r3, [r7, #16]
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	dd26      	ble.n	800c774 <genstep+0x90>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	4619      	mov	r1, r3
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	4413      	add	r3, r2
 800c738:	4299      	cmp	r1, r3
 800c73a:	d91b      	bls.n	800c774 <genstep+0x90>
      lu_mem numobjs = fullgen(L, g);  /* do a major collection */
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff ff5d 	bl	800c5fe <fullgen>
 800c744:	60f8      	str	r0, [r7, #12]
      if (gettotalbytes(g) < majorbase + (majorinc / 2)) {
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	689a      	ldr	r2, [r3, #8]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	4619      	mov	r1, r3
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	085a      	lsrs	r2, r3, #1
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	4413      	add	r3, r2
 800c75a:	4299      	cmp	r1, r3
 800c75c:	d203      	bcs.n	800c766 <genstep+0x82>
        setminordebt(g);
 800c75e:	6838      	ldr	r0, [r7, #0]
 800c760:	f7ff ff5e 	bl	800c620 <setminordebt>
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
 800c764:	e011      	b.n	800c78a <genstep+0xa6>
        g->lastatomic = numobjs;  /* signal that last collection was bad */
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	615a      	str	r2, [r3, #20]
        setpause(g);  /* do a long wait for next (major) collection */
 800c76c:	6838      	ldr	r0, [r7, #0]
 800c76e:	f000 f813 	bl	800c798 <setpause>
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
 800c772:	e00a      	b.n	800c78a <genstep+0xa6>
      youngcollection(L, g);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7ff fde6 	bl	800c348 <youngcollection>
      setminordebt(g);
 800c77c:	6838      	ldr	r0, [r7, #0]
 800c77e:	f7ff ff4f 	bl	800c620 <setminordebt>
      g->GCestimate = majorbase;  /* preserve base value */
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	611a      	str	r2, [r3, #16]
}
 800c788:	e7ff      	b.n	800c78a <genstep+0xa6>
 800c78a:	bf00      	nop
 800c78c:	3718      	adds	r7, #24
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	51eb851f 	.word	0x51eb851f

0800c798 <setpause>:
** Set the "time" to wait before starting a new GC cycle; cycle will
** start when memory use hits the threshold of ('estimate' * pause /
** PAUSEADJ). (Division by 'estimate' should be OK: it cannot be zero,
** because Lua cannot even start with less than PAUSEADJ bytes).
*/
static void setpause (global_State *g) {
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  l_mem threshold, debt;
  int pause = getgcparam(g->gcpause);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	613b      	str	r3, [r7, #16]
  l_mem estimate = g->GCestimate / PAUSEADJ;  /* adjust 'estimate' */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	4a15      	ldr	r2, [pc, #84]	; (800c804 <setpause+0x6c>)
 800c7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b4:	095b      	lsrs	r3, r3, #5
 800c7b6:	60fb      	str	r3, [r7, #12]
  lua_assert(estimate > 0);
  threshold = (pause < MAX_LMEM / estimate)  /* overflow? */
 800c7b8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	fb92 f3f3 	sdiv	r3, r2, r3
            ? estimate * pause  /* no overflow */
            : MAX_LMEM;  /* overflow; truncate to maximum */
 800c7c2:	693a      	ldr	r2, [r7, #16]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	da04      	bge.n	800c7d2 <setpause+0x3a>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	fb02 f303 	mul.w	r3, r2, r3
 800c7d0:	e001      	b.n	800c7d6 <setpause+0x3e>
 800c7d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  threshold = (pause < MAX_LMEM / estimate)  /* overflow? */
 800c7d6:	60bb      	str	r3, [r7, #8]
  debt = gettotalbytes(g) - threshold;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	617b      	str	r3, [r7, #20]
  if (debt > 0) debt = 0;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dd01      	ble.n	800c7f4 <setpause+0x5c>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	617b      	str	r3, [r7, #20]
  luaE_setdebt(g, debt);
 800c7f4:	6979      	ldr	r1, [r7, #20]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f001 f9b6 	bl	800db68 <luaE_setdebt>
}
 800c7fc:	bf00      	nop
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	51eb851f 	.word	0x51eb851f

0800c808 <entersweep>:
** The call to 'sweeptolive' makes the pointer point to an object
** inside the list (instead of to the header), so that the real sweep do
** not need to skip objects created between "now" and the start of the
** real sweep.
*/
static void entersweep (lua_State *L) {
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	60fb      	str	r3, [r7, #12]
  g->gcstate = GCSswpallgc;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2203      	movs	r2, #3
 800c81a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  lua_assert(g->sweepgc == NULL);
  g->sweepgc = sweeptolive(L, &g->allgc);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3344      	adds	r3, #68	; 0x44
 800c822:	4619      	mov	r1, r3
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7ff fa21 	bl	800bc6c <sweeptolive>
 800c82a:	4602      	mov	r2, r0
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c830:	bf00      	nop
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <deletelist>:

/*
** Delete all objects in list 'p' until (but not including) object
** 'limit'.
*/
static void deletelist (lua_State *L, GCObject *p, GCObject *limit) {
 800c838:	b580      	push	{r7, lr}
 800c83a:	b086      	sub	sp, #24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
  while (p != limit) {
 800c844:	e008      	b.n	800c858 <deletelist+0x20>
    GCObject *next = p->next;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	617b      	str	r3, [r7, #20]
    freeobj(L, p);
 800c84c:	68b9      	ldr	r1, [r7, #8]
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f7ff f8fc 	bl	800ba4c <freeobj>
    p = next;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	60bb      	str	r3, [r7, #8]
  while (p != limit) {
 800c858:	68ba      	ldr	r2, [r7, #8]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d1f2      	bne.n	800c846 <deletelist+0xe>
  }
}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <luaC_freeallobjects>:

/*
** Call all finalizers of the objects in the given Lua state, and
** then free all objects, except for the main thread.
*/
void luaC_freeallobjects (lua_State *L) {
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b084      	sub	sp, #16
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	60fb      	str	r3, [r7, #12]
  g->gcstp = GCSTPCLS;  /* no extra finalizers after here */
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2204      	movs	r2, #4
 800c87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  luaC_changemode(L, KGC_INC);
 800c880:	2100      	movs	r1, #0
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff fe9a 	bl	800c5bc <luaC_changemode>
  separatetobefnz(g, 1);  /* separate all objects with finalizers */
 800c888:	2101      	movs	r1, #1
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f7ff fb71 	bl	800bf72 <separatetobefnz>
  lua_assert(g->finobj == NULL);
  callallpendingfinalizers(L);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7ff fb47 	bl	800bf24 <callallpendingfinalizers>
  deletelist(L, g->allgc, obj2gco(g->mainthread));
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7ff ffc8 	bl	800c838 <deletelist>
  lua_assert(g->finobj == NULL);  /* no new finalizers */
  deletelist(L, g->fixedgc, NULL);  /* collect fixed objects */
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7ff ffc1 	bl	800c838 <deletelist>
  lua_assert(g->strt.nuse == 0);
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <atomic>:


static lu_mem atomic (lua_State *L) {
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b088      	sub	sp, #32
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	61fb      	str	r3, [r7, #28]
  lu_mem work = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	61bb      	str	r3, [r7, #24]
  GCObject *origweak, *origall;
  GCObject *grayagain = g->grayagain;  /* save original list */
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d4:	617b      	str	r3, [r7, #20]
  g->grayagain = NULL;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	655a      	str	r2, [r3, #84]	; 0x54
  lua_assert(g->ephemeron == NULL && g->weak == NULL);
  lua_assert(!iswhite(g->mainthread));
  g->gcstate = GCSatomic;
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  markobject(g, L);  /* mark running thread */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	795b      	ldrb	r3, [r3, #5]
 800c8e8:	f003 0318 	and.w	r3, r3, #24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <atomic+0x3c>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	69f8      	ldr	r0, [r7, #28]
 800c8f6:	f7fe f8ad 	bl	800aa54 <reallymarkobject>
  /* registry and global metatables may be changed by API */
  markvalue(g, &g->l_registry);
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00c      	beq.n	800c922 <atomic+0x64>
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90c:	795b      	ldrb	r3, [r3, #5]
 800c90e:	f003 0318 	and.w	r3, r3, #24
 800c912:	2b00      	cmp	r3, #0
 800c914:	d005      	beq.n	800c922 <atomic+0x64>
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91a:	4619      	mov	r1, r3
 800c91c:	69f8      	ldr	r0, [r7, #28]
 800c91e:	f7fe f899 	bl	800aa54 <reallymarkobject>
  markmt(g);  /* mark global metatables */
 800c922:	69f8      	ldr	r0, [r7, #28]
 800c924:	f7fe f962 	bl	800abec <markmt>
  work += propagateall(g);  /* empties 'gray' list */
 800c928:	69f8      	ldr	r0, [r7, #28]
 800c92a:	f7fe ff73 	bl	800b814 <propagateall>
 800c92e:	4602      	mov	r2, r0
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	4413      	add	r3, r2
 800c934:	61bb      	str	r3, [r7, #24]
  /* remark occasional upvalues of (maybe) dead threads */
  work += remarkupvals(g);
 800c936:	69f8      	ldr	r0, [r7, #28]
 800c938:	f7fe f9aa 	bl	800ac90 <remarkupvals>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	4413      	add	r3, r2
 800c944:	61bb      	str	r3, [r7, #24]
  work += propagateall(g);  /* propagate changes */
 800c946:	69f8      	ldr	r0, [r7, #28]
 800c948:	f7fe ff64 	bl	800b814 <propagateall>
 800c94c:	4602      	mov	r2, r0
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	4413      	add	r3, r2
 800c952:	61bb      	str	r3, [r7, #24]
  g->gray = grayagain;
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	697a      	ldr	r2, [r7, #20]
 800c958:	651a      	str	r2, [r3, #80]	; 0x50
  work += propagateall(g);  /* traverse 'grayagain' list */
 800c95a:	69f8      	ldr	r0, [r7, #28]
 800c95c:	f7fe ff5a 	bl	800b814 <propagateall>
 800c960:	4602      	mov	r2, r0
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	4413      	add	r3, r2
 800c966:	61bb      	str	r3, [r7, #24]
  convergeephemerons(g);
 800c968:	69f8      	ldr	r0, [r7, #28]
 800c96a:	f7fe ff6a 	bl	800b842 <convergeephemerons>
  /* at this point, all strongly accessible objects are marked. */
  /* Clear values from weak tables, before checking finalizers */
  clearbyvalues(g, g->weak, NULL);
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c972:	2200      	movs	r2, #0
 800c974:	4619      	mov	r1, r3
 800c976:	69f8      	ldr	r0, [r7, #28]
 800c978:	f7fe ffe3 	bl	800b942 <clearbyvalues>
  clearbyvalues(g, g->allweak, NULL);
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c980:	2200      	movs	r2, #0
 800c982:	4619      	mov	r1, r3
 800c984:	69f8      	ldr	r0, [r7, #28]
 800c986:	f7fe ffdc 	bl	800b942 <clearbyvalues>
  origweak = g->weak; origall = g->allweak;
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c98e:	613b      	str	r3, [r7, #16]
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c994:	60fb      	str	r3, [r7, #12]
  separatetobefnz(g, 0);  /* separate objects to be finalized */
 800c996:	2100      	movs	r1, #0
 800c998:	69f8      	ldr	r0, [r7, #28]
 800c99a:	f7ff faea 	bl	800bf72 <separatetobefnz>
  work += markbeingfnz(g);  /* mark objects that will be finalized */
 800c99e:	69f8      	ldr	r0, [r7, #28]
 800c9a0:	f7fe f953 	bl	800ac4a <markbeingfnz>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	61bb      	str	r3, [r7, #24]
  work += propagateall(g);  /* remark, to propagate 'resurrection' */
 800c9ac:	69f8      	ldr	r0, [r7, #28]
 800c9ae:	f7fe ff31 	bl	800b814 <propagateall>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	61bb      	str	r3, [r7, #24]
  convergeephemerons(g);
 800c9ba:	69f8      	ldr	r0, [r7, #28]
 800c9bc:	f7fe ff41 	bl	800b842 <convergeephemerons>
  /* at this point, all resurrected objects are marked. */
  /* remove dead objects from weak tables */
  clearbykeys(g, g->ephemeron);  /* clear keys from all ephemeron tables */
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	69f8      	ldr	r0, [r7, #28]
 800c9c8:	f7fe ff77 	bl	800b8ba <clearbykeys>
  clearbykeys(g, g->allweak);  /* clear keys from all 'allweak' tables */
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	69f8      	ldr	r0, [r7, #28]
 800c9d4:	f7fe ff71 	bl	800b8ba <clearbykeys>
  /* clear values from resurrected weak tables */
  clearbyvalues(g, g->weak, origweak);
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	4619      	mov	r1, r3
 800c9e0:	69f8      	ldr	r0, [r7, #28]
 800c9e2:	f7fe ffae 	bl	800b942 <clearbyvalues>
  clearbyvalues(g, g->allweak, origall);
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	69f8      	ldr	r0, [r7, #28]
 800c9f0:	f7fe ffa7 	bl	800b942 <clearbyvalues>
  luaS_clearcache(g);
 800c9f4:	69f8      	ldr	r0, [r7, #28]
 800c9f6:	f001 fd80 	bl	800e4fa <luaS_clearcache>
  g->currentwhite = cast_byte(otherwhite(g));  /* flip current white */
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ca00:	f083 0318 	eor.w	r3, r3, #24
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  lua_assert(g->gray == NULL);
  return work;  /* estimate of slots marked by 'atomic' */
 800ca0c:	69bb      	ldr	r3, [r7, #24]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3720      	adds	r7, #32
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <sweepstep>:


static int sweepstep (lua_State *L, global_State *g,
                      int nextstate, GCObject **nextlist) {
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b086      	sub	sp, #24
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	607a      	str	r2, [r7, #4]
 800ca22:	603b      	str	r3, [r7, #0]
  if (g->sweepgc) {
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d018      	beq.n	800ca5e <sweepstep+0x48>
    l_mem olddebt = g->GCdebt;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	617b      	str	r3, [r7, #20]
    int count;
    g->sweepgc = sweeplist(L, g->sweepgc, GCSWEEPMAX, &count);
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ca36:	f107 0310 	add.w	r3, r7, #16
 800ca3a:	2264      	movs	r2, #100	; 0x64
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f7ff f8bd 	bl	800bbbc <sweeplist>
 800ca42:	4602      	mov	r2, r0
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	649a      	str	r2, [r3, #72]	; 0x48
    g->GCestimate += g->GCdebt - olddebt;  /* update estimate */
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	68d1      	ldr	r1, [r2, #12]
 800ca50:	697a      	ldr	r2, [r7, #20]
 800ca52:	1a8a      	subs	r2, r1, r2
 800ca54:	441a      	add	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	611a      	str	r2, [r3, #16]
    return count;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	e008      	b.n	800ca70 <sweepstep+0x5a>
  }
  else {  /* enter next state */
    g->gcstate = nextstate;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    g->sweepgc = nextlist;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	649a      	str	r2, [r3, #72]	; 0x48
    return 0;  /* no work done */
 800ca6e:	2300      	movs	r3, #0
  }
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3718      	adds	r7, #24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <singlestep>:


static lu_mem singlestep (lua_State *L) {
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	60bb      	str	r3, [r7, #8]
  lu_mem work;
  lua_assert(!g->gcstopem);  /* collector is not reentrant */
  g->gcstopem = 1;  /* no emergency collections while collecting */
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  switch (g->gcstate) {
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ca94:	2b08      	cmp	r3, #8
 800ca96:	f200 8085 	bhi.w	800cba4 <singlestep+0x12c>
 800ca9a:	a201      	add	r2, pc, #4	; (adr r2, 800caa0 <singlestep+0x28>)
 800ca9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa0:	0800cad9 	.word	0x0800cad9
 800caa4:	0800caf9 	.word	0x0800caf9
 800caa8:	0800cba5 	.word	0x0800cba5
 800caac:	0800cb19 	.word	0x0800cb19
 800cab0:	0800cb2d 	.word	0x0800cb2d
 800cab4:	0800cb41 	.word	0x0800cb41
 800cab8:	0800cb53 	.word	0x0800cb53
 800cabc:	0800cb69 	.word	0x0800cb69
 800cac0:	0800cac5 	.word	0x0800cac5
    case GCSpause: {
      restartcollection(g);
 800cac4:	68b8      	ldr	r0, [r7, #8]
 800cac6:	f7fe f955 	bl	800ad74 <restartcollection>
      g->gcstate = GCSpropagate;
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      work = 1;
 800cad2:	2301      	movs	r3, #1
 800cad4:	60fb      	str	r3, [r7, #12]
      break;
 800cad6:	e067      	b.n	800cba8 <singlestep+0x130>
    }
    case GCSpropagate: {
      if (g->gray == NULL) {  /* no more gray objects? */
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d106      	bne.n	800caee <singlestep+0x76>
        g->gcstate = GCSenteratomic;  /* finish propagate phase */
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        work = 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	60fb      	str	r3, [r7, #12]
      }
      else
        work = propagatemark(g);  /* traverse one gray object */
      break;
 800caec:	e05c      	b.n	800cba8 <singlestep+0x130>
        work = propagatemark(g);  /* traverse one gray object */
 800caee:	68b8      	ldr	r0, [r7, #8]
 800caf0:	f7fe fdfe 	bl	800b6f0 <propagatemark>
 800caf4:	60f8      	str	r0, [r7, #12]
      break;
 800caf6:	e057      	b.n	800cba8 <singlestep+0x130>
    }
    case GCSenteratomic: {
      work = atomic(L);  /* work is what was traversed by 'atomic' */
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff fee0 	bl	800c8be <atomic>
 800cafe:	60f8      	str	r0, [r7, #12]
      entersweep(L);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff fe81 	bl	800c808 <entersweep>
      g->GCestimate = gettotalbytes(g);  /* first estimate */;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	689a      	ldr	r2, [r3, #8]
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	4413      	add	r3, r2
 800cb10:	461a      	mov	r2, r3
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	611a      	str	r2, [r3, #16]
      break;
 800cb16:	e047      	b.n	800cba8 <singlestep+0x130>
    }
    case GCSswpallgc: {  /* sweep "regular" objects */
      work = sweepstep(L, g, GCSswpfinobj, &g->finobj);
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	334c      	adds	r3, #76	; 0x4c
 800cb1c:	2204      	movs	r2, #4
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff ff78 	bl	800ca16 <sweepstep>
 800cb26:	4603      	mov	r3, r0
 800cb28:	60fb      	str	r3, [r7, #12]
      break;
 800cb2a:	e03d      	b.n	800cba8 <singlestep+0x130>
    }
    case GCSswpfinobj: {  /* sweep objects with finalizers */
      work = sweepstep(L, g, GCSswptobefnz, &g->tobefnz);
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	3364      	adds	r3, #100	; 0x64
 800cb30:	2205      	movs	r2, #5
 800cb32:	68b9      	ldr	r1, [r7, #8]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ff6e 	bl	800ca16 <sweepstep>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	60fb      	str	r3, [r7, #12]
      break;
 800cb3e:	e033      	b.n	800cba8 <singlestep+0x130>
    }
    case GCSswptobefnz: {  /* sweep objects to be finalized */
      work = sweepstep(L, g, GCSswpend, NULL);
 800cb40:	2300      	movs	r3, #0
 800cb42:	2206      	movs	r2, #6
 800cb44:	68b9      	ldr	r1, [r7, #8]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff ff65 	bl	800ca16 <sweepstep>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	60fb      	str	r3, [r7, #12]
      break;
 800cb50:	e02a      	b.n	800cba8 <singlestep+0x130>
    }
    case GCSswpend: {  /* finish sweeps */
      checkSizes(L, g);
 800cb52:	68b9      	ldr	r1, [r7, #8]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff f8a0 	bl	800bc9a <checkSizes>
      g->gcstate = GCScallfin;
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2207      	movs	r2, #7
 800cb5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      work = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	60fb      	str	r3, [r7, #12]
      break;
 800cb66:	e01f      	b.n	800cba8 <singlestep+0x130>
    }
    case GCScallfin: {  /* call remaining finalizers */
      if (g->tobefnz && !g->gcemergency) {
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d012      	beq.n	800cb96 <singlestep+0x11e>
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10d      	bne.n	800cb96 <singlestep+0x11e>
        g->gcstopem = 0;  /* ok collections during finalizers */
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
        work = runafewfinalizers(L, GCFINMAX) * GCFINALIZECOST;
 800cb82:	210a      	movs	r1, #10
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff f9af 	bl	800bee8 <runafewfinalizers>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2232      	movs	r2, #50	; 0x32
 800cb8e:	fb02 f303 	mul.w	r3, r2, r3
 800cb92:	60fb      	str	r3, [r7, #12]
      }
      else {  /* emergency mode or no more finalizers */
        g->gcstate = GCSpause;  /* finish collection */
        work = 0;
      }
      break;
 800cb94:	e008      	b.n	800cba8 <singlestep+0x130>
        g->gcstate = GCSpause;  /* finish collection */
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2208      	movs	r2, #8
 800cb9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        work = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60fb      	str	r3, [r7, #12]
      break;
 800cba2:	e001      	b.n	800cba8 <singlestep+0x130>
    }
    default: lua_assert(0); return 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	e004      	b.n	800cbb2 <singlestep+0x13a>
  }
  g->gcstopem = 0;
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  return work;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop

0800cbbc <luaC_runtilstate>:

/*
** advances the garbage collector until it reaches a state allowed
** by 'statemask'
*/
void luaC_runtilstate (lua_State *L, int statesmask) {
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	60fb      	str	r3, [r7, #12]
  while (!testbit(statesmask, g->gcstate))
 800cbcc:	e002      	b.n	800cbd4 <luaC_runtilstate+0x18>
    singlestep(L);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7ff ff52 	bl	800ca78 <singlestep>
  while (!testbit(statesmask, g->gcstate))
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cbda:	461a      	mov	r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	4113      	asrs	r3, r2
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0f2      	beq.n	800cbce <luaC_runtilstate+0x12>
}
 800cbe8:	bf00      	nop
 800cbea:	bf00      	nop
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <incstep>:
** converted from bytes to "units of work"; then the function loops
** running single steps until adding that many units of work or
** finishing a cycle (pause state). Finally, it sets the debt that
** controls when next step will be performed.
*/
static void incstep (lua_State *L, global_State *g) {
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b086      	sub	sp, #24
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	6039      	str	r1, [r7, #0]
  int stepmul = (getgcparam(g->gcstepmul) | 1);  /* avoid division by 0 */
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	f043 0301 	orr.w	r3, r3, #1
 800cc08:	613b      	str	r3, [r7, #16]
  l_mem debt = (g->GCdebt / WORK2MEM) * stepmul;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	08db      	lsrs	r3, r3, #3
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	fb02 f303 	mul.w	r3, r2, r3
 800cc16:	617b      	str	r3, [r7, #20]
  l_mem stepsize = (g->gcstepsize <= log2maxs(l_mem))
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
                 ? ((cast(l_mem, 1) << g->gcstepsize) / WORK2MEM) * stepmul
                 : MAX_LMEM;  /* overflow; keep maximum value */
 800cc1e:	2b1e      	cmp	r3, #30
 800cc20:	d80a      	bhi.n	800cc38 <incstep+0x46>
                 ? ((cast(l_mem, 1) << g->gcstepsize) / WORK2MEM) * stepmul
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc28:	461a      	mov	r2, r3
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	4093      	lsls	r3, r2
 800cc2e:	08db      	lsrs	r3, r3, #3
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	fb02 f303 	mul.w	r3, r2, r3
 800cc36:	e001      	b.n	800cc3c <incstep+0x4a>
                 : MAX_LMEM;  /* overflow; keep maximum value */
 800cc38:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  l_mem stepsize = (g->gcstepsize <= log2maxs(l_mem))
 800cc3c:	60fb      	str	r3, [r7, #12]
  do {  /* repeat until pause or enough "credit" (negative debt) */
    lu_mem work = singlestep(L);  /* perform one single step */
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff ff1a 	bl	800ca78 <singlestep>
 800cc44:	60b8      	str	r0, [r7, #8]
    debt -= work;
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	1ad3      	subs	r3, r2, r3
 800cc4c:	617b      	str	r3, [r7, #20]
  } while (debt > -stepsize && g->gcstate != GCSpause);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	425b      	negs	r3, r3
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	dd04      	ble.n	800cc62 <incstep+0x70>
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cc5e:	2b08      	cmp	r3, #8
 800cc60:	d1ed      	bne.n	800cc3e <incstep+0x4c>
  if (g->gcstate == GCSpause)
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cc68:	2b08      	cmp	r3, #8
 800cc6a:	d103      	bne.n	800cc74 <incstep+0x82>
    setpause(g);  /* pause until next cycle */
 800cc6c:	6838      	ldr	r0, [r7, #0]
 800cc6e:	f7ff fd93 	bl	800c798 <setpause>
  else {
    debt = (debt / stepmul) * WORK2MEM;  /* convert 'work units' to bytes */
    luaE_setdebt(g, debt);
  }
}
 800cc72:	e009      	b.n	800cc88 <incstep+0x96>
    debt = (debt / stepmul) * WORK2MEM;  /* convert 'work units' to bytes */
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	617b      	str	r3, [r7, #20]
    luaE_setdebt(g, debt);
 800cc80:	6979      	ldr	r1, [r7, #20]
 800cc82:	6838      	ldr	r0, [r7, #0]
 800cc84:	f000 ff70 	bl	800db68 <luaE_setdebt>
}
 800cc88:	bf00      	nop
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <luaC_step>:

/*
** performs a basic GC step if collector is running
*/
void luaC_step (lua_State *L) {
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	691b      	ldr	r3, [r3, #16]
 800cc9c:	60fb      	str	r3, [r7, #12]
  lua_assert(!g->gcemergency);
  if (gcrunning(g)) {  /* running? */
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d111      	bne.n	800cccc <luaC_step+0x3c>
    if(isdecGCmodegen(g))
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d003      	beq.n	800ccba <luaC_step+0x2a>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	695b      	ldr	r3, [r3, #20]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d004      	beq.n	800ccc4 <luaC_step+0x34>
      genstep(L, g);
 800ccba:	68f9      	ldr	r1, [r7, #12]
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7ff fd11 	bl	800c6e4 <genstep>
    else
      incstep(L, g);
  }
}
 800ccc2:	e003      	b.n	800cccc <luaC_step+0x3c>
      incstep(L, g);
 800ccc4:	68f9      	ldr	r1, [r7, #12]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff ff93 	bl	800cbf2 <incstep>
}
 800cccc:	bf00      	nop
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <fullinc>:
** Before running the collection, check 'keepinvariant'; if it is true,
** there may be some objects marked as black, so the collector has
** to sweep all objects to turn them back to white (as white has not
** changed, nothing will be collected).
*/
static void fullinc (lua_State *L, global_State *g) {
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  if (keepinvariant(g))  /* black objects? */
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d802      	bhi.n	800ccee <fullinc+0x1a>
    entersweep(L); /* sweep everything to turn them back to white */
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7ff fd8d 	bl	800c808 <entersweep>
  /* finish any pending sweep phase to start a new cycle */
  luaC_runtilstate(L, bitmask(GCSpause));
 800ccee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7ff ff62 	bl	800cbbc <luaC_runtilstate>
  luaC_runtilstate(L, bitmask(GCScallfin));  /* run up to finalizers */
 800ccf8:	2180      	movs	r1, #128	; 0x80
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff ff5e 	bl	800cbbc <luaC_runtilstate>
  /* estimate must be correct after a full GC cycle */
  lua_assert(g->GCestimate == gettotalbytes(g));
  luaC_runtilstate(L, bitmask(GCSpause));  /* finish collection */
 800cd00:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff ff59 	bl	800cbbc <luaC_runtilstate>
  setpause(g);
 800cd0a:	6838      	ldr	r0, [r7, #0]
 800cd0c:	f7ff fd44 	bl	800c798 <setpause>
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <luaC_fullgc>:
/*
** Performs a full GC cycle; if 'isemergency', set a flag to avoid
** some operations which could change the interpreter state in some
** unexpected ways (running finalizers and shrinking some structures).
*/
void luaC_fullgc (lua_State *L, int isemergency) {
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	60fb      	str	r3, [r7, #12]
  lua_assert(!g->gcemergency);
  g->gcemergency = isemergency;  /* set flag */
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if (g->gckind == KGC_INC)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d104      	bne.n	800cd46 <luaC_fullgc+0x2e>
    fullinc(L, g);
 800cd3c:	68f9      	ldr	r1, [r7, #12]
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7ff ffc8 	bl	800ccd4 <fullinc>
 800cd44:	e003      	b.n	800cd4e <luaC_fullgc+0x36>
  else
    fullgen(L, g);
 800cd46:	68f9      	ldr	r1, [r7, #12]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff fc58 	bl	800c5fe <fullgen>
  g->gcemergency = 0;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
	...

0800cd60 <luaX_init>:
  }
  b->buffer[luaZ_bufflen(b)++] = cast_char(c);
}


void luaX_init (lua_State *L) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  int i;
  TString *e = luaS_newliteral(L, LUA_ENV);  /* create env name */
 800cd68:	2204      	movs	r2, #4
 800cd6a:	4916      	ldr	r1, [pc, #88]	; (800cdc4 <luaX_init+0x64>)
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f001 fd67 	bl	800e840 <luaS_newlstr>
 800cd72:	6138      	str	r0, [r7, #16]
  luaC_fix(L, obj2gco(e));  /* never collect this name */
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7fd fe14 	bl	800a9a6 <luaC_fix>
  for (i=0; i<NUM_RESERVED; i++) {
 800cd7e:	2300      	movs	r3, #0
 800cd80:	617b      	str	r3, [r7, #20]
 800cd82:	e016      	b.n	800cdb2 <luaX_init+0x52>
    TString *ts = luaS_new(L, luaX_tokens[i]);
 800cd84:	4a10      	ldr	r2, [pc, #64]	; (800cdc8 <luaX_init+0x68>)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f001 fd86 	bl	800e8a0 <luaS_new>
 800cd94:	60f8      	str	r0, [r7, #12]
    luaC_fix(L, obj2gco(ts));  /* reserved words are never collected */
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7fd fe03 	bl	800a9a6 <luaC_fix>
    ts->extra = cast_byte(i+1);  /* reserved word */
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	3301      	adds	r3, #1
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	719a      	strb	r2, [r3, #6]
  for (i=0; i<NUM_RESERVED; i++) {
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	617b      	str	r3, [r7, #20]
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	2b15      	cmp	r3, #21
 800cdb6:	dde5      	ble.n	800cd84 <luaX_init+0x24>
  }
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	080223b8 	.word	0x080223b8
 800cdc8:	08022a9c 	.word	0x08022a9c

0800cdcc <luaM_toobig>:
}

/* }================================================================== */


l_noret luaM_toobig (lua_State *L) {
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  luaG_runerror(L, "memory allocation error: block too big");
 800cdd4:	4901      	ldr	r1, [pc, #4]	; (800cddc <luaM_toobig+0x10>)
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7fc f909 	bl	8008fee <luaG_runerror>
 800cddc:	08022530 	.word	0x08022530

0800cde0 <luaM_free_>:


/*
** Free memory
*/
void luaM_free_ (lua_State *L, void *block, size_t osize) {
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
  global_State *g = G(L);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	617b      	str	r3, [r7, #20]
  lua_assert((osize == 0) == (block == NULL));
  (*g->frealloc)(g->ud, block, osize, 0);
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	681c      	ldr	r4, [r3, #0]
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	6858      	ldr	r0, [r3, #4]
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	68b9      	ldr	r1, [r7, #8]
 800ce00:	47a0      	blx	r4
  g->GCdebt -= osize;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	461a      	mov	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	60da      	str	r2, [r3, #12]
}
 800ce12:	bf00      	nop
 800ce14:	371c      	adds	r7, #28
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd90      	pop	{r4, r7, pc}

0800ce1a <tryagain>:
** collector is not yet fully initialized. Also, it should not be called
** when 'gcstopem' is true, because then the interpreter is in the
** middle of a collection step.
*/
static void *tryagain (lua_State *L, void *block,
                       size_t osize, size_t nsize) {
 800ce1a:	b590      	push	{r4, r7, lr}
 800ce1c:	b087      	sub	sp, #28
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
 800ce26:	603b      	str	r3, [r7, #0]
  global_State *g = G(L);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	617b      	str	r3, [r7, #20]
  if (completestate(g) && !g->gcstopem) {
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce34:	f003 030f 	and.w	r3, r3, #15
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d112      	bne.n	800ce62 <tryagain+0x48>
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10d      	bne.n	800ce62 <tryagain+0x48>
    luaC_fullgc(L, 1);  /* try to free some memory... */
 800ce46:	2101      	movs	r1, #1
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f7ff ff65 	bl	800cd18 <luaC_fullgc>
    return (*g->frealloc)(g->ud, block, osize, nsize);  /* try again */
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	681c      	ldr	r4, [r3, #0]
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	6858      	ldr	r0, [r3, #4]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	68b9      	ldr	r1, [r7, #8]
 800ce5c:	47a0      	blx	r4
 800ce5e:	4603      	mov	r3, r0
 800ce60:	e000      	b.n	800ce64 <tryagain+0x4a>
  }
  else return NULL;  /* cannot free any memory without a full state */
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	371c      	adds	r7, #28
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd90      	pop	{r4, r7, pc}

0800ce6c <luaM_realloc_>:


/*
** Generic allocation routine.
*/
void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {
 800ce6c:	b590      	push	{r4, r7, lr}
 800ce6e:	b087      	sub	sp, #28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
 800ce78:	603b      	str	r3, [r7, #0]
  void *newblock;
  global_State *g = G(L);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	613b      	str	r3, [r7, #16]
  lua_assert((osize == 0) == (block == NULL));
  newblock = firsttry(g, block, osize, nsize);
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	681c      	ldr	r4, [r3, #0]
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	6858      	ldr	r0, [r3, #4]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	68b9      	ldr	r1, [r7, #8]
 800ce8e:	47a0      	blx	r4
 800ce90:	6178      	str	r0, [r7, #20]
  if (l_unlikely(newblock == NULL && nsize > 0)) {
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d104      	bne.n	800cea2 <luaM_realloc_+0x36>
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <luaM_realloc_+0x36>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e000      	b.n	800cea4 <luaM_realloc_+0x38>
 800cea2:	2300      	movs	r3, #0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	bf14      	ite	ne
 800cea8:	2301      	movne	r3, #1
 800ceaa:	2300      	moveq	r3, #0
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00b      	beq.n	800ceca <luaM_realloc_+0x5e>
    newblock = tryagain(L, block, osize, nsize);
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	68b9      	ldr	r1, [r7, #8]
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f7ff ffae 	bl	800ce1a <tryagain>
 800cebe:	6178      	str	r0, [r7, #20]
    if (newblock == NULL)  /* still no memory? */
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d101      	bne.n	800ceca <luaM_realloc_+0x5e>
      return NULL;  /* do not update 'GCdebt' */
 800cec6:	2300      	movs	r3, #0
 800cec8:	e00a      	b.n	800cee0 <luaM_realloc_+0x74>
  }
  lua_assert((nsize == 0) == (newblock == NULL));
  g->GCdebt = (g->GCdebt + nsize) - osize;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	461a      	mov	r2, r3
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	441a      	add	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	461a      	mov	r2, r3
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	60da      	str	r2, [r3, #12]
  return newblock;
 800cede:	697b      	ldr	r3, [r7, #20]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	371c      	adds	r7, #28
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd90      	pop	{r4, r7, pc}

0800cee8 <luaM_malloc_>:
    luaM_error(L);
  return newblock;
}


void *luaM_malloc_ (lua_State *L, size_t size, int tag) {
 800cee8:	b590      	push	{r4, r7, lr}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
  if (size == 0)
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <luaM_malloc_+0x16>
    return NULL;  /* that's all */
 800cefa:	2300      	movs	r3, #0
 800cefc:	e02a      	b.n	800cf54 <luaM_malloc_+0x6c>
  else {
    global_State *g = G(L);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	613b      	str	r3, [r7, #16]
    void *newblock = firsttry(g, NULL, tag, size);
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	681c      	ldr	r4, [r3, #0]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	6858      	ldr	r0, [r3, #4]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2100      	movs	r1, #0
 800cf12:	47a0      	blx	r4
 800cf14:	6178      	str	r0, [r7, #20]
    if (l_unlikely(newblock == NULL)) {
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	bf0c      	ite	eq
 800cf1c:	2301      	moveq	r3, #1
 800cf1e:	2300      	movne	r3, #0
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00d      	beq.n	800cf42 <luaM_malloc_+0x5a>
      newblock = tryagain(L, NULL, tag, size);
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f7ff ff74 	bl	800ce1a <tryagain>
 800cf32:	6178      	str	r0, [r7, #20]
      if (newblock == NULL)
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d103      	bne.n	800cf42 <luaM_malloc_+0x5a>
        luaM_error(L);
 800cf3a:	2104      	movs	r1, #4
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f7fc f9f1 	bl	8009324 <luaD_throw>
    }
    g->GCdebt += size;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	461a      	mov	r2, r3
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	60da      	str	r2, [r3, #12]
    return newblock;
 800cf52:	697b      	ldr	r3, [r7, #20]
  }
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	371c      	adds	r7, #28
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd90      	pop	{r4, r7, pc}

0800cf5c <luaO_ceillog2>:


/*
** Computes ceil(log2(x))
*/
int luaO_ceillog2 (unsigned int x) {
 800cf5c:	b480      	push	{r7}
 800cf5e:	b085      	sub	sp, #20
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
  };
  int l = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	60fb      	str	r3, [r7, #12]
  x--;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	607b      	str	r3, [r7, #4]
  while (x >= 256) { l += 8; x >>= 8; }
 800cf6e:	e005      	b.n	800cf7c <luaO_ceillog2+0x20>
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	3308      	adds	r3, #8
 800cf74:	60fb      	str	r3, [r7, #12]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	0a1b      	lsrs	r3, r3, #8
 800cf7a:	607b      	str	r3, [r7, #4]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2bff      	cmp	r3, #255	; 0xff
 800cf80:	d8f6      	bhi.n	800cf70 <luaO_ceillog2+0x14>
  return l + log_2[x];
 800cf82:	4a06      	ldr	r2, [pc, #24]	; (800cf9c <luaO_ceillog2+0x40>)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4413      	add	r3, r2
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	4413      	add	r3, r2
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3714      	adds	r7, #20
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	08022b30 	.word	0x08022b30

0800cfa0 <luaO_hexavalue>:
    luaT_trybinTM(L, p1, p2, res, cast(TMS, (op - LUA_OPADD) + TM_ADD));
  }
}


int luaO_hexavalue (int c) {
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  if (lisdigit(c)) return c - '0';
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	4a09      	ldr	r2, [pc, #36]	; (800cfd4 <luaO_hexavalue+0x34>)
 800cfae:	5cd3      	ldrb	r3, [r2, r3]
 800cfb0:	f003 0302 	and.w	r3, r3, #2
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <luaO_hexavalue+0x1e>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	3b30      	subs	r3, #48	; 0x30
 800cfbc:	e003      	b.n	800cfc6 <luaO_hexavalue+0x26>
  else return (ltolower(c) - 'a') + 10;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f043 0320 	orr.w	r3, r3, #32
 800cfc4:	3b57      	subs	r3, #87	; 0x57
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	08022990 	.word	0x08022990

0800cfd8 <isneg>:


static int isneg (const char **s) {
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  if (**s == '-') { (*s)++; return 1; }
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	2b2d      	cmp	r3, #45	; 0x2d
 800cfe8:	d106      	bne.n	800cff8 <isneg+0x20>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	1c5a      	adds	r2, r3, #1
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	2301      	movs	r3, #1
 800cff6:	e00a      	b.n	800d00e <isneg+0x36>
  else if (**s == '+') (*s)++;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	2b2b      	cmp	r3, #43	; 0x2b
 800d000:	d104      	bne.n	800d00c <isneg+0x34>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	1c5a      	adds	r2, r3, #1
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	601a      	str	r2, [r3, #0]
  return 0;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
	...

0800d01c <l_str2dloc>:
/*
** Convert string 's' to a Lua number (put in 'result'). Return NULL on
** fail or the address of the ending '\0' on success. ('mode' == 'x')
** means a hexadecimal numeral.
*/
static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
  char *endptr;
  *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
                          : lua_str2number(s, &endptr);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b78      	cmp	r3, #120	; 0x78
 800d02c:	d108      	bne.n	800d040 <l_str2dloc+0x24>
  *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
 800d02e:	f107 0314 	add.w	r3, r7, #20
 800d032:	4619      	mov	r1, r3
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f013 fa05 	bl	8020444 <strtof>
 800d03a:	eef0 7a40 	vmov.f32	s15, s0
 800d03e:	e007      	b.n	800d050 <l_str2dloc+0x34>
                          : lua_str2number(s, &endptr);
 800d040:	f107 0314 	add.w	r3, r7, #20
 800d044:	4619      	mov	r1, r3
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f013 f9fc 	bl	8020444 <strtof>
 800d04c:	eef0 7a40 	vmov.f32	s15, s0
  *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	edc3 7a00 	vstr	s15, [r3]
  if (endptr == s) return NULL;  /* nothing recognized? */
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d104      	bne.n	800d068 <l_str2dloc+0x4c>
 800d05e:	2300      	movs	r3, #0
 800d060:	e012      	b.n	800d088 <l_str2dloc+0x6c>
  while (lisspace(cast_uchar(*endptr))) endptr++;  /* skip trailing spaces */
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	3301      	adds	r3, #1
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	3301      	adds	r3, #1
 800d06e:	4a08      	ldr	r2, [pc, #32]	; (800d090 <l_str2dloc+0x74>)
 800d070:	5cd3      	ldrb	r3, [r2, r3]
 800d072:	f003 0308 	and.w	r3, r3, #8
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1f3      	bne.n	800d062 <l_str2dloc+0x46>
  return (*endptr == '\0') ? endptr : NULL;  /* OK iff no trailing chars */
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <l_str2dloc+0x6a>
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	e000      	b.n	800d088 <l_str2dloc+0x6c>
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	08022990 	.word	0x08022990

0800d094 <l_str2d>:
** The variable 'mode' checks for special characters in the string:
** - 'n' means 'inf' or 'nan' (which should be rejected)
** - 'x' means a hexadecimal numeral
** - '.' just optimizes the search for the common case (no special chars)
*/
static const char *l_str2d (const char *s, lua_Number *result) {
 800d094:	b580      	push	{r7, lr}
 800d096:	b0ba      	sub	sp, #232	; 0xe8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  const char *endptr;
  const char *pmode = strpbrk(s, ".xXnN");  /* look for special chars */
 800d09e:	4934      	ldr	r1, [pc, #208]	; (800d170 <l_str2d+0xdc>)
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f012 fb81 	bl	801f7a8 <strpbrk>
 800d0a6:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
  int mode = pmode ? ltolower(cast_uchar(*pmode)) : 0;
 800d0aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d006      	beq.n	800d0c0 <l_str2d+0x2c>
 800d0b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	f043 0320 	orr.w	r3, r3, #32
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	e000      	b.n	800d0c2 <l_str2d+0x2e>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (mode == 'n')  /* reject 'inf' and 'nan' */
 800d0c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0ca:	2b6e      	cmp	r3, #110	; 0x6e
 800d0cc:	d101      	bne.n	800d0d2 <l_str2d+0x3e>
    return NULL;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	e04a      	b.n	800d168 <l_str2d+0xd4>
  endptr = l_str2dloc(s, result, mode);  /* try to convert */
 800d0d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff ff9f 	bl	800d01c <l_str2dloc>
 800d0de:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  if (endptr == NULL) {  /* failed? may be a different locale */
 800d0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d13c      	bne.n	800d164 <l_str2d+0xd0>
    char buff[L_MAXLENNUM + 1];
    const char *pdot = strchr(s, '.');
 800d0ea:	212e      	movs	r1, #46	; 0x2e
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f012 fb30 	bl	801f752 <strchr>
 800d0f2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (pdot == NULL || strlen(s) > L_MAXLENNUM)
 800d0f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d005      	beq.n	800d10a <l_str2d+0x76>
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7f3 f8ce 	bl	80002a0 <strlen>
 800d104:	4603      	mov	r3, r0
 800d106:	2bc8      	cmp	r3, #200	; 0xc8
 800d108:	d901      	bls.n	800d10e <l_str2d+0x7a>
      return NULL;  /* string too long or no dot; fail */
 800d10a:	2300      	movs	r3, #0
 800d10c:	e02c      	b.n	800d168 <l_str2d+0xd4>
    strcpy(buff, s);  /* copy string to buffer */
 800d10e:	f107 030c 	add.w	r3, r7, #12
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	4618      	mov	r0, r3
 800d116:	f012 fb2b 	bl	801f770 <strcpy>
    buff[pdot - s] = lua_getlocaledecpoint();  /* correct decimal point */
 800d11a:	f011 fcf3 	bl	801eb04 <localeconv>
 800d11e:	4603      	mov	r3, r0
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	1acb      	subs	r3, r1, r3
 800d12a:	7812      	ldrb	r2, [r2, #0]
 800d12c:	33e8      	adds	r3, #232	; 0xe8
 800d12e:	443b      	add	r3, r7
 800d130:	f803 2cdc 	strb.w	r2, [r3, #-220]
    endptr = l_str2dloc(buff, result, mode);  /* try again */
 800d134:	f107 030c 	add.w	r3, r7, #12
 800d138:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff ff6c 	bl	800d01c <l_str2dloc>
 800d144:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
    if (endptr != NULL)
 800d148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d009      	beq.n	800d164 <l_str2d+0xd0>
      endptr = s + (endptr - buff);  /* make relative to 's' */
 800d150:	f107 030c 	add.w	r3, r7, #12
 800d154:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	461a      	mov	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4413      	add	r3, r2
 800d160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  }
  return endptr;
 800d164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
}
 800d168:	4618      	mov	r0, r3
 800d16a:	37e8      	adds	r7, #232	; 0xe8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	08022558 	.word	0x08022558

0800d174 <l_str2int>:


#define MAXBY10		cast(lua_Unsigned, LUA_MAXINTEGER / 10)
#define MAXLASTD	cast_int(LUA_MAXINTEGER % 10)

static const char *l_str2int (const char *s, lua_Integer *result) {
 800d174:	b590      	push	{r4, r7, lr}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  lua_Unsigned a = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	617b      	str	r3, [r7, #20]
  int empty = 1;
 800d182:	2301      	movs	r3, #1
 800d184:	613b      	str	r3, [r7, #16]
  int neg;
  while (lisspace(cast_uchar(*s))) s++;  /* skip initial spaces */
 800d186:	e002      	b.n	800d18e <l_str2int+0x1a>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3301      	adds	r3, #1
 800d18c:	607b      	str	r3, [r7, #4]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	3301      	adds	r3, #1
 800d194:	4a41      	ldr	r2, [pc, #260]	; (800d29c <l_str2int+0x128>)
 800d196:	5cd3      	ldrb	r3, [r2, r3]
 800d198:	f003 0308 	and.w	r3, r3, #8
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1f3      	bne.n	800d188 <l_str2int+0x14>
  neg = isneg(&s);
 800d1a0:	1d3b      	adds	r3, r7, #4
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff ff18 	bl	800cfd8 <isneg>
 800d1a8:	60f8      	str	r0, [r7, #12]
  if (s[0] == '0' &&
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	2b30      	cmp	r3, #48	; 0x30
 800d1b0:	d147      	bne.n	800d242 <l_str2int+0xce>
      (s[1] == 'x' || s[1] == 'X')) {  /* hex? */
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	781b      	ldrb	r3, [r3, #0]
  if (s[0] == '0' &&
 800d1b8:	2b78      	cmp	r3, #120	; 0x78
 800d1ba:	d004      	beq.n	800d1c6 <l_str2int+0x52>
      (s[1] == 'x' || s[1] == 'X')) {  /* hex? */
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b58      	cmp	r3, #88	; 0x58
 800d1c4:	d13d      	bne.n	800d242 <l_str2int+0xce>
    s += 2;  /* skip '0x' */
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	3302      	adds	r3, #2
 800d1ca:	607b      	str	r3, [r7, #4]
    for (; lisxdigit(cast_uchar(*s)); s++) {
 800d1cc:	e00e      	b.n	800d1ec <l_str2int+0x78>
      a = a * 16 + luaO_hexavalue(*s);
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	011c      	lsls	r4, r3, #4
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7ff fee2 	bl	800cfa0 <luaO_hexavalue>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	4423      	add	r3, r4
 800d1e0:	617b      	str	r3, [r7, #20]
      empty = 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	613b      	str	r3, [r7, #16]
    for (; lisxdigit(cast_uchar(*s)); s++) {
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	607b      	str	r3, [r7, #4]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	4a2a      	ldr	r2, [pc, #168]	; (800d29c <l_str2int+0x128>)
 800d1f4:	5cd3      	ldrb	r3, [r2, r3]
 800d1f6:	f003 0310 	and.w	r3, r3, #16
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1e7      	bne.n	800d1ce <l_str2int+0x5a>
  if (s[0] == '0' &&
 800d1fe:	e029      	b.n	800d254 <l_str2int+0xe0>
    }
  }
  else {  /* decimal */
    for (; lisdigit(cast_uchar(*s)); s++) {
      int d = *s - '0';
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	3b30      	subs	r3, #48	; 0x30
 800d206:	60bb      	str	r3, [r7, #8]
      if (a >= MAXBY10 && (a > MAXBY10 || d > MAXLASTD + neg))  /* overflow? */
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	4a25      	ldr	r2, [pc, #148]	; (800d2a0 <l_str2int+0x12c>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d30a      	bcc.n	800d226 <l_str2int+0xb2>
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	4a23      	ldr	r2, [pc, #140]	; (800d2a0 <l_str2int+0x12c>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d804      	bhi.n	800d222 <l_str2int+0xae>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3307      	adds	r3, #7
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	429a      	cmp	r2, r3
 800d220:	dd01      	ble.n	800d226 <l_str2int+0xb2>
        return NULL;  /* do not accept it (as integer) */
 800d222:	2300      	movs	r3, #0
 800d224:	e036      	b.n	800d294 <l_str2int+0x120>
      a = a * 10 + d;
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	4613      	mov	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	461a      	mov	r2, r3
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	4413      	add	r3, r2
 800d236:	617b      	str	r3, [r7, #20]
      empty = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	613b      	str	r3, [r7, #16]
    for (; lisdigit(cast_uchar(*s)); s++) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3301      	adds	r3, #1
 800d240:	607b      	str	r3, [r7, #4]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	3301      	adds	r3, #1
 800d248:	4a14      	ldr	r2, [pc, #80]	; (800d29c <l_str2int+0x128>)
 800d24a:	5cd3      	ldrb	r3, [r2, r3]
 800d24c:	f003 0302 	and.w	r3, r3, #2
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1d5      	bne.n	800d200 <l_str2int+0x8c>
    }
  }
  while (lisspace(cast_uchar(*s))) s++;  /* skip trailing spaces */
 800d254:	e002      	b.n	800d25c <l_str2int+0xe8>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	3301      	adds	r3, #1
 800d25a:	607b      	str	r3, [r7, #4]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	3301      	adds	r3, #1
 800d262:	4a0e      	ldr	r2, [pc, #56]	; (800d29c <l_str2int+0x128>)
 800d264:	5cd3      	ldrb	r3, [r2, r3]
 800d266:	f003 0308 	and.w	r3, r3, #8
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1f3      	bne.n	800d256 <l_str2int+0xe2>
  if (empty || *s != '\0') return NULL;  /* something wrong in the numeral */
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <l_str2int+0x108>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <l_str2int+0x10c>
 800d27c:	2300      	movs	r3, #0
 800d27e:	e009      	b.n	800d294 <l_str2int+0x120>
  else {
    *result = l_castU2S((neg) ? 0u - a : a);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <l_str2int+0x118>
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	425b      	negs	r3, r3
 800d28a:	e000      	b.n	800d28e <l_str2int+0x11a>
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	683a      	ldr	r2, [r7, #0]
 800d290:	6013      	str	r3, [r2, #0]
    return s;
 800d292:	687b      	ldr	r3, [r7, #4]
  }
}
 800d294:	4618      	mov	r0, r3
 800d296:	371c      	adds	r7, #28
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd90      	pop	{r4, r7, pc}
 800d29c:	08022990 	.word	0x08022990
 800d2a0:	0ccccccc 	.word	0x0ccccccc

0800d2a4 <luaO_str2num>:


size_t luaO_str2num (const char *s, TValue *o) {
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b088      	sub	sp, #32
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  lua_Integer i; lua_Number n;
  const char *e;
  if ((e = l_str2int(s, &i)) != NULL) {  /* try as an integer */
 800d2ae:	f107 0310 	add.w	r3, r7, #16
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7ff ff5d 	bl	800d174 <l_str2int>
 800d2ba:	61f8      	str	r0, [r7, #28]
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d008      	beq.n	800d2d4 <luaO_str2num+0x30>
    setivalue(o, i);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	617b      	str	r3, [r7, #20]
 800d2c6:	693a      	ldr	r2, [r7, #16]
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	2203      	movs	r2, #3
 800d2d0:	711a      	strb	r2, [r3, #4]
 800d2d2:	e014      	b.n	800d2fe <luaO_str2num+0x5a>
  }
  else if ((e = l_str2d(s, &n)) != NULL) {  /* else try as a float */
 800d2d4:	f107 030c 	add.w	r3, r7, #12
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff feda 	bl	800d094 <l_str2d>
 800d2e0:	61f8      	str	r0, [r7, #28]
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d008      	beq.n	800d2fa <luaO_str2num+0x56>
    setfltvalue(o, n);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	61bb      	str	r3, [r7, #24]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	601a      	str	r2, [r3, #0]
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	2213      	movs	r2, #19
 800d2f6:	711a      	strb	r2, [r3, #4]
 800d2f8:	e001      	b.n	800d2fe <luaO_str2num+0x5a>
  }
  else
    return 0;  /* conversion failed */
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e003      	b.n	800d306 <luaO_str2num+0x62>
  return (e - s) + 1;  /* success; return string size */
 800d2fe:	69fa      	ldr	r2, [r7, #28]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	3301      	adds	r3, #1
}
 800d306:	4618      	mov	r0, r3
 800d308:	3720      	adds	r7, #32
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <luaO_utf8esc>:


int luaO_utf8esc (char *buff, unsigned long x) {
 800d30e:	b480      	push	{r7}
 800d310:	b085      	sub	sp, #20
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	6039      	str	r1, [r7, #0]
  int n = 1;  /* number of bytes put in buffer (backwards) */
 800d318:	2301      	movs	r3, #1
 800d31a:	60fb      	str	r3, [r7, #12]
  lua_assert(x <= 0x7FFFFFFFu);
  if (x < 0x80)  /* ascii? */
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2b7f      	cmp	r3, #127	; 0x7f
 800d320:	d805      	bhi.n	800d32e <luaO_utf8esc+0x20>
    buff[UTF8BUFFSZ - 1] = cast_char(x);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	3307      	adds	r3, #7
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	b2d2      	uxtb	r2, r2
 800d32a:	701a      	strb	r2, [r3, #0]
 800d32c:	e02d      	b.n	800d38a <luaO_utf8esc+0x7c>
  else {  /* need continuation bytes */
    unsigned int mfb = 0x3f;  /* maximum that fits in first byte */
 800d32e:	233f      	movs	r3, #63	; 0x3f
 800d330:	60bb      	str	r3, [r7, #8]
    do {  /* add continuation bytes */
      buff[UTF8BUFFSZ - (n++)] = cast_char(0x80 | (x & 0x3f));
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	b2db      	uxtb	r3, r3
 800d336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	1c59      	adds	r1, r3, #1
 800d340:	60f9      	str	r1, [r7, #12]
 800d342:	f1c3 0308 	rsb	r3, r3, #8
 800d346:	4619      	mov	r1, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	440b      	add	r3, r1
 800d34c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d350:	b2d2      	uxtb	r2, r2
 800d352:	701a      	strb	r2, [r3, #0]
      x >>= 6;  /* remove added bits */
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	099b      	lsrs	r3, r3, #6
 800d358:	603b      	str	r3, [r7, #0]
      mfb >>= 1;  /* now there is one less bit available in first byte */
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	085b      	lsrs	r3, r3, #1
 800d35e:	60bb      	str	r3, [r7, #8]
    } while (x > mfb);  /* still needs continuation byte? */
 800d360:	683a      	ldr	r2, [r7, #0]
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	429a      	cmp	r2, r3
 800d366:	d8e4      	bhi.n	800d332 <luaO_utf8esc+0x24>
    buff[UTF8BUFFSZ - n] = cast_char((~mfb << 1) | x);  /* add first byte */
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	43db      	mvns	r3, r3
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	b2d9      	uxtb	r1, r3
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	b2da      	uxtb	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f1c3 0308 	rsb	r3, r3, #8
 800d37e:	4618      	mov	r0, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4403      	add	r3, r0
 800d384:	430a      	orrs	r2, r1
 800d386:	b2d2      	uxtb	r2, r2
 800d388:	701a      	strb	r2, [r3, #0]
  }
  return n;
 800d38a:	68fb      	ldr	r3, [r7, #12]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <tostringbuff>:


/*
** Convert a number object to a string, adding it to a buffer
*/
static int tostringbuff (TValue *obj, char *buff) {
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af02      	add	r7, sp, #8
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  int len;
  lua_assert(ttisnumber(obj));
  if (ttisinteger(obj))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	791b      	ldrb	r3, [r3, #4]
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d108      	bne.n	800d3bc <tostringbuff+0x24>
    len = lua_integer2str(buff, MAXNUMBER2STR, ivalue(obj));
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a1c      	ldr	r2, [pc, #112]	; (800d420 <tostringbuff+0x88>)
 800d3b0:	212c      	movs	r1, #44	; 0x2c
 800d3b2:	6838      	ldr	r0, [r7, #0]
 800d3b4:	f012 f956 	bl	801f664 <sniprintf>
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	e02c      	b.n	800d416 <tostringbuff+0x7e>
  else {
    len = lua_number2str(buff, MAXNUMBER2STR, fltvalue(obj));
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f3 f8d9 	bl	8000578 <__aeabi_f2d>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	e9cd 2300 	strd	r2, r3, [sp]
 800d3ce:	4a15      	ldr	r2, [pc, #84]	; (800d424 <tostringbuff+0x8c>)
 800d3d0:	212c      	movs	r1, #44	; 0x2c
 800d3d2:	6838      	ldr	r0, [r7, #0]
 800d3d4:	f012 f946 	bl	801f664 <sniprintf>
 800d3d8:	60f8      	str	r0, [r7, #12]
    if (buff[strspn(buff, "-0123456789")] == '\0') {  /* looks like an int? */
 800d3da:	4913      	ldr	r1, [pc, #76]	; (800d428 <tostringbuff+0x90>)
 800d3dc:	6838      	ldr	r0, [r7, #0]
 800d3de:	f012 f9fd 	bl	801f7dc <strspn>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d113      	bne.n	800d416 <tostringbuff+0x7e>
      buff[len++] = lua_getlocaledecpoint();
 800d3ee:	f011 fb89 	bl	801eb04 <localeconv>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	1c59      	adds	r1, r3, #1
 800d3fa:	60f9      	str	r1, [r7, #12]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	440b      	add	r3, r1
 800d402:	7812      	ldrb	r2, [r2, #0]
 800d404:	701a      	strb	r2, [r3, #0]
      buff[len++] = '0';  /* adds '.0' to result */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	60fa      	str	r2, [r7, #12]
 800d40c:	461a      	mov	r2, r3
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	4413      	add	r3, r2
 800d412:	2230      	movs	r2, #48	; 0x30
 800d414:	701a      	strb	r2, [r3, #0]
    }
  }
  return len;
 800d416:	68fb      	ldr	r3, [r7, #12]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	08022560 	.word	0x08022560
 800d424:	08022564 	.word	0x08022564
 800d428:	0802256c 	.word	0x0802256c

0800d42c <luaO_tostring>:


/*
** Convert a number object to a Lua string, replacing the value at 'obj'
*/
void luaO_tostring (lua_State *L, TValue *obj) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b090      	sub	sp, #64	; 0x40
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  char buff[MAXNUMBER2STR];
  int len = tostringbuff(obj, buff);
 800d436:	f107 0308 	add.w	r3, r7, #8
 800d43a:	4619      	mov	r1, r3
 800d43c:	6838      	ldr	r0, [r7, #0]
 800d43e:	f7ff ffab 	bl	800d398 <tostringbuff>
 800d442:	63f8      	str	r0, [r7, #60]	; 0x3c
  setsvalue(L, obj, luaS_newlstr(L, buff, len));
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	63bb      	str	r3, [r7, #56]	; 0x38
 800d448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d44a:	f107 0308 	add.w	r3, r7, #8
 800d44e:	4619      	mov	r1, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 f9f5 	bl	800e840 <luaS_newlstr>
 800d456:	6378      	str	r0, [r7, #52]	; 0x34
 800d458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d460:	791b      	ldrb	r3, [r3, #4]
 800d462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d466:	b2da      	uxtb	r2, r3
 800d468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46a:	711a      	strb	r2, [r3, #4]
}
 800d46c:	bf00      	nop
 800d46e:	3740      	adds	r7, #64	; 0x40
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <pushstr>:

/*
** Push given string to the stack, as part of the buffer, and
** join the partial strings in the stack into one.
*/
static void pushstr (BuffFS *buff, const char *str, size_t l) {
 800d474:	b580      	push	{r7, lr}
 800d476:	b088      	sub	sp, #32
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
  lua_State *L = buff->L;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	61fb      	str	r3, [r7, #28]
  setsvalue2s(L, L->top, luaS_newlstr(L, str, l));
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	61bb      	str	r3, [r7, #24]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	68b9      	ldr	r1, [r7, #8]
 800d490:	69f8      	ldr	r0, [r7, #28]
 800d492:	f001 f9d5 	bl	800e840 <luaS_newlstr>
 800d496:	6178      	str	r0, [r7, #20]
 800d498:	697a      	ldr	r2, [r7, #20]
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	601a      	str	r2, [r3, #0]
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	791b      	ldrb	r3, [r3, #4]
 800d4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	711a      	strb	r2, [r3, #4]
  L->top++;  /* may use one extra slot */
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	f103 0208 	add.w	r2, r3, #8
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	60da      	str	r2, [r3, #12]
  buff->pushed++;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	1c5a      	adds	r2, r3, #1
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	605a      	str	r2, [r3, #4]
  luaV_concat(L, buff->pushed);  /* join partial results into one */
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	69f8      	ldr	r0, [r7, #28]
 800d4ca:	f004 f977 	bl	80117bc <luaV_concat>
  buff->pushed = 1;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	605a      	str	r2, [r3, #4]
}
 800d4d4:	bf00      	nop
 800d4d6:	3720      	adds	r7, #32
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <clearbuff>:


/*
** empty the buffer space into the stack
*/
static void clearbuff (BuffFS *buff) {
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  pushstr(buff, buff->space, buff->blen);  /* push buffer contents */
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f103 010c 	add.w	r1, r3, #12
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff ffbf 	bl	800d474 <pushstr>
  buff->blen = 0;  /* space now is empty */
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	609a      	str	r2, [r3, #8]
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <getbuff>:

/*
** Get a space of size 'sz' in the buffer. If buffer has not enough
** space, empty it. 'sz' must fit in an empty buffer.
*/
static char *getbuff (BuffFS *buff, int sz) {
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  lua_assert(buff->blen <= BUFVFS); lua_assert(sz <= BUFVFS);
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800d516:	683a      	ldr	r2, [r7, #0]
 800d518:	429a      	cmp	r2, r3
 800d51a:	dd02      	ble.n	800d522 <getbuff+0x1e>
    clearbuff(buff);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7ff ffdd 	bl	800d4dc <clearbuff>
  return buff->space + buff->blen;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	330c      	adds	r3, #12
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	6892      	ldr	r2, [r2, #8]
 800d52a:	4413      	add	r3, r2
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <addstr2buff>:

/*
** Add 'str' to the buffer. If string is larger than the buffer space,
** push the string directly to the stack.
*/
static void addstr2buff (BuffFS *buff, const char *str, size_t slen) {
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
  if (slen <= BUFVFS) {  /* does string fit into buffer? */
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2bc8      	cmp	r3, #200	; 0xc8
 800d544:	d811      	bhi.n	800d56a <addstr2buff+0x36>
    char *bf = getbuff(buff, cast_int(slen));
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4619      	mov	r1, r3
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff ffda 	bl	800d504 <getbuff>
 800d550:	6178      	str	r0, [r7, #20]
    memcpy(bf, str, slen);  /* add string to buffer */
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	68b9      	ldr	r1, [r7, #8]
 800d556:	6978      	ldr	r0, [r7, #20]
 800d558:	f011 fb6a 	bl	801ec30 <memcpy>
    addsize(buff, cast_int(slen));
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	689a      	ldr	r2, [r3, #8]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	441a      	add	r2, r3
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	609a      	str	r2, [r3, #8]
  }
  else {  /* string larger than buffer */
    clearbuff(buff);  /* string comes after buffer's content */
    pushstr(buff, str, slen);  /* push string */
  }
}
 800d568:	e007      	b.n	800d57a <addstr2buff+0x46>
    clearbuff(buff);  /* string comes after buffer's content */
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f7ff ffb6 	bl	800d4dc <clearbuff>
    pushstr(buff, str, slen);  /* push string */
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	68b9      	ldr	r1, [r7, #8]
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff ff7d 	bl	800d474 <pushstr>
}
 800d57a:	bf00      	nop
 800d57c:	3718      	adds	r7, #24
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <addnum2buff>:


/*
** Add a number to the buffer.
*/
static void addnum2buff (BuffFS *buff, TValue *num) {
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  char *numbuff = getbuff(buff, MAXNUMBER2STR);
 800d58c:	212c      	movs	r1, #44	; 0x2c
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff ffb8 	bl	800d504 <getbuff>
 800d594:	60f8      	str	r0, [r7, #12]
  int len = tostringbuff(num, numbuff);  /* format number into 'numbuff' */
 800d596:	68f9      	ldr	r1, [r7, #12]
 800d598:	6838      	ldr	r0, [r7, #0]
 800d59a:	f7ff fefd 	bl	800d398 <tostringbuff>
 800d59e:	60b8      	str	r0, [r7, #8]
  addsize(buff, len);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	689a      	ldr	r2, [r3, #8]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	441a      	add	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	609a      	str	r2, [r3, #8]
}
 800d5ac:	bf00      	nop
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <luaO_pushvfstring>:

/*
** this function handles only '%d', '%c', '%f', '%p', '%s', and '%%'
   conventional formats, plus Lua-specific '%I' and '%U'
*/
const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b0cc      	sub	sp, #304	; 0x130
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d5c2:	6018      	str	r0, [r3, #0]
 800d5c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d5cc:	6019      	str	r1, [r3, #0]
 800d5ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d5d6:	601a      	str	r2, [r3, #0]
  BuffFS buff;  /* holds last part of the result */
  const char *e;  /* points to next '%' */
  buff.pushed = buff.blen = 0;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5de:	63bb      	str	r3, [r7, #56]	; 0x38
  buff.L = L;
 800d5e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	637b      	str	r3, [r7, #52]	; 0x34
  while ((e = strchr(fmt, '%')) != NULL) {
 800d5ec:	e18e      	b.n	800d90c <luaO_pushvfstring+0x358>
    addstr2buff(&buff, fmt, e - fmt);  /* add 'fmt' up to '%' */
 800d5ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d5f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	461a      	mov	r2, r3
 800d600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d604:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d608:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d60c:	6819      	ldr	r1, [r3, #0]
 800d60e:	f7ff ff91 	bl	800d534 <addstr2buff>
    switch (*(e + 1)) {  /* conversion specifier */
 800d612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d616:	3301      	adds	r3, #1
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	2b25      	cmp	r3, #37	; 0x25
 800d61c:	f000 8159 	beq.w	800d8d2 <luaO_pushvfstring+0x31e>
 800d620:	2b25      	cmp	r3, #37	; 0x25
 800d622:	f2c0 815e 	blt.w	800d8e2 <luaO_pushvfstring+0x32e>
 800d626:	2b73      	cmp	r3, #115	; 0x73
 800d628:	f300 815b 	bgt.w	800d8e2 <luaO_pushvfstring+0x32e>
 800d62c:	2b49      	cmp	r3, #73	; 0x49
 800d62e:	f2c0 8158 	blt.w	800d8e2 <luaO_pushvfstring+0x32e>
 800d632:	3b49      	subs	r3, #73	; 0x49
 800d634:	2b2a      	cmp	r3, #42	; 0x2a
 800d636:	f200 8154 	bhi.w	800d8e2 <luaO_pushvfstring+0x32e>
 800d63a:	a201      	add	r2, pc, #4	; (adr r2, 800d640 <luaO_pushvfstring+0x8c>)
 800d63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d640:	0800d7a1 	.word	0x0800d7a1
 800d644:	0800d8e3 	.word	0x0800d8e3
 800d648:	0800d8e3 	.word	0x0800d8e3
 800d64c:	0800d8e3 	.word	0x0800d8e3
 800d650:	0800d8e3 	.word	0x0800d8e3
 800d654:	0800d8e3 	.word	0x0800d8e3
 800d658:	0800d8e3 	.word	0x0800d8e3
 800d65c:	0800d8e3 	.word	0x0800d8e3
 800d660:	0800d8e3 	.word	0x0800d8e3
 800d664:	0800d8e3 	.word	0x0800d8e3
 800d668:	0800d8e3 	.word	0x0800d8e3
 800d66c:	0800d8e3 	.word	0x0800d8e3
 800d670:	0800d88b 	.word	0x0800d88b
 800d674:	0800d8e3 	.word	0x0800d8e3
 800d678:	0800d8e3 	.word	0x0800d8e3
 800d67c:	0800d8e3 	.word	0x0800d8e3
 800d680:	0800d8e3 	.word	0x0800d8e3
 800d684:	0800d8e3 	.word	0x0800d8e3
 800d688:	0800d8e3 	.word	0x0800d8e3
 800d68c:	0800d8e3 	.word	0x0800d8e3
 800d690:	0800d8e3 	.word	0x0800d8e3
 800d694:	0800d8e3 	.word	0x0800d8e3
 800d698:	0800d8e3 	.word	0x0800d8e3
 800d69c:	0800d8e3 	.word	0x0800d8e3
 800d6a0:	0800d8e3 	.word	0x0800d8e3
 800d6a4:	0800d8e3 	.word	0x0800d8e3
 800d6a8:	0800d731 	.word	0x0800d731
 800d6ac:	0800d761 	.word	0x0800d761
 800d6b0:	0800d8e3 	.word	0x0800d8e3
 800d6b4:	0800d7e1 	.word	0x0800d7e1
 800d6b8:	0800d8e3 	.word	0x0800d8e3
 800d6bc:	0800d8e3 	.word	0x0800d8e3
 800d6c0:	0800d8e3 	.word	0x0800d8e3
 800d6c4:	0800d8e3 	.word	0x0800d8e3
 800d6c8:	0800d8e3 	.word	0x0800d8e3
 800d6cc:	0800d8e3 	.word	0x0800d8e3
 800d6d0:	0800d8e3 	.word	0x0800d8e3
 800d6d4:	0800d8e3 	.word	0x0800d8e3
 800d6d8:	0800d8e3 	.word	0x0800d8e3
 800d6dc:	0800d835 	.word	0x0800d835
 800d6e0:	0800d8e3 	.word	0x0800d8e3
 800d6e4:	0800d8e3 	.word	0x0800d8e3
 800d6e8:	0800d6ed 	.word	0x0800d6ed
      case 's': {  /* zero-terminated string */
        const char *s = va_arg(argp, char *);
 800d6ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	1d19      	adds	r1, r3, #4
 800d6f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d6fc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d700:	6011      	str	r1, [r2, #0]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        if (s == NULL) s = "(null)";
 800d708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <luaO_pushvfstring+0x162>
 800d710:	4b98      	ldr	r3, [pc, #608]	; (800d974 <luaO_pushvfstring+0x3c0>)
 800d712:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        addstr2buff(&buff, s, strlen(s));
 800d716:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800d71a:	f7f2 fdc1 	bl	80002a0 <strlen>
 800d71e:	4602      	mov	r2, r0
 800d720:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d724:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff ff03 	bl	800d534 <addstr2buff>
        break;
 800d72e:	e0e5      	b.n	800d8fc <luaO_pushvfstring+0x348>
      }
      case 'c': {  /* an 'int' as a character */
        char c = cast_uchar(va_arg(argp, int));
 800d730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	1d19      	adds	r1, r3, #4
 800d73c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d740:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d744:	6011      	str	r1, [r2, #0]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        addstr2buff(&buff, &c, sizeof(char));
 800d74e:	f107 0133 	add.w	r1, r7, #51	; 0x33
 800d752:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d756:	2201      	movs	r2, #1
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff feeb 	bl	800d534 <addstr2buff>
        break;
 800d75e:	e0cd      	b.n	800d8fc <luaO_pushvfstring+0x348>
      }
      case 'd': {  /* an 'int' */
        TValue num;
        setivalue(&num, va_arg(argp, int));
 800d760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d764:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d76c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	1d19      	adds	r1, r3, #4
 800d774:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d778:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d77c:	6011      	str	r1, [r2, #0]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d78a:	2203      	movs	r2, #3
 800d78c:	711a      	strb	r2, [r3, #4]
        addnum2buff(&buff, &num);
 800d78e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d792:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d796:	4611      	mov	r1, r2
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff fef2 	bl	800d582 <addnum2buff>
        break;
 800d79e:	e0ad      	b.n	800d8fc <luaO_pushvfstring+0x348>
      }
      case 'I': {  /* a 'lua_Integer' */
        TValue num;
        setivalue(&num, cast(lua_Integer, va_arg(argp, l_uacInt)));
 800d7a0:	f107 0320 	add.w	r3, r7, #32
 800d7a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d7a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	1d19      	adds	r1, r3, #4
 800d7b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d7b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d7bc:	6011      	str	r1, [r2, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d7ca:	2203      	movs	r2, #3
 800d7cc:	711a      	strb	r2, [r3, #4]
        addnum2buff(&buff, &num);
 800d7ce:	f107 0220 	add.w	r2, r7, #32
 800d7d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff fed2 	bl	800d582 <addnum2buff>
        break;
 800d7de:	e08d      	b.n	800d8fc <luaO_pushvfstring+0x348>
      }
      case 'f': {  /* a 'lua_Number' */
        TValue num;
        setfltvalue(&num, cast_num(va_arg(argp, l_uacNumber)));
 800d7e0:	f107 0318 	add.w	r3, r7, #24
 800d7e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d7e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3307      	adds	r3, #7
 800d7f4:	f023 0307 	bic.w	r3, r3, #7
 800d7f8:	f103 0108 	add.w	r1, r3, #8
 800d7fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d800:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d804:	6011      	str	r1, [r2, #0]
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	4610      	mov	r0, r2
 800d80c:	4619      	mov	r1, r3
 800d80e:	f7f3 f9db 	bl	8000bc8 <__aeabi_d2f>
 800d812:	4602      	mov	r2, r0
 800d814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d818:	601a      	str	r2, [r3, #0]
 800d81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d81e:	2213      	movs	r2, #19
 800d820:	711a      	strb	r2, [r3, #4]
        addnum2buff(&buff, &num);
 800d822:	f107 0218 	add.w	r2, r7, #24
 800d826:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d82a:	4611      	mov	r1, r2
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff fea8 	bl	800d582 <addnum2buff>
        break;
 800d832:	e063      	b.n	800d8fc <luaO_pushvfstring+0x348>
      }
      case 'p': {  /* a pointer */
        const int sz = 3 * sizeof(void*) + 8; /* enough space for '%p' */
 800d834:	2314      	movs	r3, #20
 800d836:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        char *bf = getbuff(&buff, sz);
 800d83a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d83e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800d842:	4618      	mov	r0, r3
 800d844:	f7ff fe5e 	bl	800d504 <getbuff>
 800d848:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
        void *p = va_arg(argp, void *);
 800d84c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	1d19      	adds	r1, r3, #4
 800d858:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d85c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d860:	6011      	str	r1, [r2, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        int len = lua_pointer2str(bf, sz, p);
 800d868:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800d86c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d870:	4a41      	ldr	r2, [pc, #260]	; (800d978 <luaO_pushvfstring+0x3c4>)
 800d872:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800d876:	f011 fef5 	bl	801f664 <sniprintf>
 800d87a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
        addsize(&buff, len);
 800d87e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d880:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d884:	4413      	add	r3, r2
 800d886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d888:	e038      	b.n	800d8fc <luaO_pushvfstring+0x348>
      }
      case 'U': {  /* a 'long' as a UTF-8 sequence */
        char bf[UTF8BUFFSZ];
        int len = luaO_utf8esc(bf, va_arg(argp, long));
 800d88a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d88e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	1d19      	adds	r1, r3, #4
 800d896:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d89a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d89e:	6011      	str	r1, [r2, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	f107 0310 	add.w	r3, r7, #16
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7ff fd2f 	bl	800d30e <luaO_utf8esc>
 800d8b0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        addstr2buff(&buff, bf + UTF8BUFFSZ - len, len);
 800d8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8b8:	f1c3 0308 	rsb	r3, r3, #8
 800d8bc:	f107 0210 	add.w	r2, r7, #16
 800d8c0:	18d1      	adds	r1, r2, r3
 800d8c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800d8c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff fe32 	bl	800d534 <addstr2buff>
        break;
 800d8d0:	e014      	b.n	800d8fc <luaO_pushvfstring+0x348>
      }
      case '%': {
        addstr2buff(&buff, "%", 1);
 800d8d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	4928      	ldr	r1, [pc, #160]	; (800d97c <luaO_pushvfstring+0x3c8>)
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff fe2a 	bl	800d534 <addstr2buff>
        break;
 800d8e0:	e00c      	b.n	800d8fc <luaO_pushvfstring+0x348>
      }
      default: {
        luaG_runerror(L, "invalid option '%%%c' to 'lua_pushfstring'",
                         *(e + 1));
 800d8e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	781b      	ldrb	r3, [r3, #0]
        luaG_runerror(L, "invalid option '%%%c' to 'lua_pushfstring'",
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d8f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d8f4:	4922      	ldr	r1, [pc, #136]	; (800d980 <luaO_pushvfstring+0x3cc>)
 800d8f6:	6818      	ldr	r0, [r3, #0]
 800d8f8:	f7fb fb79 	bl	8008fee <luaG_runerror>
      }
    }
    fmt = e + 2;  /* skip '%' and the specifier */
 800d8fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d900:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d904:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d908:	3202      	adds	r2, #2
 800d90a:	601a      	str	r2, [r3, #0]
  while ((e = strchr(fmt, '%')) != NULL) {
 800d90c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d910:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d914:	2125      	movs	r1, #37	; 0x25
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	f011 ff1b 	bl	801f752 <strchr>
 800d91c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 800d920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d924:	2b00      	cmp	r3, #0
 800d926:	f47f ae62 	bne.w	800d5ee <luaO_pushvfstring+0x3a>
  }
  addstr2buff(&buff, fmt, strlen(fmt));  /* rest of 'fmt' */
 800d92a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d92e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d932:	6818      	ldr	r0, [r3, #0]
 800d934:	f7f2 fcb4 	bl	80002a0 <strlen>
 800d938:	4602      	mov	r2, r0
 800d93a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d93e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d942:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d946:	6819      	ldr	r1, [r3, #0]
 800d948:	f7ff fdf4 	bl	800d534 <addstr2buff>
  clearbuff(&buff);  /* empty buffer into the stack */
 800d94c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d950:	4618      	mov	r0, r3
 800d952:	f7ff fdc3 	bl	800d4dc <clearbuff>
  lua_assert(buff.pushed == 1);
  return svalue(s2v(L->top - 1));
 800d956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d95a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	3b08      	subs	r3, #8
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	3310      	adds	r3, #16
}
 800d968:	4618      	mov	r0, r3
 800d96a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	08022578 	.word	0x08022578
 800d978:	08022580 	.word	0x08022580
 800d97c:	08022584 	.word	0x08022584
 800d980:	08022588 	.word	0x08022588

0800d984 <luaO_pushfstring>:


const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {
 800d984:	b40e      	push	{r1, r2, r3}
 800d986:	b580      	push	{r7, lr}
 800d988:	b085      	sub	sp, #20
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  const char *msg;
  va_list argp;
  va_start(argp, fmt);
 800d98e:	f107 0320 	add.w	r3, r7, #32
 800d992:	60bb      	str	r3, [r7, #8]
  msg = luaO_pushvfstring(L, fmt, argp);
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	69f9      	ldr	r1, [r7, #28]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7ff fe0b 	bl	800d5b4 <luaO_pushvfstring>
 800d99e:	60f8      	str	r0, [r7, #12]
  va_end(argp);
  return msg;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3714      	adds	r7, #20
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9ac:	b003      	add	sp, #12
 800d9ae:	4770      	bx	lr

0800d9b0 <luaO_chunkid>:
#define PRE	"[string \""
#define POS	"\"]"

#define addstr(a,b,l)	( memcpy(a,b,(l) * sizeof(char)), a += (l) )

void luaO_chunkid (char *out, const char *source, size_t srclen) {
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
  size_t bufflen = LUA_IDSIZE;  /* free space in buffer */
 800d9bc:	233c      	movs	r3, #60	; 0x3c
 800d9be:	617b      	str	r3, [r7, #20]
  if (*source == '=') {  /* 'literal' source */
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b3d      	cmp	r3, #61	; 0x3d
 800d9c6:	d11c      	bne.n	800da02 <luaO_chunkid+0x52>
    if (srclen <= bufflen)  /* small enough? */
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d807      	bhi.n	800d9e0 <luaO_chunkid+0x30>
      memcpy(out, source + 1, srclen * sizeof(char));
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f011 f929 	bl	801ec30 <memcpy>
      addstr(out, source, srclen);
      addstr(out, RETS, LL(RETS));
    }
    memcpy(out, POS, (LL(POS) + 1) * sizeof(char));
  }
}
 800d9de:	e07b      	b.n	800dad8 <luaO_chunkid+0x128>
      addstr(out, source + 1, bufflen - 1);
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	1c59      	adds	r1, r3, #1
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f011 f920 	bl	801ec30 <memcpy>
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	60fb      	str	r3, [r7, #12]
      *out = '\0';
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	701a      	strb	r2, [r3, #0]
}
 800da00:	e06a      	b.n	800dad8 <luaO_chunkid+0x128>
  else if (*source == '@') {  /* file name */
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b40      	cmp	r3, #64	; 0x40
 800da08:	d122      	bne.n	800da50 <luaO_chunkid+0xa0>
    if (srclen <= bufflen)  /* small enough? */
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d807      	bhi.n	800da22 <luaO_chunkid+0x72>
      memcpy(out, source + 1, srclen * sizeof(char));
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	3301      	adds	r3, #1
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	4619      	mov	r1, r3
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f011 f908 	bl	801ec30 <memcpy>
}
 800da20:	e05a      	b.n	800dad8 <luaO_chunkid+0x128>
      addstr(out, RETS, LL(RETS));
 800da22:	2203      	movs	r2, #3
 800da24:	492e      	ldr	r1, [pc, #184]	; (800dae0 <luaO_chunkid+0x130>)
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f011 f902 	bl	801ec30 <memcpy>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3303      	adds	r3, #3
 800da30:	60fb      	str	r3, [r7, #12]
      bufflen -= LL(RETS);
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	3b03      	subs	r3, #3
 800da36:	617b      	str	r3, [r7, #20]
      memcpy(out, source + 1 + srclen - bufflen, bufflen * sizeof(char));
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	3301      	adds	r3, #1
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	4413      	add	r3, r2
 800da44:	697a      	ldr	r2, [r7, #20]
 800da46:	4619      	mov	r1, r3
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f011 f8f1 	bl	801ec30 <memcpy>
}
 800da4e:	e043      	b.n	800dad8 <luaO_chunkid+0x128>
    const char *nl = strchr(source, '\n');  /* find first new line (if any) */
 800da50:	210a      	movs	r1, #10
 800da52:	68b8      	ldr	r0, [r7, #8]
 800da54:	f011 fe7d 	bl	801f752 <strchr>
 800da58:	6138      	str	r0, [r7, #16]
    addstr(out, PRE, LL(PRE));  /* add prefix */
 800da5a:	2209      	movs	r2, #9
 800da5c:	4921      	ldr	r1, [pc, #132]	; (800dae4 <luaO_chunkid+0x134>)
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f011 f8e6 	bl	801ec30 <memcpy>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3309      	adds	r3, #9
 800da68:	60fb      	str	r3, [r7, #12]
    bufflen -= LL(PRE RETS POS) + 1;  /* save space for prefix+suffix+'\0' */
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	3b0f      	subs	r3, #15
 800da6e:	617b      	str	r3, [r7, #20]
    if (srclen < bufflen && nl == NULL) {  /* small one-line source? */
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	429a      	cmp	r2, r3
 800da76:	d20c      	bcs.n	800da92 <luaO_chunkid+0xe2>
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d109      	bne.n	800da92 <luaO_chunkid+0xe2>
      addstr(out, source, srclen);  /* keep it */
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	68b9      	ldr	r1, [r7, #8]
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f011 f8d4 	bl	801ec30 <memcpy>
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4413      	add	r3, r2
 800da8e:	60fb      	str	r3, [r7, #12]
 800da90:	e01d      	b.n	800dace <luaO_chunkid+0x11e>
      if (nl != NULL) srclen = nl - source;  /* stop at first newline */
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d003      	beq.n	800daa0 <luaO_chunkid+0xf0>
 800da98:	693a      	ldr	r2, [r7, #16]
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	607b      	str	r3, [r7, #4]
      if (srclen > bufflen) srclen = bufflen;
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d901      	bls.n	800daac <luaO_chunkid+0xfc>
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	607b      	str	r3, [r7, #4]
      addstr(out, source, srclen);
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	68b9      	ldr	r1, [r7, #8]
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f011 f8bd 	bl	801ec30 <memcpy>
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	4413      	add	r3, r2
 800dabc:	60fb      	str	r3, [r7, #12]
      addstr(out, RETS, LL(RETS));
 800dabe:	2203      	movs	r2, #3
 800dac0:	4907      	ldr	r1, [pc, #28]	; (800dae0 <luaO_chunkid+0x130>)
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f011 f8b4 	bl	801ec30 <memcpy>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	3303      	adds	r3, #3
 800dacc:	60fb      	str	r3, [r7, #12]
    memcpy(out, POS, (LL(POS) + 1) * sizeof(char));
 800dace:	2203      	movs	r2, #3
 800dad0:	4905      	ldr	r1, [pc, #20]	; (800dae8 <luaO_chunkid+0x138>)
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f011 f8ac 	bl	801ec30 <memcpy>
}
 800dad8:	bf00      	nop
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	080225b4 	.word	0x080225b4
 800dae4:	080225b8 	.word	0x080225b8
 800dae8:	080225c4 	.word	0x080225c4

0800daec <luai_makeseed>:
*/
#define addbuff(b,p,e) \
  { size_t t = cast_sizet(e); \
    memcpy(b + p, &t, sizeof(t)); p += sizeof(t); }

static unsigned int luai_makeseed (lua_State *L) {
 800daec:	b580      	push	{r7, lr}
 800daee:	b08a      	sub	sp, #40	; 0x28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  char buff[3 * sizeof(size_t)];
  unsigned int h = cast_uint(time(NULL));
 800daf4:	2000      	movs	r0, #0
 800daf6:	f012 fd01 	bl	80204fc <time>
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	4613      	mov	r3, r2
 800db00:	617b      	str	r3, [r7, #20]
  int p = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	627b      	str	r3, [r7, #36]	; 0x24
  addbuff(buff, p, L);  /* heap variable */
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	613b      	str	r3, [r7, #16]
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	f107 0218 	add.w	r2, r7, #24
 800db10:	4413      	add	r3, r2
 800db12:	693a      	ldr	r2, [r7, #16]
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	3304      	adds	r3, #4
 800db1a:	627b      	str	r3, [r7, #36]	; 0x24
  addbuff(buff, p, &h);  /* local variable */
 800db1c:	f107 0314 	add.w	r3, r7, #20
 800db20:	60fb      	str	r3, [r7, #12]
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	f107 0218 	add.w	r2, r7, #24
 800db28:	4413      	add	r3, r2
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	3304      	adds	r3, #4
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
  addbuff(buff, p, &lua_newstate);  /* public function */
 800db34:	4b0b      	ldr	r3, [pc, #44]	; (800db64 <luai_makeseed+0x78>)
 800db36:	60bb      	str	r3, [r7, #8]
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	f107 0218 	add.w	r2, r7, #24
 800db3e:	4413      	add	r3, r2
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	601a      	str	r2, [r3, #0]
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	3304      	adds	r3, #4
 800db48:	627b      	str	r3, [r7, #36]	; 0x24
  lua_assert(p == sizeof(buff));
  return luaS_hash(buff, p, h);
 800db4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	f107 0318 	add.w	r3, r7, #24
 800db52:	4618      	mov	r0, r3
 800db54:	f000 fbf4 	bl	800e340 <luaS_hash>
 800db58:	4603      	mov	r3, r0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3728      	adds	r7, #40	; 0x28
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	0800e04d 	.word	0x0800e04d

0800db68 <luaE_setdebt>:

/*
** set GCdebt to a new value keeping the value (totalbytes + GCdebt)
** invariant (and avoiding underflows in 'totalbytes')
*/
void luaE_setdebt (global_State *g, l_mem debt) {
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  l_mem tb = gettotalbytes(g);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	689a      	ldr	r2, [r3, #8]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	4413      	add	r3, r2
 800db7c:	60fb      	str	r3, [r7, #12]
  lua_assert(tb > 0);
  if (debt < tb - MAX_LMEM)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db84:	3301      	adds	r3, #1
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	429a      	cmp	r2, r3
 800db8a:	da04      	bge.n	800db96 <luaE_setdebt+0x2e>
    debt = tb - MAX_LMEM;  /* will make 'totalbytes == MAX_LMEM' */
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db92:	3301      	adds	r3, #1
 800db94:	603b      	str	r3, [r7, #0]
  g->totalbytes = tb - debt;
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	1ad2      	subs	r2, r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	609a      	str	r2, [r3, #8]
  g->GCdebt = debt;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	60da      	str	r2, [r3, #12]
}
 800dba6:	bf00      	nop
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <luaE_extendCI>:
  UNUSED(L); UNUSED(limit);
  return LUAI_MAXCCALLS;  /* warning?? */
}


CallInfo *luaE_extendCI (lua_State *L) {
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b084      	sub	sp, #16
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  CallInfo *ci;
  lua_assert(L->ci->next == NULL);
  ci = luaM_new(L, CallInfo);
 800dbba:	2200      	movs	r2, #0
 800dbbc:	2124      	movs	r1, #36	; 0x24
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff f992 	bl	800cee8 <luaM_malloc_>
 800dbc4:	60f8      	str	r0, [r7, #12]
  lua_assert(L->ci->next == NULL);
  L->ci->next = ci;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	695b      	ldr	r3, [r3, #20]
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	60da      	str	r2, [r3, #12]
  ci->previous = L->ci;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	695a      	ldr	r2, [r3, #20]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	609a      	str	r2, [r3, #8]
  ci->next = NULL;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	60da      	str	r2, [r3, #12]
  ci->u.l.trap = 0;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	615a      	str	r2, [r3, #20]
  L->nci++;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	891b      	ldrh	r3, [r3, #8]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	811a      	strh	r2, [r3, #8]
  return ci;
 800dbee:	68fb      	ldr	r3, [r7, #12]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <luaE_freeCI>:


/*
** free all CallInfo structures not in use by a thread
*/
void luaE_freeCI (lua_State *L) {
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  CallInfo *ci = L->ci;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	60bb      	str	r3, [r7, #8]
  CallInfo *next = ci->next;
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	60fb      	str	r3, [r7, #12]
  ci->next = NULL;
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	60da      	str	r2, [r3, #12]
  while ((ci = next) != NULL) {
 800dc12:	e00d      	b.n	800dc30 <luaE_freeCI+0x38>
    next = ci->next;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	60fb      	str	r3, [r7, #12]
    luaM_free(L, ci);
 800dc1a:	2224      	movs	r2, #36	; 0x24
 800dc1c:	68b9      	ldr	r1, [r7, #8]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff f8de 	bl	800cde0 <luaM_free_>
    L->nci--;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	891b      	ldrh	r3, [r3, #8]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	811a      	strh	r2, [r3, #8]
  while ((ci = next) != NULL) {
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	60bb      	str	r3, [r7, #8]
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1ec      	bne.n	800dc14 <luaE_freeCI+0x1c>
  }
}
 800dc3a:	bf00      	nop
 800dc3c:	bf00      	nop
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <luaE_shrinkCI>:

/*
** free half of the CallInfo structures not in use by a thread,
** keeping the first one.
*/
void luaE_shrinkCI (lua_State *L) {
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  CallInfo *ci = L->ci->next;  /* first free CallInfo */
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	695b      	ldr	r3, [r3, #20]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	617b      	str	r3, [r7, #20]
  CallInfo *next;
  if (ci == NULL)
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d020      	beq.n	800dc9c <luaE_shrinkCI+0x58>
    return;  /* no extra elements */
  while ((next = ci->next) != NULL) {  /* two extra elements? */
 800dc5a:	e018      	b.n	800dc8e <luaE_shrinkCI+0x4a>
    CallInfo *next2 = next->next;  /* next's next */
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	60fb      	str	r3, [r7, #12]
    ci->next = next2;  /* remove next from the list */
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	60da      	str	r2, [r3, #12]
    L->nci--;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	891b      	ldrh	r3, [r3, #8]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	811a      	strh	r2, [r3, #8]
    luaM_free(L, next);  /* free next */
 800dc74:	2224      	movs	r2, #36	; 0x24
 800dc76:	6939      	ldr	r1, [r7, #16]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff f8b1 	bl	800cde0 <luaM_free_>
    if (next2 == NULL)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00d      	beq.n	800dca0 <luaE_shrinkCI+0x5c>
      break;  /* no more elements */
    else {
      next2->previous = ci;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	609a      	str	r2, [r3, #8]
      ci = next2;  /* continue */
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	617b      	str	r3, [r7, #20]
  while ((next = ci->next) != NULL) {  /* two extra elements? */
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	613b      	str	r3, [r7, #16]
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1e0      	bne.n	800dc5c <luaE_shrinkCI+0x18>
 800dc9a:	e002      	b.n	800dca2 <luaE_shrinkCI+0x5e>
    return;  /* no extra elements */
 800dc9c:	bf00      	nop
 800dc9e:	e000      	b.n	800dca2 <luaE_shrinkCI+0x5e>
      break;  /* no more elements */
 800dca0:	bf00      	nop
    }
  }
}
 800dca2:	3718      	adds	r7, #24
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <luaE_checkcstack>:
** If equal, raises an overflow error. If value is larger than
** LUAI_MAXCCALLS (which means it is handling an overflow) but
** not much larger, does not report an error (to allow overflow
** handling to work).
*/
void luaE_checkcstack (lua_State *L) {
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  if (getCcalls(L) == LUAI_MAXCCALLS)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	2bc8      	cmp	r3, #200	; 0xc8
 800dcb8:	d103      	bne.n	800dcc2 <luaE_checkcstack+0x1a>
    luaG_runerror(L, "C stack overflow");
 800dcba:	4908      	ldr	r1, [pc, #32]	; (800dcdc <luaE_checkcstack+0x34>)
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f7fb f996 	bl	8008fee <luaG_runerror>
  else if (getCcalls(L) >= (LUAI_MAXCCALLS / 10 * 11))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	2bdb      	cmp	r3, #219	; 0xdb
 800dcca:	d903      	bls.n	800dcd4 <luaE_checkcstack+0x2c>
    luaD_throw(L, LUA_ERRERR);  /* error while handling stack error */
 800dccc:	2105      	movs	r1, #5
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7fb fb28 	bl	8009324 <luaD_throw>
}
 800dcd4:	bf00      	nop
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	080225c8 	.word	0x080225c8

0800dce0 <stack_init>:
  if (l_unlikely(getCcalls(L) >= LUAI_MAXCCALLS))
    luaE_checkcstack(L);
}


static void stack_init (lua_State *L1, lua_State *L) {
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  int i; CallInfo *ci;
  /* initialize stack array */
  L1->stack = luaM_newvector(L, BASIC_STACK_SIZE + EXTRA_STACK, StackValue);
 800dcea:	2200      	movs	r2, #0
 800dcec:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800dcf0:	6838      	ldr	r0, [r7, #0]
 800dcf2:	f7ff f8f9 	bl	800cee8 <luaM_malloc_>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	61da      	str	r2, [r3, #28]
  L1->tbclist = L1->stack;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	69da      	ldr	r2, [r3, #28]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	625a      	str	r2, [r3, #36]	; 0x24
  for (i = 0; i < BASIC_STACK_SIZE + EXTRA_STACK; i++)
 800dd04:	2300      	movs	r3, #0
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	e009      	b.n	800dd1e <stack_init+0x3e>
    setnilvalue(s2v(L1->stack + i));  /* erase new stack */
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	69da      	ldr	r2, [r3, #28]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	00db      	lsls	r3, r3, #3
 800dd12:	4413      	add	r3, r2
 800dd14:	2200      	movs	r2, #0
 800dd16:	711a      	strb	r2, [r3, #4]
  for (i = 0; i < BASIC_STACK_SIZE + EXTRA_STACK; i++)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	60fb      	str	r3, [r7, #12]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b2c      	cmp	r3, #44	; 0x2c
 800dd22:	ddf2      	ble.n	800dd0a <stack_init+0x2a>
  L1->top = L1->stack;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	69da      	ldr	r2, [r3, #28]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	60da      	str	r2, [r3, #12]
  L1->stack_last = L1->stack + BASIC_STACK_SIZE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	69db      	ldr	r3, [r3, #28]
 800dd30:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	619a      	str	r2, [r3, #24]
  /* initialize first ci */
  ci = &L1->base_ci;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	3334      	adds	r3, #52	; 0x34
 800dd3c:	60bb      	str	r3, [r7, #8]
  ci->next = ci->previous = NULL;
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	2200      	movs	r2, #0
 800dd42:	609a      	str	r2, [r3, #8]
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	689a      	ldr	r2, [r3, #8]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	60da      	str	r2, [r3, #12]
  ci->callstatus = CIST_C;
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	845a      	strh	r2, [r3, #34]	; 0x22
  ci->func = L1->top;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68da      	ldr	r2, [r3, #12]
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	601a      	str	r2, [r3, #0]
  ci->u.c.k = NULL;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	611a      	str	r2, [r3, #16]
  ci->nresults = 0;
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	2200      	movs	r2, #0
 800dd64:	841a      	strh	r2, [r3, #32]
  setnilvalue(s2v(L1->top));  /* 'function' entry for this 'ci' */
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	711a      	strb	r2, [r3, #4]
  L1->top++;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f103 0208 	add.w	r2, r3, #8
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	60da      	str	r2, [r3, #12]
  ci->top = L1->top + LUA_MINSTACK;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	605a      	str	r2, [r3, #4]
  L1->ci = ci;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	615a      	str	r2, [r3, #20]
}
 800dd8c:	bf00      	nop
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <freestack>:


static void freestack (lua_State *L) {
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  if (L->stack == NULL)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	69db      	ldr	r3, [r3, #28]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d014      	beq.n	800ddce <freestack+0x3a>
    return;  /* stack not completely built yet */
  L->ci = &L->base_ci;  /* free the entire 'ci' list */
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	615a      	str	r2, [r3, #20]
  luaE_freeCI(L);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7ff ff22 	bl	800dbf8 <luaE_freeCI>
  lua_assert(L->nci == 0);
  luaM_freearray(L, L->stack, stacksize(L) + EXTRA_STACK);  /* free stack */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	69d9      	ldr	r1, [r3, #28]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	699a      	ldr	r2, [r3, #24]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	3328      	adds	r3, #40	; 0x28
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff f80a 	bl	800cde0 <luaM_free_>
 800ddcc:	e000      	b.n	800ddd0 <freestack+0x3c>
    return;  /* stack not completely built yet */
 800ddce:	bf00      	nop
}
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <init_registry>:


/*
** Create registry table and its predefined values
*/
static void init_registry (lua_State *L, global_State *g) {
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b08a      	sub	sp, #40	; 0x28
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
 800ddde:	6039      	str	r1, [r7, #0]
  /* create registry */
  Table *registry = luaH_new(L);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f001 fb70 	bl	800f4c6 <luaH_new>
 800dde6:	6278      	str	r0, [r7, #36]	; 0x24
  sethvalue(L, &g->l_registry, registry);
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	3324      	adds	r3, #36	; 0x24
 800ddec:	623b      	str	r3, [r7, #32]
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	61fb      	str	r3, [r7, #28]
 800ddf2:	69fa      	ldr	r2, [r7, #28]
 800ddf4:	6a3b      	ldr	r3, [r7, #32]
 800ddf6:	601a      	str	r2, [r3, #0]
 800ddf8:	6a3b      	ldr	r3, [r7, #32]
 800ddfa:	2245      	movs	r2, #69	; 0x45
 800ddfc:	711a      	strb	r2, [r3, #4]
  luaH_resize(L, registry, LUA_RIDX_LAST, 0);
 800ddfe:	2300      	movs	r3, #0
 800de00:	2202      	movs	r2, #2
 800de02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f001 fa3d 	bl	800f284 <luaH_resize>
  /* registry[LUA_RIDX_MAINTHREAD] = L */
  setthvalue(L, &registry->array[LUA_RIDX_MAINTHREAD - 1], L);
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	61bb      	str	r3, [r7, #24]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	617b      	str	r3, [r7, #20]
 800de14:	697a      	ldr	r2, [r7, #20]
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	601a      	str	r2, [r3, #0]
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	2248      	movs	r2, #72	; 0x48
 800de1e:	711a      	strb	r2, [r3, #4]
  /* registry[LUA_RIDX_GLOBALS] = new table (table of globals) */
  sethvalue(L, &registry->array[LUA_RIDX_GLOBALS - 1], luaH_new(L));
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	3308      	adds	r3, #8
 800de26:	613b      	str	r3, [r7, #16]
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f001 fb4c 	bl	800f4c6 <luaH_new>
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	2245      	movs	r2, #69	; 0x45
 800de3a:	711a      	strb	r2, [r3, #4]
}
 800de3c:	bf00      	nop
 800de3e:	3728      	adds	r7, #40	; 0x28
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <f_luaopen>:


/*
** open parts of the state that may cause memory-allocation errors.
*/
static void f_luaopen (lua_State *L, void *ud) {
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  global_State *g = G(L);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	691b      	ldr	r3, [r3, #16]
 800de52:	60fb      	str	r3, [r7, #12]
  UNUSED(ud);
  stack_init(L, L);  /* init stack */
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7ff ff42 	bl	800dce0 <stack_init>
  init_registry(L, g);
 800de5c:	68f9      	ldr	r1, [r7, #12]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7ff ffb9 	bl	800ddd6 <init_registry>
  luaS_init(L);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 fb7d 	bl	800e564 <luaS_init>
  luaT_init(L);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f001 ff52 	bl	800fd14 <luaT_init>
  luaX_init(L);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7fe ff75 	bl	800cd60 <luaX_init>
  g->gcstp = 0;  /* allow gc */
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2200      	movs	r2, #0
 800de7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  setnilvalue(&g->nilvalue);  /* now state is complete */
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  luai_userstateopen(L);
}
 800de86:	bf00      	nop
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}

0800de8e <preinit_thread>:

/*
** preinitialize a thread with consistent values without allocating
** any memory (to avoid errors)
*/
static void preinit_thread (lua_State *L, global_State *g) {
 800de8e:	b480      	push	{r7}
 800de90:	b083      	sub	sp, #12
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
 800de96:	6039      	str	r1, [r7, #0]
  G(L) = g;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	611a      	str	r2, [r3, #16]
  L->stack = NULL;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	61da      	str	r2, [r3, #28]
  L->ci = NULL;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	615a      	str	r2, [r3, #20]
  L->nci = 0;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	811a      	strh	r2, [r3, #8]
  L->twups = L;  /* thread has no upvalues */
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	62da      	str	r2, [r3, #44]	; 0x2c
  L->nCcalls = 0;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	661a      	str	r2, [r3, #96]	; 0x60
  L->errorJmp = NULL;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	631a      	str	r2, [r3, #48]	; 0x30
  L->hook = NULL;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	659a      	str	r2, [r3, #88]	; 0x58
  L->hookmask = 0;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2200      	movs	r2, #0
 800decc:	671a      	str	r2, [r3, #112]	; 0x70
  L->basehookcount = 0;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	669a      	str	r2, [r3, #104]	; 0x68
  L->allowhook = 1;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2201      	movs	r2, #1
 800ded8:	71da      	strb	r2, [r3, #7]
  resethookcount(L);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	66da      	str	r2, [r3, #108]	; 0x6c
  L->openupval = NULL;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	621a      	str	r2, [r3, #32]
  L->status = LUA_OK;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	719a      	strb	r2, [r3, #6]
  L->errfunc = 0;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	65da      	str	r2, [r3, #92]	; 0x5c
  L->oldpc = 0;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <close_state>:


static void close_state (lua_State *L) {
 800df06:	b590      	push	{r4, r7, lr}
 800df08:	b085      	sub	sp, #20
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	60fb      	str	r3, [r7, #12]
  if (!completestate(g))  /* closing a partially built state? */
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df1a:	f003 030f 	and.w	r3, r3, #15
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <close_state+0x24>
    luaC_freeallobjects(L);  /* just collect its objects */
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7fe fca1 	bl	800c86a <luaC_freeallobjects>
 800df28:	e00c      	b.n	800df44 <close_state+0x3e>
  else {  /* closing a fully built state */
    L->ci = &L->base_ci;  /* unwind CallInfo list */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	615a      	str	r2, [r3, #20]
    luaD_closeprotected(L, 1, LUA_OK);  /* close all upvalues */
 800df34:	2200      	movs	r2, #0
 800df36:	2101      	movs	r1, #1
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f7fc f8cb 	bl	800a0d4 <luaD_closeprotected>
    luaC_freeallobjects(L);  /* collect all objects */
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7fe fc93 	bl	800c86a <luaC_freeallobjects>
    luai_userstateclose(L);
  }
  luaM_freearray(L, G(L)->strt.hash, G(L)->strt.size);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	6999      	ldr	r1, [r3, #24]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	6a1b      	ldr	r3, [r3, #32]
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	461a      	mov	r2, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7fe ff43 	bl	800cde0 <luaM_free_>
  freestack(L);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7ff ff1a 	bl	800dd94 <freestack>
  lua_assert(gettotalbytes(g) == sizeof(LG));
  (*g->frealloc)(g->ud, fromstate(L), sizeof(LG), 0);  /* free main block */
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681c      	ldr	r4, [r3, #0]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6858      	ldr	r0, [r3, #4]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	1f19      	subs	r1, r3, #4
 800df6c:	2300      	movs	r3, #0
 800df6e:	f44f 7252 	mov.w	r2, #840	; 0x348
 800df72:	47a0      	blx	r4
}
 800df74:	bf00      	nop
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd90      	pop	{r4, r7, pc}

0800df7c <luaE_freethread>:
  lua_unlock(L);
  return L1;
}


void luaE_freethread (lua_State *L, lua_State *L1) {
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  LX *l = fromstate(L1);
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	3b04      	subs	r3, #4
 800df8a:	60fb      	str	r3, [r7, #12]
  luaF_closeupval(L1, L1->stack);  /* close all upvalues */
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	69db      	ldr	r3, [r3, #28]
 800df90:	4619      	mov	r1, r3
 800df92:	6838      	ldr	r0, [r7, #0]
 800df94:	f7fc fa9a 	bl	800a4cc <luaF_closeupval>
  lua_assert(L1->openupval == NULL);
  luai_userstatefree(L, L1);
  freestack(L1);
 800df98:	6838      	ldr	r0, [r7, #0]
 800df9a:	f7ff fefb 	bl	800dd94 <freestack>
  luaM_free(L, l);
 800df9e:	2278      	movs	r2, #120	; 0x78
 800dfa0:	68f9      	ldr	r1, [r7, #12]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7fe ff1c 	bl	800cde0 <luaM_free_>
}
 800dfa8:	bf00      	nop
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <luaE_resetthread>:


int luaE_resetthread (lua_State *L, int status) {
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  CallInfo *ci = L->ci = &L->base_ci;  /* unwind CallInfo list */
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	615a      	str	r2, [r3, #20]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	695b      	ldr	r3, [r3, #20]
 800dfc8:	60fb      	str	r3, [r7, #12]
  setnilvalue(s2v(L->stack));  /* 'function' entry for basic 'ci' */
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	711a      	strb	r2, [r3, #4]
  ci->func = L->stack;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	69da      	ldr	r2, [r3, #28]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	601a      	str	r2, [r3, #0]
  ci->callstatus = CIST_C;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2202      	movs	r2, #2
 800dfde:	845a      	strh	r2, [r3, #34]	; 0x22
  if (status == LUA_YIELD)
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d101      	bne.n	800dfea <luaE_resetthread+0x3a>
    status = LUA_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	603b      	str	r3, [r7, #0]
  L->status = LUA_OK;  /* so it can run __close metamethods */
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	719a      	strb	r2, [r3, #6]
  status = luaD_closeprotected(L, 1, status);
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	2101      	movs	r1, #1
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7fc f86d 	bl	800a0d4 <luaD_closeprotected>
 800dffa:	6038      	str	r0, [r7, #0]
  if (status != LUA_OK)  /* errors? */
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d008      	beq.n	800e014 <luaE_resetthread+0x64>
    luaD_seterrorobj(L, status, L->stack + 1);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	69db      	ldr	r3, [r3, #28]
 800e006:	3308      	adds	r3, #8
 800e008:	461a      	mov	r2, r3
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7fb f933 	bl	8009278 <luaD_seterrorobj>
 800e012:	e005      	b.n	800e020 <luaE_resetthread+0x70>
  else
    L->top = L->stack + 1;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	f103 0208 	add.w	r2, r3, #8
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	60da      	str	r2, [r3, #12]
  ci->top = L->top + LUA_MINSTACK;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	605a      	str	r2, [r3, #4]
  luaD_reallocstack(L, cast_int(ci->top - L->stack), 0);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	685a      	ldr	r2, [r3, #4]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	69db      	ldr	r3, [r3, #28]
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	10db      	asrs	r3, r3, #3
 800e038:	2200      	movs	r2, #0
 800e03a:	4619      	mov	r1, r3
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7fb fa3c 	bl	80094ba <luaD_reallocstack>
  return status;
 800e042:	683b      	ldr	r3, [r7, #0]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <lua_newstate>:
  lua_unlock(L);
  return status;
}


LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {
 800e04c:	b590      	push	{r4, r7, lr}
 800e04e:	b089      	sub	sp, #36	; 0x24
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
  int i;
  lua_State *L;
  global_State *g;
  LG *l = cast(LG *, (*f)(ud, NULL, LUA_TTHREAD, sizeof(LG)));
 800e056:	687c      	ldr	r4, [r7, #4]
 800e058:	f44f 7352 	mov.w	r3, #840	; 0x348
 800e05c:	2208      	movs	r2, #8
 800e05e:	2100      	movs	r1, #0
 800e060:	6838      	ldr	r0, [r7, #0]
 800e062:	47a0      	blx	r4
 800e064:	6178      	str	r0, [r7, #20]
  if (l == NULL) return NULL;
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <lua_newstate+0x24>
 800e06c:	2300      	movs	r3, #0
 800e06e:	e0e9      	b.n	800e244 <lua_newstate+0x1f8>
  L = &l->l.l;
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	3304      	adds	r3, #4
 800e074:	61bb      	str	r3, [r7, #24]
  g = &l->g;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	3378      	adds	r3, #120	; 0x78
 800e07a:	613b      	str	r3, [r7, #16]
  L->tt = LUA_VTHREAD;
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	2208      	movs	r2, #8
 800e080:	711a      	strb	r2, [r3, #4]
  g->currentwhite = bitmask(WHITE0BIT);
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	2208      	movs	r2, #8
 800e086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  L->marked = luaC_white(g);
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e090:	f003 0318 	and.w	r3, r3, #24
 800e094:	b2da      	uxtb	r2, r3
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	715a      	strb	r2, [r3, #5]
  preinit_thread(L, g);
 800e09a:	6939      	ldr	r1, [r7, #16]
 800e09c:	69b8      	ldr	r0, [r7, #24]
 800e09e:	f7ff fef6 	bl	800de8e <preinit_thread>
  g->allgc = obj2gco(L);  /* by now, only object is the main thread */
 800e0a2:	69ba      	ldr	r2, [r7, #24]
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	645a      	str	r2, [r3, #68]	; 0x44
  L->next = NULL;
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	601a      	str	r2, [r3, #0]
  incnny(L);  /* main thread is always non yieldable */
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	661a      	str	r2, [r3, #96]	; 0x60
  g->frealloc = f;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	601a      	str	r2, [r3, #0]
  g->ud = ud;
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	605a      	str	r2, [r3, #4]
  g->warnf = NULL;
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  g->ud_warn = NULL;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  g->mainthread = L;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	69ba      	ldr	r2, [r7, #24]
 800e0da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  g->seed = luai_makeseed(L);
 800e0de:	69b8      	ldr	r0, [r7, #24]
 800e0e0:	f7ff fd04 	bl	800daec <luai_makeseed>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	635a      	str	r2, [r3, #52]	; 0x34
  g->gcstp = GCSTPGC;  /* no GC while building state */
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  g->strt.size = g->strt.nuse = 0;
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	61da      	str	r2, [r3, #28]
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	69da      	ldr	r2, [r3, #28]
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	621a      	str	r2, [r3, #32]
  g->strt.hash = NULL;
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	2200      	movs	r2, #0
 800e104:	619a      	str	r2, [r3, #24]
  setnilvalue(&g->l_registry);
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  g->panic = NULL;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2200      	movs	r2, #0
 800e112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  g->gcstate = GCSpause;
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	2208      	movs	r2, #8
 800e11a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  g->gckind = KGC_INC;
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	2200      	movs	r2, #0
 800e122:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  g->gcstopem = 0;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  g->gcemergency = 0;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	2200      	movs	r2, #0
 800e132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  g->finobj = g->tobefnz = g->fixedgc = NULL;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	2200      	movs	r2, #0
 800e13a:	669a      	str	r2, [r3, #104]	; 0x68
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	665a      	str	r2, [r3, #100]	; 0x64
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	64da      	str	r2, [r3, #76]	; 0x4c
  g->firstold1 = g->survival = g->old1 = g->reallyold = NULL;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	2200      	movs	r2, #0
 800e150:	675a      	str	r2, [r3, #116]	; 0x74
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	671a      	str	r2, [r3, #112]	; 0x70
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	66da      	str	r2, [r3, #108]	; 0x6c
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	679a      	str	r2, [r3, #120]	; 0x78
  g->finobjsur = g->finobjold1 = g->finobjrold = NULL;
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	67da      	str	r2, [r3, #124]	; 0x7c
  g->sweepgc = NULL;
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	2200      	movs	r2, #0
 800e18c:	649a      	str	r2, [r3, #72]	; 0x48
  g->gray = g->grayagain = NULL;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	2200      	movs	r2, #0
 800e192:	655a      	str	r2, [r3, #84]	; 0x54
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	651a      	str	r2, [r3, #80]	; 0x50
  g->weak = g->ephemeron = g->allweak = NULL;
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	661a      	str	r2, [r3, #96]	; 0x60
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	65da      	str	r2, [r3, #92]	; 0x5c
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	659a      	str	r2, [r3, #88]	; 0x58
  g->twups = NULL;
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  g->totalbytes = sizeof(LG);
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	f44f 7252 	mov.w	r2, #840	; 0x348
 800e1c0:	609a      	str	r2, [r3, #8]
  g->GCdebt = 0;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	60da      	str	r2, [r3, #12]
  g->lastatomic = 0;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	615a      	str	r2, [r3, #20]
  setivalue(&g->nilvalue, 0);  /* to signal that state is not yet built */
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	332c      	adds	r3, #44	; 0x2c
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2203      	movs	r2, #3
 800e1de:	711a      	strb	r2, [r3, #4]
  setgcparam(g->gcpause, LUAI_GCPAUSE);
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	2232      	movs	r2, #50	; 0x32
 800e1e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  setgcparam(g->gcstepmul, LUAI_GCMUL);
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	2219      	movs	r2, #25
 800e1ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  g->gcstepsize = LUAI_GCSTEPSIZE;
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	220d      	movs	r2, #13
 800e1f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  setgcparam(g->genmajormul, LUAI_GENMAJORMUL);
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	2219      	movs	r2, #25
 800e1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  g->genminormul = LUAI_GENMINORMUL;
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	2214      	movs	r2, #20
 800e204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  for (i=0; i < LUA_NUMTAGS; i++) g->mt[i] = NULL;
 800e208:	2300      	movs	r3, #0
 800e20a:	61fb      	str	r3, [r7, #28]
 800e20c:	e009      	b.n	800e222 <lua_newstate+0x1d6>
 800e20e:	693a      	ldr	r2, [r7, #16]
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	333e      	adds	r3, #62	; 0x3e
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	2200      	movs	r2, #0
 800e21a:	605a      	str	r2, [r3, #4]
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	3301      	adds	r3, #1
 800e220:	61fb      	str	r3, [r7, #28]
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	2b08      	cmp	r3, #8
 800e226:	ddf2      	ble.n	800e20e <lua_newstate+0x1c2>
  if (luaD_rawrunprotected(L, f_luaopen, NULL) != LUA_OK) {
 800e228:	2200      	movs	r2, #0
 800e22a:	4908      	ldr	r1, [pc, #32]	; (800e24c <lua_newstate+0x200>)
 800e22c:	69b8      	ldr	r0, [r7, #24]
 800e22e:	f7fb f8c2 	bl	80093b6 <luaD_rawrunprotected>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d004      	beq.n	800e242 <lua_newstate+0x1f6>
    /* memory allocation error: free partial state */
    close_state(L);
 800e238:	69b8      	ldr	r0, [r7, #24]
 800e23a:	f7ff fe64 	bl	800df06 <close_state>
    L = NULL;
 800e23e:	2300      	movs	r3, #0
 800e240:	61bb      	str	r3, [r7, #24]
  }
  return L;
 800e242:	69bb      	ldr	r3, [r7, #24]
}
 800e244:	4618      	mov	r0, r3
 800e246:	3724      	adds	r7, #36	; 0x24
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd90      	pop	{r4, r7, pc}
 800e24c:	0800de45 	.word	0x0800de45

0800e250 <luaE_warning>:
  L = G(L)->mainthread;  /* only the main thread can be closed */
  close_state(L);
}


void luaE_warning (lua_State *L, const char *msg, int tocont) {
 800e250:	b580      	push	{r7, lr}
 800e252:	b086      	sub	sp, #24
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	607a      	str	r2, [r7, #4]
  lua_WarnFunction wf = G(L)->warnf;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	691b      	ldr	r3, [r3, #16]
 800e260:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e264:	617b      	str	r3, [r7, #20]
  if (wf != NULL)
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d007      	beq.n	800e27c <luaE_warning+0x2c>
    wf(G(L)->ud_warn, msg, tocont);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	68b9      	ldr	r1, [r7, #8]
 800e27a:	4798      	blx	r3
}
 800e27c:	bf00      	nop
 800e27e:	3718      	adds	r7, #24
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <luaE_warnerror>:


/*
** Generate a warning from an error message
*/
void luaE_warnerror (lua_State *L, const char *where) {
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
  TValue *errobj = s2v(L->top - 1);  /* error object */
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	3b08      	subs	r3, #8
 800e294:	60fb      	str	r3, [r7, #12]
  const char *msg = (ttisstring(errobj))
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	791b      	ldrb	r3, [r3, #4]
 800e29a:	f003 030f 	and.w	r3, r3, #15
                  ? svalue(errobj)
                  : "error object is not a string";
 800e29e:	2b04      	cmp	r3, #4
 800e2a0:	d103      	bne.n	800e2aa <luaE_warnerror+0x26>
                  ? svalue(errobj)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
                  : "error object is not a string";
 800e2a6:	3310      	adds	r3, #16
 800e2a8:	e000      	b.n	800e2ac <luaE_warnerror+0x28>
 800e2aa:	4b0f      	ldr	r3, [pc, #60]	; (800e2e8 <luaE_warnerror+0x64>)
  const char *msg = (ttisstring(errobj))
 800e2ac:	60bb      	str	r3, [r7, #8]
  /* produce warning "error in %s (%s)" (where, msg) */
  luaE_warning(L, "error in ", 1);
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	490e      	ldr	r1, [pc, #56]	; (800e2ec <luaE_warnerror+0x68>)
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7ff ffcc 	bl	800e250 <luaE_warning>
  luaE_warning(L, where, 1);
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff ffc7 	bl	800e250 <luaE_warning>
  luaE_warning(L, " (", 1);
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	490a      	ldr	r1, [pc, #40]	; (800e2f0 <luaE_warnerror+0x6c>)
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff ffc2 	bl	800e250 <luaE_warning>
  luaE_warning(L, msg, 1);
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	68b9      	ldr	r1, [r7, #8]
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff ffbd 	bl	800e250 <luaE_warning>
  luaE_warning(L, ")", 0);
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	4906      	ldr	r1, [pc, #24]	; (800e2f4 <luaE_warnerror+0x70>)
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff ffb8 	bl	800e250 <luaE_warning>
}
 800e2e0:	bf00      	nop
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	080225dc 	.word	0x080225dc
 800e2ec:	080225fc 	.word	0x080225fc
 800e2f0:	08022608 	.word	0x08022608
 800e2f4:	0802260c 	.word	0x0802260c

0800e2f8 <luaS_eqlngstr>:


/*
** equality for long strings
*/
int luaS_eqlngstr (TString *a, TString *b) {
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  size_t len = a->u.lnglen;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	60fb      	str	r3, [r7, #12]
  lua_assert(a->tt == LUA_VLNGSTR && b->tt == LUA_VLNGSTR);
  return (a == b) ||  /* same instance or... */
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d010      	beq.n	800e332 <luaS_eqlngstr+0x3a>
    ((len == b->u.lnglen) &&  /* equal length and ... */
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	68db      	ldr	r3, [r3, #12]
  return (a == b) ||  /* same instance or... */
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	429a      	cmp	r2, r3
 800e318:	d10d      	bne.n	800e336 <luaS_eqlngstr+0x3e>
     (memcmp(getstr(a), getstr(b), len) == 0));  /* equal contents */
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f103 0010 	add.w	r0, r3, #16
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	3310      	adds	r3, #16
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	4619      	mov	r1, r3
 800e328:	f010 fc72 	bl	801ec10 <memcmp>
 800e32c:	4603      	mov	r3, r0
    ((len == b->u.lnglen) &&  /* equal length and ... */
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <luaS_eqlngstr+0x3e>
  return (a == b) ||  /* same instance or... */
 800e332:	2301      	movs	r3, #1
 800e334:	e000      	b.n	800e338 <luaS_eqlngstr+0x40>
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3710      	adds	r7, #16
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <luaS_hash>:


unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {
 800e340:	b480      	push	{r7}
 800e342:	b087      	sub	sp, #28
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
  unsigned int h = seed ^ cast_uint(l);
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	4053      	eors	r3, r2
 800e352:	617b      	str	r3, [r7, #20]
  for (; l > 0; l--)
 800e354:	e010      	b.n	800e378 <luaS_hash+0x38>
    h ^= ((h<<5) + (h>>2) + cast_byte(str[l - 1]));
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	015a      	lsls	r2, r3, #5
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	089b      	lsrs	r3, r3, #2
 800e35e:	4413      	add	r3, r2
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	3a01      	subs	r2, #1
 800e364:	68f9      	ldr	r1, [r7, #12]
 800e366:	440a      	add	r2, r1
 800e368:	7812      	ldrb	r2, [r2, #0]
 800e36a:	4413      	add	r3, r2
 800e36c:	697a      	ldr	r2, [r7, #20]
 800e36e:	4053      	eors	r3, r2
 800e370:	617b      	str	r3, [r7, #20]
  for (; l > 0; l--)
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	3b01      	subs	r3, #1
 800e376:	60bb      	str	r3, [r7, #8]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1eb      	bne.n	800e356 <luaS_hash+0x16>
  return h;
 800e37e:	697b      	ldr	r3, [r7, #20]
}
 800e380:	4618      	mov	r0, r3
 800e382:	371c      	adds	r7, #28
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <luaS_hashlongstr>:


unsigned int luaS_hashlongstr (TString *ts) {
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  lua_assert(ts->tt == LUA_VLNGSTR);
  if (ts->extra == 0) {  /* no hash? */
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	799b      	ldrb	r3, [r3, #6]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d111      	bne.n	800e3c0 <luaS_hashlongstr+0x34>
    size_t len = ts->u.lnglen;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	60fb      	str	r3, [r7, #12]
    ts->hash = luaS_hash(getstr(ts), len, ts->hash);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f103 0010 	add.w	r0, r3, #16
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	68f9      	ldr	r1, [r7, #12]
 800e3b0:	f7ff ffc6 	bl	800e340 <luaS_hash>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	609a      	str	r2, [r3, #8]
    ts->extra = 1;  /* now it has its hash */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	719a      	strb	r2, [r3, #6]
  }
  return ts->hash;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	689b      	ldr	r3, [r3, #8]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <tablerehash>:


static void tablerehash (TString **vect, int osize, int nsize) {
 800e3cc:	b480      	push	{r7}
 800e3ce:	b089      	sub	sp, #36	; 0x24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
  int i;
  for (i = osize; i < nsize; i++)  /* clear new elements */
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	61fb      	str	r3, [r7, #28]
 800e3dc:	e008      	b.n	800e3f0 <tablerehash+0x24>
    vect[i] = NULL;
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	601a      	str	r2, [r3, #0]
  for (i = osize; i < nsize; i++)  /* clear new elements */
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	61fb      	str	r3, [r7, #28]
 800e3f0:	69fa      	ldr	r2, [r7, #28]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	dbf2      	blt.n	800e3de <tablerehash+0x12>
  for (i = 0; i < osize; i++) {  /* rehash old part of the array */
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	61fb      	str	r3, [r7, #28]
 800e3fc:	e02a      	b.n	800e454 <tablerehash+0x88>
    TString *p = vect[i];
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	4413      	add	r3, r2
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	61bb      	str	r3, [r7, #24]
    vect[i] = NULL;
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	4413      	add	r3, r2
 800e412:	2200      	movs	r2, #0
 800e414:	601a      	str	r2, [r3, #0]
    while (p) {  /* for each string in the list */
 800e416:	e017      	b.n	800e448 <tablerehash+0x7c>
      TString *hnext = p->u.hnext;  /* save next */
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	617b      	str	r3, [r7, #20]
      unsigned int h = lmod(p->hash, nsize);  /* new position */
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	3a01      	subs	r2, #1
 800e426:	4013      	ands	r3, r2
 800e428:	613b      	str	r3, [r7, #16]
      p->u.hnext = vect[h];  /* chain it into array */
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	68fa      	ldr	r2, [r7, #12]
 800e430:	4413      	add	r3, r2
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	60da      	str	r2, [r3, #12]
      vect[h] = p;
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	4413      	add	r3, r2
 800e440:	69ba      	ldr	r2, [r7, #24]
 800e442:	601a      	str	r2, [r3, #0]
      p = hnext;
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	61bb      	str	r3, [r7, #24]
    while (p) {  /* for each string in the list */
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1e4      	bne.n	800e418 <tablerehash+0x4c>
  for (i = 0; i < osize; i++) {  /* rehash old part of the array */
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	3301      	adds	r3, #1
 800e452:	61fb      	str	r3, [r7, #28]
 800e454:	69fa      	ldr	r2, [r7, #28]
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	429a      	cmp	r2, r3
 800e45a:	dbd0      	blt.n	800e3fe <tablerehash+0x32>
    }
  }
}
 800e45c:	bf00      	nop
 800e45e:	bf00      	nop
 800e460:	3724      	adds	r7, #36	; 0x24
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr

0800e46a <luaS_resize>:
/*
** Resize the string table. If allocation fails, keep the current size.
** (This can degrade performance, but any non-zero size should work
** correctly.)
*/
void luaS_resize (lua_State *L, int nsize) {
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b086      	sub	sp, #24
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
 800e472:	6039      	str	r1, [r7, #0]
  stringtable *tb = &G(L)->strt;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	3318      	adds	r3, #24
 800e47a:	617b      	str	r3, [r7, #20]
  int osize = tb->size;
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	613b      	str	r3, [r7, #16]
  TString **newvect;
  if (nsize < osize)  /* shrinking table? */
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	429a      	cmp	r2, r3
 800e488:	da06      	bge.n	800e498 <luaS_resize+0x2e>
    tablerehash(tb->hash, osize, nsize);  /* depopulate shrinking part */
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	6939      	ldr	r1, [r7, #16]
 800e492:	4618      	mov	r0, r3
 800e494:	f7ff ff9a 	bl	800e3cc <tablerehash>
  newvect = luaM_reallocvector(L, tb->hash, osize, nsize, TString*);
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	6819      	ldr	r1, [r3, #0]
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	009a      	lsls	r2, r3, #2
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7fe fce1 	bl	800ce6c <luaM_realloc_>
 800e4aa:	60f8      	str	r0, [r7, #12]
  if (l_unlikely(newvect == NULL)) {  /* reallocation failed? */
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	bf0c      	ite	eq
 800e4b2:	2301      	moveq	r3, #1
 800e4b4:	2300      	movne	r3, #0
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00b      	beq.n	800e4d4 <luaS_resize+0x6a>
    if (nsize < osize)  /* was it shrinking table? */
 800e4bc:	683a      	ldr	r2, [r7, #0]
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	da16      	bge.n	800e4f2 <luaS_resize+0x88>
      tablerehash(tb->hash, nsize, osize);  /* restore to original size */
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	693a      	ldr	r2, [r7, #16]
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7ff ff7d 	bl	800e3cc <tablerehash>
    tb->hash = newvect;
    tb->size = nsize;
    if (nsize > osize)
      tablerehash(newvect, osize, nsize);  /* rehash for new size */
  }
}
 800e4d2:	e00e      	b.n	800e4f2 <luaS_resize+0x88>
    tb->hash = newvect;
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	601a      	str	r2, [r3, #0]
    tb->size = nsize;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	609a      	str	r2, [r3, #8]
    if (nsize > osize)
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	dd04      	ble.n	800e4f2 <luaS_resize+0x88>
      tablerehash(newvect, osize, nsize);  /* rehash for new size */
 800e4e8:	683a      	ldr	r2, [r7, #0]
 800e4ea:	6939      	ldr	r1, [r7, #16]
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f7ff ff6d 	bl	800e3cc <tablerehash>
}
 800e4f2:	bf00      	nop
 800e4f4:	3718      	adds	r7, #24
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <luaS_clearcache>:

/*
** Clear API string cache. (Entries cannot be empty, so fill them with
** a non-collectable string.)
*/
void luaS_clearcache (global_State *g) {
 800e4fa:	b480      	push	{r7}
 800e4fc:	b085      	sub	sp, #20
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  int i, j;
  for (i = 0; i < STRCACHE_N; i++)
 800e502:	2300      	movs	r3, #0
 800e504:	60fb      	str	r3, [r7, #12]
 800e506:	e023      	b.n	800e550 <luaS_clearcache+0x56>
    for (j = 0; j < STRCACHE_M; j++) {
 800e508:	2300      	movs	r3, #0
 800e50a:	60bb      	str	r3, [r7, #8]
 800e50c:	e01a      	b.n	800e544 <luaS_clearcache+0x4a>
      if (iswhite(g->strcache[i][j]))  /* will entry be collected? */
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	0051      	lsls	r1, r2, #1
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	440a      	add	r2, r1
 800e518:	3248      	adds	r2, #72	; 0x48
 800e51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e51e:	795b      	ldrb	r3, [r3, #5]
 800e520:	f003 0318 	and.w	r3, r3, #24
 800e524:	2b00      	cmp	r3, #0
 800e526:	d00a      	beq.n	800e53e <luaS_clearcache+0x44>
        g->strcache[i][j] = g->memerrmsg;  /* replace it with something fixed */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	0050      	lsls	r0, r2, #1
 800e534:	68ba      	ldr	r2, [r7, #8]
 800e536:	4402      	add	r2, r0
 800e538:	3248      	adds	r2, #72	; 0x48
 800e53a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < STRCACHE_M; j++) {
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	3301      	adds	r3, #1
 800e542:	60bb      	str	r3, [r7, #8]
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	2b01      	cmp	r3, #1
 800e548:	dde1      	ble.n	800e50e <luaS_clearcache+0x14>
  for (i = 0; i < STRCACHE_N; i++)
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3301      	adds	r3, #1
 800e54e:	60fb      	str	r3, [r7, #12]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2b34      	cmp	r3, #52	; 0x34
 800e554:	ddd8      	ble.n	800e508 <luaS_clearcache+0xe>
    }
}
 800e556:	bf00      	nop
 800e558:	bf00      	nop
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <luaS_init>:


/*
** Initialize the string table and the string cache
*/
void luaS_init (lua_State *L) {
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  global_State *g = G(L);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	691b      	ldr	r3, [r3, #16]
 800e570:	60fb      	str	r3, [r7, #12]
  int i, j;
  stringtable *tb = &G(L)->strt;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	3318      	adds	r3, #24
 800e578:	60bb      	str	r3, [r7, #8]
  tb->hash = luaM_newvector(L, MINSTRTABSIZE, TString*);
 800e57a:	2200      	movs	r2, #0
 800e57c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7fe fcb1 	bl	800cee8 <luaM_malloc_>
 800e586:	4602      	mov	r2, r0
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	601a      	str	r2, [r3, #0]
  tablerehash(tb->hash, 0, MINSTRTABSIZE);  /* clear array */
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2280      	movs	r2, #128	; 0x80
 800e592:	2100      	movs	r1, #0
 800e594:	4618      	mov	r0, r3
 800e596:	f7ff ff19 	bl	800e3cc <tablerehash>
  tb->size = MINSTRTABSIZE;
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	2280      	movs	r2, #128	; 0x80
 800e59e:	609a      	str	r2, [r3, #8]
  /* pre-create memory-error message */
  g->memerrmsg = luaS_newliteral(L, MEMERRMSG);
 800e5a0:	2211      	movs	r2, #17
 800e5a2:	4918      	ldr	r1, [pc, #96]	; (800e604 <luaS_init+0xa0>)
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 f94b 	bl	800e840 <luaS_newlstr>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  luaC_fix(L, obj2gco(g->memerrmsg));  /* it should never be collected */
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7fc f9f3 	bl	800a9a6 <luaC_fix>
  for (i = 0; i < STRCACHE_N; i++)  /* fill cache with valid strings */
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	617b      	str	r3, [r7, #20]
 800e5c4:	e016      	b.n	800e5f4 <luaS_init+0x90>
    for (j = 0; j < STRCACHE_M; j++)
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	613b      	str	r3, [r7, #16]
 800e5ca:	e00d      	b.n	800e5e8 <luaS_init+0x84>
      g->strcache[i][j] = g->memerrmsg;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	697a      	ldr	r2, [r7, #20]
 800e5d6:	0050      	lsls	r0, r2, #1
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	4402      	add	r2, r0
 800e5dc:	3248      	adds	r2, #72	; 0x48
 800e5de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < STRCACHE_M; j++)
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	613b      	str	r3, [r7, #16]
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	ddee      	ble.n	800e5cc <luaS_init+0x68>
  for (i = 0; i < STRCACHE_N; i++)  /* fill cache with valid strings */
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	2b34      	cmp	r3, #52	; 0x34
 800e5f8:	dde5      	ble.n	800e5c6 <luaS_init+0x62>
}
 800e5fa:	bf00      	nop
 800e5fc:	bf00      	nop
 800e5fe:	3718      	adds	r7, #24
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	08022610 	.word	0x08022610

0800e608 <createstrobj>:


/*
** creates a new string object
*/
static TString *createstrobj (lua_State *L, size_t l, int tag, unsigned int h) {
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
 800e614:	603b      	str	r3, [r7, #0]
  TString *ts;
  GCObject *o;
  size_t totalsize;  /* total size of TString object */
  totalsize = sizelstring(l);
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	3311      	adds	r3, #17
 800e61a:	61fb      	str	r3, [r7, #28]
  o = luaC_newobj(L, tag, totalsize);
 800e61c:	69fa      	ldr	r2, [r7, #28]
 800e61e:	6879      	ldr	r1, [r7, #4]
 800e620:	68f8      	ldr	r0, [r7, #12]
 800e622:	f7fc f9ec 	bl	800a9fe <luaC_newobj>
 800e626:	61b8      	str	r0, [r7, #24]
  ts = gco2ts(o);
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	617b      	str	r3, [r7, #20]
  ts->hash = h;
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	609a      	str	r2, [r3, #8]
  ts->extra = 0;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	2200      	movs	r2, #0
 800e636:	719a      	strb	r2, [r3, #6]
  getstr(ts)[l] = '\0';  /* ending 0 */
 800e638:	697a      	ldr	r2, [r7, #20]
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	4413      	add	r3, r2
 800e63e:	3310      	adds	r3, #16
 800e640:	2200      	movs	r2, #0
 800e642:	701a      	strb	r2, [r3, #0]
  return ts;
 800e644:	697b      	ldr	r3, [r7, #20]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3720      	adds	r7, #32
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <luaS_createlngstrobj>:


TString *luaS_createlngstrobj (lua_State *L, size_t l) {
 800e64e:	b580      	push	{r7, lr}
 800e650:	b084      	sub	sp, #16
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	6039      	str	r1, [r7, #0]
  TString *ts = createstrobj(L, l, LUA_VLNGSTR, G(L)->seed);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	691b      	ldr	r3, [r3, #16]
 800e65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e65e:	2214      	movs	r2, #20
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7ff ffd0 	bl	800e608 <createstrobj>
 800e668:	60f8      	str	r0, [r7, #12]
  ts->u.lnglen = l;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	683a      	ldr	r2, [r7, #0]
 800e66e:	60da      	str	r2, [r3, #12]
  return ts;
 800e670:	68fb      	ldr	r3, [r7, #12]
}
 800e672:	4618      	mov	r0, r3
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <luaS_remove>:


void luaS_remove (lua_State *L, TString *ts) {
 800e67a:	b480      	push	{r7}
 800e67c:	b085      	sub	sp, #20
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
 800e682:	6039      	str	r1, [r7, #0]
  stringtable *tb = &G(L)->strt;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	3318      	adds	r3, #24
 800e68a:	60bb      	str	r3, [r7, #8]
  TString **p = &tb->hash[lmod(ts->hash, tb->size)];
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	68b9      	ldr	r1, [r7, #8]
 800e696:	6889      	ldr	r1, [r1, #8]
 800e698:	3901      	subs	r1, #1
 800e69a:	400b      	ands	r3, r1
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	4413      	add	r3, r2
 800e6a0:	60fb      	str	r3, [r7, #12]
  while (*p != ts)  /* find previous element */
 800e6a2:	e003      	b.n	800e6ac <luaS_remove+0x32>
    p = &(*p)->u.hnext;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	330c      	adds	r3, #12
 800e6aa:	60fb      	str	r3, [r7, #12]
  while (*p != ts)  /* find previous element */
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	683a      	ldr	r2, [r7, #0]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d1f6      	bne.n	800e6a4 <luaS_remove+0x2a>
  *p = (*p)->u.hnext;  /* remove element from its list */
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68da      	ldr	r2, [r3, #12]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	601a      	str	r2, [r3, #0]
  tb->nuse--;
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	1e5a      	subs	r2, r3, #1
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	605a      	str	r2, [r3, #4]
}
 800e6ca:	bf00      	nop
 800e6cc:	3714      	adds	r7, #20
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <growstrtab>:


static void growstrtab (lua_State *L, stringtable *tb) {
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b082      	sub	sp, #8
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	6039      	str	r1, [r7, #0]
  if (l_unlikely(tb->nuse == MAX_INT)) {  /* too many strings? */
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	bf0c      	ite	eq
 800e6ec:	2301      	moveq	r3, #1
 800e6ee:	2300      	movne	r3, #0
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00d      	beq.n	800e712 <growstrtab+0x3c>
    luaC_fullgc(L, 1);  /* try to free some... */
 800e6f6:	2101      	movs	r1, #1
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7fe fb0d 	bl	800cd18 <luaC_fullgc>
    if (tb->nuse == MAX_INT)  /* still too many? */
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e706:	4293      	cmp	r3, r2
 800e708:	d103      	bne.n	800e712 <growstrtab+0x3c>
      luaM_error(L);  /* cannot even create a message... */
 800e70a:	2104      	movs	r1, #4
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7fa fe09 	bl	8009324 <luaD_throw>
  }
  if (tb->size <= MAXSTRTB / 2)  /* can grow string table? */
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e71a:	da06      	bge.n	800e72a <growstrtab+0x54>
    luaS_resize(L, tb->size * 2);
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	4619      	mov	r1, r3
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff fea0 	bl	800e46a <luaS_resize>
}
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <internshrstr>:


/*
** Checks whether short string exists and reuses it or creates a new one.
*/
static TString *internshrstr (lua_State *L, const char *str, size_t l) {
 800e732:	b580      	push	{r7, lr}
 800e734:	b08a      	sub	sp, #40	; 0x28
 800e736:	af00      	add	r7, sp, #0
 800e738:	60f8      	str	r0, [r7, #12]
 800e73a:	60b9      	str	r1, [r7, #8]
 800e73c:	607a      	str	r2, [r7, #4]
  TString *ts;
  global_State *g = G(L);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	61fb      	str	r3, [r7, #28]
  stringtable *tb = &g->strt;
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	3318      	adds	r3, #24
 800e748:	61bb      	str	r3, [r7, #24]
  unsigned int h = luaS_hash(str, l, g->seed);
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74e:	461a      	mov	r2, r3
 800e750:	6879      	ldr	r1, [r7, #4]
 800e752:	68b8      	ldr	r0, [r7, #8]
 800e754:	f7ff fdf4 	bl	800e340 <luaS_hash>
 800e758:	6178      	str	r0, [r7, #20]
  TString **list = &tb->hash[lmod(h, tb->size)];
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	3b01      	subs	r3, #1
 800e764:	4619      	mov	r1, r3
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	400b      	ands	r3, r1
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	4413      	add	r3, r2
 800e76e:	623b      	str	r3, [r7, #32]
  lua_assert(str != NULL);  /* otherwise 'memcmp'/'memcpy' are undefined */
  for (ts = *list; ts != NULL; ts = ts->u.hnext) {
 800e770:	6a3b      	ldr	r3, [r7, #32]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	627b      	str	r3, [r7, #36]	; 0x24
 800e776:	e027      	b.n	800e7c8 <internshrstr+0x96>
    if (l == ts->shrlen && (memcmp(str, getstr(ts), l * sizeof(char)) == 0)) {
 800e778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77a:	79db      	ldrb	r3, [r3, #7]
 800e77c:	461a      	mov	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4293      	cmp	r3, r2
 800e782:	d11e      	bne.n	800e7c2 <internshrstr+0x90>
 800e784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e786:	3310      	adds	r3, #16
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	4619      	mov	r1, r3
 800e78c:	68b8      	ldr	r0, [r7, #8]
 800e78e:	f010 fa3f 	bl	801ec10 <memcmp>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d114      	bne.n	800e7c2 <internshrstr+0x90>
      /* found! */
      if (isdead(g, ts))  /* dead (but not collected yet)? */
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	795a      	ldrb	r2, [r3, #5]
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e7a2:	f083 0318 	eor.w	r3, r3, #24
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d006      	beq.n	800e7be <internshrstr+0x8c>
        changewhite(ts);  /* resurrect it */
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	795b      	ldrb	r3, [r3, #5]
 800e7b4:	f083 0318 	eor.w	r3, r3, #24
 800e7b8:	b2da      	uxtb	r2, r3
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	715a      	strb	r2, [r3, #5]
      return ts;
 800e7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c0:	e039      	b.n	800e836 <internshrstr+0x104>
  for (ts = *list; ts != NULL; ts = ts->u.hnext) {
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1d4      	bne.n	800e778 <internshrstr+0x46>
    }
  }
  /* else must create a new string */
  if (tb->nuse >= tb->size) {  /* need to grow string table? */
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	db0e      	blt.n	800e7f8 <internshrstr+0xc6>
    growstrtab(L, tb);
 800e7da:	69b9      	ldr	r1, [r7, #24]
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f7ff ff7a 	bl	800e6d6 <growstrtab>
    list = &tb->hash[lmod(h, tb->size)];  /* rehash with new size */
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	3b01      	subs	r3, #1
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	400b      	ands	r3, r1
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4413      	add	r3, r2
 800e7f6:	623b      	str	r3, [r7, #32]
  }
  ts = createstrobj(L, l, LUA_VSHRSTR, h);
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2204      	movs	r2, #4
 800e7fc:	6879      	ldr	r1, [r7, #4]
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f7ff ff02 	bl	800e608 <createstrobj>
 800e804:	6278      	str	r0, [r7, #36]	; 0x24
  memcpy(getstr(ts), str, l * sizeof(char));
 800e806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e808:	3310      	adds	r3, #16
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	68b9      	ldr	r1, [r7, #8]
 800e80e:	4618      	mov	r0, r3
 800e810:	f010 fa0e 	bl	801ec30 <memcpy>
  ts->shrlen = cast_byte(l);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	b2da      	uxtb	r2, r3
 800e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81a:	71da      	strb	r2, [r3, #7]
  ts->u.hnext = *list;
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	60da      	str	r2, [r3, #12]
  *list = ts;
 800e824:	6a3b      	ldr	r3, [r7, #32]
 800e826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e828:	601a      	str	r2, [r3, #0]
  tb->nuse++;
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	1c5a      	adds	r2, r3, #1
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	605a      	str	r2, [r3, #4]
  return ts;
 800e834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e836:	4618      	mov	r0, r3
 800e838:	3728      	adds	r7, #40	; 0x28
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
	...

0800e840 <luaS_newlstr>:


/*
** new string (with explicit length)
*/
TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
  if (l <= LUAI_MAXSHORTLEN)  /* short string? */
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2b28      	cmp	r3, #40	; 0x28
 800e850:	d806      	bhi.n	800e860 <luaS_newlstr+0x20>
    return internshrstr(L, str, l);
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	68b9      	ldr	r1, [r7, #8]
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f7ff ff6b 	bl	800e732 <internshrstr>
 800e85c:	4603      	mov	r3, r0
 800e85e:	e018      	b.n	800e892 <luaS_newlstr+0x52>
  else {
    TString *ts;
    if (l_unlikely(l >= (MAX_SIZE - sizeof(TString))/sizeof(char)))
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a0e      	ldr	r2, [pc, #56]	; (800e89c <luaS_newlstr+0x5c>)
 800e864:	4293      	cmp	r3, r2
 800e866:	bf8c      	ite	hi
 800e868:	2301      	movhi	r3, #1
 800e86a:	2300      	movls	r3, #0
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <luaS_newlstr+0x38>
      luaM_toobig(L);
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f7fe faaa 	bl	800cdcc <luaM_toobig>
    ts = luaS_createlngstrobj(L, l);
 800e878:	6879      	ldr	r1, [r7, #4]
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f7ff fee7 	bl	800e64e <luaS_createlngstrobj>
 800e880:	6178      	str	r0, [r7, #20]
    memcpy(getstr(ts), str, l * sizeof(char));
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	3310      	adds	r3, #16
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	68b9      	ldr	r1, [r7, #8]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f010 f9d0 	bl	801ec30 <memcpy>
    return ts;
 800e890:	697b      	ldr	r3, [r7, #20]
  }
}
 800e892:	4618      	mov	r0, r3
 800e894:	3718      	adds	r7, #24
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	7fffffea 	.word	0x7fffffea

0800e8a0 <luaS_new>:
** Create or reuse a zero-terminated string, first checking in the
** cache (using the string address as a key). The cache can contain
** only zero-terminated strings, so it is safe to use 'strcmp' to
** check hits.
*/
TString *luaS_new (lua_State *L, const char *str) {
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b086      	sub	sp, #24
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  unsigned int i = point2uint(str) % STRCACHE_N;  /* hash */
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	4a2b      	ldr	r2, [pc, #172]	; (800e95c <luaS_new+0xbc>)
 800e8ae:	fba2 1203 	umull	r1, r2, r2, r3
 800e8b2:	1a99      	subs	r1, r3, r2
 800e8b4:	0849      	lsrs	r1, r1, #1
 800e8b6:	440a      	add	r2, r1
 800e8b8:	0952      	lsrs	r2, r2, #5
 800e8ba:	2135      	movs	r1, #53	; 0x35
 800e8bc:	fb01 f202 	mul.w	r2, r1, r2
 800e8c0:	1a9b      	subs	r3, r3, r2
 800e8c2:	613b      	str	r3, [r7, #16]
  int j;
  TString **p = G(L)->strcache[i];
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	691a      	ldr	r2, [r3, #16]
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	3324      	adds	r3, #36	; 0x24
 800e8cc:	00db      	lsls	r3, r3, #3
 800e8ce:	4413      	add	r3, r2
 800e8d0:	60fb      	str	r3, [r7, #12]
  for (j = 0; j < STRCACHE_M; j++) {
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	617b      	str	r3, [r7, #20]
 800e8d6:	e015      	b.n	800e904 <luaS_new+0x64>
    if (strcmp(str, getstr(p[j])) == 0)  /* hit? */
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	4413      	add	r3, r2
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3310      	adds	r3, #16
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	6838      	ldr	r0, [r7, #0]
 800e8e8:	f7f1 fcd0 	bl	800028c <strcmp>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d105      	bne.n	800e8fe <luaS_new+0x5e>
      return p[j];  /* that is it */
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	e029      	b.n	800e952 <luaS_new+0xb2>
  for (j = 0; j < STRCACHE_M; j++) {
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	3301      	adds	r3, #1
 800e902:	617b      	str	r3, [r7, #20]
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	2b01      	cmp	r3, #1
 800e908:	dde6      	ble.n	800e8d8 <luaS_new+0x38>
  }
  /* normal route */
  for (j = STRCACHE_M - 1; j > 0; j--)
 800e90a:	2301      	movs	r3, #1
 800e90c:	617b      	str	r3, [r7, #20]
 800e90e:	e00f      	b.n	800e930 <luaS_new+0x90>
    p[j] = p[j - 1];  /* move out last element */
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e916:	3b01      	subs	r3, #1
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	441a      	add	r2, r3
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	68f9      	ldr	r1, [r7, #12]
 800e924:	440b      	add	r3, r1
 800e926:	6812      	ldr	r2, [r2, #0]
 800e928:	601a      	str	r2, [r3, #0]
  for (j = STRCACHE_M - 1; j > 0; j--)
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	617b      	str	r3, [r7, #20]
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	2b00      	cmp	r3, #0
 800e934:	dcec      	bgt.n	800e910 <luaS_new+0x70>
  /* new element is first in the list */
  p[0] = luaS_newlstr(L, str, strlen(str));
 800e936:	6838      	ldr	r0, [r7, #0]
 800e938:	f7f1 fcb2 	bl	80002a0 <strlen>
 800e93c:	4603      	mov	r3, r0
 800e93e:	461a      	mov	r2, r3
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff ff7c 	bl	800e840 <luaS_newlstr>
 800e948:	4602      	mov	r2, r0
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	601a      	str	r2, [r3, #0]
  return p[0];
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
}
 800e952:	4618      	mov	r0, r3
 800e954:	3718      	adds	r7, #24
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	3521cfb3 	.word	0x3521cfb3

0800e960 <hashint>:
** Hash for integers. To allow a good hash, use the remainder operator
** ('%'). If integer fits as a non-negative int, compute an int
** remainder, which is faster. Otherwise, use an unsigned-integer
** remainder, which uses all bits and ensures a non-negative result.
*/
static Node *hashint (const Table *t, lua_Integer i) {
 800e960:	b480      	push	{r7}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
  lua_Unsigned ui = l_castS2U(i);
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	60fb      	str	r3, [r7, #12]
  if (ui <= (unsigned int)INT_MAX)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2b00      	cmp	r3, #0
 800e972:	db12      	blt.n	800e99a <hashint+0x3a>
    return hashmod(t, cast_int(ui));
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6919      	ldr	r1, [r3, #16]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	79d2      	ldrb	r2, [r2, #7]
 800e97e:	4610      	mov	r0, r2
 800e980:	2201      	movs	r2, #1
 800e982:	4082      	lsls	r2, r0
 800e984:	3a01      	subs	r2, #1
 800e986:	f042 0201 	orr.w	r2, r2, #1
 800e98a:	fb93 f0f2 	sdiv	r0, r3, r2
 800e98e:	fb00 f202 	mul.w	r2, r0, r2
 800e992:	1a9b      	subs	r3, r3, r2
 800e994:	011b      	lsls	r3, r3, #4
 800e996:	440b      	add	r3, r1
 800e998:	e012      	b.n	800e9c0 <hashint+0x60>
  else
    return hashmod(t, ui);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6919      	ldr	r1, [r3, #16]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	79db      	ldrb	r3, [r3, #7]
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	4093      	lsls	r3, r2
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	f043 0301 	orr.w	r3, r3, #1
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9b6:	fb00 f202 	mul.w	r2, r0, r2
 800e9ba:	1a9b      	subs	r3, r3, r2
 800e9bc:	011b      	lsls	r3, r3, #4
 800e9be:	440b      	add	r3, r1
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3714      	adds	r7, #20
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <l_hashfloat>:
** to INT_MAX. Next, the use of 'unsigned int' avoids overflows when
** adding 'i'; the use of '~u' (instead of '-u') avoids problems with
** INT_MIN.
*/
#if !defined(l_hashfloat)
static int l_hashfloat (lua_Number n) {
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	ed87 0a01 	vstr	s0, [r7, #4]
  int i;
  lua_Integer ni;
  n = l_mathop(frexp)(n, &i) * -cast_num(INT_MIN);
 800e9d6:	f107 0310 	add.w	r3, r7, #16
 800e9da:	4618      	mov	r0, r3
 800e9dc:	ed97 0a01 	vldr	s0, [r7, #4]
 800e9e0:	f00f f8c6 	bl	801db70 <frexpf>
 800e9e4:	eef0 7a40 	vmov.f32	s15, s0
 800e9e8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800ea6c <l_hashfloat+0xa0>
 800e9ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9f0:	edc7 7a01 	vstr	s15, [r7, #4]
  if (!lua_numbertointeger(n, &ni)) {  /* is 'n' inf/-inf/NaN? */
 800e9f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800e9f8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800ea70 <l_hashfloat+0xa4>
 800e9fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea04:	bfac      	ite	ge
 800ea06:	2301      	movge	r3, #1
 800ea08:	2300      	movlt	r3, #0
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	f083 0301 	eor.w	r3, r3, #1
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d120      	bne.n	800ea58 <l_hashfloat+0x8c>
 800ea16:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea1a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800ea6c <l_hashfloat+0xa0>
 800ea1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea26:	bf4c      	ite	mi
 800ea28:	2301      	movmi	r3, #1
 800ea2a:	2300      	movpl	r3, #0
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	f083 0301 	eor.w	r3, r3, #1
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d10f      	bne.n	800ea58 <l_hashfloat+0x8c>
 800ea38:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea40:	ee17 3a90 	vmov	r3, s15
 800ea44:	60fb      	str	r3, [r7, #12]
    lua_assert(luai_numisnan(n) || l_mathop(fabs)(n) == cast_num(HUGE_VAL));
    return 0;
  }
  else {  /* normal case */
    unsigned int u = cast_uint(i) + cast_uint(ni);
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	617b      	str	r3, [r7, #20]
    return cast_int(u <= cast_uint(INT_MAX) ? u : ~u);
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	da05      	bge.n	800ea62 <l_hashfloat+0x96>
 800ea56:	e001      	b.n	800ea5c <l_hashfloat+0x90>
    return 0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	e003      	b.n	800ea64 <l_hashfloat+0x98>
    return cast_int(u <= cast_uint(INT_MAX) ? u : ~u);
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	43db      	mvns	r3, r3
 800ea60:	e000      	b.n	800ea64 <l_hashfloat+0x98>
 800ea62:	697b      	ldr	r3, [r7, #20]
  }
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	4f000000 	.word	0x4f000000
 800ea70:	cf000000 	.word	0xcf000000

0800ea74 <mainpositionTV>:

/*
** returns the 'main' position of an element in a table (that is,
** the index of its hash value).
*/
static Node *mainpositionTV (const Table *t, const TValue *key) {
 800ea74:	b590      	push	{r4, r7, lr}
 800ea76:	b08b      	sub	sp, #44	; 0x2c
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  switch (ttypetag(key)) {
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	791b      	ldrb	r3, [r3, #4]
 800ea82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea86:	3b01      	subs	r3, #1
 800ea88:	2b15      	cmp	r3, #21
 800ea8a:	f200 80b2 	bhi.w	800ebf2 <mainpositionTV+0x17e>
 800ea8e:	a201      	add	r2, pc, #4	; (adr r2, 800ea94 <mainpositionTV+0x20>)
 800ea90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea94:	0800eb7b 	.word	0x0800eb7b
 800ea98:	0800eb9b 	.word	0x0800eb9b
 800ea9c:	0800eaed 	.word	0x0800eaed
 800eaa0:	0800eb33 	.word	0x0800eb33
 800eaa4:	0800ebf3 	.word	0x0800ebf3
 800eaa8:	0800ebf3 	.word	0x0800ebf3
 800eaac:	0800ebf3 	.word	0x0800ebf3
 800eab0:	0800ebf3 	.word	0x0800ebf3
 800eab4:	0800ebf3 	.word	0x0800ebf3
 800eab8:	0800ebf3 	.word	0x0800ebf3
 800eabc:	0800ebf3 	.word	0x0800ebf3
 800eac0:	0800ebf3 	.word	0x0800ebf3
 800eac4:	0800ebf3 	.word	0x0800ebf3
 800eac8:	0800ebf3 	.word	0x0800ebf3
 800eacc:	0800ebf3 	.word	0x0800ebf3
 800ead0:	0800ebf3 	.word	0x0800ebf3
 800ead4:	0800eb81 	.word	0x0800eb81
 800ead8:	0800ebf3 	.word	0x0800ebf3
 800eadc:	0800eaff 	.word	0x0800eaff
 800eae0:	0800eb55 	.word	0x0800eb55
 800eae4:	0800ebf3 	.word	0x0800ebf3
 800eae8:	0800ebc7 	.word	0x0800ebc7
    case LUA_VNUMINT: {
      lua_Integer i = ivalue(key);
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	617b      	str	r3, [r7, #20]
      return hashint(t, i);
 800eaf2:	6979      	ldr	r1, [r7, #20]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff ff33 	bl	800e960 <hashint>
 800eafa:	4603      	mov	r3, r0
 800eafc:	e08e      	b.n	800ec1c <mainpositionTV+0x1a8>
    }
    case LUA_VNUMFLT: {
      lua_Number n = fltvalue(key);
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	61fb      	str	r3, [r7, #28]
      return hashmod(t, l_hashfloat(n));
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	691c      	ldr	r4, [r3, #16]
 800eb08:	ed97 0a07 	vldr	s0, [r7, #28]
 800eb0c:	f7ff ff5e 	bl	800e9cc <l_hashfloat>
 800eb10:	4602      	mov	r2, r0
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	79db      	ldrb	r3, [r3, #7]
 800eb16:	4619      	mov	r1, r3
 800eb18:	2301      	movs	r3, #1
 800eb1a:	408b      	lsls	r3, r1
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	f043 0301 	orr.w	r3, r3, #1
 800eb22:	fb92 f1f3 	sdiv	r1, r2, r3
 800eb26:	fb01 f303 	mul.w	r3, r1, r3
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	011b      	lsls	r3, r3, #4
 800eb2e:	4423      	add	r3, r4
 800eb30:	e074      	b.n	800ec1c <mainpositionTV+0x1a8>
    }
    case LUA_VSHRSTR: {
      TString *ts = tsvalue(key);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	61bb      	str	r3, [r7, #24]
      return hashstr(t, ts);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	691a      	ldr	r2, [r3, #16]
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	689b      	ldr	r3, [r3, #8]
 800eb40:	6879      	ldr	r1, [r7, #4]
 800eb42:	79c9      	ldrb	r1, [r1, #7]
 800eb44:	4608      	mov	r0, r1
 800eb46:	2101      	movs	r1, #1
 800eb48:	4081      	lsls	r1, r0
 800eb4a:	3901      	subs	r1, #1
 800eb4c:	400b      	ands	r3, r1
 800eb4e:	011b      	lsls	r3, r3, #4
 800eb50:	4413      	add	r3, r2
 800eb52:	e063      	b.n	800ec1c <mainpositionTV+0x1a8>
    }
    case LUA_VLNGSTR: {
      TString *ts = tsvalue(key);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	623b      	str	r3, [r7, #32]
      return hashpow2(t, luaS_hashlongstr(ts));
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	691c      	ldr	r4, [r3, #16]
 800eb5e:	6a38      	ldr	r0, [r7, #32]
 800eb60:	f7ff fc14 	bl	800e38c <luaS_hashlongstr>
 800eb64:	4602      	mov	r2, r0
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	79db      	ldrb	r3, [r3, #7]
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	408b      	lsls	r3, r1
 800eb70:	3b01      	subs	r3, #1
 800eb72:	4013      	ands	r3, r2
 800eb74:	011b      	lsls	r3, r3, #4
 800eb76:	4423      	add	r3, r4
 800eb78:	e050      	b.n	800ec1c <mainpositionTV+0x1a8>
    }
    case LUA_VFALSE:
      return hashboolean(t, 0);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	691b      	ldr	r3, [r3, #16]
 800eb7e:	e04d      	b.n	800ec1c <mainpositionTV+0x1a8>
    case LUA_VTRUE:
      return hashboolean(t, 1);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	691a      	ldr	r2, [r3, #16]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	79db      	ldrb	r3, [r3, #7]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	408b      	lsls	r3, r1
 800eb8e:	3b01      	subs	r3, #1
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	4413      	add	r3, r2
 800eb98:	e040      	b.n	800ec1c <mainpositionTV+0x1a8>
    case LUA_VLIGHTUSERDATA: {
      void *p = pvalue(key);
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	613b      	str	r3, [r7, #16]
      return hashpointer(t, p);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6919      	ldr	r1, [r3, #16]
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	79d2      	ldrb	r2, [r2, #7]
 800ebaa:	4610      	mov	r0, r2
 800ebac:	2201      	movs	r2, #1
 800ebae:	4082      	lsls	r2, r0
 800ebb0:	3a01      	subs	r2, #1
 800ebb2:	f042 0201 	orr.w	r2, r2, #1
 800ebb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebba:	fb00 f202 	mul.w	r2, r0, r2
 800ebbe:	1a9b      	subs	r3, r3, r2
 800ebc0:	011b      	lsls	r3, r3, #4
 800ebc2:	440b      	add	r3, r1
 800ebc4:	e02a      	b.n	800ec1c <mainpositionTV+0x1a8>
    }
    case LUA_VLCF: {
      lua_CFunction f = fvalue(key);
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	627b      	str	r3, [r7, #36]	; 0x24
      return hashpointer(t, f);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6919      	ldr	r1, [r3, #16]
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	79d2      	ldrb	r2, [r2, #7]
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	2201      	movs	r2, #1
 800ebda:	4082      	lsls	r2, r0
 800ebdc:	3a01      	subs	r2, #1
 800ebde:	f042 0201 	orr.w	r2, r2, #1
 800ebe2:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebe6:	fb00 f202 	mul.w	r2, r0, r2
 800ebea:	1a9b      	subs	r3, r3, r2
 800ebec:	011b      	lsls	r3, r3, #4
 800ebee:	440b      	add	r3, r1
 800ebf0:	e014      	b.n	800ec1c <mainpositionTV+0x1a8>
    }
    default: {
      GCObject *o = gcvalue(key);
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	60fb      	str	r3, [r7, #12]
      return hashpointer(t, o);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6919      	ldr	r1, [r3, #16]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	79d2      	ldrb	r2, [r2, #7]
 800ec02:	4610      	mov	r0, r2
 800ec04:	2201      	movs	r2, #1
 800ec06:	4082      	lsls	r2, r0
 800ec08:	3a01      	subs	r2, #1
 800ec0a:	f042 0201 	orr.w	r2, r2, #1
 800ec0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec12:	fb00 f202 	mul.w	r2, r0, r2
 800ec16:	1a9b      	subs	r3, r3, r2
 800ec18:	011b      	lsls	r3, r3, #4
 800ec1a:	440b      	add	r3, r1
    }
  }
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	372c      	adds	r7, #44	; 0x2c
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd90      	pop	{r4, r7, pc}

0800ec24 <mainpositionfromnode>:


l_sinline Node *mainpositionfromnode (const Table *t, Node *nd) {
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b086      	sub	sp, #24
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
  TValue key;
  getnodekey(cast(lua_State *, NULL), &key, nd);
 800ec2e:	f107 0308 	add.w	r3, r7, #8
 800ec32:	617b      	str	r3, [r7, #20]
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	613b      	str	r3, [r7, #16]
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	693a      	ldr	r2, [r7, #16]
 800ec3c:	68d2      	ldr	r2, [r2, #12]
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	795a      	ldrb	r2, [r3, #5]
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	711a      	strb	r2, [r3, #4]
  return mainpositionTV(t, &key);
 800ec48:	f107 0308 	add.w	r3, r7, #8
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7ff ff10 	bl	800ea74 <mainpositionTV>
 800ec54:	4603      	mov	r3, r0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3718      	adds	r7, #24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
	...

0800ec60 <equalkey>:
** could not have been collected. Outside a regular traversal, we
** have garbage in, garbage out. What is relevant is that this false
** positive does not break anything.  (In particular, 'next' will return
** some other valid item on the table or nil.)
*/
static int equalkey (const TValue *k1, const Node *n2, int deadok) {
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
  if ((rawtt(k1) != keytt(n2)) &&  /* not the same variants? */
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	791a      	ldrb	r2, [r3, #4]
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	795b      	ldrb	r3, [r3, #5]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d00e      	beq.n	800ec96 <equalkey+0x36>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d009      	beq.n	800ec92 <equalkey+0x32>
       !(deadok && keyisdead(n2) && iscollectable(k1)))
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	795b      	ldrb	r3, [r3, #5]
 800ec82:	2b0b      	cmp	r3, #11
 800ec84:	d105      	bne.n	800ec92 <equalkey+0x32>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	791b      	ldrb	r3, [r3, #4]
 800ec8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d101      	bne.n	800ec96 <equalkey+0x36>
   return 0;  /* cannot be same key */
 800ec92:	2300      	movs	r3, #0
 800ec94:	e07e      	b.n	800ed94 <equalkey+0x134>
  switch (keytt(n2)) {
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	795b      	ldrb	r3, [r3, #5]
 800ec9a:	2b16      	cmp	r3, #22
 800ec9c:	dc34      	bgt.n	800ed08 <equalkey+0xa8>
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	db6f      	blt.n	800ed82 <equalkey+0x122>
 800eca2:	2b16      	cmp	r3, #22
 800eca4:	d86d      	bhi.n	800ed82 <equalkey+0x122>
 800eca6:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <equalkey+0x4c>)
 800eca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecac:	0800ed0f 	.word	0x0800ed0f
 800ecb0:	0800ed0f 	.word	0x0800ed0f
 800ecb4:	0800ed45 	.word	0x0800ed45
 800ecb8:	0800ed13 	.word	0x0800ed13
 800ecbc:	0800ed83 	.word	0x0800ed83
 800ecc0:	0800ed83 	.word	0x0800ed83
 800ecc4:	0800ed83 	.word	0x0800ed83
 800ecc8:	0800ed83 	.word	0x0800ed83
 800eccc:	0800ed83 	.word	0x0800ed83
 800ecd0:	0800ed83 	.word	0x0800ed83
 800ecd4:	0800ed83 	.word	0x0800ed83
 800ecd8:	0800ed83 	.word	0x0800ed83
 800ecdc:	0800ed83 	.word	0x0800ed83
 800ece0:	0800ed83 	.word	0x0800ed83
 800ece4:	0800ed83 	.word	0x0800ed83
 800ece8:	0800ed83 	.word	0x0800ed83
 800ecec:	0800ed83 	.word	0x0800ed83
 800ecf0:	0800ed0f 	.word	0x0800ed0f
 800ecf4:	0800ed83 	.word	0x0800ed83
 800ecf8:	0800ed27 	.word	0x0800ed27
 800ecfc:	0800ed83 	.word	0x0800ed83
 800ed00:	0800ed83 	.word	0x0800ed83
 800ed04:	0800ed59 	.word	0x0800ed59
 800ed08:	2b54      	cmp	r3, #84	; 0x54
 800ed0a:	d02f      	beq.n	800ed6c <equalkey+0x10c>
 800ed0c:	e039      	b.n	800ed82 <equalkey+0x122>
    case LUA_VNIL: case LUA_VFALSE: case LUA_VTRUE:
      return 1;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e040      	b.n	800ed94 <equalkey+0x134>
    case LUA_VNUMINT:
      return (ivalue(k1) == keyival(n2));
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	68db      	ldr	r3, [r3, #12]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	bf0c      	ite	eq
 800ed1e:	2301      	moveq	r3, #1
 800ed20:	2300      	movne	r3, #0
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	e036      	b.n	800ed94 <equalkey+0x134>
    case LUA_VNUMFLT:
      return luai_numeq(fltvalue(k1), fltvalueraw(keyval(n2)));
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	ed93 7a00 	vldr	s14, [r3]
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	edd3 7a03 	vldr	s15, [r3, #12]
 800ed32:	eeb4 7a67 	vcmp.f32	s14, s15
 800ed36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed3a:	bf0c      	ite	eq
 800ed3c:	2301      	moveq	r3, #1
 800ed3e:	2300      	movne	r3, #0
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	e027      	b.n	800ed94 <equalkey+0x134>
    case LUA_VLIGHTUSERDATA:
      return pvalue(k1) == pvalueraw(keyval(n2));
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	bf0c      	ite	eq
 800ed50:	2301      	moveq	r3, #1
 800ed52:	2300      	movne	r3, #0
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	e01d      	b.n	800ed94 <equalkey+0x134>
    case LUA_VLCF:
      return fvalue(k1) == fvalueraw(keyval(n2));
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	bf0c      	ite	eq
 800ed64:	2301      	moveq	r3, #1
 800ed66:	2300      	movne	r3, #0
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	e013      	b.n	800ed94 <equalkey+0x134>
    case ctb(LUA_VLNGSTR):
      return luaS_eqlngstr(tsvalue(k1), keystrval(n2));
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	461a      	mov	r2, r3
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	4619      	mov	r1, r3
 800ed78:	4610      	mov	r0, r2
 800ed7a:	f7ff fabd 	bl	800e2f8 <luaS_eqlngstr>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	e008      	b.n	800ed94 <equalkey+0x134>
    default:
      return gcvalue(k1) == gcvalueraw(keyval(n2));
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	bf0c      	ite	eq
 800ed8e:	2301      	moveq	r3, #1
 800ed90:	2300      	movne	r3, #0
 800ed92:	b2db      	uxtb	r3, r3
  }
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <luaH_realasize>:


/*
** Returns the real size of the 'array' array
*/
LUAI_FUNC unsigned int luaH_realasize (const Table *t) {
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  if (limitequalsasize(t))
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	799b      	ldrb	r3, [r3, #6]
 800eda8:	b25b      	sxtb	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	da07      	bge.n	800edbe <luaH_realasize+0x22>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	689a      	ldr	r2, [r3, #8]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	4013      	ands	r3, r2
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d102      	bne.n	800edc4 <luaH_realasize+0x28>
    return t->alimit;  /* this is the size */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	e01f      	b.n	800ee04 <luaH_realasize+0x68>
  else {
    unsigned int size = t->alimit;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	60fb      	str	r3, [r7, #12]
    /* compute the smallest power of 2 not smaller than 'n' */
    size |= (size >> 1);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	085b      	lsrs	r3, r3, #1
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	4313      	orrs	r3, r2
 800edd2:	60fb      	str	r3, [r7, #12]
    size |= (size >> 2);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	089b      	lsrs	r3, r3, #2
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	4313      	orrs	r3, r2
 800eddc:	60fb      	str	r3, [r7, #12]
    size |= (size >> 4);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	091b      	lsrs	r3, r3, #4
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	4313      	orrs	r3, r2
 800ede6:	60fb      	str	r3, [r7, #12]
    size |= (size >> 8);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	0a1b      	lsrs	r3, r3, #8
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	4313      	orrs	r3, r2
 800edf0:	60fb      	str	r3, [r7, #12]
    size |= (size >> 16);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	0c1b      	lsrs	r3, r3, #16
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	4313      	orrs	r3, r2
 800edfa:	60fb      	str	r3, [r7, #12]
#if (UINT_MAX >> 30) > 3
    size |= (size >> 32);  /* unsigned int has more than 32 bits */
#endif
    size++;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	3301      	adds	r3, #1
 800ee00:	60fb      	str	r3, [r7, #12]
    lua_assert(ispow2(size) && size/2 < t->alimit && t->alimit < size);
    return size;
 800ee02:	68fb      	ldr	r3, [r7, #12]
  }
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <ispow2realasize>:
/*
** Check whether real size of the array is a power of 2.
** (If it is not, 'alimit' cannot be changed to any other value
** without changing the real size.)
*/
static int ispow2realasize (const Table *t) {
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  return (!isrealasize(t) || ispow2(t->alimit));
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	799b      	ldrb	r3, [r3, #6]
 800ee1c:	b25b      	sxtb	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	db07      	blt.n	800ee32 <ispow2realasize+0x22>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	689a      	ldr	r2, [r3, #8]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	4013      	ands	r3, r2
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <ispow2realasize+0x26>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e000      	b.n	800ee38 <ispow2realasize+0x28>
 800ee36:	2300      	movs	r3, #0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <setlimittosize>:


static unsigned int setlimittosize (Table *t) {
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  t->alimit = luaH_realasize(t);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7ff ffa5 	bl	800ed9c <luaH_realasize>
 800ee52:	4602      	mov	r2, r0
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	609a      	str	r2, [r3, #8]
  setrealasize(t);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	799b      	ldrb	r3, [r3, #6]
 800ee5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee60:	b2da      	uxtb	r2, r3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	719a      	strb	r2, [r3, #6]
  return t->alimit;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	689b      	ldr	r3, [r3, #8]
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
	...

0800ee74 <getgeneric>:
/*
** "Generic" get version. (Not that generic: not valid for integers,
** which may be in array part, nor for floats with integral values.)
** See explanation about 'deadok' in function 'equalkey'.
*/
static const TValue *getgeneric (Table *t, const TValue *key, int deadok) {
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
  Node *n = mainpositionTV(t, key);
 800ee80:	68b9      	ldr	r1, [r7, #8]
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f7ff fdf6 	bl	800ea74 <mainpositionTV>
 800ee88:	6178      	str	r0, [r7, #20]
  for (;;) {  /* check whether 'key' is somewhere in the chain */
    if (equalkey(key, n, deadok))
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	6979      	ldr	r1, [r7, #20]
 800ee8e:	68b8      	ldr	r0, [r7, #8]
 800ee90:	f7ff fee6 	bl	800ec60 <equalkey>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <getgeneric+0x2a>
      return gval(n);  /* that's it */
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	e00d      	b.n	800eeba <getgeneric+0x46>
    else {
      int nx = gnext(n);
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	613b      	str	r3, [r7, #16]
      if (nx == 0)
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d101      	bne.n	800eeae <getgeneric+0x3a>
        return &absentkey;  /* not found */
 800eeaa:	4b06      	ldr	r3, [pc, #24]	; (800eec4 <getgeneric+0x50>)
 800eeac:	e005      	b.n	800eeba <getgeneric+0x46>
      n += nx;
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	011b      	lsls	r3, r3, #4
 800eeb2:	697a      	ldr	r2, [r7, #20]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	617b      	str	r3, [r7, #20]
    if (equalkey(key, n, deadok))
 800eeb8:	e7e7      	b.n	800ee8a <getgeneric+0x16>
    }
  }
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3718      	adds	r7, #24
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	08022c94 	.word	0x08022c94

0800eec8 <arrayindex>:

/*
** returns the index for 'k' if 'k' is an appropriate key to live in
** the array part of a table, 0 otherwise.
*/
static unsigned int arrayindex (lua_Integer k) {
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  if (l_castS2U(k) - 1u < MAXASIZE)  /* 'k' in [1, MAXASIZE]? */
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3b01      	subs	r3, #1
 800eed4:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d201      	bcs.n	800eee0 <arrayindex+0x18>
    return cast_uint(k);  /* 'key' is an appropriate array index */
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	e000      	b.n	800eee2 <arrayindex+0x1a>
  else
    return 0;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	370c      	adds	r7, #12
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr

0800eeee <freehash>:
  }
  return 0;  /* no more elements */
}


static void freehash (lua_State *L, Table *t) {
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b082      	sub	sp, #8
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
 800eef6:	6039      	str	r1, [r7, #0]
  if (!isdummy(t))
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	695b      	ldr	r3, [r3, #20]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00a      	beq.n	800ef16 <freehash+0x28>
    luaM_freearray(L, t->node, cast_sizet(sizenode(t)));
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	6919      	ldr	r1, [r3, #16]
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	79db      	ldrb	r3, [r3, #7]
 800ef08:	461a      	mov	r2, r3
 800ef0a:	2310      	movs	r3, #16
 800ef0c:	4093      	lsls	r3, r2
 800ef0e:	461a      	mov	r2, r3
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7fd ff65 	bl	800cde0 <luaM_free_>
}
 800ef16:	bf00      	nop
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <computesizes>:
** between 2^(i - 1) + 1 and 2^i. 'pna' enters with the total number of
** integer keys in the table and leaves with the number of keys that
** will go to the array part; return the optimal size.  (The condition
** 'twotoi > 0' in the for loop stops the loop if 'twotoi' overflows.)
*/
static unsigned int computesizes (unsigned int nums[], unsigned int *pna) {
 800ef1e:	b480      	push	{r7}
 800ef20:	b089      	sub	sp, #36	; 0x24
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	6039      	str	r1, [r7, #0]
  int i;
  unsigned int twotoi;  /* 2^i (candidate for optimal size) */
  unsigned int a = 0;  /* number of elements smaller than 2^i */
 800ef28:	2300      	movs	r3, #0
 800ef2a:	617b      	str	r3, [r7, #20]
  unsigned int na = 0;  /* number of elements to go to array part */
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	613b      	str	r3, [r7, #16]
  unsigned int optimal = 0;  /* optimal size for array part */
 800ef30:	2300      	movs	r3, #0
 800ef32:	60fb      	str	r3, [r7, #12]
  /* loop while keys can fill more than half of total size */
  for (i = 0, twotoi = 1;
 800ef34:	2300      	movs	r3, #0
 800ef36:	61fb      	str	r3, [r7, #28]
 800ef38:	2301      	movs	r3, #1
 800ef3a:	61bb      	str	r3, [r7, #24]
 800ef3c:	e016      	b.n	800ef6c <computesizes+0x4e>
       twotoi > 0 && *pna > twotoi / 2;
       i++, twotoi *= 2) {
    a += nums[i];
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	4413      	add	r3, r2
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	697a      	ldr	r2, [r7, #20]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	617b      	str	r3, [r7, #20]
    if (a > twotoi/2) {  /* more than half elements present? */
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	085b      	lsrs	r3, r3, #1
 800ef52:	697a      	ldr	r2, [r7, #20]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d903      	bls.n	800ef60 <computesizes+0x42>
      optimal = twotoi;  /* optimal size (till now) */
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	60fb      	str	r3, [r7, #12]
      na = a;  /* all elements up to 'optimal' will go to array part */
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	613b      	str	r3, [r7, #16]
       i++, twotoi *= 2) {
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	3301      	adds	r3, #1
 800ef64:	61fb      	str	r3, [r7, #28]
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	005b      	lsls	r3, r3, #1
 800ef6a:	61bb      	str	r3, [r7, #24]
  for (i = 0, twotoi = 1;
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d005      	beq.n	800ef7e <computesizes+0x60>
       twotoi > 0 && *pna > twotoi / 2;
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	085b      	lsrs	r3, r3, #1
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d8df      	bhi.n	800ef3e <computesizes+0x20>
    }
  }
  lua_assert((optimal == 0 || optimal / 2 < na) && na <= optimal);
  *pna = na;
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	693a      	ldr	r2, [r7, #16]
 800ef82:	601a      	str	r2, [r3, #0]
  return optimal;
 800ef84:	68fb      	ldr	r3, [r7, #12]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3724      	adds	r7, #36	; 0x24
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr

0800ef92 <countint>:


static int countint (lua_Integer key, unsigned int *nums) {
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b084      	sub	sp, #16
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	6039      	str	r1, [r7, #0]
  unsigned int k = arrayindex(key);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff ff93 	bl	800eec8 <arrayindex>
 800efa2:	60f8      	str	r0, [r7, #12]
  if (k != 0) {  /* is 'key' an appropriate array index? */
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d00b      	beq.n	800efc2 <countint+0x30>
    nums[luaO_ceillog2(k)]++;  /* count as such */
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f7fd ffd6 	bl	800cf5c <luaO_ceillog2>
 800efb0:	4603      	mov	r3, r0
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	683a      	ldr	r2, [r7, #0]
 800efb6:	4413      	add	r3, r2
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	3201      	adds	r2, #1
 800efbc:	601a      	str	r2, [r3, #0]
    return 1;
 800efbe:	2301      	movs	r3, #1
 800efc0:	e000      	b.n	800efc4 <countint+0x32>
  }
  else
    return 0;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <numusearray>:
/*
** Count keys in array part of table 't': Fill 'nums[i]' with
** number of keys that will go into corresponding slice and return
** total number of non-nil keys.
*/
static unsigned int numusearray (const Table *t, unsigned int *nums) {
 800efcc:	b480      	push	{r7}
 800efce:	b08b      	sub	sp, #44	; 0x2c
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  int lg;
  unsigned int ttlg;  /* 2^lg */
  unsigned int ause = 0;  /* summation of 'nums' */
 800efd6:	2300      	movs	r3, #0
 800efd8:	61fb      	str	r3, [r7, #28]
  unsigned int i = 1;  /* count to traverse all array keys */
 800efda:	2301      	movs	r3, #1
 800efdc:	61bb      	str	r3, [r7, #24]
  unsigned int asize = limitasasize(t);  /* real array size */
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	60fb      	str	r3, [r7, #12]
  /* traverse each slice */
  for (lg = 0, ttlg = 1; lg <= MAXABITS; lg++, ttlg *= 2) {
 800efe4:	2300      	movs	r3, #0
 800efe6:	627b      	str	r3, [r7, #36]	; 0x24
 800efe8:	2301      	movs	r3, #1
 800efea:	623b      	str	r3, [r7, #32]
 800efec:	e03b      	b.n	800f066 <numusearray+0x9a>
    unsigned int lc = 0;  /* counter */
 800efee:	2300      	movs	r3, #0
 800eff0:	617b      	str	r3, [r7, #20]
    unsigned int lim = ttlg;
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	613b      	str	r3, [r7, #16]
    if (lim > asize) {
 800eff6:	693a      	ldr	r2, [r7, #16]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	429a      	cmp	r2, r3
 800effc:	d919      	bls.n	800f032 <numusearray+0x66>
      lim = asize;  /* adjust upper limit */
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	613b      	str	r3, [r7, #16]
      if (i > lim)
 800f002:	69ba      	ldr	r2, [r7, #24]
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	429a      	cmp	r2, r3
 800f008:	d831      	bhi.n	800f06e <numusearray+0xa2>
        break;  /* no more elements to count */
    }
    /* count elements in range (2^(lg - 1), 2^lg] */
    for (; i <= lim; i++) {
 800f00a:	e012      	b.n	800f032 <numusearray+0x66>
      if (!isempty(&t->array[i-1]))
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	68da      	ldr	r2, [r3, #12]
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f016:	3b01      	subs	r3, #1
 800f018:	00db      	lsls	r3, r3, #3
 800f01a:	4413      	add	r3, r2
 800f01c:	791b      	ldrb	r3, [r3, #4]
 800f01e:	f003 030f 	and.w	r3, r3, #15
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <numusearray+0x60>
        lc++;
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	3301      	adds	r3, #1
 800f02a:	617b      	str	r3, [r7, #20]
    for (; i <= lim; i++) {
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	3301      	adds	r3, #1
 800f030:	61bb      	str	r3, [r7, #24]
 800f032:	69ba      	ldr	r2, [r7, #24]
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	429a      	cmp	r2, r3
 800f038:	d9e8      	bls.n	800f00c <numusearray+0x40>
    }
    nums[lg] += lc;
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	683a      	ldr	r2, [r7, #0]
 800f040:	4413      	add	r3, r2
 800f042:	6819      	ldr	r1, [r3, #0]
 800f044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	683a      	ldr	r2, [r7, #0]
 800f04a:	4413      	add	r3, r2
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	440a      	add	r2, r1
 800f050:	601a      	str	r2, [r3, #0]
    ause += lc;
 800f052:	69fa      	ldr	r2, [r7, #28]
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	4413      	add	r3, r2
 800f058:	61fb      	str	r3, [r7, #28]
  for (lg = 0, ttlg = 1; lg <= MAXABITS; lg++, ttlg *= 2) {
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	3301      	adds	r3, #1
 800f05e:	627b      	str	r3, [r7, #36]	; 0x24
 800f060:	6a3b      	ldr	r3, [r7, #32]
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	623b      	str	r3, [r7, #32]
 800f066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f068:	2b1f      	cmp	r3, #31
 800f06a:	ddc0      	ble.n	800efee <numusearray+0x22>
 800f06c:	e000      	b.n	800f070 <numusearray+0xa4>
        break;  /* no more elements to count */
 800f06e:	bf00      	nop
  }
  return ause;
 800f070:	69fb      	ldr	r3, [r7, #28]
}
 800f072:	4618      	mov	r0, r3
 800f074:	372c      	adds	r7, #44	; 0x2c
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <numusehash>:


static int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {
 800f07e:	b580      	push	{r7, lr}
 800f080:	b088      	sub	sp, #32
 800f082:	af00      	add	r7, sp, #0
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607a      	str	r2, [r7, #4]
  int totaluse = 0;  /* total number of elements */
 800f08a:	2300      	movs	r3, #0
 800f08c:	61fb      	str	r3, [r7, #28]
  int ause = 0;  /* elements added to 'nums' (can go to array part) */
 800f08e:	2300      	movs	r3, #0
 800f090:	61bb      	str	r3, [r7, #24]
  int i = sizenode(t);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	79db      	ldrb	r3, [r3, #7]
 800f096:	461a      	mov	r2, r3
 800f098:	2301      	movs	r3, #1
 800f09a:	4093      	lsls	r3, r2
 800f09c:	617b      	str	r3, [r7, #20]
  while (i--) {
 800f09e:	e01c      	b.n	800f0da <numusehash+0x5c>
    Node *n = &t->node[i];
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	691a      	ldr	r2, [r3, #16]
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	011b      	lsls	r3, r3, #4
 800f0a8:	4413      	add	r3, r2
 800f0aa:	613b      	str	r3, [r7, #16]
    if (!isempty(gval(n))) {
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	791b      	ldrb	r3, [r3, #4]
 800f0b0:	f003 030f 	and.w	r3, r3, #15
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d010      	beq.n	800f0da <numusehash+0x5c>
      if (keyisinteger(n))
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	795b      	ldrb	r3, [r3, #5]
 800f0bc:	2b03      	cmp	r3, #3
 800f0be:	d109      	bne.n	800f0d4 <numusehash+0x56>
        ause += countint(keyival(n), nums);
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	68b9      	ldr	r1, [r7, #8]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7ff ff63 	bl	800ef92 <countint>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	61bb      	str	r3, [r7, #24]
      totaluse++;
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	61fb      	str	r3, [r7, #28]
  while (i--) {
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	1e5a      	subs	r2, r3, #1
 800f0de:	617a      	str	r2, [r7, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1dd      	bne.n	800f0a0 <numusehash+0x22>
    }
  }
  *pna += ause;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	441a      	add	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	601a      	str	r2, [r3, #0]
  return totaluse;
 800f0f0:	69fb      	ldr	r3, [r7, #28]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3720      	adds	r7, #32
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <setnodevector>:
** size, or reuses the dummy node if size is zero.
** The computation for size overflow is in two steps: the first
** comparison ensures that the shift in the second one does not
** overflow.
*/
static void setnodevector (lua_State *L, Table *t, unsigned int size) {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b088      	sub	sp, #32
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
  if (size == 0) {  /* no elements to hash part? */
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d109      	bne.n	800f122 <setnodevector+0x26>
    t->node = cast(Node *, dummynode);  /* use common 'dummynode' */
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	4a28      	ldr	r2, [pc, #160]	; (800f1b4 <setnodevector+0xb8>)
 800f112:	611a      	str	r2, [r3, #16]
    t->lsizenode = 0;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	2200      	movs	r2, #0
 800f118:	71da      	strb	r2, [r3, #7]
    t->lastfree = NULL;  /* signal that it is using dummy node */
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	2200      	movs	r2, #0
 800f11e:	615a      	str	r2, [r3, #20]
      setempty(gval(n));
    }
    t->lsizenode = cast_byte(lsize);
    t->lastfree = gnode(t, size);  /* all positions are free */
  }
}
 800f120:	e044      	b.n	800f1ac <setnodevector+0xb0>
    int lsize = luaO_ceillog2(size);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7fd ff1a 	bl	800cf5c <luaO_ceillog2>
 800f128:	61b8      	str	r0, [r7, #24]
    if (lsize > MAXHBITS || (1u << lsize) > MAXHSIZE)
 800f12a:	69bb      	ldr	r3, [r7, #24]
 800f12c:	2b1e      	cmp	r3, #30
 800f12e:	dc06      	bgt.n	800f13e <setnodevector+0x42>
 800f130:	2201      	movs	r2, #1
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	fa02 f303 	lsl.w	r3, r2, r3
 800f138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f13c:	d303      	bcc.n	800f146 <setnodevector+0x4a>
      luaG_runerror(L, "table overflow");
 800f13e:	491e      	ldr	r1, [pc, #120]	; (800f1b8 <setnodevector+0xbc>)
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f7f9 ff54 	bl	8008fee <luaG_runerror>
    size = twoto(lsize);
 800f146:	2201      	movs	r2, #1
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	fa02 f303 	lsl.w	r3, r2, r3
 800f14e:	607b      	str	r3, [r7, #4]
    t->node = luaM_newvector(L, size, Node);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	011b      	lsls	r3, r3, #4
 800f154:	2200      	movs	r2, #0
 800f156:	4619      	mov	r1, r3
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f7fd fec5 	bl	800cee8 <luaM_malloc_>
 800f15e:	4602      	mov	r2, r0
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	611a      	str	r2, [r3, #16]
    for (i = 0; i < (int)size; i++) {
 800f164:	2300      	movs	r3, #0
 800f166:	61fb      	str	r3, [r7, #28]
 800f168:	e011      	b.n	800f18e <setnodevector+0x92>
      Node *n = gnode(t, i);
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	691a      	ldr	r2, [r3, #16]
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	011b      	lsls	r3, r3, #4
 800f172:	4413      	add	r3, r2
 800f174:	617b      	str	r3, [r7, #20]
      gnext(n) = 0;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	2200      	movs	r2, #0
 800f17a:	609a      	str	r2, [r3, #8]
      setnilkey(n);
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	2200      	movs	r2, #0
 800f180:	715a      	strb	r2, [r3, #5]
      setempty(gval(n));
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	2210      	movs	r2, #16
 800f186:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < (int)size; i++) {
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	3301      	adds	r3, #1
 800f18c:	61fb      	str	r3, [r7, #28]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	69fa      	ldr	r2, [r7, #28]
 800f192:	429a      	cmp	r2, r3
 800f194:	dbe9      	blt.n	800f16a <setnodevector+0x6e>
    t->lsizenode = cast_byte(lsize);
 800f196:	69bb      	ldr	r3, [r7, #24]
 800f198:	b2da      	uxtb	r2, r3
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	71da      	strb	r2, [r3, #7]
    t->lastfree = gnode(t, size);  /* all positions are free */
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	691a      	ldr	r2, [r3, #16]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	011b      	lsls	r3, r3, #4
 800f1a6:	441a      	add	r2, r3
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	615a      	str	r2, [r3, #20]
}
 800f1ac:	bf00      	nop
 800f1ae:	3720      	adds	r7, #32
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	08022c84 	.word	0x08022c84
 800f1b8:	0802263c 	.word	0x0802263c

0800f1bc <reinsert>:


/*
** (Re)insert all elements from the hash part of 'ot' into table 't'.
*/
static void reinsert (lua_State *L, Table *ot, Table *t) {
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b08c      	sub	sp, #48	; 0x30
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
  int j;
  int size = sizenode(ot);
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	79db      	ldrb	r3, [r3, #7]
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4093      	lsls	r3, r2
 800f1d2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (j = 0; j < size; j++) {
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1d8:	e022      	b.n	800f220 <reinsert+0x64>
    Node *old = gnode(ot, j);
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	691a      	ldr	r2, [r3, #16]
 800f1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e0:	011b      	lsls	r3, r3, #4
 800f1e2:	4413      	add	r3, r2
 800f1e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (!isempty(gval(old))) {
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e8:	791b      	ldrb	r3, [r3, #4]
 800f1ea:	f003 030f 	and.w	r3, r3, #15
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d013      	beq.n	800f21a <reinsert+0x5e>
      /* doesn't need barrier/invalidate cache, as entry was
         already present in the table */
      TValue k;
      getnodekey(L, &k, old);
 800f1f2:	f107 0314 	add.w	r3, r7, #20
 800f1f6:	623b      	str	r3, [r7, #32]
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fa:	61fb      	str	r3, [r7, #28]
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	69fa      	ldr	r2, [r7, #28]
 800f200:	68d2      	ldr	r2, [r2, #12]
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	795a      	ldrb	r2, [r3, #5]
 800f208:	6a3b      	ldr	r3, [r7, #32]
 800f20a:	711a      	strb	r2, [r3, #4]
      luaH_set(L, t, &k, gval(old));
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	f107 0214 	add.w	r2, r7, #20
 800f212:	6879      	ldr	r1, [r7, #4]
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f000 fc01 	bl	800fa1c <luaH_set>
  for (j = 0; j < size; j++) {
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	3301      	adds	r3, #1
 800f21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f224:	429a      	cmp	r2, r3
 800f226:	dbd8      	blt.n	800f1da <reinsert+0x1e>
    }
  }
}
 800f228:	bf00      	nop
 800f22a:	bf00      	nop
 800f22c:	3730      	adds	r7, #48	; 0x30
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <exchangehashpart>:


/*
** Exchange the hash part of 't1' and 't2'.
*/
static void exchangehashpart (Table *t1, Table *t2) {
 800f232:	b480      	push	{r7}
 800f234:	b087      	sub	sp, #28
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	6039      	str	r1, [r7, #0]
  lu_byte lsizenode = t1->lsizenode;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	79db      	ldrb	r3, [r3, #7]
 800f240:	75fb      	strb	r3, [r7, #23]
  Node *node = t1->node;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	613b      	str	r3, [r7, #16]
  Node *lastfree = t1->lastfree;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	695b      	ldr	r3, [r3, #20]
 800f24c:	60fb      	str	r3, [r7, #12]
  t1->lsizenode = t2->lsizenode;
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	79da      	ldrb	r2, [r3, #7]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	71da      	strb	r2, [r3, #7]
  t1->node = t2->node;
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	691a      	ldr	r2, [r3, #16]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	611a      	str	r2, [r3, #16]
  t1->lastfree = t2->lastfree;
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	695a      	ldr	r2, [r3, #20]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	615a      	str	r2, [r3, #20]
  t2->lsizenode = lsizenode;
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	7dfa      	ldrb	r2, [r7, #23]
 800f26a:	71da      	strb	r2, [r3, #7]
  t2->node = node;
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	693a      	ldr	r2, [r7, #16]
 800f270:	611a      	str	r2, [r3, #16]
  t2->lastfree = lastfree;
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	615a      	str	r2, [r3, #20]
}
 800f278:	bf00      	nop
 800f27a:	371c      	adds	r7, #28
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <luaH_resize>:
** into the table, initializes the new part of the array (if any) with
** nils and reinserts the elements of the old hash back into the new
** parts of the table.
*/
void luaH_resize (lua_State *L, Table *t, unsigned int newasize,
                                          unsigned int nhsize) {
 800f284:	b580      	push	{r7, lr}
 800f286:	b090      	sub	sp, #64	; 0x40
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	603b      	str	r3, [r7, #0]
  unsigned int i;
  Table newt;  /* to keep the new hash part */
  unsigned int oldasize = setlimittosize(t);
 800f292:	68b8      	ldr	r0, [r7, #8]
 800f294:	f7ff fdd6 	bl	800ee44 <setlimittosize>
 800f298:	63b8      	str	r0, [r7, #56]	; 0x38
  TValue *newarray;
  /* create new hash part with appropriate size into 'newt' */
  setnodevector(L, &newt, nhsize);
 800f29a:	f107 0314 	add.w	r3, r7, #20
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f7ff ff2a 	bl	800f0fc <setnodevector>
  if (newasize < oldasize) {  /* will array shrink? */
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d232      	bcs.n	800f316 <luaH_resize+0x92>
    t->alimit = newasize;  /* pretend array has new size... */
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	609a      	str	r2, [r3, #8]
    exchangehashpart(t, &newt);  /* and new hash */
 800f2b6:	f107 0314 	add.w	r3, r7, #20
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	68b8      	ldr	r0, [r7, #8]
 800f2be:	f7ff ffb8 	bl	800f232 <exchangehashpart>
    /* re-insert into the new hash the elements from vanishing slice */
    for (i = newasize; i < oldasize; i++) {
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2c6:	e019      	b.n	800f2fc <luaH_resize+0x78>
      if (!isempty(&t->array[i]))
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	68da      	ldr	r2, [r3, #12]
 800f2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ce:	00db      	lsls	r3, r3, #3
 800f2d0:	4413      	add	r3, r2
 800f2d2:	791b      	ldrb	r3, [r3, #4]
 800f2d4:	f003 030f 	and.w	r3, r3, #15
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d00c      	beq.n	800f2f6 <luaH_resize+0x72>
        luaH_setint(L, t, i + 1, &t->array[i]);
 800f2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2de:	3301      	adds	r3, #1
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	68da      	ldr	r2, [r3, #12]
 800f2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e8:	00db      	lsls	r3, r3, #3
 800f2ea:	4413      	add	r3, r2
 800f2ec:	460a      	mov	r2, r1
 800f2ee:	68b9      	ldr	r1, [r7, #8]
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f000 fbab 	bl	800fa4c <luaH_setint>
    for (i = newasize; i < oldasize; i++) {
 800f2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f300:	429a      	cmp	r2, r3
 800f302:	d3e1      	bcc.n	800f2c8 <luaH_resize+0x44>
    }
    t->alimit = oldasize;  /* restore current size... */
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f308:	609a      	str	r2, [r3, #8]
    exchangehashpart(t, &newt);  /* and hash (in case of errors) */
 800f30a:	f107 0314 	add.w	r3, r7, #20
 800f30e:	4619      	mov	r1, r3
 800f310:	68b8      	ldr	r0, [r7, #8]
 800f312:	f7ff ff8e 	bl	800f232 <exchangehashpart>
  }
  /* allocate new array */
  newarray = luaM_reallocvector(L, t->array, oldasize, newasize, TValue);
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	68d9      	ldr	r1, [r3, #12]
 800f31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31c:	00da      	lsls	r2, r3, #3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	00db      	lsls	r3, r3, #3
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f7fd fda2 	bl	800ce6c <luaM_realloc_>
 800f328:	6378      	str	r0, [r7, #52]	; 0x34
  if (l_unlikely(newarray == NULL && newasize > 0)) {  /* allocation failed? */
 800f32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d104      	bne.n	800f33a <luaH_resize+0xb6>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d001      	beq.n	800f33a <luaH_resize+0xb6>
 800f336:	2301      	movs	r3, #1
 800f338:	e000      	b.n	800f33c <luaH_resize+0xb8>
 800f33a:	2300      	movs	r3, #0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	bf14      	ite	ne
 800f340:	2301      	movne	r3, #1
 800f342:	2300      	moveq	r3, #0
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	d009      	beq.n	800f35e <luaH_resize+0xda>
    freehash(L, &newt);  /* release new hash part */
 800f34a:	f107 0314 	add.w	r3, r7, #20
 800f34e:	4619      	mov	r1, r3
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f7ff fdcc 	bl	800eeee <freehash>
    luaM_error(L);  /* raise error (with array unchanged) */
 800f356:	2104      	movs	r1, #4
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f7f9 ffe3 	bl	8009324 <luaD_throw>
  }
  /* allocation ok; initialize new part of the array */
  exchangehashpart(t, &newt);  /* 't' has the new hash ('newt' has the old) */
 800f35e:	f107 0314 	add.w	r3, r7, #20
 800f362:	4619      	mov	r1, r3
 800f364:	68b8      	ldr	r0, [r7, #8]
 800f366:	f7ff ff64 	bl	800f232 <exchangehashpart>
  t->array = newarray;  /* set new array part */
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f36e:	60da      	str	r2, [r3, #12]
  t->alimit = newasize;
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	609a      	str	r2, [r3, #8]
  for (i = oldasize; i < newasize; i++)  /* clear new slice of the array */
 800f376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f37a:	e009      	b.n	800f390 <luaH_resize+0x10c>
     setempty(&t->array[i]);
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	68da      	ldr	r2, [r3, #12]
 800f380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f382:	00db      	lsls	r3, r3, #3
 800f384:	4413      	add	r3, r2
 800f386:	2210      	movs	r2, #16
 800f388:	711a      	strb	r2, [r3, #4]
  for (i = oldasize; i < newasize; i++)  /* clear new slice of the array */
 800f38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38c:	3301      	adds	r3, #1
 800f38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	429a      	cmp	r2, r3
 800f396:	d3f1      	bcc.n	800f37c <luaH_resize+0xf8>
  /* re-insert elements from old hash part into new parts */
  reinsert(L, &newt, t);  /* 'newt' now has the old hash */
 800f398:	f107 0314 	add.w	r3, r7, #20
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff ff0b 	bl	800f1bc <reinsert>
  freehash(L, &newt);  /* free old hash part */
 800f3a6:	f107 0314 	add.w	r3, r7, #20
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f7ff fd9e 	bl	800eeee <freehash>
}
 800f3b2:	bf00      	nop
 800f3b4:	3740      	adds	r7, #64	; 0x40
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <luaH_resizearray>:


void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b086      	sub	sp, #24
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	60f8      	str	r0, [r7, #12]
 800f3c2:	60b9      	str	r1, [r7, #8]
 800f3c4:	607a      	str	r2, [r7, #4]
  int nsize = allocsizenode(t);
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d005      	beq.n	800f3da <luaH_resizearray+0x20>
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	79db      	ldrb	r3, [r3, #7]
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	4093      	lsls	r3, r2
 800f3d8:	e000      	b.n	800f3dc <luaH_resizearray+0x22>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	617b      	str	r3, [r7, #20]
  luaH_resize(L, t, nasize, nsize);
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	68b9      	ldr	r1, [r7, #8]
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f7ff ff4d 	bl	800f284 <luaH_resize>
}
 800f3ea:	bf00      	nop
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <rehash>:

/*
** nums[i] = number of keys 'k' where 2^(i - 1) < k <= 2^i
*/
static void rehash (lua_State *L, Table *t, const TValue *ek) {
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b0a8      	sub	sp, #160	; 0xa0
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	60f8      	str	r0, [r7, #12]
 800f3fa:	60b9      	str	r1, [r7, #8]
 800f3fc:	607a      	str	r2, [r7, #4]
  unsigned int asize;  /* optimal size for array part */
  unsigned int na;  /* number of keys in the array part */
  unsigned int nums[MAXABITS + 1];
  int i;
  int totaluse;
  for (i = 0; i <= MAXABITS; i++) nums[i] = 0;  /* reset counts */
 800f3fe:	2300      	movs	r3, #0
 800f400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f404:	e00c      	b.n	800f420 <rehash+0x2e>
 800f406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	33a0      	adds	r3, #160	; 0xa0
 800f40e:	443b      	add	r3, r7
 800f410:	2200      	movs	r2, #0
 800f412:	f843 2c90 	str.w	r2, [r3, #-144]
 800f416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f41a:	3301      	adds	r3, #1
 800f41c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f424:	2b1f      	cmp	r3, #31
 800f426:	ddee      	ble.n	800f406 <rehash+0x14>
  setlimittosize(t);
 800f428:	68b8      	ldr	r0, [r7, #8]
 800f42a:	f7ff fd0b 	bl	800ee44 <setlimittosize>
  na = numusearray(t, nums);  /* count keys in array part */
 800f42e:	f107 0310 	add.w	r3, r7, #16
 800f432:	4619      	mov	r1, r3
 800f434:	68b8      	ldr	r0, [r7, #8]
 800f436:	f7ff fdc9 	bl	800efcc <numusearray>
 800f43a:	4603      	mov	r3, r0
 800f43c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  totaluse = na;  /* all those keys are integer keys */
 800f440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  totaluse += numusehash(t, nums, &na);  /* count keys in hash part */
 800f448:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800f44c:	f107 0310 	add.w	r3, r7, #16
 800f450:	4619      	mov	r1, r3
 800f452:	68b8      	ldr	r0, [r7, #8]
 800f454:	f7ff fe13 	bl	800f07e <numusehash>
 800f458:	4602      	mov	r2, r0
 800f45a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f45e:	4413      	add	r3, r2
 800f460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* count extra key */
  if (ttisinteger(ek))
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	791b      	ldrb	r3, [r3, #4]
 800f468:	2b03      	cmp	r3, #3
 800f46a:	d10e      	bne.n	800f48a <rehash+0x98>
    na += countint(ivalue(ek), nums);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f107 0210 	add.w	r2, r7, #16
 800f474:	4611      	mov	r1, r2
 800f476:	4618      	mov	r0, r3
 800f478:	f7ff fd8b 	bl	800ef92 <countint>
 800f47c:	4603      	mov	r3, r0
 800f47e:	461a      	mov	r2, r3
 800f480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f484:	4413      	add	r3, r2
 800f486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  totaluse++;
 800f48a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f48e:	3301      	adds	r3, #1
 800f490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* compute new size for array part */
  asize = computesizes(nums, &na);
 800f494:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800f498:	f107 0310 	add.w	r3, r7, #16
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff fd3d 	bl	800ef1e <computesizes>
 800f4a4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  /* resize the table to new computed sizes */
  luaH_resize(L, t, asize, totaluse - na);
 800f4a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f4ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4b0:	1ad3      	subs	r3, r2, r3
 800f4b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f4b6:	68b9      	ldr	r1, [r7, #8]
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f7ff fee3 	bl	800f284 <luaH_resize>
}
 800f4be:	bf00      	nop
 800f4c0:	37a0      	adds	r7, #160	; 0xa0
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <luaH_new>:
/*
** }=============================================================
*/


Table *luaH_new (lua_State *L) {
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b084      	sub	sp, #16
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
  GCObject *o = luaC_newobj(L, LUA_VTABLE, sizeof(Table));
 800f4ce:	2220      	movs	r2, #32
 800f4d0:	2105      	movs	r1, #5
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7fb fa93 	bl	800a9fe <luaC_newobj>
 800f4d8:	60f8      	str	r0, [r7, #12]
  Table *t = gco2t(o);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	60bb      	str	r3, [r7, #8]
  t->metatable = NULL;
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	619a      	str	r2, [r3, #24]
  t->flags = cast_byte(maskflags);  /* table has no metamethod fields */
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	223f      	movs	r2, #63	; 0x3f
 800f4e8:	719a      	strb	r2, [r3, #6]
  t->array = NULL;
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	60da      	str	r2, [r3, #12]
  t->alimit = 0;
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	609a      	str	r2, [r3, #8]
  setnodevector(L, t, 0);
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	68b9      	ldr	r1, [r7, #8]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f7ff fdfe 	bl	800f0fc <setnodevector>
  return t;
 800f500:	68bb      	ldr	r3, [r7, #8]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <luaH_free>:


void luaH_free (lua_State *L, Table *t) {
 800f50a:	b590      	push	{r4, r7, lr}
 800f50c:	b083      	sub	sp, #12
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
 800f512:	6039      	str	r1, [r7, #0]
  freehash(L, t);
 800f514:	6839      	ldr	r1, [r7, #0]
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7ff fce9 	bl	800eeee <freehash>
  luaM_freearray(L, t->array, luaH_realasize(t));
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	68dc      	ldr	r4, [r3, #12]
 800f520:	6838      	ldr	r0, [r7, #0]
 800f522:	f7ff fc3b 	bl	800ed9c <luaH_realasize>
 800f526:	4603      	mov	r3, r0
 800f528:	00db      	lsls	r3, r3, #3
 800f52a:	461a      	mov	r2, r3
 800f52c:	4621      	mov	r1, r4
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7fd fc56 	bl	800cde0 <luaM_free_>
  luaM_free(L, t);
 800f534:	2220      	movs	r2, #32
 800f536:	6839      	ldr	r1, [r7, #0]
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7fd fc51 	bl	800cde0 <luaM_free_>
}
 800f53e:	bf00      	nop
 800f540:	370c      	adds	r7, #12
 800f542:	46bd      	mov	sp, r7
 800f544:	bd90      	pop	{r4, r7, pc}

0800f546 <getfreepos>:


static Node *getfreepos (Table *t) {
 800f546:	b480      	push	{r7}
 800f548:	b083      	sub	sp, #12
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
  if (!isdummy(t)) {
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	695b      	ldr	r3, [r3, #20]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d014      	beq.n	800f580 <getfreepos+0x3a>
    while (t->lastfree > t->node) {
 800f556:	e00d      	b.n	800f574 <getfreepos+0x2e>
      t->lastfree--;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	695b      	ldr	r3, [r3, #20]
 800f55c:	f1a3 0210 	sub.w	r2, r3, #16
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	615a      	str	r2, [r3, #20]
      if (keyisnil(t->lastfree))
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	695b      	ldr	r3, [r3, #20]
 800f568:	795b      	ldrb	r3, [r3, #5]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d102      	bne.n	800f574 <getfreepos+0x2e>
        return t->lastfree;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	695b      	ldr	r3, [r3, #20]
 800f572:	e006      	b.n	800f582 <getfreepos+0x3c>
    while (t->lastfree > t->node) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	695a      	ldr	r2, [r3, #20]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	691b      	ldr	r3, [r3, #16]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d8eb      	bhi.n	800f558 <getfreepos+0x12>
    }
  }
  return NULL;  /* could not find a free place */
 800f580:	2300      	movs	r3, #0
}
 800f582:	4618      	mov	r0, r3
 800f584:	370c      	adds	r7, #12
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr
	...

0800f590 <luaH_newkey>:
** position is free. If not, check whether colliding node is in its main
** position or not: if it is not, move colliding node to an empty place and
** put new key in its main position; otherwise (colliding node is in its main
** position), new key goes to an empty position.
*/
void luaH_newkey (lua_State *L, Table *t, const TValue *key, TValue *value) {
 800f590:	b590      	push	{r4, r7, lr}
 800f592:	b091      	sub	sp, #68	; 0x44
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]
  Node *mp;
  TValue aux;
  if (l_unlikely(ttisnil(key)))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	791b      	ldrb	r3, [r3, #4]
 800f5a2:	f003 030f 	and.w	r3, r3, #15
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bf0c      	ite	eq
 800f5aa:	2301      	moveq	r3, #1
 800f5ac:	2300      	movne	r3, #0
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d003      	beq.n	800f5bc <luaH_newkey+0x2c>
    luaG_runerror(L, "table index is nil");
 800f5b4:	4971      	ldr	r1, [pc, #452]	; (800f77c <luaH_newkey+0x1ec>)
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f7f9 fd19 	bl	8008fee <luaG_runerror>
  else if (ttisfloat(key)) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	791b      	ldrb	r3, [r3, #4]
 800f5c0:	2b13      	cmp	r3, #19
 800f5c2:	d12c      	bne.n	800f61e <luaH_newkey+0x8e>
    lua_Number f = fltvalue(key);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	637b      	str	r3, [r7, #52]	; 0x34
    lua_Integer k;
    if (luaV_flttointeger(f, &k, F2Ieq)) {  /* does key fit in an integer? */
 800f5ca:	f107 0310 	add.w	r3, r7, #16
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800f5d6:	f001 f947 	bl	8010868 <luaV_flttointeger>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00c      	beq.n	800f5fa <luaH_newkey+0x6a>
      setivalue(&aux, k);
 800f5e0:	f107 0314 	add.w	r3, r7, #20
 800f5e4:	633b      	str	r3, [r7, #48]	; 0x30
 800f5e6:	693a      	ldr	r2, [r7, #16]
 800f5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ea:	601a      	str	r2, [r3, #0]
 800f5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ee:	2203      	movs	r2, #3
 800f5f0:	711a      	strb	r2, [r3, #4]
      key = &aux;  /* insert it as an integer */
 800f5f2:	f107 0314 	add.w	r3, r7, #20
 800f5f6:	607b      	str	r3, [r7, #4]
 800f5f8:	e011      	b.n	800f61e <luaH_newkey+0x8e>
    }
    else if (l_unlikely(luai_numisnan(f)))
 800f5fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f5fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f602:	eeb4 7a67 	vcmp.f32	s14, s15
 800f606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f60a:	bf14      	ite	ne
 800f60c:	2301      	movne	r3, #1
 800f60e:	2300      	moveq	r3, #0
 800f610:	b2db      	uxtb	r3, r3
 800f612:	2b00      	cmp	r3, #0
 800f614:	d003      	beq.n	800f61e <luaH_newkey+0x8e>
      luaG_runerror(L, "table index is NaN");
 800f616:	495a      	ldr	r1, [pc, #360]	; (800f780 <luaH_newkey+0x1f0>)
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f7f9 fce8 	bl	8008fee <luaG_runerror>
  }
  if (ttisnil(value))
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	791b      	ldrb	r3, [r3, #4]
 800f622:	f003 030f 	and.w	r3, r3, #15
 800f626:	2b00      	cmp	r3, #0
 800f628:	f000 80a4 	beq.w	800f774 <luaH_newkey+0x1e4>
    return;  /* do not insert nil values */
  mp = mainpositionTV(t, key);
 800f62c:	6879      	ldr	r1, [r7, #4]
 800f62e:	68b8      	ldr	r0, [r7, #8]
 800f630:	f7ff fa20 	bl	800ea74 <mainpositionTV>
 800f634:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (!isempty(gval(mp)) || isdummy(t)) {  /* main position is taken? */
 800f636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f638:	791b      	ldrb	r3, [r3, #4]
 800f63a:	f003 030f 	and.w	r3, r3, #15
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d103      	bne.n	800f64a <luaH_newkey+0xba>
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	695b      	ldr	r3, [r3, #20]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d163      	bne.n	800f712 <luaH_newkey+0x182>
    Node *othern;
    Node *f = getfreepos(t);  /* get a free place */
 800f64a:	68b8      	ldr	r0, [r7, #8]
 800f64c:	f7ff ff7b 	bl	800f546 <getfreepos>
 800f650:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (f == NULL) {  /* cannot find a free place? */
 800f652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f654:	2b00      	cmp	r3, #0
 800f656:	d10b      	bne.n	800f670 <luaH_newkey+0xe0>
      rehash(L, t, key);  /* grow table */
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	68b9      	ldr	r1, [r7, #8]
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f7ff fec8 	bl	800f3f2 <rehash>
      /* whatever called 'newkey' takes care of TM cache */
      luaH_set(L, t, key, value);  /* insert key into grown table */
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	68b9      	ldr	r1, [r7, #8]
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	f000 f9d7 	bl	800fa1c <luaH_set>
      return;
 800f66e:	e082      	b.n	800f776 <luaH_newkey+0x1e6>
    }
    lua_assert(!isdummy(t));
    othern = mainpositionfromnode(t, mp);
 800f670:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f672:	68b8      	ldr	r0, [r7, #8]
 800f674:	f7ff fad6 	bl	800ec24 <mainpositionfromnode>
 800f678:	63b8      	str	r0, [r7, #56]	; 0x38
    if (othern != mp) {  /* is colliding node out of its main position? */
 800f67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f67e:	429a      	cmp	r2, r3
 800f680:	d02f      	beq.n	800f6e2 <luaH_newkey+0x152>
      /* yes; move colliding node into free position */
      while (othern + gnext(othern) != mp)  /* find previous */
 800f682:	e005      	b.n	800f690 <luaH_newkey+0x100>
        othern += gnext(othern);
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	011b      	lsls	r3, r3, #4
 800f68a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f68c:	4413      	add	r3, r2
 800f68e:	63bb      	str	r3, [r7, #56]	; 0x38
      while (othern + gnext(othern) != mp)  /* find previous */
 800f690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	011b      	lsls	r3, r3, #4
 800f696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f698:	4413      	add	r3, r2
 800f69a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d1f1      	bne.n	800f684 <luaH_newkey+0xf4>
      gnext(othern) = cast_int(f - othern);  /* rechain to point to 'f' */
 800f6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a4:	1ad3      	subs	r3, r2, r3
 800f6a6:	111b      	asrs	r3, r3, #4
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ac:	609a      	str	r2, [r3, #8]
      *f = *mp;  /* copy colliding node into free pos. (mp->next also goes) */
 800f6ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b2:	4614      	mov	r4, r2
 800f6b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f6b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      if (gnext(mp) != 0) {
 800f6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6bc:	689b      	ldr	r3, [r3, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00b      	beq.n	800f6da <luaH_newkey+0x14a>
        gnext(f) += cast_int(mp - f);  /* correct 'next' */
 800f6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6ca:	1a8a      	subs	r2, r1, r2
 800f6cc:	1112      	asrs	r2, r2, #4
 800f6ce:	441a      	add	r2, r3
 800f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d2:	609a      	str	r2, [r3, #8]
        gnext(mp) = 0;  /* now 'mp' is free */
 800f6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	609a      	str	r2, [r3, #8]
      }
      setempty(gval(mp));
 800f6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6dc:	2210      	movs	r2, #16
 800f6de:	711a      	strb	r2, [r3, #4]
 800f6e0:	e017      	b.n	800f712 <luaH_newkey+0x182>
    }
    else {  /* colliding node is in its own main position */
      /* new node will go into free position */
      if (gnext(mp) != 0)
 800f6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00a      	beq.n	800f700 <luaH_newkey+0x170>
        gnext(f) = cast_int((mp + gnext(mp)) - f);  /* chain new position */
 800f6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	011b      	lsls	r3, r3, #4
 800f6f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6f2:	441a      	add	r2, r3
 800f6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f6:	1ad3      	subs	r3, r2, r3
 800f6f8:	111b      	asrs	r3, r3, #4
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	609a      	str	r2, [r3, #8]
      else lua_assert(gnext(f) == 0);
      gnext(mp) = cast_int(f - mp);
 800f700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f704:	1ad3      	subs	r3, r2, r3
 800f706:	111b      	asrs	r3, r3, #4
 800f708:	461a      	mov	r2, r3
 800f70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f70c:	609a      	str	r2, [r3, #8]
      mp = f;
 800f70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f710:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  setnodekey(L, mp, key);
 800f712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f714:	62bb      	str	r3, [r7, #40]	; 0x28
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	627b      	str	r3, [r7, #36]	; 0x24
 800f71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f71e:	6812      	ldr	r2, [r2, #0]
 800f720:	60da      	str	r2, [r3, #12]
 800f722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f724:	791a      	ldrb	r2, [r3, #4]
 800f726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f728:	715a      	strb	r2, [r3, #5]
  luaC_barrierback(L, obj2gco(t), key);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	791b      	ldrb	r3, [r3, #4]
 800f72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f732:	2b00      	cmp	r3, #0
 800f734:	d011      	beq.n	800f75a <luaH_newkey+0x1ca>
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	795b      	ldrb	r3, [r3, #5]
 800f73a:	f003 0320 	and.w	r3, r3, #32
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00b      	beq.n	800f75a <luaH_newkey+0x1ca>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	795b      	ldrb	r3, [r3, #5]
 800f748:	f003 0318 	and.w	r3, r3, #24
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d004      	beq.n	800f75a <luaH_newkey+0x1ca>
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	4619      	mov	r1, r3
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f7fb f8ef 	bl	800a938 <luaC_barrierback_>
  lua_assert(isempty(gval(mp)));
  setobj2t(L, gval(mp), value);
 800f75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f75c:	623b      	str	r3, [r7, #32]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	61fb      	str	r3, [r7, #28]
 800f762:	6a3b      	ldr	r3, [r7, #32]
 800f764:	69fa      	ldr	r2, [r7, #28]
 800f766:	6812      	ldr	r2, [r2, #0]
 800f768:	601a      	str	r2, [r3, #0]
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	791a      	ldrb	r2, [r3, #4]
 800f76e:	6a3b      	ldr	r3, [r7, #32]
 800f770:	711a      	strb	r2, [r3, #4]
 800f772:	e000      	b.n	800f776 <luaH_newkey+0x1e6>
    return;  /* do not insert nil values */
 800f774:	bf00      	nop
}
 800f776:	3744      	adds	r7, #68	; 0x44
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd90      	pop	{r4, r7, pc}
 800f77c:	0802264c 	.word	0x0802264c
 800f780:	08022660 	.word	0x08022660

0800f784 <luaH_getint>:
** the real size of the array, key still can be in the array part. In
** this case, try to avoid a call to 'luaH_realasize' when key is just
** one more than the limit (so that it can be incremented without
** changing the real size of the array).
*/
const TValue *luaH_getint (Table *t, lua_Integer key) {
 800f784:	b590      	push	{r4, r7, lr}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  if (l_castS2U(key) - 1u < t->alimit)  /* 'key' in [1, t->alimit]? */
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	1e5a      	subs	r2, r3, #1
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	429a      	cmp	r2, r3
 800f798:	d208      	bcs.n	800f7ac <luaH_getint+0x28>
    return &t->array[key - 1];
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	68da      	ldr	r2, [r3, #12]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	00db      	lsls	r3, r3, #3
 800f7a8:	4413      	add	r3, r2
 800f7aa:	e044      	b.n	800f836 <luaH_getint+0xb2>
  else if (!limitequalsasize(t) &&  /* key still may be in the array part? */
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	799b      	ldrb	r3, [r3, #6]
 800f7b0:	b25b      	sxtb	r3, r3
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	da21      	bge.n	800f7fa <luaH_getint+0x76>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	689a      	ldr	r2, [r3, #8]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d019      	beq.n	800f7fa <luaH_getint+0x76>
           (l_castS2U(key) == t->alimit + 1 ||
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	683b      	ldr	r3, [r7, #0]
  else if (!limitequalsasize(t) &&  /* key still may be in the array part? */
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d007      	beq.n	800f7e2 <luaH_getint+0x5e>
            l_castS2U(key) - 1u < luaH_realasize(t))) {
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	1e5c      	subs	r4, r3, #1
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f7ff fae0 	bl	800ed9c <luaH_realasize>
 800f7dc:	4603      	mov	r3, r0
           (l_castS2U(key) == t->alimit + 1 ||
 800f7de:	429c      	cmp	r4, r3
 800f7e0:	d20b      	bcs.n	800f7fa <luaH_getint+0x76>
    t->alimit = cast_uint(key);  /* probably '#t' is here now */
 800f7e2:	683a      	ldr	r2, [r7, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	609a      	str	r2, [r3, #8]
    return &t->array[key - 1];
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	68da      	ldr	r2, [r3, #12]
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f7f2:	3b01      	subs	r3, #1
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	4413      	add	r3, r2
 800f7f8:	e01d      	b.n	800f836 <luaH_getint+0xb2>
  }
  else {
    Node *n = hashint(t, key);
 800f7fa:	6839      	ldr	r1, [r7, #0]
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7ff f8af 	bl	800e960 <hashint>
 800f802:	60f8      	str	r0, [r7, #12]
    for (;;) {  /* check whether 'key' is somewhere in the chain */
      if (keyisinteger(n) && keyival(n) == key)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	795b      	ldrb	r3, [r3, #5]
 800f808:	2b03      	cmp	r3, #3
 800f80a:	d106      	bne.n	800f81a <luaH_getint+0x96>
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	683a      	ldr	r2, [r7, #0]
 800f812:	429a      	cmp	r2, r3
 800f814:	d101      	bne.n	800f81a <luaH_getint+0x96>
        return gval(n);  /* that's it */
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	e00d      	b.n	800f836 <luaH_getint+0xb2>
      else {
        int nx = gnext(n);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	60bb      	str	r3, [r7, #8]
        if (nx == 0) break;
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d005      	beq.n	800f832 <luaH_getint+0xae>
        n += nx;
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	011b      	lsls	r3, r3, #4
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	4413      	add	r3, r2
 800f82e:	60fb      	str	r3, [r7, #12]
      if (keyisinteger(n) && keyival(n) == key)
 800f830:	e7e8      	b.n	800f804 <luaH_getint+0x80>
        if (nx == 0) break;
 800f832:	bf00      	nop
      }
    }
    return &absentkey;
 800f834:	4b02      	ldr	r3, [pc, #8]	; (800f840 <luaH_getint+0xbc>)
  }
}
 800f836:	4618      	mov	r0, r3
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd90      	pop	{r4, r7, pc}
 800f83e:	bf00      	nop
 800f840:	08022c94 	.word	0x08022c94

0800f844 <luaH_getshortstr>:


/*
** search function for short strings
*/
const TValue *luaH_getshortstr (Table *t, TString *key) {
 800f844:	b480      	push	{r7}
 800f846:	b085      	sub	sp, #20
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
  Node *n = hashstr(t, key);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	691a      	ldr	r2, [r3, #16]
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	689b      	ldr	r3, [r3, #8]
 800f856:	6879      	ldr	r1, [r7, #4]
 800f858:	79c9      	ldrb	r1, [r1, #7]
 800f85a:	4608      	mov	r0, r1
 800f85c:	2101      	movs	r1, #1
 800f85e:	4081      	lsls	r1, r0
 800f860:	3901      	subs	r1, #1
 800f862:	400b      	ands	r3, r1
 800f864:	011b      	lsls	r3, r3, #4
 800f866:	4413      	add	r3, r2
 800f868:	60fb      	str	r3, [r7, #12]
  lua_assert(key->tt == LUA_VSHRSTR);
  for (;;) {  /* check whether 'key' is somewhere in the chain */
    if (keyisshrstr(n) && eqshrstr(keystrval(n), key))
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	795b      	ldrb	r3, [r3, #5]
 800f86e:	2b44      	cmp	r3, #68	; 0x44
 800f870:	d107      	bne.n	800f882 <luaH_getshortstr+0x3e>
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	461a      	mov	r2, r3
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d101      	bne.n	800f882 <luaH_getshortstr+0x3e>
      return gval(n);  /* that's it */
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	e00d      	b.n	800f89e <luaH_getshortstr+0x5a>
    else {
      int nx = gnext(n);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	60bb      	str	r3, [r7, #8]
      if (nx == 0)
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d101      	bne.n	800f892 <luaH_getshortstr+0x4e>
        return &absentkey;  /* not found */
 800f88e:	4b07      	ldr	r3, [pc, #28]	; (800f8ac <luaH_getshortstr+0x68>)
 800f890:	e005      	b.n	800f89e <luaH_getshortstr+0x5a>
      n += nx;
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	011b      	lsls	r3, r3, #4
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	4413      	add	r3, r2
 800f89a:	60fb      	str	r3, [r7, #12]
    if (keyisshrstr(n) && eqshrstr(keystrval(n), key))
 800f89c:	e7e5      	b.n	800f86a <luaH_getshortstr+0x26>
    }
  }
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3714      	adds	r7, #20
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	08022c94 	.word	0x08022c94

0800f8b0 <luaH_getstr>:


const TValue *luaH_getstr (Table *t, TString *key) {
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  if (key->tt == LUA_VSHRSTR)
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	791b      	ldrb	r3, [r3, #4]
 800f8be:	2b04      	cmp	r3, #4
 800f8c0:	d105      	bne.n	800f8ce <luaH_getstr+0x1e>
    return luaH_getshortstr(t, key);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff ffbd 	bl	800f844 <luaH_getshortstr>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	e016      	b.n	800f8fc <luaH_getstr+0x4c>
  else {  /* for long strings, use generic case */
    TValue ko;
    setsvalue(cast(lua_State *, NULL), &ko, key);
 800f8ce:	f107 0308 	add.w	r3, r7, #8
 800f8d2:	617b      	str	r3, [r7, #20]
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	613b      	str	r3, [r7, #16]
 800f8d8:	693a      	ldr	r2, [r7, #16]
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	601a      	str	r2, [r3, #0]
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	791b      	ldrb	r3, [r3, #4]
 800f8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8e6:	b2da      	uxtb	r2, r3
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	711a      	strb	r2, [r3, #4]
    return getgeneric(t, &ko, 0);
 800f8ec:	f107 0308 	add.w	r3, r7, #8
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f7ff fabd 	bl	800ee74 <getgeneric>
 800f8fa:	4603      	mov	r3, r0
  }
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <luaH_get>:


/*
** main search function
*/
const TValue *luaH_get (Table *t, const TValue *key) {
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
  switch (ttypetag(key)) {
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	791b      	ldrb	r3, [r3, #4]
 800f912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f916:	2b13      	cmp	r3, #19
 800f918:	d851      	bhi.n	800f9be <luaH_get+0xba>
 800f91a:	a201      	add	r2, pc, #4	; (adr r2, 800f920 <luaH_get+0x1c>)
 800f91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f920:	0800f991 	.word	0x0800f991
 800f924:	0800f9bf 	.word	0x0800f9bf
 800f928:	0800f9bf 	.word	0x0800f9bf
 800f92c:	0800f981 	.word	0x0800f981
 800f930:	0800f971 	.word	0x0800f971
 800f934:	0800f9bf 	.word	0x0800f9bf
 800f938:	0800f9bf 	.word	0x0800f9bf
 800f93c:	0800f9bf 	.word	0x0800f9bf
 800f940:	0800f9bf 	.word	0x0800f9bf
 800f944:	0800f9bf 	.word	0x0800f9bf
 800f948:	0800f9bf 	.word	0x0800f9bf
 800f94c:	0800f9bf 	.word	0x0800f9bf
 800f950:	0800f9bf 	.word	0x0800f9bf
 800f954:	0800f9bf 	.word	0x0800f9bf
 800f958:	0800f9bf 	.word	0x0800f9bf
 800f95c:	0800f9bf 	.word	0x0800f9bf
 800f960:	0800f9bf 	.word	0x0800f9bf
 800f964:	0800f9bf 	.word	0x0800f9bf
 800f968:	0800f9bf 	.word	0x0800f9bf
 800f96c:	0800f995 	.word	0x0800f995
    case LUA_VSHRSTR: return luaH_getshortstr(t, tsvalue(key));
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4619      	mov	r1, r3
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7ff ff64 	bl	800f844 <luaH_getshortstr>
 800f97c:	4603      	mov	r3, r0
 800f97e:	e024      	b.n	800f9ca <luaH_get+0xc6>
    case LUA_VNUMINT: return luaH_getint(t, ivalue(key));
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4619      	mov	r1, r3
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f7ff fefc 	bl	800f784 <luaH_getint>
 800f98c:	4603      	mov	r3, r0
 800f98e:	e01c      	b.n	800f9ca <luaH_get+0xc6>
    case LUA_VNIL: return &absentkey;
 800f990:	4b10      	ldr	r3, [pc, #64]	; (800f9d4 <luaH_get+0xd0>)
 800f992:	e01a      	b.n	800f9ca <luaH_get+0xc6>
    case LUA_VNUMFLT: {
      lua_Integer k;
      if (luaV_flttointeger(fltvalue(key), &k, F2Ieq)) /* integral index? */
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	edd3 7a00 	vldr	s15, [r3]
 800f99a:	f107 030c 	add.w	r3, r7, #12
 800f99e:	2100      	movs	r1, #0
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	eeb0 0a67 	vmov.f32	s0, s15
 800f9a6:	f000 ff5f 	bl	8010868 <luaV_flttointeger>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d006      	beq.n	800f9be <luaH_get+0xba>
        return luaH_getint(t, k);  /* use specialized version */
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff fee5 	bl	800f784 <luaH_getint>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	e005      	b.n	800f9ca <luaH_get+0xc6>
      /* else... */
    }  /* FALLTHROUGH */
    default:
      return getgeneric(t, key, 0);
 800f9be:	2200      	movs	r2, #0
 800f9c0:	6839      	ldr	r1, [r7, #0]
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff fa56 	bl	800ee74 <getgeneric>
 800f9c8:	4603      	mov	r3, r0
  }
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	08022c94 	.word	0x08022c94

0800f9d8 <luaH_finishset>:
** should have been (the result of a previous "get table").
** Beware: when using this function you probably need to check a GC
** barrier and invalidate the TM cache.
*/
void luaH_finishset (lua_State *L, Table *t, const TValue *key,
                                   const TValue *slot, TValue *value) {
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b086      	sub	sp, #24
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	603b      	str	r3, [r7, #0]
  if (isabstkey(slot))
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	791b      	ldrb	r3, [r3, #4]
 800f9ea:	2b20      	cmp	r3, #32
 800f9ec:	d106      	bne.n	800f9fc <luaH_finishset+0x24>
    luaH_newkey(L, t, key, value);
 800f9ee:	6a3b      	ldr	r3, [r7, #32]
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	68b9      	ldr	r1, [r7, #8]
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f7ff fdcb 	bl	800f590 <luaH_newkey>
  else
    setobj2t(L, cast(TValue *, slot), value);
}
 800f9fa:	e00b      	b.n	800fa14 <luaH_finishset+0x3c>
    setobj2t(L, cast(TValue *, slot), value);
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	617b      	str	r3, [r7, #20]
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	613b      	str	r3, [r7, #16]
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	6812      	ldr	r2, [r2, #0]
 800fa0a:	601a      	str	r2, [r3, #0]
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	791a      	ldrb	r2, [r3, #4]
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	711a      	strb	r2, [r3, #4]
}
 800fa14:	bf00      	nop
 800fa16:	3718      	adds	r7, #24
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <luaH_set>:

/*
** beware: when using this function you probably need to check a GC
** barrier and invalidate the TM cache.
*/
void luaH_set (lua_State *L, Table *t, const TValue *key, TValue *value) {
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b088      	sub	sp, #32
 800fa20:	af02      	add	r7, sp, #8
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
 800fa28:	603b      	str	r3, [r7, #0]
  const TValue *slot = luaH_get(t, key);
 800fa2a:	6879      	ldr	r1, [r7, #4]
 800fa2c:	68b8      	ldr	r0, [r7, #8]
 800fa2e:	f7ff ff69 	bl	800f904 <luaH_get>
 800fa32:	6178      	str	r0, [r7, #20]
  luaH_finishset(L, t, key, slot, value);
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	687a      	ldr	r2, [r7, #4]
 800fa3c:	68b9      	ldr	r1, [r7, #8]
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f7ff ffca 	bl	800f9d8 <luaH_finishset>
}
 800fa44:	bf00      	nop
 800fa46:	3718      	adds	r7, #24
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <luaH_setint>:


void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b08a      	sub	sp, #40	; 0x28
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	607a      	str	r2, [r7, #4]
 800fa58:	603b      	str	r3, [r7, #0]
  const TValue *p = luaH_getint(t, key);
 800fa5a:	6879      	ldr	r1, [r7, #4]
 800fa5c:	68b8      	ldr	r0, [r7, #8]
 800fa5e:	f7ff fe91 	bl	800f784 <luaH_getint>
 800fa62:	6278      	str	r0, [r7, #36]	; 0x24
  if (isabstkey(p)) {
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	791b      	ldrb	r3, [r3, #4]
 800fa68:	2b20      	cmp	r3, #32
 800fa6a:	d110      	bne.n	800fa8e <luaH_setint+0x42>
    TValue k;
    setivalue(&k, key);
 800fa6c:	f107 0310 	add.w	r3, r7, #16
 800fa70:	61bb      	str	r3, [r7, #24]
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	601a      	str	r2, [r3, #0]
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	2203      	movs	r2, #3
 800fa7c:	711a      	strb	r2, [r3, #4]
    luaH_newkey(L, t, &k, value);
 800fa7e:	f107 0210 	add.w	r2, r7, #16
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	68b9      	ldr	r1, [r7, #8]
 800fa86:	68f8      	ldr	r0, [r7, #12]
 800fa88:	f7ff fd82 	bl	800f590 <luaH_newkey>
  }
  else
    setobj2t(L, cast(TValue *, p), value);
}
 800fa8c:	e00b      	b.n	800faa6 <luaH_setint+0x5a>
    setobj2t(L, cast(TValue *, p), value);
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	623b      	str	r3, [r7, #32]
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	61fb      	str	r3, [r7, #28]
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	69fa      	ldr	r2, [r7, #28]
 800fa9a:	6812      	ldr	r2, [r2, #0]
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	791a      	ldrb	r2, [r3, #4]
 800faa2:	6a3b      	ldr	r3, [r7, #32]
 800faa4:	711a      	strb	r2, [r3, #4]
}
 800faa6:	bf00      	nop
 800faa8:	3728      	adds	r7, #40	; 0x28
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <hash_search>:
** is larger or equal to 'i', but it cannot be equal because it is
** absent while 'i' is present; so 'j > i'.) Otherwise, 'j' is a
** boundary. ('j + 1' cannot be a present integer key because it is
** not a valid integer in Lua.)
*/
static lua_Unsigned hash_search (Table *t, lua_Unsigned j) {
 800faae:	b580      	push	{r7, lr}
 800fab0:	b084      	sub	sp, #16
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
 800fab6:	6039      	str	r1, [r7, #0]
  lua_Unsigned i;
  if (j == 0) j++;  /* the caller ensures 'j + 1' is present */
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d102      	bne.n	800fac4 <hash_search+0x16>
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	3301      	adds	r3, #1
 800fac2:	603b      	str	r3, [r7, #0]
  do {
    i = j;  /* 'i' is a present index */
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	60fb      	str	r3, [r7, #12]
    if (j <= l_castS2U(LUA_MAXINTEGER) / 2)
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800face:	d203      	bcs.n	800fad8 <hash_search+0x2a>
      j *= 2;
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	603b      	str	r3, [r7, #0]
 800fad6:	e00f      	b.n	800faf8 <hash_search+0x4a>
    else {
      j = LUA_MAXINTEGER;
 800fad8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fadc:	603b      	str	r3, [r7, #0]
      if (isempty(luaH_getint(t, j)))  /* t[j] not present? */
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	4619      	mov	r1, r3
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7ff fe4e 	bl	800f784 <luaH_getint>
 800fae8:	4603      	mov	r3, r0
 800faea:	791b      	ldrb	r3, [r3, #4]
 800faec:	f003 030f 	and.w	r3, r3, #15
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00d      	beq.n	800fb10 <hash_search+0x62>
        break;  /* 'j' now is an absent index */
      else  /* weird case */
        return j;  /* well, max integer is a boundary... */
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	e028      	b.n	800fb4a <hash_search+0x9c>
    }
  } while (!isempty(luaH_getint(t, j)));  /* repeat until an absent t[j] */
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	4619      	mov	r1, r3
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7ff fe41 	bl	800f784 <luaH_getint>
 800fb02:	4603      	mov	r3, r0
 800fb04:	791b      	ldrb	r3, [r3, #4]
 800fb06:	f003 030f 	and.w	r3, r3, #15
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1da      	bne.n	800fac4 <hash_search+0x16>
 800fb0e:	e016      	b.n	800fb3e <hash_search+0x90>
        break;  /* 'j' now is an absent index */
 800fb10:	bf00      	nop
  /* i < j  &&  t[i] present  &&  t[j] absent */
  while (j - i > 1u) {  /* do a binary search between them */
 800fb12:	e014      	b.n	800fb3e <hash_search+0x90>
    lua_Unsigned m = (i + j) / 2;
 800fb14:	68fa      	ldr	r2, [r7, #12]
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	4413      	add	r3, r2
 800fb1a:	085b      	lsrs	r3, r3, #1
 800fb1c:	60bb      	str	r3, [r7, #8]
    if (isempty(luaH_getint(t, m))) j = m;
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	4619      	mov	r1, r3
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7ff fe2e 	bl	800f784 <luaH_getint>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	791b      	ldrb	r3, [r3, #4]
 800fb2c:	f003 030f 	and.w	r3, r3, #15
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d102      	bne.n	800fb3a <hash_search+0x8c>
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	603b      	str	r3, [r7, #0]
 800fb38:	e001      	b.n	800fb3e <hash_search+0x90>
    else i = m;
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	60fb      	str	r3, [r7, #12]
  while (j - i > 1u) {  /* do a binary search between them */
 800fb3e:	683a      	ldr	r2, [r7, #0]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d8e5      	bhi.n	800fb14 <hash_search+0x66>
  }
  return i;
 800fb48:	68fb      	ldr	r3, [r7, #12]
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <binsearch>:


static unsigned int binsearch (const TValue *array, unsigned int i,
                                                    unsigned int j) {
 800fb52:	b480      	push	{r7}
 800fb54:	b087      	sub	sp, #28
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	60f8      	str	r0, [r7, #12]
 800fb5a:	60b9      	str	r1, [r7, #8]
 800fb5c:	607a      	str	r2, [r7, #4]
  while (j - i > 1u) {  /* binary search */
 800fb5e:	e015      	b.n	800fb8c <binsearch+0x3a>
    unsigned int m = (i + j) / 2;
 800fb60:	68ba      	ldr	r2, [r7, #8]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4413      	add	r3, r2
 800fb66:	085b      	lsrs	r3, r3, #1
 800fb68:	617b      	str	r3, [r7, #20]
    if (isempty(&array[m - 1])) j = m;
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fb70:	3b01      	subs	r3, #1
 800fb72:	00db      	lsls	r3, r3, #3
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	4413      	add	r3, r2
 800fb78:	791b      	ldrb	r3, [r3, #4]
 800fb7a:	f003 030f 	and.w	r3, r3, #15
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d102      	bne.n	800fb88 <binsearch+0x36>
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	607b      	str	r3, [r7, #4]
 800fb86:	e001      	b.n	800fb8c <binsearch+0x3a>
    else i = m;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	60bb      	str	r3, [r7, #8]
  while (j - i > 1u) {  /* binary search */
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d8e4      	bhi.n	800fb60 <binsearch+0xe>
  }
  return i;
 800fb96:	68bb      	ldr	r3, [r7, #8]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	371c      	adds	r7, #28
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <luaH_getn>:
** or 'limit+1' is absent, 'limit' is a boundary.  Otherwise, call
** 'hash_search' to find a boundary in the hash part of the table.
** (In those cases, the boundary is not inside the array part, and
** therefore cannot be used as a new limit.)
*/
lua_Unsigned luaH_getn (Table *t) {
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  unsigned int limit = t->alimit;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	617b      	str	r3, [r7, #20]
  if (limit > 0 && isempty(&t->array[limit - 1])) {  /* (1)? */
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d059      	beq.n	800fc6c <luaH_getn+0xc8>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	68da      	ldr	r2, [r3, #12]
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	00db      	lsls	r3, r3, #3
 800fbc6:	4413      	add	r3, r2
 800fbc8:	791b      	ldrb	r3, [r3, #4]
 800fbca:	f003 030f 	and.w	r3, r3, #15
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d14c      	bne.n	800fc6c <luaH_getn+0xc8>
    /* there must be a boundary before 'limit' */
    if (limit >= 2 && !isempty(&t->array[limit - 2])) {
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d927      	bls.n	800fc28 <luaH_getn+0x84>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68da      	ldr	r2, [r3, #12]
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fbe2:	3b02      	subs	r3, #2
 800fbe4:	00db      	lsls	r3, r3, #3
 800fbe6:	4413      	add	r3, r2
 800fbe8:	791b      	ldrb	r3, [r3, #4]
 800fbea:	f003 030f 	and.w	r3, r3, #15
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d01a      	beq.n	800fc28 <luaH_getn+0x84>
      /* 'limit - 1' is a boundary; can it be a new limit? */
      if (ispow2realasize(t) && !ispow2(limit - 1)) {
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7ff f90c 	bl	800ee10 <ispow2realasize>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d011      	beq.n	800fc22 <luaH_getn+0x7e>
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	1e5a      	subs	r2, r3, #1
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	3b02      	subs	r3, #2
 800fc06:	4013      	ands	r3, r2
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00a      	beq.n	800fc22 <luaH_getn+0x7e>
        t->alimit = limit - 1;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	1e5a      	subs	r2, r3, #1
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	609a      	str	r2, [r3, #8]
        setnorealasize(t);  /* now 'alimit' is not the real size */
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	799b      	ldrb	r3, [r3, #6]
 800fc18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	719a      	strb	r2, [r3, #6]
      }
      return limit - 1;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	3b01      	subs	r3, #1
 800fc26:	e070      	b.n	800fd0a <luaH_getn+0x166>
    }
    else {  /* must search for a boundary in [0, limit] */
      unsigned int boundary = binsearch(t->array, 0, limit);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	697a      	ldr	r2, [r7, #20]
 800fc2e:	2100      	movs	r1, #0
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7ff ff8e 	bl	800fb52 <binsearch>
 800fc36:	6138      	str	r0, [r7, #16]
      /* can this boundary represent the real size of the array? */
      if (ispow2realasize(t) && boundary > luaH_realasize(t) / 2) {
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7ff f8e9 	bl	800ee10 <ispow2realasize>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d011      	beq.n	800fc68 <luaH_getn+0xc4>
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff f8a9 	bl	800ed9c <luaH_realasize>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	085b      	lsrs	r3, r3, #1
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d909      	bls.n	800fc68 <luaH_getn+0xc4>
        t->alimit = boundary;  /* use it as the new limit */
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	693a      	ldr	r2, [r7, #16]
 800fc58:	609a      	str	r2, [r3, #8]
        setnorealasize(t);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	799b      	ldrb	r3, [r3, #6]
 800fc5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	719a      	strb	r2, [r3, #6]
      }
      return boundary;
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	e04e      	b.n	800fd0a <luaH_getn+0x166>
    }
  }
  /* 'limit' is zero or present in table */
  if (!limitequalsasize(t)) {  /* (2)? */
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	799b      	ldrb	r3, [r3, #6]
 800fc70:	b25b      	sxtb	r3, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	da32      	bge.n	800fcdc <luaH_getn+0x138>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	689a      	ldr	r2, [r3, #8]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	4013      	ands	r3, r2
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d02a      	beq.n	800fcdc <luaH_getn+0x138>
    /* 'limit' > 0 and array has more elements after 'limit' */
    if (isempty(&t->array[limit]))  /* 'limit + 1' is empty? */
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	68da      	ldr	r2, [r3, #12]
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	00db      	lsls	r3, r3, #3
 800fc8e:	4413      	add	r3, r2
 800fc90:	791b      	ldrb	r3, [r3, #4]
 800fc92:	f003 030f 	and.w	r3, r3, #15
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d101      	bne.n	800fc9e <luaH_getn+0xfa>
      return limit;  /* this is the boundary */
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	e035      	b.n	800fd0a <luaH_getn+0x166>
    /* else, try last element in the array */
    limit = luaH_realasize(t);
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f7ff f87c 	bl	800ed9c <luaH_realasize>
 800fca4:	6178      	str	r0, [r7, #20]
    if (isempty(&t->array[limit - 1])) {  /* empty? */
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	68da      	ldr	r2, [r3, #12]
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	00db      	lsls	r3, r3, #3
 800fcb4:	4413      	add	r3, r2
 800fcb6:	791b      	ldrb	r3, [r3, #4]
 800fcb8:	f003 030f 	and.w	r3, r3, #15
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10d      	bne.n	800fcdc <luaH_getn+0x138>
      /* there must be a boundary in the array after old limit,
         and it must be a valid new limit */
      unsigned int boundary = binsearch(t->array, t->alimit, limit);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	68d8      	ldr	r0, [r3, #12]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	4619      	mov	r1, r3
 800fccc:	f7ff ff41 	bl	800fb52 <binsearch>
 800fcd0:	60f8      	str	r0, [r7, #12]
      t->alimit = boundary;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	609a      	str	r2, [r3, #8]
      return boundary;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	e016      	b.n	800fd0a <luaH_getn+0x166>
    /* else, new limit is present in the table; check the hash part */
  }
  /* (3) 'limit' is the last element and either is zero or present in table */
  lua_assert(limit == luaH_realasize(t) &&
             (limit == 0 || !isempty(&t->array[limit - 1])));
  if (isdummy(t) || isempty(luaH_getint(t, cast(lua_Integer, limit + 1))))
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	695b      	ldr	r3, [r3, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00b      	beq.n	800fcfc <luaH_getn+0x158>
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	3301      	adds	r3, #1
 800fce8:	4619      	mov	r1, r3
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f7ff fd4a 	bl	800f784 <luaH_getint>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	791b      	ldrb	r3, [r3, #4]
 800fcf4:	f003 030f 	and.w	r3, r3, #15
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d101      	bne.n	800fd00 <luaH_getn+0x15c>
    return limit;  /* 'limit + 1' is absent */
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	e004      	b.n	800fd0a <luaH_getn+0x166>
  else  /* 'limit + 1' is also present */
    return hash_search(t, limit);
 800fd00:	6979      	ldr	r1, [r7, #20]
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f7ff fed3 	bl	800faae <hash_search>
 800fd08:	4603      	mov	r3, r0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3718      	adds	r7, #24
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
	...

0800fd14 <luaT_init>:
  "string", "table", "function", udatatypename, "thread",
  "upvalue", "proto" /* these last cases are used for tests only */
};


void luaT_init (lua_State *L) {
 800fd14:	b590      	push	{r4, r7, lr}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
    "__band", "__bor", "__bxor", "__shl", "__shr",
    "__unm", "__bnot", "__lt", "__le",
    "__concat", "__call", "__close"
  };
  int i;
  for (i=0; i<TM_N; i++) {
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	60fb      	str	r3, [r7, #12]
 800fd20:	e01b      	b.n	800fd5a <luaT_init+0x46>
    G(L)->tmname[i] = luaS_new(L, luaT_eventname[i]);
 800fd22:	4a12      	ldr	r2, [pc, #72]	; (800fd6c <luaT_init+0x58>)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	691c      	ldr	r4, [r3, #16]
 800fd2e:	4611      	mov	r1, r2
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7fe fdb5 	bl	800e8a0 <luaS_new>
 800fd36:	4602      	mov	r2, r0
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	3326      	adds	r3, #38	; 0x26
 800fd3c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    luaC_fix(L, obj2gco(G(L)->tmname[i]));  /* never collect these names */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	691b      	ldr	r3, [r3, #16]
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	3226      	adds	r2, #38	; 0x26
 800fd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7fa fe29 	bl	800a9a6 <luaC_fix>
  for (i=0; i<TM_N; i++) {
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	3301      	adds	r3, #1
 800fd58:	60fb      	str	r3, [r7, #12]
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2b18      	cmp	r3, #24
 800fd5e:	dde0      	ble.n	800fd22 <luaT_init+0xe>
  }
}
 800fd60:	bf00      	nop
 800fd62:	bf00      	nop
 800fd64:	3714      	adds	r7, #20
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd90      	pop	{r4, r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	08022cd8 	.word	0x08022cd8

0800fd70 <luaT_gettm>:

/*
** function to be used with macro "fasttm": optimized for absence of
** tag methods
*/
const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	460b      	mov	r3, r1
 800fd7a:	607a      	str	r2, [r7, #4]
 800fd7c:	72fb      	strb	r3, [r7, #11]
  const TValue *tm = luaH_getshortstr(events, ename);
 800fd7e:	6879      	ldr	r1, [r7, #4]
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f7ff fd5f 	bl	800f844 <luaH_getshortstr>
 800fd86:	6178      	str	r0, [r7, #20]
  lua_assert(event <= TM_EQ);
  if (notm(tm)) {  /* no tag method? */
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	791b      	ldrb	r3, [r3, #4]
 800fd8c:	f003 030f 	and.w	r3, r3, #15
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d10c      	bne.n	800fdae <luaT_gettm+0x3e>
    events->flags |= cast_byte(1u<<event);  /* cache this fact */
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	799a      	ldrb	r2, [r3, #6]
 800fd98:	7afb      	ldrb	r3, [r7, #11]
 800fd9a:	2101      	movs	r1, #1
 800fd9c:	fa01 f303 	lsl.w	r3, r1, r3
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	4313      	orrs	r3, r2
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	719a      	strb	r2, [r3, #6]
    return NULL;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	e000      	b.n	800fdb0 <luaT_gettm+0x40>
  }
  else return tm;
 800fdae:	697b      	ldr	r3, [r7, #20]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3718      	adds	r7, #24
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <luaT_gettmbyobj>:


const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	71fb      	strb	r3, [r7, #7]
  Table *mt;
  switch (ttype(o)) {
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	791b      	ldrb	r3, [r3, #4]
 800fdca:	f003 030f 	and.w	r3, r3, #15
 800fdce:	2b05      	cmp	r3, #5
 800fdd0:	d002      	beq.n	800fdd8 <luaT_gettmbyobj+0x20>
 800fdd2:	2b07      	cmp	r3, #7
 800fdd4:	d005      	beq.n	800fde2 <luaT_gettmbyobj+0x2a>
 800fdd6:	e009      	b.n	800fdec <luaT_gettmbyobj+0x34>
    case LUA_TTABLE:
      mt = hvalue(o)->metatable;
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	699b      	ldr	r3, [r3, #24]
 800fdde:	617b      	str	r3, [r7, #20]
      break;
 800fde0:	e00f      	b.n	800fe02 <luaT_gettmbyobj+0x4a>
    case LUA_TUSERDATA:
      mt = uvalue(o)->metatable;
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	617b      	str	r3, [r7, #20]
      break;
 800fdea:	e00a      	b.n	800fe02 <luaT_gettmbyobj+0x4a>
    default:
      mt = G(L)->mt[ttype(o)];
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	691a      	ldr	r2, [r3, #16]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	791b      	ldrb	r3, [r3, #4]
 800fdf4:	f003 030f 	and.w	r3, r3, #15
 800fdf8:	333e      	adds	r3, #62	; 0x3e
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	4413      	add	r3, r2
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	617b      	str	r3, [r7, #20]
  }
  return (mt ? luaH_getshortstr(mt, G(L)->tmname[event]) : &G(L)->nilvalue);
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00b      	beq.n	800fe20 <luaT_gettmbyobj+0x68>
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	79fa      	ldrb	r2, [r7, #7]
 800fe0e:	3226      	adds	r2, #38	; 0x26
 800fe10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe14:	4619      	mov	r1, r3
 800fe16:	6978      	ldr	r0, [r7, #20]
 800fe18:	f7ff fd14 	bl	800f844 <luaH_getshortstr>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	e002      	b.n	800fe26 <luaT_gettmbyobj+0x6e>
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	332c      	adds	r3, #44	; 0x2c
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3718      	adds	r7, #24
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
	...

0800fe30 <luaT_objtypename>:

/*
** Return the name of the type of an object. For tables and userdata
** with metatable, use their '__name' metafield, if present.
*/
const char *luaT_objtypename (lua_State *L, const TValue *o) {
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  Table *mt;
  if ((ttistable(o) && (mt = hvalue(o)->metatable) != NULL) ||
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	791b      	ldrb	r3, [r3, #4]
 800fe3e:	2b45      	cmp	r3, #69	; 0x45
 800fe40:	d106      	bne.n	800fe50 <luaT_objtypename+0x20>
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	699b      	ldr	r3, [r3, #24]
 800fe48:	60fb      	str	r3, [r7, #12]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d10a      	bne.n	800fe66 <luaT_objtypename+0x36>
      (ttisfulluserdata(o) && (mt = uvalue(o)->metatable) != NULL)) {
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	791b      	ldrb	r3, [r3, #4]
  if ((ttistable(o) && (mt = hvalue(o)->metatable) != NULL) ||
 800fe54:	2b47      	cmp	r3, #71	; 0x47
 800fe56:	d11a      	bne.n	800fe8e <luaT_objtypename+0x5e>
      (ttisfulluserdata(o) && (mt = uvalue(o)->metatable) != NULL)) {
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	60fb      	str	r3, [r7, #12]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d013      	beq.n	800fe8e <luaT_objtypename+0x5e>
    const TValue *name = luaH_getshortstr(mt, luaS_new(L, "__name"));
 800fe66:	4910      	ldr	r1, [pc, #64]	; (800fea8 <luaT_objtypename+0x78>)
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7fe fd19 	bl	800e8a0 <luaS_new>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	4619      	mov	r1, r3
 800fe72:	68f8      	ldr	r0, [r7, #12]
 800fe74:	f7ff fce6 	bl	800f844 <luaH_getshortstr>
 800fe78:	60b8      	str	r0, [r7, #8]
    if (ttisstring(name))  /* is '__name' a string? */
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	791b      	ldrb	r3, [r3, #4]
 800fe7e:	f003 030f 	and.w	r3, r3, #15
 800fe82:	2b04      	cmp	r3, #4
 800fe84:	d103      	bne.n	800fe8e <luaT_objtypename+0x5e>
      return getstr(tsvalue(name));  /* use it as type name */
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	3310      	adds	r3, #16
 800fe8c:	e007      	b.n	800fe9e <luaT_objtypename+0x6e>
  }
  return ttypename(ttype(o));  /* else use standard type name */
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	791b      	ldrb	r3, [r3, #4]
 800fe92:	f003 030f 	and.w	r3, r3, #15
 800fe96:	3301      	adds	r3, #1
 800fe98:	4a04      	ldr	r2, [pc, #16]	; (800feac <luaT_objtypename+0x7c>)
 800fe9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	080226c8 	.word	0x080226c8
 800feac:	08022ca8 	.word	0x08022ca8

0800feb0 <luaT_callTM>:


void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,
                  const TValue *p2, const TValue *p3) {
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b08e      	sub	sp, #56	; 0x38
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	607a      	str	r2, [r7, #4]
 800febc:	603b      	str	r3, [r7, #0]
  StkId func = L->top;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	637b      	str	r3, [r7, #52]	; 0x34
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
 800fec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fec6:	633b      	str	r3, [r7, #48]	; 0x30
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fed0:	6812      	ldr	r2, [r2, #0]
 800fed2:	601a      	str	r2, [r3, #0]
 800fed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed6:	791a      	ldrb	r2, [r3, #4]
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feda:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 1, p1);  /* 1st argument */
 800fedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fede:	3308      	adds	r3, #8
 800fee0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	627b      	str	r3, [r7, #36]	; 0x24
 800fee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feea:	6812      	ldr	r2, [r2, #0]
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	791a      	ldrb	r2, [r3, #4]
 800fef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef4:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 2, p2);  /* 2nd argument */
 800fef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef8:	3310      	adds	r3, #16
 800fefa:	623b      	str	r3, [r7, #32]
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	61fb      	str	r3, [r7, #28]
 800ff00:	6a3b      	ldr	r3, [r7, #32]
 800ff02:	69fa      	ldr	r2, [r7, #28]
 800ff04:	6812      	ldr	r2, [r2, #0]
 800ff06:	601a      	str	r2, [r3, #0]
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	791a      	ldrb	r2, [r3, #4]
 800ff0c:	6a3b      	ldr	r3, [r7, #32]
 800ff0e:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 3, p3);  /* 3rd argument */
 800ff10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff12:	3318      	adds	r3, #24
 800ff14:	61bb      	str	r3, [r7, #24]
 800ff16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff18:	617b      	str	r3, [r7, #20]
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	697a      	ldr	r2, [r7, #20]
 800ff1e:	6812      	ldr	r2, [r2, #0]
 800ff20:	601a      	str	r2, [r3, #0]
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	791a      	ldrb	r2, [r3, #4]
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	711a      	strb	r2, [r3, #4]
  L->top = func + 4;
 800ff2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2c:	f103 0220 	add.w	r2, r3, #32
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	60da      	str	r2, [r3, #12]
  /* metamethod may yield only when called from Lua code */
  if (isLuacode(L->ci))
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	695b      	ldr	r3, [r3, #20]
 800ff38:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ff3a:	f003 030a 	and.w	r3, r3, #10
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d105      	bne.n	800ff4e <luaT_callTM+0x9e>
    luaD_call(L, func, 0);
 800ff42:	2200      	movs	r2, #0
 800ff44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7fa f88f 	bl	800a06a <luaD_call>
  else
    luaD_callnoyield(L, func, 0);
}
 800ff4c:	e004      	b.n	800ff58 <luaT_callTM+0xa8>
    luaD_callnoyield(L, func, 0);
 800ff4e:	2200      	movs	r2, #0
 800ff50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	f7fa f899 	bl	800a08a <luaD_callnoyield>
}
 800ff58:	bf00      	nop
 800ff5a:	3738      	adds	r7, #56	; 0x38
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <luaT_callTMres>:


void luaT_callTMres (lua_State *L, const TValue *f, const TValue *p1,
                     const TValue *p2, StkId res) {
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b08e      	sub	sp, #56	; 0x38
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
 800ff6c:	603b      	str	r3, [r7, #0]
  ptrdiff_t result = savestack(L, res);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	69db      	ldr	r3, [r3, #28]
 800ff72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	637b      	str	r3, [r7, #52]	; 0x34
  StkId func = L->top;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	633b      	str	r3, [r7, #48]	; 0x30
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
 800ff7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff8a:	6812      	ldr	r2, [r2, #0]
 800ff8c:	601a      	str	r2, [r3, #0]
 800ff8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff90:	791a      	ldrb	r2, [r3, #4]
 800ff92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff94:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 1, p1);  /* 1st argument */
 800ff96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff98:	3308      	adds	r3, #8
 800ff9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	623b      	str	r3, [r7, #32]
 800ffa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa2:	6a3a      	ldr	r2, [r7, #32]
 800ffa4:	6812      	ldr	r2, [r2, #0]
 800ffa6:	601a      	str	r2, [r3, #0]
 800ffa8:	6a3b      	ldr	r3, [r7, #32]
 800ffaa:	791a      	ldrb	r2, [r3, #4]
 800ffac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffae:	711a      	strb	r2, [r3, #4]
  setobj2s(L, func + 2, p2);  /* 2nd argument */
 800ffb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb2:	3310      	adds	r3, #16
 800ffb4:	61fb      	str	r3, [r7, #28]
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	61bb      	str	r3, [r7, #24]
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	69ba      	ldr	r2, [r7, #24]
 800ffbe:	6812      	ldr	r2, [r2, #0]
 800ffc0:	601a      	str	r2, [r3, #0]
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	791a      	ldrb	r2, [r3, #4]
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	711a      	strb	r2, [r3, #4]
  L->top += 3;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	f103 0218 	add.w	r2, r3, #24
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	60da      	str	r2, [r3, #12]
  /* metamethod may yield only when called from Lua code */
  if (isLuacode(L->ci))
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	695b      	ldr	r3, [r3, #20]
 800ffda:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ffdc:	f003 030a 	and.w	r3, r3, #10
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d105      	bne.n	800fff0 <luaT_callTMres+0x90>
    luaD_call(L, func, 1);
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ffe8:	68f8      	ldr	r0, [r7, #12]
 800ffea:	f7fa f83e 	bl	800a06a <luaD_call>
 800ffee:	e004      	b.n	800fffa <luaT_callTMres+0x9a>
  else
    luaD_callnoyield(L, func, 1);
 800fff0:	2201      	movs	r2, #1
 800fff2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fff4:	68f8      	ldr	r0, [r7, #12]
 800fff6:	f7fa f848 	bl	800a08a <luaD_callnoyield>
  res = restorestack(L, result);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	69da      	ldr	r2, [r3, #28]
 800fffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010000:	4413      	add	r3, r2
 8010002:	643b      	str	r3, [r7, #64]	; 0x40
  setobjs2s(L, res, --L->top);  /* move result to its place */
 8010004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010006:	617b      	str	r3, [r7, #20]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	f1a3 0208 	sub.w	r2, r3, #8
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	60da      	str	r2, [r3, #12]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	613b      	str	r3, [r7, #16]
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	693a      	ldr	r2, [r7, #16]
 801001e:	6812      	ldr	r2, [r2, #0]
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	791a      	ldrb	r2, [r3, #4]
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	711a      	strb	r2, [r3, #4]
}
 801002a:	bf00      	nop
 801002c:	3738      	adds	r7, #56	; 0x38
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}

08010032 <callbinTM>:


static int callbinTM (lua_State *L, const TValue *p1, const TValue *p2,
                      StkId res, TMS event) {
 8010032:	b580      	push	{r7, lr}
 8010034:	b088      	sub	sp, #32
 8010036:	af02      	add	r7, sp, #8
 8010038:	60f8      	str	r0, [r7, #12]
 801003a:	60b9      	str	r1, [r7, #8]
 801003c:	607a      	str	r2, [r7, #4]
 801003e:	603b      	str	r3, [r7, #0]
  const TValue *tm = luaT_gettmbyobj(L, p1, event);  /* try first operand */
 8010040:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010044:	461a      	mov	r2, r3
 8010046:	68b9      	ldr	r1, [r7, #8]
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f7ff feb5 	bl	800fdb8 <luaT_gettmbyobj>
 801004e:	6178      	str	r0, [r7, #20]
  if (notm(tm))
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	791b      	ldrb	r3, [r3, #4]
 8010054:	f003 030f 	and.w	r3, r3, #15
 8010058:	2b00      	cmp	r3, #0
 801005a:	d107      	bne.n	801006c <callbinTM+0x3a>
    tm = luaT_gettmbyobj(L, p2, event);  /* try second operand */
 801005c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010060:	461a      	mov	r2, r3
 8010062:	6879      	ldr	r1, [r7, #4]
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	f7ff fea7 	bl	800fdb8 <luaT_gettmbyobj>
 801006a:	6178      	str	r0, [r7, #20]
  if (notm(tm)) return 0;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	791b      	ldrb	r3, [r3, #4]
 8010070:	f003 030f 	and.w	r3, r3, #15
 8010074:	2b00      	cmp	r3, #0
 8010076:	d101      	bne.n	801007c <callbinTM+0x4a>
 8010078:	2300      	movs	r3, #0
 801007a:	e008      	b.n	801008e <callbinTM+0x5c>
  luaT_callTMres(L, tm, p1, p2, res);
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	6979      	ldr	r1, [r7, #20]
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f7ff ff6a 	bl	800ff60 <luaT_callTMres>
  return 1;
 801008c:	2301      	movs	r3, #1
}
 801008e:	4618      	mov	r0, r3
 8010090:	3718      	adds	r7, #24
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
	...

08010098 <luaT_trybinTM>:


void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,
                    StkId res, TMS event) {
 8010098:	b580      	push	{r7, lr}
 801009a:	b086      	sub	sp, #24
 801009c:	af02      	add	r7, sp, #8
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
  if (l_unlikely(!callbinTM(L, p1, p2, res, event))) {
 80100a6:	7e3b      	ldrb	r3, [r7, #24]
 80100a8:	9300      	str	r3, [sp, #0]
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	68b9      	ldr	r1, [r7, #8]
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	f7ff ffbe 	bl	8010032 <callbinTM>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	bf0c      	ite	eq
 80100bc:	2301      	moveq	r3, #1
 80100be:	2300      	movne	r3, #0
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d024      	beq.n	8010110 <luaT_trybinTM+0x78>
    switch (event) {
 80100c6:	7e3b      	ldrb	r3, [r7, #24]
 80100c8:	2b11      	cmp	r3, #17
 80100ca:	dc02      	bgt.n	80100d2 <luaT_trybinTM+0x3a>
 80100cc:	2b0d      	cmp	r3, #13
 80100ce:	da02      	bge.n	80100d6 <luaT_trybinTM+0x3e>
 80100d0:	e018      	b.n	8010104 <luaT_trybinTM+0x6c>
 80100d2:	2b13      	cmp	r3, #19
 80100d4:	d116      	bne.n	8010104 <luaT_trybinTM+0x6c>
      case TM_BAND: case TM_BOR: case TM_BXOR:
      case TM_SHL: case TM_SHR: case TM_BNOT: {
        if (ttisnumber(p1) && ttisnumber(p2))
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	791b      	ldrb	r3, [r3, #4]
 80100da:	f003 030f 	and.w	r3, r3, #15
 80100de:	2b03      	cmp	r3, #3
 80100e0:	d10a      	bne.n	80100f8 <luaT_trybinTM+0x60>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	791b      	ldrb	r3, [r3, #4]
 80100e6:	f003 030f 	and.w	r3, r3, #15
 80100ea:	2b03      	cmp	r3, #3
 80100ec:	d104      	bne.n	80100f8 <luaT_trybinTM+0x60>
          luaG_tointerror(L, p1, p2);
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	68b9      	ldr	r1, [r7, #8]
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	f7f8 feca 	bl	8008e8c <luaG_tointerror>
        else
          luaG_opinterror(L, p1, p2, "perform bitwise operation on");
 80100f8:	4b07      	ldr	r3, [pc, #28]	; (8010118 <luaT_trybinTM+0x80>)
 80100fa:	687a      	ldr	r2, [r7, #4]
 80100fc:	68b9      	ldr	r1, [r7, #8]
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	f7f8 feb0 	bl	8008e64 <luaG_opinterror>
      }
      /* calls never return, but to avoid warnings: *//* FALLTHROUGH */
      default:
        luaG_opinterror(L, p1, p2, "perform arithmetic on");
 8010104:	4b05      	ldr	r3, [pc, #20]	; (801011c <luaT_trybinTM+0x84>)
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	68b9      	ldr	r1, [r7, #8]
 801010a:	68f8      	ldr	r0, [r7, #12]
 801010c:	f7f8 feaa 	bl	8008e64 <luaG_opinterror>
    }
  }
}
 8010110:	bf00      	nop
 8010112:	3710      	adds	r7, #16
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	080226d0 	.word	0x080226d0
 801011c:	080226f0 	.word	0x080226f0

08010120 <luaT_tryconcatTM>:


void luaT_tryconcatTM (lua_State *L) {
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af02      	add	r7, sp, #8
 8010126:	6078      	str	r0, [r7, #4]
  StkId top = L->top;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	60fb      	str	r3, [r7, #12]
  if (l_unlikely(!callbinTM(L, s2v(top - 2), s2v(top - 1), top - 2,
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3b10      	subs	r3, #16
 8010132:	4619      	mov	r1, r3
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	3b08      	subs	r3, #8
 8010138:	4618      	mov	r0, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3b10      	subs	r3, #16
 801013e:	2216      	movs	r2, #22
 8010140:	9200      	str	r2, [sp, #0]
 8010142:	4602      	mov	r2, r0
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7ff ff74 	bl	8010032 <callbinTM>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	bf0c      	ite	eq
 8010150:	2301      	moveq	r3, #1
 8010152:	2300      	movne	r3, #0
 8010154:	b2db      	uxtb	r3, r3
 8010156:	2b00      	cmp	r3, #0
 8010158:	d008      	beq.n	801016c <luaT_tryconcatTM+0x4c>
                               TM_CONCAT)))
    luaG_concaterror(L, s2v(top - 2), s2v(top - 1));
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	3b10      	subs	r3, #16
 801015e:	4619      	mov	r1, r3
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	3b08      	subs	r3, #8
 8010164:	461a      	mov	r2, r3
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f7f8 fe60 	bl	8008e2c <luaG_concaterror>
}
 801016c:	bf00      	nop
 801016e:	3710      	adds	r7, #16
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <luaT_trybinassocTM>:


void luaT_trybinassocTM (lua_State *L, const TValue *p1, const TValue *p2,
                                       int flip, StkId res, TMS event) {
 8010174:	b580      	push	{r7, lr}
 8010176:	b086      	sub	sp, #24
 8010178:	af02      	add	r7, sp, #8
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
 8010180:	603b      	str	r3, [r7, #0]
  if (flip)
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d008      	beq.n	801019a <luaT_trybinassocTM+0x26>
    luaT_trybinTM(L, p2, p1, res, event);
 8010188:	7f3b      	ldrb	r3, [r7, #28]
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	6879      	ldr	r1, [r7, #4]
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f7ff ff80 	bl	8010098 <luaT_trybinTM>
  else
    luaT_trybinTM(L, p1, p2, res, event);
}
 8010198:	e007      	b.n	80101aa <luaT_trybinassocTM+0x36>
    luaT_trybinTM(L, p1, p2, res, event);
 801019a:	7f3b      	ldrb	r3, [r7, #28]
 801019c:	9300      	str	r3, [sp, #0]
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f7ff ff77 	bl	8010098 <luaT_trybinTM>
}
 80101aa:	bf00      	nop
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <luaT_trybiniTM>:


void luaT_trybiniTM (lua_State *L, const TValue *p1, lua_Integer i2,
                                   int flip, StkId res, TMS event) {
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b08a      	sub	sp, #40	; 0x28
 80101b6:	af02      	add	r7, sp, #8
 80101b8:	60f8      	str	r0, [r7, #12]
 80101ba:	60b9      	str	r1, [r7, #8]
 80101bc:	607a      	str	r2, [r7, #4]
 80101be:	603b      	str	r3, [r7, #0]
  TValue aux;
  setivalue(&aux, i2);
 80101c0:	f107 0314 	add.w	r3, r7, #20
 80101c4:	61fb      	str	r3, [r7, #28]
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	601a      	str	r2, [r3, #0]
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	2203      	movs	r2, #3
 80101d0:	711a      	strb	r2, [r3, #4]
  luaT_trybinassocTM(L, p1, &aux, flip, res, event);
 80101d2:	f107 0214 	add.w	r2, r7, #20
 80101d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80101da:	9301      	str	r3, [sp, #4]
 80101dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101de:	9300      	str	r3, [sp, #0]
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	68b9      	ldr	r1, [r7, #8]
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f7ff ffc5 	bl	8010174 <luaT_trybinassocTM>
}
 80101ea:	bf00      	nop
 80101ec:	3720      	adds	r7, #32
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <luaT_callorderTM>:
** this substitution, the continuation has to know about it (to negate
** the result of r<l); bit CIST_LEQ in the call status keeps that
** information.
*/
int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,
                      TMS event) {
 80101f2:	b580      	push	{r7, lr}
 80101f4:	b086      	sub	sp, #24
 80101f6:	af02      	add	r7, sp, #8
 80101f8:	60f8      	str	r0, [r7, #12]
 80101fa:	60b9      	str	r1, [r7, #8]
 80101fc:	607a      	str	r2, [r7, #4]
 80101fe:	70fb      	strb	r3, [r7, #3]
  if (callbinTM(L, p1, p2, L->top, event))  /* try original event */
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	68da      	ldr	r2, [r3, #12]
 8010204:	78fb      	ldrb	r3, [r7, #3]
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	4613      	mov	r3, r2
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	68b9      	ldr	r1, [r7, #8]
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f7ff ff0f 	bl	8010032 <callbinTM>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00f      	beq.n	801023a <luaT_callorderTM+0x48>
    return !l_isfalse(s2v(L->top));
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	68db      	ldr	r3, [r3, #12]
 801021e:	791b      	ldrb	r3, [r3, #4]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d008      	beq.n	8010236 <luaT_callorderTM+0x44>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	791b      	ldrb	r3, [r3, #4]
 801022a:	f003 030f 	and.w	r3, r3, #15
 801022e:	2b00      	cmp	r3, #0
 8010230:	d001      	beq.n	8010236 <luaT_callorderTM+0x44>
 8010232:	2301      	movs	r3, #1
 8010234:	e006      	b.n	8010244 <luaT_callorderTM+0x52>
 8010236:	2300      	movs	r3, #0
 8010238:	e004      	b.n	8010244 <luaT_callorderTM+0x52>
        return l_isfalse(s2v(L->top));
      }
      /* else error will remove this 'ci'; no need to clear mark */
  }
#endif
  luaG_ordererror(L, p1, p2);  /* no metamethod found */
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	68b9      	ldr	r1, [r7, #8]
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	f7f8 fe42 	bl	8008ec8 <luaG_ordererror>
  return 0;  /* to avoid warnings */
}
 8010244:	4618      	mov	r0, r3
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <luaT_callorderiTM>:


int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,
                       int flip, int isfloat, TMS event) {
 801024c:	b580      	push	{r7, lr}
 801024e:	b08a      	sub	sp, #40	; 0x28
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	607a      	str	r2, [r7, #4]
 8010258:	603b      	str	r3, [r7, #0]
  TValue aux; const TValue *p2;
  if (isfloat) {
 801025a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00e      	beq.n	801027e <luaT_callorderiTM+0x32>
    setfltvalue(&aux, cast_num(v2));
 8010260:	f107 0314 	add.w	r3, r7, #20
 8010264:	61fb      	str	r3, [r7, #28]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	ee07 3a90 	vmov	s15, r3
 801026c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	edc3 7a00 	vstr	s15, [r3]
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	2213      	movs	r2, #19
 801027a:	711a      	strb	r2, [r3, #4]
 801027c:	e008      	b.n	8010290 <luaT_callorderiTM+0x44>
  }
  else
    setivalue(&aux, v2);
 801027e:	f107 0314 	add.w	r3, r7, #20
 8010282:	623b      	str	r3, [r7, #32]
 8010284:	6a3b      	ldr	r3, [r7, #32]
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	601a      	str	r2, [r3, #0]
 801028a:	6a3b      	ldr	r3, [r7, #32]
 801028c:	2203      	movs	r2, #3
 801028e:	711a      	strb	r2, [r3, #4]
  if (flip) {  /* arguments were exchanged? */
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <luaT_callorderiTM+0x56>
    p2 = p1; p1 = &aux;  /* correct them */
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	627b      	str	r3, [r7, #36]	; 0x24
 801029a:	f107 0314 	add.w	r3, r7, #20
 801029e:	60bb      	str	r3, [r7, #8]
 80102a0:	e002      	b.n	80102a8 <luaT_callorderiTM+0x5c>
  }
  else
    p2 = &aux;
 80102a2:	f107 0314 	add.w	r3, r7, #20
 80102a6:	627b      	str	r3, [r7, #36]	; 0x24
  return luaT_callorderTM(L, p1, p2, event);
 80102a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80102ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102ae:	68b9      	ldr	r1, [r7, #8]
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f7ff ff9e 	bl	80101f2 <luaT_callorderTM>
 80102b6:	4603      	mov	r3, r0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3728      	adds	r7, #40	; 0x28
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <luaT_adjustvarargs>:


void luaT_adjustvarargs (lua_State *L, int nfixparams, CallInfo *ci,
                         const Proto *p) {
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b08c      	sub	sp, #48	; 0x30
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	607a      	str	r2, [r7, #4]
 80102cc:	603b      	str	r3, [r7, #0]
  int i;
  int actual = cast_int(L->top - ci->func) - 1;  /* number of arguments */
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	68da      	ldr	r2, [r3, #12]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	10db      	asrs	r3, r3, #3
 80102da:	3b01      	subs	r3, #1
 80102dc:	62bb      	str	r3, [r7, #40]	; 0x28
  int nextra = actual - nfixparams;  /* number of extra arguments */
 80102de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	627b      	str	r3, [r7, #36]	; 0x24
  ci->u.l.nextraargs = nextra;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102ea:	619a      	str	r2, [r3, #24]
  luaD_checkstack(L, p->maxstacksize + 1);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	699a      	ldr	r2, [r3, #24]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	10db      	asrs	r3, r3, #3
 80102f8:	461a      	mov	r2, r3
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	7a1b      	ldrb	r3, [r3, #8]
 80102fe:	3301      	adds	r3, #1
 8010300:	429a      	cmp	r2, r3
 8010302:	bfd4      	ite	le
 8010304:	2301      	movle	r3, #1
 8010306:	2300      	movgt	r3, #0
 8010308:	b2db      	uxtb	r3, r3
 801030a:	2b00      	cmp	r3, #0
 801030c:	d007      	beq.n	801031e <luaT_adjustvarargs+0x5e>
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	7a1b      	ldrb	r3, [r3, #8]
 8010312:	3301      	adds	r3, #1
 8010314:	2201      	movs	r2, #1
 8010316:	4619      	mov	r1, r3
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f7f9 f933 	bl	8009584 <luaD_growstack>
  /* copy function to the top of the stack */
  setobjs2s(L, L->top++, ci->func);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	f103 0108 	add.w	r1, r3, #8
 8010326:	68fa      	ldr	r2, [r7, #12]
 8010328:	60d1      	str	r1, [r2, #12]
 801032a:	623b      	str	r3, [r7, #32]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	61fb      	str	r3, [r7, #28]
 8010332:	6a3b      	ldr	r3, [r7, #32]
 8010334:	69fa      	ldr	r2, [r7, #28]
 8010336:	6812      	ldr	r2, [r2, #0]
 8010338:	601a      	str	r2, [r3, #0]
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	791a      	ldrb	r2, [r3, #4]
 801033e:	6a3b      	ldr	r3, [r7, #32]
 8010340:	711a      	strb	r2, [r3, #4]
  /* move fixed parameters to the top of the stack */
  for (i = 1; i <= nfixparams; i++) {
 8010342:	2301      	movs	r3, #1
 8010344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010346:	e01e      	b.n	8010386 <luaT_adjustvarargs+0xc6>
    setobjs2s(L, L->top++, ci->func + i);
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	f103 0108 	add.w	r1, r3, #8
 8010350:	68fa      	ldr	r2, [r7, #12]
 8010352:	60d1      	str	r1, [r2, #12]
 8010354:	61bb      	str	r3, [r7, #24]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035c:	00db      	lsls	r3, r3, #3
 801035e:	4413      	add	r3, r2
 8010360:	617b      	str	r3, [r7, #20]
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	697a      	ldr	r2, [r7, #20]
 8010366:	6812      	ldr	r2, [r2, #0]
 8010368:	601a      	str	r2, [r3, #0]
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	791a      	ldrb	r2, [r3, #4]
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	711a      	strb	r2, [r3, #4]
    setnilvalue(s2v(ci->func + i));  /* erase original parameter (for GC) */
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	00db      	lsls	r3, r3, #3
 801037a:	4413      	add	r3, r2
 801037c:	2200      	movs	r2, #0
 801037e:	711a      	strb	r2, [r3, #4]
  for (i = 1; i <= nfixparams; i++) {
 8010380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010382:	3301      	adds	r3, #1
 8010384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	429a      	cmp	r2, r3
 801038c:	dddc      	ble.n	8010348 <luaT_adjustvarargs+0x88>
  }
  ci->func += actual + 1;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010394:	3301      	adds	r3, #1
 8010396:	00db      	lsls	r3, r3, #3
 8010398:	441a      	add	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	601a      	str	r2, [r3, #0]
  ci->top += actual + 1;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685a      	ldr	r2, [r3, #4]
 80103a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a4:	3301      	adds	r3, #1
 80103a6:	00db      	lsls	r3, r3, #3
 80103a8:	441a      	add	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	605a      	str	r2, [r3, #4]
  lua_assert(L->top <= ci->top && ci->top <= L->stack_last);
}
 80103ae:	bf00      	nop
 80103b0:	3730      	adds	r7, #48	; 0x30
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <luaT_getvarargs>:


void luaT_getvarargs (lua_State *L, CallInfo *ci, StkId where, int wanted) {
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b08a      	sub	sp, #40	; 0x28
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	60f8      	str	r0, [r7, #12]
 80103be:	60b9      	str	r1, [r7, #8]
 80103c0:	607a      	str	r2, [r7, #4]
 80103c2:	603b      	str	r3, [r7, #0]
  int i;
  int nextra = ci->u.l.nextraargs;
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	699b      	ldr	r3, [r3, #24]
 80103c8:	623b      	str	r3, [r7, #32]
  if (wanted < 0) {
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	da2d      	bge.n	801042c <luaT_getvarargs+0x76>
    wanted = nextra;  /* get all extra arguments available */
 80103d0:	6a3b      	ldr	r3, [r7, #32]
 80103d2:	603b      	str	r3, [r7, #0]
    checkstackGCp(L, nextra, where);  /* ensure stack space */
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	699a      	ldr	r2, [r3, #24]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	10db      	asrs	r3, r3, #3
 80103e0:	461a      	mov	r2, r3
 80103e2:	6a3b      	ldr	r3, [r7, #32]
 80103e4:	4293      	cmp	r3, r2
 80103e6:	bfac      	ite	ge
 80103e8:	2301      	movge	r3, #1
 80103ea:	2300      	movlt	r3, #0
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d016      	beq.n	8010420 <luaT_getvarargs+0x6a>
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	69db      	ldr	r3, [r3, #28]
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	61fb      	str	r3, [r7, #28]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	691b      	ldr	r3, [r3, #16]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	2b00      	cmp	r3, #0
 8010404:	dd02      	ble.n	801040c <luaT_getvarargs+0x56>
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	f7fc fc42 	bl	800cc90 <luaC_step>
 801040c:	2201      	movs	r2, #1
 801040e:	6a39      	ldr	r1, [r7, #32]
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f7f9 f8b7 	bl	8009584 <luaD_growstack>
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	69da      	ldr	r2, [r3, #28]
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	4413      	add	r3, r2
 801041e:	607b      	str	r3, [r7, #4]
    L->top = where + nextra;  /* next instruction will need top */
 8010420:	6a3b      	ldr	r3, [r7, #32]
 8010422:	00db      	lsls	r3, r3, #3
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	441a      	add	r2, r3
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < wanted && i < nextra; i++)
 801042c:	2300      	movs	r3, #0
 801042e:	627b      	str	r3, [r7, #36]	; 0x24
 8010430:	e017      	b.n	8010462 <luaT_getvarargs+0xac>
    setobjs2s(L, where + i, ci->func - nextra + i);
 8010432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010434:	00db      	lsls	r3, r3, #3
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	4413      	add	r3, r2
 801043a:	61bb      	str	r3, [r7, #24]
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010442:	6a3b      	ldr	r3, [r7, #32]
 8010444:	1acb      	subs	r3, r1, r3
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	4413      	add	r3, r2
 801044a:	617b      	str	r3, [r7, #20]
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	697a      	ldr	r2, [r7, #20]
 8010450:	6812      	ldr	r2, [r2, #0]
 8010452:	601a      	str	r2, [r3, #0]
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	791a      	ldrb	r2, [r3, #4]
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	711a      	strb	r2, [r3, #4]
  for (i = 0; i < wanted && i < nextra; i++)
 801045c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045e:	3301      	adds	r3, #1
 8010460:	627b      	str	r3, [r7, #36]	; 0x24
 8010462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	429a      	cmp	r2, r3
 8010468:	da0d      	bge.n	8010486 <luaT_getvarargs+0xd0>
 801046a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	429a      	cmp	r2, r3
 8010470:	dbdf      	blt.n	8010432 <luaT_getvarargs+0x7c>
  for (; i < wanted; i++)   /* complete required results with nil */
 8010472:	e008      	b.n	8010486 <luaT_getvarargs+0xd0>
    setnilvalue(s2v(where + i));
 8010474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010476:	00db      	lsls	r3, r3, #3
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	4413      	add	r3, r2
 801047c:	2200      	movs	r2, #0
 801047e:	711a      	strb	r2, [r3, #4]
  for (; i < wanted; i++)   /* complete required results with nil */
 8010480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010482:	3301      	adds	r3, #1
 8010484:	627b      	str	r3, [r7, #36]	; 0x24
 8010486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	429a      	cmp	r2, r3
 801048c:	dbf2      	blt.n	8010474 <luaT_getvarargs+0xbe>
}
 801048e:	bf00      	nop
 8010490:	bf00      	nop
 8010492:	3728      	adds	r7, #40	; 0x28
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <luaMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *luaMalloc( size_t xWantedSize )
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b086      	sub	sp, #24
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80104a0:	2300      	movs	r3, #0
 80104a2:	60fb      	str	r3, [r7, #12]


  LUA_MEM_ENTER_CRITICAL_SECTION();
 80104a4:	f00a fdde 	bl	801b064 <vTaskSuspendAll>

  /* If this is the first call to malloc then the heap will require
  initialisation to setup the list of free blocks. */
  if( pxEnd == NULL )
 80104a8:	4b40      	ldr	r3, [pc, #256]	; (80105ac <luaMalloc+0x114>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d101      	bne.n	80104b4 <luaMalloc+0x1c>
  {
    LuaHeapInit();
 80104b0:	f000 f8c0 	bl	8010634 <LuaHeapInit>

  /* Check the requested block size is not so large that the top bit is
  set.  The top bit of the block size member of the BlockLink_t structure
  is used to determine who owns the block - the application or the
  kernel, so it must be free. */
  if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104b4:	4b3e      	ldr	r3, [pc, #248]	; (80105b0 <luaMalloc+0x118>)
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4013      	ands	r3, r2
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d16d      	bne.n	801059c <luaMalloc+0x104>
  {
    /* The wanted size is increased so it can contain a BlockLink_t
    structure in addition to the requested amount of bytes. */
    if( xWantedSize > 0 )
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00d      	beq.n	80104e2 <luaMalloc+0x4a>
    {
      xWantedSize += xHeapStructSize;
 80104c6:	2208      	movs	r2, #8
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4413      	add	r3, r2
 80104cc:	607b      	str	r3, [r7, #4]

      /* Ensure that blocks are always aligned to the required number
      of bytes. */
      if( ( xWantedSize & LUA_tBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f003 0303 	and.w	r3, r3, #3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d004      	beq.n	80104e2 <luaMalloc+0x4a>
      {
        /* Byte alignment required. */
        xWantedSize += ( LUA_BYTE_ALIGNMENT - ( xWantedSize & LUA_tBYTE_ALIGNMENT_MASK ) );
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f023 0303 	bic.w	r3, r3, #3
 80104de:	3304      	adds	r3, #4
 80104e0:	607b      	str	r3, [r7, #4]
      }

    }

    if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d059      	beq.n	801059c <luaMalloc+0x104>
 80104e8:	4b32      	ldr	r3, [pc, #200]	; (80105b4 <luaMalloc+0x11c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d854      	bhi.n	801059c <luaMalloc+0x104>
    {
      /* Traverse the list from the start	(lowest address) block until
      one	of adequate size is found. */
      pxPreviousBlock = &xStart;
 80104f2:	4b31      	ldr	r3, [pc, #196]	; (80105b8 <luaMalloc+0x120>)
 80104f4:	613b      	str	r3, [r7, #16]
      pxBlock = xStart.pxNextFreeBlock;
 80104f6:	4b30      	ldr	r3, [pc, #192]	; (80105b8 <luaMalloc+0x120>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	617b      	str	r3, [r7, #20]
      while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104fc:	e004      	b.n	8010508 <luaMalloc+0x70>
      {
        pxPreviousBlock = pxBlock;
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	613b      	str	r3, [r7, #16]
        pxBlock = pxBlock->pxNextFreeBlock;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	617b      	str	r3, [r7, #20]
      while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	429a      	cmp	r2, r3
 8010510:	d903      	bls.n	801051a <luaMalloc+0x82>
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1f1      	bne.n	80104fe <luaMalloc+0x66>
      }

      /* If the end marker was reached then a block of adequate size
      was	not found. */
      if( pxBlock != pxEnd )
 801051a:	4b24      	ldr	r3, [pc, #144]	; (80105ac <luaMalloc+0x114>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	429a      	cmp	r2, r3
 8010522:	d03b      	beq.n	801059c <luaMalloc+0x104>
      {
        /* Return the memory space pointed to - jumping over the
        BlockLink_t structure at its start. */
        pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2208      	movs	r2, #8
 801052a:	4413      	add	r3, r2
 801052c:	60fb      	str	r3, [r7, #12]

        /* This block is being returned for use so must be taken out
        of the list of free blocks. */
        pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	601a      	str	r2, [r3, #0]

        /* If the block is larger than required it can be split into
        two. */
        if( ( pxBlock->xBlockSize - xWantedSize ) > LUA_HEAP_MINIMUM_BLOCK_SIZE )
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	685a      	ldr	r2, [r3, #4]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	1ad2      	subs	r2, r2, r3
 801053e:	2308      	movs	r3, #8
 8010540:	005b      	lsls	r3, r3, #1
 8010542:	429a      	cmp	r2, r3
 8010544:	d90f      	bls.n	8010566 <luaMalloc+0xce>
        {
          /* This block is to be split into two.  Create a new
          block following the number of bytes requested. The void
          cast is used to prevent byte alignment warnings from the
          compiler. */
          pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010546:	697a      	ldr	r2, [r7, #20]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	4413      	add	r3, r2
 801054c:	60bb      	str	r3, [r7, #8]

          /* Calculate the sizes of two blocks split from the
          single block. */
          pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	685a      	ldr	r2, [r3, #4]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	1ad2      	subs	r2, r2, r3
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	605a      	str	r2, [r3, #4]
          pxBlock->xBlockSize = xWantedSize;
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	605a      	str	r2, [r3, #4]

          /* Insert the new block into the list of free blocks. */
          LuaInsertBlockIntoFreeList( pxNewBlockLink );
 8010560:	68b8      	ldr	r0, [r7, #8]
 8010562:	f000 f8c9 	bl	80106f8 <LuaInsertBlockIntoFreeList>
        }

        xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010566:	4b13      	ldr	r3, [pc, #76]	; (80105b4 <luaMalloc+0x11c>)
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	4a10      	ldr	r2, [pc, #64]	; (80105b4 <luaMalloc+0x11c>)
 8010572:	6013      	str	r3, [r2, #0]

        if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010574:	4b0f      	ldr	r3, [pc, #60]	; (80105b4 <luaMalloc+0x11c>)
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	4b10      	ldr	r3, [pc, #64]	; (80105bc <luaMalloc+0x124>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	429a      	cmp	r2, r3
 801057e:	d203      	bcs.n	8010588 <luaMalloc+0xf0>
        {
          xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010580:	4b0c      	ldr	r3, [pc, #48]	; (80105b4 <luaMalloc+0x11c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4a0d      	ldr	r2, [pc, #52]	; (80105bc <luaMalloc+0x124>)
 8010586:	6013      	str	r3, [r2, #0]
        }


        /* The block is being returned - it is allocated and owned
        by the application and has no "next" block. */
        pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	4b08      	ldr	r3, [pc, #32]	; (80105b0 <luaMalloc+0x118>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	431a      	orrs	r2, r3
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	605a      	str	r2, [r3, #4]
        pxBlock->pxNextFreeBlock = NULL;
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	2200      	movs	r2, #0
 801059a:	601a      	str	r2, [r3, #0]
      }

    }
  }

  LUA_MEM_LEAVE_CRITICAL_SECTION();
 801059c:	f00a fd70 	bl	801b080 <xTaskResumeAll>

	return pvReturn;
 80105a0:	68fb      	ldr	r3, [r7, #12]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3718      	adds	r7, #24
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	2000b148 	.word	0x2000b148
 80105b0:	2000b154 	.word	0x2000b154
 80105b4:	2000b14c 	.word	0x2000b14c
 80105b8:	2000b140 	.word	0x2000b140
 80105bc:	2000b150 	.word	0x2000b150

080105c0 <luaFree>:
/*-----------------------------------------------------------*/

void luaFree( void *pv )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d027      	beq.n	8010622 <luaFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80105d2:	2308      	movs	r3, #8
 80105d4:	425b      	negs	r3, r3
 80105d6:	68fa      	ldr	r2, [r7, #12]
 80105d8:	4413      	add	r3, r2
 80105da:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	60bb      	str	r3, [r7, #8]

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	685a      	ldr	r2, [r3, #4]
 80105e4:	4b11      	ldr	r3, [pc, #68]	; (801062c <luaFree+0x6c>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	4013      	ands	r3, r2
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d019      	beq.n	8010622 <luaFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d115      	bne.n	8010622 <luaFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	685a      	ldr	r2, [r3, #4]
 80105fa:	4b0c      	ldr	r3, [pc, #48]	; (801062c <luaFree+0x6c>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	43db      	mvns	r3, r3
 8010600:	401a      	ands	r2, r3
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	605a      	str	r2, [r3, #4]

				LUA_MEM_ENTER_CRITICAL_SECTION();
 8010606:	f00a fd2d 	bl	801b064 <vTaskSuspendAll>

				/* Add this block to the list of free blocks. */
				xFreeBytesRemaining += pxLink->xBlockSize;
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	4b08      	ldr	r3, [pc, #32]	; (8010630 <luaFree+0x70>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	4413      	add	r3, r2
 8010614:	4a06      	ldr	r2, [pc, #24]	; (8010630 <luaFree+0x70>)
 8010616:	6013      	str	r3, [r2, #0]
				LuaInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010618:	68b8      	ldr	r0, [r7, #8]
 801061a:	f000 f86d 	bl	80106f8 <LuaInsertBlockIntoFreeList>

				LUA_MEM_LEAVE_CRITICAL_SECTION();
 801061e:	f00a fd2f 	bl	801b080 <xTaskResumeAll>
			}
		}
	}
}
 8010622:	bf00      	nop
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	2000b154 	.word	0x2000b154
 8010630:	2000b14c 	.word	0x2000b14c

08010634 <LuaHeapInit>:
}

/*-----------------------------------------------------------*/

static void LuaHeapInit( void )
{
 8010634:	b480      	push	{r7}
 8010636:	b085      	sub	sp, #20
 8010638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
luaPointerSize_t uxAddress;
luaPointerSize_t xTotalHeapSize = LUA_HEAP_SIZE;
 801063a:	f649 4340 	movw	r3, #40000	; 0x9c40
 801063e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( luaPointerSize_t ) ucHeap;
 8010640:	4b27      	ldr	r3, [pc, #156]	; (80106e0 <LuaHeapInit+0xac>)
 8010642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & LUA_tBYTE_ALIGNMENT_MASK ) != 0 )
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f003 0303 	and.w	r3, r3, #3
 801064a:	2b00      	cmp	r3, #0
 801064c:	d00c      	beq.n	8010668 <LuaHeapInit+0x34>
	{
		uxAddress += ( LUA_BYTE_ALIGNMENT - 1 );
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	3303      	adds	r3, #3
 8010652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( luaPointerSize_t ) LUA_tBYTE_ALIGNMENT_MASK );
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f023 0303 	bic.w	r3, r3, #3
 801065a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( luaPointerSize_t ) ucHeap;
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	4a1f      	ldr	r2, [pc, #124]	; (80106e0 <LuaHeapInit+0xac>)
 8010664:	4413      	add	r3, r2
 8010666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801066c:	4a1d      	ldr	r2, [pc, #116]	; (80106e4 <LuaHeapInit+0xb0>)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010672:	4b1c      	ldr	r3, [pc, #112]	; (80106e4 <LuaHeapInit+0xb0>)
 8010674:	2200      	movs	r2, #0
 8010676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( luaPointerSize_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	4413      	add	r3, r2
 801067e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010680:	2208      	movs	r2, #8
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	1a9b      	subs	r3, r3, r2
 8010686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( luaPointerSize_t ) LUA_tBYTE_ALIGNMENT_MASK );
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f023 0303 	bic.w	r3, r3, #3
 801068e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	4a15      	ldr	r2, [pc, #84]	; (80106e8 <LuaHeapInit+0xb4>)
 8010694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010696:	4b14      	ldr	r3, [pc, #80]	; (80106e8 <LuaHeapInit+0xb4>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2200      	movs	r2, #0
 801069c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801069e:	4b12      	ldr	r3, [pc, #72]	; (80106e8 <LuaHeapInit+0xb4>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2200      	movs	r2, #0
 80106a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( luaPointerSize_t ) pxFirstFreeBlock;
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	1ad2      	subs	r2, r2, r3
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80106b4:	4b0c      	ldr	r3, [pc, #48]	; (80106e8 <LuaHeapInit+0xb4>)
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	4a0a      	ldr	r2, [pc, #40]	; (80106ec <LuaHeapInit+0xb8>)
 80106c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	4a09      	ldr	r2, [pc, #36]	; (80106f0 <LuaHeapInit+0xbc>)
 80106ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * LUA_HEAP_BITS_PER_BYTE ) - 1 );
 80106cc:	4b09      	ldr	r3, [pc, #36]	; (80106f4 <LuaHeapInit+0xc0>)
 80106ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80106d2:	601a      	str	r2, [r3, #0]
}
 80106d4:	bf00      	nop
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	20001500 	.word	0x20001500
 80106e4:	2000b140 	.word	0x2000b140
 80106e8:	2000b148 	.word	0x2000b148
 80106ec:	2000b150 	.word	0x2000b150
 80106f0:	2000b14c 	.word	0x2000b14c
 80106f4:	2000b154 	.word	0x2000b154

080106f8 <LuaInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void LuaInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010700:	4b28      	ldr	r3, [pc, #160]	; (80107a4 <LuaInsertBlockIntoFreeList+0xac>)
 8010702:	60fb      	str	r3, [r7, #12]
 8010704:	e002      	b.n	801070c <LuaInsertBlockIntoFreeList+0x14>
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	60fb      	str	r3, [r7, #12]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	429a      	cmp	r2, r3
 8010714:	d8f7      	bhi.n	8010706 <LuaInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	4413      	add	r3, r2
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	429a      	cmp	r2, r3
 8010726:	d108      	bne.n	801073a <LuaInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	685a      	ldr	r2, [r3, #4]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	441a      	add	r2, r3
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	607b      	str	r3, [r7, #4]
	}


	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	441a      	add	r2, r3
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	429a      	cmp	r2, r3
 801074c:	d118      	bne.n	8010780 <LuaInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	4b15      	ldr	r3, [pc, #84]	; (80107a8 <LuaInsertBlockIntoFreeList+0xb0>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	429a      	cmp	r2, r3
 8010758:	d00d      	beq.n	8010776 <LuaInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	685a      	ldr	r2, [r3, #4]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	441a      	add	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	601a      	str	r2, [r3, #0]
 8010774:	e008      	b.n	8010788 <LuaInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010776:	4b0c      	ldr	r3, [pc, #48]	; (80107a8 <LuaInsertBlockIntoFreeList+0xb0>)
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	601a      	str	r2, [r3, #0]
 801077e:	e003      	b.n	8010788 <LuaInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681a      	ldr	r2, [r3, #0]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010788:	68fa      	ldr	r2, [r7, #12]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	429a      	cmp	r2, r3
 801078e:	d002      	beq.n	8010796 <LuaInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	601a      	str	r2, [r3, #0]
	}

}
 8010796:	bf00      	nop
 8010798:	3714      	adds	r7, #20
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	2000b140 	.word	0x2000b140
 80107a8:	2000b148 	.word	0x2000b148

080107ac <l_strton>:
** If the value is not a string or is a string not representing
** a valid numeral (or if coercions from strings to numbers
** are disabled via macro 'cvt2num'), do not modify 'result'
** and return 0.
*/
static int l_strton (const TValue *obj, TValue *result) {
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
  lua_assert(obj != result);
  if (!cvt2num(obj))  /* is object not a string? */
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	791b      	ldrb	r3, [r3, #4]
 80107ba:	f003 030f 	and.w	r3, r3, #15
 80107be:	2b04      	cmp	r3, #4
 80107c0:	d001      	beq.n	80107c6 <l_strton+0x1a>
    return 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	e01a      	b.n	80107fc <l_strton+0x50>
  else
    return (luaO_str2num(svalue(obj), result) == vslen(obj) + 1);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3310      	adds	r3, #16
 80107cc:	6839      	ldr	r1, [r7, #0]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fc fd68 	bl	800d2a4 <luaO_str2num>
 80107d4:	4602      	mov	r2, r0
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	791b      	ldrb	r3, [r3, #4]
 80107dc:	2b04      	cmp	r3, #4
 80107de:	d104      	bne.n	80107ea <l_strton+0x3e>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	79db      	ldrb	r3, [r3, #7]
 80107e6:	3301      	adds	r3, #1
 80107e8:	e003      	b.n	80107f2 <l_strton+0x46>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	3301      	adds	r3, #1
 80107f2:	4293      	cmp	r3, r2
 80107f4:	bf0c      	ite	eq
 80107f6:	2301      	moveq	r3, #1
 80107f8:	2300      	movne	r3, #0
 80107fa:	b2db      	uxtb	r3, r3
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <luaV_tonumber_>:

/*
** Try to convert a value to a float. The float case is already handled
** by the macro 'tonumber'.
*/
int luaV_tonumber_ (const TValue *obj, lua_Number *n) {
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	6039      	str	r1, [r7, #0]
  TValue v;
  if (ttisinteger(obj)) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	791b      	ldrb	r3, [r3, #4]
 8010812:	2b03      	cmp	r3, #3
 8010814:	d10a      	bne.n	801082c <luaV_tonumber_+0x28>
    *n = cast_num(ivalue(obj));
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	ee07 3a90 	vmov	s15, r3
 801081e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 8010828:	2301      	movs	r3, #1
 801082a:	e019      	b.n	8010860 <luaV_tonumber_+0x5c>
  }
  else if (l_strton(obj, &v)) {  /* string coercible to number? */
 801082c:	f107 0308 	add.w	r3, r7, #8
 8010830:	4619      	mov	r1, r3
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f7ff ffba 	bl	80107ac <l_strton>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00f      	beq.n	801085e <luaV_tonumber_+0x5a>
    *n = nvalue(&v);  /* convert result of 'luaO_str2num' to a float */
 801083e:	7b3b      	ldrb	r3, [r7, #12]
 8010840:	2b03      	cmp	r3, #3
 8010842:	d105      	bne.n	8010850 <luaV_tonumber_+0x4c>
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	ee07 3a90 	vmov	s15, r3
 801084a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801084e:	e001      	b.n	8010854 <luaV_tonumber_+0x50>
 8010850:	edd7 7a02 	vldr	s15, [r7, #8]
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 801085a:	2301      	movs	r3, #1
 801085c:	e000      	b.n	8010860 <luaV_tonumber_+0x5c>
  }
  else
    return 0;  /* conversion failed */
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3710      	adds	r7, #16
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <luaV_flttointeger>:


/*
** try to convert a float to an integer, rounding according to 'mode'.
*/
int luaV_flttointeger (lua_Number n, lua_Integer *p, F2Imod mode) {
 8010868:	b580      	push	{r7, lr}
 801086a:	b086      	sub	sp, #24
 801086c:	af00      	add	r7, sp, #0
 801086e:	ed87 0a03 	vstr	s0, [r7, #12]
 8010872:	60b8      	str	r0, [r7, #8]
 8010874:	460b      	mov	r3, r1
 8010876:	71fb      	strb	r3, [r7, #7]
  lua_Number f = l_floor(n);
 8010878:	ed97 0a03 	vldr	s0, [r7, #12]
 801087c:	f00d f936 	bl	801daec <floorf>
 8010880:	ed87 0a05 	vstr	s0, [r7, #20]
  if (n != f) {  /* not an integral value? */
 8010884:	ed97 7a03 	vldr	s14, [r7, #12]
 8010888:	edd7 7a05 	vldr	s15, [r7, #20]
 801088c:	eeb4 7a67 	vcmp.f32	s14, s15
 8010890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010894:	d00f      	beq.n	80108b6 <luaV_flttointeger+0x4e>
    if (mode == F2Ieq) return 0;  /* fails if mode demands integral value */
 8010896:	79fb      	ldrb	r3, [r7, #7]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d101      	bne.n	80108a0 <luaV_flttointeger+0x38>
 801089c:	2300      	movs	r3, #0
 801089e:	e027      	b.n	80108f0 <luaV_flttointeger+0x88>
    else if (mode == F2Iceil)  /* needs ceil? */
 80108a0:	79fb      	ldrb	r3, [r7, #7]
 80108a2:	2b02      	cmp	r3, #2
 80108a4:	d107      	bne.n	80108b6 <luaV_flttointeger+0x4e>
      f += 1;  /* convert floor to ceil (remember: n != f) */
 80108a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80108aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80108ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108b2:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  return lua_numbertointeger(f, p);
 80108b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80108ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80108f8 <luaV_flttointeger+0x90>
 80108be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c6:	db12      	blt.n	80108ee <luaV_flttointeger+0x86>
 80108c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80108cc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80108fc <luaV_flttointeger+0x94>
 80108d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d8:	d509      	bpl.n	80108ee <luaV_flttointeger+0x86>
 80108da:	edd7 7a05 	vldr	s15, [r7, #20]
 80108de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108e2:	ee17 2a90 	vmov	r2, s15
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	601a      	str	r2, [r3, #0]
 80108ea:	2301      	movs	r3, #1
 80108ec:	e000      	b.n	80108f0 <luaV_flttointeger+0x88>
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3718      	adds	r7, #24
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	cf000000 	.word	0xcf000000
 80108fc:	4f000000 	.word	0x4f000000

08010900 <luaV_tointegerns>:
/*
** try to convert a value to an integer, rounding according to 'mode',
** without string coercion.
** ("Fast track" handled by macro 'tointegerns'.)
*/
int luaV_tointegerns (const TValue *obj, lua_Integer *p, F2Imod mode) {
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	4613      	mov	r3, r2
 801090c:	71fb      	strb	r3, [r7, #7]
  if (ttisfloat(obj))
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	791b      	ldrb	r3, [r3, #4]
 8010912:	2b13      	cmp	r3, #19
 8010914:	d10b      	bne.n	801092e <luaV_tointegerns+0x2e>
    return luaV_flttointeger(fltvalue(obj), p, mode);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	edd3 7a00 	vldr	s15, [r3]
 801091c:	79fb      	ldrb	r3, [r7, #7]
 801091e:	4619      	mov	r1, r3
 8010920:	68b8      	ldr	r0, [r7, #8]
 8010922:	eeb0 0a67 	vmov.f32	s0, s15
 8010926:	f7ff ff9f 	bl	8010868 <luaV_flttointeger>
 801092a:	4603      	mov	r3, r0
 801092c:	e00a      	b.n	8010944 <luaV_tointegerns+0x44>
  else if (ttisinteger(obj)) {
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	791b      	ldrb	r3, [r3, #4]
 8010932:	2b03      	cmp	r3, #3
 8010934:	d105      	bne.n	8010942 <luaV_tointegerns+0x42>
    *p = ivalue(obj);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	601a      	str	r2, [r3, #0]
    return 1;
 801093e:	2301      	movs	r3, #1
 8010940:	e000      	b.n	8010944 <luaV_tointegerns+0x44>
  }
  else
    return 0;
 8010942:	2300      	movs	r3, #0
}
 8010944:	4618      	mov	r0, r3
 8010946:	3710      	adds	r7, #16
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <luaV_tointeger>:


/*
** try to convert a value to an integer.
*/
int luaV_tointeger (const TValue *obj, lua_Integer *p, F2Imod mode) {
 801094c:	b580      	push	{r7, lr}
 801094e:	b086      	sub	sp, #24
 8010950:	af00      	add	r7, sp, #0
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	4613      	mov	r3, r2
 8010958:	71fb      	strb	r3, [r7, #7]
  TValue v;
  if (l_strton(obj, &v))  /* does 'obj' point to a numerical string? */
 801095a:	f107 0310 	add.w	r3, r7, #16
 801095e:	4619      	mov	r1, r3
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f7ff ff23 	bl	80107ac <l_strton>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <luaV_tointeger+0x26>
    obj = &v;  /* change it to point to its corresponding number */
 801096c:	f107 0310 	add.w	r3, r7, #16
 8010970:	60fb      	str	r3, [r7, #12]
  return luaV_tointegerns(obj, p, mode);
 8010972:	79fb      	ldrb	r3, [r7, #7]
 8010974:	461a      	mov	r2, r3
 8010976:	68b9      	ldr	r1, [r7, #8]
 8010978:	68f8      	ldr	r0, [r7, #12]
 801097a:	f7ff ffc1 	bl	8010900 <luaV_tointegerns>
 801097e:	4603      	mov	r3, r0
}
 8010980:	4618      	mov	r0, r3
 8010982:	3718      	adds	r7, #24
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <forlimit>:
** true to signal that. (For this latter case, no integer limit would be
** correct; even a limit of LUA_MININTEGER would run the loop once for
** an initial value equal to LUA_MININTEGER.)
*/
static int forlimit (lua_State *L, lua_Integer init, const TValue *lim,
                                   lua_Integer *p, lua_Integer step) {
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	607a      	str	r2, [r7, #4]
 8010994:	603b      	str	r3, [r7, #0]
  if (!luaV_tointeger(lim, p, (step < 0 ? F2Iceil : F2Ifloor))) {
 8010996:	6a3b      	ldr	r3, [r7, #32]
 8010998:	2b00      	cmp	r3, #0
 801099a:	da01      	bge.n	80109a0 <forlimit+0x18>
 801099c:	2302      	movs	r3, #2
 801099e:	e000      	b.n	80109a2 <forlimit+0x1a>
 80109a0:	2301      	movs	r3, #1
 80109a2:	461a      	mov	r2, r3
 80109a4:	6839      	ldr	r1, [r7, #0]
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f7ff ffd0 	bl	801094c <luaV_tointeger>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d135      	bne.n	8010a1e <forlimit+0x96>
    /* not coercible to in integer */
    lua_Number flim;  /* try to convert to float */
    if (!tonumber(lim, &flim)) /* cannot convert to float? */
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	791b      	ldrb	r3, [r3, #4]
 80109b6:	2b13      	cmp	r3, #19
 80109b8:	d104      	bne.n	80109c4 <forlimit+0x3c>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	617b      	str	r3, [r7, #20]
 80109c0:	2300      	movs	r3, #0
 80109c2:	e00b      	b.n	80109dc <forlimit+0x54>
 80109c4:	f107 0314 	add.w	r3, r7, #20
 80109c8:	4619      	mov	r1, r3
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7ff ff1a 	bl	8010804 <luaV_tonumber_>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	bf0c      	ite	eq
 80109d6:	2301      	moveq	r3, #1
 80109d8:	2300      	movne	r3, #0
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d004      	beq.n	80109ea <forlimit+0x62>
      luaG_forerror(L, lim, "limit");
 80109e0:	4a1b      	ldr	r2, [pc, #108]	; (8010a50 <forlimit+0xc8>)
 80109e2:	6879      	ldr	r1, [r7, #4]
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7f8 fa0f 	bl	8008e08 <luaG_forerror>
    /* else 'flim' is a float out of integer bounds */
    if (luai_numlt(0, flim)) {  /* if it is positive, it is too large */
 80109ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80109ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80109f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f6:	dd09      	ble.n	8010a0c <forlimit+0x84>
      if (step < 0) return 1;  /* initial value must be less than it */
 80109f8:	6a3b      	ldr	r3, [r7, #32]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	da01      	bge.n	8010a02 <forlimit+0x7a>
 80109fe:	2301      	movs	r3, #1
 8010a00:	e021      	b.n	8010a46 <forlimit+0xbe>
      *p = LUA_MAXINTEGER;  /* truncate */
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	e008      	b.n	8010a1e <forlimit+0x96>
    }
    else {  /* it is less than min integer */
      if (step > 0) return 1;  /* initial value must be greater than it */
 8010a0c:	6a3b      	ldr	r3, [r7, #32]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	dd01      	ble.n	8010a16 <forlimit+0x8e>
 8010a12:	2301      	movs	r3, #1
 8010a14:	e017      	b.n	8010a46 <forlimit+0xbe>
      *p = LUA_MININTEGER;  /* truncate */
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010a1c:	601a      	str	r2, [r3, #0]
    }
  }
  return (step > 0 ? init > *p : init < *p);  /* not to run? */
 8010a1e:	6a3b      	ldr	r3, [r7, #32]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	dd08      	ble.n	8010a36 <forlimit+0xae>
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	bfcc      	ite	gt
 8010a2e:	2301      	movgt	r3, #1
 8010a30:	2300      	movle	r3, #0
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	e007      	b.n	8010a46 <forlimit+0xbe>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68ba      	ldr	r2, [r7, #8]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	bfb4      	ite	lt
 8010a40:	2301      	movlt	r3, #1
 8010a42:	2300      	movge	r3, #0
 8010a44:	b2db      	uxtb	r3, r3
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3718      	adds	r7, #24
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	080227d8 	.word	0x080227d8

08010a54 <forprep>:
**   ra : internal index (safe copy of the control variable)
**   ra + 1 : loop counter (integer loops) or limit (float loops)
**   ra + 2 : step
**   ra + 3 : control variable
*/
static int forprep (lua_State *L, StkId ra) {
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b094      	sub	sp, #80	; 0x50
 8010a58:	af02      	add	r7, sp, #8
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
  TValue *pinit = s2v(ra);
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	643b      	str	r3, [r7, #64]	; 0x40
  TValue *plimit = s2v(ra + 1);
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	3308      	adds	r3, #8
 8010a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  TValue *pstep = s2v(ra + 2);
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	3310      	adds	r3, #16
 8010a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (ttisinteger(pinit) && ttisinteger(pstep)) { /* integer loop? */
 8010a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a70:	791b      	ldrb	r3, [r3, #4]
 8010a72:	2b03      	cmp	r3, #3
 8010a74:	d14c      	bne.n	8010b10 <forprep+0xbc>
 8010a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a78:	791b      	ldrb	r3, [r3, #4]
 8010a7a:	2b03      	cmp	r3, #3
 8010a7c:	d148      	bne.n	8010b10 <forprep+0xbc>
    lua_Integer init = ivalue(pinit);
 8010a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	637b      	str	r3, [r7, #52]	; 0x34
    lua_Integer step = ivalue(pstep);
 8010a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	633b      	str	r3, [r7, #48]	; 0x30
    lua_Integer limit;
    if (step == 0)
 8010a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d103      	bne.n	8010a98 <forprep+0x44>
      luaG_runerror(L, "'for' step is zero");
 8010a90:	4974      	ldr	r1, [pc, #464]	; (8010c64 <forprep+0x210>)
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7f8 faab 	bl	8008fee <luaG_runerror>
    setivalue(s2v(ra + 3), init);  /* control variable */
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	3318      	adds	r3, #24
 8010a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aa2:	601a      	str	r2, [r3, #0]
 8010aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa6:	2203      	movs	r2, #3
 8010aa8:	711a      	strb	r2, [r3, #4]
    if (forlimit(L, init, plimit, &limit, step))
 8010aaa:	f107 0214 	add.w	r2, r7, #20
 8010aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ab6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff ff65 	bl	8010988 <forlimit>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d001      	beq.n	8010ac8 <forprep+0x74>
      return 1;  /* skip the loop */
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	e0c8      	b.n	8010c5a <forprep+0x206>
    else {  /* prepare loop counter */
      lua_Unsigned count;
      if (step > 0) {  /* ascending loop? */
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	dd0d      	ble.n	8010aea <forprep+0x96>
        count = l_castS2U(limit) - l_castS2U(init);
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad4:	1ad3      	subs	r3, r2, r3
 8010ad6:	647b      	str	r3, [r7, #68]	; 0x44
        if (step != 1)  /* avoid division in the too common case */
 8010ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ada:	2b01      	cmp	r3, #1
 8010adc:	d00f      	beq.n	8010afe <forprep+0xaa>
          count /= l_castS2U(step);
 8010ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8010ae8:	e009      	b.n	8010afe <forprep+0xaa>
      }
      else {  /* step < 0; descending loop */
        count = l_castS2U(init) - l_castS2U(limit);
 8010aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aec:	697a      	ldr	r2, [r7, #20]
 8010aee:	1a9b      	subs	r3, r3, r2
 8010af0:	647b      	str	r3, [r7, #68]	; 0x44
        /* 'step+1' avoids negating 'mininteger' */
        count /= l_castS2U(-(step + 1)) + 1u;
 8010af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af4:	425b      	negs	r3, r3
 8010af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010afc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      /* store the counter in place of the limit (which won't be
         needed anymore) */
      setivalue(plimit, l_castU2S(count));
 8010afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b06:	601a      	str	r2, [r3, #0]
 8010b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0a:	2203      	movs	r2, #3
 8010b0c:	711a      	strb	r2, [r3, #4]
  if (ttisinteger(pinit) && ttisinteger(pstep)) { /* integer loop? */
 8010b0e:	e0a3      	b.n	8010c58 <forprep+0x204>
    }
  }
  else {  /* try making all values floats */
    lua_Number init; lua_Number limit; lua_Number step;
    if (l_unlikely(!tonumber(plimit, &limit)))
 8010b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b12:	791b      	ldrb	r3, [r3, #4]
 8010b14:	2b13      	cmp	r3, #19
 8010b16:	d104      	bne.n	8010b22 <forprep+0xce>
 8010b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	60fb      	str	r3, [r7, #12]
 8010b1e:	2300      	movs	r3, #0
 8010b20:	e00b      	b.n	8010b3a <forprep+0xe6>
 8010b22:	f107 030c 	add.w	r3, r7, #12
 8010b26:	4619      	mov	r1, r3
 8010b28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b2a:	f7ff fe6b 	bl	8010804 <luaV_tonumber_>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	bf0c      	ite	eq
 8010b34:	2301      	moveq	r3, #1
 8010b36:	2300      	movne	r3, #0
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d004      	beq.n	8010b48 <forprep+0xf4>
      luaG_forerror(L, plimit, "limit");
 8010b3e:	4a4a      	ldr	r2, [pc, #296]	; (8010c68 <forprep+0x214>)
 8010b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7f8 f960 	bl	8008e08 <luaG_forerror>
    if (l_unlikely(!tonumber(pstep, &step)))
 8010b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4a:	791b      	ldrb	r3, [r3, #4]
 8010b4c:	2b13      	cmp	r3, #19
 8010b4e:	d104      	bne.n	8010b5a <forprep+0x106>
 8010b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	60bb      	str	r3, [r7, #8]
 8010b56:	2300      	movs	r3, #0
 8010b58:	e00b      	b.n	8010b72 <forprep+0x11e>
 8010b5a:	f107 0308 	add.w	r3, r7, #8
 8010b5e:	4619      	mov	r1, r3
 8010b60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b62:	f7ff fe4f 	bl	8010804 <luaV_tonumber_>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	bf0c      	ite	eq
 8010b6c:	2301      	moveq	r3, #1
 8010b6e:	2300      	movne	r3, #0
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d004      	beq.n	8010b80 <forprep+0x12c>
      luaG_forerror(L, pstep, "step");
 8010b76:	4a3d      	ldr	r2, [pc, #244]	; (8010c6c <forprep+0x218>)
 8010b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7f8 f944 	bl	8008e08 <luaG_forerror>
    if (l_unlikely(!tonumber(pinit, &init)))
 8010b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b82:	791b      	ldrb	r3, [r3, #4]
 8010b84:	2b13      	cmp	r3, #19
 8010b86:	d104      	bne.n	8010b92 <forprep+0x13e>
 8010b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	613b      	str	r3, [r7, #16]
 8010b8e:	2300      	movs	r3, #0
 8010b90:	e00b      	b.n	8010baa <forprep+0x156>
 8010b92:	f107 0310 	add.w	r3, r7, #16
 8010b96:	4619      	mov	r1, r3
 8010b98:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010b9a:	f7ff fe33 	bl	8010804 <luaV_tonumber_>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	bf0c      	ite	eq
 8010ba4:	2301      	moveq	r3, #1
 8010ba6:	2300      	movne	r3, #0
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d004      	beq.n	8010bb8 <forprep+0x164>
      luaG_forerror(L, pinit, "initial value");
 8010bae:	4a30      	ldr	r2, [pc, #192]	; (8010c70 <forprep+0x21c>)
 8010bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f7f8 f928 	bl	8008e08 <luaG_forerror>
    if (step == 0)
 8010bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8010bbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc4:	d103      	bne.n	8010bce <forprep+0x17a>
      luaG_runerror(L, "'for' step is zero");
 8010bc6:	4927      	ldr	r1, [pc, #156]	; (8010c64 <forprep+0x210>)
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7f8 fa10 	bl	8008fee <luaG_runerror>
    if (luai_numlt(0, step) ? luai_numlt(limit, init)
 8010bce:	edd7 7a02 	vldr	s15, [r7, #8]
 8010bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bda:	dd0c      	ble.n	8010bf6 <forprep+0x1a2>
 8010bdc:	ed97 7a03 	vldr	s14, [r7, #12]
 8010be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8010be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bec:	bf4c      	ite	mi
 8010bee:	2301      	movmi	r3, #1
 8010bf0:	2300      	movpl	r3, #0
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	e00b      	b.n	8010c0e <forprep+0x1ba>
 8010bf6:	ed97 7a04 	vldr	s14, [r7, #16]
 8010bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8010bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c06:	bf4c      	ite	mi
 8010c08:	2301      	movmi	r3, #1
 8010c0a:	2300      	movpl	r3, #0
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d001      	beq.n	8010c16 <forprep+0x1c2>
                            : luai_numlt(init, limit))
      return 1;  /* skip the loop */
 8010c12:	2301      	movs	r3, #1
 8010c14:	e021      	b.n	8010c5a <forprep+0x206>
    else {
      /* make sure internal values are all floats */
      setfltvalue(plimit, limit);
 8010c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24
 8010c1a:	68fa      	ldr	r2, [r7, #12]
 8010c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1e:	601a      	str	r2, [r3, #0]
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	2213      	movs	r2, #19
 8010c24:	711a      	strb	r2, [r3, #4]
      setfltvalue(pstep, step);
 8010c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c28:	623b      	str	r3, [r7, #32]
 8010c2a:	68ba      	ldr	r2, [r7, #8]
 8010c2c:	6a3b      	ldr	r3, [r7, #32]
 8010c2e:	601a      	str	r2, [r3, #0]
 8010c30:	6a3b      	ldr	r3, [r7, #32]
 8010c32:	2213      	movs	r2, #19
 8010c34:	711a      	strb	r2, [r3, #4]
      setfltvalue(s2v(ra), init);  /* internal index */
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	61fb      	str	r3, [r7, #28]
 8010c3a:	693a      	ldr	r2, [r7, #16]
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	2213      	movs	r2, #19
 8010c44:	711a      	strb	r2, [r3, #4]
      setfltvalue(s2v(ra + 3), init);  /* control variable */
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	3318      	adds	r3, #24
 8010c4a:	61bb      	str	r3, [r7, #24]
 8010c4c:	693a      	ldr	r2, [r7, #16]
 8010c4e:	69bb      	ldr	r3, [r7, #24]
 8010c50:	601a      	str	r2, [r3, #0]
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	2213      	movs	r2, #19
 8010c56:	711a      	strb	r2, [r3, #4]
    }
  }
  return 0;
 8010c58:	2300      	movs	r3, #0
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3748      	adds	r7, #72	; 0x48
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	080227e0 	.word	0x080227e0
 8010c68:	080227d8 	.word	0x080227d8
 8010c6c:	080227f4 	.word	0x080227f4
 8010c70:	080227fc 	.word	0x080227fc

08010c74 <floatforloop>:
/*
** Execute a step of a float numerical for loop, returning
** true iff the loop must continue. (The integer case is
** written online with opcode OP_FORLOOP, for performance.)
*/
static int floatforloop (StkId ra) {
 8010c74:	b480      	push	{r7}
 8010c76:	b089      	sub	sp, #36	; 0x24
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  lua_Number step = fltvalue(s2v(ra + 2));
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	3310      	adds	r3, #16
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	61fb      	str	r3, [r7, #28]
  lua_Number limit = fltvalue(s2v(ra + 1));
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	3308      	adds	r3, #8
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	61bb      	str	r3, [r7, #24]
  lua_Number idx = fltvalue(s2v(ra));  /* internal index */
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	617b      	str	r3, [r7, #20]
  idx = luai_numadd(L, idx, step);  /* increment index */
 8010c92:	ed97 7a05 	vldr	s14, [r7, #20]
 8010c96:	edd7 7a07 	vldr	s15, [r7, #28]
 8010c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c9e:	edc7 7a05 	vstr	s15, [r7, #20]
  if (luai_numlt(0, step) ? luai_numle(idx, limit)
 8010ca2:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cae:	dd0c      	ble.n	8010cca <floatforloop+0x56>
 8010cb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8010cb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8010cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc0:	bf94      	ite	ls
 8010cc2:	2301      	movls	r3, #1
 8010cc4:	2300      	movhi	r3, #0
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	e00b      	b.n	8010ce2 <floatforloop+0x6e>
 8010cca:	ed97 7a06 	vldr	s14, [r7, #24]
 8010cce:	edd7 7a05 	vldr	s15, [r7, #20]
 8010cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cda:	bf94      	ite	ls
 8010cdc:	2301      	movls	r3, #1
 8010cde:	2300      	movhi	r3, #0
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d00f      	beq.n	8010d06 <floatforloop+0x92>
                          : luai_numle(limit, idx)) {
    chgfltvalue(s2v(ra), idx);  /* update internal index */
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	613b      	str	r3, [r7, #16]
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	697a      	ldr	r2, [r7, #20]
 8010cee:	601a      	str	r2, [r3, #0]
    setfltvalue(s2v(ra + 3), idx);  /* and control variable */
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	3318      	adds	r3, #24
 8010cf4:	60fb      	str	r3, [r7, #12]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	697a      	ldr	r2, [r7, #20]
 8010cfa:	601a      	str	r2, [r3, #0]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2213      	movs	r2, #19
 8010d00:	711a      	strb	r2, [r3, #4]
    return 1;  /* jump back */
 8010d02:	2301      	movs	r3, #1
 8010d04:	e000      	b.n	8010d08 <floatforloop+0x94>
  }
  else
    return 0;  /* finish the loop */
 8010d06:	2300      	movs	r3, #0
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3724      	adds	r7, #36	; 0x24
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <luaV_finishget>:
** Finish the table access 'val = t[key]'.
** if 'slot' is NULL, 't' is not a table; otherwise, 'slot' points to
** t[k] entry (which must be empty).
*/
void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,
                      const TValue *slot) {
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b08a      	sub	sp, #40	; 0x28
 8010d18:	af02      	add	r7, sp, #8
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
 8010d20:	603b      	str	r3, [r7, #0]
  int loop;  /* counter to avoid infinite loops */
  const TValue *tm;  /* metamethod */
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
 8010d22:	2300      	movs	r3, #0
 8010d24:	61fb      	str	r3, [r7, #28]
 8010d26:	e078      	b.n	8010e1a <luaV_finishget+0x106>
    if (slot == NULL) {  /* 't' is not a table? */
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d115      	bne.n	8010d5a <luaV_finishget+0x46>
      lua_assert(!ttistable(t));
      tm = luaT_gettmbyobj(L, t, TM_INDEX);
 8010d2e:	2200      	movs	r2, #0
 8010d30:	68b9      	ldr	r1, [r7, #8]
 8010d32:	68f8      	ldr	r0, [r7, #12]
 8010d34:	f7ff f840 	bl	800fdb8 <luaT_gettmbyobj>
 8010d38:	61b8      	str	r0, [r7, #24]
      if (l_unlikely(notm(tm)))
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	791b      	ldrb	r3, [r3, #4]
 8010d3e:	f003 030f 	and.w	r3, r3, #15
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	bf0c      	ite	eq
 8010d46:	2301      	moveq	r3, #1
 8010d48:	2300      	movne	r3, #0
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d029      	beq.n	8010da4 <luaV_finishget+0x90>
        luaG_typeerror(L, t, "index");  /* no metamethod */
 8010d50:	4a37      	ldr	r2, [pc, #220]	; (8010e30 <luaV_finishget+0x11c>)
 8010d52:	68b9      	ldr	r1, [r7, #8]
 8010d54:	68f8      	ldr	r0, [r7, #12]
 8010d56:	f7f8 f81b 	bl	8008d90 <luaG_typeerror>
      /* else will try the metamethod */
    }
    else {  /* 't' is a table */
      lua_assert(isempty(slot));
      tm = fasttm(L, hvalue(t)->metatable, TM_INDEX);  /* table's metamethod */
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	699b      	ldr	r3, [r3, #24]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d016      	beq.n	8010d92 <luaV_finishget+0x7e>
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	699b      	ldr	r3, [r3, #24]
 8010d6a:	799b      	ldrb	r3, [r3, #6]
 8010d6c:	f003 0301 	and.w	r3, r3, #1
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d10c      	bne.n	8010d8e <luaV_finishget+0x7a>
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	6998      	ldr	r0, [r3, #24]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	691b      	ldr	r3, [r3, #16]
 8010d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010d82:	461a      	mov	r2, r3
 8010d84:	2100      	movs	r1, #0
 8010d86:	f7fe fff3 	bl	800fd70 <luaT_gettm>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	e002      	b.n	8010d94 <luaV_finishget+0x80>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	e000      	b.n	8010d94 <luaV_finishget+0x80>
 8010d92:	2300      	movs	r3, #0
 8010d94:	61bb      	str	r3, [r7, #24]
      if (tm == NULL) {  /* no metamethod? */
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d103      	bne.n	8010da4 <luaV_finishget+0x90>
        setnilvalue(s2v(val));  /* result is nil */
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	711a      	strb	r2, [r3, #4]
        return;
 8010da2:	e042      	b.n	8010e2a <luaV_finishget+0x116>
      }
      /* else will try the metamethod */
    }
    if (ttisfunction(tm)) {  /* is metamethod a function? */
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	791b      	ldrb	r3, [r3, #4]
 8010da8:	f003 030f 	and.w	r3, r3, #15
 8010dac:	2b06      	cmp	r3, #6
 8010dae:	d108      	bne.n	8010dc2 <luaV_finishget+0xae>
      luaT_callTMres(L, tm, t, key, val);  /* call it */
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	68ba      	ldr	r2, [r7, #8]
 8010db8:	69b9      	ldr	r1, [r7, #24]
 8010dba:	68f8      	ldr	r0, [r7, #12]
 8010dbc:	f7ff f8d0 	bl	800ff60 <luaT_callTMres>
      return;
 8010dc0:	e033      	b.n	8010e2a <luaV_finishget+0x116>
    }
    t = tm;  /* else try to access 'tm[key]' */
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	60bb      	str	r3, [r7, #8]
    if (luaV_fastget(L, t, key, slot, luaH_get)) {  /* fast track? */
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	791b      	ldrb	r3, [r3, #4]
 8010dca:	2b45      	cmp	r3, #69	; 0x45
 8010dcc:	d003      	beq.n	8010dd6 <luaV_finishget+0xc2>
 8010dce:	2300      	movs	r3, #0
 8010dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	e00f      	b.n	8010df6 <luaV_finishget+0xe2>
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	6879      	ldr	r1, [r7, #4]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7fe fd91 	bl	800f904 <luaH_get>
 8010de2:	62b8      	str	r0, [r7, #40]	; 0x28
 8010de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de6:	791b      	ldrb	r3, [r3, #4]
 8010de8:	f003 030f 	and.w	r3, r3, #15
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	bf14      	ite	ne
 8010df0:	2301      	movne	r3, #1
 8010df2:	2300      	moveq	r3, #0
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d00c      	beq.n	8010e14 <luaV_finishget+0x100>
      setobj2s(L, val, slot);  /* done */
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	617b      	str	r3, [r7, #20]
 8010dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e00:	613b      	str	r3, [r7, #16]
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	693a      	ldr	r2, [r7, #16]
 8010e06:	6812      	ldr	r2, [r2, #0]
 8010e08:	601a      	str	r2, [r3, #0]
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	791a      	ldrb	r2, [r3, #4]
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	711a      	strb	r2, [r3, #4]
      return;
 8010e12:	e00a      	b.n	8010e2a <luaV_finishget+0x116>
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	3301      	adds	r3, #1
 8010e18:	61fb      	str	r3, [r7, #28]
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010e20:	db82      	blt.n	8010d28 <luaV_finishget+0x14>
    }
    /* else repeat (tail call 'luaV_finishget') */
  }
  luaG_runerror(L, "'__index' chain too long; possible loop");
 8010e22:	4904      	ldr	r1, [pc, #16]	; (8010e34 <luaV_finishget+0x120>)
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f7f8 f8e2 	bl	8008fee <luaG_runerror>
}
 8010e2a:	3720      	adds	r7, #32
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	0802280c 	.word	0x0802280c
 8010e34:	08022814 	.word	0x08022814

08010e38 <luaV_finishset>:
** to the entry 't[key]', or to a value with an absent key if there
** is no such entry.  (The value at 'slot' must be empty, otherwise
** 'luaV_fastget' would have done the job.)
*/
void luaV_finishset (lua_State *L, const TValue *t, TValue *key,
                     TValue *val, const TValue *slot) {
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b08c      	sub	sp, #48	; 0x30
 8010e3c:	af02      	add	r7, sp, #8
 8010e3e:	60f8      	str	r0, [r7, #12]
 8010e40:	60b9      	str	r1, [r7, #8]
 8010e42:	607a      	str	r2, [r7, #4]
 8010e44:	603b      	str	r3, [r7, #0]
  int loop;  /* counter to avoid infinite loops */
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
 8010e46:	2300      	movs	r3, #0
 8010e48:	627b      	str	r3, [r7, #36]	; 0x24
 8010e4a:	e0b8      	b.n	8010fbe <luaV_finishset+0x186>
    const TValue *tm;  /* '__newindex' metamethod */
    if (slot != NULL) {  /* is 't' a table? */
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d04a      	beq.n	8010ee8 <luaV_finishset+0xb0>
      Table *h = hvalue(t);  /* save 't' table */
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	61fb      	str	r3, [r7, #28]
      lua_assert(isempty(slot));  /* slot must be empty */
      tm = fasttm(L, h->metatable, TM_NEWINDEX);  /* get metamethod */
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	699b      	ldr	r3, [r3, #24]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d014      	beq.n	8010e8a <luaV_finishset+0x52>
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	699b      	ldr	r3, [r3, #24]
 8010e64:	799b      	ldrb	r3, [r3, #6]
 8010e66:	f003 0302 	and.w	r3, r3, #2
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d10b      	bne.n	8010e86 <luaV_finishset+0x4e>
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	6998      	ldr	r0, [r3, #24]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	2101      	movs	r1, #1
 8010e7e:	f7fe ff77 	bl	800fd70 <luaT_gettm>
 8010e82:	4603      	mov	r3, r0
 8010e84:	e002      	b.n	8010e8c <luaV_finishset+0x54>
 8010e86:	2300      	movs	r3, #0
 8010e88:	e000      	b.n	8010e8c <luaV_finishset+0x54>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	623b      	str	r3, [r7, #32]
      if (tm == NULL) {  /* no metamethod? */
 8010e8e:	6a3b      	ldr	r3, [r7, #32]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d13f      	bne.n	8010f14 <luaV_finishset+0xdc>
        luaH_finishset(L, h, key, slot, val);  /* set new value */
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	69f9      	ldr	r1, [r7, #28]
 8010e9e:	68f8      	ldr	r0, [r7, #12]
 8010ea0:	f7fe fd9a 	bl	800f9d8 <luaH_finishset>
        invalidateTMcache(h);
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	799b      	ldrb	r3, [r3, #6]
 8010ea8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010eac:	b2da      	uxtb	r2, r3
 8010eae:	69fb      	ldr	r3, [r7, #28]
 8010eb0:	719a      	strb	r2, [r3, #6]
        luaC_barrierback(L, obj2gco(h), val);
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	791b      	ldrb	r3, [r3, #4]
 8010eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f000 8088 	beq.w	8010fd0 <luaV_finishset+0x198>
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	795b      	ldrb	r3, [r3, #5]
 8010ec4:	f003 0320 	and.w	r3, r3, #32
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f000 8081 	beq.w	8010fd0 <luaV_finishset+0x198>
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	795b      	ldrb	r3, [r3, #5]
 8010ed4:	f003 0318 	and.w	r3, r3, #24
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d079      	beq.n	8010fd0 <luaV_finishset+0x198>
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f7f9 fd29 	bl	800a938 <luaC_barrierback_>
        return;
 8010ee6:	e073      	b.n	8010fd0 <luaV_finishset+0x198>
      }
      /* else will try the metamethod */
    }
    else {  /* not a table; check metamethod */
      tm = luaT_gettmbyobj(L, t, TM_NEWINDEX);
 8010ee8:	2201      	movs	r2, #1
 8010eea:	68b9      	ldr	r1, [r7, #8]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f7fe ff63 	bl	800fdb8 <luaT_gettmbyobj>
 8010ef2:	6238      	str	r0, [r7, #32]
      if (l_unlikely(notm(tm)))
 8010ef4:	6a3b      	ldr	r3, [r7, #32]
 8010ef6:	791b      	ldrb	r3, [r3, #4]
 8010ef8:	f003 030f 	and.w	r3, r3, #15
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	bf0c      	ite	eq
 8010f00:	2301      	moveq	r3, #1
 8010f02:	2300      	movne	r3, #0
 8010f04:	b2db      	uxtb	r3, r3
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d004      	beq.n	8010f14 <luaV_finishset+0xdc>
        luaG_typeerror(L, t, "index");
 8010f0a:	4a34      	ldr	r2, [pc, #208]	; (8010fdc <luaV_finishset+0x1a4>)
 8010f0c:	68b9      	ldr	r1, [r7, #8]
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f7f7 ff3e 	bl	8008d90 <luaG_typeerror>
    }
    /* try the metamethod */
    if (ttisfunction(tm)) {
 8010f14:	6a3b      	ldr	r3, [r7, #32]
 8010f16:	791b      	ldrb	r3, [r3, #4]
 8010f18:	f003 030f 	and.w	r3, r3, #15
 8010f1c:	2b06      	cmp	r3, #6
 8010f1e:	d108      	bne.n	8010f32 <luaV_finishset+0xfa>
      luaT_callTM(L, tm, t, key, val);
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	9300      	str	r3, [sp, #0]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	68ba      	ldr	r2, [r7, #8]
 8010f28:	6a39      	ldr	r1, [r7, #32]
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f7fe ffc0 	bl	800feb0 <luaT_callTM>
      return;
 8010f30:	e051      	b.n	8010fd6 <luaV_finishset+0x19e>
    }
    t = tm;  /* else repeat assignment over 'tm' */
 8010f32:	6a3b      	ldr	r3, [r7, #32]
 8010f34:	60bb      	str	r3, [r7, #8]
    if (luaV_fastget(L, t, key, slot, luaH_get)) {
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	791b      	ldrb	r3, [r3, #4]
 8010f3a:	2b45      	cmp	r3, #69	; 0x45
 8010f3c:	d003      	beq.n	8010f46 <luaV_finishset+0x10e>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	633b      	str	r3, [r7, #48]	; 0x30
 8010f42:	2300      	movs	r3, #0
 8010f44:	e00f      	b.n	8010f66 <luaV_finishset+0x12e>
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	6879      	ldr	r1, [r7, #4]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fe fcd9 	bl	800f904 <luaH_get>
 8010f52:	6338      	str	r0, [r7, #48]	; 0x30
 8010f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f56:	791b      	ldrb	r3, [r3, #4]
 8010f58:	f003 030f 	and.w	r3, r3, #15
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	bf14      	ite	ne
 8010f60:	2301      	movne	r3, #1
 8010f62:	2300      	moveq	r3, #0
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d026      	beq.n	8010fb8 <luaV_finishset+0x180>
      luaV_finishfastset(L, t, slot, val);
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6c:	61bb      	str	r3, [r7, #24]
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	617b      	str	r3, [r7, #20]
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	697a      	ldr	r2, [r7, #20]
 8010f76:	6812      	ldr	r2, [r2, #0]
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	791a      	ldrb	r2, [r3, #4]
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	711a      	strb	r2, [r3, #4]
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	791b      	ldrb	r3, [r3, #4]
 8010f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d022      	beq.n	8010fd4 <luaV_finishset+0x19c>
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	795b      	ldrb	r3, [r3, #5]
 8010f94:	f003 0320 	and.w	r3, r3, #32
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d01b      	beq.n	8010fd4 <luaV_finishset+0x19c>
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	795b      	ldrb	r3, [r3, #5]
 8010fa2:	f003 0318 	and.w	r3, r3, #24
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d014      	beq.n	8010fd4 <luaV_finishset+0x19c>
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4619      	mov	r1, r3
 8010fb0:	68f8      	ldr	r0, [r7, #12]
 8010fb2:	f7f9 fcc1 	bl	800a938 <luaC_barrierback_>
      return;  /* done */
 8010fb6:	e00d      	b.n	8010fd4 <luaV_finishset+0x19c>
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
 8010fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fba:	3301      	adds	r3, #1
 8010fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8010fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010fc4:	f6ff af42 	blt.w	8010e4c <luaV_finishset+0x14>
    }
    /* else 'return luaV_finishset(L, t, key, val, slot)' (loop) */
  }
  luaG_runerror(L, "'__newindex' chain too long; possible loop");
 8010fc8:	4905      	ldr	r1, [pc, #20]	; (8010fe0 <luaV_finishset+0x1a8>)
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f7f8 f80f 	bl	8008fee <luaG_runerror>
        return;
 8010fd0:	bf00      	nop
 8010fd2:	e000      	b.n	8010fd6 <luaV_finishset+0x19e>
      return;  /* done */
 8010fd4:	bf00      	nop
}
 8010fd6:	3728      	adds	r7, #40	; 0x28
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	0802280c 	.word	0x0802280c
 8010fe0:	0802283c 	.word	0x0802283c

08010fe4 <l_strcmp>:
** -greater than zero if 'ls' is less-equal-greater than 'rs'.
** The code is a little tricky because it allows '\0' in the strings
** and it uses 'strcoll' (to respect locales) for each segments
** of the strings.
*/
static int l_strcmp (const TString *ls, const TString *rs) {
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b088      	sub	sp, #32
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  const char *l = getstr(ls);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	3310      	adds	r3, #16
 8010ff2:	61fb      	str	r3, [r7, #28]
  size_t ll = tsslen(ls);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	791b      	ldrb	r3, [r3, #4]
 8010ff8:	2b04      	cmp	r3, #4
 8010ffa:	d102      	bne.n	8011002 <l_strcmp+0x1e>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	79db      	ldrb	r3, [r3, #7]
 8011000:	e001      	b.n	8011006 <l_strcmp+0x22>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	68db      	ldr	r3, [r3, #12]
 8011006:	61bb      	str	r3, [r7, #24]
  const char *r = getstr(rs);
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	3310      	adds	r3, #16
 801100c:	617b      	str	r3, [r7, #20]
  size_t lr = tsslen(rs);
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	791b      	ldrb	r3, [r3, #4]
 8011012:	2b04      	cmp	r3, #4
 8011014:	d102      	bne.n	801101c <l_strcmp+0x38>
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	79db      	ldrb	r3, [r3, #7]
 801101a:	e001      	b.n	8011020 <l_strcmp+0x3c>
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	613b      	str	r3, [r7, #16]
  for (;;) {  /* for each segment */
    int temp = strcoll(l, r);
 8011022:	6979      	ldr	r1, [r7, #20]
 8011024:	69f8      	ldr	r0, [r7, #28]
 8011026:	f00e fba1 	bl	801f76c <strcoll>
 801102a:	60f8      	str	r0, [r7, #12]
    if (temp != 0)  /* not equal? */
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d001      	beq.n	8011036 <l_strcmp+0x52>
      return temp;  /* done */
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	e02a      	b.n	801108c <l_strcmp+0xa8>
    else {  /* strings are equal up to a '\0' */
      size_t len = strlen(l);  /* index of first '\0' in both strings */
 8011036:	69f8      	ldr	r0, [r7, #28]
 8011038:	f7ef f932 	bl	80002a0 <strlen>
 801103c:	60b8      	str	r0, [r7, #8]
      if (len == lr)  /* 'rs' is finished? */
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	429a      	cmp	r2, r3
 8011044:	d107      	bne.n	8011056 <l_strcmp+0x72>
        return (len == ll) ? 0 : 1;  /* check 'ls' */
 8011046:	68ba      	ldr	r2, [r7, #8]
 8011048:	69bb      	ldr	r3, [r7, #24]
 801104a:	429a      	cmp	r2, r3
 801104c:	bf14      	ite	ne
 801104e:	2301      	movne	r3, #1
 8011050:	2300      	moveq	r3, #0
 8011052:	b2db      	uxtb	r3, r3
 8011054:	e01a      	b.n	801108c <l_strcmp+0xa8>
      else if (len == ll)  /* 'ls' is finished? */
 8011056:	68ba      	ldr	r2, [r7, #8]
 8011058:	69bb      	ldr	r3, [r7, #24]
 801105a:	429a      	cmp	r2, r3
 801105c:	d102      	bne.n	8011064 <l_strcmp+0x80>
        return -1;  /* 'ls' is less than 'rs' ('rs' is not finished) */
 801105e:	f04f 33ff 	mov.w	r3, #4294967295
 8011062:	e013      	b.n	801108c <l_strcmp+0xa8>
      /* both strings longer than 'len'; go on comparing after the '\0' */
      len++;
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	3301      	adds	r3, #1
 8011068:	60bb      	str	r3, [r7, #8]
      l += len; ll -= len; r += len; lr -= len;
 801106a:	69fa      	ldr	r2, [r7, #28]
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	4413      	add	r3, r2
 8011070:	61fb      	str	r3, [r7, #28]
 8011072:	69ba      	ldr	r2, [r7, #24]
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	61bb      	str	r3, [r7, #24]
 801107a:	697a      	ldr	r2, [r7, #20]
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	4413      	add	r3, r2
 8011080:	617b      	str	r3, [r7, #20]
 8011082:	693a      	ldr	r2, [r7, #16]
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	613b      	str	r3, [r7, #16]
  for (;;) {  /* for each segment */
 801108a:	e7ca      	b.n	8011022 <l_strcmp+0x3e>
    }
  }
}
 801108c:	4618      	mov	r0, r3
 801108e:	3720      	adds	r7, #32
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <LTintfloat>:
** (The test with 'l_intfitsf' is only for performance; the else
** case is correct for all values, but it is slow due to the conversion
** from float to int.)
** When 'f' is NaN, comparisons must result in false.
*/
l_sinline int LTintfloat (lua_Integer i, lua_Number f) {
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	ed87 0a00 	vstr	s0, [r7]
  if (l_intfitsf(i))
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80110a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80110aa:	d80f      	bhi.n	80110cc <LTintfloat+0x38>
    return luai_numlt(cast_num(i), f);  /* compare them as floats */
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	ee07 3a90 	vmov	s15, r3
 80110b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110b6:	ed97 7a00 	vldr	s14, [r7]
 80110ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	bfcc      	ite	gt
 80110c4:	2301      	movgt	r3, #1
 80110c6:	2300      	movle	r3, #0
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	e01c      	b.n	8011106 <LTintfloat+0x72>
  else {  /* i < f <=> i < ceil(f) */
    lua_Integer fi;
    if (luaV_flttointeger(f, &fi, F2Iceil))  /* fi = ceil(f) */
 80110cc:	f107 030c 	add.w	r3, r7, #12
 80110d0:	2102      	movs	r1, #2
 80110d2:	4618      	mov	r0, r3
 80110d4:	ed97 0a00 	vldr	s0, [r7]
 80110d8:	f7ff fbc6 	bl	8010868 <luaV_flttointeger>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d007      	beq.n	80110f2 <LTintfloat+0x5e>
      return i < fi;   /* compare them as integers */
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	bfb4      	ite	lt
 80110ea:	2301      	movlt	r3, #1
 80110ec:	2300      	movge	r3, #0
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	e009      	b.n	8011106 <LTintfloat+0x72>
    else  /* 'f' is either greater or less than all integers */
      return f > 0;  /* greater? */
 80110f2:	edd7 7a00 	vldr	s15, [r7]
 80110f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80110fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fe:	bfcc      	ite	gt
 8011100:	2301      	movgt	r3, #1
 8011102:	2300      	movle	r3, #0
 8011104:	b2db      	uxtb	r3, r3
  }
}
 8011106:	4618      	mov	r0, r3
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <LEintfloat>:

/*
** Check whether integer 'i' is less than or equal to float 'f'.
** See comments on previous function.
*/
l_sinline int LEintfloat (lua_Integer i, lua_Number f) {
 801110e:	b580      	push	{r7, lr}
 8011110:	b084      	sub	sp, #16
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	ed87 0a00 	vstr	s0, [r7]
  if (l_intfitsf(i))
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8011120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011124:	d80f      	bhi.n	8011146 <LEintfloat+0x38>
    return luai_numle(cast_num(i), f);  /* compare them as floats */
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	ee07 3a90 	vmov	s15, r3
 801112c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011130:	ed97 7a00 	vldr	s14, [r7]
 8011134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113c:	bfac      	ite	ge
 801113e:	2301      	movge	r3, #1
 8011140:	2300      	movlt	r3, #0
 8011142:	b2db      	uxtb	r3, r3
 8011144:	e01c      	b.n	8011180 <LEintfloat+0x72>
  else {  /* i <= f <=> i <= floor(f) */
    lua_Integer fi;
    if (luaV_flttointeger(f, &fi, F2Ifloor))  /* fi = floor(f) */
 8011146:	f107 030c 	add.w	r3, r7, #12
 801114a:	2101      	movs	r1, #1
 801114c:	4618      	mov	r0, r3
 801114e:	ed97 0a00 	vldr	s0, [r7]
 8011152:	f7ff fb89 	bl	8010868 <luaV_flttointeger>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d007      	beq.n	801116c <LEintfloat+0x5e>
      return i <= fi;   /* compare them as integers */
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	429a      	cmp	r2, r3
 8011162:	bfd4      	ite	le
 8011164:	2301      	movle	r3, #1
 8011166:	2300      	movgt	r3, #0
 8011168:	b2db      	uxtb	r3, r3
 801116a:	e009      	b.n	8011180 <LEintfloat+0x72>
    else  /* 'f' is either greater or less than all integers */
      return f > 0;  /* greater? */
 801116c:	edd7 7a00 	vldr	s15, [r7]
 8011170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011178:	bfcc      	ite	gt
 801117a:	2301      	movgt	r3, #1
 801117c:	2300      	movle	r3, #0
 801117e:	b2db      	uxtb	r3, r3
  }
}
 8011180:	4618      	mov	r0, r3
 8011182:	3710      	adds	r7, #16
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <LTfloatint>:

/*
** Check whether float 'f' is less than integer 'i'.
** See comments on previous function.
*/
l_sinline int LTfloatint (lua_Number f, lua_Integer i) {
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	ed87 0a01 	vstr	s0, [r7, #4]
 8011192:	6038      	str	r0, [r7, #0]
  if (l_intfitsf(i))
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 801119a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801119e:	d80f      	bhi.n	80111c0 <LTfloatint+0x38>
    return luai_numlt(f, cast_num(i));  /* compare them as floats */
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	ee07 3a90 	vmov	s15, r3
 80111a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80111ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b6:	bf4c      	ite	mi
 80111b8:	2301      	movmi	r3, #1
 80111ba:	2300      	movpl	r3, #0
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	e01c      	b.n	80111fa <LTfloatint+0x72>
  else {  /* f < i <=> floor(f) < i */
    lua_Integer fi;
    if (luaV_flttointeger(f, &fi, F2Ifloor))  /* fi = floor(f) */
 80111c0:	f107 030c 	add.w	r3, r7, #12
 80111c4:	2101      	movs	r1, #1
 80111c6:	4618      	mov	r0, r3
 80111c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80111cc:	f7ff fb4c 	bl	8010868 <luaV_flttointeger>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d007      	beq.n	80111e6 <LTfloatint+0x5e>
      return fi < i;   /* compare them as integers */
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	683a      	ldr	r2, [r7, #0]
 80111da:	429a      	cmp	r2, r3
 80111dc:	bfcc      	ite	gt
 80111de:	2301      	movgt	r3, #1
 80111e0:	2300      	movle	r3, #0
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	e009      	b.n	80111fa <LTfloatint+0x72>
    else  /* 'f' is either greater or less than all integers */
      return f < 0;  /* less? */
 80111e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80111ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f2:	bf4c      	ite	mi
 80111f4:	2301      	movmi	r3, #1
 80111f6:	2300      	movpl	r3, #0
 80111f8:	b2db      	uxtb	r3, r3
  }
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <LEfloatint>:

/*
** Check whether float 'f' is less than or equal to integer 'i'.
** See comments on previous function.
*/
l_sinline int LEfloatint (lua_Number f, lua_Integer i) {
 8011202:	b580      	push	{r7, lr}
 8011204:	b084      	sub	sp, #16
 8011206:	af00      	add	r7, sp, #0
 8011208:	ed87 0a01 	vstr	s0, [r7, #4]
 801120c:	6038      	str	r0, [r7, #0]
  if (l_intfitsf(i))
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8011214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011218:	d80f      	bhi.n	801123a <LEfloatint+0x38>
    return luai_numle(f, cast_num(i));  /* compare them as floats */
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	ee07 3a90 	vmov	s15, r3
 8011220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011224:	ed97 7a01 	vldr	s14, [r7, #4]
 8011228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011230:	bf94      	ite	ls
 8011232:	2301      	movls	r3, #1
 8011234:	2300      	movhi	r3, #0
 8011236:	b2db      	uxtb	r3, r3
 8011238:	e01c      	b.n	8011274 <LEfloatint+0x72>
  else {  /* f <= i <=> ceil(f) <= i */
    lua_Integer fi;
    if (luaV_flttointeger(f, &fi, F2Iceil))  /* fi = ceil(f) */
 801123a:	f107 030c 	add.w	r3, r7, #12
 801123e:	2102      	movs	r1, #2
 8011240:	4618      	mov	r0, r3
 8011242:	ed97 0a01 	vldr	s0, [r7, #4]
 8011246:	f7ff fb0f 	bl	8010868 <luaV_flttointeger>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	d007      	beq.n	8011260 <LEfloatint+0x5e>
      return fi <= i;   /* compare them as integers */
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	683a      	ldr	r2, [r7, #0]
 8011254:	429a      	cmp	r2, r3
 8011256:	bfac      	ite	ge
 8011258:	2301      	movge	r3, #1
 801125a:	2300      	movlt	r3, #0
 801125c:	b2db      	uxtb	r3, r3
 801125e:	e009      	b.n	8011274 <LEfloatint+0x72>
    else  /* 'f' is either greater or less than all integers */
      return f < 0;  /* less? */
 8011260:	edd7 7a01 	vldr	s15, [r7, #4]
 8011264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126c:	bf4c      	ite	mi
 801126e:	2301      	movmi	r3, #1
 8011270:	2300      	movpl	r3, #0
 8011272:	b2db      	uxtb	r3, r3
  }
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <LTnum>:


/*
** Return 'l < r', for numbers.
*/
l_sinline int LTnum (const TValue *l, const TValue *r) {
 801127c:	b580      	push	{r7, lr}
 801127e:	b084      	sub	sp, #16
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  lua_assert(ttisnumber(l) && ttisnumber(r));
  if (ttisinteger(l)) {
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	791b      	ldrb	r3, [r3, #4]
 801128a:	2b03      	cmp	r3, #3
 801128c:	d119      	bne.n	80112c2 <LTnum+0x46>
    lua_Integer li = ivalue(l);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	60bb      	str	r3, [r7, #8]
    if (ttisinteger(r))
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	791b      	ldrb	r3, [r3, #4]
 8011298:	2b03      	cmp	r3, #3
 801129a:	d108      	bne.n	80112ae <LTnum+0x32>
      return li < ivalue(r);  /* both are integers */
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	68ba      	ldr	r2, [r7, #8]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	bfb4      	ite	lt
 80112a6:	2301      	movlt	r3, #1
 80112a8:	2300      	movge	r3, #0
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	e026      	b.n	80112fc <LTnum+0x80>
    else  /* 'l' is int and 'r' is float */
      return LTintfloat(li, fltvalue(r));  /* l < r ? */
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	edd3 7a00 	vldr	s15, [r3]
 80112b4:	eeb0 0a67 	vmov.f32	s0, s15
 80112b8:	68b8      	ldr	r0, [r7, #8]
 80112ba:	f7ff feeb 	bl	8011094 <LTintfloat>
 80112be:	4603      	mov	r3, r0
 80112c0:	e01c      	b.n	80112fc <LTnum+0x80>
  }
  else {
    lua_Number lf = fltvalue(l);  /* 'l' must be float */
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	60fb      	str	r3, [r7, #12]
    if (ttisfloat(r))
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	791b      	ldrb	r3, [r3, #4]
 80112cc:	2b13      	cmp	r3, #19
 80112ce:	d10d      	bne.n	80112ec <LTnum+0x70>
      return luai_numlt(lf, fltvalue(r));  /* both are float */
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	edd3 7a00 	vldr	s15, [r3]
 80112d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80112da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e2:	bf4c      	ite	mi
 80112e4:	2301      	movmi	r3, #1
 80112e6:	2300      	movpl	r3, #0
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	e007      	b.n	80112fc <LTnum+0x80>
    else  /* 'l' is float and 'r' is int */
      return LTfloatint(lf, ivalue(r));
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4618      	mov	r0, r3
 80112f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80112f6:	f7ff ff47 	bl	8011188 <LTfloatint>
 80112fa:	4603      	mov	r3, r0
  }
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}

08011304 <LEnum>:


/*
** Return 'l <= r', for numbers.
*/
l_sinline int LEnum (const TValue *l, const TValue *r) {
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]
  lua_assert(ttisnumber(l) && ttisnumber(r));
  if (ttisinteger(l)) {
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	791b      	ldrb	r3, [r3, #4]
 8011312:	2b03      	cmp	r3, #3
 8011314:	d119      	bne.n	801134a <LEnum+0x46>
    lua_Integer li = ivalue(l);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	60bb      	str	r3, [r7, #8]
    if (ttisinteger(r))
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	791b      	ldrb	r3, [r3, #4]
 8011320:	2b03      	cmp	r3, #3
 8011322:	d108      	bne.n	8011336 <LEnum+0x32>
      return li <= ivalue(r);  /* both are integers */
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	68ba      	ldr	r2, [r7, #8]
 801132a:	429a      	cmp	r2, r3
 801132c:	bfd4      	ite	le
 801132e:	2301      	movle	r3, #1
 8011330:	2300      	movgt	r3, #0
 8011332:	b2db      	uxtb	r3, r3
 8011334:	e026      	b.n	8011384 <LEnum+0x80>
    else  /* 'l' is int and 'r' is float */
      return LEintfloat(li, fltvalue(r));  /* l <= r ? */
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	edd3 7a00 	vldr	s15, [r3]
 801133c:	eeb0 0a67 	vmov.f32	s0, s15
 8011340:	68b8      	ldr	r0, [r7, #8]
 8011342:	f7ff fee4 	bl	801110e <LEintfloat>
 8011346:	4603      	mov	r3, r0
 8011348:	e01c      	b.n	8011384 <LEnum+0x80>
  }
  else {
    lua_Number lf = fltvalue(l);  /* 'l' must be float */
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	60fb      	str	r3, [r7, #12]
    if (ttisfloat(r))
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	791b      	ldrb	r3, [r3, #4]
 8011354:	2b13      	cmp	r3, #19
 8011356:	d10d      	bne.n	8011374 <LEnum+0x70>
      return luai_numle(lf, fltvalue(r));  /* both are float */
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	edd3 7a00 	vldr	s15, [r3]
 801135e:	ed97 7a03 	vldr	s14, [r7, #12]
 8011362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136a:	bf94      	ite	ls
 801136c:	2301      	movls	r3, #1
 801136e:	2300      	movhi	r3, #0
 8011370:	b2db      	uxtb	r3, r3
 8011372:	e007      	b.n	8011384 <LEnum+0x80>
    else  /* 'l' is float and 'r' is int */
      return LEfloatint(lf, ivalue(r));
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	4618      	mov	r0, r3
 801137a:	ed97 0a03 	vldr	s0, [r7, #12]
 801137e:	f7ff ff40 	bl	8011202 <LEfloatint>
 8011382:	4603      	mov	r3, r0
  }
}
 8011384:	4618      	mov	r0, r3
 8011386:	3710      	adds	r7, #16
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <lessthanothers>:


/*
** return 'l < r' for non-numbers.
*/
static int lessthanothers (lua_State *L, const TValue *l, const TValue *r) {
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	60f8      	str	r0, [r7, #12]
 8011394:	60b9      	str	r1, [r7, #8]
 8011396:	607a      	str	r2, [r7, #4]
  lua_assert(!ttisnumber(l) || !ttisnumber(r));
  if (ttisstring(l) && ttisstring(r))  /* both are strings? */
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	791b      	ldrb	r3, [r3, #4]
 801139c:	f003 030f 	and.w	r3, r3, #15
 80113a0:	2b04      	cmp	r3, #4
 80113a2:	d112      	bne.n	80113ca <lessthanothers+0x3e>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	791b      	ldrb	r3, [r3, #4]
 80113a8:	f003 030f 	and.w	r3, r3, #15
 80113ac:	2b04      	cmp	r3, #4
 80113ae:	d10c      	bne.n	80113ca <lessthanothers+0x3e>
    return l_strcmp(tsvalue(l), tsvalue(r)) < 0;
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	461a      	mov	r2, r3
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4619      	mov	r1, r3
 80113bc:	4610      	mov	r0, r2
 80113be:	f7ff fe11 	bl	8010fe4 <l_strcmp>
 80113c2:	4603      	mov	r3, r0
 80113c4:	0fdb      	lsrs	r3, r3, #31
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	e006      	b.n	80113d8 <lessthanothers+0x4c>
  else
    return luaT_callorderTM(L, l, r, TM_LT);
 80113ca:	2314      	movs	r3, #20
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	68b9      	ldr	r1, [r7, #8]
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	f7fe ff0e 	bl	80101f2 <luaT_callorderTM>
 80113d6:	4603      	mov	r3, r0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3710      	adds	r7, #16
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <lessequalothers>:


/*
** return 'l <= r' for non-numbers.
*/
static int lessequalothers (lua_State *L, const TValue *l, const TValue *r) {
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]
  lua_assert(!ttisnumber(l) || !ttisnumber(r));
  if (ttisstring(l) && ttisstring(r))  /* both are strings? */
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	791b      	ldrb	r3, [r3, #4]
 80113f0:	f003 030f 	and.w	r3, r3, #15
 80113f4:	2b04      	cmp	r3, #4
 80113f6:	d115      	bne.n	8011424 <lessequalothers+0x44>
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	791b      	ldrb	r3, [r3, #4]
 80113fc:	f003 030f 	and.w	r3, r3, #15
 8011400:	2b04      	cmp	r3, #4
 8011402:	d10f      	bne.n	8011424 <lessequalothers+0x44>
    return l_strcmp(tsvalue(l), tsvalue(r)) <= 0;
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	461a      	mov	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4619      	mov	r1, r3
 8011410:	4610      	mov	r0, r2
 8011412:	f7ff fde7 	bl	8010fe4 <l_strcmp>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	bfd4      	ite	le
 801141c:	2301      	movle	r3, #1
 801141e:	2300      	movgt	r3, #0
 8011420:	b2db      	uxtb	r3, r3
 8011422:	e006      	b.n	8011432 <lessequalothers+0x52>
  else
    return luaT_callorderTM(L, l, r, TM_LE);
 8011424:	2315      	movs	r3, #21
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	68b9      	ldr	r1, [r7, #8]
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f7fe fee1 	bl	80101f2 <luaT_callorderTM>
 8011430:	4603      	mov	r3, r0
}
 8011432:	4618      	mov	r0, r3
 8011434:	3710      	adds	r7, #16
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
	...

0801143c <luaV_equalobj>:

/*
** Main operation for equality of Lua values; return 't1 == t2'.
** L == NULL means raw equality (no metamethods)
*/
int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {
 801143c:	b580      	push	{r7, lr}
 801143e:	b08a      	sub	sp, #40	; 0x28
 8011440:	af02      	add	r7, sp, #8
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	607a      	str	r2, [r7, #4]
  const TValue *tm;
  if (ttypetag(t1) != ttypetag(t2)) {  /* not the same variant? */
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	791a      	ldrb	r2, [r3, #4]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	791b      	ldrb	r3, [r3, #4]
 8011450:	4053      	eors	r3, r2
 8011452:	b2db      	uxtb	r3, r3
 8011454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011458:	2b00      	cmp	r3, #0
 801145a:	d02d      	beq.n	80114b8 <luaV_equalobj+0x7c>
    if (ttype(t1) != ttype(t2) || ttype(t1) != LUA_TNUMBER)
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	791a      	ldrb	r2, [r3, #4]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	791b      	ldrb	r3, [r3, #4]
 8011464:	4053      	eors	r3, r2
 8011466:	b2db      	uxtb	r3, r3
 8011468:	f003 030f 	and.w	r3, r3, #15
 801146c:	2b00      	cmp	r3, #0
 801146e:	d105      	bne.n	801147c <luaV_equalobj+0x40>
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	791b      	ldrb	r3, [r3, #4]
 8011474:	f003 030f 	and.w	r3, r3, #15
 8011478:	2b03      	cmp	r3, #3
 801147a:	d001      	beq.n	8011480 <luaV_equalobj+0x44>
      return 0;  /* only numbers can be equal with different variants */
 801147c:	2300      	movs	r3, #0
 801147e:	e15b      	b.n	8011738 <luaV_equalobj+0x2fc>
    else {  /* two numbers with different variants */
      /* One of them is an integer. If the other does not have an
         integer value, they cannot be equal; otherwise, compare their
         integer values. */
      lua_Integer i1, i2;
      return (luaV_tointegerns(t1, &i1, F2Ieq) &&
 8011480:	f107 0318 	add.w	r3, r7, #24
 8011484:	2200      	movs	r2, #0
 8011486:	4619      	mov	r1, r3
 8011488:	68b8      	ldr	r0, [r7, #8]
 801148a:	f7ff fa39 	bl	8010900 <luaV_tointegerns>
 801148e:	4603      	mov	r3, r0
              luaV_tointegerns(t2, &i2, F2Ieq) &&
 8011490:	2b00      	cmp	r3, #0
 8011492:	d00f      	beq.n	80114b4 <luaV_equalobj+0x78>
 8011494:	f107 0314 	add.w	r3, r7, #20
 8011498:	2200      	movs	r2, #0
 801149a:	4619      	mov	r1, r3
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f7ff fa2f 	bl	8010900 <luaV_tointegerns>
 80114a2:	4603      	mov	r3, r0
      return (luaV_tointegerns(t1, &i1, F2Ieq) &&
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d005      	beq.n	80114b4 <luaV_equalobj+0x78>
              i1 == i2);
 80114a8:	69ba      	ldr	r2, [r7, #24]
 80114aa:	697b      	ldr	r3, [r7, #20]
              luaV_tointegerns(t2, &i2, F2Ieq) &&
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d101      	bne.n	80114b4 <luaV_equalobj+0x78>
 80114b0:	2301      	movs	r3, #1
 80114b2:	e141      	b.n	8011738 <luaV_equalobj+0x2fc>
 80114b4:	2300      	movs	r3, #0
 80114b6:	e13f      	b.n	8011738 <luaV_equalobj+0x2fc>
    }
  }
  /* values have same type and same variant */
  switch (ttypetag(t1)) {
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	791b      	ldrb	r3, [r3, #4]
 80114bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114c0:	2b16      	cmp	r3, #22
 80114c2:	f200 810f 	bhi.w	80116e4 <luaV_equalobj+0x2a8>
 80114c6:	a201      	add	r2, pc, #4	; (adr r2, 80114cc <luaV_equalobj+0x90>)
 80114c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114cc:	08011529 	.word	0x08011529
 80114d0:	08011529 	.word	0x08011529
 80114d4:	0801155f 	.word	0x0801155f
 80114d8:	0801152d 	.word	0x0801152d
 80114dc:	08011587 	.word	0x08011587
 80114e0:	0801164b 	.word	0x0801164b
 80114e4:	080116e5 	.word	0x080116e5
 80114e8:	080115b1 	.word	0x080115b1
 80114ec:	080116e5 	.word	0x080116e5
 80114f0:	080116e5 	.word	0x080116e5
 80114f4:	080116e5 	.word	0x080116e5
 80114f8:	080116e5 	.word	0x080116e5
 80114fc:	080116e5 	.word	0x080116e5
 8011500:	080116e5 	.word	0x080116e5
 8011504:	080116e5 	.word	0x080116e5
 8011508:	080116e5 	.word	0x080116e5
 801150c:	080116e5 	.word	0x080116e5
 8011510:	08011529 	.word	0x08011529
 8011514:	080116e5 	.word	0x080116e5
 8011518:	08011541 	.word	0x08011541
 801151c:	0801159b 	.word	0x0801159b
 8011520:	080116e5 	.word	0x080116e5
 8011524:	08011573 	.word	0x08011573
    case LUA_VNIL: case LUA_VFALSE: case LUA_VTRUE: return 1;
 8011528:	2301      	movs	r3, #1
 801152a:	e105      	b.n	8011738 <luaV_equalobj+0x2fc>
    case LUA_VNUMINT: return (ivalue(t1) == ivalue(t2));
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	429a      	cmp	r2, r3
 8011536:	bf0c      	ite	eq
 8011538:	2301      	moveq	r3, #1
 801153a:	2300      	movne	r3, #0
 801153c:	b2db      	uxtb	r3, r3
 801153e:	e0fb      	b.n	8011738 <luaV_equalobj+0x2fc>
    case LUA_VNUMFLT: return luai_numeq(fltvalue(t1), fltvalue(t2));
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	ed93 7a00 	vldr	s14, [r3]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	edd3 7a00 	vldr	s15, [r3]
 801154c:	eeb4 7a67 	vcmp.f32	s14, s15
 8011550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011554:	bf0c      	ite	eq
 8011556:	2301      	moveq	r3, #1
 8011558:	2300      	movne	r3, #0
 801155a:	b2db      	uxtb	r3, r3
 801155c:	e0ec      	b.n	8011738 <luaV_equalobj+0x2fc>
    case LUA_VLIGHTUSERDATA: return pvalue(t1) == pvalue(t2);
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	bf0c      	ite	eq
 801156a:	2301      	moveq	r3, #1
 801156c:	2300      	movne	r3, #0
 801156e:	b2db      	uxtb	r3, r3
 8011570:	e0e2      	b.n	8011738 <luaV_equalobj+0x2fc>
    case LUA_VLCF: return fvalue(t1) == fvalue(t2);
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	429a      	cmp	r2, r3
 801157c:	bf0c      	ite	eq
 801157e:	2301      	moveq	r3, #1
 8011580:	2300      	movne	r3, #0
 8011582:	b2db      	uxtb	r3, r3
 8011584:	e0d8      	b.n	8011738 <luaV_equalobj+0x2fc>
    case LUA_VSHRSTR: return eqshrstr(tsvalue(t1), tsvalue(t2));
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	429a      	cmp	r2, r3
 8011590:	bf0c      	ite	eq
 8011592:	2301      	moveq	r3, #1
 8011594:	2300      	movne	r3, #0
 8011596:	b2db      	uxtb	r3, r3
 8011598:	e0ce      	b.n	8011738 <luaV_equalobj+0x2fc>
    case LUA_VLNGSTR: return luaS_eqlngstr(tsvalue(t1), tsvalue(t2));
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	461a      	mov	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4619      	mov	r1, r3
 80115a6:	4610      	mov	r0, r2
 80115a8:	f7fc fea6 	bl	800e2f8 <luaS_eqlngstr>
 80115ac:	4603      	mov	r3, r0
 80115ae:	e0c3      	b.n	8011738 <luaV_equalobj+0x2fc>
    case LUA_VUSERDATA: {
      if (uvalue(t1) == uvalue(t2)) return 1;
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d101      	bne.n	80115c0 <luaV_equalobj+0x184>
 80115bc:	2301      	movs	r3, #1
 80115be:	e0bb      	b.n	8011738 <luaV_equalobj+0x2fc>
      else if (L == NULL) return 0;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d101      	bne.n	80115ca <luaV_equalobj+0x18e>
 80115c6:	2300      	movs	r3, #0
 80115c8:	e0b6      	b.n	8011738 <luaV_equalobj+0x2fc>
      tm = fasttm(L, uvalue(t1)->metatable, TM_EQ);
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d016      	beq.n	8011602 <luaV_equalobj+0x1c6>
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	799b      	ldrb	r3, [r3, #6]
 80115dc:	f003 0320 	and.w	r3, r3, #32
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d10c      	bne.n	80115fe <luaV_equalobj+0x1c2>
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	68d8      	ldr	r0, [r3, #12]
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	691b      	ldr	r3, [r3, #16]
 80115ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80115f2:	461a      	mov	r2, r3
 80115f4:	2105      	movs	r1, #5
 80115f6:	f7fe fbbb 	bl	800fd70 <luaT_gettm>
 80115fa:	4603      	mov	r3, r0
 80115fc:	e002      	b.n	8011604 <luaV_equalobj+0x1c8>
 80115fe:	2300      	movs	r3, #0
 8011600:	e000      	b.n	8011604 <luaV_equalobj+0x1c8>
 8011602:	2300      	movs	r3, #0
 8011604:	61fb      	str	r3, [r7, #28]
      if (tm == NULL)
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d175      	bne.n	80116f8 <luaV_equalobj+0x2bc>
        tm = fasttm(L, uvalue(t2)->metatable, TM_EQ);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d016      	beq.n	8011644 <luaV_equalobj+0x208>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	68db      	ldr	r3, [r3, #12]
 801161c:	799b      	ldrb	r3, [r3, #6]
 801161e:	f003 0320 	and.w	r3, r3, #32
 8011622:	2b00      	cmp	r3, #0
 8011624:	d10c      	bne.n	8011640 <luaV_equalobj+0x204>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	68d8      	ldr	r0, [r3, #12]
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011634:	461a      	mov	r2, r3
 8011636:	2105      	movs	r1, #5
 8011638:	f7fe fb9a 	bl	800fd70 <luaT_gettm>
 801163c:	4603      	mov	r3, r0
 801163e:	e002      	b.n	8011646 <luaV_equalobj+0x20a>
 8011640:	2300      	movs	r3, #0
 8011642:	e000      	b.n	8011646 <luaV_equalobj+0x20a>
 8011644:	2300      	movs	r3, #0
 8011646:	61fb      	str	r3, [r7, #28]
      break;  /* will try TM */
 8011648:	e056      	b.n	80116f8 <luaV_equalobj+0x2bc>
    }
    case LUA_VTABLE: {
      if (hvalue(t1) == hvalue(t2)) return 1;
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	429a      	cmp	r2, r3
 8011654:	d101      	bne.n	801165a <luaV_equalobj+0x21e>
 8011656:	2301      	movs	r3, #1
 8011658:	e06e      	b.n	8011738 <luaV_equalobj+0x2fc>
      else if (L == NULL) return 0;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d101      	bne.n	8011664 <luaV_equalobj+0x228>
 8011660:	2300      	movs	r3, #0
 8011662:	e069      	b.n	8011738 <luaV_equalobj+0x2fc>
      tm = fasttm(L, hvalue(t1)->metatable, TM_EQ);
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d016      	beq.n	801169c <luaV_equalobj+0x260>
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	699b      	ldr	r3, [r3, #24]
 8011674:	799b      	ldrb	r3, [r3, #6]
 8011676:	f003 0320 	and.w	r3, r3, #32
 801167a:	2b00      	cmp	r3, #0
 801167c:	d10c      	bne.n	8011698 <luaV_equalobj+0x25c>
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	6998      	ldr	r0, [r3, #24]
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801168c:	461a      	mov	r2, r3
 801168e:	2105      	movs	r1, #5
 8011690:	f7fe fb6e 	bl	800fd70 <luaT_gettm>
 8011694:	4603      	mov	r3, r0
 8011696:	e002      	b.n	801169e <luaV_equalobj+0x262>
 8011698:	2300      	movs	r3, #0
 801169a:	e000      	b.n	801169e <luaV_equalobj+0x262>
 801169c:	2300      	movs	r3, #0
 801169e:	61fb      	str	r3, [r7, #28]
      if (tm == NULL)
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d12a      	bne.n	80116fc <luaV_equalobj+0x2c0>
        tm = fasttm(L, hvalue(t2)->metatable, TM_EQ);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	699b      	ldr	r3, [r3, #24]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d016      	beq.n	80116de <luaV_equalobj+0x2a2>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	699b      	ldr	r3, [r3, #24]
 80116b6:	799b      	ldrb	r3, [r3, #6]
 80116b8:	f003 0320 	and.w	r3, r3, #32
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d10c      	bne.n	80116da <luaV_equalobj+0x29e>
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	6998      	ldr	r0, [r3, #24]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80116ce:	461a      	mov	r2, r3
 80116d0:	2105      	movs	r1, #5
 80116d2:	f7fe fb4d 	bl	800fd70 <luaT_gettm>
 80116d6:	4603      	mov	r3, r0
 80116d8:	e002      	b.n	80116e0 <luaV_equalobj+0x2a4>
 80116da:	2300      	movs	r3, #0
 80116dc:	e000      	b.n	80116e0 <luaV_equalobj+0x2a4>
 80116de:	2300      	movs	r3, #0
 80116e0:	61fb      	str	r3, [r7, #28]
      break;  /* will try TM */
 80116e2:	e00b      	b.n	80116fc <luaV_equalobj+0x2c0>
    }
    default:
      return gcvalue(t1) == gcvalue(t2);
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	bf0c      	ite	eq
 80116f0:	2301      	moveq	r3, #1
 80116f2:	2300      	movne	r3, #0
 80116f4:	b2db      	uxtb	r3, r3
 80116f6:	e01f      	b.n	8011738 <luaV_equalobj+0x2fc>
      break;  /* will try TM */
 80116f8:	bf00      	nop
 80116fa:	e000      	b.n	80116fe <luaV_equalobj+0x2c2>
      break;  /* will try TM */
 80116fc:	bf00      	nop
  }
  if (tm == NULL)  /* no TM? */
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d101      	bne.n	8011708 <luaV_equalobj+0x2cc>
    return 0;  /* objects are different */
 8011704:	2300      	movs	r3, #0
 8011706:	e017      	b.n	8011738 <luaV_equalobj+0x2fc>
  else {
    luaT_callTMres(L, tm, t1, t2, L->top);  /* call TM */
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	68ba      	ldr	r2, [r7, #8]
 8011712:	69f9      	ldr	r1, [r7, #28]
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f7fe fc23 	bl	800ff60 <luaT_callTMres>
    return !l_isfalse(s2v(L->top));
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	791b      	ldrb	r3, [r3, #4]
 8011720:	2b01      	cmp	r3, #1
 8011722:	d008      	beq.n	8011736 <luaV_equalobj+0x2fa>
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	791b      	ldrb	r3, [r3, #4]
 801172a:	f003 030f 	and.w	r3, r3, #15
 801172e:	2b00      	cmp	r3, #0
 8011730:	d001      	beq.n	8011736 <luaV_equalobj+0x2fa>
 8011732:	2301      	movs	r3, #1
 8011734:	e000      	b.n	8011738 <luaV_equalobj+0x2fc>
 8011736:	2300      	movs	r3, #0
  }
}
 8011738:	4618      	mov	r0, r3
 801173a:	3720      	adds	r7, #32
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <copy2buff>:
	(ttisstring(o) || (cvt2str(o) && (luaO_tostring(L, o), 1)))

#define isemptystr(o)	(ttisshrstring(o) && tsvalue(o)->shrlen == 0)

/* copy strings in stack from top - n up to top - 1 to buffer */
static void copy2buff (StkId top, int n, char *buff) {
 8011740:	b580      	push	{r7, lr}
 8011742:	b086      	sub	sp, #24
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	607a      	str	r2, [r7, #4]
  size_t tl = 0;  /* size already copied */
 801174c:	2300      	movs	r3, #0
 801174e:	617b      	str	r3, [r7, #20]
  do {
    size_t l = vslen(s2v(top - n));  /* length of string being copied */
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	00db      	lsls	r3, r3, #3
 8011754:	425b      	negs	r3, r3
 8011756:	68fa      	ldr	r2, [r7, #12]
 8011758:	4413      	add	r3, r2
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	791b      	ldrb	r3, [r3, #4]
 801175e:	2b04      	cmp	r3, #4
 8011760:	d107      	bne.n	8011772 <copy2buff+0x32>
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	425b      	negs	r3, r3
 8011768:	68fa      	ldr	r2, [r7, #12]
 801176a:	4413      	add	r3, r2
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	79db      	ldrb	r3, [r3, #7]
 8011770:	e006      	b.n	8011780 <copy2buff+0x40>
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	00db      	lsls	r3, r3, #3
 8011776:	425b      	negs	r3, r3
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	4413      	add	r3, r2
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	613b      	str	r3, [r7, #16]
    memcpy(buff + tl, svalue(s2v(top - n)), l * sizeof(char));
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	18d0      	adds	r0, r2, r3
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	00db      	lsls	r3, r3, #3
 801178c:	425b      	negs	r3, r3
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	4413      	add	r3, r2
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	3310      	adds	r3, #16
 8011796:	693a      	ldr	r2, [r7, #16]
 8011798:	4619      	mov	r1, r3
 801179a:	f00d fa49 	bl	801ec30 <memcpy>
    tl += l;
 801179e:	697a      	ldr	r2, [r7, #20]
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	4413      	add	r3, r2
 80117a4:	617b      	str	r3, [r7, #20]
  } while (--n > 0);
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	3b01      	subs	r3, #1
 80117aa:	60bb      	str	r3, [r7, #8]
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	dcce      	bgt.n	8011750 <copy2buff+0x10>
}
 80117b2:	bf00      	nop
 80117b4:	bf00      	nop
 80117b6:	3718      	adds	r7, #24
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <luaV_concat>:

/*
** Main operation for concatenation: concat 'total' values in the stack,
** from 'L->top - total' up to 'L->top - 1'.
*/
void luaV_concat (lua_State *L, int total) {
 80117bc:	b580      	push	{r7, lr}
 80117be:	b096      	sub	sp, #88	; 0x58
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6039      	str	r1, [r7, #0]
  if (total == 1)
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	f000 811f 	beq.w	8011a0c <luaV_concat+0x250>
    return;  /* "all" values already concatenated */
  do {
    StkId top = L->top;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	64bb      	str	r3, [r7, #72]	; 0x48
    int n = 2;  /* number of elements handled in this pass (at least 2) */
 80117d4:	2302      	movs	r3, #2
 80117d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (!(ttisstring(s2v(top - 2)) || cvt2str(s2v(top - 2))) ||
 80117d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117da:	3b10      	subs	r3, #16
 80117dc:	791b      	ldrb	r3, [r3, #4]
 80117de:	f003 030f 	and.w	r3, r3, #15
 80117e2:	2b04      	cmp	r3, #4
 80117e4:	d006      	beq.n	80117f4 <luaV_concat+0x38>
 80117e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117e8:	3b10      	subs	r3, #16
 80117ea:	791b      	ldrb	r3, [r3, #4]
 80117ec:	f003 030f 	and.w	r3, r3, #15
 80117f0:	2b03      	cmp	r3, #3
 80117f2:	d114      	bne.n	801181e <luaV_concat+0x62>
        !tostring(L, s2v(top - 1)))
 80117f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117f6:	3b08      	subs	r3, #8
 80117f8:	791b      	ldrb	r3, [r3, #4]
 80117fa:	f003 030f 	and.w	r3, r3, #15
    if (!(ttisstring(s2v(top - 2)) || cvt2str(s2v(top - 2))) ||
 80117fe:	2b04      	cmp	r3, #4
 8011800:	d011      	beq.n	8011826 <luaV_concat+0x6a>
        !tostring(L, s2v(top - 1)))
 8011802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011804:	3b08      	subs	r3, #8
 8011806:	791b      	ldrb	r3, [r3, #4]
 8011808:	f003 030f 	and.w	r3, r3, #15
 801180c:	2b03      	cmp	r3, #3
 801180e:	d106      	bne.n	801181e <luaV_concat+0x62>
 8011810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011812:	3b08      	subs	r3, #8
 8011814:	4619      	mov	r1, r3
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7fb fe08 	bl	800d42c <luaO_tostring>
 801181c:	e003      	b.n	8011826 <luaV_concat+0x6a>
      luaT_tryconcatTM(L);
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7fe fc7e 	bl	8010120 <luaT_tryconcatTM>
 8011824:	e0df      	b.n	80119e6 <luaV_concat+0x22a>
    else if (isemptystr(s2v(top - 1)))  /* second operand is empty? */
 8011826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011828:	3b08      	subs	r3, #8
 801182a:	791b      	ldrb	r3, [r3, #4]
 801182c:	2b44      	cmp	r3, #68	; 0x44
 801182e:	d11c      	bne.n	801186a <luaV_concat+0xae>
 8011830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011832:	3b08      	subs	r3, #8
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	79db      	ldrb	r3, [r3, #7]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d116      	bne.n	801186a <luaV_concat+0xae>
      cast_void(tostring(L, s2v(top - 2)));  /* result is first operand */
 801183c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801183e:	3b10      	subs	r3, #16
 8011840:	791b      	ldrb	r3, [r3, #4]
 8011842:	f003 030f 	and.w	r3, r3, #15
 8011846:	2b04      	cmp	r3, #4
 8011848:	f000 80cc 	beq.w	80119e4 <luaV_concat+0x228>
 801184c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801184e:	3b10      	subs	r3, #16
 8011850:	791b      	ldrb	r3, [r3, #4]
 8011852:	f003 030f 	and.w	r3, r3, #15
 8011856:	2b03      	cmp	r3, #3
 8011858:	f040 80c4 	bne.w	80119e4 <luaV_concat+0x228>
 801185c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801185e:	3b10      	subs	r3, #16
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7fb fde2 	bl	800d42c <luaO_tostring>
 8011868:	e0bc      	b.n	80119e4 <luaV_concat+0x228>
    else if (isemptystr(s2v(top - 2))) {  /* first operand is empty string? */
 801186a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801186c:	3b10      	subs	r3, #16
 801186e:	791b      	ldrb	r3, [r3, #4]
 8011870:	2b44      	cmp	r3, #68	; 0x44
 8011872:	d114      	bne.n	801189e <luaV_concat+0xe2>
 8011874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011876:	3b10      	subs	r3, #16
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	79db      	ldrb	r3, [r3, #7]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d10e      	bne.n	801189e <luaV_concat+0xe2>
      setobjs2s(L, top - 2, top - 1);  /* result is second op. */
 8011880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011882:	3b10      	subs	r3, #16
 8011884:	647b      	str	r3, [r7, #68]	; 0x44
 8011886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011888:	3b08      	subs	r3, #8
 801188a:	643b      	str	r3, [r7, #64]	; 0x40
 801188c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801188e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011890:	6812      	ldr	r2, [r2, #0]
 8011892:	601a      	str	r2, [r3, #0]
 8011894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011896:	791a      	ldrb	r2, [r3, #4]
 8011898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801189a:	711a      	strb	r2, [r3, #4]
 801189c:	e0a3      	b.n	80119e6 <luaV_concat+0x22a>
    }
    else {
      /* at least two non-empty string values; get as many as possible */
      size_t tl = vslen(s2v(top - 1));
 801189e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118a0:	3b08      	subs	r3, #8
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	791b      	ldrb	r3, [r3, #4]
 80118a6:	2b04      	cmp	r3, #4
 80118a8:	d104      	bne.n	80118b4 <luaV_concat+0xf8>
 80118aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118ac:	3b08      	subs	r3, #8
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	79db      	ldrb	r3, [r3, #7]
 80118b2:	e003      	b.n	80118bc <luaV_concat+0x100>
 80118b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118b6:	3b08      	subs	r3, #8
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	653b      	str	r3, [r7, #80]	; 0x50
      TString *ts;
      /* collect total length and number of strings */
      for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {
 80118be:	2301      	movs	r3, #1
 80118c0:	657b      	str	r3, [r7, #84]	; 0x54
 80118c2:	e035      	b.n	8011930 <luaV_concat+0x174>
        size_t l = vslen(s2v(top - n - 1));
 80118c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118c6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80118ca:	1a9b      	subs	r3, r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118d0:	4413      	add	r3, r2
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	791b      	ldrb	r3, [r3, #4]
 80118d6:	2b04      	cmp	r3, #4
 80118d8:	d109      	bne.n	80118ee <luaV_concat+0x132>
 80118da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118dc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80118e0:	1a9b      	subs	r3, r3, r2
 80118e2:	00db      	lsls	r3, r3, #3
 80118e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118e6:	4413      	add	r3, r2
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	79db      	ldrb	r3, [r3, #7]
 80118ec:	e008      	b.n	8011900 <luaV_concat+0x144>
 80118ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118f0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80118f4:	1a9b      	subs	r3, r3, r2
 80118f6:	00db      	lsls	r3, r3, #3
 80118f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118fa:	4413      	add	r3, r2
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	68db      	ldr	r3, [r3, #12]
 8011900:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (l_unlikely(l >= (MAX_SIZE/sizeof(char)) - tl))
 8011902:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011904:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011908:	1a9b      	subs	r3, r3, r2
 801190a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801190c:	429a      	cmp	r2, r3
 801190e:	bf2c      	ite	cs
 8011910:	2301      	movcs	r3, #1
 8011912:	2300      	movcc	r3, #0
 8011914:	b2db      	uxtb	r3, r3
 8011916:	2b00      	cmp	r3, #0
 8011918:	d003      	beq.n	8011922 <luaV_concat+0x166>
          luaG_runerror(L, "string length overflow");
 801191a:	493e      	ldr	r1, [pc, #248]	; (8011a14 <luaV_concat+0x258>)
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f7f7 fb66 	bl	8008fee <luaG_runerror>
        tl += l;
 8011922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011926:	4413      	add	r3, r2
 8011928:	653b      	str	r3, [r7, #80]	; 0x50
      for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {
 801192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801192c:	3301      	adds	r3, #1
 801192e:	657b      	str	r3, [r7, #84]	; 0x54
 8011930:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	429a      	cmp	r2, r3
 8011936:	da23      	bge.n	8011980 <luaV_concat+0x1c4>
 8011938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801193a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801193e:	1a9b      	subs	r3, r3, r2
 8011940:	00db      	lsls	r3, r3, #3
 8011942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011944:	4413      	add	r3, r2
 8011946:	791b      	ldrb	r3, [r3, #4]
 8011948:	f003 030f 	and.w	r3, r3, #15
 801194c:	2b04      	cmp	r3, #4
 801194e:	d0b9      	beq.n	80118c4 <luaV_concat+0x108>
 8011950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011952:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8011956:	1a9b      	subs	r3, r3, r2
 8011958:	00db      	lsls	r3, r3, #3
 801195a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801195c:	4413      	add	r3, r2
 801195e:	791b      	ldrb	r3, [r3, #4]
 8011960:	f003 030f 	and.w	r3, r3, #15
 8011964:	2b03      	cmp	r3, #3
 8011966:	d10b      	bne.n	8011980 <luaV_concat+0x1c4>
 8011968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801196a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801196e:	1a9b      	subs	r3, r3, r2
 8011970:	00db      	lsls	r3, r3, #3
 8011972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011974:	4413      	add	r3, r2
 8011976:	4619      	mov	r1, r3
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f7fb fd57 	bl	800d42c <luaO_tostring>
 801197e:	e7a1      	b.n	80118c4 <luaV_concat+0x108>
      }
      if (tl <= LUAI_MAXSHORTLEN) {  /* is result a short string? */
 8011980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011982:	2b28      	cmp	r3, #40	; 0x28
 8011984:	d80f      	bhi.n	80119a6 <luaV_concat+0x1ea>
        char buff[LUAI_MAXSHORTLEN];
        copy2buff(top, n, buff);  /* copy strings to buffer */
 8011986:	f107 030c 	add.w	r3, r7, #12
 801198a:	461a      	mov	r2, r3
 801198c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801198e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011990:	f7ff fed6 	bl	8011740 <copy2buff>
        ts = luaS_newlstr(L, buff, tl);
 8011994:	f107 030c 	add.w	r3, r7, #12
 8011998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801199a:	4619      	mov	r1, r3
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7fc ff4f 	bl	800e840 <luaS_newlstr>
 80119a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80119a4:	e00b      	b.n	80119be <luaV_concat+0x202>
      }
      else {  /* long string; copy strings directly to final result */
        ts = luaS_createlngstrobj(L, tl);
 80119a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f7fc fe50 	bl	800e64e <luaS_createlngstrobj>
 80119ae:	64f8      	str	r0, [r7, #76]	; 0x4c
        copy2buff(top, n, getstr(ts));
 80119b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119b2:	3310      	adds	r3, #16
 80119b4:	461a      	mov	r2, r3
 80119b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80119b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80119ba:	f7ff fec1 	bl	8011740 <copy2buff>
      }
      setsvalue2s(L, top - n, ts);  /* create result */
 80119be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119c0:	00db      	lsls	r3, r3, #3
 80119c2:	425b      	negs	r3, r3
 80119c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119c6:	4413      	add	r3, r2
 80119c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80119ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119cc:	637b      	str	r3, [r7, #52]	; 0x34
 80119ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d2:	601a      	str	r2, [r3, #0]
 80119d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d6:	791b      	ldrb	r3, [r3, #4]
 80119d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e0:	711a      	strb	r2, [r3, #4]
 80119e2:	e000      	b.n	80119e6 <luaV_concat+0x22a>
      cast_void(tostring(L, s2v(top - 2)));  /* result is first operand */
 80119e4:	bf00      	nop
    }
    total -= n-1;  /* got 'n' strings to create 1 new */
 80119e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119e8:	3b01      	subs	r3, #1
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	603b      	str	r3, [r7, #0]
    L->top -= n-1;  /* popped 'n' strings and pushed one */
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	68da      	ldr	r2, [r3, #12]
 80119f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119f6:	f1c3 0301 	rsb	r3, r3, #1
 80119fa:	00db      	lsls	r3, r3, #3
 80119fc:	441a      	add	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	60da      	str	r2, [r3, #12]
  } while (total > 1);  /* repeat until only 1 result left */
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	2b01      	cmp	r3, #1
 8011a06:	f73f aee2 	bgt.w	80117ce <luaV_concat+0x12>
 8011a0a:	e000      	b.n	8011a0e <luaV_concat+0x252>
    return;  /* "all" values already concatenated */
 8011a0c:	bf00      	nop
}
 8011a0e:	3758      	adds	r7, #88	; 0x58
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	08022868 	.word	0x08022868

08011a18 <luaV_objlen>:


/*
** Main operation 'ra = #rb'.
*/
void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b08c      	sub	sp, #48	; 0x30
 8011a1c:	af02      	add	r7, sp, #8
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	607a      	str	r2, [r7, #4]
  const TValue *tm;
  switch (ttypetag(rb)) {
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	791b      	ldrb	r3, [r3, #4]
 8011a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011a2c:	2b14      	cmp	r3, #20
 8011a2e:	d03f      	beq.n	8011ab0 <luaV_objlen+0x98>
 8011a30:	2b14      	cmp	r3, #20
 8011a32:	dc49      	bgt.n	8011ac8 <luaV_objlen+0xb0>
 8011a34:	2b04      	cmp	r3, #4
 8011a36:	d02f      	beq.n	8011a98 <luaV_objlen+0x80>
 8011a38:	2b05      	cmp	r3, #5
 8011a3a:	d145      	bne.n	8011ac8 <luaV_objlen+0xb0>
    case LUA_VTABLE: {
      Table *h = hvalue(rb);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	61fb      	str	r3, [r7, #28]
      tm = fasttm(L, h->metatable, TM_LEN);
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	699b      	ldr	r3, [r3, #24]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d014      	beq.n	8011a74 <luaV_objlen+0x5c>
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	699b      	ldr	r3, [r3, #24]
 8011a4e:	799b      	ldrb	r3, [r3, #6]
 8011a50:	f003 0310 	and.w	r3, r3, #16
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10b      	bne.n	8011a70 <luaV_objlen+0x58>
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	6998      	ldr	r0, [r3, #24]
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	691b      	ldr	r3, [r3, #16]
 8011a60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011a64:	461a      	mov	r2, r3
 8011a66:	2104      	movs	r1, #4
 8011a68:	f7fe f982 	bl	800fd70 <luaT_gettm>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	e002      	b.n	8011a76 <luaV_objlen+0x5e>
 8011a70:	2300      	movs	r3, #0
 8011a72:	e000      	b.n	8011a76 <luaV_objlen+0x5e>
 8011a74:	2300      	movs	r3, #0
 8011a76:	627b      	str	r3, [r7, #36]	; 0x24
      if (tm) break;  /* metamethod? break switch to call it */
 8011a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d13a      	bne.n	8011af4 <luaV_objlen+0xdc>
      setivalue(s2v(ra), luaH_getn(h));  /* else primitive len */
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	61bb      	str	r3, [r7, #24]
 8011a82:	69f8      	ldr	r0, [r7, #28]
 8011a84:	f7fe f88e 	bl	800fba4 <luaH_getn>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	601a      	str	r2, [r3, #0]
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	2203      	movs	r2, #3
 8011a94:	711a      	strb	r2, [r3, #4]
      return;
 8011a96:	e038      	b.n	8011b0a <luaV_objlen+0xf2>
    }
    case LUA_VSHRSTR: {
      setivalue(s2v(ra), tsvalue(rb)->shrlen);
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	617b      	str	r3, [r7, #20]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	79db      	ldrb	r3, [r3, #7]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	601a      	str	r2, [r3, #0]
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	2203      	movs	r2, #3
 8011aac:	711a      	strb	r2, [r3, #4]
      return;
 8011aae:	e02c      	b.n	8011b0a <luaV_objlen+0xf2>
    }
    case LUA_VLNGSTR: {
      setivalue(s2v(ra), tsvalue(rb)->u.lnglen);
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	623b      	str	r3, [r7, #32]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	68db      	ldr	r3, [r3, #12]
 8011aba:	461a      	mov	r2, r3
 8011abc:	6a3b      	ldr	r3, [r7, #32]
 8011abe:	601a      	str	r2, [r3, #0]
 8011ac0:	6a3b      	ldr	r3, [r7, #32]
 8011ac2:	2203      	movs	r2, #3
 8011ac4:	711a      	strb	r2, [r3, #4]
      return;
 8011ac6:	e020      	b.n	8011b0a <luaV_objlen+0xf2>
    }
    default: {  /* try metamethod */
      tm = luaT_gettmbyobj(L, rb, TM_LEN);
 8011ac8:	2204      	movs	r2, #4
 8011aca:	6879      	ldr	r1, [r7, #4]
 8011acc:	68f8      	ldr	r0, [r7, #12]
 8011ace:	f7fe f973 	bl	800fdb8 <luaT_gettmbyobj>
 8011ad2:	6278      	str	r0, [r7, #36]	; 0x24
      if (l_unlikely(notm(tm)))  /* no metamethod? */
 8011ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad6:	791b      	ldrb	r3, [r3, #4]
 8011ad8:	f003 030f 	and.w	r3, r3, #15
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	bf0c      	ite	eq
 8011ae0:	2301      	moveq	r3, #1
 8011ae2:	2300      	movne	r3, #0
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d006      	beq.n	8011af8 <luaV_objlen+0xe0>
        luaG_typeerror(L, rb, "get length of");
 8011aea:	4a09      	ldr	r2, [pc, #36]	; (8011b10 <luaV_objlen+0xf8>)
 8011aec:	6879      	ldr	r1, [r7, #4]
 8011aee:	68f8      	ldr	r0, [r7, #12]
 8011af0:	f7f7 f94e 	bl	8008d90 <luaG_typeerror>
      if (tm) break;  /* metamethod? break switch to call it */
 8011af4:	bf00      	nop
 8011af6:	e000      	b.n	8011afa <luaV_objlen+0xe2>
      break;
 8011af8:	bf00      	nop
    }
  }
  luaT_callTMres(L, tm, rb, rb, ra);
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b04:	68f8      	ldr	r0, [r7, #12]
 8011b06:	f7fe fa2b 	bl	800ff60 <luaT_callTMres>
}
 8011b0a:	3728      	adds	r7, #40	; 0x28
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	08022880 	.word	0x08022880

08011b14 <luaV_idiv>:
** Integer division; return 'm // n', that is, floor(m/n).
** C division truncates its result (rounds towards zero).
** 'floor(q) == trunc(q)' when 'q >= 0' or when 'q' is integer,
** otherwise 'floor(q) == trunc(q) - 1'.
*/
lua_Integer luaV_idiv (lua_State *L, lua_Integer m, lua_Integer n) {
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b086      	sub	sp, #24
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
  if (l_unlikely(l_castS2U(n) + 1u <= 1u)) {  /* special cases: -1 or 0 */
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	3301      	adds	r3, #1
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	bf94      	ite	ls
 8011b28:	2301      	movls	r3, #1
 8011b2a:	2300      	movhi	r3, #0
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d009      	beq.n	8011b46 <luaV_idiv+0x32>
    if (n == 0)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d103      	bne.n	8011b40 <luaV_idiv+0x2c>
      luaG_runerror(L, "attempt to divide by zero");
 8011b38:	4911      	ldr	r1, [pc, #68]	; (8011b80 <luaV_idiv+0x6c>)
 8011b3a:	68f8      	ldr	r0, [r7, #12]
 8011b3c:	f7f7 fa57 	bl	8008fee <luaG_runerror>
    return intop(-, 0, m);   /* n==-1; avoid overflow with 0x80000...//-1 */
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	425b      	negs	r3, r3
 8011b44:	e017      	b.n	8011b76 <luaV_idiv+0x62>
  }
  else {
    lua_Integer q = m / n;  /* perform C division */
 8011b46:	68ba      	ldr	r2, [r7, #8]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8011b4e:	617b      	str	r3, [r7, #20]
    if ((m ^ n) < 0 && m % n != 0)  /* 'm/n' would be negative non-integer? */
 8011b50:	68ba      	ldr	r2, [r7, #8]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4053      	eors	r3, r2
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	da0c      	bge.n	8011b74 <luaV_idiv+0x60>
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	fb93 f2f2 	sdiv	r2, r3, r2
 8011b62:	6879      	ldr	r1, [r7, #4]
 8011b64:	fb01 f202 	mul.w	r2, r1, r2
 8011b68:	1a9b      	subs	r3, r3, r2
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d002      	beq.n	8011b74 <luaV_idiv+0x60>
      q -= 1;  /* correct result for different rounding */
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	3b01      	subs	r3, #1
 8011b72:	617b      	str	r3, [r7, #20]
    return q;
 8011b74:	697b      	ldr	r3, [r7, #20]
  }
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3718      	adds	r7, #24
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	08022890 	.word	0x08022890

08011b84 <luaV_mod>:
/*
** Integer modulus; return 'm % n'. (Assume that C '%' with
** negative operands follows C99 behavior. See previous comment
** about luaV_idiv.)
*/
lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	60b9      	str	r1, [r7, #8]
 8011b8e:	607a      	str	r2, [r7, #4]
  if (l_unlikely(l_castS2U(n) + 1u <= 1u)) {  /* special cases: -1 or 0 */
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	3301      	adds	r3, #1
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	bf94      	ite	ls
 8011b98:	2301      	movls	r3, #1
 8011b9a:	2300      	movhi	r3, #0
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d008      	beq.n	8011bb4 <luaV_mod+0x30>
    if (n == 0)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d103      	bne.n	8011bb0 <luaV_mod+0x2c>
      luaG_runerror(L, "attempt to perform 'n%%0'");
 8011ba8:	490f      	ldr	r1, [pc, #60]	; (8011be8 <luaV_mod+0x64>)
 8011baa:	68f8      	ldr	r0, [r7, #12]
 8011bac:	f7f7 fa1f 	bl	8008fee <luaG_runerror>
    return 0;   /* m % -1 == 0; avoid overflow with 0x80000...%-1 */
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	e015      	b.n	8011be0 <luaV_mod+0x5c>
  }
  else {
    lua_Integer r = m % n;
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	fb93 f2f2 	sdiv	r2, r3, r2
 8011bbc:	6879      	ldr	r1, [r7, #4]
 8011bbe:	fb01 f202 	mul.w	r2, r1, r2
 8011bc2:	1a9b      	subs	r3, r3, r2
 8011bc4:	617b      	str	r3, [r7, #20]
    if (r != 0 && (r ^ n) < 0)  /* 'm/n' would be non-integer negative? */
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d008      	beq.n	8011bde <luaV_mod+0x5a>
 8011bcc:	697a      	ldr	r2, [r7, #20]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4053      	eors	r3, r2
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	da03      	bge.n	8011bde <luaV_mod+0x5a>
      r += n;  /* correct result for different rounding */
 8011bd6:	697a      	ldr	r2, [r7, #20]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	4413      	add	r3, r2
 8011bdc:	617b      	str	r3, [r7, #20]
    return r;
 8011bde:	697b      	ldr	r3, [r7, #20]
  }
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3718      	adds	r7, #24
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	080228ac 	.word	0x080228ac

08011bec <luaV_modf>:


/*
** Float modulus
*/
lua_Number luaV_modf (lua_State *L, lua_Number m, lua_Number n) {
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b086      	sub	sp, #24
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	ed87 0a02 	vstr	s0, [r7, #8]
 8011bf8:	edc7 0a01 	vstr	s1, [r7, #4]
  lua_Number r;
  luai_nummod(L, m, n, r);
 8011bfc:	edd7 0a01 	vldr	s1, [r7, #4]
 8011c00:	ed97 0a02 	vldr	s0, [r7, #8]
 8011c04:	f00c f84c 	bl	801dca0 <fmodf>
 8011c08:	ed87 0a05 	vstr	s0, [r7, #20]
 8011c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c18:	dd0a      	ble.n	8011c30 <luaV_modf+0x44>
 8011c1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8011c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c26:	bf4c      	ite	mi
 8011c28:	2301      	movmi	r3, #1
 8011c2a:	2300      	movpl	r3, #0
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	e013      	b.n	8011c58 <luaV_modf+0x6c>
 8011c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3c:	d508      	bpl.n	8011c50 <luaV_modf+0x64>
 8011c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4a:	dd01      	ble.n	8011c50 <luaV_modf+0x64>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e000      	b.n	8011c52 <luaV_modf+0x66>
 8011c50:	2300      	movs	r3, #0
 8011c52:	f003 0301 	and.w	r3, r3, #1
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d007      	beq.n	8011c6c <luaV_modf+0x80>
 8011c5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8011c60:	edd7 7a01 	vldr	s15, [r7, #4]
 8011c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c68:	edc7 7a05 	vstr	s15, [r7, #20]
  return r;
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	ee07 3a90 	vmov	s15, r3
}
 8011c72:	eeb0 0a67 	vmov.f32	s0, s15
 8011c76:	3718      	adds	r7, #24
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <luaV_shiftl>:
** Shift left operation. (Shift right just negates 'y'.)
*/
#define luaV_shiftr(x,y)	luaV_shiftl(x,intop(-, 0, y))


lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {
 8011c7c:	b480      	push	{r7}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
  if (y < 0) {  /* shift right? */
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	da0a      	bge.n	8011ca2 <luaV_shiftl+0x26>
    if (y <= -NBITS) return 0;
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	f113 0f1f 	cmn.w	r3, #31
 8011c92:	da01      	bge.n	8011c98 <luaV_shiftl+0x1c>
 8011c94:	2300      	movs	r3, #0
 8011c96:	e00d      	b.n	8011cb4 <luaV_shiftl+0x38>
    else return intop(>>, x, -y);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	683a      	ldr	r2, [r7, #0]
 8011c9c:	4252      	negs	r2, r2
 8011c9e:	40d3      	lsrs	r3, r2
 8011ca0:	e008      	b.n	8011cb4 <luaV_shiftl+0x38>
  }
  else {  /* shift left */
    if (y >= NBITS) return 0;
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	2b1f      	cmp	r3, #31
 8011ca6:	dd01      	ble.n	8011cac <luaV_shiftl+0x30>
 8011ca8:	2300      	movs	r3, #0
 8011caa:	e003      	b.n	8011cb4 <luaV_shiftl+0x38>
    else return intop(<<, x, y);
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	fa02 f303 	lsl.w	r3, r2, r3
  }
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <pushclosure>:
/*
** create a new Lua closure, push it in the stack, and initialize
** its upvalues.
*/
static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,
                         StkId ra) {
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b08a      	sub	sp, #40	; 0x28
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	607a      	str	r2, [r7, #4]
 8011ccc:	603b      	str	r3, [r7, #0]
  int nup = p->sizeupvalues;
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	623b      	str	r3, [r7, #32]
  Upvaldesc *uv = p->upvalues;
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cd8:	61fb      	str	r3, [r7, #28]
  int i;
  LClosure *ncl = luaF_newLclosure(L, nup);
 8011cda:	6a39      	ldr	r1, [r7, #32]
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f7f8 fa6c 	bl	800a1ba <luaF_newLclosure>
 8011ce2:	61b8      	str	r0, [r7, #24]
  ncl->p = p;
 8011ce4:	69bb      	ldr	r3, [r7, #24]
 8011ce6:	68ba      	ldr	r2, [r7, #8]
 8011ce8:	60da      	str	r2, [r3, #12]
  setclLvalue2s(L, ra, ncl);  /* anchor new closure in stack */
 8011cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cec:	617b      	str	r3, [r7, #20]
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	613b      	str	r3, [r7, #16]
 8011cf2:	693a      	ldr	r2, [r7, #16]
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	601a      	str	r2, [r3, #0]
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	2246      	movs	r2, #70	; 0x46
 8011cfc:	711a      	strb	r2, [r3, #4]
  for (i = 0; i < nup; i++) {  /* fill in its upvalues */
 8011cfe:	2300      	movs	r3, #0
 8011d00:	627b      	str	r3, [r7, #36]	; 0x24
 8011d02:	e044      	b.n	8011d8e <pushclosure+0xce>
    if (uv[i].instack)  /* upvalue refers to local variable? */
 8011d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d06:	00db      	lsls	r3, r3, #3
 8011d08:	69fa      	ldr	r2, [r7, #28]
 8011d0a:	4413      	add	r3, r2
 8011d0c:	791b      	ldrb	r3, [r3, #4]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d012      	beq.n	8011d38 <pushclosure+0x78>
      ncl->upvals[i] = luaF_findupval(L, base + uv[i].idx);
 8011d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d14:	00db      	lsls	r3, r3, #3
 8011d16:	69fa      	ldr	r2, [r7, #28]
 8011d18:	4413      	add	r3, r2
 8011d1a:	795b      	ldrb	r3, [r3, #5]
 8011d1c:	00db      	lsls	r3, r3, #3
 8011d1e:	683a      	ldr	r2, [r7, #0]
 8011d20:	4413      	add	r3, r2
 8011d22:	4619      	mov	r1, r3
 8011d24:	68f8      	ldr	r0, [r7, #12]
 8011d26:	f7f8 faaf 	bl	800a288 <luaF_findupval>
 8011d2a:	4601      	mov	r1, r0
 8011d2c:	69bb      	ldr	r3, [r7, #24]
 8011d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d30:	3204      	adds	r2, #4
 8011d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011d36:	e00d      	b.n	8011d54 <pushclosure+0x94>
    else  /* get upvalue from enclosing function */
      ncl->upvals[i] = encup[uv[i].idx];
 8011d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3a:	00db      	lsls	r3, r3, #3
 8011d3c:	69fa      	ldr	r2, [r7, #28]
 8011d3e:	4413      	add	r3, r2
 8011d40:	795b      	ldrb	r3, [r3, #5]
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	4413      	add	r3, r2
 8011d48:	6819      	ldr	r1, [r3, #0]
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d4e:	3204      	adds	r2, #4
 8011d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    luaC_objbarrier(L, ncl, ncl->upvals[i]);
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	795b      	ldrb	r3, [r3, #5]
 8011d58:	f003 0320 	and.w	r3, r3, #32
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d013      	beq.n	8011d88 <pushclosure+0xc8>
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d64:	3204      	adds	r2, #4
 8011d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d6a:	795b      	ldrb	r3, [r3, #5]
 8011d6c:	f003 0318 	and.w	r3, r3, #24
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d009      	beq.n	8011d88 <pushclosure+0xc8>
 8011d74:	69b9      	ldr	r1, [r7, #24]
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d7a:	3204      	adds	r2, #4
 8011d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d80:	461a      	mov	r2, r3
 8011d82:	68f8      	ldr	r0, [r7, #12]
 8011d84:	f7f8 fd98 	bl	800a8b8 <luaC_barrier_>
  for (i = 0; i < nup; i++) {  /* fill in its upvalues */
 8011d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8011d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d90:	6a3b      	ldr	r3, [r7, #32]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	dbb6      	blt.n	8011d04 <pushclosure+0x44>
  }
}
 8011d96:	bf00      	nop
 8011d98:	bf00      	nop
 8011d9a:	3728      	adds	r7, #40	; 0x28
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <luaV_execute>:
#define vmdispatch(o)	switch(o)
#define vmcase(l)	case l:
#define vmbreak		break


void luaV_execute (lua_State *L, CallInfo *ci) {
 8011da0:	b590      	push	{r4, r7, lr}
 8011da2:	f2ad 5d8c 	subw	sp, sp, #1420	; 0x58c
 8011da6:	af02      	add	r7, sp, #8
 8011da8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dac:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011db0:	6018      	str	r0, [r3, #0]
 8011db2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011db6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011dba:	6019      	str	r1, [r3, #0]
  int trap;
#if LUA_USE_JUMPTABLE
#include "ljumptab.h"
#endif
 startfunc:
  trap = L->hookmask;
 8011dbc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dc0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dc8:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 returning:  /* trap already set */
  cl = clLvalue(s2v(ci->func));
 8011dcc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dd0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
  k = cl->p->k;
 8011dde:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011de6:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
  pc = ci->u.l.savedpc;
 8011dea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011dee:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	691b      	ldr	r3, [r3, #16]
 8011df6:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
  if (l_unlikely(trap)) {
 8011dfa:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	bf14      	ite	ne
 8011e02:	2301      	movne	r3, #1
 8011e04:	2300      	moveq	r3, #0
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d024      	beq.n	8011e56 <luaV_execute+0xb6>
    if (pc == cl->p->code) {  /* first instruction (not resuming)? */
 8011e0c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8011e10:	68db      	ldr	r3, [r3, #12]
 8011e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e14:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	d115      	bne.n	8011e48 <luaV_execute+0xa8>
      if (cl->p->is_vararg)
 8011e1c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	79db      	ldrb	r3, [r3, #7]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d003      	beq.n	8011e30 <luaV_execute+0x90>
        trap = 0;  /* hooks will start after VARARGPREP instruction */
 8011e28:	2300      	movs	r3, #0
 8011e2a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8011e2e:	e00b      	b.n	8011e48 <luaV_execute+0xa8>
      else  /* check 'call' hook */
        luaD_hookcall(L, ci);
 8011e30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e34:	f5a3 62b0 	sub.w	r2, r3, #1408	; 0x580
 8011e38:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e3c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011e40:	6811      	ldr	r1, [r2, #0]
 8011e42:	6818      	ldr	r0, [r3, #0]
 8011e44:	f7f7 fd19 	bl	800987a <luaD_hookcall>
    }
    ci->u.l.trap = 1;  /* assume trap is on, for now */
 8011e48:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e4c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	2201      	movs	r2, #1
 8011e54:	615a      	str	r2, [r3, #20]
  }
  base = ci->func + 1;
 8011e56:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e5a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	3308      	adds	r3, #8
 8011e64:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
  /* main loop of interpreter */
  for (;;) {
    Instruction i;  /* instruction being executed */
    StkId ra;  /* instruction's A register */
    vmfetch();
 8011e68:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	bf14      	ite	ne
 8011e70:	2301      	movne	r3, #1
 8011e72:	2300      	moveq	r3, #0
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d013      	beq.n	8011ea2 <luaV_execute+0x102>
 8011e7a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e7e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011e82:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011e86:	6818      	ldr	r0, [r3, #0]
 8011e88:	f7f7 f928 	bl	80090dc <luaG_traceexec>
 8011e8c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8011e90:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011e94:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	3308      	adds	r3, #8
 8011e9e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8011ea2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011ea6:	1d1a      	adds	r2, r3, #4
 8011ea8:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8011eb2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011eb6:	09db      	lsrs	r3, r3, #7
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	00db      	lsls	r3, r3, #3
 8011ebc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011ec0:	4413      	add	r3, r2
 8011ec2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    #endif
    lua_assert(base == ci->func + 1);
    lua_assert(base <= L->top && L->top < L->stack_last);
    /* invalidate top for instructions not expecting it */
    lua_assert(isIT(i) || (cast_void(L->top = base), 1));
    vmdispatch (GET_OPCODE(i)) {
 8011ec6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ed0:	4acb      	ldr	r2, [pc, #812]	; (8012200 <luaV_execute+0x460>)
 8011ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ed6:	e035      	b.n	8011f44 <luaV_execute+0x1a4>
      vmcase(OP_MOVE) {
        setobjs2s(L, ra, RB(i));
 8011ed8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011edc:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8011ee0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011eea:	0c1b      	lsrs	r3, r3, #16
 8011eec:	b2db      	uxtb	r3, r3
 8011eee:	00db      	lsls	r3, r3, #3
 8011ef0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011ef4:	441a      	add	r2, r3
 8011ef6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011efa:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8011efe:	601a      	str	r2, [r3, #0]
 8011f00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f04:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011f0e:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8011f12:	6812      	ldr	r2, [r2, #0]
 8011f14:	6812      	ldr	r2, [r2, #0]
 8011f16:	601a      	str	r2, [r3, #0]
 8011f18:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f1c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	791a      	ldrb	r2, [r3, #4]
 8011f24:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f28:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8011f30:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	bf14      	ite	ne
 8011f38:	2301      	movne	r3, #1
 8011f3a:	2300      	moveq	r3, #0
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d103      	bne.n	8011f4a <luaV_execute+0x1aa>
 8011f42:	e016      	b.n	8011f72 <luaV_execute+0x1d2>
 8011f44:	f043 0301 	orr.w	r3, r3, #1
 8011f48:	4718      	bx	r3
 8011f4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f4e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011f52:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011f56:	6818      	ldr	r0, [r3, #0]
 8011f58:	f7f7 f8c0 	bl	80090dc <luaG_traceexec>
 8011f5c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8011f60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011f64:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	3308      	adds	r3, #8
 8011f6e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8011f72:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8011f76:	1d1a      	adds	r2, r3, #4
 8011f78:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8011f82:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011f86:	09db      	lsrs	r3, r3, #7
 8011f88:	b2db      	uxtb	r3, r3
 8011f8a:	00db      	lsls	r3, r3, #3
 8011f8c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011f90:	4413      	add	r3, r2
 8011f92:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011f96:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fa0:	4a97      	ldr	r2, [pc, #604]	; (8012200 <luaV_execute+0x460>)
 8011fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fa6:	e7cd      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADI) {
        lua_Integer b = GETARG_sBx(i);
 8011fa8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8011fac:	0bdb      	lsrs	r3, r3, #15
 8011fae:	4619      	mov	r1, r3
 8011fb0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011fb4:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 8011fb8:	f5a1 437f 	sub.w	r3, r1, #65280	; 0xff00
 8011fbc:	3bff      	subs	r3, #255	; 0xff
 8011fbe:	6013      	str	r3, [r2, #0]
        setivalue(s2v(ra), b);
 8011fc0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011fc4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8011fc8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8011fcc:	601a      	str	r2, [r3, #0]
 8011fce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011fd2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8011fdc:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 8011fe0:	6812      	ldr	r2, [r2, #0]
 8011fe2:	601a      	str	r2, [r3, #0]
 8011fe4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011fe8:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2203      	movs	r2, #3
 8011ff0:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8011ff2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	bf14      	ite	ne
 8011ffa:	2301      	movne	r3, #1
 8011ffc:	2300      	moveq	r3, #0
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	2b00      	cmp	r3, #0
 8012002:	d013      	beq.n	801202c <luaV_execute+0x28c>
 8012004:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012008:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801200c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012010:	6818      	ldr	r0, [r3, #0]
 8012012:	f7f7 f863 	bl	80090dc <luaG_traceexec>
 8012016:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801201a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801201e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	3308      	adds	r3, #8
 8012028:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801202c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012030:	1d1a      	adds	r2, r3, #4
 8012032:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801203c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012040:	09db      	lsrs	r3, r3, #7
 8012042:	b2db      	uxtb	r3, r3
 8012044:	00db      	lsls	r3, r3, #3
 8012046:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801204a:	4413      	add	r3, r2
 801204c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012050:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012054:	b2db      	uxtb	r3, r3
 8012056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801205a:	4a69      	ldr	r2, [pc, #420]	; (8012200 <luaV_execute+0x460>)
 801205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012060:	e770      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADF) {
        int b = GETARG_sBx(i);
 8012062:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012066:	0bdb      	lsrs	r3, r3, #15
 8012068:	4619      	mov	r1, r3
 801206a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801206e:	f5a3 62a2 	sub.w	r2, r3, #1296	; 0x510
 8012072:	f5a1 437f 	sub.w	r3, r1, #65280	; 0xff00
 8012076:	3bff      	subs	r3, #255	; 0xff
 8012078:	6013      	str	r3, [r2, #0]
        setfltvalue(s2v(ra), cast_num(b));
 801207a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801207e:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8012082:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012086:	601a      	str	r2, [r3, #0]
 8012088:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801208c:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	ee07 3a90 	vmov	s15, r3
 8012096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801209a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801209e:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	edc3 7a00 	vstr	s15, [r3]
 80120a8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80120ac:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	2213      	movs	r2, #19
 80120b4:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80120b6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	bf14      	ite	ne
 80120be:	2301      	movne	r3, #1
 80120c0:	2300      	moveq	r3, #0
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d013      	beq.n	80120f0 <luaV_execute+0x350>
 80120c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80120cc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80120d0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80120d4:	6818      	ldr	r0, [r3, #0]
 80120d6:	f7f7 f801 	bl	80090dc <luaG_traceexec>
 80120da:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80120de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80120e2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	3308      	adds	r3, #8
 80120ec:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80120f0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80120f4:	1d1a      	adds	r2, r3, #4
 80120f6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012100:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012104:	09db      	lsrs	r3, r3, #7
 8012106:	b2db      	uxtb	r3, r3
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801210e:	4413      	add	r3, r2
 8012110:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012114:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012118:	b2db      	uxtb	r3, r3
 801211a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801211e:	4a38      	ldr	r2, [pc, #224]	; (8012200 <luaV_execute+0x460>)
 8012120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012124:	e70e      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADK) {
        TValue *rb = k + GETARG_Bx(i);
 8012126:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801212a:	0bdb      	lsrs	r3, r3, #15
 801212c:	00da      	lsls	r2, r3, #3
 801212e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012132:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8012136:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 801213a:	440a      	add	r2, r1
 801213c:	601a      	str	r2, [r3, #0]
        setobj2s(L, ra, rb);
 801213e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012142:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8012146:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801214a:	601a      	str	r2, [r3, #0]
 801214c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012150:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8012154:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012158:	f2a2 5204 	subw	r2, r2, #1284	; 0x504
 801215c:	6812      	ldr	r2, [r2, #0]
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012164:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801216e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8012172:	6812      	ldr	r2, [r2, #0]
 8012174:	6812      	ldr	r2, [r2, #0]
 8012176:	601a      	str	r2, [r3, #0]
 8012178:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801217c:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	791a      	ldrb	r2, [r3, #4]
 8012184:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012188:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8012190:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012194:	2b00      	cmp	r3, #0
 8012196:	bf14      	ite	ne
 8012198:	2301      	movne	r3, #1
 801219a:	2300      	moveq	r3, #0
 801219c:	b2db      	uxtb	r3, r3
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d013      	beq.n	80121ca <luaV_execute+0x42a>
 80121a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80121a6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80121aa:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80121ae:	6818      	ldr	r0, [r3, #0]
 80121b0:	f7f6 ff94 	bl	80090dc <luaG_traceexec>
 80121b4:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80121b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80121bc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	3308      	adds	r3, #8
 80121c6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80121ca:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80121ce:	1d1a      	adds	r2, r3, #4
 80121d0:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80121da:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80121de:	09db      	lsrs	r3, r3, #7
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	00db      	lsls	r3, r3, #3
 80121e4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80121e8:	4413      	add	r3, r2
 80121ea:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80121ee:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121f8:	4a01      	ldr	r2, [pc, #4]	; (8012200 <luaV_execute+0x460>)
 80121fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121fe:	e6a1      	b.n	8011f44 <luaV_execute+0x1a4>
 8012200:	08022d3c 	.word	0x08022d3c
      }
      vmcase(OP_LOADKX) {
        TValue *rb;
        rb = k + GETARG_Ax(*pc); pc++;
 8012204:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	09db      	lsrs	r3, r3, #7
 801220c:	00da      	lsls	r2, r3, #3
 801220e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012212:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8012216:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 801221a:	440a      	add	r2, r1
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012222:	3304      	adds	r3, #4
 8012224:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        setobj2s(L, ra, rb);
 8012228:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801222c:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8012230:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012234:	601a      	str	r2, [r3, #0]
 8012236:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801223a:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801223e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012242:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 8012246:	6812      	ldr	r2, [r2, #0]
 8012248:	601a      	str	r2, [r3, #0]
 801224a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801224e:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012258:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 801225c:	6812      	ldr	r2, [r2, #0]
 801225e:	6812      	ldr	r2, [r2, #0]
 8012260:	601a      	str	r2, [r3, #0]
 8012262:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012266:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	791a      	ldrb	r2, [r3, #4]
 801226e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012272:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801227a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801227e:	2b00      	cmp	r3, #0
 8012280:	bf14      	ite	ne
 8012282:	2301      	movne	r3, #1
 8012284:	2300      	moveq	r3, #0
 8012286:	b2db      	uxtb	r3, r3
 8012288:	2b00      	cmp	r3, #0
 801228a:	d013      	beq.n	80122b4 <luaV_execute+0x514>
 801228c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012290:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012294:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012298:	6818      	ldr	r0, [r3, #0]
 801229a:	f7f6 ff1f 	bl	80090dc <luaG_traceexec>
 801229e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80122a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80122a6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	3308      	adds	r3, #8
 80122b0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80122b4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80122b8:	1d1a      	adds	r2, r3, #4
 80122ba:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80122c4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80122c8:	09db      	lsrs	r3, r3, #7
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	00db      	lsls	r3, r3, #3
 80122ce:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80122d2:	4413      	add	r3, r2
 80122d4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80122d8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122e2:	4abd      	ldr	r2, [pc, #756]	; (80125d8 <luaV_execute+0x838>)
 80122e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122e8:	e62c      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADFALSE) {
        setbfvalue(s2v(ra));
 80122ea:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80122ee:	2201      	movs	r2, #1
 80122f0:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80122f2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	bf14      	ite	ne
 80122fa:	2301      	movne	r3, #1
 80122fc:	2300      	moveq	r3, #0
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	2b00      	cmp	r3, #0
 8012302:	d013      	beq.n	801232c <luaV_execute+0x58c>
 8012304:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012308:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801230c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012310:	6818      	ldr	r0, [r3, #0]
 8012312:	f7f6 fee3 	bl	80090dc <luaG_traceexec>
 8012316:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801231a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801231e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	3308      	adds	r3, #8
 8012328:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801232c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012330:	1d1a      	adds	r2, r3, #4
 8012332:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801233c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012340:	09db      	lsrs	r3, r3, #7
 8012342:	b2db      	uxtb	r3, r3
 8012344:	00db      	lsls	r3, r3, #3
 8012346:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801234a:	4413      	add	r3, r2
 801234c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012350:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012354:	b2db      	uxtb	r3, r3
 8012356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801235a:	4a9f      	ldr	r2, [pc, #636]	; (80125d8 <luaV_execute+0x838>)
 801235c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012360:	e5f0      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LFALSESKIP) {
        setbfvalue(s2v(ra));
 8012362:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8012366:	2201      	movs	r2, #1
 8012368:	711a      	strb	r2, [r3, #4]
        pc++;  /* skip next instruction */
 801236a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801236e:	3304      	adds	r3, #4
 8012370:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        vmbreak;
 8012374:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012378:	2b00      	cmp	r3, #0
 801237a:	bf14      	ite	ne
 801237c:	2301      	movne	r3, #1
 801237e:	2300      	moveq	r3, #0
 8012380:	b2db      	uxtb	r3, r3
 8012382:	2b00      	cmp	r3, #0
 8012384:	d013      	beq.n	80123ae <luaV_execute+0x60e>
 8012386:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801238a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801238e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012392:	6818      	ldr	r0, [r3, #0]
 8012394:	f7f6 fea2 	bl	80090dc <luaG_traceexec>
 8012398:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801239c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80123a0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	3308      	adds	r3, #8
 80123aa:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80123ae:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80123b2:	1d1a      	adds	r2, r3, #4
 80123b4:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80123be:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80123c2:	09db      	lsrs	r3, r3, #7
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	00db      	lsls	r3, r3, #3
 80123c8:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80123cc:	4413      	add	r3, r2
 80123ce:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80123d2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123dc:	4a7e      	ldr	r2, [pc, #504]	; (80125d8 <luaV_execute+0x838>)
 80123de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123e2:	e5af      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADTRUE) {
        setbtvalue(s2v(ra));
 80123e4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80123e8:	2211      	movs	r2, #17
 80123ea:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80123ec:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	bf14      	ite	ne
 80123f4:	2301      	movne	r3, #1
 80123f6:	2300      	moveq	r3, #0
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d013      	beq.n	8012426 <luaV_execute+0x686>
 80123fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012402:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012406:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801240a:	6818      	ldr	r0, [r3, #0]
 801240c:	f7f6 fe66 	bl	80090dc <luaG_traceexec>
 8012410:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012414:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012418:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	3308      	adds	r3, #8
 8012422:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012426:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801242a:	1d1a      	adds	r2, r3, #4
 801242c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012436:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801243a:	09db      	lsrs	r3, r3, #7
 801243c:	b2db      	uxtb	r3, r3
 801243e:	00db      	lsls	r3, r3, #3
 8012440:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012444:	4413      	add	r3, r2
 8012446:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801244a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801244e:	b2db      	uxtb	r3, r3
 8012450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012454:	4a60      	ldr	r2, [pc, #384]	; (80125d8 <luaV_execute+0x838>)
 8012456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801245a:	e573      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LOADNIL) {
        int b = GETARG_B(i);
 801245c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012460:	0c1b      	lsrs	r3, r3, #16
 8012462:	b2db      	uxtb	r3, r3
 8012464:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
        do {
          setnilvalue(s2v(ra++));
 8012468:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801246c:	f103 0208 	add.w	r2, r3, #8
 8012470:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 8012474:	2200      	movs	r2, #0
 8012476:	711a      	strb	r2, [r3, #4]
        } while (b--);
 8012478:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 801247c:	1e5a      	subs	r2, r3, #1
 801247e:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 8012482:	2b00      	cmp	r3, #0
 8012484:	d1f0      	bne.n	8012468 <luaV_execute+0x6c8>
        vmbreak;
 8012486:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801248a:	2b00      	cmp	r3, #0
 801248c:	bf14      	ite	ne
 801248e:	2301      	movne	r3, #1
 8012490:	2300      	moveq	r3, #0
 8012492:	b2db      	uxtb	r3, r3
 8012494:	2b00      	cmp	r3, #0
 8012496:	d013      	beq.n	80124c0 <luaV_execute+0x720>
 8012498:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801249c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80124a0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80124a4:	6818      	ldr	r0, [r3, #0]
 80124a6:	f7f6 fe19 	bl	80090dc <luaG_traceexec>
 80124aa:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80124ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80124b2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	3308      	adds	r3, #8
 80124bc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80124c0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80124c4:	1d1a      	adds	r2, r3, #4
 80124c6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80124d0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80124d4:	09db      	lsrs	r3, r3, #7
 80124d6:	b2db      	uxtb	r3, r3
 80124d8:	00db      	lsls	r3, r3, #3
 80124da:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80124de:	4413      	add	r3, r2
 80124e0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80124e4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124ee:	4a3a      	ldr	r2, [pc, #232]	; (80125d8 <luaV_execute+0x838>)
 80124f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124f4:	e526      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETUPVAL) {
        int b = GETARG_B(i);
 80124f6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80124fa:	0c1b      	lsrs	r3, r3, #16
 80124fc:	461a      	mov	r2, r3
 80124fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012502:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8012506:	b2d2      	uxtb	r2, r2
 8012508:	601a      	str	r2, [r3, #0]
        setobj2s(L, ra, cl->upvals[b]->v);
 801250a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801250e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8012512:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012516:	601a      	str	r2, [r3, #0]
 8012518:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 801251c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012520:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 8012524:	6812      	ldr	r2, [r2, #0]
 8012526:	3204      	adds	r2, #4
 8012528:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801252c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012530:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8012534:	6892      	ldr	r2, [r2, #8]
 8012536:	601a      	str	r2, [r3, #0]
 8012538:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801253c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012546:	f2a2 42f4 	subw	r2, r2, #1268	; 0x4f4
 801254a:	6812      	ldr	r2, [r2, #0]
 801254c:	6812      	ldr	r2, [r2, #0]
 801254e:	601a      	str	r2, [r3, #0]
 8012550:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012554:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	791a      	ldrb	r2, [r3, #4]
 801255c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012560:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8012568:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801256c:	2b00      	cmp	r3, #0
 801256e:	bf14      	ite	ne
 8012570:	2301      	movne	r3, #1
 8012572:	2300      	moveq	r3, #0
 8012574:	b2db      	uxtb	r3, r3
 8012576:	2b00      	cmp	r3, #0
 8012578:	d013      	beq.n	80125a2 <luaV_execute+0x802>
 801257a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801257e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012582:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012586:	6818      	ldr	r0, [r3, #0]
 8012588:	f7f6 fda8 	bl	80090dc <luaG_traceexec>
 801258c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012590:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012594:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	3308      	adds	r3, #8
 801259e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80125a2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80125a6:	1d1a      	adds	r2, r3, #4
 80125a8:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80125b2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80125b6:	09db      	lsrs	r3, r3, #7
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	00db      	lsls	r3, r3, #3
 80125bc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80125c0:	4413      	add	r3, r2
 80125c2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80125c6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125d0:	4a01      	ldr	r2, [pc, #4]	; (80125d8 <luaV_execute+0x838>)
 80125d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125d6:	e4b5      	b.n	8011f44 <luaV_execute+0x1a4>
 80125d8:	08022d3c 	.word	0x08022d3c
      }
      vmcase(OP_SETUPVAL) {
        UpVal *uv = cl->upvals[GETARG_B(i)];
 80125dc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80125e0:	0c1b      	lsrs	r3, r3, #16
 80125e2:	b2d9      	uxtb	r1, r3
 80125e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80125e8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80125ec:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 80125f0:	3104      	adds	r1, #4
 80125f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80125f6:	601a      	str	r2, [r3, #0]
        setobj(L, uv->v, s2v(ra));
 80125f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80125fc:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8012600:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012604:	f5a2 629c 	sub.w	r2, r2, #1248	; 0x4e0
 8012608:	6812      	ldr	r2, [r2, #0]
 801260a:	6892      	ldr	r2, [r2, #8]
 801260c:	601a      	str	r2, [r3, #0]
 801260e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012612:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8012616:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801261a:	601a      	str	r2, [r3, #0]
 801261c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012620:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801262a:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 801262e:	6812      	ldr	r2, [r2, #0]
 8012630:	6812      	ldr	r2, [r2, #0]
 8012632:	601a      	str	r2, [r3, #0]
 8012634:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012638:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	791a      	ldrb	r2, [r3, #4]
 8012640:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012644:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	711a      	strb	r2, [r3, #4]
        luaC_barrier(L, uv, s2v(ra));
 801264c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8012650:	791b      	ldrb	r3, [r3, #4]
 8012652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012656:	2b00      	cmp	r3, #0
 8012658:	d020      	beq.n	801269c <luaV_execute+0x8fc>
 801265a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801265e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	795b      	ldrb	r3, [r3, #5]
 8012666:	f003 0320 	and.w	r3, r3, #32
 801266a:	2b00      	cmp	r3, #0
 801266c:	d016      	beq.n	801269c <luaV_execute+0x8fc>
 801266e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	795b      	ldrb	r3, [r3, #5]
 8012676:	f003 0318 	and.w	r3, r3, #24
 801267a:	2b00      	cmp	r3, #0
 801267c:	d00e      	beq.n	801269c <luaV_execute+0x8fc>
 801267e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012682:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8012686:	6819      	ldr	r1, [r3, #0]
 8012688:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801268c:	681a      	ldr	r2, [r3, #0]
 801268e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012692:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012696:	6818      	ldr	r0, [r3, #0]
 8012698:	f7f8 f90e 	bl	800a8b8 <luaC_barrier_>
        vmbreak;
 801269c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	bf14      	ite	ne
 80126a4:	2301      	movne	r3, #1
 80126a6:	2300      	moveq	r3, #0
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d013      	beq.n	80126d6 <luaV_execute+0x936>
 80126ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80126b2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80126b6:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80126ba:	6818      	ldr	r0, [r3, #0]
 80126bc:	f7f6 fd0e 	bl	80090dc <luaG_traceexec>
 80126c0:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80126c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80126c8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	3308      	adds	r3, #8
 80126d2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80126d6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80126da:	1d1a      	adds	r2, r3, #4
 80126dc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80126e6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80126ea:	09db      	lsrs	r3, r3, #7
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	00db      	lsls	r3, r3, #3
 80126f0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80126f4:	4413      	add	r3, r2
 80126f6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80126fa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012704:	4ab5      	ldr	r2, [pc, #724]	; (80129dc <luaV_execute+0xc3c>)
 8012706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801270a:	e41b      	b.n	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_B(i)]->v;
 801270c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012710:	0c1b      	lsrs	r3, r3, #16
 8012712:	b2da      	uxtb	r2, r3
 8012714:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8012718:	3204      	adds	r2, #4
 801271a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801271e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012722:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8012726:	6892      	ldr	r2, [r2, #8]
 8012728:	601a      	str	r2, [r3, #0]
        TValue *rc = KC(i);
 801272a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801272e:	0e1b      	lsrs	r3, r3, #24
 8012730:	00da      	lsls	r2, r3, #3
 8012732:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012736:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801273a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 801273e:	440a      	add	r2, r1
 8012740:	601a      	str	r2, [r3, #0]
        TString *key = tsvalue(rc);  /* key must be a string */
 8012742:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012746:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012752:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8012756:	601a      	str	r2, [r3, #0]
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
 8012758:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801275c:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	791b      	ldrb	r3, [r3, #4]
 8012764:	2b45      	cmp	r3, #69	; 0x45
 8012766:	d004      	beq.n	8012772 <luaV_execute+0x9d2>
 8012768:	2300      	movs	r3, #0
 801276a:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 801276e:	2300      	movs	r3, #0
 8012770:	e01a      	b.n	80127a8 <luaV_execute+0xa08>
 8012772:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012776:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	461a      	mov	r2, r3
 8012780:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012784:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8012788:	6819      	ldr	r1, [r3, #0]
 801278a:	4610      	mov	r0, r2
 801278c:	f7fd f85a 	bl	800f844 <luaH_getshortstr>
 8012790:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
 8012794:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8012798:	791b      	ldrb	r3, [r3, #4]
 801279a:	f003 030f 	and.w	r3, r3, #15
 801279e:	2b00      	cmp	r3, #0
 80127a0:	bf14      	ite	ne
 80127a2:	2301      	movne	r3, #1
 80127a4:	2300      	moveq	r3, #0
 80127a6:	b2db      	uxtb	r3, r3
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d026      	beq.n	80127fa <luaV_execute+0xa5a>
          setobj2s(L, ra, slot);
 80127ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80127b0:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80127b4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80127b8:	601a      	str	r2, [r3, #0]
 80127ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80127be:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 80127c2:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 80127c6:	601a      	str	r2, [r3, #0]
 80127c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80127cc:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80127d6:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 80127da:	6812      	ldr	r2, [r2, #0]
 80127dc:	6812      	ldr	r2, [r2, #0]
 80127de:	601a      	str	r2, [r3, #0]
 80127e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80127e4:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	791a      	ldrb	r2, [r3, #4]
 80127ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80127f0:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	711a      	strb	r2, [r3, #4]
 80127f8:	e031      	b.n	801285e <luaV_execute+0xabe>
        }
        else
          Protect(luaV_finishget(L, upval, rc, ra, slot));
 80127fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80127fe:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8012808:	611a      	str	r2, [r3, #16]
 801280a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801280e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	685a      	ldr	r2, [r3, #4]
 8012816:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801281a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	60da      	str	r2, [r3, #12]
 8012822:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012826:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 801282a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801282e:	f2a3 41cc 	subw	r1, r3, #1228	; 0x4cc
 8012832:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012836:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 801283a:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 801283e:	9300      	str	r3, [sp, #0]
 8012840:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8012844:	6812      	ldr	r2, [r2, #0]
 8012846:	6809      	ldr	r1, [r1, #0]
 8012848:	6800      	ldr	r0, [r0, #0]
 801284a:	f7fe fa63 	bl	8010d14 <luaV_finishget>
 801284e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012852:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	695b      	ldr	r3, [r3, #20]
 801285a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801285e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012862:	2b00      	cmp	r3, #0
 8012864:	bf14      	ite	ne
 8012866:	2301      	movne	r3, #1
 8012868:	2300      	moveq	r3, #0
 801286a:	b2db      	uxtb	r3, r3
 801286c:	2b00      	cmp	r3, #0
 801286e:	d013      	beq.n	8012898 <luaV_execute+0xaf8>
 8012870:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012874:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012878:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801287c:	6818      	ldr	r0, [r3, #0]
 801287e:	f7f6 fc2d 	bl	80090dc <luaG_traceexec>
 8012882:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012886:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801288a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	3308      	adds	r3, #8
 8012894:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012898:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801289c:	1d1a      	adds	r2, r3, #4
 801289e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80128a8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80128ac:	09db      	lsrs	r3, r3, #7
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80128b6:	4413      	add	r3, r2
 80128b8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80128bc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128c6:	4a45      	ldr	r2, [pc, #276]	; (80129dc <luaV_execute+0xc3c>)
 80128c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128cc:	f7ff bb3a 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETTABLE) {
        const TValue *slot;
        TValue *rb = vRB(i);
 80128d0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80128d4:	0c1b      	lsrs	r3, r3, #16
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	00db      	lsls	r3, r3, #3
 80128da:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80128de:	441a      	add	r2, r3
 80128e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80128e4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80128e8:	601a      	str	r2, [r3, #0]
        TValue *rc = vRC(i);
 80128ea:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80128ee:	0e1b      	lsrs	r3, r3, #24
 80128f0:	00db      	lsls	r3, r3, #3
 80128f2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80128f6:	441a      	add	r2, r3
 80128f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80128fc:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8012900:	601a      	str	r2, [r3, #0]
        lua_Unsigned n;
        if (ttisinteger(rc)  /* fast track for integers? */
 8012902:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012906:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	791b      	ldrb	r3, [r3, #4]
 801290e:	2b03      	cmp	r3, #3
 8012910:	d156      	bne.n	80129c0 <luaV_execute+0xc20>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
 8012912:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012916:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012922:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8012926:	601a      	str	r2, [r3, #0]
 8012928:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801292c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	791b      	ldrb	r3, [r3, #4]
        if (ttisinteger(rc)  /* fast track for integers? */
 8012934:	2b45      	cmp	r3, #69	; 0x45
 8012936:	d004      	beq.n	8012942 <luaV_execute+0xba2>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
 8012938:	2300      	movs	r3, #0
 801293a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
        if (ttisinteger(rc)  /* fast track for integers? */
 801293e:	2300      	movs	r3, #0
 8012940:	e069      	b.n	8012a16 <luaV_execute+0xc76>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
 8012942:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012946:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	1e5a      	subs	r2, r3, #1
 801294e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012952:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	689b      	ldr	r3, [r3, #8]
 801295c:	429a      	cmp	r2, r3
 801295e:	d211      	bcs.n	8012984 <luaV_execute+0xbe4>
 8012960:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012964:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	68da      	ldr	r2, [r3, #12]
 801296e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012972:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801297c:	3b01      	subs	r3, #1
 801297e:	00db      	lsls	r3, r3, #3
 8012980:	4413      	add	r3, r2
 8012982:	e010      	b.n	80129a6 <luaV_execute+0xc06>
 8012984:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012988:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	461a      	mov	r2, r3
 8012992:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012996:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	4619      	mov	r1, r3
 801299e:	4610      	mov	r0, r2
 80129a0:	f7fc fef0 	bl	800f784 <luaH_getint>
 80129a4:	4603      	mov	r3, r0
 80129a6:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 80129aa:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80129ae:	791b      	ldrb	r3, [r3, #4]
 80129b0:	f003 030f 	and.w	r3, r3, #15
        if (ttisinteger(rc)  /* fast track for integers? */
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	bf14      	ite	ne
 80129b8:	2301      	movne	r3, #1
 80129ba:	2300      	moveq	r3, #0
 80129bc:	b2db      	uxtb	r3, r3
 80129be:	e02a      	b.n	8012a16 <luaV_execute+0xc76>
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
 80129c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80129c4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	791b      	ldrb	r3, [r3, #4]
        if (ttisinteger(rc)  /* fast track for integers? */
 80129cc:	2b45      	cmp	r3, #69	; 0x45
 80129ce:	d007      	beq.n	80129e0 <luaV_execute+0xc40>
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
 80129d0:	2300      	movs	r3, #0
 80129d2:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
        if (ttisinteger(rc)  /* fast track for integers? */
 80129d6:	2300      	movs	r3, #0
 80129d8:	e01d      	b.n	8012a16 <luaV_execute+0xc76>
 80129da:	bf00      	nop
 80129dc:	08022d3c 	.word	0x08022d3c
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
 80129e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80129e4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	461a      	mov	r2, r3
 80129ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80129f2:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80129f6:	6819      	ldr	r1, [r3, #0]
 80129f8:	4610      	mov	r0, r2
 80129fa:	f7fc ff83 	bl	800f904 <luaH_get>
 80129fe:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
 8012a02:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8012a06:	791b      	ldrb	r3, [r3, #4]
 8012a08:	f003 030f 	and.w	r3, r3, #15
        if (ttisinteger(rc)  /* fast track for integers? */
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	bf14      	ite	ne
 8012a10:	2301      	movne	r3, #1
 8012a12:	2300      	moveq	r3, #0
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d026      	beq.n	8012a68 <luaV_execute+0xcc8>
          setobj2s(L, ra, slot);
 8012a1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a1e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8012a22:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012a26:	601a      	str	r2, [r3, #0]
 8012a28:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a2c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8012a30:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8012a34:	601a      	str	r2, [r3, #0]
 8012a36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a3a:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012a44:	f5a2 6299 	sub.w	r2, r2, #1224	; 0x4c8
 8012a48:	6812      	ldr	r2, [r2, #0]
 8012a4a:	6812      	ldr	r2, [r2, #0]
 8012a4c:	601a      	str	r2, [r3, #0]
 8012a4e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a52:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	791a      	ldrb	r2, [r3, #4]
 8012a5a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a5e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	711a      	strb	r2, [r3, #4]
 8012a66:	e031      	b.n	8012acc <luaV_execute+0xd2c>
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
 8012a68:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a6c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8012a76:	611a      	str	r2, [r3, #16]
 8012a78:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a7c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	685a      	ldr	r2, [r3, #4]
 8012a84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a88:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	60da      	str	r2, [r3, #12]
 8012a90:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a94:	f2a3 42bc 	subw	r2, r3, #1212	; 0x4bc
 8012a98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012a9c:	f5a3 6197 	sub.w	r1, r3, #1208	; 0x4b8
 8012aa0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012aa4:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8012aa8:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8012aac:	9300      	str	r3, [sp, #0]
 8012aae:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8012ab2:	6812      	ldr	r2, [r2, #0]
 8012ab4:	6809      	ldr	r1, [r1, #0]
 8012ab6:	6800      	ldr	r0, [r0, #0]
 8012ab8:	f7fe f92c 	bl	8010d14 <luaV_finishget>
 8012abc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ac0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	695b      	ldr	r3, [r3, #20]
 8012ac8:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8012acc:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	bf14      	ite	ne
 8012ad4:	2301      	movne	r3, #1
 8012ad6:	2300      	moveq	r3, #0
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d013      	beq.n	8012b06 <luaV_execute+0xd66>
 8012ade:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ae2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012ae6:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012aea:	6818      	ldr	r0, [r3, #0]
 8012aec:	f7f6 faf6 	bl	80090dc <luaG_traceexec>
 8012af0:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012af4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012af8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	3308      	adds	r3, #8
 8012b02:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012b06:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012b0a:	1d1a      	adds	r2, r3, #4
 8012b0c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012b16:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012b1a:	09db      	lsrs	r3, r3, #7
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	00db      	lsls	r3, r3, #3
 8012b20:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012b24:	4413      	add	r3, r2
 8012b26:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012b2a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b34:	4ac1      	ldr	r2, [pc, #772]	; (8012e3c <luaV_execute+0x109c>)
 8012b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b3a:	f7ff ba03 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETI) {
        const TValue *slot;
        TValue *rb = vRB(i);
 8012b3e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012b42:	0c1b      	lsrs	r3, r3, #16
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	00db      	lsls	r3, r3, #3
 8012b48:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012b4c:	441a      	add	r2, r3
 8012b4e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b52:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8012b56:	601a      	str	r2, [r3, #0]
        int c = GETARG_C(i);
 8012b58:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012b5c:	0e1a      	lsrs	r2, r3, #24
 8012b5e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b62:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8012b66:	601a      	str	r2, [r3, #0]
        if (luaV_fastgeti(L, rb, c, slot)) {
 8012b68:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b6c:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	791b      	ldrb	r3, [r3, #4]
 8012b74:	2b45      	cmp	r3, #69	; 0x45
 8012b76:	d004      	beq.n	8012b82 <luaV_execute+0xde2>
 8012b78:	2300      	movs	r3, #0
 8012b7a:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8012b7e:	2300      	movs	r3, #0
 8012b80:	e03c      	b.n	8012bfc <luaV_execute+0xe5c>
 8012b82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b86:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	1e5a      	subs	r2, r3, #1
 8012b8e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012b92:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	689b      	ldr	r3, [r3, #8]
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d211      	bcs.n	8012bc4 <luaV_execute+0xe24>
 8012ba0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ba4:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	68da      	ldr	r2, [r3, #12]
 8012bae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012bb2:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8012bbc:	3b01      	subs	r3, #1
 8012bbe:	00db      	lsls	r3, r3, #3
 8012bc0:	4413      	add	r3, r2
 8012bc2:	e00f      	b.n	8012be4 <luaV_execute+0xe44>
 8012bc4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012bc8:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012bd6:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8012bda:	6819      	ldr	r1, [r3, #0]
 8012bdc:	4610      	mov	r0, r2
 8012bde:	f7fc fdd1 	bl	800f784 <luaH_getint>
 8012be2:	4603      	mov	r3, r0
 8012be4:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8012be8:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8012bec:	791b      	ldrb	r3, [r3, #4]
 8012bee:	f003 030f 	and.w	r3, r3, #15
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	bf14      	ite	ne
 8012bf6:	2301      	movne	r3, #1
 8012bf8:	2300      	moveq	r3, #0
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d026      	beq.n	8012c4e <luaV_execute+0xeae>
          setobj2s(L, ra, slot);
 8012c00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c04:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8012c08:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012c0c:	601a      	str	r2, [r3, #0]
 8012c0e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c12:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8012c16:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8012c1a:	601a      	str	r2, [r3, #0]
 8012c1c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c20:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012c2a:	f2a2 42b4 	subw	r2, r2, #1204	; 0x4b4
 8012c2e:	6812      	ldr	r2, [r2, #0]
 8012c30:	6812      	ldr	r2, [r2, #0]
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c38:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	791a      	ldrb	r2, [r3, #4]
 8012c40:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c44:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	711a      	strb	r2, [r3, #4]
 8012c4c:	e047      	b.n	8012cde <luaV_execute+0xf3e>
        }
        else {
          TValue key;
          setivalue(&key, c);
 8012c4e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c52:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8012c56:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012c5a:	601a      	str	r2, [r3, #0]
 8012c5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c60:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012c6a:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8012c6e:	6812      	ldr	r2, [r2, #0]
 8012c70:	601a      	str	r2, [r3, #0]
 8012c72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c76:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2203      	movs	r2, #3
 8012c7e:	711a      	strb	r2, [r3, #4]
          Protect(luaV_finishget(L, rb, &key, ra, slot));
 8012c80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c84:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8012c8e:	611a      	str	r2, [r3, #16]
 8012c90:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012c94:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	685a      	ldr	r2, [r3, #4]
 8012c9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ca0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	60da      	str	r2, [r3, #12]
 8012ca8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012cac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012cb0:	f2a3 41a4 	subw	r1, r3, #1188	; 0x4a4
 8012cb4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012cb8:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8012cbc:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8012cc6:	6809      	ldr	r1, [r1, #0]
 8012cc8:	6800      	ldr	r0, [r0, #0]
 8012cca:	f7fe f823 	bl	8010d14 <luaV_finishget>
 8012cce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012cd2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	695b      	ldr	r3, [r3, #20]
 8012cda:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        }
        vmbreak;
 8012cde:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	bf14      	ite	ne
 8012ce6:	2301      	movne	r3, #1
 8012ce8:	2300      	moveq	r3, #0
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d013      	beq.n	8012d18 <luaV_execute+0xf78>
 8012cf0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012cf4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012cf8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012cfc:	6818      	ldr	r0, [r3, #0]
 8012cfe:	f7f6 f9ed 	bl	80090dc <luaG_traceexec>
 8012d02:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012d06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d0a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	3308      	adds	r3, #8
 8012d14:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012d18:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012d1c:	1d1a      	adds	r2, r3, #4
 8012d1e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012d28:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d2c:	09db      	lsrs	r3, r3, #7
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	00db      	lsls	r3, r3, #3
 8012d32:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012d36:	4413      	add	r3, r2
 8012d38:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012d3c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d46:	4a3d      	ldr	r2, [pc, #244]	; (8012e3c <luaV_execute+0x109c>)
 8012d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d4c:	f7ff b8fa 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_GETFIELD) {
        const TValue *slot;
        TValue *rb = vRB(i);
 8012d50:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d54:	0c1b      	lsrs	r3, r3, #16
 8012d56:	b2db      	uxtb	r3, r3
 8012d58:	00db      	lsls	r3, r3, #3
 8012d5a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012d5e:	441a      	add	r2, r3
 8012d60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d64:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8012d68:	601a      	str	r2, [r3, #0]
        TValue *rc = KC(i);
 8012d6a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d6e:	0e1b      	lsrs	r3, r3, #24
 8012d70:	00da      	lsls	r2, r3, #3
 8012d72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d76:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8012d7a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8012d7e:	440a      	add	r2, r1
 8012d80:	601a      	str	r2, [r3, #0]
        TString *key = tsvalue(rc);  /* key must be a string */
 8012d82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d86:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	681a      	ldr	r2, [r3, #0]
 8012d8e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d92:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8012d96:	601a      	str	r2, [r3, #0]
        if (luaV_fastget(L, rb, key, slot, luaH_getshortstr)) {
 8012d98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012d9c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	791b      	ldrb	r3, [r3, #4]
 8012da4:	2b45      	cmp	r3, #69	; 0x45
 8012da6:	d004      	beq.n	8012db2 <luaV_execute+0x1012>
 8012da8:	2300      	movs	r3, #0
 8012daa:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
 8012dae:	2300      	movs	r3, #0
 8012db0:	e01a      	b.n	8012de8 <luaV_execute+0x1048>
 8012db2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012db6:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012dc4:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8012dc8:	6819      	ldr	r1, [r3, #0]
 8012dca:	4610      	mov	r0, r2
 8012dcc:	f7fc fd3a 	bl	800f844 <luaH_getshortstr>
 8012dd0:	f8c7 0558 	str.w	r0, [r7, #1368]	; 0x558
 8012dd4:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8012dd8:	791b      	ldrb	r3, [r3, #4]
 8012dda:	f003 030f 	and.w	r3, r3, #15
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	bf14      	ite	ne
 8012de2:	2301      	movne	r3, #1
 8012de4:	2300      	moveq	r3, #0
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d029      	beq.n	8012e40 <luaV_execute+0x10a0>
          setobj2s(L, ra, slot);
 8012dec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012df0:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8012df4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012df8:	601a      	str	r2, [r3, #0]
 8012dfa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012dfe:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8012e02:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 8012e06:	601a      	str	r2, [r3, #0]
 8012e08:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e0c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012e16:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 8012e1a:	6812      	ldr	r2, [r2, #0]
 8012e1c:	6812      	ldr	r2, [r2, #0]
 8012e1e:	601a      	str	r2, [r3, #0]
 8012e20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e24:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	791a      	ldrb	r2, [r3, #4]
 8012e2c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e30:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	711a      	strb	r2, [r3, #4]
 8012e38:	e034      	b.n	8012ea4 <luaV_execute+0x1104>
 8012e3a:	bf00      	nop
 8012e3c:	08022d3c 	.word	0x08022d3c
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
 8012e40:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e44:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8012e4e:	611a      	str	r2, [r3, #16]
 8012e50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e54:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	685a      	ldr	r2, [r3, #4]
 8012e5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e60:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	60da      	str	r2, [r3, #12]
 8012e68:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e6c:	f2a3 4294 	subw	r2, r3, #1172	; 0x494
 8012e70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e74:	f5a3 6192 	sub.w	r1, r3, #1168	; 0x490
 8012e78:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e7c:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8012e80:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8012e84:	9300      	str	r3, [sp, #0]
 8012e86:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8012e8a:	6812      	ldr	r2, [r2, #0]
 8012e8c:	6809      	ldr	r1, [r1, #0]
 8012e8e:	6800      	ldr	r0, [r0, #0]
 8012e90:	f7fd ff40 	bl	8010d14 <luaV_finishget>
 8012e94:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012e98:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	695b      	ldr	r3, [r3, #20]
 8012ea0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8012ea4:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	bf14      	ite	ne
 8012eac:	2301      	movne	r3, #1
 8012eae:	2300      	moveq	r3, #0
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d013      	beq.n	8012ede <luaV_execute+0x113e>
 8012eb6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012eba:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012ebe:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8012ec2:	6818      	ldr	r0, [r3, #0]
 8012ec4:	f7f6 f90a 	bl	80090dc <luaG_traceexec>
 8012ec8:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8012ecc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ed0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	3308      	adds	r3, #8
 8012eda:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8012ede:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8012ee2:	1d1a      	adds	r2, r3, #4
 8012ee4:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8012eee:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012ef2:	09db      	lsrs	r3, r3, #7
 8012ef4:	b2db      	uxtb	r3, r3
 8012ef6:	00db      	lsls	r3, r3, #3
 8012ef8:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012efc:	4413      	add	r3, r2
 8012efe:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012f02:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f0c:	4abc      	ldr	r2, [pc, #752]	; (8013200 <luaV_execute+0x1460>)
 8012f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f12:	f7ff b817 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_A(i)]->v;
 8012f16:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012f1a:	09db      	lsrs	r3, r3, #7
 8012f1c:	b2da      	uxtb	r2, r3
 8012f1e:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8012f22:	3204      	adds	r2, #4
 8012f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012f28:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f2c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8012f30:	6892      	ldr	r2, [r2, #8]
 8012f32:	601a      	str	r2, [r3, #0]
        TValue *rb = KB(i);
 8012f34:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012f38:	0c1b      	lsrs	r3, r3, #16
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	00da      	lsls	r2, r3, #3
 8012f3e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f42:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8012f46:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8012f4a:	440a      	add	r2, r1
 8012f4c:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);
 8012f4e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d007      	beq.n	8012f6a <luaV_execute+0x11ca>
 8012f5a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012f5e:	0e1b      	lsrs	r3, r3, #24
 8012f60:	00db      	lsls	r3, r3, #3
 8012f62:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8012f66:	4413      	add	r3, r2
 8012f68:	e006      	b.n	8012f78 <luaV_execute+0x11d8>
 8012f6a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012f6e:	0e1b      	lsrs	r3, r3, #24
 8012f70:	00db      	lsls	r3, r3, #3
 8012f72:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8012f76:	4413      	add	r3, r2
 8012f78:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8012f7c:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8012f80:	6013      	str	r3, [r2, #0]
        TString *key = tsvalue(rb);  /* key must be a string */
 8012f82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f86:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f92:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8012f96:	601a      	str	r2, [r3, #0]
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
 8012f98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012f9c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	791b      	ldrb	r3, [r3, #4]
 8012fa4:	2b45      	cmp	r3, #69	; 0x45
 8012fa6:	d004      	beq.n	8012fb2 <luaV_execute+0x1212>
 8012fa8:	2300      	movs	r3, #0
 8012faa:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8012fae:	2300      	movs	r3, #0
 8012fb0:	e01a      	b.n	8012fe8 <luaV_execute+0x1248>
 8012fb2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012fb6:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012fc4:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8012fc8:	6819      	ldr	r1, [r3, #0]
 8012fca:	4610      	mov	r0, r2
 8012fcc:	f7fc fc3a 	bl	800f844 <luaH_getshortstr>
 8012fd0:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
 8012fd4:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8012fd8:	791b      	ldrb	r3, [r3, #4]
 8012fda:	f003 030f 	and.w	r3, r3, #15
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	bf14      	ite	ne
 8012fe2:	2301      	movne	r3, #1
 8012fe4:	2300      	moveq	r3, #0
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d057      	beq.n	801309c <luaV_execute+0x12fc>
          luaV_finishfastset(L, upval, slot, rc);
 8012fec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ff0:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8012ff4:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8012ff8:	601a      	str	r2, [r3, #0]
 8012ffa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8012ffe:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8013002:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013006:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 801300a:	6812      	ldr	r2, [r2, #0]
 801300c:	601a      	str	r2, [r3, #0]
 801300e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013012:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801301c:	f2a2 428c 	subw	r2, r2, #1164	; 0x48c
 8013020:	6812      	ldr	r2, [r2, #0]
 8013022:	6812      	ldr	r2, [r2, #0]
 8013024:	601a      	str	r2, [r3, #0]
 8013026:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801302a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	791a      	ldrb	r2, [r3, #4]
 8013032:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013036:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	711a      	strb	r2, [r3, #4]
 801303e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013042:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	791b      	ldrb	r3, [r3, #4]
 801304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801304e:	2b00      	cmp	r3, #0
 8013050:	d059      	beq.n	8013106 <luaV_execute+0x1366>
 8013052:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013056:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	795b      	ldrb	r3, [r3, #5]
 8013060:	f003 0320 	and.w	r3, r3, #32
 8013064:	2b00      	cmp	r3, #0
 8013066:	d04e      	beq.n	8013106 <luaV_execute+0x1366>
 8013068:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801306c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	795b      	ldrb	r3, [r3, #5]
 8013076:	f003 0318 	and.w	r3, r3, #24
 801307a:	2b00      	cmp	r3, #0
 801307c:	d043      	beq.n	8013106 <luaV_execute+0x1366>
 801307e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013082:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	681a      	ldr	r2, [r3, #0]
 801308a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801308e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013092:	4611      	mov	r1, r2
 8013094:	6818      	ldr	r0, [r3, #0]
 8013096:	f7f7 fc4f 	bl	800a938 <luaC_barrierback_>
 801309a:	e034      	b.n	8013106 <luaV_execute+0x1366>
        }
        else
          Protect(luaV_finishset(L, upval, rb, rc, slot));
 801309c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130a0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80130aa:	611a      	str	r2, [r3, #16]
 80130ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130b0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	685a      	ldr	r2, [r3, #4]
 80130b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130bc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	60da      	str	r2, [r3, #12]
 80130c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130c8:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80130cc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80130d0:	f2a2 427c 	subw	r2, r2, #1148	; 0x47c
 80130d4:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80130d8:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 80130dc:	f507 60b0 	add.w	r0, r7, #1408	; 0x580
 80130e0:	f2a0 507c 	subw	r0, r0, #1404	; 0x57c
 80130e4:	f8d7 4554 	ldr.w	r4, [r7, #1364]	; 0x554
 80130e8:	9400      	str	r4, [sp, #0]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	6812      	ldr	r2, [r2, #0]
 80130ee:	6809      	ldr	r1, [r1, #0]
 80130f0:	6800      	ldr	r0, [r0, #0]
 80130f2:	f7fd fea1 	bl	8010e38 <luaV_finishset>
 80130f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130fa:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	695b      	ldr	r3, [r3, #20]
 8013102:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8013106:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801310a:	2b00      	cmp	r3, #0
 801310c:	bf14      	ite	ne
 801310e:	2301      	movne	r3, #1
 8013110:	2300      	moveq	r3, #0
 8013112:	b2db      	uxtb	r3, r3
 8013114:	2b00      	cmp	r3, #0
 8013116:	d013      	beq.n	8013140 <luaV_execute+0x13a0>
 8013118:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801311c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013120:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013124:	6818      	ldr	r0, [r3, #0]
 8013126:	f7f5 ffd9 	bl	80090dc <luaG_traceexec>
 801312a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801312e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013132:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	3308      	adds	r3, #8
 801313c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013140:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013144:	1d1a      	adds	r2, r3, #4
 8013146:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013150:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013154:	09db      	lsrs	r3, r3, #7
 8013156:	b2db      	uxtb	r3, r3
 8013158:	00db      	lsls	r3, r3, #3
 801315a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801315e:	4413      	add	r3, r2
 8013160:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013164:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013168:	b2db      	uxtb	r3, r3
 801316a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801316e:	4a24      	ldr	r2, [pc, #144]	; (8013200 <luaV_execute+0x1460>)
 8013170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013174:	f7fe bee6 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETTABLE) {
        const TValue *slot;
        TValue *rb = vRB(i);  /* key (table is in 'ra') */
 8013178:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801317c:	0c1b      	lsrs	r3, r3, #16
 801317e:	b2db      	uxtb	r3, r3
 8013180:	00db      	lsls	r3, r3, #3
 8013182:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013186:	441a      	add	r2, r3
 8013188:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801318c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8013190:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);  /* value */
 8013192:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801319a:	2b00      	cmp	r3, #0
 801319c:	d007      	beq.n	80131ae <luaV_execute+0x140e>
 801319e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80131a2:	0e1b      	lsrs	r3, r3, #24
 80131a4:	00db      	lsls	r3, r3, #3
 80131a6:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 80131aa:	4413      	add	r3, r2
 80131ac:	e006      	b.n	80131bc <luaV_execute+0x141c>
 80131ae:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80131b2:	0e1b      	lsrs	r3, r3, #24
 80131b4:	00db      	lsls	r3, r3, #3
 80131b6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80131ba:	4413      	add	r3, r2
 80131bc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80131c0:	f5a2 628d 	sub.w	r2, r2, #1128	; 0x468
 80131c4:	6013      	str	r3, [r2, #0]
        lua_Unsigned n;
        if (ttisinteger(rb)  /* fast track for integers? */
 80131c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80131ca:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	791b      	ldrb	r3, [r3, #4]
 80131d2:	2b03      	cmp	r3, #3
 80131d4:	d14c      	bne.n	8013270 <luaV_execute+0x14d0>
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
 80131d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80131da:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80131e6:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80131ea:	601a      	str	r2, [r3, #0]
 80131ec:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80131f0:	791b      	ldrb	r3, [r3, #4]
        if (ttisinteger(rb)  /* fast track for integers? */
 80131f2:	2b45      	cmp	r3, #69	; 0x45
 80131f4:	d006      	beq.n	8013204 <luaV_execute+0x1464>
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
 80131f6:	2300      	movs	r3, #0
 80131f8:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
        if (ttisinteger(rb)  /* fast track for integers? */
 80131fc:	2300      	movs	r3, #0
 80131fe:	e059      	b.n	80132b4 <luaV_execute+0x1514>
 8013200:	08022d3c 	.word	0x08022d3c
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
 8013204:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013208:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	1e5a      	subs	r2, r3, #1
 8013210:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	689b      	ldr	r3, [r3, #8]
 8013218:	429a      	cmp	r2, r3
 801321a:	d20e      	bcs.n	801323a <luaV_execute+0x149a>
 801321c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	68da      	ldr	r2, [r3, #12]
 8013224:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013228:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8013232:	3b01      	subs	r3, #1
 8013234:	00db      	lsls	r3, r3, #3
 8013236:	4413      	add	r3, r2
 8013238:	e00d      	b.n	8013256 <luaV_execute+0x14b6>
 801323a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	461a      	mov	r2, r3
 8013242:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013246:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4619      	mov	r1, r3
 801324e:	4610      	mov	r0, r2
 8013250:	f7fc fa98 	bl	800f784 <luaH_getint>
 8013254:	4603      	mov	r3, r0
 8013256:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 801325a:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 801325e:	791b      	ldrb	r3, [r3, #4]
 8013260:	f003 030f 	and.w	r3, r3, #15
        if (ttisinteger(rb)  /* fast track for integers? */
 8013264:	2b00      	cmp	r3, #0
 8013266:	bf14      	ite	ne
 8013268:	2301      	movne	r3, #1
 801326a:	2300      	moveq	r3, #0
 801326c:	b2db      	uxtb	r3, r3
 801326e:	e021      	b.n	80132b4 <luaV_execute+0x1514>
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
 8013270:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013274:	791b      	ldrb	r3, [r3, #4]
        if (ttisinteger(rb)  /* fast track for integers? */
 8013276:	2b45      	cmp	r3, #69	; 0x45
 8013278:	d004      	beq.n	8013284 <luaV_execute+0x14e4>
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
 801327a:	2300      	movs	r3, #0
 801327c:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
        if (ttisinteger(rb)  /* fast track for integers? */
 8013280:	2300      	movs	r3, #0
 8013282:	e017      	b.n	80132b4 <luaV_execute+0x1514>
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
 8013284:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	461a      	mov	r2, r3
 801328c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013290:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8013294:	6819      	ldr	r1, [r3, #0]
 8013296:	4610      	mov	r0, r2
 8013298:	f7fc fb34 	bl	800f904 <luaH_get>
 801329c:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
 80132a0:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80132a4:	791b      	ldrb	r3, [r3, #4]
 80132a6:	f003 030f 	and.w	r3, r3, #15
        if (ttisinteger(rb)  /* fast track for integers? */
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	bf14      	ite	ne
 80132ae:	2301      	movne	r3, #1
 80132b0:	2300      	moveq	r3, #0
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d051      	beq.n	801335c <luaV_execute+0x15bc>
          luaV_finishfastset(L, s2v(ra), slot, rc);
 80132b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80132bc:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80132c0:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 80132c4:	601a      	str	r2, [r3, #0]
 80132c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80132ca:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80132ce:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80132d2:	f5a2 628d 	sub.w	r2, r2, #1128	; 0x468
 80132d6:	6812      	ldr	r2, [r2, #0]
 80132d8:	601a      	str	r2, [r3, #0]
 80132da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80132de:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80132e8:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 80132ec:	6812      	ldr	r2, [r2, #0]
 80132ee:	6812      	ldr	r2, [r2, #0]
 80132f0:	601a      	str	r2, [r3, #0]
 80132f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80132f6:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	791a      	ldrb	r2, [r3, #4]
 80132fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013302:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	711a      	strb	r2, [r3, #4]
 801330a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801330e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	791b      	ldrb	r3, [r3, #4]
 8013316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801331a:	2b00      	cmp	r3, #0
 801331c:	d051      	beq.n	80133c2 <luaV_execute+0x1622>
 801331e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	795b      	ldrb	r3, [r3, #5]
 8013326:	f003 0320 	and.w	r3, r3, #32
 801332a:	2b00      	cmp	r3, #0
 801332c:	d049      	beq.n	80133c2 <luaV_execute+0x1622>
 801332e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013332:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	795b      	ldrb	r3, [r3, #5]
 801333c:	f003 0318 	and.w	r3, r3, #24
 8013340:	2b00      	cmp	r3, #0
 8013342:	d03e      	beq.n	80133c2 <luaV_execute+0x1622>
 8013344:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013348:	681a      	ldr	r2, [r3, #0]
 801334a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801334e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013352:	4611      	mov	r1, r2
 8013354:	6818      	ldr	r0, [r3, #0]
 8013356:	f7f7 faef 	bl	800a938 <luaC_barrierback_>
 801335a:	e032      	b.n	80133c2 <luaV_execute+0x1622>
        }
        else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
 801335c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013360:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801336a:	611a      	str	r2, [r3, #16]
 801336c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013370:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	685a      	ldr	r2, [r3, #4]
 8013378:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801337c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	60da      	str	r2, [r3, #12]
 8013384:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 8013388:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801338c:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8013390:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013394:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8013398:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 801339c:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 80133a0:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 80133a4:	9100      	str	r1, [sp, #0]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	6812      	ldr	r2, [r2, #0]
 80133aa:	4621      	mov	r1, r4
 80133ac:	6800      	ldr	r0, [r0, #0]
 80133ae:	f7fd fd43 	bl	8010e38 <luaV_finishset>
 80133b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80133b6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	695b      	ldr	r3, [r3, #20]
 80133be:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80133c2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	bf14      	ite	ne
 80133ca:	2301      	movne	r3, #1
 80133cc:	2300      	moveq	r3, #0
 80133ce:	b2db      	uxtb	r3, r3
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d013      	beq.n	80133fc <luaV_execute+0x165c>
 80133d4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80133d8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80133dc:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80133e0:	6818      	ldr	r0, [r3, #0]
 80133e2:	f7f5 fe7b 	bl	80090dc <luaG_traceexec>
 80133e6:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80133ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80133ee:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	3308      	adds	r3, #8
 80133f8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80133fc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013400:	1d1a      	adds	r2, r3, #4
 8013402:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801340c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013410:	09db      	lsrs	r3, r3, #7
 8013412:	b2db      	uxtb	r3, r3
 8013414:	00db      	lsls	r3, r3, #3
 8013416:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801341a:	4413      	add	r3, r2
 801341c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013420:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013424:	b2db      	uxtb	r3, r3
 8013426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801342a:	4abc      	ldr	r2, [pc, #752]	; (801371c <luaV_execute+0x197c>)
 801342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013430:	f7fe bd88 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETI) {
        const TValue *slot;
        int c = GETARG_B(i);
 8013434:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013438:	0c1b      	lsrs	r3, r3, #16
 801343a:	461a      	mov	r2, r3
 801343c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013440:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8013444:	b2d2      	uxtb	r2, r2
 8013446:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);
 8013448:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013450:	2b00      	cmp	r3, #0
 8013452:	d007      	beq.n	8013464 <luaV_execute+0x16c4>
 8013454:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013458:	0e1b      	lsrs	r3, r3, #24
 801345a:	00db      	lsls	r3, r3, #3
 801345c:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8013460:	4413      	add	r3, r2
 8013462:	e006      	b.n	8013472 <luaV_execute+0x16d2>
 8013464:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013468:	0e1b      	lsrs	r3, r3, #24
 801346a:	00db      	lsls	r3, r3, #3
 801346c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013470:	4413      	add	r3, r2
 8013472:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013476:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 801347a:	6013      	str	r3, [r2, #0]
        if (luaV_fastgeti(L, s2v(ra), c, slot)) {
 801347c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013480:	791b      	ldrb	r3, [r3, #4]
 8013482:	2b45      	cmp	r3, #69	; 0x45
 8013484:	d004      	beq.n	8013490 <luaV_execute+0x16f0>
 8013486:	2300      	movs	r3, #0
 8013488:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 801348c:	2300      	movs	r3, #0
 801348e:	e033      	b.n	80134f8 <luaV_execute+0x1758>
 8013490:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013494:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	1e5a      	subs	r2, r3, #1
 801349c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	689b      	ldr	r3, [r3, #8]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d20e      	bcs.n	80134c6 <luaV_execute+0x1726>
 80134a8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	68da      	ldr	r2, [r3, #12]
 80134b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80134b4:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80134be:	3b01      	subs	r3, #1
 80134c0:	00db      	lsls	r3, r3, #3
 80134c2:	4413      	add	r3, r2
 80134c4:	e00c      	b.n	80134e0 <luaV_execute+0x1740>
 80134c6:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	461a      	mov	r2, r3
 80134ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80134d2:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80134d6:	6819      	ldr	r1, [r3, #0]
 80134d8:	4610      	mov	r0, r2
 80134da:	f7fc f953 	bl	800f784 <luaH_getint>
 80134de:	4603      	mov	r3, r0
 80134e0:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80134e4:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80134e8:	791b      	ldrb	r3, [r3, #4]
 80134ea:	f003 030f 	and.w	r3, r3, #15
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	bf14      	ite	ne
 80134f2:	2301      	movne	r3, #1
 80134f4:	2300      	moveq	r3, #0
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d051      	beq.n	80135a0 <luaV_execute+0x1800>
          luaV_finishfastset(L, s2v(ra), slot, rc);
 80134fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013500:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013504:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801350e:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8013512:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013516:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 801351a:	6812      	ldr	r2, [r2, #0]
 801351c:	601a      	str	r2, [r3, #0]
 801351e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013522:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801352c:	f5a2 628c 	sub.w	r2, r2, #1120	; 0x460
 8013530:	6812      	ldr	r2, [r2, #0]
 8013532:	6812      	ldr	r2, [r2, #0]
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801353a:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	791a      	ldrb	r2, [r3, #4]
 8013542:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013546:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	711a      	strb	r2, [r3, #4]
 801354e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013552:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	791b      	ldrb	r3, [r3, #4]
 801355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801355e:	2b00      	cmp	r3, #0
 8013560:	d067      	beq.n	8013632 <luaV_execute+0x1892>
 8013562:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	795b      	ldrb	r3, [r3, #5]
 801356a:	f003 0320 	and.w	r3, r3, #32
 801356e:	2b00      	cmp	r3, #0
 8013570:	d05f      	beq.n	8013632 <luaV_execute+0x1892>
 8013572:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013576:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	795b      	ldrb	r3, [r3, #5]
 8013580:	f003 0318 	and.w	r3, r3, #24
 8013584:	2b00      	cmp	r3, #0
 8013586:	d054      	beq.n	8013632 <luaV_execute+0x1892>
 8013588:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013592:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013596:	4611      	mov	r1, r2
 8013598:	6818      	ldr	r0, [r3, #0]
 801359a:	f7f7 f9cd 	bl	800a938 <luaC_barrierback_>
 801359e:	e048      	b.n	8013632 <luaV_execute+0x1892>
        }
        else {
          TValue key;
          setivalue(&key, c);
 80135a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135a4:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80135a8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80135ac:	601a      	str	r2, [r3, #0]
 80135ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135b2:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80135bc:	f5a2 628a 	sub.w	r2, r2, #1104	; 0x450
 80135c0:	6812      	ldr	r2, [r2, #0]
 80135c2:	601a      	str	r2, [r3, #0]
 80135c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135c8:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	2203      	movs	r2, #3
 80135d0:	711a      	strb	r2, [r3, #4]
          Protect(luaV_finishset(L, s2v(ra), &key, rc, slot));
 80135d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135d6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80135e0:	611a      	str	r2, [r3, #16]
 80135e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135e6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	685a      	ldr	r2, [r3, #4]
 80135ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80135f2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	60da      	str	r2, [r3, #12]
 80135fa:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80135fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013602:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8013606:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801360a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801360e:	f2a2 507c 	subw	r0, r2, #1404	; 0x57c
 8013612:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8013616:	9200      	str	r2, [sp, #0]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	4622      	mov	r2, r4
 801361c:	6800      	ldr	r0, [r0, #0]
 801361e:	f7fd fc0b 	bl	8010e38 <luaV_finishset>
 8013622:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013626:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	695b      	ldr	r3, [r3, #20]
 801362e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        }
        vmbreak;
 8013632:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013636:	2b00      	cmp	r3, #0
 8013638:	bf14      	ite	ne
 801363a:	2301      	movne	r3, #1
 801363c:	2300      	moveq	r3, #0
 801363e:	b2db      	uxtb	r3, r3
 8013640:	2b00      	cmp	r3, #0
 8013642:	d013      	beq.n	801366c <luaV_execute+0x18cc>
 8013644:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013648:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801364c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013650:	6818      	ldr	r0, [r3, #0]
 8013652:	f7f5 fd43 	bl	80090dc <luaG_traceexec>
 8013656:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801365a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801365e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	3308      	adds	r3, #8
 8013668:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801366c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013670:	1d1a      	adds	r2, r3, #4
 8013672:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801367c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013680:	09db      	lsrs	r3, r3, #7
 8013682:	b2db      	uxtb	r3, r3
 8013684:	00db      	lsls	r3, r3, #3
 8013686:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801368a:	4413      	add	r3, r2
 801368c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013690:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013694:	b2db      	uxtb	r3, r3
 8013696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801369a:	4a20      	ldr	r2, [pc, #128]	; (801371c <luaV_execute+0x197c>)
 801369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136a0:	f7fe bc50 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETFIELD) {
        const TValue *slot;
        TValue *rb = KB(i);
 80136a4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80136a8:	0c1b      	lsrs	r3, r3, #16
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	00da      	lsls	r2, r3, #3
 80136ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80136b2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80136b6:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80136ba:	440a      	add	r2, r1
 80136bc:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);
 80136be:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80136c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d007      	beq.n	80136da <luaV_execute+0x193a>
 80136ca:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80136ce:	0e1b      	lsrs	r3, r3, #24
 80136d0:	00db      	lsls	r3, r3, #3
 80136d2:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 80136d6:	4413      	add	r3, r2
 80136d8:	e006      	b.n	80136e8 <luaV_execute+0x1948>
 80136da:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80136de:	0e1b      	lsrs	r3, r3, #24
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80136e6:	4413      	add	r3, r2
 80136e8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80136ec:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80136f0:	6013      	str	r3, [r2, #0]
        TString *key = tsvalue(rb);  /* key must be a string */
 80136f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80136f6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	681a      	ldr	r2, [r3, #0]
 80136fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013702:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8013706:	601a      	str	r2, [r3, #0]
        if (luaV_fastget(L, s2v(ra), key, slot, luaH_getshortstr)) {
 8013708:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801370c:	791b      	ldrb	r3, [r3, #4]
 801370e:	2b45      	cmp	r3, #69	; 0x45
 8013710:	d006      	beq.n	8013720 <luaV_execute+0x1980>
 8013712:	2300      	movs	r3, #0
 8013714:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
 8013718:	2300      	movs	r3, #0
 801371a:	e019      	b.n	8013750 <luaV_execute+0x19b0>
 801371c:	08022d3c 	.word	0x08022d3c
 8013720:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	461a      	mov	r2, r3
 8013728:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801372c:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8013730:	6819      	ldr	r1, [r3, #0]
 8013732:	4610      	mov	r0, r2
 8013734:	f7fc f886 	bl	800f844 <luaH_getshortstr>
 8013738:	f8c7 0548 	str.w	r0, [r7, #1352]	; 0x548
 801373c:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8013740:	791b      	ldrb	r3, [r3, #4]
 8013742:	f003 030f 	and.w	r3, r3, #15
 8013746:	2b00      	cmp	r3, #0
 8013748:	bf14      	ite	ne
 801374a:	2301      	movne	r3, #1
 801374c:	2300      	moveq	r3, #0
 801374e:	b2db      	uxtb	r3, r3
 8013750:	2b00      	cmp	r3, #0
 8013752:	d051      	beq.n	80137f8 <luaV_execute+0x1a58>
          luaV_finishfastset(L, s2v(ra), slot, rc);
 8013754:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013758:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801375c:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013766:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801376a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801376e:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8013772:	6812      	ldr	r2, [r2, #0]
 8013774:	601a      	str	r2, [r3, #0]
 8013776:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801377a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013784:	f2a2 424c 	subw	r2, r2, #1100	; 0x44c
 8013788:	6812      	ldr	r2, [r2, #0]
 801378a:	6812      	ldr	r2, [r2, #0]
 801378c:	601a      	str	r2, [r3, #0]
 801378e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013792:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	791a      	ldrb	r2, [r3, #4]
 801379a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801379e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	711a      	strb	r2, [r3, #4]
 80137a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80137aa:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	791b      	ldrb	r3, [r3, #4]
 80137b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d051      	beq.n	801385e <luaV_execute+0x1abe>
 80137ba:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	795b      	ldrb	r3, [r3, #5]
 80137c2:	f003 0320 	and.w	r3, r3, #32
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d049      	beq.n	801385e <luaV_execute+0x1abe>
 80137ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80137ce:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	795b      	ldrb	r3, [r3, #5]
 80137d8:	f003 0318 	and.w	r3, r3, #24
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d03e      	beq.n	801385e <luaV_execute+0x1abe>
 80137e0:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80137ea:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80137ee:	4611      	mov	r1, r2
 80137f0:	6818      	ldr	r0, [r3, #0]
 80137f2:	f7f7 f8a1 	bl	800a938 <luaC_barrierback_>
 80137f6:	e032      	b.n	801385e <luaV_execute+0x1abe>
        }
        else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
 80137f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80137fc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8013806:	611a      	str	r2, [r3, #16]
 8013808:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801380c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	685a      	ldr	r2, [r3, #4]
 8013814:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013818:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	60da      	str	r2, [r3, #12]
 8013820:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 8013824:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013828:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 801382c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013830:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8013834:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8013838:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 801383c:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8013840:	9100      	str	r1, [sp, #0]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	6812      	ldr	r2, [r2, #0]
 8013846:	4621      	mov	r1, r4
 8013848:	6800      	ldr	r0, [r0, #0]
 801384a:	f7fd faf5 	bl	8010e38 <luaV_finishset>
 801384e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013852:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	695b      	ldr	r3, [r3, #20]
 801385a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801385e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013862:	2b00      	cmp	r3, #0
 8013864:	bf14      	ite	ne
 8013866:	2301      	movne	r3, #1
 8013868:	2300      	moveq	r3, #0
 801386a:	b2db      	uxtb	r3, r3
 801386c:	2b00      	cmp	r3, #0
 801386e:	d013      	beq.n	8013898 <luaV_execute+0x1af8>
 8013870:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013874:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013878:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801387c:	6818      	ldr	r0, [r3, #0]
 801387e:	f7f5 fc2d 	bl	80090dc <luaG_traceexec>
 8013882:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013886:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801388a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	3308      	adds	r3, #8
 8013894:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013898:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801389c:	1d1a      	adds	r2, r3, #4
 801389e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80138a8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80138ac:	09db      	lsrs	r3, r3, #7
 80138ae:	b2db      	uxtb	r3, r3
 80138b0:	00db      	lsls	r3, r3, #3
 80138b2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80138b6:	4413      	add	r3, r2
 80138b8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80138bc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80138c0:	b2db      	uxtb	r3, r3
 80138c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138c6:	4ac9      	ldr	r2, [pc, #804]	; (8013bec <luaV_execute+0x1e4c>)
 80138c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138cc:	f7fe bb3a 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_NEWTABLE) {
        int b = GETARG_B(i);  /* log2(hash size) + 1 */
 80138d0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80138d4:	0c1b      	lsrs	r3, r3, #16
 80138d6:	b2db      	uxtb	r3, r3
 80138d8:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
        int c = GETARG_C(i);  /* array size */
 80138dc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80138e0:	0e1b      	lsrs	r3, r3, #24
 80138e2:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
        Table *t;
        if (b > 0)
 80138e6:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	dd07      	ble.n	80138fe <luaV_execute+0x1b5e>
          b = 1 << (b - 1);  /* size is 2^(b - 1) */
 80138ee:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80138f2:	3b01      	subs	r3, #1
 80138f4:	2201      	movs	r2, #1
 80138f6:	fa02 f303 	lsl.w	r3, r2, r3
 80138fa:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
        lua_assert((!TESTARG_k(i)) == (GETARG_Ax(*pc) == 0));
        if (TESTARG_k(i))  /* non-zero extra argument? */
 80138fe:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013906:	2b00      	cmp	r3, #0
 8013908:	d009      	beq.n	801391e <luaV_execute+0x1b7e>
          c += GETARG_Ax(*pc) * (MAXARG_C + 1);  /* add it to size */
 801390a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	09db      	lsrs	r3, r3, #7
 8013912:	021b      	lsls	r3, r3, #8
 8013914:	f8d7 2540 	ldr.w	r2, [r7, #1344]	; 0x540
 8013918:	4413      	add	r3, r2
 801391a:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
        pc++;  /* skip extra argument */
 801391e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013922:	3304      	adds	r3, #4
 8013924:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        L->top = ra + 1;  /* correct top in case of emergency GC */
 8013928:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801392c:	f103 0208 	add.w	r2, r3, #8
 8013930:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013934:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	60da      	str	r2, [r3, #12]
        t = luaH_new(L);  /* memory allocation */
 801393c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013940:	f5a3 6486 	sub.w	r4, r3, #1072	; 0x430
 8013944:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013948:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801394c:	6818      	ldr	r0, [r3, #0]
 801394e:	f7fb fdba 	bl	800f4c6 <luaH_new>
 8013952:	6020      	str	r0, [r4, #0]
        sethvalue2s(L, ra, t);
 8013954:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013958:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 801395c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013960:	601a      	str	r2, [r3, #0]
 8013962:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013966:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 801396a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801396e:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8013972:	6812      	ldr	r2, [r2, #0]
 8013974:	601a      	str	r2, [r3, #0]
 8013976:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801397a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013984:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	601a      	str	r2, [r3, #0]
 801398c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013990:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	2245      	movs	r2, #69	; 0x45
 8013998:	711a      	strb	r2, [r3, #4]
        if (b != 0 || c != 0)
 801399a:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d103      	bne.n	80139aa <luaV_execute+0x1c0a>
 80139a2:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d00f      	beq.n	80139ca <luaV_execute+0x1c2a>
          luaH_resize(L, t, c, b);  /* idem */
 80139aa:	f8d7 2540 	ldr.w	r2, [r7, #1344]	; 0x540
 80139ae:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80139b2:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80139b6:	f5a1 6186 	sub.w	r1, r1, #1072	; 0x430
 80139ba:	f507 60b0 	add.w	r0, r7, #1408	; 0x580
 80139be:	f2a0 507c 	subw	r0, r0, #1404	; 0x57c
 80139c2:	6809      	ldr	r1, [r1, #0]
 80139c4:	6800      	ldr	r0, [r0, #0]
 80139c6:	f7fb fc5d 	bl	800f284 <luaH_resize>
        checkGC(L, ra + 1);
 80139ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80139ce:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	691b      	ldr	r3, [r3, #16]
 80139d6:	68db      	ldr	r3, [r3, #12]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	dd20      	ble.n	8013a1e <luaV_execute+0x1c7e>
 80139dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80139e0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80139ea:	611a      	str	r2, [r3, #16]
 80139ec:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80139f0:	f103 0208 	add.w	r2, r3, #8
 80139f4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80139f8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	60da      	str	r2, [r3, #12]
 8013a00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a04:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013a08:	6818      	ldr	r0, [r3, #0]
 8013a0a:	f7f9 f941 	bl	800cc90 <luaC_step>
 8013a0e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a12:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	695b      	ldr	r3, [r3, #20]
 8013a1a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8013a1e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	bf14      	ite	ne
 8013a26:	2301      	movne	r3, #1
 8013a28:	2300      	moveq	r3, #0
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d013      	beq.n	8013a58 <luaV_execute+0x1cb8>
 8013a30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a34:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013a38:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013a3c:	6818      	ldr	r0, [r3, #0]
 8013a3e:	f7f5 fb4d 	bl	80090dc <luaG_traceexec>
 8013a42:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013a46:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a4a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	3308      	adds	r3, #8
 8013a54:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013a58:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013a5c:	1d1a      	adds	r2, r3, #4
 8013a5e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013a68:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013a6c:	09db      	lsrs	r3, r3, #7
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	00db      	lsls	r3, r3, #3
 8013a72:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013a76:	4413      	add	r3, r2
 8013a78:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013a7c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a86:	4a59      	ldr	r2, [pc, #356]	; (8013bec <luaV_execute+0x1e4c>)
 8013a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a8c:	f7fe ba5a 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SELF) {
        const TValue *slot;
        TValue *rb = vRB(i);
 8013a90:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013a94:	0c1b      	lsrs	r3, r3, #16
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	00db      	lsls	r3, r3, #3
 8013a9a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013a9e:	441a      	add	r2, r3
 8013aa0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013aa4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013aa8:	601a      	str	r2, [r3, #0]
        TValue *rc = RKC(i);
 8013aaa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d007      	beq.n	8013ac6 <luaV_execute+0x1d26>
 8013ab6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013aba:	0e1b      	lsrs	r3, r3, #24
 8013abc:	00db      	lsls	r3, r3, #3
 8013abe:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8013ac2:	4413      	add	r3, r2
 8013ac4:	e006      	b.n	8013ad4 <luaV_execute+0x1d34>
 8013ac6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013aca:	0e1b      	lsrs	r3, r3, #24
 8013acc:	00db      	lsls	r3, r3, #3
 8013ace:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013ad2:	4413      	add	r3, r2
 8013ad4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013ad8:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8013adc:	6013      	str	r3, [r2, #0]
        TString *key = tsvalue(rc);  /* key must be a string */
 8013ade:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ae2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013aee:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8013af2:	601a      	str	r2, [r3, #0]
        setobj2s(L, ra + 1, rb);
 8013af4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013af8:	f103 0208 	add.w	r2, r3, #8
 8013afc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b00:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013b04:	601a      	str	r2, [r3, #0]
 8013b06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b0a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8013b0e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013b12:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8013b16:	6812      	ldr	r2, [r2, #0]
 8013b18:	601a      	str	r2, [r3, #0]
 8013b1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b1e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013b28:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8013b2c:	6812      	ldr	r2, [r2, #0]
 8013b2e:	6812      	ldr	r2, [r2, #0]
 8013b30:	601a      	str	r2, [r3, #0]
 8013b32:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b36:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	791a      	ldrb	r2, [r3, #4]
 8013b3e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b42:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	711a      	strb	r2, [r3, #4]
        if (luaV_fastget(L, rb, key, slot, luaH_getstr)) {
 8013b4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b4e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	791b      	ldrb	r3, [r3, #4]
 8013b56:	2b45      	cmp	r3, #69	; 0x45
 8013b58:	d004      	beq.n	8013b64 <luaV_execute+0x1dc4>
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8013b60:	2300      	movs	r3, #0
 8013b62:	e01a      	b.n	8013b9a <luaV_execute+0x1dfa>
 8013b64:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b68:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	461a      	mov	r2, r3
 8013b72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b76:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8013b7a:	6819      	ldr	r1, [r3, #0]
 8013b7c:	4610      	mov	r0, r2
 8013b7e:	f7fb fe97 	bl	800f8b0 <luaH_getstr>
 8013b82:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
 8013b86:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8013b8a:	791b      	ldrb	r3, [r3, #4]
 8013b8c:	f003 030f 	and.w	r3, r3, #15
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	bf14      	ite	ne
 8013b94:	2301      	movne	r3, #1
 8013b96:	2300      	moveq	r3, #0
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d028      	beq.n	8013bf0 <luaV_execute+0x1e50>
          setobj2s(L, ra, slot);
 8013b9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ba2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013ba6:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013baa:	601a      	str	r2, [r3, #0]
 8013bac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bb0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8013bb4:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8013bb8:	601a      	str	r2, [r3, #0]
 8013bba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bbe:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013bc8:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8013bcc:	6812      	ldr	r2, [r2, #0]
 8013bce:	6812      	ldr	r2, [r2, #0]
 8013bd0:	601a      	str	r2, [r3, #0]
 8013bd2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bd6:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	791a      	ldrb	r2, [r3, #4]
 8013bde:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013be2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	711a      	strb	r2, [r3, #4]
 8013bea:	e033      	b.n	8013c54 <luaV_execute+0x1eb4>
 8013bec:	08022d3c 	.word	0x08022d3c
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
 8013bf0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bf4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8013bfe:	611a      	str	r2, [r3, #16]
 8013c00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c04:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	685a      	ldr	r2, [r3, #4]
 8013c0c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c10:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	60da      	str	r2, [r3, #12]
 8013c18:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c1c:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 8013c20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c24:	f2a3 4114 	subw	r1, r3, #1044	; 0x414
 8013c28:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c2c:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8013c30:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8013c34:	9300      	str	r3, [sp, #0]
 8013c36:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8013c3a:	6812      	ldr	r2, [r2, #0]
 8013c3c:	6809      	ldr	r1, [r1, #0]
 8013c3e:	6800      	ldr	r0, [r0, #0]
 8013c40:	f7fd f868 	bl	8010d14 <luaV_finishget>
 8013c44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c48:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	695b      	ldr	r3, [r3, #20]
 8013c50:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8013c54:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	bf14      	ite	ne
 8013c5c:	2301      	movne	r3, #1
 8013c5e:	2300      	moveq	r3, #0
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d013      	beq.n	8013c8e <luaV_execute+0x1eee>
 8013c66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c6a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013c6e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013c72:	6818      	ldr	r0, [r3, #0]
 8013c74:	f7f5 fa32 	bl	80090dc <luaG_traceexec>
 8013c78:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013c7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c80:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	3308      	adds	r3, #8
 8013c8a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013c8e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013c92:	1d1a      	adds	r2, r3, #4
 8013c94:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013c9e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013ca2:	09db      	lsrs	r3, r3, #7
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	00db      	lsls	r3, r3, #3
 8013ca8:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013cac:	4413      	add	r3, r2
 8013cae:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013cb2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013cb6:	b2db      	uxtb	r3, r3
 8013cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cbc:	4aca      	ldr	r2, [pc, #808]	; (8013fe8 <luaV_execute+0x2248>)
 8013cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cc2:	f7fe b93f 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_ADDI) {
        op_arithI(L, l_addi, luai_numadd);
 8013cc6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013cca:	0c1b      	lsrs	r3, r3, #16
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	00db      	lsls	r3, r3, #3
 8013cd0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013cd4:	441a      	add	r2, r3
 8013cd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013cda:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013cde:	601a      	str	r2, [r3, #0]
 8013ce0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013ce4:	0e1b      	lsrs	r3, r3, #24
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013cec:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8013cf0:	3a7f      	subs	r2, #127	; 0x7f
 8013cf2:	601a      	str	r2, [r3, #0]
 8013cf4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013cf8:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	791b      	ldrb	r3, [r3, #4]
 8013d00:	2b03      	cmp	r3, #3
 8013d02:	d130      	bne.n	8013d66 <luaV_execute+0x1fc6>
 8013d04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d08:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8013d0c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013d10:	f5a2 727e 	sub.w	r2, r2, #1016	; 0x3f8
 8013d14:	6812      	ldr	r2, [r2, #0]
 8013d16:	6812      	ldr	r2, [r2, #0]
 8013d18:	601a      	str	r2, [r3, #0]
 8013d1a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013d1e:	3304      	adds	r3, #4
 8013d20:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013d24:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d28:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8013d2c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013d30:	601a      	str	r2, [r3, #0]
 8013d32:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d36:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d40:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	4413      	add	r3, r2
 8013d48:	461a      	mov	r2, r3
 8013d4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d4e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	601a      	str	r2, [r3, #0]
 8013d56:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d5a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	2203      	movs	r2, #3
 8013d62:	711a      	strb	r2, [r3, #4]
 8013d64:	e049      	b.n	8013dfa <luaV_execute+0x205a>
 8013d66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d6a:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	791b      	ldrb	r3, [r3, #4]
 8013d72:	2b13      	cmp	r3, #19
 8013d74:	d141      	bne.n	8013dfa <luaV_execute+0x205a>
 8013d76:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d7a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013d7e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013d82:	f5a2 727e 	sub.w	r2, r2, #1016	; 0x3f8
 8013d86:	6812      	ldr	r2, [r2, #0]
 8013d88:	6812      	ldr	r2, [r2, #0]
 8013d8a:	601a      	str	r2, [r3, #0]
 8013d8c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d90:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8013d94:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013d98:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8013d9c:	6812      	ldr	r2, [r2, #0]
 8013d9e:	ee07 2a90 	vmov	s15, r2
 8013da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013da6:	edc3 7a00 	vstr	s15, [r3]
 8013daa:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013dae:	3304      	adds	r3, #4
 8013db0:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013db4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013db8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013dbc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013dc0:	601a      	str	r2, [r3, #0]
 8013dc2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013dc6:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
 8013dca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013dce:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8013dd2:	ed92 7a00 	vldr	s14, [r2]
 8013dd6:	edd3 7a00 	vldr	s15, [r3]
 8013dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013dde:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013de2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	edc3 7a00 	vstr	s15, [r3]
 8013dec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013df0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2213      	movs	r2, #19
 8013df8:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8013dfa:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	bf14      	ite	ne
 8013e02:	2301      	movne	r3, #1
 8013e04:	2300      	moveq	r3, #0
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d013      	beq.n	8013e34 <luaV_execute+0x2094>
 8013e0c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e10:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8013e14:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8013e18:	6818      	ldr	r0, [r3, #0]
 8013e1a:	f7f5 f95f 	bl	80090dc <luaG_traceexec>
 8013e1e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8013e22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e26:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	3308      	adds	r3, #8
 8013e30:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8013e34:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013e38:	1d1a      	adds	r2, r3, #4
 8013e3a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8013e44:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013e48:	09db      	lsrs	r3, r3, #7
 8013e4a:	b2db      	uxtb	r3, r3
 8013e4c:	00db      	lsls	r3, r3, #3
 8013e4e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013e52:	4413      	add	r3, r2
 8013e54:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013e58:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013e5c:	b2db      	uxtb	r3, r3
 8013e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e62:	4a61      	ldr	r2, [pc, #388]	; (8013fe8 <luaV_execute+0x2248>)
 8013e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e68:	f7fe b86c 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_ADDK) {
        op_arithK(L, l_addi, luai_numadd);
 8013e6c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013e70:	0c1b      	lsrs	r3, r3, #16
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	00db      	lsls	r3, r3, #3
 8013e76:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8013e7a:	441a      	add	r2, r3
 8013e7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e80:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013e84:	601a      	str	r2, [r3, #0]
 8013e86:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013e8a:	0e1b      	lsrs	r3, r3, #24
 8013e8c:	00da      	lsls	r2, r3, #3
 8013e8e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e92:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013e96:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8013e9a:	440a      	add	r2, r1
 8013e9c:	601a      	str	r2, [r3, #0]
 8013e9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ea2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	791b      	ldrb	r3, [r3, #4]
 8013eaa:	2b03      	cmp	r3, #3
 8013eac:	d143      	bne.n	8013f36 <luaV_execute+0x2196>
 8013eae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013eb2:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	791b      	ldrb	r3, [r3, #4]
 8013eba:	2b03      	cmp	r3, #3
 8013ebc:	d13b      	bne.n	8013f36 <luaV_execute+0x2196>
 8013ebe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ec2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013ec6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013eca:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8013ece:	6812      	ldr	r2, [r2, #0]
 8013ed0:	6812      	ldr	r2, [r2, #0]
 8013ed2:	601a      	str	r2, [r3, #0]
 8013ed4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ed8:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8013edc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013ee0:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 8013ee4:	6812      	ldr	r2, [r2, #0]
 8013ee6:	6812      	ldr	r2, [r2, #0]
 8013ee8:	601a      	str	r2, [r3, #0]
 8013eea:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013eee:	3304      	adds	r3, #4
 8013ef0:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013ef4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ef8:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013efc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013f00:	601a      	str	r2, [r3, #0]
 8013f02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f06:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f10:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	4413      	add	r3, r2
 8013f18:	461a      	mov	r2, r3
 8013f1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f1e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	601a      	str	r2, [r3, #0]
 8013f26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f2a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2203      	movs	r2, #3
 8013f32:	711a      	strb	r2, [r3, #4]
 8013f34:	e081      	b.n	801403a <luaV_execute+0x229a>
 8013f36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f3a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	791b      	ldrb	r3, [r3, #4]
 8013f42:	2b13      	cmp	r3, #19
 8013f44:	d10a      	bne.n	8013f5c <luaV_execute+0x21bc>
 8013f46:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f4a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8013f56:	6013      	str	r3, [r2, #0]
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e018      	b.n	8013f8e <luaV_execute+0x21ee>
 8013f5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f60:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	791b      	ldrb	r3, [r3, #4]
 8013f68:	2b03      	cmp	r3, #3
 8013f6a:	d10f      	bne.n	8013f8c <luaV_execute+0x21ec>
 8013f6c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f70:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	ee07 3a90 	vmov	s15, r3
 8013f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f80:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8013f84:	edc3 7a00 	vstr	s15, [r3]
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e000      	b.n	8013f8e <luaV_execute+0x21ee>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d053      	beq.n	801403a <luaV_execute+0x229a>
 8013f92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f96:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	791b      	ldrb	r3, [r3, #4]
 8013f9e:	2b13      	cmp	r3, #19
 8013fa0:	d10a      	bne.n	8013fb8 <luaV_execute+0x2218>
 8013fa2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fa6:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8013fb2:	6013      	str	r3, [r2, #0]
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	e01a      	b.n	8013fee <luaV_execute+0x224e>
 8013fb8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fbc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	791b      	ldrb	r3, [r3, #4]
 8013fc4:	2b03      	cmp	r3, #3
 8013fc6:	d111      	bne.n	8013fec <luaV_execute+0x224c>
 8013fc8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fcc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	ee07 3a90 	vmov	s15, r3
 8013fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fdc:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8013fe0:	edc3 7a00 	vstr	s15, [r3]
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	e002      	b.n	8013fee <luaV_execute+0x224e>
 8013fe8:	08022d3c 	.word	0x08022d3c
 8013fec:	2300      	movs	r3, #0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d023      	beq.n	801403a <luaV_execute+0x229a>
 8013ff2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8013ff6:	3304      	adds	r3, #4
 8013ff8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8013ffc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014000:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014004:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014008:	601a      	str	r2, [r3, #0]
 801400a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801400e:	ed93 7a00 	vldr	s14, [r3]
 8014012:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8014016:	edd3 7a00 	vldr	s15, [r3]
 801401a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801401e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014022:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	edc3 7a00 	vstr	s15, [r3]
 801402c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014030:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	2213      	movs	r2, #19
 8014038:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801403a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801403e:	2b00      	cmp	r3, #0
 8014040:	bf14      	ite	ne
 8014042:	2301      	movne	r3, #1
 8014044:	2300      	moveq	r3, #0
 8014046:	b2db      	uxtb	r3, r3
 8014048:	2b00      	cmp	r3, #0
 801404a:	d013      	beq.n	8014074 <luaV_execute+0x22d4>
 801404c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014050:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014054:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014058:	6818      	ldr	r0, [r3, #0]
 801405a:	f7f5 f83f 	bl	80090dc <luaG_traceexec>
 801405e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014062:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014066:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	3308      	adds	r3, #8
 8014070:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014074:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014078:	1d1a      	adds	r2, r3, #4
 801407a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014084:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014088:	09db      	lsrs	r3, r3, #7
 801408a:	b2db      	uxtb	r3, r3
 801408c:	00db      	lsls	r3, r3, #3
 801408e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014092:	4413      	add	r3, r2
 8014094:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014098:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801409c:	b2db      	uxtb	r3, r3
 801409e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140a2:	4ac4      	ldr	r2, [pc, #784]	; (80143b4 <luaV_execute+0x2614>)
 80140a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140a8:	f7fd bf4c 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SUBK) {
        op_arithK(L, l_subi, luai_numsub);
 80140ac:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80140b0:	0c1b      	lsrs	r3, r3, #16
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	00db      	lsls	r3, r3, #3
 80140b6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80140ba:	441a      	add	r2, r3
 80140bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80140c0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80140c4:	601a      	str	r2, [r3, #0]
 80140c6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80140ca:	0e1b      	lsrs	r3, r3, #24
 80140cc:	00da      	lsls	r2, r3, #3
 80140ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80140d2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80140d6:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80140da:	440a      	add	r2, r1
 80140dc:	601a      	str	r2, [r3, #0]
 80140de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80140e2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	791b      	ldrb	r3, [r3, #4]
 80140ea:	2b03      	cmp	r3, #3
 80140ec:	d143      	bne.n	8014176 <luaV_execute+0x23d6>
 80140ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80140f2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	791b      	ldrb	r3, [r3, #4]
 80140fa:	2b03      	cmp	r3, #3
 80140fc:	d13b      	bne.n	8014176 <luaV_execute+0x23d6>
 80140fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014102:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8014106:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801410a:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 801410e:	6812      	ldr	r2, [r2, #0]
 8014110:	6812      	ldr	r2, [r2, #0]
 8014112:	601a      	str	r2, [r3, #0]
 8014114:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014118:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 801411c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014120:	f5a2 7273 	sub.w	r2, r2, #972	; 0x3cc
 8014124:	6812      	ldr	r2, [r2, #0]
 8014126:	6812      	ldr	r2, [r2, #0]
 8014128:	601a      	str	r2, [r3, #0]
 801412a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801412e:	3304      	adds	r3, #4
 8014130:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014134:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014138:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801413c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014140:	601a      	str	r2, [r3, #0]
 8014142:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014146:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801414a:	681a      	ldr	r2, [r3, #0]
 801414c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014150:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	1ad3      	subs	r3, r2, r3
 8014158:	461a      	mov	r2, r3
 801415a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801415e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	601a      	str	r2, [r3, #0]
 8014166:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801416a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2203      	movs	r2, #3
 8014172:	711a      	strb	r2, [r3, #4]
 8014174:	e07f      	b.n	8014276 <luaV_execute+0x24d6>
 8014176:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801417a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	791b      	ldrb	r3, [r3, #4]
 8014182:	2b13      	cmp	r3, #19
 8014184:	d10a      	bne.n	801419c <luaV_execute+0x23fc>
 8014186:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801418a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f507 62a6 	add.w	r2, r7, #1328	; 0x530
 8014196:	6013      	str	r3, [r2, #0]
 8014198:	2301      	movs	r3, #1
 801419a:	e018      	b.n	80141ce <luaV_execute+0x242e>
 801419c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141a0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	791b      	ldrb	r3, [r3, #4]
 80141a8:	2b03      	cmp	r3, #3
 80141aa:	d10f      	bne.n	80141cc <luaV_execute+0x242c>
 80141ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141b0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	ee07 3a90 	vmov	s15, r3
 80141bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141c0:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80141c4:	edc3 7a00 	vstr	s15, [r3]
 80141c8:	2301      	movs	r3, #1
 80141ca:	e000      	b.n	80141ce <luaV_execute+0x242e>
 80141cc:	2300      	movs	r3, #0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d051      	beq.n	8014276 <luaV_execute+0x24d6>
 80141d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141d6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	791b      	ldrb	r3, [r3, #4]
 80141de:	2b13      	cmp	r3, #19
 80141e0:	d10a      	bne.n	80141f8 <luaV_execute+0x2458>
 80141e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141e6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 80141f2:	6013      	str	r3, [r2, #0]
 80141f4:	2301      	movs	r3, #1
 80141f6:	e018      	b.n	801422a <luaV_execute+0x248a>
 80141f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80141fc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	791b      	ldrb	r3, [r3, #4]
 8014204:	2b03      	cmp	r3, #3
 8014206:	d10f      	bne.n	8014228 <luaV_execute+0x2488>
 8014208:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801420c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	ee07 3a90 	vmov	s15, r3
 8014218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801421c:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8014220:	edc3 7a00 	vstr	s15, [r3]
 8014224:	2301      	movs	r3, #1
 8014226:	e000      	b.n	801422a <luaV_execute+0x248a>
 8014228:	2300      	movs	r3, #0
 801422a:	2b00      	cmp	r3, #0
 801422c:	d023      	beq.n	8014276 <luaV_execute+0x24d6>
 801422e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014232:	3304      	adds	r3, #4
 8014234:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014238:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801423c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014240:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014244:	601a      	str	r2, [r3, #0]
 8014246:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801424a:	ed93 7a00 	vldr	s14, [r3]
 801424e:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8014252:	edd3 7a00 	vldr	s15, [r3]
 8014256:	ee77 7a67 	vsub.f32	s15, s14, s15
 801425a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801425e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	edc3 7a00 	vstr	s15, [r3]
 8014268:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801426c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	2213      	movs	r2, #19
 8014274:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8014276:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801427a:	2b00      	cmp	r3, #0
 801427c:	bf14      	ite	ne
 801427e:	2301      	movne	r3, #1
 8014280:	2300      	moveq	r3, #0
 8014282:	b2db      	uxtb	r3, r3
 8014284:	2b00      	cmp	r3, #0
 8014286:	d013      	beq.n	80142b0 <luaV_execute+0x2510>
 8014288:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801428c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014290:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014294:	6818      	ldr	r0, [r3, #0]
 8014296:	f7f4 ff21 	bl	80090dc <luaG_traceexec>
 801429a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801429e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80142a2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	3308      	adds	r3, #8
 80142ac:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80142b0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80142b4:	1d1a      	adds	r2, r3, #4
 80142b6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80142c0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80142c4:	09db      	lsrs	r3, r3, #7
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	00db      	lsls	r3, r3, #3
 80142ca:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80142ce:	4413      	add	r3, r2
 80142d0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80142d4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80142d8:	b2db      	uxtb	r3, r3
 80142da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142de:	4a35      	ldr	r2, [pc, #212]	; (80143b4 <luaV_execute+0x2614>)
 80142e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80142e4:	f7fd be2e 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_MULK) {
        op_arithK(L, l_muli, luai_nummul);
 80142e8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80142ec:	0c1b      	lsrs	r3, r3, #16
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	00db      	lsls	r3, r3, #3
 80142f2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80142f6:	441a      	add	r2, r3
 80142f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80142fc:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8014300:	601a      	str	r2, [r3, #0]
 8014302:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014306:	0e1b      	lsrs	r3, r3, #24
 8014308:	00da      	lsls	r2, r3, #3
 801430a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801430e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8014312:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8014316:	440a      	add	r2, r1
 8014318:	601a      	str	r2, [r3, #0]
 801431a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801431e:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	791b      	ldrb	r3, [r3, #4]
 8014326:	2b03      	cmp	r3, #3
 8014328:	d146      	bne.n	80143b8 <luaV_execute+0x2618>
 801432a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801432e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	791b      	ldrb	r3, [r3, #4]
 8014336:	2b03      	cmp	r3, #3
 8014338:	d13e      	bne.n	80143b8 <luaV_execute+0x2618>
 801433a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801433e:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8014342:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014346:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 801434a:	6812      	ldr	r2, [r2, #0]
 801434c:	6812      	ldr	r2, [r2, #0]
 801434e:	601a      	str	r2, [r3, #0]
 8014350:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014354:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8014358:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801435c:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8014360:	6812      	ldr	r2, [r2, #0]
 8014362:	6812      	ldr	r2, [r2, #0]
 8014364:	601a      	str	r2, [r3, #0]
 8014366:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801436a:	3304      	adds	r3, #4
 801436c:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014370:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014374:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014378:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801437c:	601a      	str	r2, [r3, #0]
 801437e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014382:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801438c:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8014390:	6812      	ldr	r2, [r2, #0]
 8014392:	fb02 f303 	mul.w	r3, r2, r3
 8014396:	461a      	mov	r2, r3
 8014398:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801439c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	601a      	str	r2, [r3, #0]
 80143a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143a8:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	2203      	movs	r2, #3
 80143b0:	711a      	strb	r2, [r3, #4]
 80143b2:	e081      	b.n	80144b8 <luaV_execute+0x2718>
 80143b4:	08022d3c 	.word	0x08022d3c
 80143b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143bc:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	791b      	ldrb	r3, [r3, #4]
 80143c4:	2b13      	cmp	r3, #19
 80143c6:	d10a      	bne.n	80143de <luaV_execute+0x263e>
 80143c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143cc:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 80143d8:	6013      	str	r3, [r2, #0]
 80143da:	2301      	movs	r3, #1
 80143dc:	e018      	b.n	8014410 <luaV_execute+0x2670>
 80143de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143e2:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	791b      	ldrb	r3, [r3, #4]
 80143ea:	2b03      	cmp	r3, #3
 80143ec:	d10f      	bne.n	801440e <luaV_execute+0x266e>
 80143ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80143f2:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	ee07 3a90 	vmov	s15, r3
 80143fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014402:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8014406:	edc3 7a00 	vstr	s15, [r3]
 801440a:	2301      	movs	r3, #1
 801440c:	e000      	b.n	8014410 <luaV_execute+0x2670>
 801440e:	2300      	movs	r3, #0
 8014410:	2b00      	cmp	r3, #0
 8014412:	d051      	beq.n	80144b8 <luaV_execute+0x2718>
 8014414:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014418:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	791b      	ldrb	r3, [r3, #4]
 8014420:	2b13      	cmp	r3, #19
 8014422:	d10a      	bne.n	801443a <luaV_execute+0x269a>
 8014424:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014428:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	f207 5224 	addw	r2, r7, #1316	; 0x524
 8014434:	6013      	str	r3, [r2, #0]
 8014436:	2301      	movs	r3, #1
 8014438:	e018      	b.n	801446c <luaV_execute+0x26cc>
 801443a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801443e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	791b      	ldrb	r3, [r3, #4]
 8014446:	2b03      	cmp	r3, #3
 8014448:	d10f      	bne.n	801446a <luaV_execute+0x26ca>
 801444a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801444e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	ee07 3a90 	vmov	s15, r3
 801445a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801445e:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8014462:	edc3 7a00 	vstr	s15, [r3]
 8014466:	2301      	movs	r3, #1
 8014468:	e000      	b.n	801446c <luaV_execute+0x26cc>
 801446a:	2300      	movs	r3, #0
 801446c:	2b00      	cmp	r3, #0
 801446e:	d023      	beq.n	80144b8 <luaV_execute+0x2718>
 8014470:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014474:	3304      	adds	r3, #4
 8014476:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801447a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801447e:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014482:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014486:	601a      	str	r2, [r3, #0]
 8014488:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801448c:	ed93 7a00 	vldr	s14, [r3]
 8014490:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8014494:	edd3 7a00 	vldr	s15, [r3]
 8014498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801449c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80144a0:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	edc3 7a00 	vstr	s15, [r3]
 80144aa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80144ae:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	2213      	movs	r2, #19
 80144b6:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80144b8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80144bc:	2b00      	cmp	r3, #0
 80144be:	bf14      	ite	ne
 80144c0:	2301      	movne	r3, #1
 80144c2:	2300      	moveq	r3, #0
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d013      	beq.n	80144f2 <luaV_execute+0x2752>
 80144ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80144ce:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80144d2:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80144d6:	6818      	ldr	r0, [r3, #0]
 80144d8:	f7f4 fe00 	bl	80090dc <luaG_traceexec>
 80144dc:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80144e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80144e4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	3308      	adds	r3, #8
 80144ee:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80144f2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80144f6:	1d1a      	adds	r2, r3, #4
 80144f8:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014502:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014506:	09db      	lsrs	r3, r3, #7
 8014508:	b2db      	uxtb	r3, r3
 801450a:	00db      	lsls	r3, r3, #3
 801450c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014510:	4413      	add	r3, r2
 8014512:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014516:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801451a:	b2db      	uxtb	r3, r3
 801451c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014520:	4ac4      	ldr	r2, [pc, #784]	; (8014834 <luaV_execute+0x2a94>)
 8014522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014526:	f7fd bd0d 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_MODK) {
        op_arithK(L, luaV_mod, luaV_modf);
 801452a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801452e:	0c1b      	lsrs	r3, r3, #16
 8014530:	b2db      	uxtb	r3, r3
 8014532:	00db      	lsls	r3, r3, #3
 8014534:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014538:	441a      	add	r2, r3
 801453a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801453e:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014542:	601a      	str	r2, [r3, #0]
 8014544:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014548:	0e1b      	lsrs	r3, r3, #24
 801454a:	00da      	lsls	r2, r3, #3
 801454c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014550:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014554:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8014558:	440a      	add	r2, r1
 801455a:	601a      	str	r2, [r3, #0]
 801455c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014560:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	791b      	ldrb	r3, [r3, #4]
 8014568:	2b03      	cmp	r3, #3
 801456a:	d149      	bne.n	8014600 <luaV_execute+0x2860>
 801456c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014570:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	791b      	ldrb	r3, [r3, #4]
 8014578:	2b03      	cmp	r3, #3
 801457a:	d141      	bne.n	8014600 <luaV_execute+0x2860>
 801457c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014580:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8014584:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014588:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 801458c:	6812      	ldr	r2, [r2, #0]
 801458e:	6812      	ldr	r2, [r2, #0]
 8014590:	601a      	str	r2, [r3, #0]
 8014592:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014596:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801459a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801459e:	f5a2 7267 	sub.w	r2, r2, #924	; 0x39c
 80145a2:	6812      	ldr	r2, [r2, #0]
 80145a4:	6812      	ldr	r2, [r2, #0]
 80145a6:	601a      	str	r2, [r3, #0]
 80145a8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80145ac:	3304      	adds	r3, #4
 80145ae:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80145b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145b6:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80145ba:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80145be:	601a      	str	r2, [r3, #0]
 80145c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145c4:	f5a3 7269 	sub.w	r2, r3, #932	; 0x3a4
 80145c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145cc:	f5a3 7168 	sub.w	r1, r3, #928	; 0x3a0
 80145d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145d4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80145d8:	6812      	ldr	r2, [r2, #0]
 80145da:	6809      	ldr	r1, [r1, #0]
 80145dc:	6818      	ldr	r0, [r3, #0]
 80145de:	f7fd fad1 	bl	8011b84 <luaV_mod>
 80145e2:	4602      	mov	r2, r0
 80145e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145e8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	601a      	str	r2, [r3, #0]
 80145f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80145f4:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2203      	movs	r2, #3
 80145fc:	711a      	strb	r2, [r3, #4]
 80145fe:	e086      	b.n	801470e <luaV_execute+0x296e>
 8014600:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014604:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	791b      	ldrb	r3, [r3, #4]
 801460c:	2b13      	cmp	r3, #19
 801460e:	d10a      	bne.n	8014626 <luaV_execute+0x2886>
 8014610:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014614:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8014620:	6013      	str	r3, [r2, #0]
 8014622:	2301      	movs	r3, #1
 8014624:	e018      	b.n	8014658 <luaV_execute+0x28b8>
 8014626:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801462a:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	791b      	ldrb	r3, [r3, #4]
 8014632:	2b03      	cmp	r3, #3
 8014634:	d10f      	bne.n	8014656 <luaV_execute+0x28b6>
 8014636:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801463a:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	ee07 3a90 	vmov	s15, r3
 8014646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801464a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801464e:	edc3 7a00 	vstr	s15, [r3]
 8014652:	2301      	movs	r3, #1
 8014654:	e000      	b.n	8014658 <luaV_execute+0x28b8>
 8014656:	2300      	movs	r3, #0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d058      	beq.n	801470e <luaV_execute+0x296e>
 801465c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014660:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	791b      	ldrb	r3, [r3, #4]
 8014668:	2b13      	cmp	r3, #19
 801466a:	d10a      	bne.n	8014682 <luaV_execute+0x28e2>
 801466c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014670:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	f207 521c 	addw	r2, r7, #1308	; 0x51c
 801467c:	6013      	str	r3, [r2, #0]
 801467e:	2301      	movs	r3, #1
 8014680:	e018      	b.n	80146b4 <luaV_execute+0x2914>
 8014682:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014686:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	791b      	ldrb	r3, [r3, #4]
 801468e:	2b03      	cmp	r3, #3
 8014690:	d10f      	bne.n	80146b2 <luaV_execute+0x2912>
 8014692:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014696:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	ee07 3a90 	vmov	s15, r3
 80146a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80146a6:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80146aa:	edc3 7a00 	vstr	s15, [r3]
 80146ae:	2301      	movs	r3, #1
 80146b0:	e000      	b.n	80146b4 <luaV_execute+0x2914>
 80146b2:	2300      	movs	r3, #0
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d02a      	beq.n	801470e <luaV_execute+0x296e>
 80146b8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80146bc:	3304      	adds	r3, #4
 80146be:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80146c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80146c6:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80146ca:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80146ce:	601a      	str	r2, [r3, #0]
 80146d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80146d4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80146d8:	f207 521c 	addw	r2, r7, #1308	; 0x51c
 80146dc:	edd2 0a00 	vldr	s1, [r2]
 80146e0:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80146e4:	ed92 0a00 	vldr	s0, [r2]
 80146e8:	6818      	ldr	r0, [r3, #0]
 80146ea:	f7fd fa7f 	bl	8011bec <luaV_modf>
 80146ee:	eef0 7a40 	vmov.f32	s15, s0
 80146f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80146f6:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	edc3 7a00 	vstr	s15, [r3]
 8014700:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014704:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	2213      	movs	r2, #19
 801470c:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801470e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014712:	2b00      	cmp	r3, #0
 8014714:	bf14      	ite	ne
 8014716:	2301      	movne	r3, #1
 8014718:	2300      	moveq	r3, #0
 801471a:	b2db      	uxtb	r3, r3
 801471c:	2b00      	cmp	r3, #0
 801471e:	d013      	beq.n	8014748 <luaV_execute+0x29a8>
 8014720:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014724:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014728:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801472c:	6818      	ldr	r0, [r3, #0]
 801472e:	f7f4 fcd5 	bl	80090dc <luaG_traceexec>
 8014732:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014736:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801473a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	3308      	adds	r3, #8
 8014744:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014748:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801474c:	1d1a      	adds	r2, r3, #4
 801474e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014758:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801475c:	09db      	lsrs	r3, r3, #7
 801475e:	b2db      	uxtb	r3, r3
 8014760:	00db      	lsls	r3, r3, #3
 8014762:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014766:	4413      	add	r3, r2
 8014768:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801476c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014770:	b2db      	uxtb	r3, r3
 8014772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014776:	4a2f      	ldr	r2, [pc, #188]	; (8014834 <luaV_execute+0x2a94>)
 8014778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801477c:	f7fd bbe2 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_POWK) {
        op_arithfK(L, luai_numpow);
 8014780:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014784:	0c1b      	lsrs	r3, r3, #16
 8014786:	b2db      	uxtb	r3, r3
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801478e:	441a      	add	r2, r3
 8014790:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014794:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8014798:	601a      	str	r2, [r3, #0]
 801479a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801479e:	0e1b      	lsrs	r3, r3, #24
 80147a0:	00da      	lsls	r2, r3, #3
 80147a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80147a6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80147aa:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80147ae:	440a      	add	r2, r1
 80147b0:	601a      	str	r2, [r3, #0]
 80147b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80147b6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	791b      	ldrb	r3, [r3, #4]
 80147be:	2b13      	cmp	r3, #19
 80147c0:	d10a      	bne.n	80147d8 <luaV_execute+0x2a38>
 80147c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80147c6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 80147d2:	6013      	str	r3, [r2, #0]
 80147d4:	2301      	movs	r3, #1
 80147d6:	e018      	b.n	801480a <luaV_execute+0x2a6a>
 80147d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80147dc:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	791b      	ldrb	r3, [r3, #4]
 80147e4:	2b03      	cmp	r3, #3
 80147e6:	d10f      	bne.n	8014808 <luaV_execute+0x2a68>
 80147e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80147ec:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	ee07 3a90 	vmov	s15, r3
 80147f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147fc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8014800:	edc3 7a00 	vstr	s15, [r3]
 8014804:	2301      	movs	r3, #1
 8014806:	e000      	b.n	801480a <luaV_execute+0x2a6a>
 8014808:	2300      	movs	r3, #0
 801480a:	2b00      	cmp	r3, #0
 801480c:	d067      	beq.n	80148de <luaV_execute+0x2b3e>
 801480e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014812:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	791b      	ldrb	r3, [r3, #4]
 801481a:	2b13      	cmp	r3, #19
 801481c:	d10c      	bne.n	8014838 <luaV_execute+0x2a98>
 801481e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014822:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801482e:	6013      	str	r3, [r2, #0]
 8014830:	2301      	movs	r3, #1
 8014832:	e01a      	b.n	801486a <luaV_execute+0x2aca>
 8014834:	08022d3c 	.word	0x08022d3c
 8014838:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801483c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	791b      	ldrb	r3, [r3, #4]
 8014844:	2b03      	cmp	r3, #3
 8014846:	d10f      	bne.n	8014868 <luaV_execute+0x2ac8>
 8014848:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801484c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	ee07 3a90 	vmov	s15, r3
 8014858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801485c:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8014860:	edc3 7a00 	vstr	s15, [r3]
 8014864:	2301      	movs	r3, #1
 8014866:	e000      	b.n	801486a <luaV_execute+0x2aca>
 8014868:	2300      	movs	r3, #0
 801486a:	2b00      	cmp	r3, #0
 801486c:	d037      	beq.n	80148de <luaV_execute+0x2b3e>
 801486e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014872:	3304      	adds	r3, #4
 8014874:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014878:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801487c:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8014880:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014884:	601a      	str	r2, [r3, #0]
 8014886:	f207 5314 	addw	r3, r7, #1300	; 0x514
 801488a:	edd3 7a00 	vldr	s15, [r3]
 801488e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014892:	eef4 7a47 	vcmp.f32	s15, s14
 8014896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801489a:	d106      	bne.n	80148aa <luaV_execute+0x2b0a>
 801489c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80148a0:	edd3 7a00 	vldr	s15, [r3]
 80148a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80148a8:	e00b      	b.n	80148c2 <luaV_execute+0x2b22>
 80148aa:	f207 5314 	addw	r3, r7, #1300	; 0x514
 80148ae:	edd3 0a00 	vldr	s1, [r3]
 80148b2:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80148b6:	ed93 0a00 	vldr	s0, [r3]
 80148ba:	f009 fa11 	bl	801dce0 <powf>
 80148be:	eef0 7a40 	vmov.f32	s15, s0
 80148c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80148c6:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	edc3 7a00 	vstr	s15, [r3]
 80148d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80148d4:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2213      	movs	r2, #19
 80148dc:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80148de:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	bf14      	ite	ne
 80148e6:	2301      	movne	r3, #1
 80148e8:	2300      	moveq	r3, #0
 80148ea:	b2db      	uxtb	r3, r3
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d013      	beq.n	8014918 <luaV_execute+0x2b78>
 80148f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80148f4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80148f8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80148fc:	6818      	ldr	r0, [r3, #0]
 80148fe:	f7f4 fbed 	bl	80090dc <luaG_traceexec>
 8014902:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014906:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801490a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	3308      	adds	r3, #8
 8014914:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014918:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801491c:	1d1a      	adds	r2, r3, #4
 801491e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014928:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801492c:	09db      	lsrs	r3, r3, #7
 801492e:	b2db      	uxtb	r3, r3
 8014930:	00db      	lsls	r3, r3, #3
 8014932:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014936:	4413      	add	r3, r2
 8014938:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801493c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014940:	b2db      	uxtb	r3, r3
 8014942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014946:	4ac1      	ldr	r2, [pc, #772]	; (8014c4c <luaV_execute+0x2eac>)
 8014948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801494c:	f7fd bafa 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_DIVK) {
        op_arithfK(L, luai_numdiv);
 8014950:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014954:	0c1b      	lsrs	r3, r3, #16
 8014956:	b2db      	uxtb	r3, r3
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801495e:	441a      	add	r2, r3
 8014960:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014964:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8014968:	601a      	str	r2, [r3, #0]
 801496a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801496e:	0e1b      	lsrs	r3, r3, #24
 8014970:	00da      	lsls	r2, r3, #3
 8014972:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014976:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801497a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 801497e:	440a      	add	r2, r1
 8014980:	601a      	str	r2, [r3, #0]
 8014982:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014986:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	791b      	ldrb	r3, [r3, #4]
 801498e:	2b13      	cmp	r3, #19
 8014990:	d10a      	bne.n	80149a8 <luaV_execute+0x2c08>
 8014992:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014996:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 80149a2:	6013      	str	r3, [r2, #0]
 80149a4:	2301      	movs	r3, #1
 80149a6:	e018      	b.n	80149da <luaV_execute+0x2c3a>
 80149a8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80149ac:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	791b      	ldrb	r3, [r3, #4]
 80149b4:	2b03      	cmp	r3, #3
 80149b6:	d10f      	bne.n	80149d8 <luaV_execute+0x2c38>
 80149b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80149bc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	ee07 3a90 	vmov	s15, r3
 80149c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149cc:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80149d0:	edc3 7a00 	vstr	s15, [r3]
 80149d4:	2301      	movs	r3, #1
 80149d6:	e000      	b.n	80149da <luaV_execute+0x2c3a>
 80149d8:	2300      	movs	r3, #0
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d051      	beq.n	8014a82 <luaV_execute+0x2ce2>
 80149de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80149e2:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	791b      	ldrb	r3, [r3, #4]
 80149ea:	2b13      	cmp	r3, #19
 80149ec:	d10a      	bne.n	8014a04 <luaV_execute+0x2c64>
 80149ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80149f2:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 80149fe:	6013      	str	r3, [r2, #0]
 8014a00:	2301      	movs	r3, #1
 8014a02:	e018      	b.n	8014a36 <luaV_execute+0x2c96>
 8014a04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a08:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	791b      	ldrb	r3, [r3, #4]
 8014a10:	2b03      	cmp	r3, #3
 8014a12:	d10f      	bne.n	8014a34 <luaV_execute+0x2c94>
 8014a14:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a18:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	ee07 3a90 	vmov	s15, r3
 8014a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a28:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8014a2c:	edc3 7a00 	vstr	s15, [r3]
 8014a30:	2301      	movs	r3, #1
 8014a32:	e000      	b.n	8014a36 <luaV_execute+0x2c96>
 8014a34:	2300      	movs	r3, #0
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d023      	beq.n	8014a82 <luaV_execute+0x2ce2>
 8014a3a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014a3e:	3304      	adds	r3, #4
 8014a40:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014a44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a48:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8014a4c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014a50:	601a      	str	r2, [r3, #0]
 8014a52:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8014a56:	edd3 6a00 	vldr	s13, [r3]
 8014a5a:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8014a5e:	ed93 7a00 	vldr	s14, [r3]
 8014a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014a66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a6a:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	edc3 7a00 	vstr	s15, [r3]
 8014a74:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a78:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2213      	movs	r2, #19
 8014a80:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8014a82:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	bf14      	ite	ne
 8014a8a:	2301      	movne	r3, #1
 8014a8c:	2300      	moveq	r3, #0
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d013      	beq.n	8014abc <luaV_execute+0x2d1c>
 8014a94:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014a98:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014a9c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014aa0:	6818      	ldr	r0, [r3, #0]
 8014aa2:	f7f4 fb1b 	bl	80090dc <luaG_traceexec>
 8014aa6:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014aaa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014aae:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	3308      	adds	r3, #8
 8014ab8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014abc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014ac0:	1d1a      	adds	r2, r3, #4
 8014ac2:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014acc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014ad0:	09db      	lsrs	r3, r3, #7
 8014ad2:	b2db      	uxtb	r3, r3
 8014ad4:	00db      	lsls	r3, r3, #3
 8014ad6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014ada:	4413      	add	r3, r2
 8014adc:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014ae0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014aea:	4a58      	ldr	r2, [pc, #352]	; (8014c4c <luaV_execute+0x2eac>)
 8014aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014af0:	f7fd ba28 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_IDIVK) {
        op_arithK(L, luaV_idiv, luai_numidiv);
 8014af4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014af8:	0c1b      	lsrs	r3, r3, #16
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	00db      	lsls	r3, r3, #3
 8014afe:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014b02:	441a      	add	r2, r3
 8014b04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b08:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8014b0c:	601a      	str	r2, [r3, #0]
 8014b0e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014b12:	0e1b      	lsrs	r3, r3, #24
 8014b14:	00da      	lsls	r2, r3, #3
 8014b16:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b1a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8014b1e:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8014b22:	440a      	add	r2, r1
 8014b24:	601a      	str	r2, [r3, #0]
 8014b26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b2a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	791b      	ldrb	r3, [r3, #4]
 8014b32:	2b03      	cmp	r3, #3
 8014b34:	d149      	bne.n	8014bca <luaV_execute+0x2e2a>
 8014b36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b3a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	791b      	ldrb	r3, [r3, #4]
 8014b42:	2b03      	cmp	r3, #3
 8014b44:	d141      	bne.n	8014bca <luaV_execute+0x2e2a>
 8014b46:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b4a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8014b4e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014b52:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8014b56:	6812      	ldr	r2, [r2, #0]
 8014b58:	6812      	ldr	r2, [r2, #0]
 8014b5a:	601a      	str	r2, [r3, #0]
 8014b5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b60:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8014b64:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014b68:	f5a2 725b 	sub.w	r2, r2, #876	; 0x36c
 8014b6c:	6812      	ldr	r2, [r2, #0]
 8014b6e:	6812      	ldr	r2, [r2, #0]
 8014b70:	601a      	str	r2, [r3, #0]
 8014b72:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014b76:	3304      	adds	r3, #4
 8014b78:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014b7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b80:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8014b84:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014b88:	601a      	str	r2, [r3, #0]
 8014b8a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b8e:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8014b92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b96:	f5a3 715c 	sub.w	r1, r3, #880	; 0x370
 8014b9a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014b9e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014ba2:	6812      	ldr	r2, [r2, #0]
 8014ba4:	6809      	ldr	r1, [r1, #0]
 8014ba6:	6818      	ldr	r0, [r3, #0]
 8014ba8:	f7fc ffb4 	bl	8011b14 <luaV_idiv>
 8014bac:	4602      	mov	r2, r0
 8014bae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014bb2:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	601a      	str	r2, [r3, #0]
 8014bba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014bbe:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	2203      	movs	r2, #3
 8014bc6:	711a      	strb	r2, [r3, #4]
 8014bc8:	e087      	b.n	8014cda <luaV_execute+0x2f3a>
 8014bca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014bce:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	791b      	ldrb	r3, [r3, #4]
 8014bd6:	2b13      	cmp	r3, #19
 8014bd8:	d10a      	bne.n	8014bf0 <luaV_execute+0x2e50>
 8014bda:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014bde:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8014bea:	6013      	str	r3, [r2, #0]
 8014bec:	2301      	movs	r3, #1
 8014bee:	e018      	b.n	8014c22 <luaV_execute+0x2e82>
 8014bf0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014bf4:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	791b      	ldrb	r3, [r3, #4]
 8014bfc:	2b03      	cmp	r3, #3
 8014bfe:	d10f      	bne.n	8014c20 <luaV_execute+0x2e80>
 8014c00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c04:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	ee07 3a90 	vmov	s15, r3
 8014c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c14:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8014c18:	edc3 7a00 	vstr	s15, [r3]
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	e000      	b.n	8014c22 <luaV_execute+0x2e82>
 8014c20:	2300      	movs	r3, #0
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d059      	beq.n	8014cda <luaV_execute+0x2f3a>
 8014c26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c2a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	791b      	ldrb	r3, [r3, #4]
 8014c32:	2b13      	cmp	r3, #19
 8014c34:	d10c      	bne.n	8014c50 <luaV_execute+0x2eb0>
 8014c36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c3a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8014c46:	6013      	str	r3, [r2, #0]
 8014c48:	2301      	movs	r3, #1
 8014c4a:	e01a      	b.n	8014c82 <luaV_execute+0x2ee2>
 8014c4c:	08022d3c 	.word	0x08022d3c
 8014c50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c54:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	791b      	ldrb	r3, [r3, #4]
 8014c5c:	2b03      	cmp	r3, #3
 8014c5e:	d10f      	bne.n	8014c80 <luaV_execute+0x2ee0>
 8014c60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c64:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	ee07 3a90 	vmov	s15, r3
 8014c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c74:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8014c78:	edc3 7a00 	vstr	s15, [r3]
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	e000      	b.n	8014c82 <luaV_execute+0x2ee2>
 8014c80:	2300      	movs	r3, #0
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d029      	beq.n	8014cda <luaV_execute+0x2f3a>
 8014c86:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014c8a:	3304      	adds	r3, #4
 8014c8c:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014c90:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014c94:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8014c98:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014c9c:	601a      	str	r2, [r3, #0]
 8014c9e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8014ca2:	ed93 7a00 	vldr	s14, [r3]
 8014ca6:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8014caa:	edd3 7a00 	vldr	s15, [r3]
 8014cae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014cb2:	eeb0 0a66 	vmov.f32	s0, s13
 8014cb6:	f008 ff19 	bl	801daec <floorf>
 8014cba:	eef0 7a40 	vmov.f32	s15, s0
 8014cbe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014cc2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	edc3 7a00 	vstr	s15, [r3]
 8014ccc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014cd0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	2213      	movs	r2, #19
 8014cd8:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8014cda:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	bf14      	ite	ne
 8014ce2:	2301      	movne	r3, #1
 8014ce4:	2300      	moveq	r3, #0
 8014ce6:	b2db      	uxtb	r3, r3
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d013      	beq.n	8014d14 <luaV_execute+0x2f74>
 8014cec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014cf0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014cf4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014cf8:	6818      	ldr	r0, [r3, #0]
 8014cfa:	f7f4 f9ef 	bl	80090dc <luaG_traceexec>
 8014cfe:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014d02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014d06:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	3308      	adds	r3, #8
 8014d10:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014d14:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014d18:	1d1a      	adds	r2, r3, #4
 8014d1a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014d24:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014d28:	09db      	lsrs	r3, r3, #7
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	00db      	lsls	r3, r3, #3
 8014d2e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014d32:	4413      	add	r3, r2
 8014d34:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014d38:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014d3c:	b2db      	uxtb	r3, r3
 8014d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d42:	4ab1      	ldr	r2, [pc, #708]	; (8015008 <luaV_execute+0x3268>)
 8014d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d48:	f7fd b8fc 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_BANDK) {
        op_bitwiseK(L, l_band);
 8014d4c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014d50:	0c1b      	lsrs	r3, r3, #16
 8014d52:	b2db      	uxtb	r3, r3
 8014d54:	00db      	lsls	r3, r3, #3
 8014d56:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014d5a:	441a      	add	r2, r3
 8014d5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014d60:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8014d64:	601a      	str	r2, [r3, #0]
 8014d66:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014d6a:	0e1b      	lsrs	r3, r3, #24
 8014d6c:	00da      	lsls	r2, r3, #3
 8014d6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014d72:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8014d76:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8014d7a:	440a      	add	r2, r1
 8014d7c:	601a      	str	r2, [r3, #0]
 8014d7e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014d82:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8014d86:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014d8a:	f5a2 7257 	sub.w	r2, r2, #860	; 0x35c
 8014d8e:	6812      	ldr	r2, [r2, #0]
 8014d90:	6812      	ldr	r2, [r2, #0]
 8014d92:	601a      	str	r2, [r3, #0]
 8014d94:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014d98:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	791b      	ldrb	r3, [r3, #4]
 8014da0:	2b03      	cmp	r3, #3
 8014da2:	bf0c      	ite	eq
 8014da4:	2301      	moveq	r3, #1
 8014da6:	2300      	movne	r3, #0
 8014da8:	b2db      	uxtb	r3, r3
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d00c      	beq.n	8014dc8 <luaV_execute+0x3028>
 8014dae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014db2:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014dbe:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014dc2:	601a      	str	r2, [r3, #0]
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	e00f      	b.n	8014de8 <luaV_execute+0x3048>
 8014dc8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8014dcc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014dd0:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	6818      	ldr	r0, [r3, #0]
 8014dd8:	f7fb fd92 	bl	8010900 <luaV_tointegerns>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	bf14      	ite	ne
 8014de2:	2301      	movne	r3, #1
 8014de4:	2300      	moveq	r3, #0
 8014de6:	b2db      	uxtb	r3, r3
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d025      	beq.n	8014e38 <luaV_execute+0x3098>
 8014dec:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014df0:	3304      	adds	r3, #4
 8014df2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014df6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014dfa:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8014dfe:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014e02:	601a      	str	r2, [r3, #0]
 8014e04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e08:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e14:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	4013      	ands	r3, r2
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e22:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	601a      	str	r2, [r3, #0]
 8014e2a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e2e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	2203      	movs	r2, #3
 8014e36:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8014e38:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	bf14      	ite	ne
 8014e40:	2301      	movne	r3, #1
 8014e42:	2300      	moveq	r3, #0
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d013      	beq.n	8014e72 <luaV_execute+0x30d2>
 8014e4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e4e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014e52:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014e56:	6818      	ldr	r0, [r3, #0]
 8014e58:	f7f4 f940 	bl	80090dc <luaG_traceexec>
 8014e5c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014e60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014e64:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	3308      	adds	r3, #8
 8014e6e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014e72:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014e76:	1d1a      	adds	r2, r3, #4
 8014e78:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014e82:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014e86:	09db      	lsrs	r3, r3, #7
 8014e88:	b2db      	uxtb	r3, r3
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014e90:	4413      	add	r3, r2
 8014e92:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014e96:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014e9a:	b2db      	uxtb	r3, r3
 8014e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ea0:	4a59      	ldr	r2, [pc, #356]	; (8015008 <luaV_execute+0x3268>)
 8014ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ea6:	f7fd b84d 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_BORK) {
        op_bitwiseK(L, l_bor);
 8014eaa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014eae:	0c1b      	lsrs	r3, r3, #16
 8014eb0:	b2db      	uxtb	r3, r3
 8014eb2:	00db      	lsls	r3, r3, #3
 8014eb4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014eb8:	441a      	add	r2, r3
 8014eba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ebe:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8014ec2:	601a      	str	r2, [r3, #0]
 8014ec4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014ec8:	0e1b      	lsrs	r3, r3, #24
 8014eca:	00da      	lsls	r2, r3, #3
 8014ecc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ed0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8014ed4:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8014ed8:	440a      	add	r2, r1
 8014eda:	601a      	str	r2, [r3, #0]
 8014edc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ee0:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8014ee4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8014ee8:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8014eec:	6812      	ldr	r2, [r2, #0]
 8014eee:	6812      	ldr	r2, [r2, #0]
 8014ef0:	601a      	str	r2, [r3, #0]
 8014ef2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014ef6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	791b      	ldrb	r3, [r3, #4]
 8014efe:	2b03      	cmp	r3, #3
 8014f00:	bf0c      	ite	eq
 8014f02:	2301      	moveq	r3, #1
 8014f04:	2300      	movne	r3, #0
 8014f06:	b2db      	uxtb	r3, r3
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d00c      	beq.n	8014f26 <luaV_execute+0x3186>
 8014f0c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f10:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	681a      	ldr	r2, [r3, #0]
 8014f18:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f1c:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8014f20:	601a      	str	r2, [r3, #0]
 8014f22:	2301      	movs	r3, #1
 8014f24:	e00f      	b.n	8014f46 <luaV_execute+0x31a6>
 8014f26:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8014f2a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f2e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8014f32:	2200      	movs	r2, #0
 8014f34:	6818      	ldr	r0, [r3, #0]
 8014f36:	f7fb fce3 	bl	8010900 <luaV_tointegerns>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	bf14      	ite	ne
 8014f40:	2301      	movne	r3, #1
 8014f42:	2300      	moveq	r3, #0
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d025      	beq.n	8014f96 <luaV_execute+0x31f6>
 8014f4a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014f4e:	3304      	adds	r3, #4
 8014f50:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8014f54:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f58:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8014f5c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8014f60:	601a      	str	r2, [r3, #0]
 8014f62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f66:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f72:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4313      	orrs	r3, r2
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f80:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	601a      	str	r2, [r3, #0]
 8014f88:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014f8c:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2203      	movs	r2, #3
 8014f94:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8014f96:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	bf14      	ite	ne
 8014f9e:	2301      	movne	r3, #1
 8014fa0:	2300      	moveq	r3, #0
 8014fa2:	b2db      	uxtb	r3, r3
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d013      	beq.n	8014fd0 <luaV_execute+0x3230>
 8014fa8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014fac:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8014fb0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8014fb4:	6818      	ldr	r0, [r3, #0]
 8014fb6:	f7f4 f891 	bl	80090dc <luaG_traceexec>
 8014fba:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8014fbe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8014fc2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	3308      	adds	r3, #8
 8014fcc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8014fd0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8014fd4:	1d1a      	adds	r2, r3, #4
 8014fd6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8014fe0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014fe4:	09db      	lsrs	r3, r3, #7
 8014fe6:	b2db      	uxtb	r3, r3
 8014fe8:	00db      	lsls	r3, r3, #3
 8014fea:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8014fee:	4413      	add	r3, r2
 8014ff0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8014ff4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8014ff8:	b2db      	uxtb	r3, r3
 8014ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ffe:	4a02      	ldr	r2, [pc, #8]	; (8015008 <luaV_execute+0x3268>)
 8015000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015004:	f7fc bf9e 	b.w	8011f44 <luaV_execute+0x1a4>
 8015008:	08022d3c 	.word	0x08022d3c
      }
      vmcase(OP_BXORK) {
        op_bitwiseK(L, l_bxor);
 801500c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015010:	0c1b      	lsrs	r3, r3, #16
 8015012:	b2db      	uxtb	r3, r3
 8015014:	00db      	lsls	r3, r3, #3
 8015016:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801501a:	441a      	add	r2, r3
 801501c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015020:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8015024:	601a      	str	r2, [r3, #0]
 8015026:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801502a:	0e1b      	lsrs	r3, r3, #24
 801502c:	00da      	lsls	r2, r3, #3
 801502e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015032:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8015036:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 801503a:	440a      	add	r2, r1
 801503c:	601a      	str	r2, [r3, #0]
 801503e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015042:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8015046:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801504a:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 801504e:	6812      	ldr	r2, [r2, #0]
 8015050:	6812      	ldr	r2, [r2, #0]
 8015052:	601a      	str	r2, [r3, #0]
 8015054:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015058:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	791b      	ldrb	r3, [r3, #4]
 8015060:	2b03      	cmp	r3, #3
 8015062:	bf0c      	ite	eq
 8015064:	2301      	moveq	r3, #1
 8015066:	2300      	movne	r3, #0
 8015068:	b2db      	uxtb	r3, r3
 801506a:	2b00      	cmp	r3, #0
 801506c:	d00c      	beq.n	8015088 <luaV_execute+0x32e8>
 801506e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015072:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	681a      	ldr	r2, [r3, #0]
 801507a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801507e:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8015082:	601a      	str	r2, [r3, #0]
 8015084:	2301      	movs	r3, #1
 8015086:	e00f      	b.n	80150a8 <luaV_execute+0x3308>
 8015088:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801508c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015090:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8015094:	2200      	movs	r2, #0
 8015096:	6818      	ldr	r0, [r3, #0]
 8015098:	f7fb fc32 	bl	8010900 <luaV_tointegerns>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	bf14      	ite	ne
 80150a2:	2301      	movne	r3, #1
 80150a4:	2300      	moveq	r3, #0
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d025      	beq.n	80150f8 <luaV_execute+0x3358>
 80150ac:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80150b0:	3304      	adds	r3, #4
 80150b2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80150b6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80150ba:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80150be:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80150c2:	601a      	str	r2, [r3, #0]
 80150c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80150c8:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	461a      	mov	r2, r3
 80150d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80150d4:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	4053      	eors	r3, r2
 80150dc:	461a      	mov	r2, r3
 80150de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80150e2:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	601a      	str	r2, [r3, #0]
 80150ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80150ee:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2203      	movs	r2, #3
 80150f6:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80150f8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	bf14      	ite	ne
 8015100:	2301      	movne	r3, #1
 8015102:	2300      	moveq	r3, #0
 8015104:	b2db      	uxtb	r3, r3
 8015106:	2b00      	cmp	r3, #0
 8015108:	d013      	beq.n	8015132 <luaV_execute+0x3392>
 801510a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801510e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015112:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015116:	6818      	ldr	r0, [r3, #0]
 8015118:	f7f3 ffe0 	bl	80090dc <luaG_traceexec>
 801511c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015120:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015124:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	3308      	adds	r3, #8
 801512e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015132:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015136:	1d1a      	adds	r2, r3, #4
 8015138:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015142:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015146:	09db      	lsrs	r3, r3, #7
 8015148:	b2db      	uxtb	r3, r3
 801514a:	00db      	lsls	r3, r3, #3
 801514c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015150:	4413      	add	r3, r2
 8015152:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015156:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801515a:	b2db      	uxtb	r3, r3
 801515c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015160:	4aa6      	ldr	r2, [pc, #664]	; (80153fc <luaV_execute+0x365c>)
 8015162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015166:	f7fc beed 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SHRI) {
        TValue *rb = vRB(i);
 801516a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801516e:	0c1b      	lsrs	r3, r3, #16
 8015170:	b2db      	uxtb	r3, r3
 8015172:	00db      	lsls	r3, r3, #3
 8015174:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015178:	441a      	add	r2, r3
 801517a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801517e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8015182:	601a      	str	r2, [r3, #0]
        int ic = GETARG_sC(i);
 8015184:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015188:	0e1b      	lsrs	r3, r3, #24
 801518a:	461a      	mov	r2, r3
 801518c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015190:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8015194:	3a7f      	subs	r2, #127	; 0x7f
 8015196:	601a      	str	r2, [r3, #0]
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
 8015198:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801519c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	791b      	ldrb	r3, [r3, #4]
 80151a4:	2b03      	cmp	r3, #3
 80151a6:	bf0c      	ite	eq
 80151a8:	2301      	moveq	r3, #1
 80151aa:	2300      	movne	r3, #0
 80151ac:	b2db      	uxtb	r3, r3
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d00c      	beq.n	80151cc <luaV_execute+0x342c>
 80151b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80151b6:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80151c2:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80151c6:	601a      	str	r2, [r3, #0]
 80151c8:	2301      	movs	r3, #1
 80151ca:	e00f      	b.n	80151ec <luaV_execute+0x344c>
 80151cc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80151d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80151d4:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80151d8:	2200      	movs	r2, #0
 80151da:	6818      	ldr	r0, [r3, #0]
 80151dc:	f7fb fb90 	bl	8010900 <luaV_tointegerns>
 80151e0:	4603      	mov	r3, r0
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	bf14      	ite	ne
 80151e6:	2301      	movne	r3, #1
 80151e8:	2300      	moveq	r3, #0
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d028      	beq.n	8015242 <luaV_execute+0x34a2>
          pc++; setivalue(s2v(ra), luaV_shiftl(ib, -ic));
 80151f0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80151f4:	3304      	adds	r3, #4
 80151f6:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80151fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80151fe:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8015202:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015206:	601a      	str	r2, [r3, #0]
 8015208:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801520c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015216:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	425b      	negs	r3, r3
 801521e:	4619      	mov	r1, r3
 8015220:	4610      	mov	r0, r2
 8015222:	f7fc fd2b 	bl	8011c7c <luaV_shiftl>
 8015226:	4602      	mov	r2, r0
 8015228:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801522c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	601a      	str	r2, [r3, #0]
 8015234:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015238:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	2203      	movs	r2, #3
 8015240:	711a      	strb	r2, [r3, #4]
        }
        vmbreak;
 8015242:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015246:	2b00      	cmp	r3, #0
 8015248:	bf14      	ite	ne
 801524a:	2301      	movne	r3, #1
 801524c:	2300      	moveq	r3, #0
 801524e:	b2db      	uxtb	r3, r3
 8015250:	2b00      	cmp	r3, #0
 8015252:	d013      	beq.n	801527c <luaV_execute+0x34dc>
 8015254:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015258:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801525c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015260:	6818      	ldr	r0, [r3, #0]
 8015262:	f7f3 ff3b 	bl	80090dc <luaG_traceexec>
 8015266:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801526a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801526e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	3308      	adds	r3, #8
 8015278:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801527c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015280:	1d1a      	adds	r2, r3, #4
 8015282:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801528c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015290:	09db      	lsrs	r3, r3, #7
 8015292:	b2db      	uxtb	r3, r3
 8015294:	00db      	lsls	r3, r3, #3
 8015296:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801529a:	4413      	add	r3, r2
 801529c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80152a0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152aa:	4a54      	ldr	r2, [pc, #336]	; (80153fc <luaV_execute+0x365c>)
 80152ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152b0:	f7fc be48 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SHLI) {
        TValue *rb = vRB(i);
 80152b4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80152b8:	0c1b      	lsrs	r3, r3, #16
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	00db      	lsls	r3, r3, #3
 80152be:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80152c2:	441a      	add	r2, r3
 80152c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152c8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80152cc:	601a      	str	r2, [r3, #0]
        int ic = GETARG_sC(i);
 80152ce:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80152d2:	0e1b      	lsrs	r3, r3, #24
 80152d4:	461a      	mov	r2, r3
 80152d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152da:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80152de:	3a7f      	subs	r2, #127	; 0x7f
 80152e0:	601a      	str	r2, [r3, #0]
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
 80152e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80152e6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	791b      	ldrb	r3, [r3, #4]
 80152ee:	2b03      	cmp	r3, #3
 80152f0:	bf0c      	ite	eq
 80152f2:	2301      	moveq	r3, #1
 80152f4:	2300      	movne	r3, #0
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d00c      	beq.n	8015316 <luaV_execute+0x3576>
 80152fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015300:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801530c:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 8015310:	601a      	str	r2, [r3, #0]
 8015312:	2301      	movs	r3, #1
 8015314:	e00f      	b.n	8015336 <luaV_execute+0x3596>
 8015316:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801531a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801531e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8015322:	2200      	movs	r2, #0
 8015324:	6818      	ldr	r0, [r3, #0]
 8015326:	f7fb faeb 	bl	8010900 <luaV_tointegerns>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	bf14      	ite	ne
 8015330:	2301      	movne	r3, #1
 8015332:	2300      	moveq	r3, #0
 8015334:	b2db      	uxtb	r3, r3
 8015336:	2b00      	cmp	r3, #0
 8015338:	d026      	beq.n	8015388 <luaV_execute+0x35e8>
          pc++; setivalue(s2v(ra), luaV_shiftl(ic, ib));
 801533a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801533e:	3304      	adds	r3, #4
 8015340:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015344:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015348:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801534c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015350:	601a      	str	r2, [r3, #0]
 8015352:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015356:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015360:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8015364:	4611      	mov	r1, r2
 8015366:	6818      	ldr	r0, [r3, #0]
 8015368:	f7fc fc88 	bl	8011c7c <luaV_shiftl>
 801536c:	4602      	mov	r2, r0
 801536e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015372:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	601a      	str	r2, [r3, #0]
 801537a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801537e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	2203      	movs	r2, #3
 8015386:	711a      	strb	r2, [r3, #4]
        }
        vmbreak;
 8015388:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801538c:	2b00      	cmp	r3, #0
 801538e:	bf14      	ite	ne
 8015390:	2301      	movne	r3, #1
 8015392:	2300      	moveq	r3, #0
 8015394:	b2db      	uxtb	r3, r3
 8015396:	2b00      	cmp	r3, #0
 8015398:	d013      	beq.n	80153c2 <luaV_execute+0x3622>
 801539a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801539e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80153a2:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80153a6:	6818      	ldr	r0, [r3, #0]
 80153a8:	f7f3 fe98 	bl	80090dc <luaG_traceexec>
 80153ac:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80153b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80153b4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	3308      	adds	r3, #8
 80153be:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80153c2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80153c6:	1d1a      	adds	r2, r3, #4
 80153c8:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80153d2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80153d6:	09db      	lsrs	r3, r3, #7
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	00db      	lsls	r3, r3, #3
 80153dc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80153e0:	4413      	add	r3, r2
 80153e2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80153e6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153f0:	4a02      	ldr	r2, [pc, #8]	; (80153fc <luaV_execute+0x365c>)
 80153f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153f6:	f7fc bda5 	b.w	8011f44 <luaV_execute+0x1a4>
 80153fa:	bf00      	nop
 80153fc:	08022d3c 	.word	0x08022d3c
      }
      vmcase(OP_ADD) {
        op_arith(L, l_addi, luai_numadd);
 8015400:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015404:	0c1b      	lsrs	r3, r3, #16
 8015406:	b2db      	uxtb	r3, r3
 8015408:	00db      	lsls	r3, r3, #3
 801540a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801540e:	441a      	add	r2, r3
 8015410:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015414:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8015418:	601a      	str	r2, [r3, #0]
 801541a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801541e:	0e1b      	lsrs	r3, r3, #24
 8015420:	00db      	lsls	r3, r3, #3
 8015422:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015426:	441a      	add	r2, r3
 8015428:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801542c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8015430:	601a      	str	r2, [r3, #0]
 8015432:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015436:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	791b      	ldrb	r3, [r3, #4]
 801543e:	2b03      	cmp	r3, #3
 8015440:	d143      	bne.n	80154ca <luaV_execute+0x372a>
 8015442:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015446:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	791b      	ldrb	r3, [r3, #4]
 801544e:	2b03      	cmp	r3, #3
 8015450:	d13b      	bne.n	80154ca <luaV_execute+0x372a>
 8015452:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015456:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801545a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801545e:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8015462:	6812      	ldr	r2, [r2, #0]
 8015464:	6812      	ldr	r2, [r2, #0]
 8015466:	601a      	str	r2, [r3, #0]
 8015468:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801546c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8015470:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015474:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 8015478:	6812      	ldr	r2, [r2, #0]
 801547a:	6812      	ldr	r2, [r2, #0]
 801547c:	601a      	str	r2, [r3, #0]
 801547e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015482:	3304      	adds	r3, #4
 8015484:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015488:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801548c:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8015490:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015494:	601a      	str	r2, [r3, #0]
 8015496:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801549a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154a4:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4413      	add	r3, r2
 80154ac:	461a      	mov	r2, r3
 80154ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154b2:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	601a      	str	r2, [r3, #0]
 80154ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154be:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	2203      	movs	r2, #3
 80154c6:	711a      	strb	r2, [r3, #4]
 80154c8:	e07f      	b.n	80155ca <luaV_execute+0x382a>
 80154ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154ce:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	791b      	ldrb	r3, [r3, #4]
 80154d6:	2b13      	cmp	r3, #19
 80154d8:	d10a      	bne.n	80154f0 <luaV_execute+0x3750>
 80154da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154de:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80154ea:	6013      	str	r3, [r2, #0]
 80154ec:	2301      	movs	r3, #1
 80154ee:	e018      	b.n	8015522 <luaV_execute+0x3782>
 80154f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154f4:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	791b      	ldrb	r3, [r3, #4]
 80154fc:	2b03      	cmp	r3, #3
 80154fe:	d10f      	bne.n	8015520 <luaV_execute+0x3780>
 8015500:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015504:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	ee07 3a90 	vmov	s15, r3
 8015510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015514:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8015518:	edc3 7a00 	vstr	s15, [r3]
 801551c:	2301      	movs	r3, #1
 801551e:	e000      	b.n	8015522 <luaV_execute+0x3782>
 8015520:	2300      	movs	r3, #0
 8015522:	2b00      	cmp	r3, #0
 8015524:	d051      	beq.n	80155ca <luaV_execute+0x382a>
 8015526:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801552a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	791b      	ldrb	r3, [r3, #4]
 8015532:	2b13      	cmp	r3, #19
 8015534:	d10a      	bne.n	801554c <luaV_execute+0x37ac>
 8015536:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801553a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 8015546:	6013      	str	r3, [r2, #0]
 8015548:	2301      	movs	r3, #1
 801554a:	e018      	b.n	801557e <luaV_execute+0x37de>
 801554c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015550:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	791b      	ldrb	r3, [r3, #4]
 8015558:	2b03      	cmp	r3, #3
 801555a:	d10f      	bne.n	801557c <luaV_execute+0x37dc>
 801555c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015560:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	ee07 3a90 	vmov	s15, r3
 801556c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015570:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8015574:	edc3 7a00 	vstr	s15, [r3]
 8015578:	2301      	movs	r3, #1
 801557a:	e000      	b.n	801557e <luaV_execute+0x37de>
 801557c:	2300      	movs	r3, #0
 801557e:	2b00      	cmp	r3, #0
 8015580:	d023      	beq.n	80155ca <luaV_execute+0x382a>
 8015582:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015586:	3304      	adds	r3, #4
 8015588:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801558c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015590:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8015594:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015598:	601a      	str	r2, [r3, #0]
 801559a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 801559e:	ed93 7a00 	vldr	s14, [r3]
 80155a2:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 80155a6:	edd3 7a00 	vldr	s15, [r3]
 80155aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80155b2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	edc3 7a00 	vstr	s15, [r3]
 80155bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80155c0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	2213      	movs	r2, #19
 80155c8:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80155ca:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	bf14      	ite	ne
 80155d2:	2301      	movne	r3, #1
 80155d4:	2300      	moveq	r3, #0
 80155d6:	b2db      	uxtb	r3, r3
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d013      	beq.n	8015604 <luaV_execute+0x3864>
 80155dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80155e0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80155e4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80155e8:	6818      	ldr	r0, [r3, #0]
 80155ea:	f7f3 fd77 	bl	80090dc <luaG_traceexec>
 80155ee:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80155f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80155f6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	3308      	adds	r3, #8
 8015600:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015604:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015608:	1d1a      	adds	r2, r3, #4
 801560a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015614:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015618:	09db      	lsrs	r3, r3, #7
 801561a:	b2db      	uxtb	r3, r3
 801561c:	00db      	lsls	r3, r3, #3
 801561e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015622:	4413      	add	r3, r2
 8015624:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015628:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801562c:	b2db      	uxtb	r3, r3
 801562e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015632:	4ac4      	ldr	r2, [pc, #784]	; (8015944 <luaV_execute+0x3ba4>)
 8015634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015638:	f7fc bc84 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SUB) {
        op_arith(L, l_subi, luai_numsub);
 801563c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015640:	0c1b      	lsrs	r3, r3, #16
 8015642:	b2db      	uxtb	r3, r3
 8015644:	00db      	lsls	r3, r3, #3
 8015646:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801564a:	441a      	add	r2, r3
 801564c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015650:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8015654:	601a      	str	r2, [r3, #0]
 8015656:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801565a:	0e1b      	lsrs	r3, r3, #24
 801565c:	00db      	lsls	r3, r3, #3
 801565e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015662:	441a      	add	r2, r3
 8015664:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015668:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801566c:	601a      	str	r2, [r3, #0]
 801566e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015672:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	791b      	ldrb	r3, [r3, #4]
 801567a:	2b03      	cmp	r3, #3
 801567c:	d143      	bne.n	8015706 <luaV_execute+0x3966>
 801567e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015682:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	791b      	ldrb	r3, [r3, #4]
 801568a:	2b03      	cmp	r3, #3
 801568c:	d13b      	bne.n	8015706 <luaV_execute+0x3966>
 801568e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015692:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8015696:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801569a:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 801569e:	6812      	ldr	r2, [r2, #0]
 80156a0:	6812      	ldr	r2, [r2, #0]
 80156a2:	601a      	str	r2, [r3, #0]
 80156a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156a8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80156ac:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80156b0:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 80156b4:	6812      	ldr	r2, [r2, #0]
 80156b6:	6812      	ldr	r2, [r2, #0]
 80156b8:	601a      	str	r2, [r3, #0]
 80156ba:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80156be:	3304      	adds	r3, #4
 80156c0:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80156c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156c8:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80156cc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80156d0:	601a      	str	r2, [r3, #0]
 80156d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156d6:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156e0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	1ad3      	subs	r3, r2, r3
 80156e8:	461a      	mov	r2, r3
 80156ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156ee:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	601a      	str	r2, [r3, #0]
 80156f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80156fa:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2203      	movs	r2, #3
 8015702:	711a      	strb	r2, [r3, #4]
 8015704:	e07f      	b.n	8015806 <luaV_execute+0x3a66>
 8015706:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801570a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	791b      	ldrb	r3, [r3, #4]
 8015712:	2b13      	cmp	r3, #19
 8015714:	d10a      	bne.n	801572c <luaV_execute+0x398c>
 8015716:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801571a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8015726:	6013      	str	r3, [r2, #0]
 8015728:	2301      	movs	r3, #1
 801572a:	e018      	b.n	801575e <luaV_execute+0x39be>
 801572c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015730:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	791b      	ldrb	r3, [r3, #4]
 8015738:	2b03      	cmp	r3, #3
 801573a:	d10f      	bne.n	801575c <luaV_execute+0x39bc>
 801573c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015740:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	ee07 3a90 	vmov	s15, r3
 801574c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015750:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8015754:	edc3 7a00 	vstr	s15, [r3]
 8015758:	2301      	movs	r3, #1
 801575a:	e000      	b.n	801575e <luaV_execute+0x39be>
 801575c:	2300      	movs	r3, #0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d051      	beq.n	8015806 <luaV_execute+0x3a66>
 8015762:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015766:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	791b      	ldrb	r3, [r3, #4]
 801576e:	2b13      	cmp	r3, #19
 8015770:	d10a      	bne.n	8015788 <luaV_execute+0x39e8>
 8015772:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015776:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
 8015782:	6013      	str	r3, [r2, #0]
 8015784:	2301      	movs	r3, #1
 8015786:	e018      	b.n	80157ba <luaV_execute+0x3a1a>
 8015788:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801578c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	791b      	ldrb	r3, [r3, #4]
 8015794:	2b03      	cmp	r3, #3
 8015796:	d10f      	bne.n	80157b8 <luaV_execute+0x3a18>
 8015798:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801579c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	ee07 3a90 	vmov	s15, r3
 80157a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157ac:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 80157b0:	edc3 7a00 	vstr	s15, [r3]
 80157b4:	2301      	movs	r3, #1
 80157b6:	e000      	b.n	80157ba <luaV_execute+0x3a1a>
 80157b8:	2300      	movs	r3, #0
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d023      	beq.n	8015806 <luaV_execute+0x3a66>
 80157be:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80157c2:	3304      	adds	r3, #4
 80157c4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80157c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80157cc:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80157d0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80157d4:	601a      	str	r2, [r3, #0]
 80157d6:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80157da:	ed93 7a00 	vldr	s14, [r3]
 80157de:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 80157e2:	edd3 7a00 	vldr	s15, [r3]
 80157e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80157ee:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	edc3 7a00 	vstr	s15, [r3]
 80157f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80157fc:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	2213      	movs	r2, #19
 8015804:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8015806:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801580a:	2b00      	cmp	r3, #0
 801580c:	bf14      	ite	ne
 801580e:	2301      	movne	r3, #1
 8015810:	2300      	moveq	r3, #0
 8015812:	b2db      	uxtb	r3, r3
 8015814:	2b00      	cmp	r3, #0
 8015816:	d013      	beq.n	8015840 <luaV_execute+0x3aa0>
 8015818:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801581c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015820:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015824:	6818      	ldr	r0, [r3, #0]
 8015826:	f7f3 fc59 	bl	80090dc <luaG_traceexec>
 801582a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801582e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015832:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	3308      	adds	r3, #8
 801583c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015840:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015844:	1d1a      	adds	r2, r3, #4
 8015846:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015850:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015854:	09db      	lsrs	r3, r3, #7
 8015856:	b2db      	uxtb	r3, r3
 8015858:	00db      	lsls	r3, r3, #3
 801585a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801585e:	4413      	add	r3, r2
 8015860:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015864:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015868:	b2db      	uxtb	r3, r3
 801586a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801586e:	4a35      	ldr	r2, [pc, #212]	; (8015944 <luaV_execute+0x3ba4>)
 8015870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015874:	f7fc bb66 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_MUL) {
        op_arith(L, l_muli, luai_nummul);
 8015878:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801587c:	0c1b      	lsrs	r3, r3, #16
 801587e:	b2db      	uxtb	r3, r3
 8015880:	00db      	lsls	r3, r3, #3
 8015882:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015886:	441a      	add	r2, r3
 8015888:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801588c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015890:	601a      	str	r2, [r3, #0]
 8015892:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015896:	0e1b      	lsrs	r3, r3, #24
 8015898:	00db      	lsls	r3, r3, #3
 801589a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801589e:	441a      	add	r2, r3
 80158a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80158a4:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80158a8:	601a      	str	r2, [r3, #0]
 80158aa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80158ae:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	791b      	ldrb	r3, [r3, #4]
 80158b6:	2b03      	cmp	r3, #3
 80158b8:	d146      	bne.n	8015948 <luaV_execute+0x3ba8>
 80158ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80158be:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	791b      	ldrb	r3, [r3, #4]
 80158c6:	2b03      	cmp	r3, #3
 80158c8:	d13e      	bne.n	8015948 <luaV_execute+0x3ba8>
 80158ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80158ce:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80158d2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80158d6:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 80158da:	6812      	ldr	r2, [r2, #0]
 80158dc:	6812      	ldr	r2, [r2, #0]
 80158de:	601a      	str	r2, [r3, #0]
 80158e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80158e4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80158e8:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80158ec:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 80158f0:	6812      	ldr	r2, [r2, #0]
 80158f2:	6812      	ldr	r2, [r2, #0]
 80158f4:	601a      	str	r2, [r3, #0]
 80158f6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80158fa:	3304      	adds	r3, #4
 80158fc:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015900:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015904:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8015908:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801590c:	601a      	str	r2, [r3, #0]
 801590e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015912:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801591c:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 8015920:	6812      	ldr	r2, [r2, #0]
 8015922:	fb02 f303 	mul.w	r3, r2, r3
 8015926:	461a      	mov	r2, r3
 8015928:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801592c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	601a      	str	r2, [r3, #0]
 8015934:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015938:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2203      	movs	r2, #3
 8015940:	711a      	strb	r2, [r3, #4]
 8015942:	e081      	b.n	8015a48 <luaV_execute+0x3ca8>
 8015944:	08022d3c 	.word	0x08022d3c
 8015948:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801594c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	791b      	ldrb	r3, [r3, #4]
 8015954:	2b13      	cmp	r3, #19
 8015956:	d10a      	bne.n	801596e <luaV_execute+0x3bce>
 8015958:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801595c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8015968:	6013      	str	r3, [r2, #0]
 801596a:	2301      	movs	r3, #1
 801596c:	e018      	b.n	80159a0 <luaV_execute+0x3c00>
 801596e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015972:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	791b      	ldrb	r3, [r3, #4]
 801597a:	2b03      	cmp	r3, #3
 801597c:	d10f      	bne.n	801599e <luaV_execute+0x3bfe>
 801597e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015982:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	ee07 3a90 	vmov	s15, r3
 801598e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015992:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8015996:	edc3 7a00 	vstr	s15, [r3]
 801599a:	2301      	movs	r3, #1
 801599c:	e000      	b.n	80159a0 <luaV_execute+0x3c00>
 801599e:	2300      	movs	r3, #0
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d051      	beq.n	8015a48 <luaV_execute+0x3ca8>
 80159a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159a8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	791b      	ldrb	r3, [r3, #4]
 80159b0:	2b13      	cmp	r3, #19
 80159b2:	d10a      	bne.n	80159ca <luaV_execute+0x3c2a>
 80159b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159b8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 80159c4:	6013      	str	r3, [r2, #0]
 80159c6:	2301      	movs	r3, #1
 80159c8:	e018      	b.n	80159fc <luaV_execute+0x3c5c>
 80159ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159ce:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	791b      	ldrb	r3, [r3, #4]
 80159d6:	2b03      	cmp	r3, #3
 80159d8:	d10f      	bne.n	80159fa <luaV_execute+0x3c5a>
 80159da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80159de:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	ee07 3a90 	vmov	s15, r3
 80159ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80159ee:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80159f2:	edc3 7a00 	vstr	s15, [r3]
 80159f6:	2301      	movs	r3, #1
 80159f8:	e000      	b.n	80159fc <luaV_execute+0x3c5c>
 80159fa:	2300      	movs	r3, #0
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d023      	beq.n	8015a48 <luaV_execute+0x3ca8>
 8015a00:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015a04:	3304      	adds	r3, #4
 8015a06:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015a0a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a0e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8015a12:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015a16:	601a      	str	r2, [r3, #0]
 8015a18:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8015a1c:	ed93 7a00 	vldr	s14, [r3]
 8015a20:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8015a24:	edd3 7a00 	vldr	s15, [r3]
 8015a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a2c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a30:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	edc3 7a00 	vstr	s15, [r3]
 8015a3a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a3e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	2213      	movs	r2, #19
 8015a46:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8015a48:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	bf14      	ite	ne
 8015a50:	2301      	movne	r3, #1
 8015a52:	2300      	moveq	r3, #0
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d013      	beq.n	8015a82 <luaV_execute+0x3ce2>
 8015a5a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a5e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015a62:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015a66:	6818      	ldr	r0, [r3, #0]
 8015a68:	f7f3 fb38 	bl	80090dc <luaG_traceexec>
 8015a6c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015a70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015a74:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	3308      	adds	r3, #8
 8015a7e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015a82:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015a86:	1d1a      	adds	r2, r3, #4
 8015a88:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015a92:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015a96:	09db      	lsrs	r3, r3, #7
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	00db      	lsls	r3, r3, #3
 8015a9c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015aa0:	4413      	add	r3, r2
 8015aa2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015aa6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015aaa:	b2db      	uxtb	r3, r3
 8015aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ab0:	4ac4      	ldr	r2, [pc, #784]	; (8015dc4 <luaV_execute+0x4024>)
 8015ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ab6:	f7fc ba45 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_MOD) {
        op_arith(L, luaV_mod, luaV_modf);
 8015aba:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015abe:	0c1b      	lsrs	r3, r3, #16
 8015ac0:	b2db      	uxtb	r3, r3
 8015ac2:	00db      	lsls	r3, r3, #3
 8015ac4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015ac8:	441a      	add	r2, r3
 8015aca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ace:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015ad2:	601a      	str	r2, [r3, #0]
 8015ad4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015ad8:	0e1b      	lsrs	r3, r3, #24
 8015ada:	00db      	lsls	r3, r3, #3
 8015adc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015ae0:	441a      	add	r2, r3
 8015ae2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ae6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015aea:	601a      	str	r2, [r3, #0]
 8015aec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015af0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	791b      	ldrb	r3, [r3, #4]
 8015af8:	2b03      	cmp	r3, #3
 8015afa:	d149      	bne.n	8015b90 <luaV_execute+0x3df0>
 8015afc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b00:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	791b      	ldrb	r3, [r3, #4]
 8015b08:	2b03      	cmp	r3, #3
 8015b0a:	d141      	bne.n	8015b90 <luaV_execute+0x3df0>
 8015b0c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b10:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8015b14:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015b18:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8015b1c:	6812      	ldr	r2, [r2, #0]
 8015b1e:	6812      	ldr	r2, [r2, #0]
 8015b20:	601a      	str	r2, [r3, #0]
 8015b22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b26:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015b2a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015b2e:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8015b32:	6812      	ldr	r2, [r2, #0]
 8015b34:	6812      	ldr	r2, [r2, #0]
 8015b36:	601a      	str	r2, [r3, #0]
 8015b38:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015b3c:	3304      	adds	r3, #4
 8015b3e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015b42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b46:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8015b4a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015b4e:	601a      	str	r2, [r3, #0]
 8015b50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b54:	f5a3 7233 	sub.w	r2, r3, #716	; 0x2cc
 8015b58:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b5c:	f5a3 7132 	sub.w	r1, r3, #712	; 0x2c8
 8015b60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b64:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015b68:	6812      	ldr	r2, [r2, #0]
 8015b6a:	6809      	ldr	r1, [r1, #0]
 8015b6c:	6818      	ldr	r0, [r3, #0]
 8015b6e:	f7fc f809 	bl	8011b84 <luaV_mod>
 8015b72:	4602      	mov	r2, r0
 8015b74:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b78:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	601a      	str	r2, [r3, #0]
 8015b80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b84:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2203      	movs	r2, #3
 8015b8c:	711a      	strb	r2, [r3, #4]
 8015b8e:	e086      	b.n	8015c9e <luaV_execute+0x3efe>
 8015b90:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015b94:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	791b      	ldrb	r3, [r3, #4]
 8015b9c:	2b13      	cmp	r3, #19
 8015b9e:	d10a      	bne.n	8015bb6 <luaV_execute+0x3e16>
 8015ba0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ba4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8015bb0:	6013      	str	r3, [r2, #0]
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	e018      	b.n	8015be8 <luaV_execute+0x3e48>
 8015bb6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015bba:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	791b      	ldrb	r3, [r3, #4]
 8015bc2:	2b03      	cmp	r3, #3
 8015bc4:	d10f      	bne.n	8015be6 <luaV_execute+0x3e46>
 8015bc6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015bca:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	ee07 3a90 	vmov	s15, r3
 8015bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015bda:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8015bde:	edc3 7a00 	vstr	s15, [r3]
 8015be2:	2301      	movs	r3, #1
 8015be4:	e000      	b.n	8015be8 <luaV_execute+0x3e48>
 8015be6:	2300      	movs	r3, #0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d058      	beq.n	8015c9e <luaV_execute+0x3efe>
 8015bec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015bf0:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	791b      	ldrb	r3, [r3, #4]
 8015bf8:	2b13      	cmp	r3, #19
 8015bfa:	d10a      	bne.n	8015c12 <luaV_execute+0x3e72>
 8015bfc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c00:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 8015c0c:	6013      	str	r3, [r2, #0]
 8015c0e:	2301      	movs	r3, #1
 8015c10:	e018      	b.n	8015c44 <luaV_execute+0x3ea4>
 8015c12:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c16:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	791b      	ldrb	r3, [r3, #4]
 8015c1e:	2b03      	cmp	r3, #3
 8015c20:	d10f      	bne.n	8015c42 <luaV_execute+0x3ea2>
 8015c22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c26:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	ee07 3a90 	vmov	s15, r3
 8015c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c36:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8015c3a:	edc3 7a00 	vstr	s15, [r3]
 8015c3e:	2301      	movs	r3, #1
 8015c40:	e000      	b.n	8015c44 <luaV_execute+0x3ea4>
 8015c42:	2300      	movs	r3, #0
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d02a      	beq.n	8015c9e <luaV_execute+0x3efe>
 8015c48:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015c4c:	3304      	adds	r3, #4
 8015c4e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015c52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c56:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8015c5a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015c5e:	601a      	str	r2, [r3, #0]
 8015c60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c64:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015c68:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 8015c6c:	edd2 0a00 	vldr	s1, [r2]
 8015c70:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8015c74:	ed92 0a00 	vldr	s0, [r2]
 8015c78:	6818      	ldr	r0, [r3, #0]
 8015c7a:	f7fb ffb7 	bl	8011bec <luaV_modf>
 8015c7e:	eef0 7a40 	vmov.f32	s15, s0
 8015c82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c86:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	edc3 7a00 	vstr	s15, [r3]
 8015c90:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015c94:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2213      	movs	r2, #19
 8015c9c:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8015c9e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	bf14      	ite	ne
 8015ca6:	2301      	movne	r3, #1
 8015ca8:	2300      	moveq	r3, #0
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d013      	beq.n	8015cd8 <luaV_execute+0x3f38>
 8015cb0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015cb4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015cb8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015cbc:	6818      	ldr	r0, [r3, #0]
 8015cbe:	f7f3 fa0d 	bl	80090dc <luaG_traceexec>
 8015cc2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015cc6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015cca:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	3308      	adds	r3, #8
 8015cd4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015cd8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015cdc:	1d1a      	adds	r2, r3, #4
 8015cde:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015ce8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015cec:	09db      	lsrs	r3, r3, #7
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015cf6:	4413      	add	r3, r2
 8015cf8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015cfc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015d00:	b2db      	uxtb	r3, r3
 8015d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d06:	4a2f      	ldr	r2, [pc, #188]	; (8015dc4 <luaV_execute+0x4024>)
 8015d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d0c:	f7fc b91a 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_POW) {
        op_arithf(L, luai_numpow);
 8015d10:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015d14:	0c1b      	lsrs	r3, r3, #16
 8015d16:	b2db      	uxtb	r3, r3
 8015d18:	00db      	lsls	r3, r3, #3
 8015d1a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015d1e:	441a      	add	r2, r3
 8015d20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015d24:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015d28:	601a      	str	r2, [r3, #0]
 8015d2a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015d2e:	0e1b      	lsrs	r3, r3, #24
 8015d30:	00db      	lsls	r3, r3, #3
 8015d32:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015d36:	441a      	add	r2, r3
 8015d38:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015d3c:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015d40:	601a      	str	r2, [r3, #0]
 8015d42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015d46:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	791b      	ldrb	r3, [r3, #4]
 8015d4e:	2b13      	cmp	r3, #19
 8015d50:	d10a      	bne.n	8015d68 <luaV_execute+0x3fc8>
 8015d52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015d56:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8015d62:	6013      	str	r3, [r2, #0]
 8015d64:	2301      	movs	r3, #1
 8015d66:	e018      	b.n	8015d9a <luaV_execute+0x3ffa>
 8015d68:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015d6c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	791b      	ldrb	r3, [r3, #4]
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	d10f      	bne.n	8015d98 <luaV_execute+0x3ff8>
 8015d78:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015d7c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	ee07 3a90 	vmov	s15, r3
 8015d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d8c:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8015d90:	edc3 7a00 	vstr	s15, [r3]
 8015d94:	2301      	movs	r3, #1
 8015d96:	e000      	b.n	8015d9a <luaV_execute+0x3ffa>
 8015d98:	2300      	movs	r3, #0
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d067      	beq.n	8015e6e <luaV_execute+0x40ce>
 8015d9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015da2:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	791b      	ldrb	r3, [r3, #4]
 8015daa:	2b13      	cmp	r3, #19
 8015dac:	d10c      	bne.n	8015dc8 <luaV_execute+0x4028>
 8015dae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015db2:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 8015dbe:	6013      	str	r3, [r2, #0]
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	e01a      	b.n	8015dfa <luaV_execute+0x405a>
 8015dc4:	08022d3c 	.word	0x08022d3c
 8015dc8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015dcc:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	791b      	ldrb	r3, [r3, #4]
 8015dd4:	2b03      	cmp	r3, #3
 8015dd6:	d10f      	bne.n	8015df8 <luaV_execute+0x4058>
 8015dd8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ddc:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	ee07 3a90 	vmov	s15, r3
 8015de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dec:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8015df0:	edc3 7a00 	vstr	s15, [r3]
 8015df4:	2301      	movs	r3, #1
 8015df6:	e000      	b.n	8015dfa <luaV_execute+0x405a>
 8015df8:	2300      	movs	r3, #0
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d037      	beq.n	8015e6e <luaV_execute+0x40ce>
 8015dfe:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015e02:	3304      	adds	r3, #4
 8015e04:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015e08:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e0c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8015e10:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015e14:	601a      	str	r2, [r3, #0]
 8015e16:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8015e1a:	edd3 7a00 	vldr	s15, [r3]
 8015e1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015e22:	eef4 7a47 	vcmp.f32	s15, s14
 8015e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2a:	d106      	bne.n	8015e3a <luaV_execute+0x409a>
 8015e2c:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8015e30:	edd3 7a00 	vldr	s15, [r3]
 8015e34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015e38:	e00b      	b.n	8015e52 <luaV_execute+0x40b2>
 8015e3a:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8015e3e:	edd3 0a00 	vldr	s1, [r3]
 8015e42:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8015e46:	ed93 0a00 	vldr	s0, [r3]
 8015e4a:	f007 ff49 	bl	801dce0 <powf>
 8015e4e:	eef0 7a40 	vmov.f32	s15, s0
 8015e52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e56:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	edc3 7a00 	vstr	s15, [r3]
 8015e60:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e64:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	2213      	movs	r2, #19
 8015e6c:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8015e6e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	bf14      	ite	ne
 8015e76:	2301      	movne	r3, #1
 8015e78:	2300      	moveq	r3, #0
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d013      	beq.n	8015ea8 <luaV_execute+0x4108>
 8015e80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e84:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015e88:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015e8c:	6818      	ldr	r0, [r3, #0]
 8015e8e:	f7f3 f925 	bl	80090dc <luaG_traceexec>
 8015e92:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8015e96:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015e9a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	3308      	adds	r3, #8
 8015ea4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015ea8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015eac:	1d1a      	adds	r2, r3, #4
 8015eae:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8015eb8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015ebc:	09db      	lsrs	r3, r3, #7
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	00db      	lsls	r3, r3, #3
 8015ec2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015ec6:	4413      	add	r3, r2
 8015ec8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015ecc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015ed0:	b2db      	uxtb	r3, r3
 8015ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ed6:	4ac1      	ldr	r2, [pc, #772]	; (80161dc <luaV_execute+0x443c>)
 8015ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015edc:	f7fc b832 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_DIV) {  /* float division (always with floats) */
        op_arithf(L, luai_numdiv);
 8015ee0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015ee4:	0c1b      	lsrs	r3, r3, #16
 8015ee6:	b2db      	uxtb	r3, r3
 8015ee8:	00db      	lsls	r3, r3, #3
 8015eea:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015eee:	441a      	add	r2, r3
 8015ef0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ef4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8015ef8:	601a      	str	r2, [r3, #0]
 8015efa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8015efe:	0e1b      	lsrs	r3, r3, #24
 8015f00:	00db      	lsls	r3, r3, #3
 8015f02:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015f06:	441a      	add	r2, r3
 8015f08:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f0c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8015f10:	601a      	str	r2, [r3, #0]
 8015f12:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f16:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	791b      	ldrb	r3, [r3, #4]
 8015f1e:	2b13      	cmp	r3, #19
 8015f20:	d10a      	bne.n	8015f38 <luaV_execute+0x4198>
 8015f22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f26:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8015f32:	6013      	str	r3, [r2, #0]
 8015f34:	2301      	movs	r3, #1
 8015f36:	e018      	b.n	8015f6a <luaV_execute+0x41ca>
 8015f38:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f3c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	791b      	ldrb	r3, [r3, #4]
 8015f44:	2b03      	cmp	r3, #3
 8015f46:	d10f      	bne.n	8015f68 <luaV_execute+0x41c8>
 8015f48:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f4c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	ee07 3a90 	vmov	s15, r3
 8015f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f5c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8015f60:	edc3 7a00 	vstr	s15, [r3]
 8015f64:	2301      	movs	r3, #1
 8015f66:	e000      	b.n	8015f6a <luaV_execute+0x41ca>
 8015f68:	2300      	movs	r3, #0
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d051      	beq.n	8016012 <luaV_execute+0x4272>
 8015f6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f72:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	791b      	ldrb	r3, [r3, #4]
 8015f7a:	2b13      	cmp	r3, #19
 8015f7c:	d10a      	bne.n	8015f94 <luaV_execute+0x41f4>
 8015f7e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f82:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 8015f8e:	6013      	str	r3, [r2, #0]
 8015f90:	2301      	movs	r3, #1
 8015f92:	e018      	b.n	8015fc6 <luaV_execute+0x4226>
 8015f94:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015f98:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	791b      	ldrb	r3, [r3, #4]
 8015fa0:	2b03      	cmp	r3, #3
 8015fa2:	d10f      	bne.n	8015fc4 <luaV_execute+0x4224>
 8015fa4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015fa8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	ee07 3a90 	vmov	s15, r3
 8015fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fb8:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8015fbc:	edc3 7a00 	vstr	s15, [r3]
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	e000      	b.n	8015fc6 <luaV_execute+0x4226>
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d023      	beq.n	8016012 <luaV_execute+0x4272>
 8015fca:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8015fce:	3304      	adds	r3, #4
 8015fd0:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8015fd4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015fd8:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8015fdc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8015fe0:	601a      	str	r2, [r3, #0]
 8015fe2:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8015fe6:	edd3 6a00 	vldr	s13, [r3]
 8015fea:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8015fee:	ed93 7a00 	vldr	s14, [r3]
 8015ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ff6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015ffa:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	edc3 7a00 	vstr	s15, [r3]
 8016004:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016008:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	2213      	movs	r2, #19
 8016010:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8016012:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016016:	2b00      	cmp	r3, #0
 8016018:	bf14      	ite	ne
 801601a:	2301      	movne	r3, #1
 801601c:	2300      	moveq	r3, #0
 801601e:	b2db      	uxtb	r3, r3
 8016020:	2b00      	cmp	r3, #0
 8016022:	d013      	beq.n	801604c <luaV_execute+0x42ac>
 8016024:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016028:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801602c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016030:	6818      	ldr	r0, [r3, #0]
 8016032:	f7f3 f853 	bl	80090dc <luaG_traceexec>
 8016036:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801603a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801603e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	3308      	adds	r3, #8
 8016048:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801604c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016050:	1d1a      	adds	r2, r3, #4
 8016052:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801605c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016060:	09db      	lsrs	r3, r3, #7
 8016062:	b2db      	uxtb	r3, r3
 8016064:	00db      	lsls	r3, r3, #3
 8016066:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801606a:	4413      	add	r3, r2
 801606c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016070:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016074:	b2db      	uxtb	r3, r3
 8016076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801607a:	4a58      	ldr	r2, [pc, #352]	; (80161dc <luaV_execute+0x443c>)
 801607c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016080:	f7fb bf60 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_IDIV) {  /* floor division */
        op_arith(L, luaV_idiv, luai_numidiv);
 8016084:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016088:	0c1b      	lsrs	r3, r3, #16
 801608a:	b2db      	uxtb	r3, r3
 801608c:	00db      	lsls	r3, r3, #3
 801608e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016092:	441a      	add	r2, r3
 8016094:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016098:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801609c:	601a      	str	r2, [r3, #0]
 801609e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80160a2:	0e1b      	lsrs	r3, r3, #24
 80160a4:	00db      	lsls	r3, r3, #3
 80160a6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80160aa:	441a      	add	r2, r3
 80160ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80160b0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80160b4:	601a      	str	r2, [r3, #0]
 80160b6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80160ba:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	791b      	ldrb	r3, [r3, #4]
 80160c2:	2b03      	cmp	r3, #3
 80160c4:	d149      	bne.n	801615a <luaV_execute+0x43ba>
 80160c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80160ca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	791b      	ldrb	r3, [r3, #4]
 80160d2:	2b03      	cmp	r3, #3
 80160d4:	d141      	bne.n	801615a <luaV_execute+0x43ba>
 80160d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80160da:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80160de:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80160e2:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 80160e6:	6812      	ldr	r2, [r2, #0]
 80160e8:	6812      	ldr	r2, [r2, #0]
 80160ea:	601a      	str	r2, [r3, #0]
 80160ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80160f0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80160f4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80160f8:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 80160fc:	6812      	ldr	r2, [r2, #0]
 80160fe:	6812      	ldr	r2, [r2, #0]
 8016100:	601a      	str	r2, [r3, #0]
 8016102:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016106:	3304      	adds	r3, #4
 8016108:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801610c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016110:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016114:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016118:	601a      	str	r2, [r3, #0]
 801611a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801611e:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8016122:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016126:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 801612a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801612e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016132:	6812      	ldr	r2, [r2, #0]
 8016134:	6809      	ldr	r1, [r1, #0]
 8016136:	6818      	ldr	r0, [r3, #0]
 8016138:	f7fb fcec 	bl	8011b14 <luaV_idiv>
 801613c:	4602      	mov	r2, r0
 801613e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016142:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	601a      	str	r2, [r3, #0]
 801614a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801614e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	2203      	movs	r2, #3
 8016156:	711a      	strb	r2, [r3, #4]
 8016158:	e087      	b.n	801626a <luaV_execute+0x44ca>
 801615a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801615e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	791b      	ldrb	r3, [r3, #4]
 8016166:	2b13      	cmp	r3, #19
 8016168:	d10a      	bne.n	8016180 <luaV_execute+0x43e0>
 801616a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801616e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 801617a:	6013      	str	r3, [r2, #0]
 801617c:	2301      	movs	r3, #1
 801617e:	e018      	b.n	80161b2 <luaV_execute+0x4412>
 8016180:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016184:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	791b      	ldrb	r3, [r3, #4]
 801618c:	2b03      	cmp	r3, #3
 801618e:	d10f      	bne.n	80161b0 <luaV_execute+0x4410>
 8016190:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016194:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	ee07 3a90 	vmov	s15, r3
 80161a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161a4:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80161a8:	edc3 7a00 	vstr	s15, [r3]
 80161ac:	2301      	movs	r3, #1
 80161ae:	e000      	b.n	80161b2 <luaV_execute+0x4412>
 80161b0:	2300      	movs	r3, #0
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d059      	beq.n	801626a <luaV_execute+0x44ca>
 80161b6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161ba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	791b      	ldrb	r3, [r3, #4]
 80161c2:	2b13      	cmp	r3, #19
 80161c4:	d10c      	bne.n	80161e0 <luaV_execute+0x4440>
 80161c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161ca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 80161d6:	6013      	str	r3, [r2, #0]
 80161d8:	2301      	movs	r3, #1
 80161da:	e01a      	b.n	8016212 <luaV_execute+0x4472>
 80161dc:	08022d3c 	.word	0x08022d3c
 80161e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161e4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	791b      	ldrb	r3, [r3, #4]
 80161ec:	2b03      	cmp	r3, #3
 80161ee:	d10f      	bne.n	8016210 <luaV_execute+0x4470>
 80161f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80161f4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	ee07 3a90 	vmov	s15, r3
 8016200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016204:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8016208:	edc3 7a00 	vstr	s15, [r3]
 801620c:	2301      	movs	r3, #1
 801620e:	e000      	b.n	8016212 <luaV_execute+0x4472>
 8016210:	2300      	movs	r3, #0
 8016212:	2b00      	cmp	r3, #0
 8016214:	d029      	beq.n	801626a <luaV_execute+0x44ca>
 8016216:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801621a:	3304      	adds	r3, #4
 801621c:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8016220:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016224:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016228:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801622c:	601a      	str	r2, [r3, #0]
 801622e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8016232:	ed93 7a00 	vldr	s14, [r3]
 8016236:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801623a:	edd3 7a00 	vldr	s15, [r3]
 801623e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016242:	eeb0 0a66 	vmov.f32	s0, s13
 8016246:	f007 fc51 	bl	801daec <floorf>
 801624a:	eef0 7a40 	vmov.f32	s15, s0
 801624e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016252:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	edc3 7a00 	vstr	s15, [r3]
 801625c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016260:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	2213      	movs	r2, #19
 8016268:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801626a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801626e:	2b00      	cmp	r3, #0
 8016270:	bf14      	ite	ne
 8016272:	2301      	movne	r3, #1
 8016274:	2300      	moveq	r3, #0
 8016276:	b2db      	uxtb	r3, r3
 8016278:	2b00      	cmp	r3, #0
 801627a:	d013      	beq.n	80162a4 <luaV_execute+0x4504>
 801627c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016280:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016284:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016288:	6818      	ldr	r0, [r3, #0]
 801628a:	f7f2 ff27 	bl	80090dc <luaG_traceexec>
 801628e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016292:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016296:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	3308      	adds	r3, #8
 80162a0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80162a4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80162a8:	1d1a      	adds	r2, r3, #4
 80162aa:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80162b4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80162b8:	09db      	lsrs	r3, r3, #7
 80162ba:	b2db      	uxtb	r3, r3
 80162bc:	00db      	lsls	r3, r3, #3
 80162be:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80162c2:	4413      	add	r3, r2
 80162c4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80162c8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80162cc:	b2db      	uxtb	r3, r3
 80162ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80162d2:	4a9a      	ldr	r2, [pc, #616]	; (801653c <luaV_execute+0x479c>)
 80162d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162d8:	f7fb be34 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_BAND) {
        op_bitwise(L, l_band);
 80162dc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80162e0:	0c1b      	lsrs	r3, r3, #16
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	00db      	lsls	r3, r3, #3
 80162e6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80162ea:	441a      	add	r2, r3
 80162ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80162f0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80162f4:	601a      	str	r2, [r3, #0]
 80162f6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80162fa:	0e1b      	lsrs	r3, r3, #24
 80162fc:	00db      	lsls	r3, r3, #3
 80162fe:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016302:	441a      	add	r2, r3
 8016304:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016308:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801630c:	601a      	str	r2, [r3, #0]
 801630e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016312:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	791b      	ldrb	r3, [r3, #4]
 801631a:	2b03      	cmp	r3, #3
 801631c:	bf0c      	ite	eq
 801631e:	2301      	moveq	r3, #1
 8016320:	2300      	movne	r3, #0
 8016322:	b2db      	uxtb	r3, r3
 8016324:	2b00      	cmp	r3, #0
 8016326:	d00c      	beq.n	8016342 <luaV_execute+0x45a2>
 8016328:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801632c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016338:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 801633c:	601a      	str	r2, [r3, #0]
 801633e:	2301      	movs	r3, #1
 8016340:	e00f      	b.n	8016362 <luaV_execute+0x45c2>
 8016342:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8016346:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801634a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801634e:	2200      	movs	r2, #0
 8016350:	6818      	ldr	r0, [r3, #0]
 8016352:	f7fa fad5 	bl	8010900 <luaV_tointegerns>
 8016356:	4603      	mov	r3, r0
 8016358:	2b00      	cmp	r3, #0
 801635a:	bf14      	ite	ne
 801635c:	2301      	movne	r3, #1
 801635e:	2300      	moveq	r3, #0
 8016360:	b2db      	uxtb	r3, r3
 8016362:	2b00      	cmp	r3, #0
 8016364:	d051      	beq.n	801640a <luaV_execute+0x466a>
 8016366:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801636a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	791b      	ldrb	r3, [r3, #4]
 8016372:	2b03      	cmp	r3, #3
 8016374:	bf0c      	ite	eq
 8016376:	2301      	moveq	r3, #1
 8016378:	2300      	movne	r3, #0
 801637a:	b2db      	uxtb	r3, r3
 801637c:	2b00      	cmp	r3, #0
 801637e:	d00c      	beq.n	801639a <luaV_execute+0x45fa>
 8016380:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016384:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016390:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8016394:	601a      	str	r2, [r3, #0]
 8016396:	2301      	movs	r3, #1
 8016398:	e00f      	b.n	80163ba <luaV_execute+0x461a>
 801639a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801639e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163a2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80163a6:	2200      	movs	r2, #0
 80163a8:	6818      	ldr	r0, [r3, #0]
 80163aa:	f7fa faa9 	bl	8010900 <luaV_tointegerns>
 80163ae:	4603      	mov	r3, r0
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	bf14      	ite	ne
 80163b4:	2301      	movne	r3, #1
 80163b6:	2300      	moveq	r3, #0
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d025      	beq.n	801640a <luaV_execute+0x466a>
 80163be:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80163c2:	3304      	adds	r3, #4
 80163c4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80163c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163cc:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80163d0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80163d4:	601a      	str	r2, [r3, #0]
 80163d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163da:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	461a      	mov	r2, r3
 80163e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163e6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	4013      	ands	r3, r2
 80163ee:	461a      	mov	r2, r3
 80163f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80163f4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	601a      	str	r2, [r3, #0]
 80163fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016400:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	2203      	movs	r2, #3
 8016408:	711a      	strb	r2, [r3, #4]
        vmbreak;
 801640a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801640e:	2b00      	cmp	r3, #0
 8016410:	bf14      	ite	ne
 8016412:	2301      	movne	r3, #1
 8016414:	2300      	moveq	r3, #0
 8016416:	b2db      	uxtb	r3, r3
 8016418:	2b00      	cmp	r3, #0
 801641a:	d013      	beq.n	8016444 <luaV_execute+0x46a4>
 801641c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016420:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016424:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016428:	6818      	ldr	r0, [r3, #0]
 801642a:	f7f2 fe57 	bl	80090dc <luaG_traceexec>
 801642e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016432:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016436:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	3308      	adds	r3, #8
 8016440:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016444:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016448:	1d1a      	adds	r2, r3, #4
 801644a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016454:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016458:	09db      	lsrs	r3, r3, #7
 801645a:	b2db      	uxtb	r3, r3
 801645c:	00db      	lsls	r3, r3, #3
 801645e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016462:	4413      	add	r3, r2
 8016464:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016468:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801646c:	b2db      	uxtb	r3, r3
 801646e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016472:	4a32      	ldr	r2, [pc, #200]	; (801653c <luaV_execute+0x479c>)
 8016474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016478:	f7fb bd64 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_BOR) {
        op_bitwise(L, l_bor);
 801647c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016480:	0c1b      	lsrs	r3, r3, #16
 8016482:	b2db      	uxtb	r3, r3
 8016484:	00db      	lsls	r3, r3, #3
 8016486:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801648a:	441a      	add	r2, r3
 801648c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016490:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8016494:	601a      	str	r2, [r3, #0]
 8016496:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801649a:	0e1b      	lsrs	r3, r3, #24
 801649c:	00db      	lsls	r3, r3, #3
 801649e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80164a2:	441a      	add	r2, r3
 80164a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80164a8:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80164ac:	601a      	str	r2, [r3, #0]
 80164ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80164b2:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	791b      	ldrb	r3, [r3, #4]
 80164ba:	2b03      	cmp	r3, #3
 80164bc:	bf0c      	ite	eq
 80164be:	2301      	moveq	r3, #1
 80164c0:	2300      	movne	r3, #0
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d00c      	beq.n	80164e2 <luaV_execute+0x4742>
 80164c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80164cc:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	681a      	ldr	r2, [r3, #0]
 80164d4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80164d8:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80164dc:	601a      	str	r2, [r3, #0]
 80164de:	2301      	movs	r3, #1
 80164e0:	e00f      	b.n	8016502 <luaV_execute+0x4762>
 80164e2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80164e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80164ea:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80164ee:	2200      	movs	r2, #0
 80164f0:	6818      	ldr	r0, [r3, #0]
 80164f2:	f7fa fa05 	bl	8010900 <luaV_tointegerns>
 80164f6:	4603      	mov	r3, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	bf14      	ite	ne
 80164fc:	2301      	movne	r3, #1
 80164fe:	2300      	moveq	r3, #0
 8016500:	b2db      	uxtb	r3, r3
 8016502:	2b00      	cmp	r3, #0
 8016504:	d054      	beq.n	80165b0 <luaV_execute+0x4810>
 8016506:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801650a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	791b      	ldrb	r3, [r3, #4]
 8016512:	2b03      	cmp	r3, #3
 8016514:	bf0c      	ite	eq
 8016516:	2301      	moveq	r3, #1
 8016518:	2300      	movne	r3, #0
 801651a:	b2db      	uxtb	r3, r3
 801651c:	2b00      	cmp	r3, #0
 801651e:	d00f      	beq.n	8016540 <luaV_execute+0x47a0>
 8016520:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016524:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	681a      	ldr	r2, [r3, #0]
 801652c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016530:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8016534:	601a      	str	r2, [r3, #0]
 8016536:	2301      	movs	r3, #1
 8016538:	e012      	b.n	8016560 <luaV_execute+0x47c0>
 801653a:	bf00      	nop
 801653c:	08022d3c 	.word	0x08022d3c
 8016540:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8016544:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016548:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801654c:	2200      	movs	r2, #0
 801654e:	6818      	ldr	r0, [r3, #0]
 8016550:	f7fa f9d6 	bl	8010900 <luaV_tointegerns>
 8016554:	4603      	mov	r3, r0
 8016556:	2b00      	cmp	r3, #0
 8016558:	bf14      	ite	ne
 801655a:	2301      	movne	r3, #1
 801655c:	2300      	moveq	r3, #0
 801655e:	b2db      	uxtb	r3, r3
 8016560:	2b00      	cmp	r3, #0
 8016562:	d025      	beq.n	80165b0 <luaV_execute+0x4810>
 8016564:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016568:	3304      	adds	r3, #4
 801656a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801656e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016572:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8016576:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801657a:	601a      	str	r2, [r3, #0]
 801657c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016580:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	461a      	mov	r2, r3
 8016588:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801658c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	4313      	orrs	r3, r2
 8016594:	461a      	mov	r2, r3
 8016596:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801659a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	601a      	str	r2, [r3, #0]
 80165a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80165a6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	2203      	movs	r2, #3
 80165ae:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80165b0:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	bf14      	ite	ne
 80165b8:	2301      	movne	r3, #1
 80165ba:	2300      	moveq	r3, #0
 80165bc:	b2db      	uxtb	r3, r3
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d013      	beq.n	80165ea <luaV_execute+0x484a>
 80165c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80165c6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80165ca:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80165ce:	6818      	ldr	r0, [r3, #0]
 80165d0:	f7f2 fd84 	bl	80090dc <luaG_traceexec>
 80165d4:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80165d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80165dc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	3308      	adds	r3, #8
 80165e6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80165ea:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80165ee:	1d1a      	adds	r2, r3, #4
 80165f0:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80165fa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80165fe:	09db      	lsrs	r3, r3, #7
 8016600:	b2db      	uxtb	r3, r3
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016608:	4413      	add	r3, r2
 801660a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801660e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016612:	b2db      	uxtb	r3, r3
 8016614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016618:	4a99      	ldr	r2, [pc, #612]	; (8016880 <luaV_execute+0x4ae0>)
 801661a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801661e:	f7fb bc91 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_BXOR) {
        op_bitwise(L, l_bxor);
 8016622:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016626:	0c1b      	lsrs	r3, r3, #16
 8016628:	b2db      	uxtb	r3, r3
 801662a:	00db      	lsls	r3, r3, #3
 801662c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016630:	441a      	add	r2, r3
 8016632:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016636:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801663a:	601a      	str	r2, [r3, #0]
 801663c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016640:	0e1b      	lsrs	r3, r3, #24
 8016642:	00db      	lsls	r3, r3, #3
 8016644:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016648:	441a      	add	r2, r3
 801664a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801664e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8016652:	601a      	str	r2, [r3, #0]
 8016654:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016658:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	791b      	ldrb	r3, [r3, #4]
 8016660:	2b03      	cmp	r3, #3
 8016662:	bf0c      	ite	eq
 8016664:	2301      	moveq	r3, #1
 8016666:	2300      	movne	r3, #0
 8016668:	b2db      	uxtb	r3, r3
 801666a:	2b00      	cmp	r3, #0
 801666c:	d00c      	beq.n	8016688 <luaV_execute+0x48e8>
 801666e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016672:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	681a      	ldr	r2, [r3, #0]
 801667a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801667e:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8016682:	601a      	str	r2, [r3, #0]
 8016684:	2301      	movs	r3, #1
 8016686:	e00f      	b.n	80166a8 <luaV_execute+0x4908>
 8016688:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801668c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016690:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8016694:	2200      	movs	r2, #0
 8016696:	6818      	ldr	r0, [r3, #0]
 8016698:	f7fa f932 	bl	8010900 <luaV_tointegerns>
 801669c:	4603      	mov	r3, r0
 801669e:	2b00      	cmp	r3, #0
 80166a0:	bf14      	ite	ne
 80166a2:	2301      	movne	r3, #1
 80166a4:	2300      	moveq	r3, #0
 80166a6:	b2db      	uxtb	r3, r3
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d051      	beq.n	8016750 <luaV_execute+0x49b0>
 80166ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166b0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	791b      	ldrb	r3, [r3, #4]
 80166b8:	2b03      	cmp	r3, #3
 80166ba:	bf0c      	ite	eq
 80166bc:	2301      	moveq	r3, #1
 80166be:	2300      	movne	r3, #0
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d00c      	beq.n	80166e0 <luaV_execute+0x4940>
 80166c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166ca:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166d6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80166da:	601a      	str	r2, [r3, #0]
 80166dc:	2301      	movs	r3, #1
 80166de:	e00f      	b.n	8016700 <luaV_execute+0x4960>
 80166e0:	f107 0120 	add.w	r1, r7, #32
 80166e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80166e8:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80166ec:	2200      	movs	r2, #0
 80166ee:	6818      	ldr	r0, [r3, #0]
 80166f0:	f7fa f906 	bl	8010900 <luaV_tointegerns>
 80166f4:	4603      	mov	r3, r0
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	bf14      	ite	ne
 80166fa:	2301      	movne	r3, #1
 80166fc:	2300      	moveq	r3, #0
 80166fe:	b2db      	uxtb	r3, r3
 8016700:	2b00      	cmp	r3, #0
 8016702:	d025      	beq.n	8016750 <luaV_execute+0x49b0>
 8016704:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016708:	3304      	adds	r3, #4
 801670a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801670e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016712:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8016716:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801671a:	601a      	str	r2, [r3, #0]
 801671c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016720:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	461a      	mov	r2, r3
 8016728:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801672c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	4053      	eors	r3, r2
 8016734:	461a      	mov	r2, r3
 8016736:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801673a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	601a      	str	r2, [r3, #0]
 8016742:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016746:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	2203      	movs	r2, #3
 801674e:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8016750:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016754:	2b00      	cmp	r3, #0
 8016756:	bf14      	ite	ne
 8016758:	2301      	movne	r3, #1
 801675a:	2300      	moveq	r3, #0
 801675c:	b2db      	uxtb	r3, r3
 801675e:	2b00      	cmp	r3, #0
 8016760:	d013      	beq.n	801678a <luaV_execute+0x49ea>
 8016762:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016766:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801676a:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801676e:	6818      	ldr	r0, [r3, #0]
 8016770:	f7f2 fcb4 	bl	80090dc <luaG_traceexec>
 8016774:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016778:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801677c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	3308      	adds	r3, #8
 8016786:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801678a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801678e:	1d1a      	adds	r2, r3, #4
 8016790:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801679a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801679e:	09db      	lsrs	r3, r3, #7
 80167a0:	b2db      	uxtb	r3, r3
 80167a2:	00db      	lsls	r3, r3, #3
 80167a4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80167a8:	4413      	add	r3, r2
 80167aa:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80167ae:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80167b2:	b2db      	uxtb	r3, r3
 80167b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80167b8:	4a31      	ldr	r2, [pc, #196]	; (8016880 <luaV_execute+0x4ae0>)
 80167ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80167be:	f7fb bbc1 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SHR) {
        op_bitwise(L, luaV_shiftr);
 80167c2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80167c6:	0c1b      	lsrs	r3, r3, #16
 80167c8:	b2db      	uxtb	r3, r3
 80167ca:	00db      	lsls	r3, r3, #3
 80167cc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80167d0:	441a      	add	r2, r3
 80167d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167d6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80167da:	601a      	str	r2, [r3, #0]
 80167dc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80167e0:	0e1b      	lsrs	r3, r3, #24
 80167e2:	00db      	lsls	r3, r3, #3
 80167e4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80167e8:	441a      	add	r2, r3
 80167ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80167f2:	601a      	str	r2, [r3, #0]
 80167f4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80167f8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	791b      	ldrb	r3, [r3, #4]
 8016800:	2b03      	cmp	r3, #3
 8016802:	bf0c      	ite	eq
 8016804:	2301      	moveq	r3, #1
 8016806:	2300      	movne	r3, #0
 8016808:	b2db      	uxtb	r3, r3
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00c      	beq.n	8016828 <luaV_execute+0x4a88>
 801680e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016812:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801681e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8016822:	601a      	str	r2, [r3, #0]
 8016824:	2301      	movs	r3, #1
 8016826:	e00f      	b.n	8016848 <luaV_execute+0x4aa8>
 8016828:	f107 011c 	add.w	r1, r7, #28
 801682c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016830:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8016834:	2200      	movs	r2, #0
 8016836:	6818      	ldr	r0, [r3, #0]
 8016838:	f7fa f862 	bl	8010900 <luaV_tointegerns>
 801683c:	4603      	mov	r3, r0
 801683e:	2b00      	cmp	r3, #0
 8016840:	bf14      	ite	ne
 8016842:	2301      	movne	r3, #1
 8016844:	2300      	moveq	r3, #0
 8016846:	b2db      	uxtb	r3, r3
 8016848:	2b00      	cmp	r3, #0
 801684a:	d056      	beq.n	80168fa <luaV_execute+0x4b5a>
 801684c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016850:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	791b      	ldrb	r3, [r3, #4]
 8016858:	2b03      	cmp	r3, #3
 801685a:	bf0c      	ite	eq
 801685c:	2301      	moveq	r3, #1
 801685e:	2300      	movne	r3, #0
 8016860:	b2db      	uxtb	r3, r3
 8016862:	2b00      	cmp	r3, #0
 8016864:	d00e      	beq.n	8016884 <luaV_execute+0x4ae4>
 8016866:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801686a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016876:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801687a:	601a      	str	r2, [r3, #0]
 801687c:	2301      	movs	r3, #1
 801687e:	e011      	b.n	80168a4 <luaV_execute+0x4b04>
 8016880:	08022d3c 	.word	0x08022d3c
 8016884:	f107 0118 	add.w	r1, r7, #24
 8016888:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801688c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8016890:	2200      	movs	r2, #0
 8016892:	6818      	ldr	r0, [r3, #0]
 8016894:	f7fa f834 	bl	8010900 <luaV_tointegerns>
 8016898:	4603      	mov	r3, r0
 801689a:	2b00      	cmp	r3, #0
 801689c:	bf14      	ite	ne
 801689e:	2301      	movne	r3, #1
 80168a0:	2300      	moveq	r3, #0
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d028      	beq.n	80168fa <luaV_execute+0x4b5a>
 80168a8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80168ac:	3304      	adds	r3, #4
 80168ae:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80168b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168b6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80168ba:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80168be:	601a      	str	r2, [r3, #0]
 80168c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168c4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80168c8:	681a      	ldr	r2, [r3, #0]
 80168ca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168ce:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	425b      	negs	r3, r3
 80168d6:	4619      	mov	r1, r3
 80168d8:	4610      	mov	r0, r2
 80168da:	f7fb f9cf 	bl	8011c7c <luaV_shiftl>
 80168de:	4602      	mov	r2, r0
 80168e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168e4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	601a      	str	r2, [r3, #0]
 80168ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80168f0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2203      	movs	r2, #3
 80168f8:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80168fa:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80168fe:	2b00      	cmp	r3, #0
 8016900:	bf14      	ite	ne
 8016902:	2301      	movne	r3, #1
 8016904:	2300      	moveq	r3, #0
 8016906:	b2db      	uxtb	r3, r3
 8016908:	2b00      	cmp	r3, #0
 801690a:	d013      	beq.n	8016934 <luaV_execute+0x4b94>
 801690c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016910:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016914:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016918:	6818      	ldr	r0, [r3, #0]
 801691a:	f7f2 fbdf 	bl	80090dc <luaG_traceexec>
 801691e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016922:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016926:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	3308      	adds	r3, #8
 8016930:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016934:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016938:	1d1a      	adds	r2, r3, #4
 801693a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016944:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016948:	09db      	lsrs	r3, r3, #7
 801694a:	b2db      	uxtb	r3, r3
 801694c:	00db      	lsls	r3, r3, #3
 801694e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016952:	4413      	add	r3, r2
 8016954:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016958:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801695c:	b2db      	uxtb	r3, r3
 801695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016962:	4aba      	ldr	r2, [pc, #744]	; (8016c4c <luaV_execute+0x4eac>)
 8016964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016968:	f7fb baec 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SHL) {
        op_bitwise(L, luaV_shiftl);
 801696c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016970:	0c1b      	lsrs	r3, r3, #16
 8016972:	b2db      	uxtb	r3, r3
 8016974:	00db      	lsls	r3, r3, #3
 8016976:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801697a:	441a      	add	r2, r3
 801697c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016980:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8016984:	601a      	str	r2, [r3, #0]
 8016986:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801698a:	0e1b      	lsrs	r3, r3, #24
 801698c:	00db      	lsls	r3, r3, #3
 801698e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016992:	441a      	add	r2, r3
 8016994:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016998:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801699c:	601a      	str	r2, [r3, #0]
 801699e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	791b      	ldrb	r3, [r3, #4]
 80169aa:	2b03      	cmp	r3, #3
 80169ac:	bf0c      	ite	eq
 80169ae:	2301      	moveq	r3, #1
 80169b0:	2300      	movne	r3, #0
 80169b2:	b2db      	uxtb	r3, r3
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d00c      	beq.n	80169d2 <luaV_execute+0x4c32>
 80169b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169bc:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	681a      	ldr	r2, [r3, #0]
 80169c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169c8:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 80169cc:	601a      	str	r2, [r3, #0]
 80169ce:	2301      	movs	r3, #1
 80169d0:	e00f      	b.n	80169f2 <luaV_execute+0x4c52>
 80169d2:	f107 0114 	add.w	r1, r7, #20
 80169d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169da:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80169de:	2200      	movs	r2, #0
 80169e0:	6818      	ldr	r0, [r3, #0]
 80169e2:	f7f9 ff8d 	bl	8010900 <luaV_tointegerns>
 80169e6:	4603      	mov	r3, r0
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	bf14      	ite	ne
 80169ec:	2301      	movne	r3, #1
 80169ee:	2300      	moveq	r3, #0
 80169f0:	b2db      	uxtb	r3, r3
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d053      	beq.n	8016a9e <luaV_execute+0x4cfe>
 80169f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80169fa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	791b      	ldrb	r3, [r3, #4]
 8016a02:	2b03      	cmp	r3, #3
 8016a04:	bf0c      	ite	eq
 8016a06:	2301      	moveq	r3, #1
 8016a08:	2300      	movne	r3, #0
 8016a0a:	b2db      	uxtb	r3, r3
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00c      	beq.n	8016a2a <luaV_execute+0x4c8a>
 8016a10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a14:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	681a      	ldr	r2, [r3, #0]
 8016a1c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a20:	f5a3 63ae 	sub.w	r3, r3, #1392	; 0x570
 8016a24:	601a      	str	r2, [r3, #0]
 8016a26:	2301      	movs	r3, #1
 8016a28:	e00f      	b.n	8016a4a <luaV_execute+0x4caa>
 8016a2a:	f107 0110 	add.w	r1, r7, #16
 8016a2e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a32:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8016a36:	2200      	movs	r2, #0
 8016a38:	6818      	ldr	r0, [r3, #0]
 8016a3a:	f7f9 ff61 	bl	8010900 <luaV_tointegerns>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	bf14      	ite	ne
 8016a44:	2301      	movne	r3, #1
 8016a46:	2300      	moveq	r3, #0
 8016a48:	b2db      	uxtb	r3, r3
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d027      	beq.n	8016a9e <luaV_execute+0x4cfe>
 8016a4e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016a52:	3304      	adds	r3, #4
 8016a54:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8016a58:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a5c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016a60:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016a64:	601a      	str	r2, [r3, #0]
 8016a66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a6a:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a74:	f5a3 63ae 	sub.w	r3, r3, #1392	; 0x570
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	4619      	mov	r1, r3
 8016a7c:	4610      	mov	r0, r2
 8016a7e:	f7fb f8fd 	bl	8011c7c <luaV_shiftl>
 8016a82:	4602      	mov	r2, r0
 8016a84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	601a      	str	r2, [r3, #0]
 8016a90:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016a94:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2203      	movs	r2, #3
 8016a9c:	711a      	strb	r2, [r3, #4]
        vmbreak;
 8016a9e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	bf14      	ite	ne
 8016aa6:	2301      	movne	r3, #1
 8016aa8:	2300      	moveq	r3, #0
 8016aaa:	b2db      	uxtb	r3, r3
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d013      	beq.n	8016ad8 <luaV_execute+0x4d38>
 8016ab0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ab4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016ab8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016abc:	6818      	ldr	r0, [r3, #0]
 8016abe:	f7f2 fb0d 	bl	80090dc <luaG_traceexec>
 8016ac2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016ac6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016aca:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	3308      	adds	r3, #8
 8016ad4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016ad8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016adc:	1d1a      	adds	r2, r3, #4
 8016ade:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016ae8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016aec:	09db      	lsrs	r3, r3, #7
 8016aee:	b2db      	uxtb	r3, r3
 8016af0:	00db      	lsls	r3, r3, #3
 8016af2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016af6:	4413      	add	r3, r2
 8016af8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016afc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016b00:	b2db      	uxtb	r3, r3
 8016b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b06:	4a51      	ldr	r2, [pc, #324]	; (8016c4c <luaV_execute+0x4eac>)
 8016b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b0c:	f7fb ba1a 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_MMBIN) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
 8016b10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b14:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8016b18:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016b1c:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8016b20:	601a      	str	r2, [r3, #0]
        TValue *rb = vRB(i);
 8016b22:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016b26:	0c1b      	lsrs	r3, r3, #16
 8016b28:	b2db      	uxtb	r3, r3
 8016b2a:	00db      	lsls	r3, r3, #3
 8016b2c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016b30:	441a      	add	r2, r3
 8016b32:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b36:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8016b3a:	601a      	str	r2, [r3, #0]
        TMS tm = (TMS)GETARG_C(i);
 8016b3c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016b40:	0e1a      	lsrs	r2, r3, #24
 8016b42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b46:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8016b4a:	701a      	strb	r2, [r3, #0]
        StkId result = RA(pi);
 8016b4c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b50:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	09db      	lsrs	r3, r3, #7
 8016b58:	b2db      	uxtb	r3, r3
 8016b5a:	00da      	lsls	r2, r3, #3
 8016b5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b60:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8016b64:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016b68:	440a      	add	r2, r1
 8016b6a:	601a      	str	r2, [r3, #0]
        lua_assert(OP_ADD <= GET_OPCODE(pi) && GET_OPCODE(pi) <= OP_SHR);
        Protect(luaT_trybinTM(L, s2v(ra), rb, result, tm));
 8016b6c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b70:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016b7a:	611a      	str	r2, [r3, #16]
 8016b7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b80:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	685a      	ldr	r2, [r3, #4]
 8016b88:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b8c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	60da      	str	r2, [r3, #12]
 8016b94:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 8016b98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016b9c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8016ba0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016ba4:	f5a2 7212 	sub.w	r2, r2, #584	; 0x248
 8016ba8:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8016bac:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 8016bb0:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8016bb4:	f2a1 2149 	subw	r1, r1, #585	; 0x249
 8016bb8:	7809      	ldrb	r1, [r1, #0]
 8016bba:	9100      	str	r1, [sp, #0]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	6812      	ldr	r2, [r2, #0]
 8016bc0:	4621      	mov	r1, r4
 8016bc2:	6800      	ldr	r0, [r0, #0]
 8016bc4:	f7f9 fa68 	bl	8010098 <luaT_trybinTM>
 8016bc8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016bcc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	695b      	ldr	r3, [r3, #20]
 8016bd4:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8016bd8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	bf14      	ite	ne
 8016be0:	2301      	movne	r3, #1
 8016be2:	2300      	moveq	r3, #0
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d013      	beq.n	8016c12 <luaV_execute+0x4e72>
 8016bea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016bee:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016bf2:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016bf6:	6818      	ldr	r0, [r3, #0]
 8016bf8:	f7f2 fa70 	bl	80090dc <luaG_traceexec>
 8016bfc:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016c00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c04:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	3308      	adds	r3, #8
 8016c0e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016c12:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016c16:	1d1a      	adds	r2, r3, #4
 8016c18:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016c22:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016c26:	09db      	lsrs	r3, r3, #7
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	00db      	lsls	r3, r3, #3
 8016c2c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016c30:	4413      	add	r3, r2
 8016c32:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016c36:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016c3a:	b2db      	uxtb	r3, r3
 8016c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c40:	4a02      	ldr	r2, [pc, #8]	; (8016c4c <luaV_execute+0x4eac>)
 8016c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c46:	f7fb b97d 	b.w	8011f44 <luaV_execute+0x1a4>
 8016c4a:	bf00      	nop
 8016c4c:	08022d3c 	.word	0x08022d3c
      }
      vmcase(OP_MMBINI) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
 8016c50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c54:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8016c58:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016c5c:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8016c60:	601a      	str	r2, [r3, #0]
        int imm = GETARG_sB(i);
 8016c62:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016c66:	0c1b      	lsrs	r3, r3, #16
 8016c68:	b2da      	uxtb	r2, r3
 8016c6a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c6e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8016c72:	3a7f      	subs	r2, #127	; 0x7f
 8016c74:	601a      	str	r2, [r3, #0]
        TMS tm = (TMS)GETARG_C(i);
 8016c76:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016c7a:	0e1a      	lsrs	r2, r3, #24
 8016c7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c80:	f2a3 2335 	subw	r3, r3, #565	; 0x235
 8016c84:	701a      	strb	r2, [r3, #0]
        int flip = GETARG_k(i);
 8016c86:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016c8a:	0bdb      	lsrs	r3, r3, #15
 8016c8c:	461a      	mov	r2, r3
 8016c8e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016c92:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8016c96:	f002 0201 	and.w	r2, r2, #1
 8016c9a:	601a      	str	r2, [r3, #0]
        StkId result = RA(pi);
 8016c9c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ca0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	09db      	lsrs	r3, r3, #7
 8016ca8:	b2db      	uxtb	r3, r3
 8016caa:	00da      	lsls	r2, r3, #3
 8016cac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cb0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8016cb4:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016cb8:	440a      	add	r2, r1
 8016cba:	601a      	str	r2, [r3, #0]
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
 8016cbc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cc0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016cca:	611a      	str	r2, [r3, #16]
 8016ccc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cd0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	685a      	ldr	r2, [r3, #4]
 8016cd8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cdc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	60da      	str	r2, [r3, #12]
 8016ce4:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 8016ce8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016cec:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8016cf0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016cf4:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8016cf8:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8016cfc:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 8016d00:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8016d04:	f2a1 2135 	subw	r1, r1, #565	; 0x235
 8016d08:	7809      	ldrb	r1, [r1, #0]
 8016d0a:	9101      	str	r1, [sp, #4]
 8016d0c:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8016d10:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
 8016d14:	6809      	ldr	r1, [r1, #0]
 8016d16:	9100      	str	r1, [sp, #0]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	6812      	ldr	r2, [r2, #0]
 8016d1c:	4621      	mov	r1, r4
 8016d1e:	6800      	ldr	r0, [r0, #0]
 8016d20:	f7f9 fa47 	bl	80101b2 <luaT_trybiniTM>
 8016d24:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d28:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	695b      	ldr	r3, [r3, #20]
 8016d30:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8016d34:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	bf14      	ite	ne
 8016d3c:	2301      	movne	r3, #1
 8016d3e:	2300      	moveq	r3, #0
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d013      	beq.n	8016d6e <luaV_execute+0x4fce>
 8016d46:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d4a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016d4e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016d52:	6818      	ldr	r0, [r3, #0]
 8016d54:	f7f2 f9c2 	bl	80090dc <luaG_traceexec>
 8016d58:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016d5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016d60:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	3308      	adds	r3, #8
 8016d6a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016d6e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016d72:	1d1a      	adds	r2, r3, #4
 8016d74:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016d7e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016d82:	09db      	lsrs	r3, r3, #7
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	00db      	lsls	r3, r3, #3
 8016d88:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016d8c:	4413      	add	r3, r2
 8016d8e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016d92:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016d96:	b2db      	uxtb	r3, r3
 8016d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016d9c:	4a9c      	ldr	r2, [pc, #624]	; (8017010 <luaV_execute+0x5270>)
 8016d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016da2:	f7fb b8cf 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_MMBINK) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
 8016da6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016daa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016dae:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016db2:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8016db6:	601a      	str	r2, [r3, #0]
        TValue *imm = KB(i);
 8016db8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016dbc:	0c1b      	lsrs	r3, r3, #16
 8016dbe:	b2db      	uxtb	r3, r3
 8016dc0:	00da      	lsls	r2, r3, #3
 8016dc2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016dc6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8016dca:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8016dce:	440a      	add	r2, r1
 8016dd0:	601a      	str	r2, [r3, #0]
        TMS tm = (TMS)GETARG_C(i);
 8016dd2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016dd6:	0e1a      	lsrs	r2, r3, #24
 8016dd8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ddc:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 8016de0:	701a      	strb	r2, [r3, #0]
        int flip = GETARG_k(i);
 8016de2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016de6:	0bdb      	lsrs	r3, r3, #15
 8016de8:	461a      	mov	r2, r3
 8016dea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016dee:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8016df2:	f002 0201 	and.w	r2, r2, #1
 8016df6:	601a      	str	r2, [r3, #0]
        StkId result = RA(pi);
 8016df8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016dfc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	09db      	lsrs	r3, r3, #7
 8016e04:	b2db      	uxtb	r3, r3
 8016e06:	00da      	lsls	r2, r3, #3
 8016e08:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e0c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8016e10:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016e14:	440a      	add	r2, r1
 8016e16:	601a      	str	r2, [r3, #0]
        Protect(luaT_trybinassocTM(L, s2v(ra), imm, flip, result, tm));
 8016e18:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e1c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016e26:	611a      	str	r2, [r3, #16]
 8016e28:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e2c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	685a      	ldr	r2, [r3, #4]
 8016e34:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e38:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	60da      	str	r2, [r3, #12]
 8016e40:	f8d7 456c 	ldr.w	r4, [r7, #1388]	; 0x56c
 8016e44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e48:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8016e4c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016e50:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8016e54:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8016e58:	f2a1 507c 	subw	r0, r1, #1404	; 0x57c
 8016e5c:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8016e60:	f2a1 2121 	subw	r1, r1, #545	; 0x221
 8016e64:	7809      	ldrb	r1, [r1, #0]
 8016e66:	9101      	str	r1, [sp, #4]
 8016e68:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8016e6c:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 8016e70:	6809      	ldr	r1, [r1, #0]
 8016e72:	9100      	str	r1, [sp, #0]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	6812      	ldr	r2, [r2, #0]
 8016e78:	4621      	mov	r1, r4
 8016e7a:	6800      	ldr	r0, [r0, #0]
 8016e7c:	f7f9 f97a 	bl	8010174 <luaT_trybinassocTM>
 8016e80:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016e84:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	695b      	ldr	r3, [r3, #20]
 8016e8c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8016e90:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	bf14      	ite	ne
 8016e98:	2301      	movne	r3, #1
 8016e9a:	2300      	moveq	r3, #0
 8016e9c:	b2db      	uxtb	r3, r3
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d013      	beq.n	8016eca <luaV_execute+0x512a>
 8016ea2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ea6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8016eaa:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016eae:	6818      	ldr	r0, [r3, #0]
 8016eb0:	f7f2 f914 	bl	80090dc <luaG_traceexec>
 8016eb4:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8016eb8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ebc:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	3308      	adds	r3, #8
 8016ec6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016eca:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8016ece:	1d1a      	adds	r2, r3, #4
 8016ed0:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8016eda:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016ede:	09db      	lsrs	r3, r3, #7
 8016ee0:	b2db      	uxtb	r3, r3
 8016ee2:	00db      	lsls	r3, r3, #3
 8016ee4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016ee8:	4413      	add	r3, r2
 8016eea:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016eee:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016ef2:	b2db      	uxtb	r3, r3
 8016ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ef8:	4a45      	ldr	r2, [pc, #276]	; (8017010 <luaV_execute+0x5270>)
 8016efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016efe:	f7fb b821 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_UNM) {
        TValue *rb = vRB(i);
 8016f02:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016f06:	0c1b      	lsrs	r3, r3, #16
 8016f08:	b2db      	uxtb	r3, r3
 8016f0a:	00db      	lsls	r3, r3, #3
 8016f0c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016f10:	441a      	add	r2, r3
 8016f12:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f16:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016f1a:	601a      	str	r2, [r3, #0]
        lua_Number nb;
        if (ttisinteger(rb)) {
 8016f1c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f20:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	791b      	ldrb	r3, [r3, #4]
 8016f28:	2b03      	cmp	r3, #3
 8016f2a:	d126      	bne.n	8016f7a <luaV_execute+0x51da>
          lua_Integer ib = ivalue(rb);
 8016f2c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f30:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016f34:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8016f38:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8016f3c:	6812      	ldr	r2, [r2, #0]
 8016f3e:	6812      	ldr	r2, [r2, #0]
 8016f40:	601a      	str	r2, [r3, #0]
          setivalue(s2v(ra), intop(-, 0, ib));
 8016f42:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f46:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8016f4a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016f4e:	601a      	str	r2, [r3, #0]
 8016f50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f54:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	425b      	negs	r3, r3
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f62:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	601a      	str	r2, [r3, #0]
 8016f6a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f6e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	2203      	movs	r2, #3
 8016f76:	711a      	strb	r2, [r3, #4]
 8016f78:	e07d      	b.n	8017076 <luaV_execute+0x52d6>
        }
        else if (tonumberns(rb, nb)) {
 8016f7a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f7e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	791b      	ldrb	r3, [r3, #4]
 8016f86:	2b13      	cmp	r3, #19
 8016f88:	d10a      	bne.n	8016fa0 <luaV_execute+0x5200>
 8016f8a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016f8e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8016f9a:	6013      	str	r3, [r2, #0]
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	e018      	b.n	8016fd2 <luaV_execute+0x5232>
 8016fa0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016fa4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	791b      	ldrb	r3, [r3, #4]
 8016fac:	2b03      	cmp	r3, #3
 8016fae:	d10f      	bne.n	8016fd0 <luaV_execute+0x5230>
 8016fb0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016fb4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	ee07 3a90 	vmov	s15, r3
 8016fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fc4:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8016fc8:	edc3 7a00 	vstr	s15, [r3]
 8016fcc:	2301      	movs	r3, #1
 8016fce:	e000      	b.n	8016fd2 <luaV_execute+0x5232>
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d01e      	beq.n	8017014 <luaV_execute+0x5274>
          setfltvalue(s2v(ra), luai_numunm(L, nb));
 8016fd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016fda:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016fde:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016fe2:	601a      	str	r2, [r3, #0]
 8016fe4:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8016fe8:	edd3 7a00 	vldr	s15, [r3]
 8016fec:	eef1 7a67 	vneg.f32	s15, s15
 8016ff0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8016ff4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	edc3 7a00 	vstr	s15, [r3]
 8016ffe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017002:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	2213      	movs	r2, #19
 801700a:	711a      	strb	r2, [r3, #4]
 801700c:	e033      	b.n	8017076 <luaV_execute+0x52d6>
 801700e:	bf00      	nop
 8017010:	08022d3c 	.word	0x08022d3c
        }
        else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_UNM));
 8017014:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017018:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017022:	611a      	str	r2, [r3, #16]
 8017024:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017028:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	685a      	ldr	r2, [r3, #4]
 8017030:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017034:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	60da      	str	r2, [r3, #12]
 801703c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017040:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8017044:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017048:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 801704c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017050:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8017054:	2312      	movs	r3, #18
 8017056:	9300      	str	r3, [sp, #0]
 8017058:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801705c:	6812      	ldr	r2, [r2, #0]
 801705e:	6809      	ldr	r1, [r1, #0]
 8017060:	6800      	ldr	r0, [r0, #0]
 8017062:	f7f9 f819 	bl	8010098 <luaT_trybinTM>
 8017066:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801706a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	695b      	ldr	r3, [r3, #20]
 8017072:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8017076:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801707a:	2b00      	cmp	r3, #0
 801707c:	bf14      	ite	ne
 801707e:	2301      	movne	r3, #1
 8017080:	2300      	moveq	r3, #0
 8017082:	b2db      	uxtb	r3, r3
 8017084:	2b00      	cmp	r3, #0
 8017086:	d013      	beq.n	80170b0 <luaV_execute+0x5310>
 8017088:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801708c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017090:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017094:	6818      	ldr	r0, [r3, #0]
 8017096:	f7f2 f821 	bl	80090dc <luaG_traceexec>
 801709a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801709e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80170a2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	3308      	adds	r3, #8
 80170ac:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80170b0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80170b4:	1d1a      	adds	r2, r3, #4
 80170b6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80170c0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80170c4:	09db      	lsrs	r3, r3, #7
 80170c6:	b2db      	uxtb	r3, r3
 80170c8:	00db      	lsls	r3, r3, #3
 80170ca:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80170ce:	4413      	add	r3, r2
 80170d0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80170d4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170de:	4ac5      	ldr	r2, [pc, #788]	; (80173f4 <luaV_execute+0x5654>)
 80170e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80170e4:	f7fa bf2e 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_BNOT) {
        TValue *rb = vRB(i);
 80170e8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80170ec:	0c1b      	lsrs	r3, r3, #16
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	00db      	lsls	r3, r3, #3
 80170f2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80170f6:	441a      	add	r2, r3
 80170f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80170fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8017100:	601a      	str	r2, [r3, #0]
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
 8017102:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017106:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	791b      	ldrb	r3, [r3, #4]
 801710e:	2b03      	cmp	r3, #3
 8017110:	bf0c      	ite	eq
 8017112:	2301      	moveq	r3, #1
 8017114:	2300      	movne	r3, #0
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b00      	cmp	r3, #0
 801711a:	d00c      	beq.n	8017136 <luaV_execute+0x5396>
 801711c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017120:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	681a      	ldr	r2, [r3, #0]
 8017128:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801712c:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8017130:	601a      	str	r2, [r3, #0]
 8017132:	2301      	movs	r3, #1
 8017134:	e00f      	b.n	8017156 <luaV_execute+0x53b6>
 8017136:	f107 010c 	add.w	r1, r7, #12
 801713a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801713e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8017142:	2200      	movs	r2, #0
 8017144:	6818      	ldr	r0, [r3, #0]
 8017146:	f7f9 fbdb 	bl	8010900 <luaV_tointegerns>
 801714a:	4603      	mov	r3, r0
 801714c:	2b00      	cmp	r3, #0
 801714e:	bf14      	ite	ne
 8017150:	2301      	movne	r3, #1
 8017152:	2300      	moveq	r3, #0
 8017154:	b2db      	uxtb	r3, r3
 8017156:	2b00      	cmp	r3, #0
 8017158:	d01a      	beq.n	8017190 <luaV_execute+0x53f0>
          setivalue(s2v(ra), intop(^, ~l_castS2U(0), ib));
 801715a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801715e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8017162:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8017166:	601a      	str	r2, [r3, #0]
 8017168:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801716c:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	43da      	mvns	r2, r3
 8017174:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017178:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	601a      	str	r2, [r3, #0]
 8017180:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017184:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	2203      	movs	r2, #3
 801718c:	711a      	strb	r2, [r3, #4]
 801718e:	e030      	b.n	80171f2 <luaV_execute+0x5452>
        }
        else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_BNOT));
 8017190:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017194:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801719e:	611a      	str	r2, [r3, #16]
 80171a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171a4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	685a      	ldr	r2, [r3, #4]
 80171ac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171b0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	60da      	str	r2, [r3, #12]
 80171b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171bc:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80171c0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171c4:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 80171c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171cc:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 80171d0:	2313      	movs	r3, #19
 80171d2:	9300      	str	r3, [sp, #0]
 80171d4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80171d8:	6812      	ldr	r2, [r2, #0]
 80171da:	6809      	ldr	r1, [r1, #0]
 80171dc:	6800      	ldr	r0, [r0, #0]
 80171de:	f7f8 ff5b 	bl	8010098 <luaT_trybinTM>
 80171e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80171e6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	695b      	ldr	r3, [r3, #20]
 80171ee:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80171f2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	bf14      	ite	ne
 80171fa:	2301      	movne	r3, #1
 80171fc:	2300      	moveq	r3, #0
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	2b00      	cmp	r3, #0
 8017202:	d013      	beq.n	801722c <luaV_execute+0x548c>
 8017204:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017208:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801720c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017210:	6818      	ldr	r0, [r3, #0]
 8017212:	f7f1 ff63 	bl	80090dc <luaG_traceexec>
 8017216:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801721a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801721e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	3308      	adds	r3, #8
 8017228:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801722c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017230:	1d1a      	adds	r2, r3, #4
 8017232:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801723c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017240:	09db      	lsrs	r3, r3, #7
 8017242:	b2db      	uxtb	r3, r3
 8017244:	00db      	lsls	r3, r3, #3
 8017246:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801724a:	4413      	add	r3, r2
 801724c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017250:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017254:	b2db      	uxtb	r3, r3
 8017256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801725a:	4a66      	ldr	r2, [pc, #408]	; (80173f4 <luaV_execute+0x5654>)
 801725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017260:	f7fa be70 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_NOT) {
        TValue *rb = vRB(i);
 8017264:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017268:	0c1b      	lsrs	r3, r3, #16
 801726a:	b2db      	uxtb	r3, r3
 801726c:	00db      	lsls	r3, r3, #3
 801726e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017272:	441a      	add	r2, r3
 8017274:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017278:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801727c:	601a      	str	r2, [r3, #0]
        if (l_isfalse(rb))
 801727e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017282:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	791b      	ldrb	r3, [r3, #4]
 801728a:	2b01      	cmp	r3, #1
 801728c:	d009      	beq.n	80172a2 <luaV_execute+0x5502>
 801728e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017292:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	791b      	ldrb	r3, [r3, #4]
 801729a:	f003 030f 	and.w	r3, r3, #15
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d104      	bne.n	80172ac <luaV_execute+0x550c>
          setbtvalue(s2v(ra));
 80172a2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80172a6:	2211      	movs	r2, #17
 80172a8:	711a      	strb	r2, [r3, #4]
 80172aa:	e003      	b.n	80172b4 <luaV_execute+0x5514>
        else
          setbfvalue(s2v(ra));
 80172ac:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80172b0:	2201      	movs	r2, #1
 80172b2:	711a      	strb	r2, [r3, #4]
        vmbreak;
 80172b4:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	bf14      	ite	ne
 80172bc:	2301      	movne	r3, #1
 80172be:	2300      	moveq	r3, #0
 80172c0:	b2db      	uxtb	r3, r3
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d013      	beq.n	80172ee <luaV_execute+0x554e>
 80172c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80172ca:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80172ce:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80172d2:	6818      	ldr	r0, [r3, #0]
 80172d4:	f7f1 ff02 	bl	80090dc <luaG_traceexec>
 80172d8:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80172dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80172e0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	3308      	adds	r3, #8
 80172ea:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80172ee:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80172f2:	1d1a      	adds	r2, r3, #4
 80172f4:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80172fe:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017302:	09db      	lsrs	r3, r3, #7
 8017304:	b2db      	uxtb	r3, r3
 8017306:	00db      	lsls	r3, r3, #3
 8017308:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801730c:	4413      	add	r3, r2
 801730e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017312:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017316:	b2db      	uxtb	r3, r3
 8017318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801731c:	4a35      	ldr	r2, [pc, #212]	; (80173f4 <luaV_execute+0x5654>)
 801731e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017322:	f7fa be0f 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LEN) {
        Protect(luaV_objlen(L, ra, vRB(i)));
 8017326:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801732a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017334:	611a      	str	r2, [r3, #16]
 8017336:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801733a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	685a      	ldr	r2, [r3, #4]
 8017342:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017346:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	60da      	str	r2, [r3, #12]
 801734e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017352:	0c1b      	lsrs	r3, r3, #16
 8017354:	b2db      	uxtb	r3, r3
 8017356:	00db      	lsls	r3, r3, #3
 8017358:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801735c:	4413      	add	r3, r2
 801735e:	461a      	mov	r2, r3
 8017360:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017364:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017368:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801736c:	6818      	ldr	r0, [r3, #0]
 801736e:	f7fa fb53 	bl	8011a18 <luaV_objlen>
 8017372:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017376:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	695b      	ldr	r3, [r3, #20]
 801737e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8017382:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017386:	2b00      	cmp	r3, #0
 8017388:	bf14      	ite	ne
 801738a:	2301      	movne	r3, #1
 801738c:	2300      	moveq	r3, #0
 801738e:	b2db      	uxtb	r3, r3
 8017390:	2b00      	cmp	r3, #0
 8017392:	d013      	beq.n	80173bc <luaV_execute+0x561c>
 8017394:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017398:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801739c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80173a0:	6818      	ldr	r0, [r3, #0]
 80173a2:	f7f1 fe9b 	bl	80090dc <luaG_traceexec>
 80173a6:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80173aa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80173ae:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	3308      	adds	r3, #8
 80173b8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80173bc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80173c0:	1d1a      	adds	r2, r3, #4
 80173c2:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80173cc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80173d0:	09db      	lsrs	r3, r3, #7
 80173d2:	b2db      	uxtb	r3, r3
 80173d4:	00db      	lsls	r3, r3, #3
 80173d6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80173da:	4413      	add	r3, r2
 80173dc:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80173e0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80173e4:	b2db      	uxtb	r3, r3
 80173e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80173ea:	4a02      	ldr	r2, [pc, #8]	; (80173f4 <luaV_execute+0x5654>)
 80173ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173f0:	f7fa bda8 	b.w	8011f44 <luaV_execute+0x1a4>
 80173f4:	08022d3c 	.word	0x08022d3c
      }
      vmcase(OP_CONCAT) {
        int n = GETARG_B(i);  /* number of elements to concatenate */
 80173f8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80173fc:	0c1b      	lsrs	r3, r3, #16
 80173fe:	461a      	mov	r2, r3
 8017400:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8017408:	b2d2      	uxtb	r2, r2
 801740a:	601a      	str	r2, [r3, #0]
        L->top = ra + n;  /* mark the end of concat operands */
 801740c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	00db      	lsls	r3, r3, #3
 8017418:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801741c:	441a      	add	r2, r3
 801741e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017422:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	60da      	str	r2, [r3, #12]
        ProtectNT(luaV_concat(L, n));
 801742a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801742e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017438:	611a      	str	r2, [r3, #16]
 801743a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801743e:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8017442:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017446:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801744a:	6811      	ldr	r1, [r2, #0]
 801744c:	6818      	ldr	r0, [r3, #0]
 801744e:	f7fa f9b5 	bl	80117bc <luaV_concat>
 8017452:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017456:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	695b      	ldr	r3, [r3, #20]
 801745e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        checkGC(L, L->top); /* 'luaV_concat' ensures correct top */
 8017462:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017466:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	691b      	ldr	r3, [r3, #16]
 801746e:	68db      	ldr	r3, [r3, #12]
 8017470:	2b00      	cmp	r3, #0
 8017472:	dd22      	ble.n	80174ba <luaV_execute+0x571a>
 8017474:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017478:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017482:	611a      	str	r2, [r3, #16]
 8017484:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017488:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	68da      	ldr	r2, [r3, #12]
 8017490:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017494:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	60da      	str	r2, [r3, #12]
 801749c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80174a0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80174a4:	6818      	ldr	r0, [r3, #0]
 80174a6:	f7f5 fbf3 	bl	800cc90 <luaC_step>
 80174aa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80174ae:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	695b      	ldr	r3, [r3, #20]
 80174b6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80174ba:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80174be:	2b00      	cmp	r3, #0
 80174c0:	bf14      	ite	ne
 80174c2:	2301      	movne	r3, #1
 80174c4:	2300      	moveq	r3, #0
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d013      	beq.n	80174f4 <luaV_execute+0x5754>
 80174cc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80174d0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80174d4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80174d8:	6818      	ldr	r0, [r3, #0]
 80174da:	f7f1 fdff 	bl	80090dc <luaG_traceexec>
 80174de:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80174e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80174e6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	3308      	adds	r3, #8
 80174f0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80174f4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80174f8:	1d1a      	adds	r2, r3, #4
 80174fa:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8017504:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017508:	09db      	lsrs	r3, r3, #7
 801750a:	b2db      	uxtb	r3, r3
 801750c:	00db      	lsls	r3, r3, #3
 801750e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017512:	4413      	add	r3, r2
 8017514:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017518:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801751c:	b2db      	uxtb	r3, r3
 801751e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017522:	4aab      	ldr	r2, [pc, #684]	; (80177d0 <luaV_execute+0x5a30>)
 8017524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017528:	f7fa bd0c 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_CLOSE) {
        Protect(luaF_close(L, ra, LUA_OK, 1));
 801752c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017530:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801753a:	611a      	str	r2, [r3, #16]
 801753c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017540:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	685a      	ldr	r2, [r3, #4]
 8017548:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801754c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	60da      	str	r2, [r3, #12]
 8017554:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017558:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 801755c:	2301      	movs	r3, #1
 801755e:	2200      	movs	r2, #0
 8017560:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8017564:	6800      	ldr	r0, [r0, #0]
 8017566:	f7f3 f82c 	bl	800a5c2 <luaF_close>
 801756a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801756e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	695b      	ldr	r3, [r3, #20]
 8017576:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801757a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801757e:	2b00      	cmp	r3, #0
 8017580:	bf14      	ite	ne
 8017582:	2301      	movne	r3, #1
 8017584:	2300      	moveq	r3, #0
 8017586:	b2db      	uxtb	r3, r3
 8017588:	2b00      	cmp	r3, #0
 801758a:	d013      	beq.n	80175b4 <luaV_execute+0x5814>
 801758c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017590:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017594:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017598:	6818      	ldr	r0, [r3, #0]
 801759a:	f7f1 fd9f 	bl	80090dc <luaG_traceexec>
 801759e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80175a2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80175a6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	3308      	adds	r3, #8
 80175b0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80175b4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80175b8:	1d1a      	adds	r2, r3, #4
 80175ba:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80175c4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80175c8:	09db      	lsrs	r3, r3, #7
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80175d2:	4413      	add	r3, r2
 80175d4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80175d8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80175dc:	b2db      	uxtb	r3, r3
 80175de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175e2:	4a7b      	ldr	r2, [pc, #492]	; (80177d0 <luaV_execute+0x5a30>)
 80175e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80175e8:	f7fa bcac 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_TBC) {
        /* create new to-be-closed upvalue */
        halfProtect(luaF_newtbcupval(L, ra));
 80175ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80175f0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80175fa:	611a      	str	r2, [r3, #16]
 80175fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017600:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	685a      	ldr	r2, [r3, #4]
 8017608:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801760c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	60da      	str	r2, [r3, #12]
 8017614:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017618:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801761c:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8017620:	6818      	ldr	r0, [r3, #0]
 8017622:	f7f2 ff01 	bl	800a428 <luaF_newtbcupval>
        vmbreak;
 8017626:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801762a:	2b00      	cmp	r3, #0
 801762c:	bf14      	ite	ne
 801762e:	2301      	movne	r3, #1
 8017630:	2300      	moveq	r3, #0
 8017632:	b2db      	uxtb	r3, r3
 8017634:	2b00      	cmp	r3, #0
 8017636:	d013      	beq.n	8017660 <luaV_execute+0x58c0>
 8017638:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801763c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017640:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017644:	6818      	ldr	r0, [r3, #0]
 8017646:	f7f1 fd49 	bl	80090dc <luaG_traceexec>
 801764a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801764e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017652:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	3308      	adds	r3, #8
 801765c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017660:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017664:	1d1a      	adds	r2, r3, #4
 8017666:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8017670:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017674:	09db      	lsrs	r3, r3, #7
 8017676:	b2db      	uxtb	r3, r3
 8017678:	00db      	lsls	r3, r3, #3
 801767a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801767e:	4413      	add	r3, r2
 8017680:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017684:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017688:	b2db      	uxtb	r3, r3
 801768a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801768e:	4a50      	ldr	r2, [pc, #320]	; (80177d0 <luaV_execute+0x5a30>)
 8017690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017694:	f7fa bc56 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_JMP) {
        dojump(ci, i, 0);
 8017698:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801769c:	09db      	lsrs	r3, r3, #7
 801769e:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80176a2:	3301      	adds	r3, #1
 80176a4:	009b      	lsls	r3, r3, #2
 80176a6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80176aa:	4413      	add	r3, r2
 80176ac:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80176b0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80176b4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	695b      	ldr	r3, [r3, #20]
 80176bc:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80176c0:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	bf14      	ite	ne
 80176c8:	2301      	movne	r3, #1
 80176ca:	2300      	moveq	r3, #0
 80176cc:	b2db      	uxtb	r3, r3
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d013      	beq.n	80176fa <luaV_execute+0x595a>
 80176d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80176d6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80176da:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80176de:	6818      	ldr	r0, [r3, #0]
 80176e0:	f7f1 fcfc 	bl	80090dc <luaG_traceexec>
 80176e4:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80176e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80176ec:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	3308      	adds	r3, #8
 80176f6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80176fa:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80176fe:	1d1a      	adds	r2, r3, #4
 8017700:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801770a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801770e:	09db      	lsrs	r3, r3, #7
 8017710:	b2db      	uxtb	r3, r3
 8017712:	00db      	lsls	r3, r3, #3
 8017714:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017718:	4413      	add	r3, r2
 801771a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801771e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017722:	b2db      	uxtb	r3, r3
 8017724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017728:	4a29      	ldr	r2, [pc, #164]	; (80177d0 <luaV_execute+0x5a30>)
 801772a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801772e:	f7fa bc09 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_EQ) {
        int cond;
        TValue *rb = vRB(i);
 8017732:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017736:	0c1b      	lsrs	r3, r3, #16
 8017738:	b2db      	uxtb	r3, r3
 801773a:	00db      	lsls	r3, r3, #3
 801773c:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017740:	441a      	add	r2, r3
 8017742:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017746:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801774a:	601a      	str	r2, [r3, #0]
        Protect(cond = luaV_equalobj(L, s2v(ra), rb));
 801774c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017750:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801775a:	611a      	str	r2, [r3, #16]
 801775c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017760:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	685a      	ldr	r2, [r3, #4]
 8017768:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801776c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	60da      	str	r2, [r3, #12]
 8017774:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8017778:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801777c:	f5a3 74fa 	sub.w	r4, r3, #500	; 0x1f4
 8017780:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017784:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 8017788:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801778c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017790:	6812      	ldr	r2, [r2, #0]
 8017792:	6818      	ldr	r0, [r3, #0]
 8017794:	f7f9 fe52 	bl	801143c <luaV_equalobj>
 8017798:	6020      	str	r0, [r4, #0]
 801779a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801779e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	695b      	ldr	r3, [r3, #20]
 80177a6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        docondjump();
 80177aa:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80177ae:	0bdb      	lsrs	r3, r3, #15
 80177b0:	f003 0301 	and.w	r3, r3, #1
 80177b4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80177b8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80177bc:	6812      	ldr	r2, [r2, #0]
 80177be:	429a      	cmp	r2, r3
 80177c0:	d008      	beq.n	80177d4 <luaV_execute+0x5a34>
 80177c2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80177c6:	3304      	adds	r3, #4
 80177c8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80177cc:	e021      	b.n	8017812 <luaV_execute+0x5a72>
 80177ce:	bf00      	nop
 80177d0:	08022d3c 	.word	0x08022d3c
 80177d4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80177d8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80177dc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80177e0:	6812      	ldr	r2, [r2, #0]
 80177e2:	601a      	str	r2, [r3, #0]
 80177e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80177e8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	09db      	lsrs	r3, r3, #7
 80177f0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80177f4:	3302      	adds	r3, #2
 80177f6:	009b      	lsls	r3, r3, #2
 80177f8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80177fc:	4413      	add	r3, r2
 80177fe:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8017802:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017806:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	695b      	ldr	r3, [r3, #20]
 801780e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8017812:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017816:	2b00      	cmp	r3, #0
 8017818:	bf14      	ite	ne
 801781a:	2301      	movne	r3, #1
 801781c:	2300      	moveq	r3, #0
 801781e:	b2db      	uxtb	r3, r3
 8017820:	2b00      	cmp	r3, #0
 8017822:	d013      	beq.n	801784c <luaV_execute+0x5aac>
 8017824:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017828:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801782c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017830:	6818      	ldr	r0, [r3, #0]
 8017832:	f7f1 fc53 	bl	80090dc <luaG_traceexec>
 8017836:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801783a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801783e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	3308      	adds	r3, #8
 8017848:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801784c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017850:	1d1a      	adds	r2, r3, #4
 8017852:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801785c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017860:	09db      	lsrs	r3, r3, #7
 8017862:	b2db      	uxtb	r3, r3
 8017864:	00db      	lsls	r3, r3, #3
 8017866:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801786a:	4413      	add	r3, r2
 801786c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017870:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017874:	b2db      	uxtb	r3, r3
 8017876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801787a:	4ac6      	ldr	r2, [pc, #792]	; (8017b94 <luaV_execute+0x5df4>)
 801787c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017880:	f7fa bb60 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LT) {
        op_order(L, l_lti, LTnum, lessthanothers);
 8017884:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017888:	0c1b      	lsrs	r3, r3, #16
 801788a:	b2db      	uxtb	r3, r3
 801788c:	00db      	lsls	r3, r3, #3
 801788e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017892:	441a      	add	r2, r3
 8017894:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017898:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801789c:	601a      	str	r2, [r3, #0]
 801789e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80178a2:	791b      	ldrb	r3, [r3, #4]
 80178a4:	2b03      	cmp	r3, #3
 80178a6:	d12c      	bne.n	8017902 <luaV_execute+0x5b62>
 80178a8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80178ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	791b      	ldrb	r3, [r3, #4]
 80178b4:	2b03      	cmp	r3, #3
 80178b6:	d124      	bne.n	8017902 <luaV_execute+0x5b62>
 80178b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80178bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80178c0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80178c4:	6812      	ldr	r2, [r2, #0]
 80178c6:	601a      	str	r2, [r3, #0]
 80178c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80178cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80178d0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80178d4:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 80178d8:	6812      	ldr	r2, [r2, #0]
 80178da:	6812      	ldr	r2, [r2, #0]
 80178dc:	601a      	str	r2, [r3, #0]
 80178de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80178e2:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 80178e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80178ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80178ee:	6812      	ldr	r2, [r2, #0]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	429a      	cmp	r2, r3
 80178f4:	bfb4      	ite	lt
 80178f6:	2301      	movlt	r3, #1
 80178f8:	2300      	movge	r3, #0
 80178fa:	b2db      	uxtb	r3, r3
 80178fc:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8017900:	e049      	b.n	8017996 <luaV_execute+0x5bf6>
 8017902:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017906:	791b      	ldrb	r3, [r3, #4]
 8017908:	f003 030f 	and.w	r3, r3, #15
 801790c:	2b03      	cmp	r3, #3
 801790e:	d116      	bne.n	801793e <luaV_execute+0x5b9e>
 8017910:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017914:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	791b      	ldrb	r3, [r3, #4]
 801791c:	f003 030f 	and.w	r3, r3, #15
 8017920:	2b03      	cmp	r3, #3
 8017922:	d10c      	bne.n	801793e <luaV_execute+0x5b9e>
 8017924:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8017928:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801792c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8017930:	6819      	ldr	r1, [r3, #0]
 8017932:	4610      	mov	r0, r2
 8017934:	f7f9 fca2 	bl	801127c <LTnum>
 8017938:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
 801793c:	e02b      	b.n	8017996 <luaV_execute+0x5bf6>
 801793e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017942:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801794c:	611a      	str	r2, [r3, #16]
 801794e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017952:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	685a      	ldr	r2, [r3, #4]
 801795a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801795e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	60da      	str	r2, [r3, #12]
 8017966:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801796a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801796e:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8017972:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017976:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801797a:	6812      	ldr	r2, [r2, #0]
 801797c:	6818      	ldr	r0, [r3, #0]
 801797e:	f7f9 fd05 	bl	801138c <lessthanothers>
 8017982:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
 8017986:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801798a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	695b      	ldr	r3, [r3, #20]
 8017992:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8017996:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801799a:	0bdb      	lsrs	r3, r3, #15
 801799c:	f003 0301 	and.w	r3, r3, #1
 80179a0:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d005      	beq.n	80179b4 <luaV_execute+0x5c14>
 80179a8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80179ac:	3304      	adds	r3, #4
 80179ae:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80179b2:	e01e      	b.n	80179f2 <luaV_execute+0x5c52>
 80179b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80179b8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80179bc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80179c0:	6812      	ldr	r2, [r2, #0]
 80179c2:	601a      	str	r2, [r3, #0]
 80179c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80179c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	09db      	lsrs	r3, r3, #7
 80179d0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80179d4:	3302      	adds	r3, #2
 80179d6:	009b      	lsls	r3, r3, #2
 80179d8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80179dc:	4413      	add	r3, r2
 80179de:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80179e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80179e6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	695b      	ldr	r3, [r3, #20]
 80179ee:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80179f2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	bf14      	ite	ne
 80179fa:	2301      	movne	r3, #1
 80179fc:	2300      	moveq	r3, #0
 80179fe:	b2db      	uxtb	r3, r3
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d013      	beq.n	8017a2c <luaV_execute+0x5c8c>
 8017a04:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017a08:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017a0c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017a10:	6818      	ldr	r0, [r3, #0]
 8017a12:	f7f1 fb63 	bl	80090dc <luaG_traceexec>
 8017a16:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8017a1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017a1e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	3308      	adds	r3, #8
 8017a28:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017a2c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017a30:	1d1a      	adds	r2, r3, #4
 8017a32:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8017a3c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017a40:	09db      	lsrs	r3, r3, #7
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	00db      	lsls	r3, r3, #3
 8017a46:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017a4a:	4413      	add	r3, r2
 8017a4c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017a50:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017a54:	b2db      	uxtb	r3, r3
 8017a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017a5a:	4a4e      	ldr	r2, [pc, #312]	; (8017b94 <luaV_execute+0x5df4>)
 8017a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a60:	f7fa ba70 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LE) {
        op_order(L, l_lei, LEnum, lessequalothers);
 8017a64:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017a68:	0c1b      	lsrs	r3, r3, #16
 8017a6a:	b2db      	uxtb	r3, r3
 8017a6c:	00db      	lsls	r3, r3, #3
 8017a6e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017a72:	441a      	add	r2, r3
 8017a74:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017a78:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8017a7c:	601a      	str	r2, [r3, #0]
 8017a7e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017a82:	791b      	ldrb	r3, [r3, #4]
 8017a84:	2b03      	cmp	r3, #3
 8017a86:	d12c      	bne.n	8017ae2 <luaV_execute+0x5d42>
 8017a88:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017a8c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	791b      	ldrb	r3, [r3, #4]
 8017a94:	2b03      	cmp	r3, #3
 8017a96:	d124      	bne.n	8017ae2 <luaV_execute+0x5d42>
 8017a98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017a9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8017aa0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8017aa4:	6812      	ldr	r2, [r2, #0]
 8017aa6:	601a      	str	r2, [r3, #0]
 8017aa8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017aac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8017ab0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8017ab4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8017ab8:	6812      	ldr	r2, [r2, #0]
 8017aba:	6812      	ldr	r2, [r2, #0]
 8017abc:	601a      	str	r2, [r3, #0]
 8017abe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017ac2:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8017ac6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017aca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8017ace:	6812      	ldr	r2, [r2, #0]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	bfd4      	ite	le
 8017ad6:	2301      	movle	r3, #1
 8017ad8:	2300      	movgt	r3, #0
 8017ada:	b2db      	uxtb	r3, r3
 8017adc:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8017ae0:	e049      	b.n	8017b76 <luaV_execute+0x5dd6>
 8017ae2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017ae6:	791b      	ldrb	r3, [r3, #4]
 8017ae8:	f003 030f 	and.w	r3, r3, #15
 8017aec:	2b03      	cmp	r3, #3
 8017aee:	d116      	bne.n	8017b1e <luaV_execute+0x5d7e>
 8017af0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017af4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	791b      	ldrb	r3, [r3, #4]
 8017afc:	f003 030f 	and.w	r3, r3, #15
 8017b00:	2b03      	cmp	r3, #3
 8017b02:	d10c      	bne.n	8017b1e <luaV_execute+0x5d7e>
 8017b04:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8017b08:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017b0c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8017b10:	6819      	ldr	r1, [r3, #0]
 8017b12:	4610      	mov	r0, r2
 8017b14:	f7f9 fbf6 	bl	8011304 <LEnum>
 8017b18:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
 8017b1c:	e02b      	b.n	8017b76 <luaV_execute+0x5dd6>
 8017b1e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017b22:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017b2c:	611a      	str	r2, [r3, #16]
 8017b2e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017b32:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	685a      	ldr	r2, [r3, #4]
 8017b3a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017b3e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	60da      	str	r2, [r3, #12]
 8017b46:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8017b4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017b4e:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8017b52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017b56:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017b5a:	6812      	ldr	r2, [r2, #0]
 8017b5c:	6818      	ldr	r0, [r3, #0]
 8017b5e:	f7f9 fc3f 	bl	80113e0 <lessequalothers>
 8017b62:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
 8017b66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017b6a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	695b      	ldr	r3, [r3, #20]
 8017b72:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8017b76:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017b7a:	0bdb      	lsrs	r3, r3, #15
 8017b7c:	f003 0301 	and.w	r3, r3, #1
 8017b80:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d007      	beq.n	8017b98 <luaV_execute+0x5df8>
 8017b88:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017b8c:	3304      	adds	r3, #4
 8017b8e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8017b92:	e020      	b.n	8017bd6 <luaV_execute+0x5e36>
 8017b94:	08022d3c 	.word	0x08022d3c
 8017b98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017b9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8017ba0:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017ba4:	6812      	ldr	r2, [r2, #0]
 8017ba6:	601a      	str	r2, [r3, #0]
 8017ba8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017bac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	09db      	lsrs	r3, r3, #7
 8017bb4:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8017bb8:	3302      	adds	r3, #2
 8017bba:	009b      	lsls	r3, r3, #2
 8017bbc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017bc0:	4413      	add	r3, r2
 8017bc2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8017bc6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017bca:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	695b      	ldr	r3, [r3, #20]
 8017bd2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8017bd6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	bf14      	ite	ne
 8017bde:	2301      	movne	r3, #1
 8017be0:	2300      	moveq	r3, #0
 8017be2:	b2db      	uxtb	r3, r3
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d013      	beq.n	8017c10 <luaV_execute+0x5e70>
 8017be8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017bec:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017bf0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017bf4:	6818      	ldr	r0, [r3, #0]
 8017bf6:	f7f1 fa71 	bl	80090dc <luaG_traceexec>
 8017bfa:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8017bfe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017c02:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	3308      	adds	r3, #8
 8017c0c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017c10:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017c14:	1d1a      	adds	r2, r3, #4
 8017c16:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8017c20:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017c24:	09db      	lsrs	r3, r3, #7
 8017c26:	b2db      	uxtb	r3, r3
 8017c28:	00db      	lsls	r3, r3, #3
 8017c2a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017c2e:	4413      	add	r3, r2
 8017c30:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017c34:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017c38:	b2db      	uxtb	r3, r3
 8017c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017c3e:	4ac1      	ldr	r2, [pc, #772]	; (8017f44 <luaV_execute+0x61a4>)
 8017c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c44:	f7fa b97e 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_EQK) {
        TValue *rb = KB(i);
 8017c48:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017c4c:	0c1b      	lsrs	r3, r3, #16
 8017c4e:	b2db      	uxtb	r3, r3
 8017c50:	00da      	lsls	r2, r3, #3
 8017c52:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017c56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8017c5a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8017c5e:	440a      	add	r2, r1
 8017c60:	601a      	str	r2, [r3, #0]
        /* basic types do not use '__eq'; we can use raw equality */
        int cond = luaV_rawequalobj(s2v(ra), rb);
 8017c62:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8017c66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017c6a:	f5a3 74e4 	sub.w	r4, r3, #456	; 0x1c8
 8017c6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017c72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8017c76:	681a      	ldr	r2, [r3, #0]
 8017c78:	2000      	movs	r0, #0
 8017c7a:	f7f9 fbdf 	bl	801143c <luaV_equalobj>
 8017c7e:	6020      	str	r0, [r4, #0]
        docondjump();
 8017c80:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017c84:	0bdb      	lsrs	r3, r3, #15
 8017c86:	f003 0301 	and.w	r3, r3, #1
 8017c8a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8017c8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8017c92:	6812      	ldr	r2, [r2, #0]
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d005      	beq.n	8017ca4 <luaV_execute+0x5f04>
 8017c98:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017c9c:	3304      	adds	r3, #4
 8017c9e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8017ca2:	e01e      	b.n	8017ce2 <luaV_execute+0x5f42>
 8017ca4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017ca8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8017cac:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017cb0:	6812      	ldr	r2, [r2, #0]
 8017cb2:	601a      	str	r2, [r3, #0]
 8017cb4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017cb8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	09db      	lsrs	r3, r3, #7
 8017cc0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8017cc4:	3302      	adds	r3, #2
 8017cc6:	009b      	lsls	r3, r3, #2
 8017cc8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017ccc:	4413      	add	r3, r2
 8017cce:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8017cd2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017cd6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	695b      	ldr	r3, [r3, #20]
 8017cde:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8017ce2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	bf14      	ite	ne
 8017cea:	2301      	movne	r3, #1
 8017cec:	2300      	moveq	r3, #0
 8017cee:	b2db      	uxtb	r3, r3
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d013      	beq.n	8017d1c <luaV_execute+0x5f7c>
 8017cf4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017cf8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017cfc:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017d00:	6818      	ldr	r0, [r3, #0]
 8017d02:	f7f1 f9eb 	bl	80090dc <luaG_traceexec>
 8017d06:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8017d0a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017d0e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	3308      	adds	r3, #8
 8017d18:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017d1c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017d20:	1d1a      	adds	r2, r3, #4
 8017d22:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8017d2c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017d30:	09db      	lsrs	r3, r3, #7
 8017d32:	b2db      	uxtb	r3, r3
 8017d34:	00db      	lsls	r3, r3, #3
 8017d36:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017d3a:	4413      	add	r3, r2
 8017d3c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017d40:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d4a:	4a7e      	ldr	r2, [pc, #504]	; (8017f44 <luaV_execute+0x61a4>)
 8017d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d50:	f7fa b8f8 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_EQI) {
        int cond;
        int im = GETARG_sB(i);
 8017d54:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017d58:	0c1b      	lsrs	r3, r3, #16
 8017d5a:	b2da      	uxtb	r2, r3
 8017d5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017d60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8017d64:	3a7f      	subs	r2, #127	; 0x7f
 8017d66:	601a      	str	r2, [r3, #0]
        if (ttisinteger(s2v(ra)))
 8017d68:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017d6c:	791b      	ldrb	r3, [r3, #4]
 8017d6e:	2b03      	cmp	r3, #3
 8017d70:	d10f      	bne.n	8017d92 <luaV_execute+0x5ff2>
          cond = (ivalue(s2v(ra)) == im);
 8017d72:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8017d7c:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8017d80:	6812      	ldr	r2, [r2, #0]
 8017d82:	429a      	cmp	r2, r3
 8017d84:	bf0c      	ite	eq
 8017d86:	2301      	moveq	r3, #1
 8017d88:	2300      	movne	r3, #0
 8017d8a:	b2db      	uxtb	r3, r3
 8017d8c:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8017d90:	e01f      	b.n	8017dd2 <luaV_execute+0x6032>
        else if (ttisfloat(s2v(ra)))
 8017d92:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017d96:	791b      	ldrb	r3, [r3, #4]
 8017d98:	2b13      	cmp	r3, #19
 8017d9a:	d117      	bne.n	8017dcc <luaV_execute+0x602c>
          cond = luai_numeq(fltvalue(s2v(ra)), cast_num(im));
 8017d9c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017da0:	ed93 7a00 	vldr	s14, [r3]
 8017da4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017da8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	ee07 3a90 	vmov	s15, r3
 8017db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017db6:	eeb4 7a67 	vcmp.f32	s14, s15
 8017dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dbe:	bf0c      	ite	eq
 8017dc0:	2301      	moveq	r3, #1
 8017dc2:	2300      	movne	r3, #0
 8017dc4:	b2db      	uxtb	r3, r3
 8017dc6:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8017dca:	e002      	b.n	8017dd2 <luaV_execute+0x6032>
        else
          cond = 0;  /* other types cannot be equal to a number */
 8017dcc:	2300      	movs	r3, #0
 8017dce:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
        docondjump();
 8017dd2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017dd6:	0bdb      	lsrs	r3, r3, #15
 8017dd8:	f003 0301 	and.w	r3, r3, #1
 8017ddc:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d005      	beq.n	8017df0 <luaV_execute+0x6050>
 8017de4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017de8:	3304      	adds	r3, #4
 8017dea:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8017dee:	e01e      	b.n	8017e2e <luaV_execute+0x608e>
 8017df0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017df4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8017df8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017dfc:	6812      	ldr	r2, [r2, #0]
 8017dfe:	601a      	str	r2, [r3, #0]
 8017e00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017e04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	09db      	lsrs	r3, r3, #7
 8017e0c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8017e10:	3302      	adds	r3, #2
 8017e12:	009b      	lsls	r3, r3, #2
 8017e14:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017e18:	4413      	add	r3, r2
 8017e1a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8017e1e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017e22:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	695b      	ldr	r3, [r3, #20]
 8017e2a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 8017e2e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	bf14      	ite	ne
 8017e36:	2301      	movne	r3, #1
 8017e38:	2300      	moveq	r3, #0
 8017e3a:	b2db      	uxtb	r3, r3
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d013      	beq.n	8017e68 <luaV_execute+0x60c8>
 8017e40:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017e44:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017e48:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8017e4c:	6818      	ldr	r0, [r3, #0]
 8017e4e:	f7f1 f945 	bl	80090dc <luaG_traceexec>
 8017e52:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8017e56:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017e5a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	3308      	adds	r3, #8
 8017e64:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017e68:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017e6c:	1d1a      	adds	r2, r3, #4
 8017e6e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8017e78:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017e7c:	09db      	lsrs	r3, r3, #7
 8017e7e:	b2db      	uxtb	r3, r3
 8017e80:	00db      	lsls	r3, r3, #3
 8017e82:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8017e86:	4413      	add	r3, r2
 8017e88:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017e8c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017e90:	b2db      	uxtb	r3, r3
 8017e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017e96:	4a2b      	ldr	r2, [pc, #172]	; (8017f44 <luaV_execute+0x61a4>)
 8017e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e9c:	f7fa b852 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LTI) {
        op_orderI(L, l_lti, luai_numlt, 0, TM_LT);
 8017ea0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017ea4:	0c1b      	lsrs	r3, r3, #16
 8017ea6:	b2da      	uxtb	r2, r3
 8017ea8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017eac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8017eb0:	3a7f      	subs	r2, #127	; 0x7f
 8017eb2:	601a      	str	r2, [r3, #0]
 8017eb4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017eb8:	791b      	ldrb	r3, [r3, #4]
 8017eba:	2b03      	cmp	r3, #3
 8017ebc:	d10f      	bne.n	8017ede <luaV_execute+0x613e>
 8017ebe:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8017ec8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8017ecc:	6812      	ldr	r2, [r2, #0]
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	bfcc      	ite	gt
 8017ed2:	2301      	movgt	r3, #1
 8017ed4:	2300      	movle	r3, #0
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8017edc:	e071      	b.n	8017fc2 <luaV_execute+0x6222>
 8017ede:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8017ee2:	791b      	ldrb	r3, [r3, #4]
 8017ee4:	2b13      	cmp	r3, #19
 8017ee6:	d12f      	bne.n	8017f48 <luaV_execute+0x61a8>
 8017ee8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017eec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8017ef0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8017ef4:	6812      	ldr	r2, [r2, #0]
 8017ef6:	601a      	str	r2, [r3, #0]
 8017ef8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017efc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8017f00:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8017f04:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8017f08:	6812      	ldr	r2, [r2, #0]
 8017f0a:	ee07 2a90 	vmov	s15, r2
 8017f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f12:	edc3 7a00 	vstr	s15, [r3]
 8017f16:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f1a:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8017f1e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8017f26:	ed92 7a00 	vldr	s14, [r2]
 8017f2a:	edd3 7a00 	vldr	s15, [r3]
 8017f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f36:	bf4c      	ite	mi
 8017f38:	2301      	movmi	r3, #1
 8017f3a:	2300      	movpl	r3, #0
 8017f3c:	b2db      	uxtb	r3, r3
 8017f3e:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8017f42:	e03e      	b.n	8017fc2 <luaV_execute+0x6222>
 8017f44:	08022d3c 	.word	0x08022d3c
 8017f48:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017f4c:	0e1a      	lsrs	r2, r3, #24
 8017f4e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8017f56:	601a      	str	r2, [r3, #0]
 8017f58:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f5c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017f66:	611a      	str	r2, [r3, #16]
 8017f68:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f6c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	685a      	ldr	r2, [r3, #4]
 8017f74:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f78:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	60da      	str	r2, [r3, #12]
 8017f80:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8017f84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f88:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8017f8c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f90:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8017f94:	2314      	movs	r3, #20
 8017f96:	9301      	str	r3, [sp, #4]
 8017f98:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017f9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	9300      	str	r3, [sp, #0]
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	6812      	ldr	r2, [r2, #0]
 8017fa8:	6800      	ldr	r0, [r0, #0]
 8017faa:	f7f8 f94f 	bl	801024c <luaT_callorderiTM>
 8017fae:	f8c7 04b8 	str.w	r0, [r7, #1208]	; 0x4b8
 8017fb2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017fb6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	695b      	ldr	r3, [r3, #20]
 8017fbe:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8017fc2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8017fc6:	0bdb      	lsrs	r3, r3, #15
 8017fc8:	f003 0301 	and.w	r3, r3, #1
 8017fcc:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d005      	beq.n	8017fe0 <luaV_execute+0x6240>
 8017fd4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8017fd8:	3304      	adds	r3, #4
 8017fda:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8017fde:	e01e      	b.n	801801e <luaV_execute+0x627e>
 8017fe0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017fe4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8017fe8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8017fec:	6812      	ldr	r2, [r2, #0]
 8017fee:	601a      	str	r2, [r3, #0]
 8017ff0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8017ff4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	09db      	lsrs	r3, r3, #7
 8017ffc:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8018000:	3302      	adds	r3, #2
 8018002:	009b      	lsls	r3, r3, #2
 8018004:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8018008:	4413      	add	r3, r2
 801800a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 801800e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018012:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	695b      	ldr	r3, [r3, #20]
 801801a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801801e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8018022:	2b00      	cmp	r3, #0
 8018024:	bf14      	ite	ne
 8018026:	2301      	movne	r3, #1
 8018028:	2300      	moveq	r3, #0
 801802a:	b2db      	uxtb	r3, r3
 801802c:	2b00      	cmp	r3, #0
 801802e:	d013      	beq.n	8018058 <luaV_execute+0x62b8>
 8018030:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018034:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018038:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801803c:	6818      	ldr	r0, [r3, #0]
 801803e:	f7f1 f84d 	bl	80090dc <luaG_traceexec>
 8018042:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8018046:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801804a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	3308      	adds	r3, #8
 8018054:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8018058:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801805c:	1d1a      	adds	r2, r3, #4
 801805e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8018068:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801806c:	09db      	lsrs	r3, r3, #7
 801806e:	b2db      	uxtb	r3, r3
 8018070:	00db      	lsls	r3, r3, #3
 8018072:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8018076:	4413      	add	r3, r2
 8018078:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801807c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018080:	b2db      	uxtb	r3, r3
 8018082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018086:	4acc      	ldr	r2, [pc, #816]	; (80183b8 <luaV_execute+0x6618>)
 8018088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801808c:	f7f9 bf5a 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_LEI) {
        op_orderI(L, l_lei, luai_numle, 0, TM_LE);
 8018090:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018094:	0c1b      	lsrs	r3, r3, #16
 8018096:	b2da      	uxtb	r2, r3
 8018098:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801809c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80180a0:	3a7f      	subs	r2, #127	; 0x7f
 80180a2:	601a      	str	r2, [r3, #0]
 80180a4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80180a8:	791b      	ldrb	r3, [r3, #4]
 80180aa:	2b03      	cmp	r3, #3
 80180ac:	d10f      	bne.n	80180ce <luaV_execute+0x632e>
 80180ae:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80180b8:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 80180bc:	6812      	ldr	r2, [r2, #0]
 80180be:	429a      	cmp	r2, r3
 80180c0:	bfac      	ite	ge
 80180c2:	2301      	movge	r3, #1
 80180c4:	2300      	movlt	r3, #0
 80180c6:	b2db      	uxtb	r3, r3
 80180c8:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 80180cc:	e06f      	b.n	80181ae <luaV_execute+0x640e>
 80180ce:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80180d2:	791b      	ldrb	r3, [r3, #4]
 80180d4:	2b13      	cmp	r3, #19
 80180d6:	d12d      	bne.n	8018134 <luaV_execute+0x6394>
 80180d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80180dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80180e0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80180e4:	6812      	ldr	r2, [r2, #0]
 80180e6:	601a      	str	r2, [r3, #0]
 80180e8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80180ec:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80180f0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80180f4:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 80180f8:	6812      	ldr	r2, [r2, #0]
 80180fa:	ee07 2a90 	vmov	s15, r2
 80180fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018102:	edc3 7a00 	vstr	s15, [r3]
 8018106:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801810a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801810e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018112:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8018116:	ed92 7a00 	vldr	s14, [r2]
 801811a:	edd3 7a00 	vldr	s15, [r3]
 801811e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018126:	bf94      	ite	ls
 8018128:	2301      	movls	r3, #1
 801812a:	2300      	movhi	r3, #0
 801812c:	b2db      	uxtb	r3, r3
 801812e:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8018132:	e03c      	b.n	80181ae <luaV_execute+0x640e>
 8018134:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018138:	0e1a      	lsrs	r2, r3, #24
 801813a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801813e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8018142:	601a      	str	r2, [r3, #0]
 8018144:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018148:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8018152:	611a      	str	r2, [r3, #16]
 8018154:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018158:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	685a      	ldr	r2, [r3, #4]
 8018160:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018164:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	60da      	str	r2, [r3, #12]
 801816c:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8018170:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018174:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8018178:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801817c:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8018180:	2315      	movs	r3, #21
 8018182:	9301      	str	r3, [sp, #4]
 8018184:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018188:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	9300      	str	r3, [sp, #0]
 8018190:	2300      	movs	r3, #0
 8018192:	6812      	ldr	r2, [r2, #0]
 8018194:	6800      	ldr	r0, [r0, #0]
 8018196:	f7f8 f859 	bl	801024c <luaT_callorderiTM>
 801819a:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4
 801819e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80181a2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	695b      	ldr	r3, [r3, #20]
 80181aa:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 80181ae:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80181b2:	0bdb      	lsrs	r3, r3, #15
 80181b4:	f003 0301 	and.w	r3, r3, #1
 80181b8:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 80181bc:	429a      	cmp	r2, r3
 80181be:	d005      	beq.n	80181cc <luaV_execute+0x642c>
 80181c0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80181c4:	3304      	adds	r3, #4
 80181c6:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80181ca:	e01e      	b.n	801820a <luaV_execute+0x646a>
 80181cc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80181d0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80181d4:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80181d8:	6812      	ldr	r2, [r2, #0]
 80181da:	601a      	str	r2, [r3, #0]
 80181dc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80181e0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	09db      	lsrs	r3, r3, #7
 80181e8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80181ec:	3302      	adds	r3, #2
 80181ee:	009b      	lsls	r3, r3, #2
 80181f0:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80181f4:	4413      	add	r3, r2
 80181f6:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80181fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80181fe:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	695b      	ldr	r3, [r3, #20]
 8018206:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801820a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801820e:	2b00      	cmp	r3, #0
 8018210:	bf14      	ite	ne
 8018212:	2301      	movne	r3, #1
 8018214:	2300      	moveq	r3, #0
 8018216:	b2db      	uxtb	r3, r3
 8018218:	2b00      	cmp	r3, #0
 801821a:	d013      	beq.n	8018244 <luaV_execute+0x64a4>
 801821c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018220:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018224:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8018228:	6818      	ldr	r0, [r3, #0]
 801822a:	f7f0 ff57 	bl	80090dc <luaG_traceexec>
 801822e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8018232:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018236:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	3308      	adds	r3, #8
 8018240:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8018244:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8018248:	1d1a      	adds	r2, r3, #4
 801824a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8018254:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018258:	09db      	lsrs	r3, r3, #7
 801825a:	b2db      	uxtb	r3, r3
 801825c:	00db      	lsls	r3, r3, #3
 801825e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8018262:	4413      	add	r3, r2
 8018264:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8018268:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801826c:	b2db      	uxtb	r3, r3
 801826e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018272:	4a51      	ldr	r2, [pc, #324]	; (80183b8 <luaV_execute+0x6618>)
 8018274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018278:	f7f9 be64 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_GTI) {
        op_orderI(L, l_gti, luai_numgt, 1, TM_LT);
 801827c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018280:	0c1b      	lsrs	r3, r3, #16
 8018282:	b2da      	uxtb	r2, r3
 8018284:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018288:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801828c:	3a7f      	subs	r2, #127	; 0x7f
 801828e:	601a      	str	r2, [r3, #0]
 8018290:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018294:	791b      	ldrb	r3, [r3, #4]
 8018296:	2b03      	cmp	r3, #3
 8018298:	d10f      	bne.n	80182ba <luaV_execute+0x651a>
 801829a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80182a4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80182a8:	6812      	ldr	r2, [r2, #0]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	bfb4      	ite	lt
 80182ae:	2301      	movlt	r3, #1
 80182b0:	2300      	movge	r3, #0
 80182b2:	b2db      	uxtb	r3, r3
 80182b4:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80182b8:	e06f      	b.n	801839a <luaV_execute+0x65fa>
 80182ba:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80182be:	791b      	ldrb	r3, [r3, #4]
 80182c0:	2b13      	cmp	r3, #19
 80182c2:	d12d      	bne.n	8018320 <luaV_execute+0x6580>
 80182c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80182c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80182cc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80182d0:	6812      	ldr	r2, [r2, #0]
 80182d2:	601a      	str	r2, [r3, #0]
 80182d4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80182d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80182dc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80182e0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80182e4:	6812      	ldr	r2, [r2, #0]
 80182e6:	ee07 2a90 	vmov	s15, r2
 80182ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182ee:	edc3 7a00 	vstr	s15, [r3]
 80182f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80182f6:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80182fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80182fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8018302:	ed92 7a00 	vldr	s14, [r2]
 8018306:	edd3 7a00 	vldr	s15, [r3]
 801830a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801830e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018312:	bfcc      	ite	gt
 8018314:	2301      	movgt	r3, #1
 8018316:	2300      	movle	r3, #0
 8018318:	b2db      	uxtb	r3, r3
 801831a:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 801831e:	e03c      	b.n	801839a <luaV_execute+0x65fa>
 8018320:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018324:	0e1a      	lsrs	r2, r3, #24
 8018326:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801832a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801832e:	601a      	str	r2, [r3, #0]
 8018330:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018334:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801833e:	611a      	str	r2, [r3, #16]
 8018340:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018344:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	685a      	ldr	r2, [r3, #4]
 801834c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018350:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	60da      	str	r2, [r3, #12]
 8018358:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801835c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018360:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8018364:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018368:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 801836c:	2314      	movs	r3, #20
 801836e:	9301      	str	r3, [sp, #4]
 8018370:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018374:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	9300      	str	r3, [sp, #0]
 801837c:	2301      	movs	r3, #1
 801837e:	6812      	ldr	r2, [r2, #0]
 8018380:	6800      	ldr	r0, [r0, #0]
 8018382:	f7f7 ff63 	bl	801024c <luaT_callorderiTM>
 8018386:	f8c7 04b0 	str.w	r0, [r7, #1200]	; 0x4b0
 801838a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801838e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	695b      	ldr	r3, [r3, #20]
 8018396:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801839a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801839e:	0bdb      	lsrs	r3, r3, #15
 80183a0:	f003 0301 	and.w	r3, r3, #1
 80183a4:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 80183a8:	429a      	cmp	r2, r3
 80183aa:	d007      	beq.n	80183bc <luaV_execute+0x661c>
 80183ac:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80183b0:	3304      	adds	r3, #4
 80183b2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80183b6:	e020      	b.n	80183fa <luaV_execute+0x665a>
 80183b8:	08022d3c 	.word	0x08022d3c
 80183bc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80183c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80183c4:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80183c8:	6812      	ldr	r2, [r2, #0]
 80183ca:	601a      	str	r2, [r3, #0]
 80183cc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80183d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	09db      	lsrs	r3, r3, #7
 80183d8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80183dc:	3302      	adds	r3, #2
 80183de:	009b      	lsls	r3, r3, #2
 80183e0:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80183e4:	4413      	add	r3, r2
 80183e6:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80183ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80183ee:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	695b      	ldr	r3, [r3, #20]
 80183f6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80183fa:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80183fe:	2b00      	cmp	r3, #0
 8018400:	bf14      	ite	ne
 8018402:	2301      	movne	r3, #1
 8018404:	2300      	moveq	r3, #0
 8018406:	b2db      	uxtb	r3, r3
 8018408:	2b00      	cmp	r3, #0
 801840a:	d013      	beq.n	8018434 <luaV_execute+0x6694>
 801840c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018410:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018414:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8018418:	6818      	ldr	r0, [r3, #0]
 801841a:	f7f0 fe5f 	bl	80090dc <luaG_traceexec>
 801841e:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8018422:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018426:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	3308      	adds	r3, #8
 8018430:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8018434:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8018438:	1d1a      	adds	r2, r3, #4
 801843a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8018444:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018448:	09db      	lsrs	r3, r3, #7
 801844a:	b2db      	uxtb	r3, r3
 801844c:	00db      	lsls	r3, r3, #3
 801844e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8018452:	4413      	add	r3, r2
 8018454:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8018458:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801845c:	b2db      	uxtb	r3, r3
 801845e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018462:	4abc      	ldr	r2, [pc, #752]	; (8018754 <luaV_execute+0x69b4>)
 8018464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018468:	f7f9 bd6c 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_GEI) {
        op_orderI(L, l_gei, luai_numge, 1, TM_LE);
 801846c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018470:	0c1b      	lsrs	r3, r3, #16
 8018472:	b2da      	uxtb	r2, r3
 8018474:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018478:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801847c:	3a7f      	subs	r2, #127	; 0x7f
 801847e:	601a      	str	r2, [r3, #0]
 8018480:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018484:	791b      	ldrb	r3, [r3, #4]
 8018486:	2b03      	cmp	r3, #3
 8018488:	d10f      	bne.n	80184aa <luaV_execute+0x670a>
 801848a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8018494:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 8018498:	6812      	ldr	r2, [r2, #0]
 801849a:	429a      	cmp	r2, r3
 801849c:	bfd4      	ite	le
 801849e:	2301      	movle	r3, #1
 80184a0:	2300      	movgt	r3, #0
 80184a2:	b2db      	uxtb	r3, r3
 80184a4:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80184a8:	e06f      	b.n	801858a <luaV_execute+0x67ea>
 80184aa:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80184ae:	791b      	ldrb	r3, [r3, #4]
 80184b0:	2b13      	cmp	r3, #19
 80184b2:	d12d      	bne.n	8018510 <luaV_execute+0x6770>
 80184b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80184b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80184bc:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80184c0:	6812      	ldr	r2, [r2, #0]
 80184c2:	601a      	str	r2, [r3, #0]
 80184c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80184c8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80184cc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80184d0:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 80184d4:	6812      	ldr	r2, [r2, #0]
 80184d6:	ee07 2a90 	vmov	s15, r2
 80184da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184de:	edc3 7a00 	vstr	s15, [r3]
 80184e2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80184e6:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 80184ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80184ee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80184f2:	ed92 7a00 	vldr	s14, [r2]
 80184f6:	edd3 7a00 	vldr	s15, [r3]
 80184fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018502:	bfac      	ite	ge
 8018504:	2301      	movge	r3, #1
 8018506:	2300      	movlt	r3, #0
 8018508:	b2db      	uxtb	r3, r3
 801850a:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 801850e:	e03c      	b.n	801858a <luaV_execute+0x67ea>
 8018510:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018514:	0e1a      	lsrs	r2, r3, #24
 8018516:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801851a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801851e:	601a      	str	r2, [r3, #0]
 8018520:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018524:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801852e:	611a      	str	r2, [r3, #16]
 8018530:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018534:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	685a      	ldr	r2, [r3, #4]
 801853c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018540:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	60da      	str	r2, [r3, #12]
 8018548:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801854c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018550:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8018554:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018558:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 801855c:	2315      	movs	r3, #21
 801855e:	9301      	str	r3, [sp, #4]
 8018560:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018564:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	9300      	str	r3, [sp, #0]
 801856c:	2301      	movs	r3, #1
 801856e:	6812      	ldr	r2, [r2, #0]
 8018570:	6800      	ldr	r0, [r0, #0]
 8018572:	f7f7 fe6b 	bl	801024c <luaT_callorderiTM>
 8018576:	f8c7 04ac 	str.w	r0, [r7, #1196]	; 0x4ac
 801857a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801857e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	695b      	ldr	r3, [r3, #20]
 8018586:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801858a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801858e:	0bdb      	lsrs	r3, r3, #15
 8018590:	f003 0301 	and.w	r3, r3, #1
 8018594:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8018598:	429a      	cmp	r2, r3
 801859a:	d005      	beq.n	80185a8 <luaV_execute+0x6808>
 801859c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80185a0:	3304      	adds	r3, #4
 80185a2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80185a6:	e01e      	b.n	80185e6 <luaV_execute+0x6846>
 80185a8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80185ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80185b0:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80185b4:	6812      	ldr	r2, [r2, #0]
 80185b6:	601a      	str	r2, [r3, #0]
 80185b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80185bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	09db      	lsrs	r3, r3, #7
 80185c4:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80185c8:	3302      	adds	r3, #2
 80185ca:	009b      	lsls	r3, r3, #2
 80185cc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80185d0:	4413      	add	r3, r2
 80185d2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80185d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80185da:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	695b      	ldr	r3, [r3, #20]
 80185e2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80185e6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	bf14      	ite	ne
 80185ee:	2301      	movne	r3, #1
 80185f0:	2300      	moveq	r3, #0
 80185f2:	b2db      	uxtb	r3, r3
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d013      	beq.n	8018620 <luaV_execute+0x6880>
 80185f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80185fc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018600:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8018604:	6818      	ldr	r0, [r3, #0]
 8018606:	f7f0 fd69 	bl	80090dc <luaG_traceexec>
 801860a:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801860e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018612:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	3308      	adds	r3, #8
 801861c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8018620:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8018624:	1d1a      	adds	r2, r3, #4
 8018626:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8018630:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018634:	09db      	lsrs	r3, r3, #7
 8018636:	b2db      	uxtb	r3, r3
 8018638:	00db      	lsls	r3, r3, #3
 801863a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801863e:	4413      	add	r3, r2
 8018640:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8018644:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018648:	b2db      	uxtb	r3, r3
 801864a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801864e:	4a41      	ldr	r2, [pc, #260]	; (8018754 <luaV_execute+0x69b4>)
 8018650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018654:	f7f9 bc76 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_TEST) {
        int cond = !l_isfalse(s2v(ra));
 8018658:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801865c:	791b      	ldrb	r3, [r3, #4]
 801865e:	2b01      	cmp	r3, #1
 8018660:	d008      	beq.n	8018674 <luaV_execute+0x68d4>
 8018662:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018666:	791b      	ldrb	r3, [r3, #4]
 8018668:	f003 030f 	and.w	r3, r3, #15
 801866c:	2b00      	cmp	r3, #0
 801866e:	d001      	beq.n	8018674 <luaV_execute+0x68d4>
 8018670:	2201      	movs	r2, #1
 8018672:	e000      	b.n	8018676 <luaV_execute+0x68d6>
 8018674:	2200      	movs	r2, #0
 8018676:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801867a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801867e:	601a      	str	r2, [r3, #0]
        docondjump();
 8018680:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018684:	0bdb      	lsrs	r3, r3, #15
 8018686:	f003 0301 	and.w	r3, r3, #1
 801868a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801868e:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8018692:	6812      	ldr	r2, [r2, #0]
 8018694:	429a      	cmp	r2, r3
 8018696:	d005      	beq.n	80186a4 <luaV_execute+0x6904>
 8018698:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801869c:	3304      	adds	r3, #4
 801869e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80186a2:	e01e      	b.n	80186e2 <luaV_execute+0x6942>
 80186a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80186a8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80186ac:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80186b0:	6812      	ldr	r2, [r2, #0]
 80186b2:	601a      	str	r2, [r3, #0]
 80186b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80186b8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	09db      	lsrs	r3, r3, #7
 80186c0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80186c4:	3302      	adds	r3, #2
 80186c6:	009b      	lsls	r3, r3, #2
 80186c8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80186cc:	4413      	add	r3, r2
 80186ce:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80186d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80186d6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	695b      	ldr	r3, [r3, #20]
 80186de:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80186e2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	bf14      	ite	ne
 80186ea:	2301      	movne	r3, #1
 80186ec:	2300      	moveq	r3, #0
 80186ee:	b2db      	uxtb	r3, r3
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d013      	beq.n	801871c <luaV_execute+0x697c>
 80186f4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80186f8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80186fc:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8018700:	6818      	ldr	r0, [r3, #0]
 8018702:	f7f0 fceb 	bl	80090dc <luaG_traceexec>
 8018706:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801870a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801870e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	3308      	adds	r3, #8
 8018718:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801871c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8018720:	1d1a      	adds	r2, r3, #4
 8018722:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801872c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018730:	09db      	lsrs	r3, r3, #7
 8018732:	b2db      	uxtb	r3, r3
 8018734:	00db      	lsls	r3, r3, #3
 8018736:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801873a:	4413      	add	r3, r2
 801873c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8018740:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018744:	b2db      	uxtb	r3, r3
 8018746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801874a:	4a02      	ldr	r2, [pc, #8]	; (8018754 <luaV_execute+0x69b4>)
 801874c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018750:	f7f9 bbf8 	b.w	8011f44 <luaV_execute+0x1a4>
 8018754:	08022d3c 	.word	0x08022d3c
      }
      vmcase(OP_TESTSET) {
        TValue *rb = vRB(i);
 8018758:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801875c:	0c1b      	lsrs	r3, r3, #16
 801875e:	b2db      	uxtb	r3, r3
 8018760:	00db      	lsls	r3, r3, #3
 8018762:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8018766:	441a      	add	r2, r3
 8018768:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801876c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8018770:	601a      	str	r2, [r3, #0]
        if (l_isfalse(rb) == GETARG_k(i))
 8018772:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018776:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	791b      	ldrb	r3, [r3, #4]
 801877e:	2b01      	cmp	r3, #1
 8018780:	d009      	beq.n	8018796 <luaV_execute+0x69f6>
 8018782:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018786:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	791b      	ldrb	r3, [r3, #4]
 801878e:	f003 030f 	and.w	r3, r3, #15
 8018792:	2b00      	cmp	r3, #0
 8018794:	d101      	bne.n	801879a <luaV_execute+0x69fa>
 8018796:	2301      	movs	r3, #1
 8018798:	e000      	b.n	801879c <luaV_execute+0x69fc>
 801879a:	2300      	movs	r3, #0
 801879c:	f003 0301 	and.w	r3, r3, #1
 80187a0:	b2db      	uxtb	r3, r3
 80187a2:	f083 0301 	eor.w	r3, r3, #1
 80187a6:	b2da      	uxtb	r2, r3
 80187a8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80187ac:	0bdb      	lsrs	r3, r3, #15
 80187ae:	f003 0301 	and.w	r3, r3, #1
 80187b2:	b2db      	uxtb	r3, r3
 80187b4:	4053      	eors	r3, r2
 80187b6:	b2db      	uxtb	r3, r3
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d005      	beq.n	80187c8 <luaV_execute+0x6a28>
          pc++;
 80187bc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80187c0:	3304      	adds	r3, #4
 80187c2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 80187c6:	e047      	b.n	8018858 <luaV_execute+0x6ab8>
        else {
          setobj2s(L, ra, rb);
 80187c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80187cc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80187d0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80187d4:	601a      	str	r2, [r3, #0]
 80187d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80187da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80187de:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80187e2:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80187e6:	6812      	ldr	r2, [r2, #0]
 80187e8:	601a      	str	r2, [r3, #0]
 80187ea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80187ee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80187f8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80187fc:	6812      	ldr	r2, [r2, #0]
 80187fe:	6812      	ldr	r2, [r2, #0]
 8018800:	601a      	str	r2, [r3, #0]
 8018802:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018806:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	791a      	ldrb	r2, [r3, #4]
 801880e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018812:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	711a      	strb	r2, [r3, #4]
          donextjump(ci);
 801881a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801881e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8018822:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8018826:	6812      	ldr	r2, [r2, #0]
 8018828:	601a      	str	r2, [r3, #0]
 801882a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801882e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	09db      	lsrs	r3, r3, #7
 8018836:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 801883a:	3302      	adds	r3, #2
 801883c:	009b      	lsls	r3, r3, #2
 801883e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8018842:	4413      	add	r3, r2
 8018844:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8018848:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801884c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	695b      	ldr	r3, [r3, #20]
 8018854:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        }
        vmbreak;
 8018858:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801885c:	2b00      	cmp	r3, #0
 801885e:	bf14      	ite	ne
 8018860:	2301      	movne	r3, #1
 8018862:	2300      	moveq	r3, #0
 8018864:	b2db      	uxtb	r3, r3
 8018866:	2b00      	cmp	r3, #0
 8018868:	d013      	beq.n	8018892 <luaV_execute+0x6af2>
 801886a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801886e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018872:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8018876:	6818      	ldr	r0, [r3, #0]
 8018878:	f7f0 fc30 	bl	80090dc <luaG_traceexec>
 801887c:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8018880:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018884:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	3308      	adds	r3, #8
 801888e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8018892:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8018896:	1d1a      	adds	r2, r3, #4
 8018898:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80188a2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80188a6:	09db      	lsrs	r3, r3, #7
 80188a8:	b2db      	uxtb	r3, r3
 80188aa:	00db      	lsls	r3, r3, #3
 80188ac:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80188b0:	4413      	add	r3, r2
 80188b2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80188b6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80188ba:	b2db      	uxtb	r3, r3
 80188bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188c0:	4aa6      	ldr	r2, [pc, #664]	; (8018b5c <luaV_execute+0x6dbc>)
 80188c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188c6:	f7f9 bb3d 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_CALL) {
        CallInfo *newci;
        int b = GETARG_B(i);
 80188ca:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80188ce:	0c1b      	lsrs	r3, r3, #16
 80188d0:	461a      	mov	r2, r3
 80188d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80188d6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80188da:	b2d2      	uxtb	r2, r2
 80188dc:	601a      	str	r2, [r3, #0]
        int nresults = GETARG_C(i) - 1;
 80188de:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80188e2:	0e1b      	lsrs	r3, r3, #24
 80188e4:	461a      	mov	r2, r3
 80188e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80188ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80188ee:	3a01      	subs	r2, #1
 80188f0:	601a      	str	r2, [r3, #0]
        if (b != 0)  /* fixed number of arguments? */
 80188f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80188f6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d00e      	beq.n	801891e <luaV_execute+0x6b7e>
          L->top = ra + b;  /* top signals number of arguments */
 8018900:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018904:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	00db      	lsls	r3, r3, #3
 801890c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8018910:	441a      	add	r2, r3
 8018912:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018916:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	60da      	str	r2, [r3, #12]
        /* else previous instruction set top */
        savepc(L);  /* in case of errors */
 801891e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018922:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801892c:	611a      	str	r2, [r3, #16]
        if ((newci = luaD_precall(L, ra, nresults)) == NULL)
 801892e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018932:	f5a3 74a8 	sub.w	r4, r3, #336	; 0x150
 8018936:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801893a:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 801893e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018942:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018946:	6812      	ldr	r2, [r2, #0]
 8018948:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801894c:	6818      	ldr	r0, [r3, #0]
 801894e:	f7f1 facb 	bl	8009ee8 <luaD_precall>
 8018952:	6020      	str	r0, [r4, #0]
 8018954:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018958:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d111      	bne.n	8018986 <luaV_execute+0x6be6>
          updatetrap(ci);  /* C call; nothing else to be done */
 8018962:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018966:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	695b      	ldr	r3, [r3, #20]
 801896e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        else {  /* Lua call: run function in this same C frame */
          ci = newci;
          goto startfunc;
        }
        vmbreak;
 8018972:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8018976:	2b00      	cmp	r3, #0
 8018978:	bf14      	ite	ne
 801897a:	2301      	movne	r3, #1
 801897c:	2300      	moveq	r3, #0
 801897e:	b2db      	uxtb	r3, r3
 8018980:	2b00      	cmp	r3, #0
 8018982:	d020      	beq.n	80189c6 <luaV_execute+0x6c26>
 8018984:	e00b      	b.n	801899e <luaV_execute+0x6bfe>
          ci = newci;
 8018986:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801898a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801898e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8018992:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8018996:	6812      	ldr	r2, [r2, #0]
 8018998:	601a      	str	r2, [r3, #0]
          goto startfunc;
 801899a:	f7f9 ba0f 	b.w	8011dbc <luaV_execute+0x1c>
        vmbreak;
 801899e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80189a2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80189a6:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80189aa:	6818      	ldr	r0, [r3, #0]
 80189ac:	f7f0 fb96 	bl	80090dc <luaG_traceexec>
 80189b0:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80189b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80189b8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	3308      	adds	r3, #8
 80189c2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80189c6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80189ca:	1d1a      	adds	r2, r3, #4
 80189cc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80189d6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80189da:	09db      	lsrs	r3, r3, #7
 80189dc:	b2db      	uxtb	r3, r3
 80189de:	00db      	lsls	r3, r3, #3
 80189e0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80189e4:	4413      	add	r3, r2
 80189e6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80189ea:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80189ee:	b2db      	uxtb	r3, r3
 80189f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80189f4:	4a59      	ldr	r2, [pc, #356]	; (8018b5c <luaV_execute+0x6dbc>)
 80189f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80189fa:	f7f9 baa3 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_TAILCALL) {
        int b = GETARG_B(i);  /* number of arguments + 1 (function) */
 80189fe:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018a02:	0c1b      	lsrs	r3, r3, #16
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
        int n;  /* number of results when calling a C function */
        int nparams1 = GETARG_C(i);
 8018a0a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018a0e:	0e1a      	lsrs	r2, r3, #24
 8018a10:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018a14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8018a18:	601a      	str	r2, [r3, #0]
        /* delta is virtual 'func' - real 'func' (vararg functions) */
        int delta = (nparams1) ? ci->u.l.nextraargs + nparams1 : 0;
 8018a1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018a1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d00c      	beq.n	8018a42 <luaV_execute+0x6ca2>
 8018a28:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018a2c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	699a      	ldr	r2, [r3, #24]
 8018a34:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018a38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	4413      	add	r3, r2
 8018a40:	e000      	b.n	8018a44 <luaV_execute+0x6ca4>
 8018a42:	2300      	movs	r3, #0
 8018a44:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8018a48:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8018a4c:	6013      	str	r3, [r2, #0]
        if (b != 0)
 8018a4e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d00c      	beq.n	8018a70 <luaV_execute+0x6cd0>
          L->top = ra + b;
 8018a56:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8018a5a:	00db      	lsls	r3, r3, #3
 8018a5c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8018a60:	441a      	add	r2, r3
 8018a62:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018a66:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	60da      	str	r2, [r3, #12]
 8018a6e:	e00b      	b.n	8018a88 <luaV_execute+0x6ce8>
        else  /* previous instruction set top */
          b = cast_int(L->top - ra);
 8018a70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018a74:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	68da      	ldr	r2, [r3, #12]
 8018a7c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018a80:	1ad3      	subs	r3, r2, r3
 8018a82:	10db      	asrs	r3, r3, #3
 8018a84:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
        savepc(ci);  /* several calls here can raise errors */
 8018a88:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018a8c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8018a96:	611a      	str	r2, [r3, #16]
        if (TESTARG_k(i)) {
 8018a98:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d008      	beq.n	8018ab6 <luaV_execute+0x6d16>
          luaF_closeupval(L, base);  /* close upvalues from current call */
 8018aa4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018aa8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018aac:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8018ab0:	6818      	ldr	r0, [r3, #0]
 8018ab2:	f7f1 fd0b 	bl	800a4cc <luaF_closeupval>
          lua_assert(L->tbclist < base);  /* no pending tbc variables */
          lua_assert(base == ci->func + 1);
        }
        if ((n = luaD_pretailcall(L, ci, ra, b, delta)) < 0)  /* Lua function? */
 8018ab6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018aba:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
 8018abe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018ac2:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8018ac6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018aca:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8018ace:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018ad2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	9300      	str	r3, [sp, #0]
 8018ada:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8018ade:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8018ae2:	6809      	ldr	r1, [r1, #0]
 8018ae4:	6800      	ldr	r0, [r0, #0]
 8018ae6:	f7f1 f942 	bl	8009d6e <luaD_pretailcall>
 8018aea:	6020      	str	r0, [r4, #0]
 8018aec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018af0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	da01      	bge.n	8018afe <luaV_execute+0x6d5e>
          goto startfunc;  /* execute the callee */
 8018afa:	f7f9 b95f 	b.w	8011dbc <luaV_execute+0x1c>
        else {  /* C function? */
          ci->func -= delta;  /* restore 'func' (if vararg) */
 8018afe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b02:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	681a      	ldr	r2, [r3, #0]
 8018b0a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b0e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	00db      	lsls	r3, r3, #3
 8018b16:	425b      	negs	r3, r3
 8018b18:	441a      	add	r2, r3
 8018b1a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b1e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	601a      	str	r2, [r3, #0]
          luaD_poscall(L, ci, n);  /* finish caller */
 8018b26:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b2a:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8018b2e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b32:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8018b36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b3a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018b3e:	6812      	ldr	r2, [r2, #0]
 8018b40:	6809      	ldr	r1, [r1, #0]
 8018b42:	6818      	ldr	r0, [r3, #0]
 8018b44:	f7f1 f856 	bl	8009bf4 <luaD_poscall>
          updatetrap(ci);  /* 'luaD_poscall' can change hooks */
 8018b48:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b4c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	695b      	ldr	r3, [r3, #20]
 8018b54:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
          goto ret;  /* caller returns after the tail call */
 8018b58:	e1d7      	b.n	8018f0a <luaV_execute+0x716a>
 8018b5a:	bf00      	nop
 8018b5c:	08022d3c 	.word	0x08022d3c
        }
      }
      vmcase(OP_RETURN) {
        int n = GETARG_B(i) - 1;  /* number of results */
 8018b60:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018b64:	0c1b      	lsrs	r3, r3, #16
 8018b66:	b2db      	uxtb	r3, r3
 8018b68:	3b01      	subs	r3, #1
 8018b6a:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
        int nparams1 = GETARG_C(i);
 8018b6e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018b72:	0e1a      	lsrs	r2, r3, #24
 8018b74:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b78:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8018b7c:	601a      	str	r2, [r3, #0]
        if (n < 0)  /* not fixed? */
 8018b7e:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	da0b      	bge.n	8018b9e <luaV_execute+0x6dfe>
          n = cast_int(L->top - ra);  /* get what is available */
 8018b86:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018b8a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	68da      	ldr	r2, [r3, #12]
 8018b92:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018b96:	1ad3      	subs	r3, r2, r3
 8018b98:	10db      	asrs	r3, r3, #3
 8018b9a:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
        savepc(ci);
 8018b9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018ba2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8018bac:	611a      	str	r2, [r3, #16]
        if (TESTARG_k(i)) {  /* may there be open upvalues? */
 8018bae:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d051      	beq.n	8018c5e <luaV_execute+0x6ebe>
          ci->u2.nres = n;  /* save number of returns */
 8018bba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018bbe:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8018bc8:	61da      	str	r2, [r3, #28]
          if (L->top < ci->top)
 8018bca:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018bce:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	68da      	ldr	r2, [r3, #12]
 8018bd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018bda:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	429a      	cmp	r2, r3
 8018be4:	d20b      	bcs.n	8018bfe <luaV_execute+0x6e5e>
            L->top = ci->top;
 8018be6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018bea:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	685a      	ldr	r2, [r3, #4]
 8018bf2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018bf6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	60da      	str	r2, [r3, #12]
          luaF_close(L, base, CLOSEKTOP, 1);
 8018bfe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018c02:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 8018c06:	2301      	movs	r3, #1
 8018c08:	f04f 32ff 	mov.w	r2, #4294967295
 8018c0c:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8018c10:	6800      	ldr	r0, [r0, #0]
 8018c12:	f7f1 fcd6 	bl	800a5c2 <luaF_close>
          updatetrap(ci);
 8018c16:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018c1a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	695b      	ldr	r3, [r3, #20]
 8018c22:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
          updatestack(ci);
 8018c26:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	bf14      	ite	ne
 8018c2e:	2301      	movne	r3, #1
 8018c30:	2300      	moveq	r3, #0
 8018c32:	b2db      	uxtb	r3, r3
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d012      	beq.n	8018c5e <luaV_execute+0x6ebe>
 8018c38:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018c3c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	3308      	adds	r3, #8
 8018c46:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8018c4a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8018c4e:	09db      	lsrs	r3, r3, #7
 8018c50:	b2db      	uxtb	r3, r3
 8018c52:	00db      	lsls	r3, r3, #3
 8018c54:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8018c58:	4413      	add	r3, r2
 8018c5a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
        }
        if (nparams1)  /* vararg function? */
 8018c5e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018c62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d01a      	beq.n	8018ca2 <luaV_execute+0x6f02>
          ci->func -= ci->u.l.nextraargs + nparams1;
 8018c6c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018c70:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	681a      	ldr	r2, [r3, #0]
 8018c78:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018c7c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	6999      	ldr	r1, [r3, #24]
 8018c84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018c88:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	440b      	add	r3, r1
 8018c90:	00db      	lsls	r3, r3, #3
 8018c92:	425b      	negs	r3, r3
 8018c94:	441a      	add	r2, r3
 8018c96:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018c9a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	601a      	str	r2, [r3, #0]
        L->top = ra + n;  /* set call for 'luaD_poscall' */
 8018ca2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8018ca6:	00db      	lsls	r3, r3, #3
 8018ca8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8018cac:	441a      	add	r2, r3
 8018cae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018cb2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	60da      	str	r2, [r3, #12]
        luaD_poscall(L, ci, n);
 8018cba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018cbe:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8018cc2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018cc6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018cca:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8018cce:	6809      	ldr	r1, [r1, #0]
 8018cd0:	6818      	ldr	r0, [r3, #0]
 8018cd2:	f7f0 ff8f 	bl	8009bf4 <luaD_poscall>
        updatetrap(ci);  /* 'luaD_poscall' can change hooks */
 8018cd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018cda:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	695b      	ldr	r3, [r3, #20]
 8018ce2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        goto ret;
 8018ce6:	e110      	b.n	8018f0a <luaV_execute+0x716a>
      }
      vmcase(OP_RETURN0) {
        if (l_unlikely(L->hookmask)) {
 8018ce8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018cec:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	bf14      	ite	ne
 8018cf8:	2301      	movne	r3, #1
 8018cfa:	2300      	moveq	r3, #0
 8018cfc:	b2db      	uxtb	r3, r3
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d020      	beq.n	8018d44 <luaV_execute+0x6fa4>
          L->top = ra;
 8018d02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d06:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8018d10:	60da      	str	r2, [r3, #12]
          savepc(ci);
 8018d12:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d16:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8018d20:	611a      	str	r2, [r3, #16]
          luaD_poscall(L, ci, 0);  /* no hurry... */
 8018d22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d26:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8018d2a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d2e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018d32:	2200      	movs	r2, #0
 8018d34:	6809      	ldr	r1, [r1, #0]
 8018d36:	6818      	ldr	r0, [r3, #0]
 8018d38:	f7f0 ff5c 	bl	8009bf4 <luaD_poscall>
          trap = 1;
 8018d3c:	2301      	movs	r3, #1
 8018d3e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
          L->ci = ci->previous;  /* back to caller */
          L->top = base - 1;
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
            setnilvalue(s2v(L->top++));  /* all results are nil */
        }
        goto ret;
 8018d42:	e0e2      	b.n	8018f0a <luaV_execute+0x716a>
          L->ci = ci->previous;  /* back to caller */
 8018d44:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d48:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	689a      	ldr	r2, [r3, #8]
 8018d50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d54:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	615a      	str	r2, [r3, #20]
          L->top = base - 1;
 8018d5c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8018d60:	f1a3 0208 	sub.w	r2, r3, #8
 8018d64:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d68:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	60da      	str	r2, [r3, #12]
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
 8018d70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d74:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8018d7e:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8018d82:	e014      	b.n	8018dae <luaV_execute+0x700e>
            setnilvalue(s2v(L->top++));  /* all results are nil */
 8018d84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018d88:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	f103 0108 	add.w	r1, r3, #8
 8018d94:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8018d98:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8018d9c:	6812      	ldr	r2, [r2, #0]
 8018d9e:	60d1      	str	r1, [r2, #12]
 8018da0:	2200      	movs	r2, #0
 8018da2:	711a      	strb	r2, [r3, #4]
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
 8018da4:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8018da8:	3b01      	subs	r3, #1
 8018daa:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8018dae:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	bfcc      	ite	gt
 8018db6:	2301      	movgt	r3, #1
 8018db8:	2300      	movle	r3, #0
 8018dba:	b2db      	uxtb	r3, r3
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d1e1      	bne.n	8018d84 <luaV_execute+0x6fe4>
        goto ret;
 8018dc0:	e0a3      	b.n	8018f0a <luaV_execute+0x716a>
      }
      vmcase(OP_RETURN1) {
        if (l_unlikely(L->hookmask)) {
 8018dc2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018dc6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	bf14      	ite	ne
 8018dd2:	2301      	movne	r3, #1
 8018dd4:	2300      	moveq	r3, #0
 8018dd6:	b2db      	uxtb	r3, r3
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d022      	beq.n	8018e22 <luaV_execute+0x7082>
          L->top = ra + 1;
 8018ddc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018de0:	f103 0208 	add.w	r2, r3, #8
 8018de4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018de8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	60da      	str	r2, [r3, #12]
          savepc(ci);
 8018df0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018df4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8018dfe:	611a      	str	r2, [r3, #16]
          luaD_poscall(L, ci, 1);  /* no hurry... */
 8018e00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e04:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8018e08:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e0c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018e10:	2201      	movs	r2, #1
 8018e12:	6809      	ldr	r1, [r1, #0]
 8018e14:	6818      	ldr	r0, [r3, #0]
 8018e16:	f7f0 feed 	bl	8009bf4 <luaD_poscall>
          trap = 1;
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8018e20:	e073      	b.n	8018f0a <luaV_execute+0x716a>
        }
        else {  /* do the 'poscall' here */
          int nres = ci->nresults;
 8018e22:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e26:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8018e30:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          L->ci = ci->previous;  /* back to caller */
 8018e34:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e38:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	689a      	ldr	r2, [r3, #8]
 8018e40:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e44:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	615a      	str	r2, [r3, #20]
          if (nres == 0)
 8018e4c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d10a      	bne.n	8018e6a <luaV_execute+0x70ca>
            L->top = base - 1;  /* asked for no results */
 8018e54:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8018e58:	f1a3 0208 	sub.w	r2, r3, #8
 8018e5c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e60:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	60da      	str	r2, [r3, #12]
 8018e68:	e04f      	b.n	8018f0a <luaV_execute+0x716a>
          else {
            setobjs2s(L, base - 1, ra);  /* at least this result */
 8018e6a:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8018e6e:	f1a3 0208 	sub.w	r2, r3, #8
 8018e72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018e7a:	601a      	str	r2, [r3, #0]
 8018e7c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018e84:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8018e88:	601a      	str	r2, [r3, #0]
 8018e8a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8018e98:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8018e9c:	6812      	ldr	r2, [r2, #0]
 8018e9e:	6812      	ldr	r2, [r2, #0]
 8018ea0:	601a      	str	r2, [r3, #0]
 8018ea2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018ea6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	791a      	ldrb	r2, [r3, #4]
 8018eae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	711a      	strb	r2, [r3, #4]
            L->top = base;
 8018eba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018ebe:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8018ec8:	60da      	str	r2, [r3, #12]
            for (; l_unlikely(nres > 1); nres--)
 8018eca:	e014      	b.n	8018ef6 <luaV_execute+0x7156>
              setnilvalue(s2v(L->top++));  /* complete missing results */
 8018ecc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018ed0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	68db      	ldr	r3, [r3, #12]
 8018ed8:	f103 0108 	add.w	r1, r3, #8
 8018edc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8018ee0:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8018ee4:	6812      	ldr	r2, [r2, #0]
 8018ee6:	60d1      	str	r1, [r2, #12]
 8018ee8:	2200      	movs	r2, #0
 8018eea:	711a      	strb	r2, [r3, #4]
            for (; l_unlikely(nres > 1); nres--)
 8018eec:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8018ef0:	3b01      	subs	r3, #1
 8018ef2:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8018ef6:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8018efa:	2b01      	cmp	r3, #1
 8018efc:	bfcc      	ite	gt
 8018efe:	2301      	movgt	r3, #1
 8018f00:	2300      	movle	r3, #0
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d1e1      	bne.n	8018ecc <luaV_execute+0x712c>
          }
        }
       ret:  /* return from a Lua function */
 8018f08:	bf00      	nop
        if (ci->callstatus & CIST_FRESH)
 8018f0a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018f0e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018f16:	f003 0304 	and.w	r3, r3, #4
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	f040 8523 	bne.w	8019966 <luaV_execute+0x7bc6>
          return;  /* end this frame */
        else {
          ci = ci->previous;
 8018f20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018f24:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8018f28:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8018f2c:	f5a2 62b0 	sub.w	r2, r2, #1408	; 0x580
 8018f30:	6812      	ldr	r2, [r2, #0]
 8018f32:	6892      	ldr	r2, [r2, #8]
 8018f34:	601a      	str	r2, [r3, #0]
          goto returning;  /* continue running caller in this frame */
 8018f36:	f7f8 bf49 	b.w	8011dcc <luaV_execute+0x2c>
        }
      }
      vmcase(OP_FORLOOP) {
        if (ttisinteger(s2v(ra + 2))) {  /* integer loop? */
 8018f3a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018f3e:	3310      	adds	r3, #16
 8018f40:	791b      	ldrb	r3, [r3, #4]
 8018f42:	2b03      	cmp	r3, #3
 8018f44:	f040 8081 	bne.w	801904a <luaV_execute+0x72aa>
          lua_Unsigned count = l_castS2U(ivalue(s2v(ra + 1)));
 8018f48:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018f4c:	3308      	adds	r3, #8
 8018f4e:	681a      	ldr	r2, [r3, #0]
 8018f50:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018f54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8018f58:	601a      	str	r2, [r3, #0]
          if (count > 0) {  /* still more iterations? */
 8018f5a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018f5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	f000 8081 	beq.w	801906c <luaV_execute+0x72cc>
            lua_Integer step = ivalue(s2v(ra + 2));
 8018f6a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018f6e:	f103 0210 	add.w	r2, r3, #16
 8018f72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018f76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018f7a:	6812      	ldr	r2, [r2, #0]
 8018f7c:	601a      	str	r2, [r3, #0]
            lua_Integer idx = ivalue(s2v(ra));  /* internal index */
 8018f7e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018f82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018f86:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8018f8a:	6812      	ldr	r2, [r2, #0]
 8018f8c:	601a      	str	r2, [r3, #0]
            chgivalue(s2v(ra + 1), count - 1);  /* update counter */
 8018f8e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8018f92:	f103 0208 	add.w	r2, r3, #8
 8018f96:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018f9a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8018f9e:	601a      	str	r2, [r3, #0]
 8018fa0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018fa4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	3b01      	subs	r3, #1
 8018fac:	461a      	mov	r2, r3
 8018fae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018fb2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	601a      	str	r2, [r3, #0]
            idx = intop(+, idx, step);  /* add step to index */
 8018fba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018fbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018fc2:	681a      	ldr	r2, [r3, #0]
 8018fc4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018fc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	441a      	add	r2, r3
 8018fd0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018fd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018fd8:	601a      	str	r2, [r3, #0]
            chgivalue(s2v(ra), idx);  /* update internal index */
 8018fda:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018fde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8018fe2:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8018fe6:	601a      	str	r2, [r3, #0]
 8018fe8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8018fec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8018ff6:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8018ffa:	6812      	ldr	r2, [r2, #0]
 8018ffc:	601a      	str	r2, [r3, #0]
            setivalue(s2v(ra + 3), idx);  /* and control variable */
 8018ffe:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8019002:	f103 0218 	add.w	r2, r3, #24
 8019006:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801900a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801900e:	601a      	str	r2, [r3, #0]
 8019010:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 801901e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8019022:	6812      	ldr	r2, [r2, #0]
 8019024:	601a      	str	r2, [r3, #0]
 8019026:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801902a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	2203      	movs	r2, #3
 8019032:	711a      	strb	r2, [r3, #4]
            pc -= GETARG_Bx(i);  /* jump back */
 8019034:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8019038:	0bdb      	lsrs	r3, r3, #15
 801903a:	009b      	lsls	r3, r3, #2
 801903c:	425b      	negs	r3, r3
 801903e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8019042:	4413      	add	r3, r2
 8019044:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8019048:	e010      	b.n	801906c <luaV_execute+0x72cc>
          }
        }
        else if (floatforloop(ra))  /* float loop */
 801904a:	f8d7 056c 	ldr.w	r0, [r7, #1388]	; 0x56c
 801904e:	f7f7 fe11 	bl	8010c74 <floatforloop>
 8019052:	4603      	mov	r3, r0
 8019054:	2b00      	cmp	r3, #0
 8019056:	d009      	beq.n	801906c <luaV_execute+0x72cc>
          pc -= GETARG_Bx(i);  /* jump back */
 8019058:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801905c:	0bdb      	lsrs	r3, r3, #15
 801905e:	009b      	lsls	r3, r3, #2
 8019060:	425b      	negs	r3, r3
 8019062:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8019066:	4413      	add	r3, r2
 8019068:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        updatetrap(ci);  /* allows a signal to break the loop */
 801906c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019070:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	695b      	ldr	r3, [r3, #20]
 8019078:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801907c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8019080:	2b00      	cmp	r3, #0
 8019082:	bf14      	ite	ne
 8019084:	2301      	movne	r3, #1
 8019086:	2300      	moveq	r3, #0
 8019088:	b2db      	uxtb	r3, r3
 801908a:	2b00      	cmp	r3, #0
 801908c:	d013      	beq.n	80190b6 <luaV_execute+0x7316>
 801908e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019092:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019096:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801909a:	6818      	ldr	r0, [r3, #0]
 801909c:	f7f0 f81e 	bl	80090dc <luaG_traceexec>
 80190a0:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80190a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80190a8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	3308      	adds	r3, #8
 80190b2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80190b6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80190ba:	1d1a      	adds	r2, r3, #4
 80190bc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80190c6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80190ca:	09db      	lsrs	r3, r3, #7
 80190cc:	b2db      	uxtb	r3, r3
 80190ce:	00db      	lsls	r3, r3, #3
 80190d0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80190d4:	4413      	add	r3, r2
 80190d6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80190da:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80190de:	b2db      	uxtb	r3, r3
 80190e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80190e4:	4ac5      	ldr	r2, [pc, #788]	; (80193fc <luaV_execute+0x765c>)
 80190e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80190ea:	f7f8 bf2b 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_FORPREP) {
        savestate(L, ci);  /* in case of errors */
 80190ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80190f2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80190fc:	611a      	str	r2, [r3, #16]
 80190fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019102:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	685a      	ldr	r2, [r3, #4]
 801910a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801910e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	60da      	str	r2, [r3, #12]
        if (forprep(L, ra))
 8019116:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801911a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801911e:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8019122:	6818      	ldr	r0, [r3, #0]
 8019124:	f7f7 fc96 	bl	8010a54 <forprep>
 8019128:	4603      	mov	r3, r0
 801912a:	2b00      	cmp	r3, #0
 801912c:	d009      	beq.n	8019142 <luaV_execute+0x73a2>
          pc += GETARG_Bx(i) + 1;  /* skip the loop */
 801912e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8019132:	0bdb      	lsrs	r3, r3, #15
 8019134:	3301      	adds	r3, #1
 8019136:	009b      	lsls	r3, r3, #2
 8019138:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801913c:	4413      	add	r3, r2
 801913e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        vmbreak;
 8019142:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8019146:	2b00      	cmp	r3, #0
 8019148:	bf14      	ite	ne
 801914a:	2301      	movne	r3, #1
 801914c:	2300      	moveq	r3, #0
 801914e:	b2db      	uxtb	r3, r3
 8019150:	2b00      	cmp	r3, #0
 8019152:	d013      	beq.n	801917c <luaV_execute+0x73dc>
 8019154:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019158:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801915c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8019160:	6818      	ldr	r0, [r3, #0]
 8019162:	f7ef ffbb 	bl	80090dc <luaG_traceexec>
 8019166:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801916a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801916e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	3308      	adds	r3, #8
 8019178:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801917c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8019180:	1d1a      	adds	r2, r3, #4
 8019182:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801918c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8019190:	09db      	lsrs	r3, r3, #7
 8019192:	b2db      	uxtb	r3, r3
 8019194:	00db      	lsls	r3, r3, #3
 8019196:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801919a:	4413      	add	r3, r2
 801919c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80191a0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80191aa:	4a94      	ldr	r2, [pc, #592]	; (80193fc <luaV_execute+0x765c>)
 80191ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80191b0:	f7f8 bec8 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_TFORPREP) {
        /* create to-be-closed upvalue (if needed) */
        halfProtect(luaF_newtbcupval(L, ra + 3));
 80191b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80191b8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80191c2:	611a      	str	r2, [r3, #16]
 80191c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80191c8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	685a      	ldr	r2, [r3, #4]
 80191d0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80191d4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	60da      	str	r2, [r3, #12]
 80191dc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80191e0:	f103 0218 	add.w	r2, r3, #24
 80191e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80191e8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80191ec:	4611      	mov	r1, r2
 80191ee:	6818      	ldr	r0, [r3, #0]
 80191f0:	f7f1 f91a 	bl	800a428 <luaF_newtbcupval>
        pc += GETARG_Bx(i);
 80191f4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80191f8:	0bdb      	lsrs	r3, r3, #15
 80191fa:	009b      	lsls	r3, r3, #2
 80191fc:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8019200:	4413      	add	r3, r2
 8019202:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        i = *(pc++);  /* go to next instruction */
 8019206:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801920a:	1d1a      	adds	r2, r3, #4
 801920c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
        lua_assert(GET_OPCODE(i) == OP_TFORCALL && ra == RA(i));
        goto l_tforcall;
 8019216:	e7ff      	b.n	8019218 <luaV_execute+0x7478>
           'ra + 2' has the control variable, and 'ra + 3' has the
           to-be-closed variable. The call will use the stack after
           these values (starting at 'ra + 4')
        */
        /* push function, state, and control variable */
        memcpy(ra + 4, ra, 3 * sizeof(*ra));
 8019218:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801921c:	3320      	adds	r3, #32
 801921e:	2218      	movs	r2, #24
 8019220:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8019224:	4618      	mov	r0, r3
 8019226:	f005 fd03 	bl	801ec30 <memcpy>
        L->top = ra + 4 + 3;
 801922a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 801922e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8019232:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019236:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	60da      	str	r2, [r3, #12]
        ProtectNT(luaD_call(L, ra + 4, GETARG_C(i)));  /* do the call */
 801923e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019242:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801924c:	611a      	str	r2, [r3, #16]
 801924e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8019252:	f103 0120 	add.w	r1, r3, #32
 8019256:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801925a:	0e1b      	lsrs	r3, r3, #24
 801925c:	461a      	mov	r2, r3
 801925e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019262:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019266:	6818      	ldr	r0, [r3, #0]
 8019268:	f7f0 feff 	bl	800a06a <luaD_call>
 801926c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019270:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	695b      	ldr	r3, [r3, #20]
 8019278:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        updatestack(ci);  /* stack may have changed */
 801927c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8019280:	2b00      	cmp	r3, #0
 8019282:	bf14      	ite	ne
 8019284:	2301      	movne	r3, #1
 8019286:	2300      	moveq	r3, #0
 8019288:	b2db      	uxtb	r3, r3
 801928a:	2b00      	cmp	r3, #0
 801928c:	d012      	beq.n	80192b4 <luaV_execute+0x7514>
 801928e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019292:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	3308      	adds	r3, #8
 801929c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80192a0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80192a4:	09db      	lsrs	r3, r3, #7
 80192a6:	b2db      	uxtb	r3, r3
 80192a8:	00db      	lsls	r3, r3, #3
 80192aa:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80192ae:	4413      	add	r3, r2
 80192b0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
        i = *(pc++);  /* go to next instruction */
 80192b4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80192b8:	1d1a      	adds	r2, r3, #4
 80192ba:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
        lua_assert(GET_OPCODE(i) == OP_TFORLOOP && ra == RA(i));
        goto l_tforloop;
 80192c4:	e7ff      	b.n	80192c6 <luaV_execute+0x7526>
      }
      vmcase(OP_TFORLOOP) {
        l_tforloop:
        if (!ttisnil(s2v(ra + 4))) {  /* continue loop? */
 80192c6:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80192ca:	3320      	adds	r3, #32
 80192cc:	791b      	ldrb	r3, [r3, #4]
 80192ce:	f003 030f 	and.w	r3, r3, #15
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d033      	beq.n	801933e <luaV_execute+0x759e>
          setobjs2s(L, ra + 2, ra + 4);  /* save control variable */
 80192d6:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80192da:	f103 0210 	add.w	r2, r3, #16
 80192de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80192e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80192e6:	601a      	str	r2, [r3, #0]
 80192e8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80192ec:	f103 0220 	add.w	r2, r3, #32
 80192f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80192f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80192f8:	601a      	str	r2, [r3, #0]
 80192fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80192fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8019308:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 801930c:	6812      	ldr	r2, [r2, #0]
 801930e:	6812      	ldr	r2, [r2, #0]
 8019310:	601a      	str	r2, [r3, #0]
 8019312:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019316:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	791a      	ldrb	r2, [r3, #4]
 801931e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019322:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	711a      	strb	r2, [r3, #4]
          pc -= GETARG_Bx(i);  /* jump back */
 801932a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801932e:	0bdb      	lsrs	r3, r3, #15
 8019330:	009b      	lsls	r3, r3, #2
 8019332:	425b      	negs	r3, r3
 8019334:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8019338:	4413      	add	r3, r2
 801933a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        }
        vmbreak;
 801933e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8019342:	2b00      	cmp	r3, #0
 8019344:	bf14      	ite	ne
 8019346:	2301      	movne	r3, #1
 8019348:	2300      	moveq	r3, #0
 801934a:	b2db      	uxtb	r3, r3
 801934c:	2b00      	cmp	r3, #0
 801934e:	d013      	beq.n	8019378 <luaV_execute+0x75d8>
 8019350:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019354:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019358:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801935c:	6818      	ldr	r0, [r3, #0]
 801935e:	f7ef febd 	bl	80090dc <luaG_traceexec>
 8019362:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 8019366:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801936a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	3308      	adds	r3, #8
 8019374:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8019378:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801937c:	1d1a      	adds	r2, r3, #4
 801937e:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8019388:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801938c:	09db      	lsrs	r3, r3, #7
 801938e:	b2db      	uxtb	r3, r3
 8019390:	00db      	lsls	r3, r3, #3
 8019392:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8019396:	4413      	add	r3, r2
 8019398:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801939c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80193a0:	b2db      	uxtb	r3, r3
 80193a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80193a6:	4a15      	ldr	r2, [pc, #84]	; (80193fc <luaV_execute+0x765c>)
 80193a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80193ac:	f7f8 bdca 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_SETLIST) {
        int n = GETARG_B(i);
 80193b0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80193b4:	0c1b      	lsrs	r3, r3, #16
 80193b6:	b2db      	uxtb	r3, r3
 80193b8:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
        unsigned int last = GETARG_C(i);
 80193bc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80193c0:	0e1b      	lsrs	r3, r3, #24
 80193c2:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
        Table *h = hvalue(s2v(ra));
 80193c6:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80193ca:	681a      	ldr	r2, [r3, #0]
 80193cc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80193d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80193d4:	601a      	str	r2, [r3, #0]
        if (n == 0)
 80193d6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d110      	bne.n	8019400 <luaV_execute+0x7660>
          n = cast_int(L->top - ra) - 1;  /* get up to the top */
 80193de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80193e2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	68da      	ldr	r2, [r3, #12]
 80193ea:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80193ee:	1ad3      	subs	r3, r2, r3
 80193f0:	10db      	asrs	r3, r3, #3
 80193f2:	3b01      	subs	r3, #1
 80193f4:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 80193f8:	e00e      	b.n	8019418 <luaV_execute+0x7678>
 80193fa:	bf00      	nop
 80193fc:	08022d3c 	.word	0x08022d3c
        else
          L->top = ci->top;  /* correct top in case of emergency GC */
 8019400:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019404:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	685a      	ldr	r2, [r3, #4]
 801940c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019410:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	60da      	str	r2, [r3, #12]
        last += n;
 8019418:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 801941c:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8019420:	4413      	add	r3, r2
 8019422:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
        if (TESTARG_k(i)) {
 8019426:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801942a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801942e:	2b00      	cmp	r3, #0
 8019430:	d00f      	beq.n	8019452 <luaV_execute+0x76b2>
          last += GETARG_Ax(*pc) * (MAXARG_C + 1);
 8019432:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	09db      	lsrs	r3, r3, #7
 801943a:	021b      	lsls	r3, r3, #8
 801943c:	461a      	mov	r2, r3
 801943e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8019442:	4413      	add	r3, r2
 8019444:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
          pc++;
 8019448:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 801944c:	3304      	adds	r3, #4
 801944e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
        }
        if (last > luaH_realasize(h))  /* needs more space? */
 8019452:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019456:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801945a:	6818      	ldr	r0, [r3, #0]
 801945c:	f7f5 fc9e 	bl	800ed9c <luaH_realasize>
 8019460:	4602      	mov	r2, r0
 8019462:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8019466:	4293      	cmp	r3, r2
 8019468:	f240 8084 	bls.w	8019574 <luaV_execute+0x77d4>
          luaH_resizearray(L, h, last);  /* preallocate it at once */
 801946c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019470:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 8019474:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019478:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801947c:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8019480:	6809      	ldr	r1, [r1, #0]
 8019482:	6818      	ldr	r0, [r3, #0]
 8019484:	f7f5 ff99 	bl	800f3ba <luaH_resizearray>
        for (; n > 0; n--) {
 8019488:	e074      	b.n	8019574 <luaV_execute+0x77d4>
          TValue *val = s2v(ra + n);
 801948a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 801948e:	00db      	lsls	r3, r3, #3
 8019490:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8019494:	441a      	add	r2, r3
 8019496:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801949a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801949e:	601a      	str	r2, [r3, #0]
          setobj2t(L, &h->array[last - 1], val);
 80194a0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80194a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	68d9      	ldr	r1, [r3, #12]
 80194ac:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80194b0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80194b4:	3b01      	subs	r3, #1
 80194b6:	00da      	lsls	r2, r3, #3
 80194b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80194bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80194c0:	440a      	add	r2, r1
 80194c2:	601a      	str	r2, [r3, #0]
 80194c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80194c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80194cc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80194d0:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80194d4:	6812      	ldr	r2, [r2, #0]
 80194d6:	601a      	str	r2, [r3, #0]
 80194d8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80194dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80194e6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80194ea:	6812      	ldr	r2, [r2, #0]
 80194ec:	6812      	ldr	r2, [r2, #0]
 80194ee:	601a      	str	r2, [r3, #0]
 80194f0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80194f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	791a      	ldrb	r2, [r3, #4]
 80194fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	711a      	strb	r2, [r3, #4]
          last--;
 8019508:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 801950c:	3b01      	subs	r3, #1
 801950e:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
          luaC_barrierback(L, obj2gco(h), val);
 8019512:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	791b      	ldrb	r3, [r3, #4]
 801951e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019522:	2b00      	cmp	r3, #0
 8019524:	d021      	beq.n	801956a <luaV_execute+0x77ca>
 8019526:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801952a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	795b      	ldrb	r3, [r3, #5]
 8019532:	f003 0320 	and.w	r3, r3, #32
 8019536:	2b00      	cmp	r3, #0
 8019538:	d017      	beq.n	801956a <luaV_execute+0x77ca>
 801953a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801953e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	795b      	ldrb	r3, [r3, #5]
 8019548:	f003 0318 	and.w	r3, r3, #24
 801954c:	2b00      	cmp	r3, #0
 801954e:	d00c      	beq.n	801956a <luaV_execute+0x77ca>
 8019550:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019554:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8019558:	681a      	ldr	r2, [r3, #0]
 801955a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801955e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019562:	4611      	mov	r1, r2
 8019564:	6818      	ldr	r0, [r3, #0]
 8019566:	f7f1 f9e7 	bl	800a938 <luaC_barrierback_>
        for (; n > 0; n--) {
 801956a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 801956e:	3b01      	subs	r3, #1
 8019570:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8019574:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8019578:	2b00      	cmp	r3, #0
 801957a:	dc86      	bgt.n	801948a <luaV_execute+0x76ea>
        }
        vmbreak;
 801957c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8019580:	2b00      	cmp	r3, #0
 8019582:	bf14      	ite	ne
 8019584:	2301      	movne	r3, #1
 8019586:	2300      	moveq	r3, #0
 8019588:	b2db      	uxtb	r3, r3
 801958a:	2b00      	cmp	r3, #0
 801958c:	d013      	beq.n	80195b6 <luaV_execute+0x7816>
 801958e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019592:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019596:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801959a:	6818      	ldr	r0, [r3, #0]
 801959c:	f7ef fd9e 	bl	80090dc <luaG_traceexec>
 80195a0:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80195a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80195a8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	3308      	adds	r3, #8
 80195b2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80195b6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80195ba:	1d1a      	adds	r2, r3, #4
 80195bc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80195c6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80195ca:	09db      	lsrs	r3, r3, #7
 80195cc:	b2db      	uxtb	r3, r3
 80195ce:	00db      	lsls	r3, r3, #3
 80195d0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80195d4:	4413      	add	r3, r2
 80195d6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80195da:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80195de:	b2db      	uxtb	r3, r3
 80195e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80195e4:	4ac2      	ldr	r2, [pc, #776]	; (80198f0 <luaV_execute+0x7b50>)
 80195e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80195ea:	f7f8 bcab 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_CLOSURE) {
        Proto *p = cl->p->p[GETARG_Bx(i)];
 80195ee:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80195f2:	68db      	ldr	r3, [r3, #12]
 80195f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80195f6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80195fa:	0bdb      	lsrs	r3, r3, #15
 80195fc:	009b      	lsls	r3, r3, #2
 80195fe:	4413      	add	r3, r2
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
        halfProtect(pushclosure(L, p, cl->upvals, base, ra));
 8019606:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801960a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8019614:	611a      	str	r2, [r3, #16]
 8019616:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801961a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	685a      	ldr	r2, [r3, #4]
 8019622:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019626:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	60da      	str	r2, [r3, #12]
 801962e:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8019632:	f103 0210 	add.w	r2, r3, #16
 8019636:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801963a:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 801963e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8019642:	9300      	str	r3, [sp, #0]
 8019644:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8019648:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 801964c:	6800      	ldr	r0, [r0, #0]
 801964e:	f7f8 fb37 	bl	8011cc0 <pushclosure>
        checkGC(L, ra + 1);
 8019652:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019656:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	691b      	ldr	r3, [r3, #16]
 801965e:	68db      	ldr	r3, [r3, #12]
 8019660:	2b00      	cmp	r3, #0
 8019662:	dd20      	ble.n	80196a6 <luaV_execute+0x7906>
 8019664:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019668:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8019672:	611a      	str	r2, [r3, #16]
 8019674:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8019678:	f103 0208 	add.w	r2, r3, #8
 801967c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019680:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	60da      	str	r2, [r3, #12]
 8019688:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801968c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019690:	6818      	ldr	r0, [r3, #0]
 8019692:	f7f3 fafd 	bl	800cc90 <luaC_step>
 8019696:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801969a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	695b      	ldr	r3, [r3, #20]
 80196a2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 80196a6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	bf14      	ite	ne
 80196ae:	2301      	movne	r3, #1
 80196b0:	2300      	moveq	r3, #0
 80196b2:	b2db      	uxtb	r3, r3
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d013      	beq.n	80196e0 <luaV_execute+0x7940>
 80196b8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80196bc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80196c0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80196c4:	6818      	ldr	r0, [r3, #0]
 80196c6:	f7ef fd09 	bl	80090dc <luaG_traceexec>
 80196ca:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80196ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80196d2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	3308      	adds	r3, #8
 80196dc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80196e0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80196e4:	1d1a      	adds	r2, r3, #4
 80196e6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80196f0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80196f4:	09db      	lsrs	r3, r3, #7
 80196f6:	b2db      	uxtb	r3, r3
 80196f8:	00db      	lsls	r3, r3, #3
 80196fa:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80196fe:	4413      	add	r3, r2
 8019700:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8019704:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8019708:	b2db      	uxtb	r3, r3
 801970a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801970e:	4a78      	ldr	r2, [pc, #480]	; (80198f0 <luaV_execute+0x7b50>)
 8019710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019714:	f7f8 bc16 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_VARARG) {
        int n = GETARG_C(i) - 1;  /* required results */
 8019718:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801971c:	0e1b      	lsrs	r3, r3, #24
 801971e:	3b01      	subs	r3, #1
 8019720:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
        Protect(luaT_getvarargs(L, ci, ra, n));
 8019724:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019728:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8019732:	611a      	str	r2, [r3, #16]
 8019734:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019738:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	685a      	ldr	r2, [r3, #4]
 8019740:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019744:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	60da      	str	r2, [r3, #12]
 801974c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019750:	f5a3 61b0 	sub.w	r1, r3, #1408	; 0x580
 8019754:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019758:	f2a3 507c 	subw	r0, r3, #1404	; 0x57c
 801975c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8019760:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8019764:	6809      	ldr	r1, [r1, #0]
 8019766:	6800      	ldr	r0, [r0, #0]
 8019768:	f7f6 fe25 	bl	80103b6 <luaT_getvarargs>
 801976c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019770:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	695b      	ldr	r3, [r3, #20]
 8019778:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        vmbreak;
 801977c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8019780:	2b00      	cmp	r3, #0
 8019782:	bf14      	ite	ne
 8019784:	2301      	movne	r3, #1
 8019786:	2300      	moveq	r3, #0
 8019788:	b2db      	uxtb	r3, r3
 801978a:	2b00      	cmp	r3, #0
 801978c:	d013      	beq.n	80197b6 <luaV_execute+0x7a16>
 801978e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019792:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019796:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801979a:	6818      	ldr	r0, [r3, #0]
 801979c:	f7ef fc9e 	bl	80090dc <luaG_traceexec>
 80197a0:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80197a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80197a8:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	3308      	adds	r3, #8
 80197b2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80197b6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80197ba:	1d1a      	adds	r2, r3, #4
 80197bc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80197c6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80197ca:	09db      	lsrs	r3, r3, #7
 80197cc:	b2db      	uxtb	r3, r3
 80197ce:	00db      	lsls	r3, r3, #3
 80197d0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80197d4:	4413      	add	r3, r2
 80197d6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80197da:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80197de:	b2db      	uxtb	r3, r3
 80197e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80197e4:	4a42      	ldr	r2, [pc, #264]	; (80198f0 <luaV_execute+0x7b50>)
 80197e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80197ea:	f7f8 bbab 	b.w	8011f44 <luaV_execute+0x1a4>
      }
      vmcase(OP_VARARGPREP) {
        ProtectNT(luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p));
 80197ee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80197f2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80197fc:	611a      	str	r2, [r3, #16]
 80197fe:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8019802:	09db      	lsrs	r3, r3, #7
 8019804:	b2d9      	uxtb	r1, r3
 8019806:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 801980a:	68db      	ldr	r3, [r3, #12]
 801980c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8019810:	f5a2 62b0 	sub.w	r2, r2, #1408	; 0x580
 8019814:	f507 60b0 	add.w	r0, r7, #1408	; 0x580
 8019818:	f2a0 507c 	subw	r0, r0, #1404	; 0x57c
 801981c:	6812      	ldr	r2, [r2, #0]
 801981e:	6800      	ldr	r0, [r0, #0]
 8019820:	f7f6 fd4e 	bl	80102c0 <luaT_adjustvarargs>
 8019824:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019828:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	695b      	ldr	r3, [r3, #20]
 8019830:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
        if (l_unlikely(trap)) {  /* previous "Protect" updated trap */
 8019834:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8019838:	2b00      	cmp	r3, #0
 801983a:	bf14      	ite	ne
 801983c:	2301      	movne	r3, #1
 801983e:	2300      	moveq	r3, #0
 8019840:	b2db      	uxtb	r3, r3
 8019842:	2b00      	cmp	r3, #0
 8019844:	d012      	beq.n	801986c <luaV_execute+0x7acc>
          luaD_hookcall(L, ci);
 8019846:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801984a:	f5a3 62b0 	sub.w	r2, r3, #1408	; 0x580
 801984e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019852:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019856:	6811      	ldr	r1, [r2, #0]
 8019858:	6818      	ldr	r0, [r3, #0]
 801985a:	f7f0 f80e 	bl	800987a <luaD_hookcall>
          L->oldpc = 1;  /* next opcode will be seen as a "new" line */
 801985e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019862:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	2201      	movs	r2, #1
 801986a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        updatebase(ci);  /* function has new base after adjustment */
 801986c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019870:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	3308      	adds	r3, #8
 801987a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
        vmbreak;
 801987e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8019882:	2b00      	cmp	r3, #0
 8019884:	bf14      	ite	ne
 8019886:	2301      	movne	r3, #1
 8019888:	2300      	moveq	r3, #0
 801988a:	b2db      	uxtb	r3, r3
 801988c:	2b00      	cmp	r3, #0
 801988e:	d013      	beq.n	80198b8 <luaV_execute+0x7b18>
 8019890:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019894:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8019898:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801989c:	6818      	ldr	r0, [r3, #0]
 801989e:	f7ef fc1d 	bl	80090dc <luaG_traceexec>
 80198a2:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 80198a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80198aa:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	3308      	adds	r3, #8
 80198b4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80198b8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80198bc:	1d1a      	adds	r2, r3, #4
 80198be:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 80198c8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80198cc:	09db      	lsrs	r3, r3, #7
 80198ce:	b2db      	uxtb	r3, r3
 80198d0:	00db      	lsls	r3, r3, #3
 80198d2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80198d6:	4413      	add	r3, r2
 80198d8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80198dc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80198e0:	b2db      	uxtb	r3, r3
 80198e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80198e6:	4a02      	ldr	r2, [pc, #8]	; (80198f0 <luaV_execute+0x7b50>)
 80198e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80198ec:	f7f8 bb2a 	b.w	8011f44 <luaV_execute+0x1a4>
 80198f0:	08022d3c 	.word	0x08022d3c
      }
      vmcase(OP_EXTRAARG) {
        lua_assert(0);
        vmbreak;
 80198f4:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	bf14      	ite	ne
 80198fc:	2301      	movne	r3, #1
 80198fe:	2300      	moveq	r3, #0
 8019900:	b2db      	uxtb	r3, r3
 8019902:	2b00      	cmp	r3, #0
 8019904:	d013      	beq.n	801992e <luaV_execute+0x7b8e>
 8019906:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801990a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801990e:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8019912:	6818      	ldr	r0, [r3, #0]
 8019914:	f7ef fbe2 	bl	80090dc <luaG_traceexec>
 8019918:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
 801991c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8019920:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	3308      	adds	r3, #8
 801992a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801992e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8019932:	1d1a      	adds	r2, r3, #4
 8019934:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 801993e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8019942:	09db      	lsrs	r3, r3, #7
 8019944:	b2db      	uxtb	r3, r3
 8019946:	00db      	lsls	r3, r3, #3
 8019948:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801994c:	4413      	add	r3, r2
 801994e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8019952:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8019956:	b2db      	uxtb	r3, r3
 8019958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801995c:	4a04      	ldr	r2, [pc, #16]	; (8019970 <luaV_execute+0x7bd0>)
 801995e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019962:	f7f8 baef 	b.w	8011f44 <luaV_execute+0x1a4>
          return;  /* end this frame */
 8019966:	bf00      	nop
      }
    }
  }
}
 8019968:	f207 5784 	addw	r7, r7, #1412	; 0x584
 801996c:	46bd      	mov	sp, r7
 801996e:	bd90      	pop	{r4, r7, pc}
 8019970:	08022d3c 	.word	0x08022d3c

08019974 <__NVIC_SetPriority>:
{
 8019974:	b480      	push	{r7}
 8019976:	b083      	sub	sp, #12
 8019978:	af00      	add	r7, sp, #0
 801997a:	4603      	mov	r3, r0
 801997c:	6039      	str	r1, [r7, #0]
 801997e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019984:	2b00      	cmp	r3, #0
 8019986:	db0a      	blt.n	801999e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019988:	683b      	ldr	r3, [r7, #0]
 801998a:	b2da      	uxtb	r2, r3
 801998c:	490c      	ldr	r1, [pc, #48]	; (80199c0 <__NVIC_SetPriority+0x4c>)
 801998e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019992:	0112      	lsls	r2, r2, #4
 8019994:	b2d2      	uxtb	r2, r2
 8019996:	440b      	add	r3, r1
 8019998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801999c:	e00a      	b.n	80199b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801999e:	683b      	ldr	r3, [r7, #0]
 80199a0:	b2da      	uxtb	r2, r3
 80199a2:	4908      	ldr	r1, [pc, #32]	; (80199c4 <__NVIC_SetPriority+0x50>)
 80199a4:	79fb      	ldrb	r3, [r7, #7]
 80199a6:	f003 030f 	and.w	r3, r3, #15
 80199aa:	3b04      	subs	r3, #4
 80199ac:	0112      	lsls	r2, r2, #4
 80199ae:	b2d2      	uxtb	r2, r2
 80199b0:	440b      	add	r3, r1
 80199b2:	761a      	strb	r2, [r3, #24]
}
 80199b4:	bf00      	nop
 80199b6:	370c      	adds	r7, #12
 80199b8:	46bd      	mov	sp, r7
 80199ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199be:	4770      	bx	lr
 80199c0:	e000e100 	.word	0xe000e100
 80199c4:	e000ed00 	.word	0xe000ed00

080199c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80199c8:	b580      	push	{r7, lr}
 80199ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80199cc:	4b05      	ldr	r3, [pc, #20]	; (80199e4 <SysTick_Handler+0x1c>)
 80199ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80199d0:	f001 ffd2 	bl	801b978 <xTaskGetSchedulerState>
 80199d4:	4603      	mov	r3, r0
 80199d6:	2b01      	cmp	r3, #1
 80199d8:	d001      	beq.n	80199de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80199da:	f002 fdf5 	bl	801c5c8 <xPortSysTickHandler>
  }
}
 80199de:	bf00      	nop
 80199e0:	bd80      	pop	{r7, pc}
 80199e2:	bf00      	nop
 80199e4:	e000e010 	.word	0xe000e010

080199e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80199e8:	b580      	push	{r7, lr}
 80199ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80199ec:	2100      	movs	r1, #0
 80199ee:	f06f 0004 	mvn.w	r0, #4
 80199f2:	f7ff ffbf 	bl	8019974 <__NVIC_SetPriority>
#endif
}
 80199f6:	bf00      	nop
 80199f8:	bd80      	pop	{r7, pc}
	...

080199fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80199fc:	b480      	push	{r7}
 80199fe:	b083      	sub	sp, #12
 8019a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019a02:	f3ef 8305 	mrs	r3, IPSR
 8019a06:	603b      	str	r3, [r7, #0]
  return(result);
 8019a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d003      	beq.n	8019a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8019a0e:	f06f 0305 	mvn.w	r3, #5
 8019a12:	607b      	str	r3, [r7, #4]
 8019a14:	e00c      	b.n	8019a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8019a16:	4b0a      	ldr	r3, [pc, #40]	; (8019a40 <osKernelInitialize+0x44>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d105      	bne.n	8019a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8019a1e:	4b08      	ldr	r3, [pc, #32]	; (8019a40 <osKernelInitialize+0x44>)
 8019a20:	2201      	movs	r2, #1
 8019a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8019a24:	2300      	movs	r3, #0
 8019a26:	607b      	str	r3, [r7, #4]
 8019a28:	e002      	b.n	8019a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8019a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019a30:	687b      	ldr	r3, [r7, #4]
}
 8019a32:	4618      	mov	r0, r3
 8019a34:	370c      	adds	r7, #12
 8019a36:	46bd      	mov	sp, r7
 8019a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3c:	4770      	bx	lr
 8019a3e:	bf00      	nop
 8019a40:	2000b158 	.word	0x2000b158

08019a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b082      	sub	sp, #8
 8019a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019a4a:	f3ef 8305 	mrs	r3, IPSR
 8019a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8019a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d003      	beq.n	8019a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8019a56:	f06f 0305 	mvn.w	r3, #5
 8019a5a:	607b      	str	r3, [r7, #4]
 8019a5c:	e010      	b.n	8019a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8019a5e:	4b0b      	ldr	r3, [pc, #44]	; (8019a8c <osKernelStart+0x48>)
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	2b01      	cmp	r3, #1
 8019a64:	d109      	bne.n	8019a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8019a66:	f7ff ffbf 	bl	80199e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8019a6a:	4b08      	ldr	r3, [pc, #32]	; (8019a8c <osKernelStart+0x48>)
 8019a6c:	2202      	movs	r2, #2
 8019a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8019a70:	f001 fa88 	bl	801af84 <vTaskStartScheduler>
      stat = osOK;
 8019a74:	2300      	movs	r3, #0
 8019a76:	607b      	str	r3, [r7, #4]
 8019a78:	e002      	b.n	8019a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8019a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019a80:	687b      	ldr	r3, [r7, #4]
}
 8019a82:	4618      	mov	r0, r3
 8019a84:	3708      	adds	r7, #8
 8019a86:	46bd      	mov	sp, r7
 8019a88:	bd80      	pop	{r7, pc}
 8019a8a:	bf00      	nop
 8019a8c:	2000b158 	.word	0x2000b158

08019a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b08e      	sub	sp, #56	; 0x38
 8019a94:	af04      	add	r7, sp, #16
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019aa0:	f3ef 8305 	mrs	r3, IPSR
 8019aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8019aa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d17e      	bne.n	8019baa <osThreadNew+0x11a>
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d07b      	beq.n	8019baa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8019ab2:	2380      	movs	r3, #128	; 0x80
 8019ab4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8019ab6:	2318      	movs	r3, #24
 8019ab8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8019aba:	2300      	movs	r3, #0
 8019abc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8019abe:	f04f 33ff 	mov.w	r3, #4294967295
 8019ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d045      	beq.n	8019b56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d002      	beq.n	8019ad8 <osThreadNew+0x48>
        name = attr->name;
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	699b      	ldr	r3, [r3, #24]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d002      	beq.n	8019ae6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	699b      	ldr	r3, [r3, #24]
 8019ae4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8019ae6:	69fb      	ldr	r3, [r7, #28]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d008      	beq.n	8019afe <osThreadNew+0x6e>
 8019aec:	69fb      	ldr	r3, [r7, #28]
 8019aee:	2b38      	cmp	r3, #56	; 0x38
 8019af0:	d805      	bhi.n	8019afe <osThreadNew+0x6e>
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	685b      	ldr	r3, [r3, #4]
 8019af6:	f003 0301 	and.w	r3, r3, #1
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d001      	beq.n	8019b02 <osThreadNew+0x72>
        return (NULL);
 8019afe:	2300      	movs	r3, #0
 8019b00:	e054      	b.n	8019bac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	695b      	ldr	r3, [r3, #20]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d003      	beq.n	8019b12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	695b      	ldr	r3, [r3, #20]
 8019b0e:	089b      	lsrs	r3, r3, #2
 8019b10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	689b      	ldr	r3, [r3, #8]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d00e      	beq.n	8019b38 <osThreadNew+0xa8>
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	68db      	ldr	r3, [r3, #12]
 8019b1e:	2bbb      	cmp	r3, #187	; 0xbb
 8019b20:	d90a      	bls.n	8019b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d006      	beq.n	8019b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	695b      	ldr	r3, [r3, #20]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d002      	beq.n	8019b38 <osThreadNew+0xa8>
        mem = 1;
 8019b32:	2301      	movs	r3, #1
 8019b34:	61bb      	str	r3, [r7, #24]
 8019b36:	e010      	b.n	8019b5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	689b      	ldr	r3, [r3, #8]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d10c      	bne.n	8019b5a <osThreadNew+0xca>
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	68db      	ldr	r3, [r3, #12]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d108      	bne.n	8019b5a <osThreadNew+0xca>
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	691b      	ldr	r3, [r3, #16]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d104      	bne.n	8019b5a <osThreadNew+0xca>
          mem = 0;
 8019b50:	2300      	movs	r3, #0
 8019b52:	61bb      	str	r3, [r7, #24]
 8019b54:	e001      	b.n	8019b5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8019b56:	2300      	movs	r3, #0
 8019b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8019b5a:	69bb      	ldr	r3, [r7, #24]
 8019b5c:	2b01      	cmp	r3, #1
 8019b5e:	d110      	bne.n	8019b82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8019b64:	687a      	ldr	r2, [r7, #4]
 8019b66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019b68:	9202      	str	r2, [sp, #8]
 8019b6a:	9301      	str	r3, [sp, #4]
 8019b6c:	69fb      	ldr	r3, [r7, #28]
 8019b6e:	9300      	str	r3, [sp, #0]
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	6a3a      	ldr	r2, [r7, #32]
 8019b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b76:	68f8      	ldr	r0, [r7, #12]
 8019b78:	f001 f818 	bl	801abac <xTaskCreateStatic>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	613b      	str	r3, [r7, #16]
 8019b80:	e013      	b.n	8019baa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8019b82:	69bb      	ldr	r3, [r7, #24]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d110      	bne.n	8019baa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8019b88:	6a3b      	ldr	r3, [r7, #32]
 8019b8a:	b29a      	uxth	r2, r3
 8019b8c:	f107 0310 	add.w	r3, r7, #16
 8019b90:	9301      	str	r3, [sp, #4]
 8019b92:	69fb      	ldr	r3, [r7, #28]
 8019b94:	9300      	str	r3, [sp, #0]
 8019b96:	68bb      	ldr	r3, [r7, #8]
 8019b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b9a:	68f8      	ldr	r0, [r7, #12]
 8019b9c:	f001 f863 	bl	801ac66 <xTaskCreate>
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	2b01      	cmp	r3, #1
 8019ba4:	d001      	beq.n	8019baa <osThreadNew+0x11a>
            hTask = NULL;
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019baa:	693b      	ldr	r3, [r7, #16]
}
 8019bac:	4618      	mov	r0, r3
 8019bae:	3728      	adds	r7, #40	; 0x28
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}

08019bb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b084      	sub	sp, #16
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019bbc:	f3ef 8305 	mrs	r3, IPSR
 8019bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8019bc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d003      	beq.n	8019bd0 <osDelay+0x1c>
    stat = osErrorISR;
 8019bc8:	f06f 0305 	mvn.w	r3, #5
 8019bcc:	60fb      	str	r3, [r7, #12]
 8019bce:	e007      	b.n	8019be0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d002      	beq.n	8019be0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8019bda:	6878      	ldr	r0, [r7, #4]
 8019bdc:	f001 f99e 	bl	801af1c <vTaskDelay>
    }
  }

  return (stat);
 8019be0:	68fb      	ldr	r3, [r7, #12]
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3710      	adds	r7, #16
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}
	...

08019bec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019bec:	b480      	push	{r7}
 8019bee:	b085      	sub	sp, #20
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	60f8      	str	r0, [r7, #12]
 8019bf4:	60b9      	str	r1, [r7, #8]
 8019bf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	4a07      	ldr	r2, [pc, #28]	; (8019c18 <vApplicationGetIdleTaskMemory+0x2c>)
 8019bfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019bfe:	68bb      	ldr	r3, [r7, #8]
 8019c00:	4a06      	ldr	r2, [pc, #24]	; (8019c1c <vApplicationGetIdleTaskMemory+0x30>)
 8019c02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	2280      	movs	r2, #128	; 0x80
 8019c08:	601a      	str	r2, [r3, #0]
}
 8019c0a:	bf00      	nop
 8019c0c:	3714      	adds	r7, #20
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c14:	4770      	bx	lr
 8019c16:	bf00      	nop
 8019c18:	2000b15c 	.word	0x2000b15c
 8019c1c:	2000b218 	.word	0x2000b218

08019c20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019c20:	b480      	push	{r7}
 8019c22:	b085      	sub	sp, #20
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	60f8      	str	r0, [r7, #12]
 8019c28:	60b9      	str	r1, [r7, #8]
 8019c2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	4a07      	ldr	r2, [pc, #28]	; (8019c4c <vApplicationGetTimerTaskMemory+0x2c>)
 8019c30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019c32:	68bb      	ldr	r3, [r7, #8]
 8019c34:	4a06      	ldr	r2, [pc, #24]	; (8019c50 <vApplicationGetTimerTaskMemory+0x30>)
 8019c36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019c3e:	601a      	str	r2, [r3, #0]
}
 8019c40:	bf00      	nop
 8019c42:	3714      	adds	r7, #20
 8019c44:	46bd      	mov	sp, r7
 8019c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c4a:	4770      	bx	lr
 8019c4c:	2000b418 	.word	0x2000b418
 8019c50:	2000b4d4 	.word	0x2000b4d4

08019c54 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b086      	sub	sp, #24
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d10a      	bne.n	8019c78 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c66:	f383 8811 	msr	BASEPRI, r3
 8019c6a:	f3bf 8f6f 	isb	sy
 8019c6e:	f3bf 8f4f 	dsb	sy
 8019c72:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019c74:	bf00      	nop
 8019c76:	e7fe      	b.n	8019c76 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8019c78:	2320      	movs	r3, #32
 8019c7a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8019c7c:	68bb      	ldr	r3, [r7, #8]
 8019c7e:	2b20      	cmp	r3, #32
 8019c80:	d00a      	beq.n	8019c98 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8019c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c86:	f383 8811 	msr	BASEPRI, r3
 8019c8a:	f3bf 8f6f 	isb	sy
 8019c8e:	f3bf 8f4f 	dsb	sy
 8019c92:	60fb      	str	r3, [r7, #12]
}
 8019c94:	bf00      	nop
 8019c96:	e7fe      	b.n	8019c96 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8019c9c:	697b      	ldr	r3, [r7, #20]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d00a      	beq.n	8019cb8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8019ca2:	697b      	ldr	r3, [r7, #20]
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8019ca8:	697b      	ldr	r3, [r7, #20]
 8019caa:	3304      	adds	r3, #4
 8019cac:	4618      	mov	r0, r3
 8019cae:	f000 f9dd 	bl	801a06c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8019cb2:	697b      	ldr	r3, [r7, #20]
 8019cb4:	2201      	movs	r2, #1
 8019cb6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8019cb8:	697b      	ldr	r3, [r7, #20]
	}
 8019cba:	4618      	mov	r0, r3
 8019cbc:	3718      	adds	r7, #24
 8019cbe:	46bd      	mov	sp, r7
 8019cc0:	bd80      	pop	{r7, pc}
	...

08019cc4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b090      	sub	sp, #64	; 0x40
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	60f8      	str	r0, [r7, #12]
 8019ccc:	60b9      	str	r1, [r7, #8]
 8019cce:	607a      	str	r2, [r7, #4]
 8019cd0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8019cda:	2300      	movs	r3, #0
 8019cdc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d10a      	bne.n	8019cfa <xEventGroupWaitBits+0x36>
	__asm volatile
 8019ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ce8:	f383 8811 	msr	BASEPRI, r3
 8019cec:	f3bf 8f6f 	isb	sy
 8019cf0:	f3bf 8f4f 	dsb	sy
 8019cf4:	623b      	str	r3, [r7, #32]
}
 8019cf6:	bf00      	nop
 8019cf8:	e7fe      	b.n	8019cf8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8019cfa:	68bb      	ldr	r3, [r7, #8]
 8019cfc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d00a      	beq.n	8019d1a <xEventGroupWaitBits+0x56>
	__asm volatile
 8019d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d08:	f383 8811 	msr	BASEPRI, r3
 8019d0c:	f3bf 8f6f 	isb	sy
 8019d10:	f3bf 8f4f 	dsb	sy
 8019d14:	61fb      	str	r3, [r7, #28]
}
 8019d16:	bf00      	nop
 8019d18:	e7fe      	b.n	8019d18 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8019d1a:	68bb      	ldr	r3, [r7, #8]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d10a      	bne.n	8019d36 <xEventGroupWaitBits+0x72>
	__asm volatile
 8019d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d24:	f383 8811 	msr	BASEPRI, r3
 8019d28:	f3bf 8f6f 	isb	sy
 8019d2c:	f3bf 8f4f 	dsb	sy
 8019d30:	61bb      	str	r3, [r7, #24]
}
 8019d32:	bf00      	nop
 8019d34:	e7fe      	b.n	8019d34 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019d36:	f001 fe1f 	bl	801b978 <xTaskGetSchedulerState>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d102      	bne.n	8019d46 <xEventGroupWaitBits+0x82>
 8019d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d101      	bne.n	8019d4a <xEventGroupWaitBits+0x86>
 8019d46:	2301      	movs	r3, #1
 8019d48:	e000      	b.n	8019d4c <xEventGroupWaitBits+0x88>
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d10a      	bne.n	8019d66 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8019d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d54:	f383 8811 	msr	BASEPRI, r3
 8019d58:	f3bf 8f6f 	isb	sy
 8019d5c:	f3bf 8f4f 	dsb	sy
 8019d60:	617b      	str	r3, [r7, #20]
}
 8019d62:	bf00      	nop
 8019d64:	e7fe      	b.n	8019d64 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8019d66:	f001 f97d 	bl	801b064 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8019d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8019d70:	683a      	ldr	r2, [r7, #0]
 8019d72:	68b9      	ldr	r1, [r7, #8]
 8019d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d76:	f000 f943 	bl	801a000 <prvTestWaitCondition>
 8019d7a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8019d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d00e      	beq.n	8019da0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8019d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d84:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8019d86:	2300      	movs	r3, #0
 8019d88:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d028      	beq.n	8019de2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8019d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d92:	681a      	ldr	r2, [r3, #0]
 8019d94:	68bb      	ldr	r3, [r7, #8]
 8019d96:	43db      	mvns	r3, r3
 8019d98:	401a      	ands	r2, r3
 8019d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d9c:	601a      	str	r2, [r3, #0]
 8019d9e:	e020      	b.n	8019de2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8019da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d104      	bne.n	8019db0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8019da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019da8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8019daa:	2301      	movs	r3, #1
 8019dac:	633b      	str	r3, [r7, #48]	; 0x30
 8019dae:	e018      	b.n	8019de2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d003      	beq.n	8019dbe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8019db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019dbc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d003      	beq.n	8019dcc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8019dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019dca:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8019dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dce:	1d18      	adds	r0, r3, #4
 8019dd0:	68ba      	ldr	r2, [r7, #8]
 8019dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dd4:	4313      	orrs	r3, r2
 8019dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019dd8:	4619      	mov	r1, r3
 8019dda:	f001 fb41 	bl	801b460 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8019dde:	2300      	movs	r3, #0
 8019de0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8019de2:	f001 f94d 	bl	801b080 <xTaskResumeAll>
 8019de6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8019de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d031      	beq.n	8019e52 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8019dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d107      	bne.n	8019e04 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8019df4:	4b19      	ldr	r3, [pc, #100]	; (8019e5c <xEventGroupWaitBits+0x198>)
 8019df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019dfa:	601a      	str	r2, [r3, #0]
 8019dfc:	f3bf 8f4f 	dsb	sy
 8019e00:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8019e04:	f001 fe44 	bl	801ba90 <uxTaskResetEventItemValue>
 8019e08:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8019e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d11a      	bne.n	8019e4a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8019e14:	f002 fb46 	bl	801c4a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8019e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8019e1e:	683a      	ldr	r2, [r7, #0]
 8019e20:	68b9      	ldr	r1, [r7, #8]
 8019e22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019e24:	f000 f8ec 	bl	801a000 <prvTestWaitCondition>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d009      	beq.n	8019e42 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d006      	beq.n	8019e42 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8019e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e36:	681a      	ldr	r2, [r3, #0]
 8019e38:	68bb      	ldr	r3, [r7, #8]
 8019e3a:	43db      	mvns	r3, r3
 8019e3c:	401a      	ands	r2, r3
 8019e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e40:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8019e42:	2301      	movs	r3, #1
 8019e44:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8019e46:	f002 fb5d 	bl	801c504 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8019e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019e50:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8019e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019e54:	4618      	mov	r0, r3
 8019e56:	3740      	adds	r7, #64	; 0x40
 8019e58:	46bd      	mov	sp, r7
 8019e5a:	bd80      	pop	{r7, pc}
 8019e5c:	e000ed04 	.word	0xe000ed04

08019e60 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b086      	sub	sp, #24
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	6078      	str	r0, [r7, #4]
 8019e68:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d10a      	bne.n	8019e8a <xEventGroupClearBits+0x2a>
	__asm volatile
 8019e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e78:	f383 8811 	msr	BASEPRI, r3
 8019e7c:	f3bf 8f6f 	isb	sy
 8019e80:	f3bf 8f4f 	dsb	sy
 8019e84:	60fb      	str	r3, [r7, #12]
}
 8019e86:	bf00      	nop
 8019e88:	e7fe      	b.n	8019e88 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d00a      	beq.n	8019eaa <xEventGroupClearBits+0x4a>
	__asm volatile
 8019e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e98:	f383 8811 	msr	BASEPRI, r3
 8019e9c:	f3bf 8f6f 	isb	sy
 8019ea0:	f3bf 8f4f 	dsb	sy
 8019ea4:	60bb      	str	r3, [r7, #8]
}
 8019ea6:	bf00      	nop
 8019ea8:	e7fe      	b.n	8019ea8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8019eaa:	f002 fafb 	bl	801c4a4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8019eae:	697b      	ldr	r3, [r7, #20]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8019eb4:	697b      	ldr	r3, [r7, #20]
 8019eb6:	681a      	ldr	r2, [r3, #0]
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	43db      	mvns	r3, r3
 8019ebc:	401a      	ands	r2, r3
 8019ebe:	697b      	ldr	r3, [r7, #20]
 8019ec0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8019ec2:	f002 fb1f 	bl	801c504 <vPortExitCritical>

	return uxReturn;
 8019ec6:	693b      	ldr	r3, [r7, #16]
}
 8019ec8:	4618      	mov	r0, r3
 8019eca:	3718      	adds	r7, #24
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	bd80      	pop	{r7, pc}

08019ed0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b08e      	sub	sp, #56	; 0x38
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
 8019ed8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8019eda:	2300      	movs	r3, #0
 8019edc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d10a      	bne.n	8019f02 <xEventGroupSetBits+0x32>
	__asm volatile
 8019eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ef0:	f383 8811 	msr	BASEPRI, r3
 8019ef4:	f3bf 8f6f 	isb	sy
 8019ef8:	f3bf 8f4f 	dsb	sy
 8019efc:	613b      	str	r3, [r7, #16]
}
 8019efe:	bf00      	nop
 8019f00:	e7fe      	b.n	8019f00 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d00a      	beq.n	8019f22 <xEventGroupSetBits+0x52>
	__asm volatile
 8019f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f10:	f383 8811 	msr	BASEPRI, r3
 8019f14:	f3bf 8f6f 	isb	sy
 8019f18:	f3bf 8f4f 	dsb	sy
 8019f1c:	60fb      	str	r3, [r7, #12]
}
 8019f1e:	bf00      	nop
 8019f20:	e7fe      	b.n	8019f20 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8019f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f24:	3304      	adds	r3, #4
 8019f26:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f2a:	3308      	adds	r3, #8
 8019f2c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8019f2e:	f001 f899 	bl	801b064 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8019f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f34:	68db      	ldr	r3, [r3, #12]
 8019f36:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8019f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f3a:	681a      	ldr	r2, [r3, #0]
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	431a      	orrs	r2, r3
 8019f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f42:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8019f44:	e03c      	b.n	8019fc0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8019f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f48:	685b      	ldr	r3, [r3, #4]
 8019f4a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8019f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8019f52:	2300      	movs	r3, #0
 8019f54:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8019f56:	69bb      	ldr	r3, [r7, #24]
 8019f58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019f5c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8019f5e:	69bb      	ldr	r3, [r7, #24]
 8019f60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019f64:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8019f66:	697b      	ldr	r3, [r7, #20]
 8019f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d108      	bne.n	8019f82 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8019f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f72:	681a      	ldr	r2, [r3, #0]
 8019f74:	69bb      	ldr	r3, [r7, #24]
 8019f76:	4013      	ands	r3, r2
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d00b      	beq.n	8019f94 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8019f7c:	2301      	movs	r3, #1
 8019f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f80:	e008      	b.n	8019f94 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8019f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f84:	681a      	ldr	r2, [r3, #0]
 8019f86:	69bb      	ldr	r3, [r7, #24]
 8019f88:	4013      	ands	r3, r2
 8019f8a:	69ba      	ldr	r2, [r7, #24]
 8019f8c:	429a      	cmp	r2, r3
 8019f8e:	d101      	bne.n	8019f94 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8019f90:	2301      	movs	r3, #1
 8019f92:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8019f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d010      	beq.n	8019fbc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8019f9a:	697b      	ldr	r3, [r7, #20]
 8019f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d003      	beq.n	8019fac <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8019fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019fa6:	69bb      	ldr	r3, [r7, #24]
 8019fa8:	4313      	orrs	r3, r2
 8019faa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8019fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019fb4:	4619      	mov	r1, r3
 8019fb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019fb8:	f001 fb1e 	bl	801b5f8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8019fbc:	69fb      	ldr	r3, [r7, #28]
 8019fbe:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8019fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019fc2:	6a3b      	ldr	r3, [r7, #32]
 8019fc4:	429a      	cmp	r2, r3
 8019fc6:	d1be      	bne.n	8019f46 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8019fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fca:	681a      	ldr	r2, [r3, #0]
 8019fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fce:	43db      	mvns	r3, r3
 8019fd0:	401a      	ands	r2, r3
 8019fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fd4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8019fd6:	f001 f853 	bl	801b080 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8019fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fdc:	681b      	ldr	r3, [r3, #0]
}
 8019fde:	4618      	mov	r0, r3
 8019fe0:	3738      	adds	r7, #56	; 0x38
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	bd80      	pop	{r7, pc}

08019fe6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8019fe6:	b580      	push	{r7, lr}
 8019fe8:	b082      	sub	sp, #8
 8019fea:	af00      	add	r7, sp, #0
 8019fec:	6078      	str	r0, [r7, #4]
 8019fee:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8019ff0:	6839      	ldr	r1, [r7, #0]
 8019ff2:	6878      	ldr	r0, [r7, #4]
 8019ff4:	f7ff ff6c 	bl	8019ed0 <xEventGroupSetBits>
}
 8019ff8:	bf00      	nop
 8019ffa:	3708      	adds	r7, #8
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}

0801a000 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801a000:	b480      	push	{r7}
 801a002:	b087      	sub	sp, #28
 801a004:	af00      	add	r7, sp, #0
 801a006:	60f8      	str	r0, [r7, #12]
 801a008:	60b9      	str	r1, [r7, #8]
 801a00a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801a00c:	2300      	movs	r3, #0
 801a00e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d107      	bne.n	801a026 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801a016:	68fa      	ldr	r2, [r7, #12]
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	4013      	ands	r3, r2
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d00a      	beq.n	801a036 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801a020:	2301      	movs	r3, #1
 801a022:	617b      	str	r3, [r7, #20]
 801a024:	e007      	b.n	801a036 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801a026:	68fa      	ldr	r2, [r7, #12]
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	4013      	ands	r3, r2
 801a02c:	68ba      	ldr	r2, [r7, #8]
 801a02e:	429a      	cmp	r2, r3
 801a030:	d101      	bne.n	801a036 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801a032:	2301      	movs	r3, #1
 801a034:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801a036:	697b      	ldr	r3, [r7, #20]
}
 801a038:	4618      	mov	r0, r3
 801a03a:	371c      	adds	r7, #28
 801a03c:	46bd      	mov	sp, r7
 801a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a042:	4770      	bx	lr

0801a044 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801a044:	b580      	push	{r7, lr}
 801a046:	b086      	sub	sp, #24
 801a048:	af00      	add	r7, sp, #0
 801a04a:	60f8      	str	r0, [r7, #12]
 801a04c:	60b9      	str	r1, [r7, #8]
 801a04e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	68ba      	ldr	r2, [r7, #8]
 801a054:	68f9      	ldr	r1, [r7, #12]
 801a056:	4804      	ldr	r0, [pc, #16]	; (801a068 <xEventGroupSetBitsFromISR+0x24>)
 801a058:	f002 f8d4 	bl	801c204 <xTimerPendFunctionCallFromISR>
 801a05c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801a05e:	697b      	ldr	r3, [r7, #20]
	}
 801a060:	4618      	mov	r0, r3
 801a062:	3718      	adds	r7, #24
 801a064:	46bd      	mov	sp, r7
 801a066:	bd80      	pop	{r7, pc}
 801a068:	08019fe7 	.word	0x08019fe7

0801a06c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801a06c:	b480      	push	{r7}
 801a06e:	b083      	sub	sp, #12
 801a070:	af00      	add	r7, sp, #0
 801a072:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	f103 0208 	add.w	r2, r3, #8
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	f04f 32ff 	mov.w	r2, #4294967295
 801a084:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	f103 0208 	add.w	r2, r3, #8
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	f103 0208 	add.w	r2, r3, #8
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	2200      	movs	r2, #0
 801a09e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801a0a0:	bf00      	nop
 801a0a2:	370c      	adds	r7, #12
 801a0a4:	46bd      	mov	sp, r7
 801a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0aa:	4770      	bx	lr

0801a0ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801a0ac:	b480      	push	{r7}
 801a0ae:	b083      	sub	sp, #12
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801a0ba:	bf00      	nop
 801a0bc:	370c      	adds	r7, #12
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c4:	4770      	bx	lr

0801a0c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a0c6:	b480      	push	{r7}
 801a0c8:	b085      	sub	sp, #20
 801a0ca:	af00      	add	r7, sp, #0
 801a0cc:	6078      	str	r0, [r7, #4]
 801a0ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	685b      	ldr	r3, [r3, #4]
 801a0d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801a0d6:	683b      	ldr	r3, [r7, #0]
 801a0d8:	68fa      	ldr	r2, [r7, #12]
 801a0da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	689a      	ldr	r2, [r3, #8]
 801a0e0:	683b      	ldr	r3, [r7, #0]
 801a0e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	689b      	ldr	r3, [r3, #8]
 801a0e8:	683a      	ldr	r2, [r7, #0]
 801a0ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	683a      	ldr	r2, [r7, #0]
 801a0f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801a0f2:	683b      	ldr	r3, [r7, #0]
 801a0f4:	687a      	ldr	r2, [r7, #4]
 801a0f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	1c5a      	adds	r2, r3, #1
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	601a      	str	r2, [r3, #0]
}
 801a102:	bf00      	nop
 801a104:	3714      	adds	r7, #20
 801a106:	46bd      	mov	sp, r7
 801a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10c:	4770      	bx	lr

0801a10e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a10e:	b480      	push	{r7}
 801a110:	b085      	sub	sp, #20
 801a112:	af00      	add	r7, sp, #0
 801a114:	6078      	str	r0, [r7, #4]
 801a116:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801a118:	683b      	ldr	r3, [r7, #0]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801a11e:	68bb      	ldr	r3, [r7, #8]
 801a120:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a124:	d103      	bne.n	801a12e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	691b      	ldr	r3, [r3, #16]
 801a12a:	60fb      	str	r3, [r7, #12]
 801a12c:	e00c      	b.n	801a148 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	3308      	adds	r3, #8
 801a132:	60fb      	str	r3, [r7, #12]
 801a134:	e002      	b.n	801a13c <vListInsert+0x2e>
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	685b      	ldr	r3, [r3, #4]
 801a13a:	60fb      	str	r3, [r7, #12]
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	685b      	ldr	r3, [r3, #4]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	68ba      	ldr	r2, [r7, #8]
 801a144:	429a      	cmp	r2, r3
 801a146:	d2f6      	bcs.n	801a136 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	685a      	ldr	r2, [r3, #4]
 801a14c:	683b      	ldr	r3, [r7, #0]
 801a14e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801a150:	683b      	ldr	r3, [r7, #0]
 801a152:	685b      	ldr	r3, [r3, #4]
 801a154:	683a      	ldr	r2, [r7, #0]
 801a156:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801a158:	683b      	ldr	r3, [r7, #0]
 801a15a:	68fa      	ldr	r2, [r7, #12]
 801a15c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	683a      	ldr	r2, [r7, #0]
 801a162:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801a164:	683b      	ldr	r3, [r7, #0]
 801a166:	687a      	ldr	r2, [r7, #4]
 801a168:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	1c5a      	adds	r2, r3, #1
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	601a      	str	r2, [r3, #0]
}
 801a174:	bf00      	nop
 801a176:	3714      	adds	r7, #20
 801a178:	46bd      	mov	sp, r7
 801a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17e:	4770      	bx	lr

0801a180 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801a180:	b480      	push	{r7}
 801a182:	b085      	sub	sp, #20
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	691b      	ldr	r3, [r3, #16]
 801a18c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	685b      	ldr	r3, [r3, #4]
 801a192:	687a      	ldr	r2, [r7, #4]
 801a194:	6892      	ldr	r2, [r2, #8]
 801a196:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	689b      	ldr	r3, [r3, #8]
 801a19c:	687a      	ldr	r2, [r7, #4]
 801a19e:	6852      	ldr	r2, [r2, #4]
 801a1a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	685b      	ldr	r3, [r3, #4]
 801a1a6:	687a      	ldr	r2, [r7, #4]
 801a1a8:	429a      	cmp	r2, r3
 801a1aa:	d103      	bne.n	801a1b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	689a      	ldr	r2, [r3, #8]
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	1e5a      	subs	r2, r3, #1
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	681b      	ldr	r3, [r3, #0]
}
 801a1c8:	4618      	mov	r0, r3
 801a1ca:	3714      	adds	r7, #20
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d2:	4770      	bx	lr

0801a1d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b084      	sub	sp, #16
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
 801a1dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d10a      	bne.n	801a1fe <xQueueGenericReset+0x2a>
	__asm volatile
 801a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1ec:	f383 8811 	msr	BASEPRI, r3
 801a1f0:	f3bf 8f6f 	isb	sy
 801a1f4:	f3bf 8f4f 	dsb	sy
 801a1f8:	60bb      	str	r3, [r7, #8]
}
 801a1fa:	bf00      	nop
 801a1fc:	e7fe      	b.n	801a1fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801a1fe:	f002 f951 	bl	801c4a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	681a      	ldr	r2, [r3, #0]
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a20a:	68f9      	ldr	r1, [r7, #12]
 801a20c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a20e:	fb01 f303 	mul.w	r3, r1, r3
 801a212:	441a      	add	r2, r3
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	2200      	movs	r2, #0
 801a21c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	681a      	ldr	r2, [r3, #0]
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	681a      	ldr	r2, [r3, #0]
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a22e:	3b01      	subs	r3, #1
 801a230:	68f9      	ldr	r1, [r7, #12]
 801a232:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a234:	fb01 f303 	mul.w	r3, r1, r3
 801a238:	441a      	add	r2, r3
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	22ff      	movs	r2, #255	; 0xff
 801a242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	22ff      	movs	r2, #255	; 0xff
 801a24a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801a24e:	683b      	ldr	r3, [r7, #0]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d114      	bne.n	801a27e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	691b      	ldr	r3, [r3, #16]
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d01a      	beq.n	801a292 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	3310      	adds	r3, #16
 801a260:	4618      	mov	r0, r3
 801a262:	f001 f965 	bl	801b530 <xTaskRemoveFromEventList>
 801a266:	4603      	mov	r3, r0
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d012      	beq.n	801a292 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801a26c:	4b0c      	ldr	r3, [pc, #48]	; (801a2a0 <xQueueGenericReset+0xcc>)
 801a26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a272:	601a      	str	r2, [r3, #0]
 801a274:	f3bf 8f4f 	dsb	sy
 801a278:	f3bf 8f6f 	isb	sy
 801a27c:	e009      	b.n	801a292 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	3310      	adds	r3, #16
 801a282:	4618      	mov	r0, r3
 801a284:	f7ff fef2 	bl	801a06c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	3324      	adds	r3, #36	; 0x24
 801a28c:	4618      	mov	r0, r3
 801a28e:	f7ff feed 	bl	801a06c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801a292:	f002 f937 	bl	801c504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801a296:	2301      	movs	r3, #1
}
 801a298:	4618      	mov	r0, r3
 801a29a:	3710      	adds	r7, #16
 801a29c:	46bd      	mov	sp, r7
 801a29e:	bd80      	pop	{r7, pc}
 801a2a0:	e000ed04 	.word	0xe000ed04

0801a2a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b08e      	sub	sp, #56	; 0x38
 801a2a8:	af02      	add	r7, sp, #8
 801a2aa:	60f8      	str	r0, [r7, #12]
 801a2ac:	60b9      	str	r1, [r7, #8]
 801a2ae:	607a      	str	r2, [r7, #4]
 801a2b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d10a      	bne.n	801a2ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801a2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2bc:	f383 8811 	msr	BASEPRI, r3
 801a2c0:	f3bf 8f6f 	isb	sy
 801a2c4:	f3bf 8f4f 	dsb	sy
 801a2c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a2ca:	bf00      	nop
 801a2cc:	e7fe      	b.n	801a2cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d10a      	bne.n	801a2ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2d8:	f383 8811 	msr	BASEPRI, r3
 801a2dc:	f3bf 8f6f 	isb	sy
 801a2e0:	f3bf 8f4f 	dsb	sy
 801a2e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a2e6:	bf00      	nop
 801a2e8:	e7fe      	b.n	801a2e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d002      	beq.n	801a2f6 <xQueueGenericCreateStatic+0x52>
 801a2f0:	68bb      	ldr	r3, [r7, #8]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d001      	beq.n	801a2fa <xQueueGenericCreateStatic+0x56>
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	e000      	b.n	801a2fc <xQueueGenericCreateStatic+0x58>
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d10a      	bne.n	801a316 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a304:	f383 8811 	msr	BASEPRI, r3
 801a308:	f3bf 8f6f 	isb	sy
 801a30c:	f3bf 8f4f 	dsb	sy
 801a310:	623b      	str	r3, [r7, #32]
}
 801a312:	bf00      	nop
 801a314:	e7fe      	b.n	801a314 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d102      	bne.n	801a322 <xQueueGenericCreateStatic+0x7e>
 801a31c:	68bb      	ldr	r3, [r7, #8]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d101      	bne.n	801a326 <xQueueGenericCreateStatic+0x82>
 801a322:	2301      	movs	r3, #1
 801a324:	e000      	b.n	801a328 <xQueueGenericCreateStatic+0x84>
 801a326:	2300      	movs	r3, #0
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d10a      	bne.n	801a342 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a330:	f383 8811 	msr	BASEPRI, r3
 801a334:	f3bf 8f6f 	isb	sy
 801a338:	f3bf 8f4f 	dsb	sy
 801a33c:	61fb      	str	r3, [r7, #28]
}
 801a33e:	bf00      	nop
 801a340:	e7fe      	b.n	801a340 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801a342:	2350      	movs	r3, #80	; 0x50
 801a344:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801a346:	697b      	ldr	r3, [r7, #20]
 801a348:	2b50      	cmp	r3, #80	; 0x50
 801a34a:	d00a      	beq.n	801a362 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a350:	f383 8811 	msr	BASEPRI, r3
 801a354:	f3bf 8f6f 	isb	sy
 801a358:	f3bf 8f4f 	dsb	sy
 801a35c:	61bb      	str	r3, [r7, #24]
}
 801a35e:	bf00      	nop
 801a360:	e7fe      	b.n	801a360 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a362:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a364:	683b      	ldr	r3, [r7, #0]
 801a366:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d00d      	beq.n	801a38a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a370:	2201      	movs	r2, #1
 801a372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a376:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a37c:	9300      	str	r3, [sp, #0]
 801a37e:	4613      	mov	r3, r2
 801a380:	687a      	ldr	r2, [r7, #4]
 801a382:	68b9      	ldr	r1, [r7, #8]
 801a384:	68f8      	ldr	r0, [r7, #12]
 801a386:	f000 f805 	bl	801a394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801a38c:	4618      	mov	r0, r3
 801a38e:	3730      	adds	r7, #48	; 0x30
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}

0801a394 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b084      	sub	sp, #16
 801a398:	af00      	add	r7, sp, #0
 801a39a:	60f8      	str	r0, [r7, #12]
 801a39c:	60b9      	str	r1, [r7, #8]
 801a39e:	607a      	str	r2, [r7, #4]
 801a3a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d103      	bne.n	801a3b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801a3a8:	69bb      	ldr	r3, [r7, #24]
 801a3aa:	69ba      	ldr	r2, [r7, #24]
 801a3ac:	601a      	str	r2, [r3, #0]
 801a3ae:	e002      	b.n	801a3b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801a3b0:	69bb      	ldr	r3, [r7, #24]
 801a3b2:	687a      	ldr	r2, [r7, #4]
 801a3b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801a3b6:	69bb      	ldr	r3, [r7, #24]
 801a3b8:	68fa      	ldr	r2, [r7, #12]
 801a3ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801a3bc:	69bb      	ldr	r3, [r7, #24]
 801a3be:	68ba      	ldr	r2, [r7, #8]
 801a3c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801a3c2:	2101      	movs	r1, #1
 801a3c4:	69b8      	ldr	r0, [r7, #24]
 801a3c6:	f7ff ff05 	bl	801a1d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801a3ca:	69bb      	ldr	r3, [r7, #24]
 801a3cc:	78fa      	ldrb	r2, [r7, #3]
 801a3ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801a3d2:	bf00      	nop
 801a3d4:	3710      	adds	r7, #16
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bd80      	pop	{r7, pc}
	...

0801a3dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b08e      	sub	sp, #56	; 0x38
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	60f8      	str	r0, [r7, #12]
 801a3e4:	60b9      	str	r1, [r7, #8]
 801a3e6:	607a      	str	r2, [r7, #4]
 801a3e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d10a      	bne.n	801a40e <xQueueGenericSend+0x32>
	__asm volatile
 801a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3fc:	f383 8811 	msr	BASEPRI, r3
 801a400:	f3bf 8f6f 	isb	sy
 801a404:	f3bf 8f4f 	dsb	sy
 801a408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a40a:	bf00      	nop
 801a40c:	e7fe      	b.n	801a40c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d103      	bne.n	801a41c <xQueueGenericSend+0x40>
 801a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d101      	bne.n	801a420 <xQueueGenericSend+0x44>
 801a41c:	2301      	movs	r3, #1
 801a41e:	e000      	b.n	801a422 <xQueueGenericSend+0x46>
 801a420:	2300      	movs	r3, #0
 801a422:	2b00      	cmp	r3, #0
 801a424:	d10a      	bne.n	801a43c <xQueueGenericSend+0x60>
	__asm volatile
 801a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a42a:	f383 8811 	msr	BASEPRI, r3
 801a42e:	f3bf 8f6f 	isb	sy
 801a432:	f3bf 8f4f 	dsb	sy
 801a436:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a438:	bf00      	nop
 801a43a:	e7fe      	b.n	801a43a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a43c:	683b      	ldr	r3, [r7, #0]
 801a43e:	2b02      	cmp	r3, #2
 801a440:	d103      	bne.n	801a44a <xQueueGenericSend+0x6e>
 801a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a446:	2b01      	cmp	r3, #1
 801a448:	d101      	bne.n	801a44e <xQueueGenericSend+0x72>
 801a44a:	2301      	movs	r3, #1
 801a44c:	e000      	b.n	801a450 <xQueueGenericSend+0x74>
 801a44e:	2300      	movs	r3, #0
 801a450:	2b00      	cmp	r3, #0
 801a452:	d10a      	bne.n	801a46a <xQueueGenericSend+0x8e>
	__asm volatile
 801a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a458:	f383 8811 	msr	BASEPRI, r3
 801a45c:	f3bf 8f6f 	isb	sy
 801a460:	f3bf 8f4f 	dsb	sy
 801a464:	623b      	str	r3, [r7, #32]
}
 801a466:	bf00      	nop
 801a468:	e7fe      	b.n	801a468 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a46a:	f001 fa85 	bl	801b978 <xTaskGetSchedulerState>
 801a46e:	4603      	mov	r3, r0
 801a470:	2b00      	cmp	r3, #0
 801a472:	d102      	bne.n	801a47a <xQueueGenericSend+0x9e>
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d101      	bne.n	801a47e <xQueueGenericSend+0xa2>
 801a47a:	2301      	movs	r3, #1
 801a47c:	e000      	b.n	801a480 <xQueueGenericSend+0xa4>
 801a47e:	2300      	movs	r3, #0
 801a480:	2b00      	cmp	r3, #0
 801a482:	d10a      	bne.n	801a49a <xQueueGenericSend+0xbe>
	__asm volatile
 801a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a488:	f383 8811 	msr	BASEPRI, r3
 801a48c:	f3bf 8f6f 	isb	sy
 801a490:	f3bf 8f4f 	dsb	sy
 801a494:	61fb      	str	r3, [r7, #28]
}
 801a496:	bf00      	nop
 801a498:	e7fe      	b.n	801a498 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a49a:	f002 f803 	bl	801c4a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4a6:	429a      	cmp	r2, r3
 801a4a8:	d302      	bcc.n	801a4b0 <xQueueGenericSend+0xd4>
 801a4aa:	683b      	ldr	r3, [r7, #0]
 801a4ac:	2b02      	cmp	r3, #2
 801a4ae:	d129      	bne.n	801a504 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a4b0:	683a      	ldr	r2, [r7, #0]
 801a4b2:	68b9      	ldr	r1, [r7, #8]
 801a4b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4b6:	f000 fa0b 	bl	801a8d0 <prvCopyDataToQueue>
 801a4ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d010      	beq.n	801a4e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4c6:	3324      	adds	r3, #36	; 0x24
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	f001 f831 	bl	801b530 <xTaskRemoveFromEventList>
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d013      	beq.n	801a4fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a4d4:	4b3f      	ldr	r3, [pc, #252]	; (801a5d4 <xQueueGenericSend+0x1f8>)
 801a4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a4da:	601a      	str	r2, [r3, #0]
 801a4dc:	f3bf 8f4f 	dsb	sy
 801a4e0:	f3bf 8f6f 	isb	sy
 801a4e4:	e00a      	b.n	801a4fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d007      	beq.n	801a4fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a4ec:	4b39      	ldr	r3, [pc, #228]	; (801a5d4 <xQueueGenericSend+0x1f8>)
 801a4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a4f2:	601a      	str	r2, [r3, #0]
 801a4f4:	f3bf 8f4f 	dsb	sy
 801a4f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a4fc:	f002 f802 	bl	801c504 <vPortExitCritical>
				return pdPASS;
 801a500:	2301      	movs	r3, #1
 801a502:	e063      	b.n	801a5cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d103      	bne.n	801a512 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a50a:	f001 fffb 	bl	801c504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a50e:	2300      	movs	r3, #0
 801a510:	e05c      	b.n	801a5cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a514:	2b00      	cmp	r3, #0
 801a516:	d106      	bne.n	801a526 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a518:	f107 0314 	add.w	r3, r7, #20
 801a51c:	4618      	mov	r0, r3
 801a51e:	f001 f8cd 	bl	801b6bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a522:	2301      	movs	r3, #1
 801a524:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a526:	f001 ffed 	bl	801c504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a52a:	f000 fd9b 	bl	801b064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a52e:	f001 ffb9 	bl	801c4a4 <vPortEnterCritical>
 801a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a538:	b25b      	sxtb	r3, r3
 801a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a53e:	d103      	bne.n	801a548 <xQueueGenericSend+0x16c>
 801a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a542:	2200      	movs	r2, #0
 801a544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a54a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a54e:	b25b      	sxtb	r3, r3
 801a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a554:	d103      	bne.n	801a55e <xQueueGenericSend+0x182>
 801a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a558:	2200      	movs	r2, #0
 801a55a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a55e:	f001 ffd1 	bl	801c504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a562:	1d3a      	adds	r2, r7, #4
 801a564:	f107 0314 	add.w	r3, r7, #20
 801a568:	4611      	mov	r1, r2
 801a56a:	4618      	mov	r0, r3
 801a56c:	f001 f8bc 	bl	801b6e8 <xTaskCheckForTimeOut>
 801a570:	4603      	mov	r3, r0
 801a572:	2b00      	cmp	r3, #0
 801a574:	d124      	bne.n	801a5c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a578:	f000 faa2 	bl	801aac0 <prvIsQueueFull>
 801a57c:	4603      	mov	r3, r0
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d018      	beq.n	801a5b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a584:	3310      	adds	r3, #16
 801a586:	687a      	ldr	r2, [r7, #4]
 801a588:	4611      	mov	r1, r2
 801a58a:	4618      	mov	r0, r3
 801a58c:	f000 ff44 	bl	801b418 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a592:	f000 fa2d 	bl	801a9f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a596:	f000 fd73 	bl	801b080 <xTaskResumeAll>
 801a59a:	4603      	mov	r3, r0
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	f47f af7c 	bne.w	801a49a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801a5a2:	4b0c      	ldr	r3, [pc, #48]	; (801a5d4 <xQueueGenericSend+0x1f8>)
 801a5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a5a8:	601a      	str	r2, [r3, #0]
 801a5aa:	f3bf 8f4f 	dsb	sy
 801a5ae:	f3bf 8f6f 	isb	sy
 801a5b2:	e772      	b.n	801a49a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a5b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5b6:	f000 fa1b 	bl	801a9f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a5ba:	f000 fd61 	bl	801b080 <xTaskResumeAll>
 801a5be:	e76c      	b.n	801a49a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a5c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5c2:	f000 fa15 	bl	801a9f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a5c6:	f000 fd5b 	bl	801b080 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a5ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	3738      	adds	r7, #56	; 0x38
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	bd80      	pop	{r7, pc}
 801a5d4:	e000ed04 	.word	0xe000ed04

0801a5d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b090      	sub	sp, #64	; 0x40
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	60f8      	str	r0, [r7, #12]
 801a5e0:	60b9      	str	r1, [r7, #8]
 801a5e2:	607a      	str	r2, [r7, #4]
 801a5e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801a5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d10a      	bne.n	801a606 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5f4:	f383 8811 	msr	BASEPRI, r3
 801a5f8:	f3bf 8f6f 	isb	sy
 801a5fc:	f3bf 8f4f 	dsb	sy
 801a600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a602:	bf00      	nop
 801a604:	e7fe      	b.n	801a604 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a606:	68bb      	ldr	r3, [r7, #8]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d103      	bne.n	801a614 <xQueueGenericSendFromISR+0x3c>
 801a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a610:	2b00      	cmp	r3, #0
 801a612:	d101      	bne.n	801a618 <xQueueGenericSendFromISR+0x40>
 801a614:	2301      	movs	r3, #1
 801a616:	e000      	b.n	801a61a <xQueueGenericSendFromISR+0x42>
 801a618:	2300      	movs	r3, #0
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d10a      	bne.n	801a634 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a622:	f383 8811 	msr	BASEPRI, r3
 801a626:	f3bf 8f6f 	isb	sy
 801a62a:	f3bf 8f4f 	dsb	sy
 801a62e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a630:	bf00      	nop
 801a632:	e7fe      	b.n	801a632 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a634:	683b      	ldr	r3, [r7, #0]
 801a636:	2b02      	cmp	r3, #2
 801a638:	d103      	bne.n	801a642 <xQueueGenericSendFromISR+0x6a>
 801a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a63e:	2b01      	cmp	r3, #1
 801a640:	d101      	bne.n	801a646 <xQueueGenericSendFromISR+0x6e>
 801a642:	2301      	movs	r3, #1
 801a644:	e000      	b.n	801a648 <xQueueGenericSendFromISR+0x70>
 801a646:	2300      	movs	r3, #0
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d10a      	bne.n	801a662 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a650:	f383 8811 	msr	BASEPRI, r3
 801a654:	f3bf 8f6f 	isb	sy
 801a658:	f3bf 8f4f 	dsb	sy
 801a65c:	623b      	str	r3, [r7, #32]
}
 801a65e:	bf00      	nop
 801a660:	e7fe      	b.n	801a660 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a662:	f002 f801 	bl	801c668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a666:	f3ef 8211 	mrs	r2, BASEPRI
 801a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a66e:	f383 8811 	msr	BASEPRI, r3
 801a672:	f3bf 8f6f 	isb	sy
 801a676:	f3bf 8f4f 	dsb	sy
 801a67a:	61fa      	str	r2, [r7, #28]
 801a67c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a67e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a680:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a68a:	429a      	cmp	r2, r3
 801a68c:	d302      	bcc.n	801a694 <xQueueGenericSendFromISR+0xbc>
 801a68e:	683b      	ldr	r3, [r7, #0]
 801a690:	2b02      	cmp	r3, #2
 801a692:	d12f      	bne.n	801a6f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a6a4:	683a      	ldr	r2, [r7, #0]
 801a6a6:	68b9      	ldr	r1, [r7, #8]
 801a6a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a6aa:	f000 f911 	bl	801a8d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a6ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6b6:	d112      	bne.n	801a6de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d016      	beq.n	801a6ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6c2:	3324      	adds	r3, #36	; 0x24
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	f000 ff33 	bl	801b530 <xTaskRemoveFromEventList>
 801a6ca:	4603      	mov	r3, r0
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d00e      	beq.n	801a6ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d00b      	beq.n	801a6ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	2201      	movs	r2, #1
 801a6da:	601a      	str	r2, [r3, #0]
 801a6dc:	e007      	b.n	801a6ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a6de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801a6e2:	3301      	adds	r3, #1
 801a6e4:	b2db      	uxtb	r3, r3
 801a6e6:	b25a      	sxtb	r2, r3
 801a6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a6ee:	2301      	movs	r3, #1
 801a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801a6f2:	e001      	b.n	801a6f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a6fc:	697b      	ldr	r3, [r7, #20]
 801a6fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a702:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a706:	4618      	mov	r0, r3
 801a708:	3740      	adds	r7, #64	; 0x40
 801a70a:	46bd      	mov	sp, r7
 801a70c:	bd80      	pop	{r7, pc}
	...

0801a710 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b08c      	sub	sp, #48	; 0x30
 801a714:	af00      	add	r7, sp, #0
 801a716:	60f8      	str	r0, [r7, #12]
 801a718:	60b9      	str	r1, [r7, #8]
 801a71a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a71c:	2300      	movs	r3, #0
 801a71e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a726:	2b00      	cmp	r3, #0
 801a728:	d10a      	bne.n	801a740 <xQueueReceive+0x30>
	__asm volatile
 801a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a72e:	f383 8811 	msr	BASEPRI, r3
 801a732:	f3bf 8f6f 	isb	sy
 801a736:	f3bf 8f4f 	dsb	sy
 801a73a:	623b      	str	r3, [r7, #32]
}
 801a73c:	bf00      	nop
 801a73e:	e7fe      	b.n	801a73e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a740:	68bb      	ldr	r3, [r7, #8]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d103      	bne.n	801a74e <xQueueReceive+0x3e>
 801a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d101      	bne.n	801a752 <xQueueReceive+0x42>
 801a74e:	2301      	movs	r3, #1
 801a750:	e000      	b.n	801a754 <xQueueReceive+0x44>
 801a752:	2300      	movs	r3, #0
 801a754:	2b00      	cmp	r3, #0
 801a756:	d10a      	bne.n	801a76e <xQueueReceive+0x5e>
	__asm volatile
 801a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a75c:	f383 8811 	msr	BASEPRI, r3
 801a760:	f3bf 8f6f 	isb	sy
 801a764:	f3bf 8f4f 	dsb	sy
 801a768:	61fb      	str	r3, [r7, #28]
}
 801a76a:	bf00      	nop
 801a76c:	e7fe      	b.n	801a76c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a76e:	f001 f903 	bl	801b978 <xTaskGetSchedulerState>
 801a772:	4603      	mov	r3, r0
 801a774:	2b00      	cmp	r3, #0
 801a776:	d102      	bne.n	801a77e <xQueueReceive+0x6e>
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d101      	bne.n	801a782 <xQueueReceive+0x72>
 801a77e:	2301      	movs	r3, #1
 801a780:	e000      	b.n	801a784 <xQueueReceive+0x74>
 801a782:	2300      	movs	r3, #0
 801a784:	2b00      	cmp	r3, #0
 801a786:	d10a      	bne.n	801a79e <xQueueReceive+0x8e>
	__asm volatile
 801a788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a78c:	f383 8811 	msr	BASEPRI, r3
 801a790:	f3bf 8f6f 	isb	sy
 801a794:	f3bf 8f4f 	dsb	sy
 801a798:	61bb      	str	r3, [r7, #24]
}
 801a79a:	bf00      	nop
 801a79c:	e7fe      	b.n	801a79c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a79e:	f001 fe81 	bl	801c4a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d01f      	beq.n	801a7ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a7ae:	68b9      	ldr	r1, [r7, #8]
 801a7b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a7b2:	f000 f8f7 	bl	801a9a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7b8:	1e5a      	subs	r2, r3, #1
 801a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c0:	691b      	ldr	r3, [r3, #16]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d00f      	beq.n	801a7e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c8:	3310      	adds	r3, #16
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f000 feb0 	bl	801b530 <xTaskRemoveFromEventList>
 801a7d0:	4603      	mov	r3, r0
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d007      	beq.n	801a7e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a7d6:	4b3d      	ldr	r3, [pc, #244]	; (801a8cc <xQueueReceive+0x1bc>)
 801a7d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a7dc:	601a      	str	r2, [r3, #0]
 801a7de:	f3bf 8f4f 	dsb	sy
 801a7e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a7e6:	f001 fe8d 	bl	801c504 <vPortExitCritical>
				return pdPASS;
 801a7ea:	2301      	movs	r3, #1
 801a7ec:	e069      	b.n	801a8c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d103      	bne.n	801a7fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a7f4:	f001 fe86 	bl	801c504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	e062      	b.n	801a8c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d106      	bne.n	801a810 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a802:	f107 0310 	add.w	r3, r7, #16
 801a806:	4618      	mov	r0, r3
 801a808:	f000 ff58 	bl	801b6bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a80c:	2301      	movs	r3, #1
 801a80e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a810:	f001 fe78 	bl	801c504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a814:	f000 fc26 	bl	801b064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a818:	f001 fe44 	bl	801c4a4 <vPortEnterCritical>
 801a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a81e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a822:	b25b      	sxtb	r3, r3
 801a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a828:	d103      	bne.n	801a832 <xQueueReceive+0x122>
 801a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a82c:	2200      	movs	r2, #0
 801a82e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a838:	b25b      	sxtb	r3, r3
 801a83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a83e:	d103      	bne.n	801a848 <xQueueReceive+0x138>
 801a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a842:	2200      	movs	r2, #0
 801a844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a848:	f001 fe5c 	bl	801c504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a84c:	1d3a      	adds	r2, r7, #4
 801a84e:	f107 0310 	add.w	r3, r7, #16
 801a852:	4611      	mov	r1, r2
 801a854:	4618      	mov	r0, r3
 801a856:	f000 ff47 	bl	801b6e8 <xTaskCheckForTimeOut>
 801a85a:	4603      	mov	r3, r0
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d123      	bne.n	801a8a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a862:	f000 f917 	bl	801aa94 <prvIsQueueEmpty>
 801a866:	4603      	mov	r3, r0
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d017      	beq.n	801a89c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a86e:	3324      	adds	r3, #36	; 0x24
 801a870:	687a      	ldr	r2, [r7, #4]
 801a872:	4611      	mov	r1, r2
 801a874:	4618      	mov	r0, r3
 801a876:	f000 fdcf 	bl	801b418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a87c:	f000 f8b8 	bl	801a9f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a880:	f000 fbfe 	bl	801b080 <xTaskResumeAll>
 801a884:	4603      	mov	r3, r0
 801a886:	2b00      	cmp	r3, #0
 801a888:	d189      	bne.n	801a79e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801a88a:	4b10      	ldr	r3, [pc, #64]	; (801a8cc <xQueueReceive+0x1bc>)
 801a88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a890:	601a      	str	r2, [r3, #0]
 801a892:	f3bf 8f4f 	dsb	sy
 801a896:	f3bf 8f6f 	isb	sy
 801a89a:	e780      	b.n	801a79e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a89e:	f000 f8a7 	bl	801a9f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a8a2:	f000 fbed 	bl	801b080 <xTaskResumeAll>
 801a8a6:	e77a      	b.n	801a79e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a8a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a8aa:	f000 f8a1 	bl	801a9f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a8ae:	f000 fbe7 	bl	801b080 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a8b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a8b4:	f000 f8ee 	bl	801aa94 <prvIsQueueEmpty>
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	f43f af6f 	beq.w	801a79e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a8c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	3730      	adds	r7, #48	; 0x30
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	bd80      	pop	{r7, pc}
 801a8ca:	bf00      	nop
 801a8cc:	e000ed04 	.word	0xe000ed04

0801a8d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b086      	sub	sp, #24
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	60f8      	str	r0, [r7, #12]
 801a8d8:	60b9      	str	r1, [r7, #8]
 801a8da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a8dc:	2300      	movs	r3, #0
 801a8de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d10d      	bne.n	801a90a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d14d      	bne.n	801a992 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	689b      	ldr	r3, [r3, #8]
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f001 f85a 	bl	801b9b4 <xTaskPriorityDisinherit>
 801a900:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	2200      	movs	r2, #0
 801a906:	609a      	str	r2, [r3, #8]
 801a908:	e043      	b.n	801a992 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d119      	bne.n	801a944 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	6858      	ldr	r0, [r3, #4]
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a918:	461a      	mov	r2, r3
 801a91a:	68b9      	ldr	r1, [r7, #8]
 801a91c:	f004 f988 	bl	801ec30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	685a      	ldr	r2, [r3, #4]
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a928:	441a      	add	r2, r3
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	685a      	ldr	r2, [r3, #4]
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	689b      	ldr	r3, [r3, #8]
 801a936:	429a      	cmp	r2, r3
 801a938:	d32b      	bcc.n	801a992 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	605a      	str	r2, [r3, #4]
 801a942:	e026      	b.n	801a992 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	68d8      	ldr	r0, [r3, #12]
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a94c:	461a      	mov	r2, r3
 801a94e:	68b9      	ldr	r1, [r7, #8]
 801a950:	f004 f96e 	bl	801ec30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	68da      	ldr	r2, [r3, #12]
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a95c:	425b      	negs	r3, r3
 801a95e:	441a      	add	r2, r3
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	68da      	ldr	r2, [r3, #12]
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	429a      	cmp	r2, r3
 801a96e:	d207      	bcs.n	801a980 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	689a      	ldr	r2, [r3, #8]
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a978:	425b      	negs	r3, r3
 801a97a:	441a      	add	r2, r3
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2b02      	cmp	r3, #2
 801a984:	d105      	bne.n	801a992 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a986:	693b      	ldr	r3, [r7, #16]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d002      	beq.n	801a992 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a98c:	693b      	ldr	r3, [r7, #16]
 801a98e:	3b01      	subs	r3, #1
 801a990:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a992:	693b      	ldr	r3, [r7, #16]
 801a994:	1c5a      	adds	r2, r3, #1
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a99a:	697b      	ldr	r3, [r7, #20]
}
 801a99c:	4618      	mov	r0, r3
 801a99e:	3718      	adds	r7, #24
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}

0801a9a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b082      	sub	sp, #8
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
 801a9ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d018      	beq.n	801a9e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	68da      	ldr	r2, [r3, #12]
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9be:	441a      	add	r2, r3
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	68da      	ldr	r2, [r3, #12]
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	689b      	ldr	r3, [r3, #8]
 801a9cc:	429a      	cmp	r2, r3
 801a9ce:	d303      	bcc.n	801a9d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	681a      	ldr	r2, [r3, #0]
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	68d9      	ldr	r1, [r3, #12]
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9e0:	461a      	mov	r2, r3
 801a9e2:	6838      	ldr	r0, [r7, #0]
 801a9e4:	f004 f924 	bl	801ec30 <memcpy>
	}
}
 801a9e8:	bf00      	nop
 801a9ea:	3708      	adds	r7, #8
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}

0801a9f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b084      	sub	sp, #16
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a9f8:	f001 fd54 	bl	801c4a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aa02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aa04:	e011      	b.n	801aa2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d012      	beq.n	801aa34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	3324      	adds	r3, #36	; 0x24
 801aa12:	4618      	mov	r0, r3
 801aa14:	f000 fd8c 	bl	801b530 <xTaskRemoveFromEventList>
 801aa18:	4603      	mov	r3, r0
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d001      	beq.n	801aa22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801aa1e:	f000 fec5 	bl	801b7ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801aa22:	7bfb      	ldrb	r3, [r7, #15]
 801aa24:	3b01      	subs	r3, #1
 801aa26:	b2db      	uxtb	r3, r3
 801aa28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aa2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	dce9      	bgt.n	801aa06 <prvUnlockQueue+0x16>
 801aa32:	e000      	b.n	801aa36 <prvUnlockQueue+0x46>
					break;
 801aa34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	22ff      	movs	r2, #255	; 0xff
 801aa3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801aa3e:	f001 fd61 	bl	801c504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801aa42:	f001 fd2f 	bl	801c4a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aa4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801aa4e:	e011      	b.n	801aa74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	691b      	ldr	r3, [r3, #16]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d012      	beq.n	801aa7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	3310      	adds	r3, #16
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	f000 fd67 	bl	801b530 <xTaskRemoveFromEventList>
 801aa62:	4603      	mov	r3, r0
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d001      	beq.n	801aa6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801aa68:	f000 fea0 	bl	801b7ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801aa6c:	7bbb      	ldrb	r3, [r7, #14]
 801aa6e:	3b01      	subs	r3, #1
 801aa70:	b2db      	uxtb	r3, r3
 801aa72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801aa74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	dce9      	bgt.n	801aa50 <prvUnlockQueue+0x60>
 801aa7c:	e000      	b.n	801aa80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801aa7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	22ff      	movs	r2, #255	; 0xff
 801aa84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801aa88:	f001 fd3c 	bl	801c504 <vPortExitCritical>
}
 801aa8c:	bf00      	nop
 801aa8e:	3710      	adds	r7, #16
 801aa90:	46bd      	mov	sp, r7
 801aa92:	bd80      	pop	{r7, pc}

0801aa94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801aa94:	b580      	push	{r7, lr}
 801aa96:	b084      	sub	sp, #16
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801aa9c:	f001 fd02 	bl	801c4a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d102      	bne.n	801aaae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801aaa8:	2301      	movs	r3, #1
 801aaaa:	60fb      	str	r3, [r7, #12]
 801aaac:	e001      	b.n	801aab2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801aaae:	2300      	movs	r3, #0
 801aab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801aab2:	f001 fd27 	bl	801c504 <vPortExitCritical>

	return xReturn;
 801aab6:	68fb      	ldr	r3, [r7, #12]
}
 801aab8:	4618      	mov	r0, r3
 801aaba:	3710      	adds	r7, #16
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bd80      	pop	{r7, pc}

0801aac0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b084      	sub	sp, #16
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801aac8:	f001 fcec 	bl	801c4a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aad4:	429a      	cmp	r2, r3
 801aad6:	d102      	bne.n	801aade <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801aad8:	2301      	movs	r3, #1
 801aada:	60fb      	str	r3, [r7, #12]
 801aadc:	e001      	b.n	801aae2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801aade:	2300      	movs	r3, #0
 801aae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801aae2:	f001 fd0f 	bl	801c504 <vPortExitCritical>

	return xReturn;
 801aae6:	68fb      	ldr	r3, [r7, #12]
}
 801aae8:	4618      	mov	r0, r3
 801aaea:	3710      	adds	r7, #16
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd80      	pop	{r7, pc}

0801aaf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801aaf0:	b480      	push	{r7}
 801aaf2:	b085      	sub	sp, #20
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
 801aaf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801aafa:	2300      	movs	r3, #0
 801aafc:	60fb      	str	r3, [r7, #12]
 801aafe:	e014      	b.n	801ab2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801ab00:	4a0f      	ldr	r2, [pc, #60]	; (801ab40 <vQueueAddToRegistry+0x50>)
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d10b      	bne.n	801ab24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801ab0c:	490c      	ldr	r1, [pc, #48]	; (801ab40 <vQueueAddToRegistry+0x50>)
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	683a      	ldr	r2, [r7, #0]
 801ab12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801ab16:	4a0a      	ldr	r2, [pc, #40]	; (801ab40 <vQueueAddToRegistry+0x50>)
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	00db      	lsls	r3, r3, #3
 801ab1c:	4413      	add	r3, r2
 801ab1e:	687a      	ldr	r2, [r7, #4]
 801ab20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801ab22:	e006      	b.n	801ab32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	3301      	adds	r3, #1
 801ab28:	60fb      	str	r3, [r7, #12]
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	2b07      	cmp	r3, #7
 801ab2e:	d9e7      	bls.n	801ab00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801ab30:	bf00      	nop
 801ab32:	bf00      	nop
 801ab34:	3714      	adds	r7, #20
 801ab36:	46bd      	mov	sp, r7
 801ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3c:	4770      	bx	lr
 801ab3e:	bf00      	nop
 801ab40:	2000b8d4 	.word	0x2000b8d4

0801ab44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b086      	sub	sp, #24
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	60f8      	str	r0, [r7, #12]
 801ab4c:	60b9      	str	r1, [r7, #8]
 801ab4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801ab54:	f001 fca6 	bl	801c4a4 <vPortEnterCritical>
 801ab58:	697b      	ldr	r3, [r7, #20]
 801ab5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ab5e:	b25b      	sxtb	r3, r3
 801ab60:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab64:	d103      	bne.n	801ab6e <vQueueWaitForMessageRestricted+0x2a>
 801ab66:	697b      	ldr	r3, [r7, #20]
 801ab68:	2200      	movs	r2, #0
 801ab6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ab6e:	697b      	ldr	r3, [r7, #20]
 801ab70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ab74:	b25b      	sxtb	r3, r3
 801ab76:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab7a:	d103      	bne.n	801ab84 <vQueueWaitForMessageRestricted+0x40>
 801ab7c:	697b      	ldr	r3, [r7, #20]
 801ab7e:	2200      	movs	r2, #0
 801ab80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ab84:	f001 fcbe 	bl	801c504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d106      	bne.n	801ab9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801ab90:	697b      	ldr	r3, [r7, #20]
 801ab92:	3324      	adds	r3, #36	; 0x24
 801ab94:	687a      	ldr	r2, [r7, #4]
 801ab96:	68b9      	ldr	r1, [r7, #8]
 801ab98:	4618      	mov	r0, r3
 801ab9a:	f000 fc9d 	bl	801b4d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801ab9e:	6978      	ldr	r0, [r7, #20]
 801aba0:	f7ff ff26 	bl	801a9f0 <prvUnlockQueue>
	}
 801aba4:	bf00      	nop
 801aba6:	3718      	adds	r7, #24
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}

0801abac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801abac:	b580      	push	{r7, lr}
 801abae:	b08e      	sub	sp, #56	; 0x38
 801abb0:	af04      	add	r7, sp, #16
 801abb2:	60f8      	str	r0, [r7, #12]
 801abb4:	60b9      	str	r1, [r7, #8]
 801abb6:	607a      	str	r2, [r7, #4]
 801abb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d10a      	bne.n	801abd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 801abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abc4:	f383 8811 	msr	BASEPRI, r3
 801abc8:	f3bf 8f6f 	isb	sy
 801abcc:	f3bf 8f4f 	dsb	sy
 801abd0:	623b      	str	r3, [r7, #32]
}
 801abd2:	bf00      	nop
 801abd4:	e7fe      	b.n	801abd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d10a      	bne.n	801abf2 <xTaskCreateStatic+0x46>
	__asm volatile
 801abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abe0:	f383 8811 	msr	BASEPRI, r3
 801abe4:	f3bf 8f6f 	isb	sy
 801abe8:	f3bf 8f4f 	dsb	sy
 801abec:	61fb      	str	r3, [r7, #28]
}
 801abee:	bf00      	nop
 801abf0:	e7fe      	b.n	801abf0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801abf2:	23bc      	movs	r3, #188	; 0xbc
 801abf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801abf6:	693b      	ldr	r3, [r7, #16]
 801abf8:	2bbc      	cmp	r3, #188	; 0xbc
 801abfa:	d00a      	beq.n	801ac12 <xTaskCreateStatic+0x66>
	__asm volatile
 801abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac00:	f383 8811 	msr	BASEPRI, r3
 801ac04:	f3bf 8f6f 	isb	sy
 801ac08:	f3bf 8f4f 	dsb	sy
 801ac0c:	61bb      	str	r3, [r7, #24]
}
 801ac0e:	bf00      	nop
 801ac10:	e7fe      	b.n	801ac10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ac12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ac14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d01e      	beq.n	801ac58 <xTaskCreateStatic+0xac>
 801ac1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d01b      	beq.n	801ac58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ac20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac2c:	2202      	movs	r2, #2
 801ac2e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ac32:	2300      	movs	r3, #0
 801ac34:	9303      	str	r3, [sp, #12]
 801ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac38:	9302      	str	r3, [sp, #8]
 801ac3a:	f107 0314 	add.w	r3, r7, #20
 801ac3e:	9301      	str	r3, [sp, #4]
 801ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac42:	9300      	str	r3, [sp, #0]
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	687a      	ldr	r2, [r7, #4]
 801ac48:	68b9      	ldr	r1, [r7, #8]
 801ac4a:	68f8      	ldr	r0, [r7, #12]
 801ac4c:	f000 f850 	bl	801acf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ac50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ac52:	f000 f8f3 	bl	801ae3c <prvAddNewTaskToReadyList>
 801ac56:	e001      	b.n	801ac5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801ac58:	2300      	movs	r3, #0
 801ac5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801ac5c:	697b      	ldr	r3, [r7, #20]
	}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3728      	adds	r7, #40	; 0x28
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}

0801ac66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801ac66:	b580      	push	{r7, lr}
 801ac68:	b08c      	sub	sp, #48	; 0x30
 801ac6a:	af04      	add	r7, sp, #16
 801ac6c:	60f8      	str	r0, [r7, #12]
 801ac6e:	60b9      	str	r1, [r7, #8]
 801ac70:	603b      	str	r3, [r7, #0]
 801ac72:	4613      	mov	r3, r2
 801ac74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801ac76:	88fb      	ldrh	r3, [r7, #6]
 801ac78:	009b      	lsls	r3, r3, #2
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f001 fd34 	bl	801c6e8 <pvPortMalloc>
 801ac80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d00e      	beq.n	801aca6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801ac88:	20bc      	movs	r0, #188	; 0xbc
 801ac8a:	f001 fd2d 	bl	801c6e8 <pvPortMalloc>
 801ac8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801ac90:	69fb      	ldr	r3, [r7, #28]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d003      	beq.n	801ac9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801ac96:	69fb      	ldr	r3, [r7, #28]
 801ac98:	697a      	ldr	r2, [r7, #20]
 801ac9a:	631a      	str	r2, [r3, #48]	; 0x30
 801ac9c:	e005      	b.n	801acaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801ac9e:	6978      	ldr	r0, [r7, #20]
 801aca0:	f001 fdee 	bl	801c880 <vPortFree>
 801aca4:	e001      	b.n	801acaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801aca6:	2300      	movs	r3, #0
 801aca8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801acaa:	69fb      	ldr	r3, [r7, #28]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d017      	beq.n	801ace0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801acb0:	69fb      	ldr	r3, [r7, #28]
 801acb2:	2200      	movs	r2, #0
 801acb4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801acb8:	88fa      	ldrh	r2, [r7, #6]
 801acba:	2300      	movs	r3, #0
 801acbc:	9303      	str	r3, [sp, #12]
 801acbe:	69fb      	ldr	r3, [r7, #28]
 801acc0:	9302      	str	r3, [sp, #8]
 801acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acc4:	9301      	str	r3, [sp, #4]
 801acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acc8:	9300      	str	r3, [sp, #0]
 801acca:	683b      	ldr	r3, [r7, #0]
 801accc:	68b9      	ldr	r1, [r7, #8]
 801acce:	68f8      	ldr	r0, [r7, #12]
 801acd0:	f000 f80e 	bl	801acf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801acd4:	69f8      	ldr	r0, [r7, #28]
 801acd6:	f000 f8b1 	bl	801ae3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801acda:	2301      	movs	r3, #1
 801acdc:	61bb      	str	r3, [r7, #24]
 801acde:	e002      	b.n	801ace6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801ace0:	f04f 33ff 	mov.w	r3, #4294967295
 801ace4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801ace6:	69bb      	ldr	r3, [r7, #24]
	}
 801ace8:	4618      	mov	r0, r3
 801acea:	3720      	adds	r7, #32
 801acec:	46bd      	mov	sp, r7
 801acee:	bd80      	pop	{r7, pc}

0801acf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b088      	sub	sp, #32
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	60f8      	str	r0, [r7, #12]
 801acf8:	60b9      	str	r1, [r7, #8]
 801acfa:	607a      	str	r2, [r7, #4]
 801acfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	009b      	lsls	r3, r3, #2
 801ad06:	461a      	mov	r2, r3
 801ad08:	21a5      	movs	r1, #165	; 0xa5
 801ad0a:	f003 ffb9 	bl	801ec80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ad18:	3b01      	subs	r3, #1
 801ad1a:	009b      	lsls	r3, r3, #2
 801ad1c:	4413      	add	r3, r2
 801ad1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ad20:	69bb      	ldr	r3, [r7, #24]
 801ad22:	f023 0307 	bic.w	r3, r3, #7
 801ad26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ad28:	69bb      	ldr	r3, [r7, #24]
 801ad2a:	f003 0307 	and.w	r3, r3, #7
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d00a      	beq.n	801ad48 <prvInitialiseNewTask+0x58>
	__asm volatile
 801ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad36:	f383 8811 	msr	BASEPRI, r3
 801ad3a:	f3bf 8f6f 	isb	sy
 801ad3e:	f3bf 8f4f 	dsb	sy
 801ad42:	617b      	str	r3, [r7, #20]
}
 801ad44:	bf00      	nop
 801ad46:	e7fe      	b.n	801ad46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ad48:	68bb      	ldr	r3, [r7, #8]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d01f      	beq.n	801ad8e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ad4e:	2300      	movs	r3, #0
 801ad50:	61fb      	str	r3, [r7, #28]
 801ad52:	e012      	b.n	801ad7a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ad54:	68ba      	ldr	r2, [r7, #8]
 801ad56:	69fb      	ldr	r3, [r7, #28]
 801ad58:	4413      	add	r3, r2
 801ad5a:	7819      	ldrb	r1, [r3, #0]
 801ad5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad5e:	69fb      	ldr	r3, [r7, #28]
 801ad60:	4413      	add	r3, r2
 801ad62:	3334      	adds	r3, #52	; 0x34
 801ad64:	460a      	mov	r2, r1
 801ad66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801ad68:	68ba      	ldr	r2, [r7, #8]
 801ad6a:	69fb      	ldr	r3, [r7, #28]
 801ad6c:	4413      	add	r3, r2
 801ad6e:	781b      	ldrb	r3, [r3, #0]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d006      	beq.n	801ad82 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ad74:	69fb      	ldr	r3, [r7, #28]
 801ad76:	3301      	adds	r3, #1
 801ad78:	61fb      	str	r3, [r7, #28]
 801ad7a:	69fb      	ldr	r3, [r7, #28]
 801ad7c:	2b0f      	cmp	r3, #15
 801ad7e:	d9e9      	bls.n	801ad54 <prvInitialiseNewTask+0x64>
 801ad80:	e000      	b.n	801ad84 <prvInitialiseNewTask+0x94>
			{
				break;
 801ad82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad86:	2200      	movs	r2, #0
 801ad88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ad8c:	e003      	b.n	801ad96 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad90:	2200      	movs	r2, #0
 801ad92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad98:	2b37      	cmp	r3, #55	; 0x37
 801ad9a:	d901      	bls.n	801ada0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801ad9c:	2337      	movs	r3, #55	; 0x37
 801ad9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ada4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801adaa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adae:	2200      	movs	r2, #0
 801adb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adb4:	3304      	adds	r3, #4
 801adb6:	4618      	mov	r0, r3
 801adb8:	f7ff f978 	bl	801a0ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adbe:	3318      	adds	r3, #24
 801adc0:	4618      	mov	r0, r3
 801adc2:	f7ff f973 	bl	801a0ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801adca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801adda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adde:	2200      	movs	r2, #0
 801ade0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ade6:	2200      	movs	r2, #0
 801ade8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adee:	3354      	adds	r3, #84	; 0x54
 801adf0:	2260      	movs	r2, #96	; 0x60
 801adf2:	2100      	movs	r1, #0
 801adf4:	4618      	mov	r0, r3
 801adf6:	f003 ff43 	bl	801ec80 <memset>
 801adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adfc:	4a0c      	ldr	r2, [pc, #48]	; (801ae30 <prvInitialiseNewTask+0x140>)
 801adfe:	659a      	str	r2, [r3, #88]	; 0x58
 801ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae02:	4a0c      	ldr	r2, [pc, #48]	; (801ae34 <prvInitialiseNewTask+0x144>)
 801ae04:	65da      	str	r2, [r3, #92]	; 0x5c
 801ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae08:	4a0b      	ldr	r2, [pc, #44]	; (801ae38 <prvInitialiseNewTask+0x148>)
 801ae0a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801ae0c:	683a      	ldr	r2, [r7, #0]
 801ae0e:	68f9      	ldr	r1, [r7, #12]
 801ae10:	69b8      	ldr	r0, [r7, #24]
 801ae12:	f001 fa17 	bl	801c244 <pxPortInitialiseStack>
 801ae16:	4602      	mov	r2, r0
 801ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801ae1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d002      	beq.n	801ae28 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ae28:	bf00      	nop
 801ae2a:	3720      	adds	r7, #32
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}
 801ae30:	08022fcc 	.word	0x08022fcc
 801ae34:	08022fec 	.word	0x08022fec
 801ae38:	08022fac 	.word	0x08022fac

0801ae3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b082      	sub	sp, #8
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ae44:	f001 fb2e 	bl	801c4a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ae48:	4b2d      	ldr	r3, [pc, #180]	; (801af00 <prvAddNewTaskToReadyList+0xc4>)
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	3301      	adds	r3, #1
 801ae4e:	4a2c      	ldr	r2, [pc, #176]	; (801af00 <prvAddNewTaskToReadyList+0xc4>)
 801ae50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ae52:	4b2c      	ldr	r3, [pc, #176]	; (801af04 <prvAddNewTaskToReadyList+0xc8>)
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d109      	bne.n	801ae6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ae5a:	4a2a      	ldr	r2, [pc, #168]	; (801af04 <prvAddNewTaskToReadyList+0xc8>)
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ae60:	4b27      	ldr	r3, [pc, #156]	; (801af00 <prvAddNewTaskToReadyList+0xc4>)
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	2b01      	cmp	r3, #1
 801ae66:	d110      	bne.n	801ae8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801ae68:	f000 fcc4 	bl	801b7f4 <prvInitialiseTaskLists>
 801ae6c:	e00d      	b.n	801ae8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801ae6e:	4b26      	ldr	r3, [pc, #152]	; (801af08 <prvAddNewTaskToReadyList+0xcc>)
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d109      	bne.n	801ae8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801ae76:	4b23      	ldr	r3, [pc, #140]	; (801af04 <prvAddNewTaskToReadyList+0xc8>)
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae80:	429a      	cmp	r2, r3
 801ae82:	d802      	bhi.n	801ae8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801ae84:	4a1f      	ldr	r2, [pc, #124]	; (801af04 <prvAddNewTaskToReadyList+0xc8>)
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801ae8a:	4b20      	ldr	r3, [pc, #128]	; (801af0c <prvAddNewTaskToReadyList+0xd0>)
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	3301      	adds	r3, #1
 801ae90:	4a1e      	ldr	r2, [pc, #120]	; (801af0c <prvAddNewTaskToReadyList+0xd0>)
 801ae92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801ae94:	4b1d      	ldr	r3, [pc, #116]	; (801af0c <prvAddNewTaskToReadyList+0xd0>)
 801ae96:	681a      	ldr	r2, [r3, #0]
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aea0:	4b1b      	ldr	r3, [pc, #108]	; (801af10 <prvAddNewTaskToReadyList+0xd4>)
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	429a      	cmp	r2, r3
 801aea6:	d903      	bls.n	801aeb0 <prvAddNewTaskToReadyList+0x74>
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aeac:	4a18      	ldr	r2, [pc, #96]	; (801af10 <prvAddNewTaskToReadyList+0xd4>)
 801aeae:	6013      	str	r3, [r2, #0]
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aeb4:	4613      	mov	r3, r2
 801aeb6:	009b      	lsls	r3, r3, #2
 801aeb8:	4413      	add	r3, r2
 801aeba:	009b      	lsls	r3, r3, #2
 801aebc:	4a15      	ldr	r2, [pc, #84]	; (801af14 <prvAddNewTaskToReadyList+0xd8>)
 801aebe:	441a      	add	r2, r3
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	3304      	adds	r3, #4
 801aec4:	4619      	mov	r1, r3
 801aec6:	4610      	mov	r0, r2
 801aec8:	f7ff f8fd 	bl	801a0c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801aecc:	f001 fb1a 	bl	801c504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801aed0:	4b0d      	ldr	r3, [pc, #52]	; (801af08 <prvAddNewTaskToReadyList+0xcc>)
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d00e      	beq.n	801aef6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801aed8:	4b0a      	ldr	r3, [pc, #40]	; (801af04 <prvAddNewTaskToReadyList+0xc8>)
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aee2:	429a      	cmp	r2, r3
 801aee4:	d207      	bcs.n	801aef6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801aee6:	4b0c      	ldr	r3, [pc, #48]	; (801af18 <prvAddNewTaskToReadyList+0xdc>)
 801aee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aeec:	601a      	str	r2, [r3, #0]
 801aeee:	f3bf 8f4f 	dsb	sy
 801aef2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801aef6:	bf00      	nop
 801aef8:	3708      	adds	r7, #8
 801aefa:	46bd      	mov	sp, r7
 801aefc:	bd80      	pop	{r7, pc}
 801aefe:	bf00      	nop
 801af00:	2000bde8 	.word	0x2000bde8
 801af04:	2000b914 	.word	0x2000b914
 801af08:	2000bdf4 	.word	0x2000bdf4
 801af0c:	2000be04 	.word	0x2000be04
 801af10:	2000bdf0 	.word	0x2000bdf0
 801af14:	2000b918 	.word	0x2000b918
 801af18:	e000ed04 	.word	0xe000ed04

0801af1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b084      	sub	sp, #16
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801af24:	2300      	movs	r3, #0
 801af26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d017      	beq.n	801af5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801af2e:	4b13      	ldr	r3, [pc, #76]	; (801af7c <vTaskDelay+0x60>)
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d00a      	beq.n	801af4c <vTaskDelay+0x30>
	__asm volatile
 801af36:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af3a:	f383 8811 	msr	BASEPRI, r3
 801af3e:	f3bf 8f6f 	isb	sy
 801af42:	f3bf 8f4f 	dsb	sy
 801af46:	60bb      	str	r3, [r7, #8]
}
 801af48:	bf00      	nop
 801af4a:	e7fe      	b.n	801af4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801af4c:	f000 f88a 	bl	801b064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801af50:	2100      	movs	r1, #0
 801af52:	6878      	ldr	r0, [r7, #4]
 801af54:	f000 fdb4 	bl	801bac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801af58:	f000 f892 	bl	801b080 <xTaskResumeAll>
 801af5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d107      	bne.n	801af74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801af64:	4b06      	ldr	r3, [pc, #24]	; (801af80 <vTaskDelay+0x64>)
 801af66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801af6a:	601a      	str	r2, [r3, #0]
 801af6c:	f3bf 8f4f 	dsb	sy
 801af70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801af74:	bf00      	nop
 801af76:	3710      	adds	r7, #16
 801af78:	46bd      	mov	sp, r7
 801af7a:	bd80      	pop	{r7, pc}
 801af7c:	2000be10 	.word	0x2000be10
 801af80:	e000ed04 	.word	0xe000ed04

0801af84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b08a      	sub	sp, #40	; 0x28
 801af88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801af8a:	2300      	movs	r3, #0
 801af8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801af8e:	2300      	movs	r3, #0
 801af90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801af92:	463a      	mov	r2, r7
 801af94:	1d39      	adds	r1, r7, #4
 801af96:	f107 0308 	add.w	r3, r7, #8
 801af9a:	4618      	mov	r0, r3
 801af9c:	f7fe fe26 	bl	8019bec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801afa0:	6839      	ldr	r1, [r7, #0]
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	68ba      	ldr	r2, [r7, #8]
 801afa6:	9202      	str	r2, [sp, #8]
 801afa8:	9301      	str	r3, [sp, #4]
 801afaa:	2300      	movs	r3, #0
 801afac:	9300      	str	r3, [sp, #0]
 801afae:	2300      	movs	r3, #0
 801afb0:	460a      	mov	r2, r1
 801afb2:	4924      	ldr	r1, [pc, #144]	; (801b044 <vTaskStartScheduler+0xc0>)
 801afb4:	4824      	ldr	r0, [pc, #144]	; (801b048 <vTaskStartScheduler+0xc4>)
 801afb6:	f7ff fdf9 	bl	801abac <xTaskCreateStatic>
 801afba:	4603      	mov	r3, r0
 801afbc:	4a23      	ldr	r2, [pc, #140]	; (801b04c <vTaskStartScheduler+0xc8>)
 801afbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801afc0:	4b22      	ldr	r3, [pc, #136]	; (801b04c <vTaskStartScheduler+0xc8>)
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d002      	beq.n	801afce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801afc8:	2301      	movs	r3, #1
 801afca:	617b      	str	r3, [r7, #20]
 801afcc:	e001      	b.n	801afd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801afce:	2300      	movs	r3, #0
 801afd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801afd2:	697b      	ldr	r3, [r7, #20]
 801afd4:	2b01      	cmp	r3, #1
 801afd6:	d102      	bne.n	801afde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801afd8:	f000 fdc6 	bl	801bb68 <xTimerCreateTimerTask>
 801afdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801afde:	697b      	ldr	r3, [r7, #20]
 801afe0:	2b01      	cmp	r3, #1
 801afe2:	d11b      	bne.n	801b01c <vTaskStartScheduler+0x98>
	__asm volatile
 801afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afe8:	f383 8811 	msr	BASEPRI, r3
 801afec:	f3bf 8f6f 	isb	sy
 801aff0:	f3bf 8f4f 	dsb	sy
 801aff4:	613b      	str	r3, [r7, #16]
}
 801aff6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801aff8:	4b15      	ldr	r3, [pc, #84]	; (801b050 <vTaskStartScheduler+0xcc>)
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	3354      	adds	r3, #84	; 0x54
 801affe:	4a15      	ldr	r2, [pc, #84]	; (801b054 <vTaskStartScheduler+0xd0>)
 801b000:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b002:	4b15      	ldr	r3, [pc, #84]	; (801b058 <vTaskStartScheduler+0xd4>)
 801b004:	f04f 32ff 	mov.w	r2, #4294967295
 801b008:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b00a:	4b14      	ldr	r3, [pc, #80]	; (801b05c <vTaskStartScheduler+0xd8>)
 801b00c:	2201      	movs	r2, #1
 801b00e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b010:	4b13      	ldr	r3, [pc, #76]	; (801b060 <vTaskStartScheduler+0xdc>)
 801b012:	2200      	movs	r2, #0
 801b014:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b016:	f001 f9a3 	bl	801c360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b01a:	e00e      	b.n	801b03a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b01c:	697b      	ldr	r3, [r7, #20]
 801b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b022:	d10a      	bne.n	801b03a <vTaskStartScheduler+0xb6>
	__asm volatile
 801b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b028:	f383 8811 	msr	BASEPRI, r3
 801b02c:	f3bf 8f6f 	isb	sy
 801b030:	f3bf 8f4f 	dsb	sy
 801b034:	60fb      	str	r3, [r7, #12]
}
 801b036:	bf00      	nop
 801b038:	e7fe      	b.n	801b038 <vTaskStartScheduler+0xb4>
}
 801b03a:	bf00      	nop
 801b03c:	3718      	adds	r7, #24
 801b03e:	46bd      	mov	sp, r7
 801b040:	bd80      	pop	{r7, pc}
 801b042:	bf00      	nop
 801b044:	080228c8 	.word	0x080228c8
 801b048:	0801b7c5 	.word	0x0801b7c5
 801b04c:	2000be0c 	.word	0x2000be0c
 801b050:	2000b914 	.word	0x2000b914
 801b054:	20000330 	.word	0x20000330
 801b058:	2000be08 	.word	0x2000be08
 801b05c:	2000bdf4 	.word	0x2000bdf4
 801b060:	2000bdec 	.word	0x2000bdec

0801b064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b064:	b480      	push	{r7}
 801b066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b068:	4b04      	ldr	r3, [pc, #16]	; (801b07c <vTaskSuspendAll+0x18>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	3301      	adds	r3, #1
 801b06e:	4a03      	ldr	r2, [pc, #12]	; (801b07c <vTaskSuspendAll+0x18>)
 801b070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b072:	bf00      	nop
 801b074:	46bd      	mov	sp, r7
 801b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b07a:	4770      	bx	lr
 801b07c:	2000be10 	.word	0x2000be10

0801b080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b084      	sub	sp, #16
 801b084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b086:	2300      	movs	r3, #0
 801b088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b08a:	2300      	movs	r3, #0
 801b08c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b08e:	4b42      	ldr	r3, [pc, #264]	; (801b198 <xTaskResumeAll+0x118>)
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d10a      	bne.n	801b0ac <xTaskResumeAll+0x2c>
	__asm volatile
 801b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b09a:	f383 8811 	msr	BASEPRI, r3
 801b09e:	f3bf 8f6f 	isb	sy
 801b0a2:	f3bf 8f4f 	dsb	sy
 801b0a6:	603b      	str	r3, [r7, #0]
}
 801b0a8:	bf00      	nop
 801b0aa:	e7fe      	b.n	801b0aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b0ac:	f001 f9fa 	bl	801c4a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b0b0:	4b39      	ldr	r3, [pc, #228]	; (801b198 <xTaskResumeAll+0x118>)
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	3b01      	subs	r3, #1
 801b0b6:	4a38      	ldr	r2, [pc, #224]	; (801b198 <xTaskResumeAll+0x118>)
 801b0b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b0ba:	4b37      	ldr	r3, [pc, #220]	; (801b198 <xTaskResumeAll+0x118>)
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d162      	bne.n	801b188 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b0c2:	4b36      	ldr	r3, [pc, #216]	; (801b19c <xTaskResumeAll+0x11c>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d05e      	beq.n	801b188 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b0ca:	e02f      	b.n	801b12c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b0cc:	4b34      	ldr	r3, [pc, #208]	; (801b1a0 <xTaskResumeAll+0x120>)
 801b0ce:	68db      	ldr	r3, [r3, #12]
 801b0d0:	68db      	ldr	r3, [r3, #12]
 801b0d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	3318      	adds	r3, #24
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f7ff f851 	bl	801a180 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	3304      	adds	r3, #4
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	f7ff f84c 	bl	801a180 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0ec:	4b2d      	ldr	r3, [pc, #180]	; (801b1a4 <xTaskResumeAll+0x124>)
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	429a      	cmp	r2, r3
 801b0f2:	d903      	bls.n	801b0fc <xTaskResumeAll+0x7c>
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0f8:	4a2a      	ldr	r2, [pc, #168]	; (801b1a4 <xTaskResumeAll+0x124>)
 801b0fa:	6013      	str	r3, [r2, #0]
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b100:	4613      	mov	r3, r2
 801b102:	009b      	lsls	r3, r3, #2
 801b104:	4413      	add	r3, r2
 801b106:	009b      	lsls	r3, r3, #2
 801b108:	4a27      	ldr	r2, [pc, #156]	; (801b1a8 <xTaskResumeAll+0x128>)
 801b10a:	441a      	add	r2, r3
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	3304      	adds	r3, #4
 801b110:	4619      	mov	r1, r3
 801b112:	4610      	mov	r0, r2
 801b114:	f7fe ffd7 	bl	801a0c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b11c:	4b23      	ldr	r3, [pc, #140]	; (801b1ac <xTaskResumeAll+0x12c>)
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b122:	429a      	cmp	r2, r3
 801b124:	d302      	bcc.n	801b12c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801b126:	4b22      	ldr	r3, [pc, #136]	; (801b1b0 <xTaskResumeAll+0x130>)
 801b128:	2201      	movs	r2, #1
 801b12a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b12c:	4b1c      	ldr	r3, [pc, #112]	; (801b1a0 <xTaskResumeAll+0x120>)
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d1cb      	bne.n	801b0cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d001      	beq.n	801b13e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b13a:	f000 fbfd 	bl	801b938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b13e:	4b1d      	ldr	r3, [pc, #116]	; (801b1b4 <xTaskResumeAll+0x134>)
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d010      	beq.n	801b16c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b14a:	f000 f847 	bl	801b1dc <xTaskIncrementTick>
 801b14e:	4603      	mov	r3, r0
 801b150:	2b00      	cmp	r3, #0
 801b152:	d002      	beq.n	801b15a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801b154:	4b16      	ldr	r3, [pc, #88]	; (801b1b0 <xTaskResumeAll+0x130>)
 801b156:	2201      	movs	r2, #1
 801b158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	3b01      	subs	r3, #1
 801b15e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d1f1      	bne.n	801b14a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801b166:	4b13      	ldr	r3, [pc, #76]	; (801b1b4 <xTaskResumeAll+0x134>)
 801b168:	2200      	movs	r2, #0
 801b16a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b16c:	4b10      	ldr	r3, [pc, #64]	; (801b1b0 <xTaskResumeAll+0x130>)
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d009      	beq.n	801b188 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b174:	2301      	movs	r3, #1
 801b176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b178:	4b0f      	ldr	r3, [pc, #60]	; (801b1b8 <xTaskResumeAll+0x138>)
 801b17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b17e:	601a      	str	r2, [r3, #0]
 801b180:	f3bf 8f4f 	dsb	sy
 801b184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b188:	f001 f9bc 	bl	801c504 <vPortExitCritical>

	return xAlreadyYielded;
 801b18c:	68bb      	ldr	r3, [r7, #8]
}
 801b18e:	4618      	mov	r0, r3
 801b190:	3710      	adds	r7, #16
 801b192:	46bd      	mov	sp, r7
 801b194:	bd80      	pop	{r7, pc}
 801b196:	bf00      	nop
 801b198:	2000be10 	.word	0x2000be10
 801b19c:	2000bde8 	.word	0x2000bde8
 801b1a0:	2000bda8 	.word	0x2000bda8
 801b1a4:	2000bdf0 	.word	0x2000bdf0
 801b1a8:	2000b918 	.word	0x2000b918
 801b1ac:	2000b914 	.word	0x2000b914
 801b1b0:	2000bdfc 	.word	0x2000bdfc
 801b1b4:	2000bdf8 	.word	0x2000bdf8
 801b1b8:	e000ed04 	.word	0xe000ed04

0801b1bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b1bc:	b480      	push	{r7}
 801b1be:	b083      	sub	sp, #12
 801b1c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b1c2:	4b05      	ldr	r3, [pc, #20]	; (801b1d8 <xTaskGetTickCount+0x1c>)
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b1c8:	687b      	ldr	r3, [r7, #4]
}
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	370c      	adds	r7, #12
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d4:	4770      	bx	lr
 801b1d6:	bf00      	nop
 801b1d8:	2000bdec 	.word	0x2000bdec

0801b1dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b086      	sub	sp, #24
 801b1e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b1e2:	2300      	movs	r3, #0
 801b1e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b1e6:	4b4f      	ldr	r3, [pc, #316]	; (801b324 <xTaskIncrementTick+0x148>)
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	f040 808f 	bne.w	801b30e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b1f0:	4b4d      	ldr	r3, [pc, #308]	; (801b328 <xTaskIncrementTick+0x14c>)
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	3301      	adds	r3, #1
 801b1f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b1f8:	4a4b      	ldr	r2, [pc, #300]	; (801b328 <xTaskIncrementTick+0x14c>)
 801b1fa:	693b      	ldr	r3, [r7, #16]
 801b1fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b1fe:	693b      	ldr	r3, [r7, #16]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d120      	bne.n	801b246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801b204:	4b49      	ldr	r3, [pc, #292]	; (801b32c <xTaskIncrementTick+0x150>)
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d00a      	beq.n	801b224 <xTaskIncrementTick+0x48>
	__asm volatile
 801b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b212:	f383 8811 	msr	BASEPRI, r3
 801b216:	f3bf 8f6f 	isb	sy
 801b21a:	f3bf 8f4f 	dsb	sy
 801b21e:	603b      	str	r3, [r7, #0]
}
 801b220:	bf00      	nop
 801b222:	e7fe      	b.n	801b222 <xTaskIncrementTick+0x46>
 801b224:	4b41      	ldr	r3, [pc, #260]	; (801b32c <xTaskIncrementTick+0x150>)
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	60fb      	str	r3, [r7, #12]
 801b22a:	4b41      	ldr	r3, [pc, #260]	; (801b330 <xTaskIncrementTick+0x154>)
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	4a3f      	ldr	r2, [pc, #252]	; (801b32c <xTaskIncrementTick+0x150>)
 801b230:	6013      	str	r3, [r2, #0]
 801b232:	4a3f      	ldr	r2, [pc, #252]	; (801b330 <xTaskIncrementTick+0x154>)
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	6013      	str	r3, [r2, #0]
 801b238:	4b3e      	ldr	r3, [pc, #248]	; (801b334 <xTaskIncrementTick+0x158>)
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	3301      	adds	r3, #1
 801b23e:	4a3d      	ldr	r2, [pc, #244]	; (801b334 <xTaskIncrementTick+0x158>)
 801b240:	6013      	str	r3, [r2, #0]
 801b242:	f000 fb79 	bl	801b938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b246:	4b3c      	ldr	r3, [pc, #240]	; (801b338 <xTaskIncrementTick+0x15c>)
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	693a      	ldr	r2, [r7, #16]
 801b24c:	429a      	cmp	r2, r3
 801b24e:	d349      	bcc.n	801b2e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b250:	4b36      	ldr	r3, [pc, #216]	; (801b32c <xTaskIncrementTick+0x150>)
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d104      	bne.n	801b264 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b25a:	4b37      	ldr	r3, [pc, #220]	; (801b338 <xTaskIncrementTick+0x15c>)
 801b25c:	f04f 32ff 	mov.w	r2, #4294967295
 801b260:	601a      	str	r2, [r3, #0]
					break;
 801b262:	e03f      	b.n	801b2e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b264:	4b31      	ldr	r3, [pc, #196]	; (801b32c <xTaskIncrementTick+0x150>)
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	68db      	ldr	r3, [r3, #12]
 801b26a:	68db      	ldr	r3, [r3, #12]
 801b26c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	685b      	ldr	r3, [r3, #4]
 801b272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b274:	693a      	ldr	r2, [r7, #16]
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	429a      	cmp	r2, r3
 801b27a:	d203      	bcs.n	801b284 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b27c:	4a2e      	ldr	r2, [pc, #184]	; (801b338 <xTaskIncrementTick+0x15c>)
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b282:	e02f      	b.n	801b2e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	3304      	adds	r3, #4
 801b288:	4618      	mov	r0, r3
 801b28a:	f7fe ff79 	bl	801a180 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b28e:	68bb      	ldr	r3, [r7, #8]
 801b290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b292:	2b00      	cmp	r3, #0
 801b294:	d004      	beq.n	801b2a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b296:	68bb      	ldr	r3, [r7, #8]
 801b298:	3318      	adds	r3, #24
 801b29a:	4618      	mov	r0, r3
 801b29c:	f7fe ff70 	bl	801a180 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b2a0:	68bb      	ldr	r3, [r7, #8]
 801b2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2a4:	4b25      	ldr	r3, [pc, #148]	; (801b33c <xTaskIncrementTick+0x160>)
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	429a      	cmp	r2, r3
 801b2aa:	d903      	bls.n	801b2b4 <xTaskIncrementTick+0xd8>
 801b2ac:	68bb      	ldr	r3, [r7, #8]
 801b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2b0:	4a22      	ldr	r2, [pc, #136]	; (801b33c <xTaskIncrementTick+0x160>)
 801b2b2:	6013      	str	r3, [r2, #0]
 801b2b4:	68bb      	ldr	r3, [r7, #8]
 801b2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2b8:	4613      	mov	r3, r2
 801b2ba:	009b      	lsls	r3, r3, #2
 801b2bc:	4413      	add	r3, r2
 801b2be:	009b      	lsls	r3, r3, #2
 801b2c0:	4a1f      	ldr	r2, [pc, #124]	; (801b340 <xTaskIncrementTick+0x164>)
 801b2c2:	441a      	add	r2, r3
 801b2c4:	68bb      	ldr	r3, [r7, #8]
 801b2c6:	3304      	adds	r3, #4
 801b2c8:	4619      	mov	r1, r3
 801b2ca:	4610      	mov	r0, r2
 801b2cc:	f7fe fefb 	bl	801a0c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2d4:	4b1b      	ldr	r3, [pc, #108]	; (801b344 <xTaskIncrementTick+0x168>)
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2da:	429a      	cmp	r2, r3
 801b2dc:	d3b8      	bcc.n	801b250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801b2de:	2301      	movs	r3, #1
 801b2e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b2e2:	e7b5      	b.n	801b250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b2e4:	4b17      	ldr	r3, [pc, #92]	; (801b344 <xTaskIncrementTick+0x168>)
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2ea:	4915      	ldr	r1, [pc, #84]	; (801b340 <xTaskIncrementTick+0x164>)
 801b2ec:	4613      	mov	r3, r2
 801b2ee:	009b      	lsls	r3, r3, #2
 801b2f0:	4413      	add	r3, r2
 801b2f2:	009b      	lsls	r3, r3, #2
 801b2f4:	440b      	add	r3, r1
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	2b01      	cmp	r3, #1
 801b2fa:	d901      	bls.n	801b300 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801b2fc:	2301      	movs	r3, #1
 801b2fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b300:	4b11      	ldr	r3, [pc, #68]	; (801b348 <xTaskIncrementTick+0x16c>)
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d007      	beq.n	801b318 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801b308:	2301      	movs	r3, #1
 801b30a:	617b      	str	r3, [r7, #20]
 801b30c:	e004      	b.n	801b318 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b30e:	4b0f      	ldr	r3, [pc, #60]	; (801b34c <xTaskIncrementTick+0x170>)
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	3301      	adds	r3, #1
 801b314:	4a0d      	ldr	r2, [pc, #52]	; (801b34c <xTaskIncrementTick+0x170>)
 801b316:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b318:	697b      	ldr	r3, [r7, #20]
}
 801b31a:	4618      	mov	r0, r3
 801b31c:	3718      	adds	r7, #24
 801b31e:	46bd      	mov	sp, r7
 801b320:	bd80      	pop	{r7, pc}
 801b322:	bf00      	nop
 801b324:	2000be10 	.word	0x2000be10
 801b328:	2000bdec 	.word	0x2000bdec
 801b32c:	2000bda0 	.word	0x2000bda0
 801b330:	2000bda4 	.word	0x2000bda4
 801b334:	2000be00 	.word	0x2000be00
 801b338:	2000be08 	.word	0x2000be08
 801b33c:	2000bdf0 	.word	0x2000bdf0
 801b340:	2000b918 	.word	0x2000b918
 801b344:	2000b914 	.word	0x2000b914
 801b348:	2000bdfc 	.word	0x2000bdfc
 801b34c:	2000bdf8 	.word	0x2000bdf8

0801b350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b350:	b480      	push	{r7}
 801b352:	b085      	sub	sp, #20
 801b354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b356:	4b2a      	ldr	r3, [pc, #168]	; (801b400 <vTaskSwitchContext+0xb0>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d003      	beq.n	801b366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b35e:	4b29      	ldr	r3, [pc, #164]	; (801b404 <vTaskSwitchContext+0xb4>)
 801b360:	2201      	movs	r2, #1
 801b362:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b364:	e046      	b.n	801b3f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801b366:	4b27      	ldr	r3, [pc, #156]	; (801b404 <vTaskSwitchContext+0xb4>)
 801b368:	2200      	movs	r2, #0
 801b36a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b36c:	4b26      	ldr	r3, [pc, #152]	; (801b408 <vTaskSwitchContext+0xb8>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	60fb      	str	r3, [r7, #12]
 801b372:	e010      	b.n	801b396 <vTaskSwitchContext+0x46>
 801b374:	68fb      	ldr	r3, [r7, #12]
 801b376:	2b00      	cmp	r3, #0
 801b378:	d10a      	bne.n	801b390 <vTaskSwitchContext+0x40>
	__asm volatile
 801b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b37e:	f383 8811 	msr	BASEPRI, r3
 801b382:	f3bf 8f6f 	isb	sy
 801b386:	f3bf 8f4f 	dsb	sy
 801b38a:	607b      	str	r3, [r7, #4]
}
 801b38c:	bf00      	nop
 801b38e:	e7fe      	b.n	801b38e <vTaskSwitchContext+0x3e>
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	3b01      	subs	r3, #1
 801b394:	60fb      	str	r3, [r7, #12]
 801b396:	491d      	ldr	r1, [pc, #116]	; (801b40c <vTaskSwitchContext+0xbc>)
 801b398:	68fa      	ldr	r2, [r7, #12]
 801b39a:	4613      	mov	r3, r2
 801b39c:	009b      	lsls	r3, r3, #2
 801b39e:	4413      	add	r3, r2
 801b3a0:	009b      	lsls	r3, r3, #2
 801b3a2:	440b      	add	r3, r1
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d0e4      	beq.n	801b374 <vTaskSwitchContext+0x24>
 801b3aa:	68fa      	ldr	r2, [r7, #12]
 801b3ac:	4613      	mov	r3, r2
 801b3ae:	009b      	lsls	r3, r3, #2
 801b3b0:	4413      	add	r3, r2
 801b3b2:	009b      	lsls	r3, r3, #2
 801b3b4:	4a15      	ldr	r2, [pc, #84]	; (801b40c <vTaskSwitchContext+0xbc>)
 801b3b6:	4413      	add	r3, r2
 801b3b8:	60bb      	str	r3, [r7, #8]
 801b3ba:	68bb      	ldr	r3, [r7, #8]
 801b3bc:	685b      	ldr	r3, [r3, #4]
 801b3be:	685a      	ldr	r2, [r3, #4]
 801b3c0:	68bb      	ldr	r3, [r7, #8]
 801b3c2:	605a      	str	r2, [r3, #4]
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	685a      	ldr	r2, [r3, #4]
 801b3c8:	68bb      	ldr	r3, [r7, #8]
 801b3ca:	3308      	adds	r3, #8
 801b3cc:	429a      	cmp	r2, r3
 801b3ce:	d104      	bne.n	801b3da <vTaskSwitchContext+0x8a>
 801b3d0:	68bb      	ldr	r3, [r7, #8]
 801b3d2:	685b      	ldr	r3, [r3, #4]
 801b3d4:	685a      	ldr	r2, [r3, #4]
 801b3d6:	68bb      	ldr	r3, [r7, #8]
 801b3d8:	605a      	str	r2, [r3, #4]
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	685b      	ldr	r3, [r3, #4]
 801b3de:	68db      	ldr	r3, [r3, #12]
 801b3e0:	4a0b      	ldr	r2, [pc, #44]	; (801b410 <vTaskSwitchContext+0xc0>)
 801b3e2:	6013      	str	r3, [r2, #0]
 801b3e4:	4a08      	ldr	r2, [pc, #32]	; (801b408 <vTaskSwitchContext+0xb8>)
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b3ea:	4b09      	ldr	r3, [pc, #36]	; (801b410 <vTaskSwitchContext+0xc0>)
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	3354      	adds	r3, #84	; 0x54
 801b3f0:	4a08      	ldr	r2, [pc, #32]	; (801b414 <vTaskSwitchContext+0xc4>)
 801b3f2:	6013      	str	r3, [r2, #0]
}
 801b3f4:	bf00      	nop
 801b3f6:	3714      	adds	r7, #20
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3fe:	4770      	bx	lr
 801b400:	2000be10 	.word	0x2000be10
 801b404:	2000bdfc 	.word	0x2000bdfc
 801b408:	2000bdf0 	.word	0x2000bdf0
 801b40c:	2000b918 	.word	0x2000b918
 801b410:	2000b914 	.word	0x2000b914
 801b414:	20000330 	.word	0x20000330

0801b418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b084      	sub	sp, #16
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
 801b420:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d10a      	bne.n	801b43e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b42c:	f383 8811 	msr	BASEPRI, r3
 801b430:	f3bf 8f6f 	isb	sy
 801b434:	f3bf 8f4f 	dsb	sy
 801b438:	60fb      	str	r3, [r7, #12]
}
 801b43a:	bf00      	nop
 801b43c:	e7fe      	b.n	801b43c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b43e:	4b07      	ldr	r3, [pc, #28]	; (801b45c <vTaskPlaceOnEventList+0x44>)
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	3318      	adds	r3, #24
 801b444:	4619      	mov	r1, r3
 801b446:	6878      	ldr	r0, [r7, #4]
 801b448:	f7fe fe61 	bl	801a10e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b44c:	2101      	movs	r1, #1
 801b44e:	6838      	ldr	r0, [r7, #0]
 801b450:	f000 fb36 	bl	801bac0 <prvAddCurrentTaskToDelayedList>
}
 801b454:	bf00      	nop
 801b456:	3710      	adds	r7, #16
 801b458:	46bd      	mov	sp, r7
 801b45a:	bd80      	pop	{r7, pc}
 801b45c:	2000b914 	.word	0x2000b914

0801b460 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b086      	sub	sp, #24
 801b464:	af00      	add	r7, sp, #0
 801b466:	60f8      	str	r0, [r7, #12]
 801b468:	60b9      	str	r1, [r7, #8]
 801b46a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d10a      	bne.n	801b488 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b476:	f383 8811 	msr	BASEPRI, r3
 801b47a:	f3bf 8f6f 	isb	sy
 801b47e:	f3bf 8f4f 	dsb	sy
 801b482:	617b      	str	r3, [r7, #20]
}
 801b484:	bf00      	nop
 801b486:	e7fe      	b.n	801b486 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801b488:	4b11      	ldr	r3, [pc, #68]	; (801b4d0 <vTaskPlaceOnUnorderedEventList+0x70>)
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d10a      	bne.n	801b4a6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801b490:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b494:	f383 8811 	msr	BASEPRI, r3
 801b498:	f3bf 8f6f 	isb	sy
 801b49c:	f3bf 8f4f 	dsb	sy
 801b4a0:	613b      	str	r3, [r7, #16]
}
 801b4a2:	bf00      	nop
 801b4a4:	e7fe      	b.n	801b4a4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801b4a6:	4b0b      	ldr	r3, [pc, #44]	; (801b4d4 <vTaskPlaceOnUnorderedEventList+0x74>)
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	68ba      	ldr	r2, [r7, #8]
 801b4ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801b4b0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b4b2:	4b08      	ldr	r3, [pc, #32]	; (801b4d4 <vTaskPlaceOnUnorderedEventList+0x74>)
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	3318      	adds	r3, #24
 801b4b8:	4619      	mov	r1, r3
 801b4ba:	68f8      	ldr	r0, [r7, #12]
 801b4bc:	f7fe fe03 	bl	801a0c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b4c0:	2101      	movs	r1, #1
 801b4c2:	6878      	ldr	r0, [r7, #4]
 801b4c4:	f000 fafc 	bl	801bac0 <prvAddCurrentTaskToDelayedList>
}
 801b4c8:	bf00      	nop
 801b4ca:	3718      	adds	r7, #24
 801b4cc:	46bd      	mov	sp, r7
 801b4ce:	bd80      	pop	{r7, pc}
 801b4d0:	2000be10 	.word	0x2000be10
 801b4d4:	2000b914 	.word	0x2000b914

0801b4d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b086      	sub	sp, #24
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	60f8      	str	r0, [r7, #12]
 801b4e0:	60b9      	str	r1, [r7, #8]
 801b4e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d10a      	bne.n	801b500 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4ee:	f383 8811 	msr	BASEPRI, r3
 801b4f2:	f3bf 8f6f 	isb	sy
 801b4f6:	f3bf 8f4f 	dsb	sy
 801b4fa:	617b      	str	r3, [r7, #20]
}
 801b4fc:	bf00      	nop
 801b4fe:	e7fe      	b.n	801b4fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b500:	4b0a      	ldr	r3, [pc, #40]	; (801b52c <vTaskPlaceOnEventListRestricted+0x54>)
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	3318      	adds	r3, #24
 801b506:	4619      	mov	r1, r3
 801b508:	68f8      	ldr	r0, [r7, #12]
 801b50a:	f7fe fddc 	bl	801a0c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d002      	beq.n	801b51a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801b514:	f04f 33ff 	mov.w	r3, #4294967295
 801b518:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b51a:	6879      	ldr	r1, [r7, #4]
 801b51c:	68b8      	ldr	r0, [r7, #8]
 801b51e:	f000 facf 	bl	801bac0 <prvAddCurrentTaskToDelayedList>
	}
 801b522:	bf00      	nop
 801b524:	3718      	adds	r7, #24
 801b526:	46bd      	mov	sp, r7
 801b528:	bd80      	pop	{r7, pc}
 801b52a:	bf00      	nop
 801b52c:	2000b914 	.word	0x2000b914

0801b530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b530:	b580      	push	{r7, lr}
 801b532:	b086      	sub	sp, #24
 801b534:	af00      	add	r7, sp, #0
 801b536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	68db      	ldr	r3, [r3, #12]
 801b53c:	68db      	ldr	r3, [r3, #12]
 801b53e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b540:	693b      	ldr	r3, [r7, #16]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d10a      	bne.n	801b55c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b54a:	f383 8811 	msr	BASEPRI, r3
 801b54e:	f3bf 8f6f 	isb	sy
 801b552:	f3bf 8f4f 	dsb	sy
 801b556:	60fb      	str	r3, [r7, #12]
}
 801b558:	bf00      	nop
 801b55a:	e7fe      	b.n	801b55a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b55c:	693b      	ldr	r3, [r7, #16]
 801b55e:	3318      	adds	r3, #24
 801b560:	4618      	mov	r0, r3
 801b562:	f7fe fe0d 	bl	801a180 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b566:	4b1e      	ldr	r3, [pc, #120]	; (801b5e0 <xTaskRemoveFromEventList+0xb0>)
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d11d      	bne.n	801b5aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b56e:	693b      	ldr	r3, [r7, #16]
 801b570:	3304      	adds	r3, #4
 801b572:	4618      	mov	r0, r3
 801b574:	f7fe fe04 	bl	801a180 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b578:	693b      	ldr	r3, [r7, #16]
 801b57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b57c:	4b19      	ldr	r3, [pc, #100]	; (801b5e4 <xTaskRemoveFromEventList+0xb4>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	429a      	cmp	r2, r3
 801b582:	d903      	bls.n	801b58c <xTaskRemoveFromEventList+0x5c>
 801b584:	693b      	ldr	r3, [r7, #16]
 801b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b588:	4a16      	ldr	r2, [pc, #88]	; (801b5e4 <xTaskRemoveFromEventList+0xb4>)
 801b58a:	6013      	str	r3, [r2, #0]
 801b58c:	693b      	ldr	r3, [r7, #16]
 801b58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b590:	4613      	mov	r3, r2
 801b592:	009b      	lsls	r3, r3, #2
 801b594:	4413      	add	r3, r2
 801b596:	009b      	lsls	r3, r3, #2
 801b598:	4a13      	ldr	r2, [pc, #76]	; (801b5e8 <xTaskRemoveFromEventList+0xb8>)
 801b59a:	441a      	add	r2, r3
 801b59c:	693b      	ldr	r3, [r7, #16]
 801b59e:	3304      	adds	r3, #4
 801b5a0:	4619      	mov	r1, r3
 801b5a2:	4610      	mov	r0, r2
 801b5a4:	f7fe fd8f 	bl	801a0c6 <vListInsertEnd>
 801b5a8:	e005      	b.n	801b5b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b5aa:	693b      	ldr	r3, [r7, #16]
 801b5ac:	3318      	adds	r3, #24
 801b5ae:	4619      	mov	r1, r3
 801b5b0:	480e      	ldr	r0, [pc, #56]	; (801b5ec <xTaskRemoveFromEventList+0xbc>)
 801b5b2:	f7fe fd88 	bl	801a0c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b5b6:	693b      	ldr	r3, [r7, #16]
 801b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b5ba:	4b0d      	ldr	r3, [pc, #52]	; (801b5f0 <xTaskRemoveFromEventList+0xc0>)
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5c0:	429a      	cmp	r2, r3
 801b5c2:	d905      	bls.n	801b5d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b5c4:	2301      	movs	r3, #1
 801b5c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b5c8:	4b0a      	ldr	r3, [pc, #40]	; (801b5f4 <xTaskRemoveFromEventList+0xc4>)
 801b5ca:	2201      	movs	r2, #1
 801b5cc:	601a      	str	r2, [r3, #0]
 801b5ce:	e001      	b.n	801b5d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b5d4:	697b      	ldr	r3, [r7, #20]
}
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	3718      	adds	r7, #24
 801b5da:	46bd      	mov	sp, r7
 801b5dc:	bd80      	pop	{r7, pc}
 801b5de:	bf00      	nop
 801b5e0:	2000be10 	.word	0x2000be10
 801b5e4:	2000bdf0 	.word	0x2000bdf0
 801b5e8:	2000b918 	.word	0x2000b918
 801b5ec:	2000bda8 	.word	0x2000bda8
 801b5f0:	2000b914 	.word	0x2000b914
 801b5f4:	2000bdfc 	.word	0x2000bdfc

0801b5f8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b086      	sub	sp, #24
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
 801b600:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801b602:	4b29      	ldr	r3, [pc, #164]	; (801b6a8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d10a      	bne.n	801b620 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b60e:	f383 8811 	msr	BASEPRI, r3
 801b612:	f3bf 8f6f 	isb	sy
 801b616:	f3bf 8f4f 	dsb	sy
 801b61a:	613b      	str	r3, [r7, #16]
}
 801b61c:	bf00      	nop
 801b61e:	e7fe      	b.n	801b61e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801b620:	683b      	ldr	r3, [r7, #0]
 801b622:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	68db      	ldr	r3, [r3, #12]
 801b62e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801b630:	697b      	ldr	r3, [r7, #20]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d10a      	bne.n	801b64c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b63a:	f383 8811 	msr	BASEPRI, r3
 801b63e:	f3bf 8f6f 	isb	sy
 801b642:	f3bf 8f4f 	dsb	sy
 801b646:	60fb      	str	r3, [r7, #12]
}
 801b648:	bf00      	nop
 801b64a:	e7fe      	b.n	801b64a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801b64c:	6878      	ldr	r0, [r7, #4]
 801b64e:	f7fe fd97 	bl	801a180 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b652:	697b      	ldr	r3, [r7, #20]
 801b654:	3304      	adds	r3, #4
 801b656:	4618      	mov	r0, r3
 801b658:	f7fe fd92 	bl	801a180 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801b65c:	697b      	ldr	r3, [r7, #20]
 801b65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b660:	4b12      	ldr	r3, [pc, #72]	; (801b6ac <vTaskRemoveFromUnorderedEventList+0xb4>)
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	429a      	cmp	r2, r3
 801b666:	d903      	bls.n	801b670 <vTaskRemoveFromUnorderedEventList+0x78>
 801b668:	697b      	ldr	r3, [r7, #20]
 801b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b66c:	4a0f      	ldr	r2, [pc, #60]	; (801b6ac <vTaskRemoveFromUnorderedEventList+0xb4>)
 801b66e:	6013      	str	r3, [r2, #0]
 801b670:	697b      	ldr	r3, [r7, #20]
 801b672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b674:	4613      	mov	r3, r2
 801b676:	009b      	lsls	r3, r3, #2
 801b678:	4413      	add	r3, r2
 801b67a:	009b      	lsls	r3, r3, #2
 801b67c:	4a0c      	ldr	r2, [pc, #48]	; (801b6b0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801b67e:	441a      	add	r2, r3
 801b680:	697b      	ldr	r3, [r7, #20]
 801b682:	3304      	adds	r3, #4
 801b684:	4619      	mov	r1, r3
 801b686:	4610      	mov	r0, r2
 801b688:	f7fe fd1d 	bl	801a0c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b68c:	697b      	ldr	r3, [r7, #20]
 801b68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b690:	4b08      	ldr	r3, [pc, #32]	; (801b6b4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b696:	429a      	cmp	r2, r3
 801b698:	d902      	bls.n	801b6a0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801b69a:	4b07      	ldr	r3, [pc, #28]	; (801b6b8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801b69c:	2201      	movs	r2, #1
 801b69e:	601a      	str	r2, [r3, #0]
	}
}
 801b6a0:	bf00      	nop
 801b6a2:	3718      	adds	r7, #24
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}
 801b6a8:	2000be10 	.word	0x2000be10
 801b6ac:	2000bdf0 	.word	0x2000bdf0
 801b6b0:	2000b918 	.word	0x2000b918
 801b6b4:	2000b914 	.word	0x2000b914
 801b6b8:	2000bdfc 	.word	0x2000bdfc

0801b6bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b6bc:	b480      	push	{r7}
 801b6be:	b083      	sub	sp, #12
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b6c4:	4b06      	ldr	r3, [pc, #24]	; (801b6e0 <vTaskInternalSetTimeOutState+0x24>)
 801b6c6:	681a      	ldr	r2, [r3, #0]
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b6cc:	4b05      	ldr	r3, [pc, #20]	; (801b6e4 <vTaskInternalSetTimeOutState+0x28>)
 801b6ce:	681a      	ldr	r2, [r3, #0]
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	605a      	str	r2, [r3, #4]
}
 801b6d4:	bf00      	nop
 801b6d6:	370c      	adds	r7, #12
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6de:	4770      	bx	lr
 801b6e0:	2000be00 	.word	0x2000be00
 801b6e4:	2000bdec 	.word	0x2000bdec

0801b6e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b088      	sub	sp, #32
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	6078      	str	r0, [r7, #4]
 801b6f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d10a      	bne.n	801b70e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6fc:	f383 8811 	msr	BASEPRI, r3
 801b700:	f3bf 8f6f 	isb	sy
 801b704:	f3bf 8f4f 	dsb	sy
 801b708:	613b      	str	r3, [r7, #16]
}
 801b70a:	bf00      	nop
 801b70c:	e7fe      	b.n	801b70c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b70e:	683b      	ldr	r3, [r7, #0]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d10a      	bne.n	801b72a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b714:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b718:	f383 8811 	msr	BASEPRI, r3
 801b71c:	f3bf 8f6f 	isb	sy
 801b720:	f3bf 8f4f 	dsb	sy
 801b724:	60fb      	str	r3, [r7, #12]
}
 801b726:	bf00      	nop
 801b728:	e7fe      	b.n	801b728 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b72a:	f000 febb 	bl	801c4a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b72e:	4b1d      	ldr	r3, [pc, #116]	; (801b7a4 <xTaskCheckForTimeOut+0xbc>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	685b      	ldr	r3, [r3, #4]
 801b738:	69ba      	ldr	r2, [r7, #24]
 801b73a:	1ad3      	subs	r3, r2, r3
 801b73c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b746:	d102      	bne.n	801b74e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b748:	2300      	movs	r3, #0
 801b74a:	61fb      	str	r3, [r7, #28]
 801b74c:	e023      	b.n	801b796 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	681a      	ldr	r2, [r3, #0]
 801b752:	4b15      	ldr	r3, [pc, #84]	; (801b7a8 <xTaskCheckForTimeOut+0xc0>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	429a      	cmp	r2, r3
 801b758:	d007      	beq.n	801b76a <xTaskCheckForTimeOut+0x82>
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	685b      	ldr	r3, [r3, #4]
 801b75e:	69ba      	ldr	r2, [r7, #24]
 801b760:	429a      	cmp	r2, r3
 801b762:	d302      	bcc.n	801b76a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b764:	2301      	movs	r3, #1
 801b766:	61fb      	str	r3, [r7, #28]
 801b768:	e015      	b.n	801b796 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	697a      	ldr	r2, [r7, #20]
 801b770:	429a      	cmp	r2, r3
 801b772:	d20b      	bcs.n	801b78c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b774:	683b      	ldr	r3, [r7, #0]
 801b776:	681a      	ldr	r2, [r3, #0]
 801b778:	697b      	ldr	r3, [r7, #20]
 801b77a:	1ad2      	subs	r2, r2, r3
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	f7ff ff9b 	bl	801b6bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b786:	2300      	movs	r3, #0
 801b788:	61fb      	str	r3, [r7, #28]
 801b78a:	e004      	b.n	801b796 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b78c:	683b      	ldr	r3, [r7, #0]
 801b78e:	2200      	movs	r2, #0
 801b790:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b792:	2301      	movs	r3, #1
 801b794:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b796:	f000 feb5 	bl	801c504 <vPortExitCritical>

	return xReturn;
 801b79a:	69fb      	ldr	r3, [r7, #28]
}
 801b79c:	4618      	mov	r0, r3
 801b79e:	3720      	adds	r7, #32
 801b7a0:	46bd      	mov	sp, r7
 801b7a2:	bd80      	pop	{r7, pc}
 801b7a4:	2000bdec 	.word	0x2000bdec
 801b7a8:	2000be00 	.word	0x2000be00

0801b7ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b7ac:	b480      	push	{r7}
 801b7ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b7b0:	4b03      	ldr	r3, [pc, #12]	; (801b7c0 <vTaskMissedYield+0x14>)
 801b7b2:	2201      	movs	r2, #1
 801b7b4:	601a      	str	r2, [r3, #0]
}
 801b7b6:	bf00      	nop
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7be:	4770      	bx	lr
 801b7c0:	2000bdfc 	.word	0x2000bdfc

0801b7c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b082      	sub	sp, #8
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b7cc:	f000 f852 	bl	801b874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b7d0:	4b06      	ldr	r3, [pc, #24]	; (801b7ec <prvIdleTask+0x28>)
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	2b01      	cmp	r3, #1
 801b7d6:	d9f9      	bls.n	801b7cc <prvIdleTask+0x8>
			{
				taskYIELD();
 801b7d8:	4b05      	ldr	r3, [pc, #20]	; (801b7f0 <prvIdleTask+0x2c>)
 801b7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b7de:	601a      	str	r2, [r3, #0]
 801b7e0:	f3bf 8f4f 	dsb	sy
 801b7e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b7e8:	e7f0      	b.n	801b7cc <prvIdleTask+0x8>
 801b7ea:	bf00      	nop
 801b7ec:	2000b918 	.word	0x2000b918
 801b7f0:	e000ed04 	.word	0xe000ed04

0801b7f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b082      	sub	sp, #8
 801b7f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	607b      	str	r3, [r7, #4]
 801b7fe:	e00c      	b.n	801b81a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b800:	687a      	ldr	r2, [r7, #4]
 801b802:	4613      	mov	r3, r2
 801b804:	009b      	lsls	r3, r3, #2
 801b806:	4413      	add	r3, r2
 801b808:	009b      	lsls	r3, r3, #2
 801b80a:	4a12      	ldr	r2, [pc, #72]	; (801b854 <prvInitialiseTaskLists+0x60>)
 801b80c:	4413      	add	r3, r2
 801b80e:	4618      	mov	r0, r3
 801b810:	f7fe fc2c 	bl	801a06c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	3301      	adds	r3, #1
 801b818:	607b      	str	r3, [r7, #4]
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	2b37      	cmp	r3, #55	; 0x37
 801b81e:	d9ef      	bls.n	801b800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b820:	480d      	ldr	r0, [pc, #52]	; (801b858 <prvInitialiseTaskLists+0x64>)
 801b822:	f7fe fc23 	bl	801a06c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b826:	480d      	ldr	r0, [pc, #52]	; (801b85c <prvInitialiseTaskLists+0x68>)
 801b828:	f7fe fc20 	bl	801a06c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b82c:	480c      	ldr	r0, [pc, #48]	; (801b860 <prvInitialiseTaskLists+0x6c>)
 801b82e:	f7fe fc1d 	bl	801a06c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b832:	480c      	ldr	r0, [pc, #48]	; (801b864 <prvInitialiseTaskLists+0x70>)
 801b834:	f7fe fc1a 	bl	801a06c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b838:	480b      	ldr	r0, [pc, #44]	; (801b868 <prvInitialiseTaskLists+0x74>)
 801b83a:	f7fe fc17 	bl	801a06c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b83e:	4b0b      	ldr	r3, [pc, #44]	; (801b86c <prvInitialiseTaskLists+0x78>)
 801b840:	4a05      	ldr	r2, [pc, #20]	; (801b858 <prvInitialiseTaskLists+0x64>)
 801b842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b844:	4b0a      	ldr	r3, [pc, #40]	; (801b870 <prvInitialiseTaskLists+0x7c>)
 801b846:	4a05      	ldr	r2, [pc, #20]	; (801b85c <prvInitialiseTaskLists+0x68>)
 801b848:	601a      	str	r2, [r3, #0]
}
 801b84a:	bf00      	nop
 801b84c:	3708      	adds	r7, #8
 801b84e:	46bd      	mov	sp, r7
 801b850:	bd80      	pop	{r7, pc}
 801b852:	bf00      	nop
 801b854:	2000b918 	.word	0x2000b918
 801b858:	2000bd78 	.word	0x2000bd78
 801b85c:	2000bd8c 	.word	0x2000bd8c
 801b860:	2000bda8 	.word	0x2000bda8
 801b864:	2000bdbc 	.word	0x2000bdbc
 801b868:	2000bdd4 	.word	0x2000bdd4
 801b86c:	2000bda0 	.word	0x2000bda0
 801b870:	2000bda4 	.word	0x2000bda4

0801b874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b874:	b580      	push	{r7, lr}
 801b876:	b082      	sub	sp, #8
 801b878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b87a:	e019      	b.n	801b8b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b87c:	f000 fe12 	bl	801c4a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b880:	4b10      	ldr	r3, [pc, #64]	; (801b8c4 <prvCheckTasksWaitingTermination+0x50>)
 801b882:	68db      	ldr	r3, [r3, #12]
 801b884:	68db      	ldr	r3, [r3, #12]
 801b886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	3304      	adds	r3, #4
 801b88c:	4618      	mov	r0, r3
 801b88e:	f7fe fc77 	bl	801a180 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b892:	4b0d      	ldr	r3, [pc, #52]	; (801b8c8 <prvCheckTasksWaitingTermination+0x54>)
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	3b01      	subs	r3, #1
 801b898:	4a0b      	ldr	r2, [pc, #44]	; (801b8c8 <prvCheckTasksWaitingTermination+0x54>)
 801b89a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b89c:	4b0b      	ldr	r3, [pc, #44]	; (801b8cc <prvCheckTasksWaitingTermination+0x58>)
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	3b01      	subs	r3, #1
 801b8a2:	4a0a      	ldr	r2, [pc, #40]	; (801b8cc <prvCheckTasksWaitingTermination+0x58>)
 801b8a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b8a6:	f000 fe2d 	bl	801c504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b8aa:	6878      	ldr	r0, [r7, #4]
 801b8ac:	f000 f810 	bl	801b8d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b8b0:	4b06      	ldr	r3, [pc, #24]	; (801b8cc <prvCheckTasksWaitingTermination+0x58>)
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d1e1      	bne.n	801b87c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b8b8:	bf00      	nop
 801b8ba:	bf00      	nop
 801b8bc:	3708      	adds	r7, #8
 801b8be:	46bd      	mov	sp, r7
 801b8c0:	bd80      	pop	{r7, pc}
 801b8c2:	bf00      	nop
 801b8c4:	2000bdbc 	.word	0x2000bdbc
 801b8c8:	2000bde8 	.word	0x2000bde8
 801b8cc:	2000bdd0 	.word	0x2000bdd0

0801b8d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b8d0:	b580      	push	{r7, lr}
 801b8d2:	b084      	sub	sp, #16
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	3354      	adds	r3, #84	; 0x54
 801b8dc:	4618      	mov	r0, r3
 801b8de:	f003 fe11 	bl	801f504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d108      	bne.n	801b8fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	f000 ffc5 	bl	801c880 <vPortFree>
				vPortFree( pxTCB );
 801b8f6:	6878      	ldr	r0, [r7, #4]
 801b8f8:	f000 ffc2 	bl	801c880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b8fc:	e018      	b.n	801b930 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801b904:	2b01      	cmp	r3, #1
 801b906:	d103      	bne.n	801b910 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b908:	6878      	ldr	r0, [r7, #4]
 801b90a:	f000 ffb9 	bl	801c880 <vPortFree>
	}
 801b90e:	e00f      	b.n	801b930 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801b916:	2b02      	cmp	r3, #2
 801b918:	d00a      	beq.n	801b930 <prvDeleteTCB+0x60>
	__asm volatile
 801b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b91e:	f383 8811 	msr	BASEPRI, r3
 801b922:	f3bf 8f6f 	isb	sy
 801b926:	f3bf 8f4f 	dsb	sy
 801b92a:	60fb      	str	r3, [r7, #12]
}
 801b92c:	bf00      	nop
 801b92e:	e7fe      	b.n	801b92e <prvDeleteTCB+0x5e>
	}
 801b930:	bf00      	nop
 801b932:	3710      	adds	r7, #16
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}

0801b938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b938:	b480      	push	{r7}
 801b93a:	b083      	sub	sp, #12
 801b93c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b93e:	4b0c      	ldr	r3, [pc, #48]	; (801b970 <prvResetNextTaskUnblockTime+0x38>)
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d104      	bne.n	801b952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b948:	4b0a      	ldr	r3, [pc, #40]	; (801b974 <prvResetNextTaskUnblockTime+0x3c>)
 801b94a:	f04f 32ff 	mov.w	r2, #4294967295
 801b94e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b950:	e008      	b.n	801b964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b952:	4b07      	ldr	r3, [pc, #28]	; (801b970 <prvResetNextTaskUnblockTime+0x38>)
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	68db      	ldr	r3, [r3, #12]
 801b958:	68db      	ldr	r3, [r3, #12]
 801b95a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	685b      	ldr	r3, [r3, #4]
 801b960:	4a04      	ldr	r2, [pc, #16]	; (801b974 <prvResetNextTaskUnblockTime+0x3c>)
 801b962:	6013      	str	r3, [r2, #0]
}
 801b964:	bf00      	nop
 801b966:	370c      	adds	r7, #12
 801b968:	46bd      	mov	sp, r7
 801b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b96e:	4770      	bx	lr
 801b970:	2000bda0 	.word	0x2000bda0
 801b974:	2000be08 	.word	0x2000be08

0801b978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b978:	b480      	push	{r7}
 801b97a:	b083      	sub	sp, #12
 801b97c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b97e:	4b0b      	ldr	r3, [pc, #44]	; (801b9ac <xTaskGetSchedulerState+0x34>)
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d102      	bne.n	801b98c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b986:	2301      	movs	r3, #1
 801b988:	607b      	str	r3, [r7, #4]
 801b98a:	e008      	b.n	801b99e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b98c:	4b08      	ldr	r3, [pc, #32]	; (801b9b0 <xTaskGetSchedulerState+0x38>)
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d102      	bne.n	801b99a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b994:	2302      	movs	r3, #2
 801b996:	607b      	str	r3, [r7, #4]
 801b998:	e001      	b.n	801b99e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b99a:	2300      	movs	r3, #0
 801b99c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b99e:	687b      	ldr	r3, [r7, #4]
	}
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	370c      	adds	r7, #12
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9aa:	4770      	bx	lr
 801b9ac:	2000bdf4 	.word	0x2000bdf4
 801b9b0:	2000be10 	.word	0x2000be10

0801b9b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b086      	sub	sp, #24
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d056      	beq.n	801ba78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b9ca:	4b2e      	ldr	r3, [pc, #184]	; (801ba84 <xTaskPriorityDisinherit+0xd0>)
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	693a      	ldr	r2, [r7, #16]
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	d00a      	beq.n	801b9ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9d8:	f383 8811 	msr	BASEPRI, r3
 801b9dc:	f3bf 8f6f 	isb	sy
 801b9e0:	f3bf 8f4f 	dsb	sy
 801b9e4:	60fb      	str	r3, [r7, #12]
}
 801b9e6:	bf00      	nop
 801b9e8:	e7fe      	b.n	801b9e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b9ea:	693b      	ldr	r3, [r7, #16]
 801b9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d10a      	bne.n	801ba08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9f6:	f383 8811 	msr	BASEPRI, r3
 801b9fa:	f3bf 8f6f 	isb	sy
 801b9fe:	f3bf 8f4f 	dsb	sy
 801ba02:	60bb      	str	r3, [r7, #8]
}
 801ba04:	bf00      	nop
 801ba06:	e7fe      	b.n	801ba06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801ba08:	693b      	ldr	r3, [r7, #16]
 801ba0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba0c:	1e5a      	subs	r2, r3, #1
 801ba0e:	693b      	ldr	r3, [r7, #16]
 801ba10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801ba12:	693b      	ldr	r3, [r7, #16]
 801ba14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba16:	693b      	ldr	r3, [r7, #16]
 801ba18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ba1a:	429a      	cmp	r2, r3
 801ba1c:	d02c      	beq.n	801ba78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801ba1e:	693b      	ldr	r3, [r7, #16]
 801ba20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d128      	bne.n	801ba78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ba26:	693b      	ldr	r3, [r7, #16]
 801ba28:	3304      	adds	r3, #4
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	f7fe fba8 	bl	801a180 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ba30:	693b      	ldr	r3, [r7, #16]
 801ba32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ba34:	693b      	ldr	r3, [r7, #16]
 801ba36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ba38:	693b      	ldr	r3, [r7, #16]
 801ba3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ba40:	693b      	ldr	r3, [r7, #16]
 801ba42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ba44:	693b      	ldr	r3, [r7, #16]
 801ba46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba48:	4b0f      	ldr	r3, [pc, #60]	; (801ba88 <xTaskPriorityDisinherit+0xd4>)
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	429a      	cmp	r2, r3
 801ba4e:	d903      	bls.n	801ba58 <xTaskPriorityDisinherit+0xa4>
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba54:	4a0c      	ldr	r2, [pc, #48]	; (801ba88 <xTaskPriorityDisinherit+0xd4>)
 801ba56:	6013      	str	r3, [r2, #0]
 801ba58:	693b      	ldr	r3, [r7, #16]
 801ba5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba5c:	4613      	mov	r3, r2
 801ba5e:	009b      	lsls	r3, r3, #2
 801ba60:	4413      	add	r3, r2
 801ba62:	009b      	lsls	r3, r3, #2
 801ba64:	4a09      	ldr	r2, [pc, #36]	; (801ba8c <xTaskPriorityDisinherit+0xd8>)
 801ba66:	441a      	add	r2, r3
 801ba68:	693b      	ldr	r3, [r7, #16]
 801ba6a:	3304      	adds	r3, #4
 801ba6c:	4619      	mov	r1, r3
 801ba6e:	4610      	mov	r0, r2
 801ba70:	f7fe fb29 	bl	801a0c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801ba74:	2301      	movs	r3, #1
 801ba76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ba78:	697b      	ldr	r3, [r7, #20]
	}
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	3718      	adds	r7, #24
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	2000b914 	.word	0x2000b914
 801ba88:	2000bdf0 	.word	0x2000bdf0
 801ba8c:	2000b918 	.word	0x2000b918

0801ba90 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801ba90:	b480      	push	{r7}
 801ba92:	b083      	sub	sp, #12
 801ba94:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801ba96:	4b09      	ldr	r3, [pc, #36]	; (801babc <uxTaskResetEventItemValue+0x2c>)
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	699b      	ldr	r3, [r3, #24]
 801ba9c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ba9e:	4b07      	ldr	r3, [pc, #28]	; (801babc <uxTaskResetEventItemValue+0x2c>)
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801baa4:	4b05      	ldr	r3, [pc, #20]	; (801babc <uxTaskResetEventItemValue+0x2c>)
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801baac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801baae:	687b      	ldr	r3, [r7, #4]
}
 801bab0:	4618      	mov	r0, r3
 801bab2:	370c      	adds	r7, #12
 801bab4:	46bd      	mov	sp, r7
 801bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baba:	4770      	bx	lr
 801babc:	2000b914 	.word	0x2000b914

0801bac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b084      	sub	sp, #16
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	6078      	str	r0, [r7, #4]
 801bac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801baca:	4b21      	ldr	r3, [pc, #132]	; (801bb50 <prvAddCurrentTaskToDelayedList+0x90>)
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bad0:	4b20      	ldr	r3, [pc, #128]	; (801bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	3304      	adds	r3, #4
 801bad6:	4618      	mov	r0, r3
 801bad8:	f7fe fb52 	bl	801a180 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bae2:	d10a      	bne.n	801bafa <prvAddCurrentTaskToDelayedList+0x3a>
 801bae4:	683b      	ldr	r3, [r7, #0]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d007      	beq.n	801bafa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801baea:	4b1a      	ldr	r3, [pc, #104]	; (801bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	3304      	adds	r3, #4
 801baf0:	4619      	mov	r1, r3
 801baf2:	4819      	ldr	r0, [pc, #100]	; (801bb58 <prvAddCurrentTaskToDelayedList+0x98>)
 801baf4:	f7fe fae7 	bl	801a0c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801baf8:	e026      	b.n	801bb48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bafa:	68fa      	ldr	r2, [r7, #12]
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	4413      	add	r3, r2
 801bb00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bb02:	4b14      	ldr	r3, [pc, #80]	; (801bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	68ba      	ldr	r2, [r7, #8]
 801bb08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bb0a:	68ba      	ldr	r2, [r7, #8]
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	429a      	cmp	r2, r3
 801bb10:	d209      	bcs.n	801bb26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bb12:	4b12      	ldr	r3, [pc, #72]	; (801bb5c <prvAddCurrentTaskToDelayedList+0x9c>)
 801bb14:	681a      	ldr	r2, [r3, #0]
 801bb16:	4b0f      	ldr	r3, [pc, #60]	; (801bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	3304      	adds	r3, #4
 801bb1c:	4619      	mov	r1, r3
 801bb1e:	4610      	mov	r0, r2
 801bb20:	f7fe faf5 	bl	801a10e <vListInsert>
}
 801bb24:	e010      	b.n	801bb48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bb26:	4b0e      	ldr	r3, [pc, #56]	; (801bb60 <prvAddCurrentTaskToDelayedList+0xa0>)
 801bb28:	681a      	ldr	r2, [r3, #0]
 801bb2a:	4b0a      	ldr	r3, [pc, #40]	; (801bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	3304      	adds	r3, #4
 801bb30:	4619      	mov	r1, r3
 801bb32:	4610      	mov	r0, r2
 801bb34:	f7fe faeb 	bl	801a10e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bb38:	4b0a      	ldr	r3, [pc, #40]	; (801bb64 <prvAddCurrentTaskToDelayedList+0xa4>)
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	68ba      	ldr	r2, [r7, #8]
 801bb3e:	429a      	cmp	r2, r3
 801bb40:	d202      	bcs.n	801bb48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801bb42:	4a08      	ldr	r2, [pc, #32]	; (801bb64 <prvAddCurrentTaskToDelayedList+0xa4>)
 801bb44:	68bb      	ldr	r3, [r7, #8]
 801bb46:	6013      	str	r3, [r2, #0]
}
 801bb48:	bf00      	nop
 801bb4a:	3710      	adds	r7, #16
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}
 801bb50:	2000bdec 	.word	0x2000bdec
 801bb54:	2000b914 	.word	0x2000b914
 801bb58:	2000bdd4 	.word	0x2000bdd4
 801bb5c:	2000bda4 	.word	0x2000bda4
 801bb60:	2000bda0 	.word	0x2000bda0
 801bb64:	2000be08 	.word	0x2000be08

0801bb68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b08a      	sub	sp, #40	; 0x28
 801bb6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801bb6e:	2300      	movs	r3, #0
 801bb70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801bb72:	f000 fb07 	bl	801c184 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801bb76:	4b1c      	ldr	r3, [pc, #112]	; (801bbe8 <xTimerCreateTimerTask+0x80>)
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d021      	beq.n	801bbc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801bb7e:	2300      	movs	r3, #0
 801bb80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801bb82:	2300      	movs	r3, #0
 801bb84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801bb86:	1d3a      	adds	r2, r7, #4
 801bb88:	f107 0108 	add.w	r1, r7, #8
 801bb8c:	f107 030c 	add.w	r3, r7, #12
 801bb90:	4618      	mov	r0, r3
 801bb92:	f7fe f845 	bl	8019c20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801bb96:	6879      	ldr	r1, [r7, #4]
 801bb98:	68bb      	ldr	r3, [r7, #8]
 801bb9a:	68fa      	ldr	r2, [r7, #12]
 801bb9c:	9202      	str	r2, [sp, #8]
 801bb9e:	9301      	str	r3, [sp, #4]
 801bba0:	2302      	movs	r3, #2
 801bba2:	9300      	str	r3, [sp, #0]
 801bba4:	2300      	movs	r3, #0
 801bba6:	460a      	mov	r2, r1
 801bba8:	4910      	ldr	r1, [pc, #64]	; (801bbec <xTimerCreateTimerTask+0x84>)
 801bbaa:	4811      	ldr	r0, [pc, #68]	; (801bbf0 <xTimerCreateTimerTask+0x88>)
 801bbac:	f7fe fffe 	bl	801abac <xTaskCreateStatic>
 801bbb0:	4603      	mov	r3, r0
 801bbb2:	4a10      	ldr	r2, [pc, #64]	; (801bbf4 <xTimerCreateTimerTask+0x8c>)
 801bbb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801bbb6:	4b0f      	ldr	r3, [pc, #60]	; (801bbf4 <xTimerCreateTimerTask+0x8c>)
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d001      	beq.n	801bbc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bbbe:	2301      	movs	r3, #1
 801bbc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801bbc2:	697b      	ldr	r3, [r7, #20]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d10a      	bne.n	801bbde <xTimerCreateTimerTask+0x76>
	__asm volatile
 801bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbcc:	f383 8811 	msr	BASEPRI, r3
 801bbd0:	f3bf 8f6f 	isb	sy
 801bbd4:	f3bf 8f4f 	dsb	sy
 801bbd8:	613b      	str	r3, [r7, #16]
}
 801bbda:	bf00      	nop
 801bbdc:	e7fe      	b.n	801bbdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bbde:	697b      	ldr	r3, [r7, #20]
}
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	3718      	adds	r7, #24
 801bbe4:	46bd      	mov	sp, r7
 801bbe6:	bd80      	pop	{r7, pc}
 801bbe8:	2000be44 	.word	0x2000be44
 801bbec:	080228d0 	.word	0x080228d0
 801bbf0:	0801bd2d 	.word	0x0801bd2d
 801bbf4:	2000be48 	.word	0x2000be48

0801bbf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b08a      	sub	sp, #40	; 0x28
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	60f8      	str	r0, [r7, #12]
 801bc00:	60b9      	str	r1, [r7, #8]
 801bc02:	607a      	str	r2, [r7, #4]
 801bc04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801bc06:	2300      	movs	r3, #0
 801bc08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d10a      	bne.n	801bc26 <xTimerGenericCommand+0x2e>
	__asm volatile
 801bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc14:	f383 8811 	msr	BASEPRI, r3
 801bc18:	f3bf 8f6f 	isb	sy
 801bc1c:	f3bf 8f4f 	dsb	sy
 801bc20:	623b      	str	r3, [r7, #32]
}
 801bc22:	bf00      	nop
 801bc24:	e7fe      	b.n	801bc24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801bc26:	4b1a      	ldr	r3, [pc, #104]	; (801bc90 <xTimerGenericCommand+0x98>)
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d02a      	beq.n	801bc84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801bc2e:	68bb      	ldr	r3, [r7, #8]
 801bc30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801bc3a:	68bb      	ldr	r3, [r7, #8]
 801bc3c:	2b05      	cmp	r3, #5
 801bc3e:	dc18      	bgt.n	801bc72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801bc40:	f7ff fe9a 	bl	801b978 <xTaskGetSchedulerState>
 801bc44:	4603      	mov	r3, r0
 801bc46:	2b02      	cmp	r3, #2
 801bc48:	d109      	bne.n	801bc5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801bc4a:	4b11      	ldr	r3, [pc, #68]	; (801bc90 <xTimerGenericCommand+0x98>)
 801bc4c:	6818      	ldr	r0, [r3, #0]
 801bc4e:	f107 0110 	add.w	r1, r7, #16
 801bc52:	2300      	movs	r3, #0
 801bc54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bc56:	f7fe fbc1 	bl	801a3dc <xQueueGenericSend>
 801bc5a:	6278      	str	r0, [r7, #36]	; 0x24
 801bc5c:	e012      	b.n	801bc84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801bc5e:	4b0c      	ldr	r3, [pc, #48]	; (801bc90 <xTimerGenericCommand+0x98>)
 801bc60:	6818      	ldr	r0, [r3, #0]
 801bc62:	f107 0110 	add.w	r1, r7, #16
 801bc66:	2300      	movs	r3, #0
 801bc68:	2200      	movs	r2, #0
 801bc6a:	f7fe fbb7 	bl	801a3dc <xQueueGenericSend>
 801bc6e:	6278      	str	r0, [r7, #36]	; 0x24
 801bc70:	e008      	b.n	801bc84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bc72:	4b07      	ldr	r3, [pc, #28]	; (801bc90 <xTimerGenericCommand+0x98>)
 801bc74:	6818      	ldr	r0, [r3, #0]
 801bc76:	f107 0110 	add.w	r1, r7, #16
 801bc7a:	2300      	movs	r3, #0
 801bc7c:	683a      	ldr	r2, [r7, #0]
 801bc7e:	f7fe fcab 	bl	801a5d8 <xQueueGenericSendFromISR>
 801bc82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bc86:	4618      	mov	r0, r3
 801bc88:	3728      	adds	r7, #40	; 0x28
 801bc8a:	46bd      	mov	sp, r7
 801bc8c:	bd80      	pop	{r7, pc}
 801bc8e:	bf00      	nop
 801bc90:	2000be44 	.word	0x2000be44

0801bc94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801bc94:	b580      	push	{r7, lr}
 801bc96:	b088      	sub	sp, #32
 801bc98:	af02      	add	r7, sp, #8
 801bc9a:	6078      	str	r0, [r7, #4]
 801bc9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bc9e:	4b22      	ldr	r3, [pc, #136]	; (801bd28 <prvProcessExpiredTimer+0x94>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	68db      	ldr	r3, [r3, #12]
 801bca4:	68db      	ldr	r3, [r3, #12]
 801bca6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	3304      	adds	r3, #4
 801bcac:	4618      	mov	r0, r3
 801bcae:	f7fe fa67 	bl	801a180 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bcb2:	697b      	ldr	r3, [r7, #20]
 801bcb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bcb8:	f003 0304 	and.w	r3, r3, #4
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d022      	beq.n	801bd06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801bcc0:	697b      	ldr	r3, [r7, #20]
 801bcc2:	699a      	ldr	r2, [r3, #24]
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	18d1      	adds	r1, r2, r3
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	683a      	ldr	r2, [r7, #0]
 801bccc:	6978      	ldr	r0, [r7, #20]
 801bcce:	f000 f8d1 	bl	801be74 <prvInsertTimerInActiveList>
 801bcd2:	4603      	mov	r3, r0
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d01f      	beq.n	801bd18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bcd8:	2300      	movs	r3, #0
 801bcda:	9300      	str	r3, [sp, #0]
 801bcdc:	2300      	movs	r3, #0
 801bcde:	687a      	ldr	r2, [r7, #4]
 801bce0:	2100      	movs	r1, #0
 801bce2:	6978      	ldr	r0, [r7, #20]
 801bce4:	f7ff ff88 	bl	801bbf8 <xTimerGenericCommand>
 801bce8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801bcea:	693b      	ldr	r3, [r7, #16]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d113      	bne.n	801bd18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcf4:	f383 8811 	msr	BASEPRI, r3
 801bcf8:	f3bf 8f6f 	isb	sy
 801bcfc:	f3bf 8f4f 	dsb	sy
 801bd00:	60fb      	str	r3, [r7, #12]
}
 801bd02:	bf00      	nop
 801bd04:	e7fe      	b.n	801bd04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bd06:	697b      	ldr	r3, [r7, #20]
 801bd08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bd0c:	f023 0301 	bic.w	r3, r3, #1
 801bd10:	b2da      	uxtb	r2, r3
 801bd12:	697b      	ldr	r3, [r7, #20]
 801bd14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bd18:	697b      	ldr	r3, [r7, #20]
 801bd1a:	6a1b      	ldr	r3, [r3, #32]
 801bd1c:	6978      	ldr	r0, [r7, #20]
 801bd1e:	4798      	blx	r3
}
 801bd20:	bf00      	nop
 801bd22:	3718      	adds	r7, #24
 801bd24:	46bd      	mov	sp, r7
 801bd26:	bd80      	pop	{r7, pc}
 801bd28:	2000be3c 	.word	0x2000be3c

0801bd2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801bd2c:	b580      	push	{r7, lr}
 801bd2e:	b084      	sub	sp, #16
 801bd30:	af00      	add	r7, sp, #0
 801bd32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bd34:	f107 0308 	add.w	r3, r7, #8
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f000 f857 	bl	801bdec <prvGetNextExpireTime>
 801bd3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bd40:	68bb      	ldr	r3, [r7, #8]
 801bd42:	4619      	mov	r1, r3
 801bd44:	68f8      	ldr	r0, [r7, #12]
 801bd46:	f000 f803 	bl	801bd50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801bd4a:	f000 f8d5 	bl	801bef8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bd4e:	e7f1      	b.n	801bd34 <prvTimerTask+0x8>

0801bd50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bd50:	b580      	push	{r7, lr}
 801bd52:	b084      	sub	sp, #16
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	6078      	str	r0, [r7, #4]
 801bd58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bd5a:	f7ff f983 	bl	801b064 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bd5e:	f107 0308 	add.w	r3, r7, #8
 801bd62:	4618      	mov	r0, r3
 801bd64:	f000 f866 	bl	801be34 <prvSampleTimeNow>
 801bd68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801bd6a:	68bb      	ldr	r3, [r7, #8]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d130      	bne.n	801bdd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bd70:	683b      	ldr	r3, [r7, #0]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d10a      	bne.n	801bd8c <prvProcessTimerOrBlockTask+0x3c>
 801bd76:	687a      	ldr	r2, [r7, #4]
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	429a      	cmp	r2, r3
 801bd7c:	d806      	bhi.n	801bd8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bd7e:	f7ff f97f 	bl	801b080 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bd82:	68f9      	ldr	r1, [r7, #12]
 801bd84:	6878      	ldr	r0, [r7, #4]
 801bd86:	f7ff ff85 	bl	801bc94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bd8a:	e024      	b.n	801bdd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bd8c:	683b      	ldr	r3, [r7, #0]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d008      	beq.n	801bda4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bd92:	4b13      	ldr	r3, [pc, #76]	; (801bde0 <prvProcessTimerOrBlockTask+0x90>)
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d101      	bne.n	801bda0 <prvProcessTimerOrBlockTask+0x50>
 801bd9c:	2301      	movs	r3, #1
 801bd9e:	e000      	b.n	801bda2 <prvProcessTimerOrBlockTask+0x52>
 801bda0:	2300      	movs	r3, #0
 801bda2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bda4:	4b0f      	ldr	r3, [pc, #60]	; (801bde4 <prvProcessTimerOrBlockTask+0x94>)
 801bda6:	6818      	ldr	r0, [r3, #0]
 801bda8:	687a      	ldr	r2, [r7, #4]
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	1ad3      	subs	r3, r2, r3
 801bdae:	683a      	ldr	r2, [r7, #0]
 801bdb0:	4619      	mov	r1, r3
 801bdb2:	f7fe fec7 	bl	801ab44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bdb6:	f7ff f963 	bl	801b080 <xTaskResumeAll>
 801bdba:	4603      	mov	r3, r0
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d10a      	bne.n	801bdd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bdc0:	4b09      	ldr	r3, [pc, #36]	; (801bde8 <prvProcessTimerOrBlockTask+0x98>)
 801bdc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bdc6:	601a      	str	r2, [r3, #0]
 801bdc8:	f3bf 8f4f 	dsb	sy
 801bdcc:	f3bf 8f6f 	isb	sy
}
 801bdd0:	e001      	b.n	801bdd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bdd2:	f7ff f955 	bl	801b080 <xTaskResumeAll>
}
 801bdd6:	bf00      	nop
 801bdd8:	3710      	adds	r7, #16
 801bdda:	46bd      	mov	sp, r7
 801bddc:	bd80      	pop	{r7, pc}
 801bdde:	bf00      	nop
 801bde0:	2000be40 	.word	0x2000be40
 801bde4:	2000be44 	.word	0x2000be44
 801bde8:	e000ed04 	.word	0xe000ed04

0801bdec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bdec:	b480      	push	{r7}
 801bdee:	b085      	sub	sp, #20
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bdf4:	4b0e      	ldr	r3, [pc, #56]	; (801be30 <prvGetNextExpireTime+0x44>)
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d101      	bne.n	801be02 <prvGetNextExpireTime+0x16>
 801bdfe:	2201      	movs	r2, #1
 801be00:	e000      	b.n	801be04 <prvGetNextExpireTime+0x18>
 801be02:	2200      	movs	r2, #0
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d105      	bne.n	801be1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801be10:	4b07      	ldr	r3, [pc, #28]	; (801be30 <prvGetNextExpireTime+0x44>)
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	68db      	ldr	r3, [r3, #12]
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	60fb      	str	r3, [r7, #12]
 801be1a:	e001      	b.n	801be20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801be1c:	2300      	movs	r3, #0
 801be1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801be20:	68fb      	ldr	r3, [r7, #12]
}
 801be22:	4618      	mov	r0, r3
 801be24:	3714      	adds	r7, #20
 801be26:	46bd      	mov	sp, r7
 801be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be2c:	4770      	bx	lr
 801be2e:	bf00      	nop
 801be30:	2000be3c 	.word	0x2000be3c

0801be34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801be34:	b580      	push	{r7, lr}
 801be36:	b084      	sub	sp, #16
 801be38:	af00      	add	r7, sp, #0
 801be3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801be3c:	f7ff f9be 	bl	801b1bc <xTaskGetTickCount>
 801be40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801be42:	4b0b      	ldr	r3, [pc, #44]	; (801be70 <prvSampleTimeNow+0x3c>)
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	68fa      	ldr	r2, [r7, #12]
 801be48:	429a      	cmp	r2, r3
 801be4a:	d205      	bcs.n	801be58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801be4c:	f000 f936 	bl	801c0bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	2201      	movs	r2, #1
 801be54:	601a      	str	r2, [r3, #0]
 801be56:	e002      	b.n	801be5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	2200      	movs	r2, #0
 801be5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801be5e:	4a04      	ldr	r2, [pc, #16]	; (801be70 <prvSampleTimeNow+0x3c>)
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801be64:	68fb      	ldr	r3, [r7, #12]
}
 801be66:	4618      	mov	r0, r3
 801be68:	3710      	adds	r7, #16
 801be6a:	46bd      	mov	sp, r7
 801be6c:	bd80      	pop	{r7, pc}
 801be6e:	bf00      	nop
 801be70:	2000be4c 	.word	0x2000be4c

0801be74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801be74:	b580      	push	{r7, lr}
 801be76:	b086      	sub	sp, #24
 801be78:	af00      	add	r7, sp, #0
 801be7a:	60f8      	str	r0, [r7, #12]
 801be7c:	60b9      	str	r1, [r7, #8]
 801be7e:	607a      	str	r2, [r7, #4]
 801be80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801be82:	2300      	movs	r3, #0
 801be84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	68ba      	ldr	r2, [r7, #8]
 801be8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	68fa      	ldr	r2, [r7, #12]
 801be90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801be92:	68ba      	ldr	r2, [r7, #8]
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	429a      	cmp	r2, r3
 801be98:	d812      	bhi.n	801bec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801be9a:	687a      	ldr	r2, [r7, #4]
 801be9c:	683b      	ldr	r3, [r7, #0]
 801be9e:	1ad2      	subs	r2, r2, r3
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	699b      	ldr	r3, [r3, #24]
 801bea4:	429a      	cmp	r2, r3
 801bea6:	d302      	bcc.n	801beae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801bea8:	2301      	movs	r3, #1
 801beaa:	617b      	str	r3, [r7, #20]
 801beac:	e01b      	b.n	801bee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801beae:	4b10      	ldr	r3, [pc, #64]	; (801bef0 <prvInsertTimerInActiveList+0x7c>)
 801beb0:	681a      	ldr	r2, [r3, #0]
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	3304      	adds	r3, #4
 801beb6:	4619      	mov	r1, r3
 801beb8:	4610      	mov	r0, r2
 801beba:	f7fe f928 	bl	801a10e <vListInsert>
 801bebe:	e012      	b.n	801bee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801bec0:	687a      	ldr	r2, [r7, #4]
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	429a      	cmp	r2, r3
 801bec6:	d206      	bcs.n	801bed6 <prvInsertTimerInActiveList+0x62>
 801bec8:	68ba      	ldr	r2, [r7, #8]
 801beca:	683b      	ldr	r3, [r7, #0]
 801becc:	429a      	cmp	r2, r3
 801bece:	d302      	bcc.n	801bed6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801bed0:	2301      	movs	r3, #1
 801bed2:	617b      	str	r3, [r7, #20]
 801bed4:	e007      	b.n	801bee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801bed6:	4b07      	ldr	r3, [pc, #28]	; (801bef4 <prvInsertTimerInActiveList+0x80>)
 801bed8:	681a      	ldr	r2, [r3, #0]
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	3304      	adds	r3, #4
 801bede:	4619      	mov	r1, r3
 801bee0:	4610      	mov	r0, r2
 801bee2:	f7fe f914 	bl	801a10e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801bee6:	697b      	ldr	r3, [r7, #20]
}
 801bee8:	4618      	mov	r0, r3
 801beea:	3718      	adds	r7, #24
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}
 801bef0:	2000be40 	.word	0x2000be40
 801bef4:	2000be3c 	.word	0x2000be3c

0801bef8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b08e      	sub	sp, #56	; 0x38
 801befc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801befe:	e0ca      	b.n	801c096 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	da18      	bge.n	801bf38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801bf06:	1d3b      	adds	r3, r7, #4
 801bf08:	3304      	adds	r3, #4
 801bf0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801bf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d10a      	bne.n	801bf28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf16:	f383 8811 	msr	BASEPRI, r3
 801bf1a:	f3bf 8f6f 	isb	sy
 801bf1e:	f3bf 8f4f 	dsb	sy
 801bf22:	61fb      	str	r3, [r7, #28]
}
 801bf24:	bf00      	nop
 801bf26:	e7fe      	b.n	801bf26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf2e:	6850      	ldr	r0, [r2, #4]
 801bf30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf32:	6892      	ldr	r2, [r2, #8]
 801bf34:	4611      	mov	r1, r2
 801bf36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	f2c0 80aa 	blt.w	801c094 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf46:	695b      	ldr	r3, [r3, #20]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d004      	beq.n	801bf56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf4e:	3304      	adds	r3, #4
 801bf50:	4618      	mov	r0, r3
 801bf52:	f7fe f915 	bl	801a180 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bf56:	463b      	mov	r3, r7
 801bf58:	4618      	mov	r0, r3
 801bf5a:	f7ff ff6b 	bl	801be34 <prvSampleTimeNow>
 801bf5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	2b09      	cmp	r3, #9
 801bf64:	f200 8097 	bhi.w	801c096 <prvProcessReceivedCommands+0x19e>
 801bf68:	a201      	add	r2, pc, #4	; (adr r2, 801bf70 <prvProcessReceivedCommands+0x78>)
 801bf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf6e:	bf00      	nop
 801bf70:	0801bf99 	.word	0x0801bf99
 801bf74:	0801bf99 	.word	0x0801bf99
 801bf78:	0801bf99 	.word	0x0801bf99
 801bf7c:	0801c00d 	.word	0x0801c00d
 801bf80:	0801c021 	.word	0x0801c021
 801bf84:	0801c06b 	.word	0x0801c06b
 801bf88:	0801bf99 	.word	0x0801bf99
 801bf8c:	0801bf99 	.word	0x0801bf99
 801bf90:	0801c00d 	.word	0x0801c00d
 801bf94:	0801c021 	.word	0x0801c021
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bf9e:	f043 0301 	orr.w	r3, r3, #1
 801bfa2:	b2da      	uxtb	r2, r3
 801bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801bfaa:	68ba      	ldr	r2, [r7, #8]
 801bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfae:	699b      	ldr	r3, [r3, #24]
 801bfb0:	18d1      	adds	r1, r2, r3
 801bfb2:	68bb      	ldr	r3, [r7, #8]
 801bfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bfb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bfb8:	f7ff ff5c 	bl	801be74 <prvInsertTimerInActiveList>
 801bfbc:	4603      	mov	r3, r0
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d069      	beq.n	801c096 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfc4:	6a1b      	ldr	r3, [r3, #32]
 801bfc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bfc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bfd0:	f003 0304 	and.w	r3, r3, #4
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d05e      	beq.n	801c096 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801bfd8:	68ba      	ldr	r2, [r7, #8]
 801bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfdc:	699b      	ldr	r3, [r3, #24]
 801bfde:	441a      	add	r2, r3
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	9300      	str	r3, [sp, #0]
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	2100      	movs	r1, #0
 801bfe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bfea:	f7ff fe05 	bl	801bbf8 <xTimerGenericCommand>
 801bfee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801bff0:	6a3b      	ldr	r3, [r7, #32]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d14f      	bne.n	801c096 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801bff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bffa:	f383 8811 	msr	BASEPRI, r3
 801bffe:	f3bf 8f6f 	isb	sy
 801c002:	f3bf 8f4f 	dsb	sy
 801c006:	61bb      	str	r3, [r7, #24]
}
 801c008:	bf00      	nop
 801c00a:	e7fe      	b.n	801c00a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c012:	f023 0301 	bic.w	r3, r3, #1
 801c016:	b2da      	uxtb	r2, r3
 801c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801c01e:	e03a      	b.n	801c096 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c026:	f043 0301 	orr.w	r3, r3, #1
 801c02a:	b2da      	uxtb	r2, r3
 801c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c032:	68ba      	ldr	r2, [r7, #8]
 801c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c036:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c03a:	699b      	ldr	r3, [r3, #24]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d10a      	bne.n	801c056 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801c040:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c044:	f383 8811 	msr	BASEPRI, r3
 801c048:	f3bf 8f6f 	isb	sy
 801c04c:	f3bf 8f4f 	dsb	sy
 801c050:	617b      	str	r3, [r7, #20]
}
 801c052:	bf00      	nop
 801c054:	e7fe      	b.n	801c054 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c058:	699a      	ldr	r2, [r3, #24]
 801c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c05c:	18d1      	adds	r1, r2, r3
 801c05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c064:	f7ff ff06 	bl	801be74 <prvInsertTimerInActiveList>
					break;
 801c068:	e015      	b.n	801c096 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c06c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c070:	f003 0302 	and.w	r3, r3, #2
 801c074:	2b00      	cmp	r3, #0
 801c076:	d103      	bne.n	801c080 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801c078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c07a:	f000 fc01 	bl	801c880 <vPortFree>
 801c07e:	e00a      	b.n	801c096 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c086:	f023 0301 	bic.w	r3, r3, #1
 801c08a:	b2da      	uxtb	r2, r3
 801c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c092:	e000      	b.n	801c096 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801c094:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c096:	4b08      	ldr	r3, [pc, #32]	; (801c0b8 <prvProcessReceivedCommands+0x1c0>)
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	1d39      	adds	r1, r7, #4
 801c09c:	2200      	movs	r2, #0
 801c09e:	4618      	mov	r0, r3
 801c0a0:	f7fe fb36 	bl	801a710 <xQueueReceive>
 801c0a4:	4603      	mov	r3, r0
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	f47f af2a 	bne.w	801bf00 <prvProcessReceivedCommands+0x8>
	}
}
 801c0ac:	bf00      	nop
 801c0ae:	bf00      	nop
 801c0b0:	3730      	adds	r7, #48	; 0x30
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	bd80      	pop	{r7, pc}
 801c0b6:	bf00      	nop
 801c0b8:	2000be44 	.word	0x2000be44

0801c0bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c0bc:	b580      	push	{r7, lr}
 801c0be:	b088      	sub	sp, #32
 801c0c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c0c2:	e048      	b.n	801c156 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c0c4:	4b2d      	ldr	r3, [pc, #180]	; (801c17c <prvSwitchTimerLists+0xc0>)
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	68db      	ldr	r3, [r3, #12]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c0ce:	4b2b      	ldr	r3, [pc, #172]	; (801c17c <prvSwitchTimerLists+0xc0>)
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	68db      	ldr	r3, [r3, #12]
 801c0d4:	68db      	ldr	r3, [r3, #12]
 801c0d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	3304      	adds	r3, #4
 801c0dc:	4618      	mov	r0, r3
 801c0de:	f7fe f84f 	bl	801a180 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c0e2:	68fb      	ldr	r3, [r7, #12]
 801c0e4:	6a1b      	ldr	r3, [r3, #32]
 801c0e6:	68f8      	ldr	r0, [r7, #12]
 801c0e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c0f0:	f003 0304 	and.w	r3, r3, #4
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d02e      	beq.n	801c156 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	699b      	ldr	r3, [r3, #24]
 801c0fc:	693a      	ldr	r2, [r7, #16]
 801c0fe:	4413      	add	r3, r2
 801c100:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c102:	68ba      	ldr	r2, [r7, #8]
 801c104:	693b      	ldr	r3, [r7, #16]
 801c106:	429a      	cmp	r2, r3
 801c108:	d90e      	bls.n	801c128 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	68ba      	ldr	r2, [r7, #8]
 801c10e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	68fa      	ldr	r2, [r7, #12]
 801c114:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c116:	4b19      	ldr	r3, [pc, #100]	; (801c17c <prvSwitchTimerLists+0xc0>)
 801c118:	681a      	ldr	r2, [r3, #0]
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	3304      	adds	r3, #4
 801c11e:	4619      	mov	r1, r3
 801c120:	4610      	mov	r0, r2
 801c122:	f7fd fff4 	bl	801a10e <vListInsert>
 801c126:	e016      	b.n	801c156 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c128:	2300      	movs	r3, #0
 801c12a:	9300      	str	r3, [sp, #0]
 801c12c:	2300      	movs	r3, #0
 801c12e:	693a      	ldr	r2, [r7, #16]
 801c130:	2100      	movs	r1, #0
 801c132:	68f8      	ldr	r0, [r7, #12]
 801c134:	f7ff fd60 	bl	801bbf8 <xTimerGenericCommand>
 801c138:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d10a      	bne.n	801c156 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c144:	f383 8811 	msr	BASEPRI, r3
 801c148:	f3bf 8f6f 	isb	sy
 801c14c:	f3bf 8f4f 	dsb	sy
 801c150:	603b      	str	r3, [r7, #0]
}
 801c152:	bf00      	nop
 801c154:	e7fe      	b.n	801c154 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c156:	4b09      	ldr	r3, [pc, #36]	; (801c17c <prvSwitchTimerLists+0xc0>)
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d1b1      	bne.n	801c0c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c160:	4b06      	ldr	r3, [pc, #24]	; (801c17c <prvSwitchTimerLists+0xc0>)
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c166:	4b06      	ldr	r3, [pc, #24]	; (801c180 <prvSwitchTimerLists+0xc4>)
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	4a04      	ldr	r2, [pc, #16]	; (801c17c <prvSwitchTimerLists+0xc0>)
 801c16c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c16e:	4a04      	ldr	r2, [pc, #16]	; (801c180 <prvSwitchTimerLists+0xc4>)
 801c170:	697b      	ldr	r3, [r7, #20]
 801c172:	6013      	str	r3, [r2, #0]
}
 801c174:	bf00      	nop
 801c176:	3718      	adds	r7, #24
 801c178:	46bd      	mov	sp, r7
 801c17a:	bd80      	pop	{r7, pc}
 801c17c:	2000be3c 	.word	0x2000be3c
 801c180:	2000be40 	.word	0x2000be40

0801c184 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b082      	sub	sp, #8
 801c188:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c18a:	f000 f98b 	bl	801c4a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c18e:	4b15      	ldr	r3, [pc, #84]	; (801c1e4 <prvCheckForValidListAndQueue+0x60>)
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d120      	bne.n	801c1d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c196:	4814      	ldr	r0, [pc, #80]	; (801c1e8 <prvCheckForValidListAndQueue+0x64>)
 801c198:	f7fd ff68 	bl	801a06c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c19c:	4813      	ldr	r0, [pc, #76]	; (801c1ec <prvCheckForValidListAndQueue+0x68>)
 801c19e:	f7fd ff65 	bl	801a06c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c1a2:	4b13      	ldr	r3, [pc, #76]	; (801c1f0 <prvCheckForValidListAndQueue+0x6c>)
 801c1a4:	4a10      	ldr	r2, [pc, #64]	; (801c1e8 <prvCheckForValidListAndQueue+0x64>)
 801c1a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c1a8:	4b12      	ldr	r3, [pc, #72]	; (801c1f4 <prvCheckForValidListAndQueue+0x70>)
 801c1aa:	4a10      	ldr	r2, [pc, #64]	; (801c1ec <prvCheckForValidListAndQueue+0x68>)
 801c1ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	9300      	str	r3, [sp, #0]
 801c1b2:	4b11      	ldr	r3, [pc, #68]	; (801c1f8 <prvCheckForValidListAndQueue+0x74>)
 801c1b4:	4a11      	ldr	r2, [pc, #68]	; (801c1fc <prvCheckForValidListAndQueue+0x78>)
 801c1b6:	2110      	movs	r1, #16
 801c1b8:	200a      	movs	r0, #10
 801c1ba:	f7fe f873 	bl	801a2a4 <xQueueGenericCreateStatic>
 801c1be:	4603      	mov	r3, r0
 801c1c0:	4a08      	ldr	r2, [pc, #32]	; (801c1e4 <prvCheckForValidListAndQueue+0x60>)
 801c1c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c1c4:	4b07      	ldr	r3, [pc, #28]	; (801c1e4 <prvCheckForValidListAndQueue+0x60>)
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d005      	beq.n	801c1d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c1cc:	4b05      	ldr	r3, [pc, #20]	; (801c1e4 <prvCheckForValidListAndQueue+0x60>)
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	490b      	ldr	r1, [pc, #44]	; (801c200 <prvCheckForValidListAndQueue+0x7c>)
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	f7fe fc8c 	bl	801aaf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c1d8:	f000 f994 	bl	801c504 <vPortExitCritical>
}
 801c1dc:	bf00      	nop
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bd80      	pop	{r7, pc}
 801c1e2:	bf00      	nop
 801c1e4:	2000be44 	.word	0x2000be44
 801c1e8:	2000be14 	.word	0x2000be14
 801c1ec:	2000be28 	.word	0x2000be28
 801c1f0:	2000be3c 	.word	0x2000be3c
 801c1f4:	2000be40 	.word	0x2000be40
 801c1f8:	2000bef0 	.word	0x2000bef0
 801c1fc:	2000be50 	.word	0x2000be50
 801c200:	080228d8 	.word	0x080228d8

0801c204 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801c204:	b580      	push	{r7, lr}
 801c206:	b08a      	sub	sp, #40	; 0x28
 801c208:	af00      	add	r7, sp, #0
 801c20a:	60f8      	str	r0, [r7, #12]
 801c20c:	60b9      	str	r1, [r7, #8]
 801c20e:	607a      	str	r2, [r7, #4]
 801c210:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801c212:	f06f 0301 	mvn.w	r3, #1
 801c216:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801c21c:	68bb      	ldr	r3, [r7, #8]
 801c21e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c224:	4b06      	ldr	r3, [pc, #24]	; (801c240 <xTimerPendFunctionCallFromISR+0x3c>)
 801c226:	6818      	ldr	r0, [r3, #0]
 801c228:	f107 0114 	add.w	r1, r7, #20
 801c22c:	2300      	movs	r3, #0
 801c22e:	683a      	ldr	r2, [r7, #0]
 801c230:	f7fe f9d2 	bl	801a5d8 <xQueueGenericSendFromISR>
 801c234:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801c238:	4618      	mov	r0, r3
 801c23a:	3728      	adds	r7, #40	; 0x28
 801c23c:	46bd      	mov	sp, r7
 801c23e:	bd80      	pop	{r7, pc}
 801c240:	2000be44 	.word	0x2000be44

0801c244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c244:	b480      	push	{r7}
 801c246:	b085      	sub	sp, #20
 801c248:	af00      	add	r7, sp, #0
 801c24a:	60f8      	str	r0, [r7, #12]
 801c24c:	60b9      	str	r1, [r7, #8]
 801c24e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	3b04      	subs	r3, #4
 801c254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c25c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	3b04      	subs	r3, #4
 801c262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c264:	68bb      	ldr	r3, [r7, #8]
 801c266:	f023 0201 	bic.w	r2, r3, #1
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c26e:	68fb      	ldr	r3, [r7, #12]
 801c270:	3b04      	subs	r3, #4
 801c272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c274:	4a0c      	ldr	r2, [pc, #48]	; (801c2a8 <pxPortInitialiseStack+0x64>)
 801c276:	68fb      	ldr	r3, [r7, #12]
 801c278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c27a:	68fb      	ldr	r3, [r7, #12]
 801c27c:	3b14      	subs	r3, #20
 801c27e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c280:	687a      	ldr	r2, [r7, #4]
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	3b04      	subs	r3, #4
 801c28a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	f06f 0202 	mvn.w	r2, #2
 801c292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	3b20      	subs	r3, #32
 801c298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c29a:	68fb      	ldr	r3, [r7, #12]
}
 801c29c:	4618      	mov	r0, r3
 801c29e:	3714      	adds	r7, #20
 801c2a0:	46bd      	mov	sp, r7
 801c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a6:	4770      	bx	lr
 801c2a8:	0801c2ad 	.word	0x0801c2ad

0801c2ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c2ac:	b480      	push	{r7}
 801c2ae:	b085      	sub	sp, #20
 801c2b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c2b6:	4b12      	ldr	r3, [pc, #72]	; (801c300 <prvTaskExitError+0x54>)
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2be:	d00a      	beq.n	801c2d6 <prvTaskExitError+0x2a>
	__asm volatile
 801c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2c4:	f383 8811 	msr	BASEPRI, r3
 801c2c8:	f3bf 8f6f 	isb	sy
 801c2cc:	f3bf 8f4f 	dsb	sy
 801c2d0:	60fb      	str	r3, [r7, #12]
}
 801c2d2:	bf00      	nop
 801c2d4:	e7fe      	b.n	801c2d4 <prvTaskExitError+0x28>
	__asm volatile
 801c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2da:	f383 8811 	msr	BASEPRI, r3
 801c2de:	f3bf 8f6f 	isb	sy
 801c2e2:	f3bf 8f4f 	dsb	sy
 801c2e6:	60bb      	str	r3, [r7, #8]
}
 801c2e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c2ea:	bf00      	nop
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d0fc      	beq.n	801c2ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c2f2:	bf00      	nop
 801c2f4:	bf00      	nop
 801c2f6:	3714      	adds	r7, #20
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2fe:	4770      	bx	lr
 801c300:	2000000c 	.word	0x2000000c
	...

0801c310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c310:	4b07      	ldr	r3, [pc, #28]	; (801c330 <pxCurrentTCBConst2>)
 801c312:	6819      	ldr	r1, [r3, #0]
 801c314:	6808      	ldr	r0, [r1, #0]
 801c316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c31a:	f380 8809 	msr	PSP, r0
 801c31e:	f3bf 8f6f 	isb	sy
 801c322:	f04f 0000 	mov.w	r0, #0
 801c326:	f380 8811 	msr	BASEPRI, r0
 801c32a:	4770      	bx	lr
 801c32c:	f3af 8000 	nop.w

0801c330 <pxCurrentTCBConst2>:
 801c330:	2000b914 	.word	0x2000b914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c334:	bf00      	nop
 801c336:	bf00      	nop

0801c338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c338:	4808      	ldr	r0, [pc, #32]	; (801c35c <prvPortStartFirstTask+0x24>)
 801c33a:	6800      	ldr	r0, [r0, #0]
 801c33c:	6800      	ldr	r0, [r0, #0]
 801c33e:	f380 8808 	msr	MSP, r0
 801c342:	f04f 0000 	mov.w	r0, #0
 801c346:	f380 8814 	msr	CONTROL, r0
 801c34a:	b662      	cpsie	i
 801c34c:	b661      	cpsie	f
 801c34e:	f3bf 8f4f 	dsb	sy
 801c352:	f3bf 8f6f 	isb	sy
 801c356:	df00      	svc	0
 801c358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c35a:	bf00      	nop
 801c35c:	e000ed08 	.word	0xe000ed08

0801c360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b086      	sub	sp, #24
 801c364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c366:	4b46      	ldr	r3, [pc, #280]	; (801c480 <xPortStartScheduler+0x120>)
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	4a46      	ldr	r2, [pc, #280]	; (801c484 <xPortStartScheduler+0x124>)
 801c36c:	4293      	cmp	r3, r2
 801c36e:	d10a      	bne.n	801c386 <xPortStartScheduler+0x26>
	__asm volatile
 801c370:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c374:	f383 8811 	msr	BASEPRI, r3
 801c378:	f3bf 8f6f 	isb	sy
 801c37c:	f3bf 8f4f 	dsb	sy
 801c380:	613b      	str	r3, [r7, #16]
}
 801c382:	bf00      	nop
 801c384:	e7fe      	b.n	801c384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c386:	4b3e      	ldr	r3, [pc, #248]	; (801c480 <xPortStartScheduler+0x120>)
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	4a3f      	ldr	r2, [pc, #252]	; (801c488 <xPortStartScheduler+0x128>)
 801c38c:	4293      	cmp	r3, r2
 801c38e:	d10a      	bne.n	801c3a6 <xPortStartScheduler+0x46>
	__asm volatile
 801c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c394:	f383 8811 	msr	BASEPRI, r3
 801c398:	f3bf 8f6f 	isb	sy
 801c39c:	f3bf 8f4f 	dsb	sy
 801c3a0:	60fb      	str	r3, [r7, #12]
}
 801c3a2:	bf00      	nop
 801c3a4:	e7fe      	b.n	801c3a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c3a6:	4b39      	ldr	r3, [pc, #228]	; (801c48c <xPortStartScheduler+0x12c>)
 801c3a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c3aa:	697b      	ldr	r3, [r7, #20]
 801c3ac:	781b      	ldrb	r3, [r3, #0]
 801c3ae:	b2db      	uxtb	r3, r3
 801c3b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c3b2:	697b      	ldr	r3, [r7, #20]
 801c3b4:	22ff      	movs	r2, #255	; 0xff
 801c3b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c3b8:	697b      	ldr	r3, [r7, #20]
 801c3ba:	781b      	ldrb	r3, [r3, #0]
 801c3bc:	b2db      	uxtb	r3, r3
 801c3be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c3c0:	78fb      	ldrb	r3, [r7, #3]
 801c3c2:	b2db      	uxtb	r3, r3
 801c3c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c3c8:	b2da      	uxtb	r2, r3
 801c3ca:	4b31      	ldr	r3, [pc, #196]	; (801c490 <xPortStartScheduler+0x130>)
 801c3cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c3ce:	4b31      	ldr	r3, [pc, #196]	; (801c494 <xPortStartScheduler+0x134>)
 801c3d0:	2207      	movs	r2, #7
 801c3d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c3d4:	e009      	b.n	801c3ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801c3d6:	4b2f      	ldr	r3, [pc, #188]	; (801c494 <xPortStartScheduler+0x134>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	3b01      	subs	r3, #1
 801c3dc:	4a2d      	ldr	r2, [pc, #180]	; (801c494 <xPortStartScheduler+0x134>)
 801c3de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c3e0:	78fb      	ldrb	r3, [r7, #3]
 801c3e2:	b2db      	uxtb	r3, r3
 801c3e4:	005b      	lsls	r3, r3, #1
 801c3e6:	b2db      	uxtb	r3, r3
 801c3e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c3ea:	78fb      	ldrb	r3, [r7, #3]
 801c3ec:	b2db      	uxtb	r3, r3
 801c3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c3f2:	2b80      	cmp	r3, #128	; 0x80
 801c3f4:	d0ef      	beq.n	801c3d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c3f6:	4b27      	ldr	r3, [pc, #156]	; (801c494 <xPortStartScheduler+0x134>)
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	f1c3 0307 	rsb	r3, r3, #7
 801c3fe:	2b04      	cmp	r3, #4
 801c400:	d00a      	beq.n	801c418 <xPortStartScheduler+0xb8>
	__asm volatile
 801c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c406:	f383 8811 	msr	BASEPRI, r3
 801c40a:	f3bf 8f6f 	isb	sy
 801c40e:	f3bf 8f4f 	dsb	sy
 801c412:	60bb      	str	r3, [r7, #8]
}
 801c414:	bf00      	nop
 801c416:	e7fe      	b.n	801c416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c418:	4b1e      	ldr	r3, [pc, #120]	; (801c494 <xPortStartScheduler+0x134>)
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	021b      	lsls	r3, r3, #8
 801c41e:	4a1d      	ldr	r2, [pc, #116]	; (801c494 <xPortStartScheduler+0x134>)
 801c420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c422:	4b1c      	ldr	r3, [pc, #112]	; (801c494 <xPortStartScheduler+0x134>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c42a:	4a1a      	ldr	r2, [pc, #104]	; (801c494 <xPortStartScheduler+0x134>)
 801c42c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	b2da      	uxtb	r2, r3
 801c432:	697b      	ldr	r3, [r7, #20]
 801c434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c436:	4b18      	ldr	r3, [pc, #96]	; (801c498 <xPortStartScheduler+0x138>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	4a17      	ldr	r2, [pc, #92]	; (801c498 <xPortStartScheduler+0x138>)
 801c43c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c442:	4b15      	ldr	r3, [pc, #84]	; (801c498 <xPortStartScheduler+0x138>)
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	4a14      	ldr	r2, [pc, #80]	; (801c498 <xPortStartScheduler+0x138>)
 801c448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c44c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c44e:	f000 f8dd 	bl	801c60c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c452:	4b12      	ldr	r3, [pc, #72]	; (801c49c <xPortStartScheduler+0x13c>)
 801c454:	2200      	movs	r2, #0
 801c456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c458:	f000 f8fc 	bl	801c654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c45c:	4b10      	ldr	r3, [pc, #64]	; (801c4a0 <xPortStartScheduler+0x140>)
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	4a0f      	ldr	r2, [pc, #60]	; (801c4a0 <xPortStartScheduler+0x140>)
 801c462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c468:	f7ff ff66 	bl	801c338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c46c:	f7fe ff70 	bl	801b350 <vTaskSwitchContext>
	prvTaskExitError();
 801c470:	f7ff ff1c 	bl	801c2ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c474:	2300      	movs	r3, #0
}
 801c476:	4618      	mov	r0, r3
 801c478:	3718      	adds	r7, #24
 801c47a:	46bd      	mov	sp, r7
 801c47c:	bd80      	pop	{r7, pc}
 801c47e:	bf00      	nop
 801c480:	e000ed00 	.word	0xe000ed00
 801c484:	410fc271 	.word	0x410fc271
 801c488:	410fc270 	.word	0x410fc270
 801c48c:	e000e400 	.word	0xe000e400
 801c490:	2000bf40 	.word	0x2000bf40
 801c494:	2000bf44 	.word	0x2000bf44
 801c498:	e000ed20 	.word	0xe000ed20
 801c49c:	2000000c 	.word	0x2000000c
 801c4a0:	e000ef34 	.word	0xe000ef34

0801c4a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c4a4:	b480      	push	{r7}
 801c4a6:	b083      	sub	sp, #12
 801c4a8:	af00      	add	r7, sp, #0
	__asm volatile
 801c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4ae:	f383 8811 	msr	BASEPRI, r3
 801c4b2:	f3bf 8f6f 	isb	sy
 801c4b6:	f3bf 8f4f 	dsb	sy
 801c4ba:	607b      	str	r3, [r7, #4]
}
 801c4bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c4be:	4b0f      	ldr	r3, [pc, #60]	; (801c4fc <vPortEnterCritical+0x58>)
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	3301      	adds	r3, #1
 801c4c4:	4a0d      	ldr	r2, [pc, #52]	; (801c4fc <vPortEnterCritical+0x58>)
 801c4c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c4c8:	4b0c      	ldr	r3, [pc, #48]	; (801c4fc <vPortEnterCritical+0x58>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	2b01      	cmp	r3, #1
 801c4ce:	d10f      	bne.n	801c4f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c4d0:	4b0b      	ldr	r3, [pc, #44]	; (801c500 <vPortEnterCritical+0x5c>)
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	b2db      	uxtb	r3, r3
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d00a      	beq.n	801c4f0 <vPortEnterCritical+0x4c>
	__asm volatile
 801c4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4de:	f383 8811 	msr	BASEPRI, r3
 801c4e2:	f3bf 8f6f 	isb	sy
 801c4e6:	f3bf 8f4f 	dsb	sy
 801c4ea:	603b      	str	r3, [r7, #0]
}
 801c4ec:	bf00      	nop
 801c4ee:	e7fe      	b.n	801c4ee <vPortEnterCritical+0x4a>
	}
}
 801c4f0:	bf00      	nop
 801c4f2:	370c      	adds	r7, #12
 801c4f4:	46bd      	mov	sp, r7
 801c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4fa:	4770      	bx	lr
 801c4fc:	2000000c 	.word	0x2000000c
 801c500:	e000ed04 	.word	0xe000ed04

0801c504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c504:	b480      	push	{r7}
 801c506:	b083      	sub	sp, #12
 801c508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c50a:	4b12      	ldr	r3, [pc, #72]	; (801c554 <vPortExitCritical+0x50>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d10a      	bne.n	801c528 <vPortExitCritical+0x24>
	__asm volatile
 801c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c516:	f383 8811 	msr	BASEPRI, r3
 801c51a:	f3bf 8f6f 	isb	sy
 801c51e:	f3bf 8f4f 	dsb	sy
 801c522:	607b      	str	r3, [r7, #4]
}
 801c524:	bf00      	nop
 801c526:	e7fe      	b.n	801c526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c528:	4b0a      	ldr	r3, [pc, #40]	; (801c554 <vPortExitCritical+0x50>)
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	3b01      	subs	r3, #1
 801c52e:	4a09      	ldr	r2, [pc, #36]	; (801c554 <vPortExitCritical+0x50>)
 801c530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c532:	4b08      	ldr	r3, [pc, #32]	; (801c554 <vPortExitCritical+0x50>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d105      	bne.n	801c546 <vPortExitCritical+0x42>
 801c53a:	2300      	movs	r3, #0
 801c53c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c53e:	683b      	ldr	r3, [r7, #0]
 801c540:	f383 8811 	msr	BASEPRI, r3
}
 801c544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c546:	bf00      	nop
 801c548:	370c      	adds	r7, #12
 801c54a:	46bd      	mov	sp, r7
 801c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c550:	4770      	bx	lr
 801c552:	bf00      	nop
 801c554:	2000000c 	.word	0x2000000c
	...

0801c560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c560:	f3ef 8009 	mrs	r0, PSP
 801c564:	f3bf 8f6f 	isb	sy
 801c568:	4b15      	ldr	r3, [pc, #84]	; (801c5c0 <pxCurrentTCBConst>)
 801c56a:	681a      	ldr	r2, [r3, #0]
 801c56c:	f01e 0f10 	tst.w	lr, #16
 801c570:	bf08      	it	eq
 801c572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c57a:	6010      	str	r0, [r2, #0]
 801c57c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c580:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c584:	f380 8811 	msr	BASEPRI, r0
 801c588:	f3bf 8f4f 	dsb	sy
 801c58c:	f3bf 8f6f 	isb	sy
 801c590:	f7fe fede 	bl	801b350 <vTaskSwitchContext>
 801c594:	f04f 0000 	mov.w	r0, #0
 801c598:	f380 8811 	msr	BASEPRI, r0
 801c59c:	bc09      	pop	{r0, r3}
 801c59e:	6819      	ldr	r1, [r3, #0]
 801c5a0:	6808      	ldr	r0, [r1, #0]
 801c5a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5a6:	f01e 0f10 	tst.w	lr, #16
 801c5aa:	bf08      	it	eq
 801c5ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c5b0:	f380 8809 	msr	PSP, r0
 801c5b4:	f3bf 8f6f 	isb	sy
 801c5b8:	4770      	bx	lr
 801c5ba:	bf00      	nop
 801c5bc:	f3af 8000 	nop.w

0801c5c0 <pxCurrentTCBConst>:
 801c5c0:	2000b914 	.word	0x2000b914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c5c4:	bf00      	nop
 801c5c6:	bf00      	nop

0801c5c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b082      	sub	sp, #8
 801c5cc:	af00      	add	r7, sp, #0
	__asm volatile
 801c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5d2:	f383 8811 	msr	BASEPRI, r3
 801c5d6:	f3bf 8f6f 	isb	sy
 801c5da:	f3bf 8f4f 	dsb	sy
 801c5de:	607b      	str	r3, [r7, #4]
}
 801c5e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c5e2:	f7fe fdfb 	bl	801b1dc <xTaskIncrementTick>
 801c5e6:	4603      	mov	r3, r0
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d003      	beq.n	801c5f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c5ec:	4b06      	ldr	r3, [pc, #24]	; (801c608 <xPortSysTickHandler+0x40>)
 801c5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c5f2:	601a      	str	r2, [r3, #0]
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	f383 8811 	msr	BASEPRI, r3
}
 801c5fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c600:	bf00      	nop
 801c602:	3708      	adds	r7, #8
 801c604:	46bd      	mov	sp, r7
 801c606:	bd80      	pop	{r7, pc}
 801c608:	e000ed04 	.word	0xe000ed04

0801c60c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c60c:	b480      	push	{r7}
 801c60e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c610:	4b0b      	ldr	r3, [pc, #44]	; (801c640 <vPortSetupTimerInterrupt+0x34>)
 801c612:	2200      	movs	r2, #0
 801c614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c616:	4b0b      	ldr	r3, [pc, #44]	; (801c644 <vPortSetupTimerInterrupt+0x38>)
 801c618:	2200      	movs	r2, #0
 801c61a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c61c:	4b0a      	ldr	r3, [pc, #40]	; (801c648 <vPortSetupTimerInterrupt+0x3c>)
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	4a0a      	ldr	r2, [pc, #40]	; (801c64c <vPortSetupTimerInterrupt+0x40>)
 801c622:	fba2 2303 	umull	r2, r3, r2, r3
 801c626:	099b      	lsrs	r3, r3, #6
 801c628:	4a09      	ldr	r2, [pc, #36]	; (801c650 <vPortSetupTimerInterrupt+0x44>)
 801c62a:	3b01      	subs	r3, #1
 801c62c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c62e:	4b04      	ldr	r3, [pc, #16]	; (801c640 <vPortSetupTimerInterrupt+0x34>)
 801c630:	2207      	movs	r2, #7
 801c632:	601a      	str	r2, [r3, #0]
}
 801c634:	bf00      	nop
 801c636:	46bd      	mov	sp, r7
 801c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c63c:	4770      	bx	lr
 801c63e:	bf00      	nop
 801c640:	e000e010 	.word	0xe000e010
 801c644:	e000e018 	.word	0xe000e018
 801c648:	20000000 	.word	0x20000000
 801c64c:	10624dd3 	.word	0x10624dd3
 801c650:	e000e014 	.word	0xe000e014

0801c654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c664 <vPortEnableVFP+0x10>
 801c658:	6801      	ldr	r1, [r0, #0]
 801c65a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c65e:	6001      	str	r1, [r0, #0]
 801c660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c662:	bf00      	nop
 801c664:	e000ed88 	.word	0xe000ed88

0801c668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c668:	b480      	push	{r7}
 801c66a:	b085      	sub	sp, #20
 801c66c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c66e:	f3ef 8305 	mrs	r3, IPSR
 801c672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	2b0f      	cmp	r3, #15
 801c678:	d914      	bls.n	801c6a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c67a:	4a17      	ldr	r2, [pc, #92]	; (801c6d8 <vPortValidateInterruptPriority+0x70>)
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	4413      	add	r3, r2
 801c680:	781b      	ldrb	r3, [r3, #0]
 801c682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c684:	4b15      	ldr	r3, [pc, #84]	; (801c6dc <vPortValidateInterruptPriority+0x74>)
 801c686:	781b      	ldrb	r3, [r3, #0]
 801c688:	7afa      	ldrb	r2, [r7, #11]
 801c68a:	429a      	cmp	r2, r3
 801c68c:	d20a      	bcs.n	801c6a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c692:	f383 8811 	msr	BASEPRI, r3
 801c696:	f3bf 8f6f 	isb	sy
 801c69a:	f3bf 8f4f 	dsb	sy
 801c69e:	607b      	str	r3, [r7, #4]
}
 801c6a0:	bf00      	nop
 801c6a2:	e7fe      	b.n	801c6a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c6a4:	4b0e      	ldr	r3, [pc, #56]	; (801c6e0 <vPortValidateInterruptPriority+0x78>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c6ac:	4b0d      	ldr	r3, [pc, #52]	; (801c6e4 <vPortValidateInterruptPriority+0x7c>)
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	429a      	cmp	r2, r3
 801c6b2:	d90a      	bls.n	801c6ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6b8:	f383 8811 	msr	BASEPRI, r3
 801c6bc:	f3bf 8f6f 	isb	sy
 801c6c0:	f3bf 8f4f 	dsb	sy
 801c6c4:	603b      	str	r3, [r7, #0]
}
 801c6c6:	bf00      	nop
 801c6c8:	e7fe      	b.n	801c6c8 <vPortValidateInterruptPriority+0x60>
	}
 801c6ca:	bf00      	nop
 801c6cc:	3714      	adds	r7, #20
 801c6ce:	46bd      	mov	sp, r7
 801c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6d4:	4770      	bx	lr
 801c6d6:	bf00      	nop
 801c6d8:	e000e3f0 	.word	0xe000e3f0
 801c6dc:	2000bf40 	.word	0x2000bf40
 801c6e0:	e000ed0c 	.word	0xe000ed0c
 801c6e4:	2000bf44 	.word	0x2000bf44

0801c6e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b08a      	sub	sp, #40	; 0x28
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c6f4:	f7fe fcb6 	bl	801b064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c6f8:	4b5b      	ldr	r3, [pc, #364]	; (801c868 <pvPortMalloc+0x180>)
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d101      	bne.n	801c704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c700:	f000 f920 	bl	801c944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c704:	4b59      	ldr	r3, [pc, #356]	; (801c86c <pvPortMalloc+0x184>)
 801c706:	681a      	ldr	r2, [r3, #0]
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	4013      	ands	r3, r2
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	f040 8093 	bne.w	801c838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d01d      	beq.n	801c754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801c718:	2208      	movs	r2, #8
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	4413      	add	r3, r2
 801c71e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	f003 0307 	and.w	r3, r3, #7
 801c726:	2b00      	cmp	r3, #0
 801c728:	d014      	beq.n	801c754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	f023 0307 	bic.w	r3, r3, #7
 801c730:	3308      	adds	r3, #8
 801c732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	f003 0307 	and.w	r3, r3, #7
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d00a      	beq.n	801c754 <pvPortMalloc+0x6c>
	__asm volatile
 801c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c742:	f383 8811 	msr	BASEPRI, r3
 801c746:	f3bf 8f6f 	isb	sy
 801c74a:	f3bf 8f4f 	dsb	sy
 801c74e:	617b      	str	r3, [r7, #20]
}
 801c750:	bf00      	nop
 801c752:	e7fe      	b.n	801c752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d06e      	beq.n	801c838 <pvPortMalloc+0x150>
 801c75a:	4b45      	ldr	r3, [pc, #276]	; (801c870 <pvPortMalloc+0x188>)
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	687a      	ldr	r2, [r7, #4]
 801c760:	429a      	cmp	r2, r3
 801c762:	d869      	bhi.n	801c838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c764:	4b43      	ldr	r3, [pc, #268]	; (801c874 <pvPortMalloc+0x18c>)
 801c766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c768:	4b42      	ldr	r3, [pc, #264]	; (801c874 <pvPortMalloc+0x18c>)
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c76e:	e004      	b.n	801c77a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c77c:	685b      	ldr	r3, [r3, #4]
 801c77e:	687a      	ldr	r2, [r7, #4]
 801c780:	429a      	cmp	r2, r3
 801c782:	d903      	bls.n	801c78c <pvPortMalloc+0xa4>
 801c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d1f1      	bne.n	801c770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c78c:	4b36      	ldr	r3, [pc, #216]	; (801c868 <pvPortMalloc+0x180>)
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c792:	429a      	cmp	r2, r3
 801c794:	d050      	beq.n	801c838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c796:	6a3b      	ldr	r3, [r7, #32]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	2208      	movs	r2, #8
 801c79c:	4413      	add	r3, r2
 801c79e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7a2:	681a      	ldr	r2, [r3, #0]
 801c7a4:	6a3b      	ldr	r3, [r7, #32]
 801c7a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7aa:	685a      	ldr	r2, [r3, #4]
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	1ad2      	subs	r2, r2, r3
 801c7b0:	2308      	movs	r3, #8
 801c7b2:	005b      	lsls	r3, r3, #1
 801c7b4:	429a      	cmp	r2, r3
 801c7b6:	d91f      	bls.n	801c7f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	4413      	add	r3, r2
 801c7be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c7c0:	69bb      	ldr	r3, [r7, #24]
 801c7c2:	f003 0307 	and.w	r3, r3, #7
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d00a      	beq.n	801c7e0 <pvPortMalloc+0xf8>
	__asm volatile
 801c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7ce:	f383 8811 	msr	BASEPRI, r3
 801c7d2:	f3bf 8f6f 	isb	sy
 801c7d6:	f3bf 8f4f 	dsb	sy
 801c7da:	613b      	str	r3, [r7, #16]
}
 801c7dc:	bf00      	nop
 801c7de:	e7fe      	b.n	801c7de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7e2:	685a      	ldr	r2, [r3, #4]
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	1ad2      	subs	r2, r2, r3
 801c7e8:	69bb      	ldr	r3, [r7, #24]
 801c7ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c7f2:	69b8      	ldr	r0, [r7, #24]
 801c7f4:	f000 f908 	bl	801ca08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c7f8:	4b1d      	ldr	r3, [pc, #116]	; (801c870 <pvPortMalloc+0x188>)
 801c7fa:	681a      	ldr	r2, [r3, #0]
 801c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7fe:	685b      	ldr	r3, [r3, #4]
 801c800:	1ad3      	subs	r3, r2, r3
 801c802:	4a1b      	ldr	r2, [pc, #108]	; (801c870 <pvPortMalloc+0x188>)
 801c804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c806:	4b1a      	ldr	r3, [pc, #104]	; (801c870 <pvPortMalloc+0x188>)
 801c808:	681a      	ldr	r2, [r3, #0]
 801c80a:	4b1b      	ldr	r3, [pc, #108]	; (801c878 <pvPortMalloc+0x190>)
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	429a      	cmp	r2, r3
 801c810:	d203      	bcs.n	801c81a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c812:	4b17      	ldr	r3, [pc, #92]	; (801c870 <pvPortMalloc+0x188>)
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	4a18      	ldr	r2, [pc, #96]	; (801c878 <pvPortMalloc+0x190>)
 801c818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c81c:	685a      	ldr	r2, [r3, #4]
 801c81e:	4b13      	ldr	r3, [pc, #76]	; (801c86c <pvPortMalloc+0x184>)
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	431a      	orrs	r2, r3
 801c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c82a:	2200      	movs	r2, #0
 801c82c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c82e:	4b13      	ldr	r3, [pc, #76]	; (801c87c <pvPortMalloc+0x194>)
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	3301      	adds	r3, #1
 801c834:	4a11      	ldr	r2, [pc, #68]	; (801c87c <pvPortMalloc+0x194>)
 801c836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c838:	f7fe fc22 	bl	801b080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c83c:	69fb      	ldr	r3, [r7, #28]
 801c83e:	f003 0307 	and.w	r3, r3, #7
 801c842:	2b00      	cmp	r3, #0
 801c844:	d00a      	beq.n	801c85c <pvPortMalloc+0x174>
	__asm volatile
 801c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c84a:	f383 8811 	msr	BASEPRI, r3
 801c84e:	f3bf 8f6f 	isb	sy
 801c852:	f3bf 8f4f 	dsb	sy
 801c856:	60fb      	str	r3, [r7, #12]
}
 801c858:	bf00      	nop
 801c85a:	e7fe      	b.n	801c85a <pvPortMalloc+0x172>
	return pvReturn;
 801c85c:	69fb      	ldr	r3, [r7, #28]
}
 801c85e:	4618      	mov	r0, r3
 801c860:	3728      	adds	r7, #40	; 0x28
 801c862:	46bd      	mov	sp, r7
 801c864:	bd80      	pop	{r7, pc}
 801c866:	bf00      	nop
 801c868:	2000fb50 	.word	0x2000fb50
 801c86c:	2000fb64 	.word	0x2000fb64
 801c870:	2000fb54 	.word	0x2000fb54
 801c874:	2000fb48 	.word	0x2000fb48
 801c878:	2000fb58 	.word	0x2000fb58
 801c87c:	2000fb5c 	.word	0x2000fb5c

0801c880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c880:	b580      	push	{r7, lr}
 801c882:	b086      	sub	sp, #24
 801c884:	af00      	add	r7, sp, #0
 801c886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d04d      	beq.n	801c92e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c892:	2308      	movs	r3, #8
 801c894:	425b      	negs	r3, r3
 801c896:	697a      	ldr	r2, [r7, #20]
 801c898:	4413      	add	r3, r2
 801c89a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c89c:	697b      	ldr	r3, [r7, #20]
 801c89e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c8a0:	693b      	ldr	r3, [r7, #16]
 801c8a2:	685a      	ldr	r2, [r3, #4]
 801c8a4:	4b24      	ldr	r3, [pc, #144]	; (801c938 <vPortFree+0xb8>)
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	4013      	ands	r3, r2
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d10a      	bne.n	801c8c4 <vPortFree+0x44>
	__asm volatile
 801c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8b2:	f383 8811 	msr	BASEPRI, r3
 801c8b6:	f3bf 8f6f 	isb	sy
 801c8ba:	f3bf 8f4f 	dsb	sy
 801c8be:	60fb      	str	r3, [r7, #12]
}
 801c8c0:	bf00      	nop
 801c8c2:	e7fe      	b.n	801c8c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c8c4:	693b      	ldr	r3, [r7, #16]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d00a      	beq.n	801c8e2 <vPortFree+0x62>
	__asm volatile
 801c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8d0:	f383 8811 	msr	BASEPRI, r3
 801c8d4:	f3bf 8f6f 	isb	sy
 801c8d8:	f3bf 8f4f 	dsb	sy
 801c8dc:	60bb      	str	r3, [r7, #8]
}
 801c8de:	bf00      	nop
 801c8e0:	e7fe      	b.n	801c8e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c8e2:	693b      	ldr	r3, [r7, #16]
 801c8e4:	685a      	ldr	r2, [r3, #4]
 801c8e6:	4b14      	ldr	r3, [pc, #80]	; (801c938 <vPortFree+0xb8>)
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	4013      	ands	r3, r2
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d01e      	beq.n	801c92e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c8f0:	693b      	ldr	r3, [r7, #16]
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d11a      	bne.n	801c92e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c8f8:	693b      	ldr	r3, [r7, #16]
 801c8fa:	685a      	ldr	r2, [r3, #4]
 801c8fc:	4b0e      	ldr	r3, [pc, #56]	; (801c938 <vPortFree+0xb8>)
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	43db      	mvns	r3, r3
 801c902:	401a      	ands	r2, r3
 801c904:	693b      	ldr	r3, [r7, #16]
 801c906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c908:	f7fe fbac 	bl	801b064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c90c:	693b      	ldr	r3, [r7, #16]
 801c90e:	685a      	ldr	r2, [r3, #4]
 801c910:	4b0a      	ldr	r3, [pc, #40]	; (801c93c <vPortFree+0xbc>)
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	4413      	add	r3, r2
 801c916:	4a09      	ldr	r2, [pc, #36]	; (801c93c <vPortFree+0xbc>)
 801c918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c91a:	6938      	ldr	r0, [r7, #16]
 801c91c:	f000 f874 	bl	801ca08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c920:	4b07      	ldr	r3, [pc, #28]	; (801c940 <vPortFree+0xc0>)
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	3301      	adds	r3, #1
 801c926:	4a06      	ldr	r2, [pc, #24]	; (801c940 <vPortFree+0xc0>)
 801c928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c92a:	f7fe fba9 	bl	801b080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c92e:	bf00      	nop
 801c930:	3718      	adds	r7, #24
 801c932:	46bd      	mov	sp, r7
 801c934:	bd80      	pop	{r7, pc}
 801c936:	bf00      	nop
 801c938:	2000fb64 	.word	0x2000fb64
 801c93c:	2000fb54 	.word	0x2000fb54
 801c940:	2000fb60 	.word	0x2000fb60

0801c944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c944:	b480      	push	{r7}
 801c946:	b085      	sub	sp, #20
 801c948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c94a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801c94e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c950:	4b27      	ldr	r3, [pc, #156]	; (801c9f0 <prvHeapInit+0xac>)
 801c952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	f003 0307 	and.w	r3, r3, #7
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d00c      	beq.n	801c978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	3307      	adds	r3, #7
 801c962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	f023 0307 	bic.w	r3, r3, #7
 801c96a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c96c:	68ba      	ldr	r2, [r7, #8]
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	1ad3      	subs	r3, r2, r3
 801c972:	4a1f      	ldr	r2, [pc, #124]	; (801c9f0 <prvHeapInit+0xac>)
 801c974:	4413      	add	r3, r2
 801c976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c97c:	4a1d      	ldr	r2, [pc, #116]	; (801c9f4 <prvHeapInit+0xb0>)
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c982:	4b1c      	ldr	r3, [pc, #112]	; (801c9f4 <prvHeapInit+0xb0>)
 801c984:	2200      	movs	r2, #0
 801c986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	68ba      	ldr	r2, [r7, #8]
 801c98c:	4413      	add	r3, r2
 801c98e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c990:	2208      	movs	r2, #8
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	1a9b      	subs	r3, r3, r2
 801c996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	f023 0307 	bic.w	r3, r3, #7
 801c99e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	4a15      	ldr	r2, [pc, #84]	; (801c9f8 <prvHeapInit+0xb4>)
 801c9a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c9a6:	4b14      	ldr	r3, [pc, #80]	; (801c9f8 <prvHeapInit+0xb4>)
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	2200      	movs	r2, #0
 801c9ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c9ae:	4b12      	ldr	r3, [pc, #72]	; (801c9f8 <prvHeapInit+0xb4>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	2200      	movs	r2, #0
 801c9b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c9ba:	683b      	ldr	r3, [r7, #0]
 801c9bc:	68fa      	ldr	r2, [r7, #12]
 801c9be:	1ad2      	subs	r2, r2, r3
 801c9c0:	683b      	ldr	r3, [r7, #0]
 801c9c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c9c4:	4b0c      	ldr	r3, [pc, #48]	; (801c9f8 <prvHeapInit+0xb4>)
 801c9c6:	681a      	ldr	r2, [r3, #0]
 801c9c8:	683b      	ldr	r3, [r7, #0]
 801c9ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c9cc:	683b      	ldr	r3, [r7, #0]
 801c9ce:	685b      	ldr	r3, [r3, #4]
 801c9d0:	4a0a      	ldr	r2, [pc, #40]	; (801c9fc <prvHeapInit+0xb8>)
 801c9d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c9d4:	683b      	ldr	r3, [r7, #0]
 801c9d6:	685b      	ldr	r3, [r3, #4]
 801c9d8:	4a09      	ldr	r2, [pc, #36]	; (801ca00 <prvHeapInit+0xbc>)
 801c9da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c9dc:	4b09      	ldr	r3, [pc, #36]	; (801ca04 <prvHeapInit+0xc0>)
 801c9de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c9e2:	601a      	str	r2, [r3, #0]
}
 801c9e4:	bf00      	nop
 801c9e6:	3714      	adds	r7, #20
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ee:	4770      	bx	lr
 801c9f0:	2000bf48 	.word	0x2000bf48
 801c9f4:	2000fb48 	.word	0x2000fb48
 801c9f8:	2000fb50 	.word	0x2000fb50
 801c9fc:	2000fb58 	.word	0x2000fb58
 801ca00:	2000fb54 	.word	0x2000fb54
 801ca04:	2000fb64 	.word	0x2000fb64

0801ca08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801ca08:	b480      	push	{r7}
 801ca0a:	b085      	sub	sp, #20
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801ca10:	4b28      	ldr	r3, [pc, #160]	; (801cab4 <prvInsertBlockIntoFreeList+0xac>)
 801ca12:	60fb      	str	r3, [r7, #12]
 801ca14:	e002      	b.n	801ca1c <prvInsertBlockIntoFreeList+0x14>
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	60fb      	str	r3, [r7, #12]
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	687a      	ldr	r2, [r7, #4]
 801ca22:	429a      	cmp	r2, r3
 801ca24:	d8f7      	bhi.n	801ca16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	685b      	ldr	r3, [r3, #4]
 801ca2e:	68ba      	ldr	r2, [r7, #8]
 801ca30:	4413      	add	r3, r2
 801ca32:	687a      	ldr	r2, [r7, #4]
 801ca34:	429a      	cmp	r2, r3
 801ca36:	d108      	bne.n	801ca4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ca38:	68fb      	ldr	r3, [r7, #12]
 801ca3a:	685a      	ldr	r2, [r3, #4]
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	685b      	ldr	r3, [r3, #4]
 801ca40:	441a      	add	r2, r3
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	685b      	ldr	r3, [r3, #4]
 801ca52:	68ba      	ldr	r2, [r7, #8]
 801ca54:	441a      	add	r2, r3
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	429a      	cmp	r2, r3
 801ca5c:	d118      	bne.n	801ca90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	681a      	ldr	r2, [r3, #0]
 801ca62:	4b15      	ldr	r3, [pc, #84]	; (801cab8 <prvInsertBlockIntoFreeList+0xb0>)
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	429a      	cmp	r2, r3
 801ca68:	d00d      	beq.n	801ca86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	685a      	ldr	r2, [r3, #4]
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	685b      	ldr	r3, [r3, #4]
 801ca74:	441a      	add	r2, r3
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ca7a:	68fb      	ldr	r3, [r7, #12]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	681a      	ldr	r2, [r3, #0]
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	601a      	str	r2, [r3, #0]
 801ca84:	e008      	b.n	801ca98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801ca86:	4b0c      	ldr	r3, [pc, #48]	; (801cab8 <prvInsertBlockIntoFreeList+0xb0>)
 801ca88:	681a      	ldr	r2, [r3, #0]
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	601a      	str	r2, [r3, #0]
 801ca8e:	e003      	b.n	801ca98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	681a      	ldr	r2, [r3, #0]
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ca98:	68fa      	ldr	r2, [r7, #12]
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	429a      	cmp	r2, r3
 801ca9e:	d002      	beq.n	801caa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	687a      	ldr	r2, [r7, #4]
 801caa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801caa6:	bf00      	nop
 801caa8:	3714      	adds	r7, #20
 801caaa:	46bd      	mov	sp, r7
 801caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cab0:	4770      	bx	lr
 801cab2:	bf00      	nop
 801cab4:	2000fb48 	.word	0x2000fb48
 801cab8:	2000fb50 	.word	0x2000fb50

0801cabc <vHWOutInit>:
void vGetAverDataFromRAW(uint16_t * Indata, uint16_t *OutData, uint16_t InIndex, uint16_t OutIndex, uint8_t Size,uint16_t FrameSize, uint16_t BufferSize);



void vHWOutInit(OUT_NAME_TYPE out_name, TIM_HandleTypeDef * ptim, uint32_t  channel,  float power, uint16_t overload_timer, float overload_power, uint8_t PWM)
{
 801cabc:	b590      	push	{r4, r7, lr}
 801cabe:	b093      	sub	sp, #76	; 0x4c
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	6139      	str	r1, [r7, #16]
 801cac4:	60fa      	str	r2, [r7, #12]
 801cac6:	ed87 0a02 	vstr	s0, [r7, #8]
 801caca:	461a      	mov	r2, r3
 801cacc:	edc7 0a01 	vstr	s1, [r7, #4]
 801cad0:	4603      	mov	r3, r0
 801cad2:	75fb      	strb	r3, [r7, #23]
 801cad4:	4613      	mov	r3, r2
 801cad6:	82bb      	strh	r3, [r7, #20]
	out[out_name].ptim = ptim;
 801cad8:	7dfb      	ldrb	r3, [r7, #23]
 801cada:	4a3c      	ldr	r2, [pc, #240]	; (801cbcc <vHWOutInit+0x110>)
 801cadc:	2158      	movs	r1, #88	; 0x58
 801cade:	fb01 f303 	mul.w	r3, r1, r3
 801cae2:	4413      	add	r3, r2
 801cae4:	3304      	adds	r3, #4
 801cae6:	693a      	ldr	r2, [r7, #16]
 801cae8:	601a      	str	r2, [r3, #0]
	out[out_name].channel = channel;
 801caea:	7dfb      	ldrb	r3, [r7, #23]
 801caec:	4a37      	ldr	r2, [pc, #220]	; (801cbcc <vHWOutInit+0x110>)
 801caee:	2158      	movs	r1, #88	; 0x58
 801caf0:	fb01 f303 	mul.w	r3, r1, r3
 801caf4:	4413      	add	r3, r2
 801caf6:	68fa      	ldr	r2, [r7, #12]
 801caf8:	601a      	str	r2, [r3, #0]
	out[out_name].power = power;
 801cafa:	7dfb      	ldrb	r3, [r7, #23]
 801cafc:	4a33      	ldr	r2, [pc, #204]	; (801cbcc <vHWOutInit+0x110>)
 801cafe:	2158      	movs	r1, #88	; 0x58
 801cb00:	fb01 f303 	mul.w	r3, r1, r3
 801cb04:	4413      	add	r3, r2
 801cb06:	330c      	adds	r3, #12
 801cb08:	68ba      	ldr	r2, [r7, #8]
 801cb0a:	601a      	str	r2, [r3, #0]
	out[out_name].overload_power = overload_power;
 801cb0c:	7dfb      	ldrb	r3, [r7, #23]
 801cb0e:	4a2f      	ldr	r2, [pc, #188]	; (801cbcc <vHWOutInit+0x110>)
 801cb10:	2158      	movs	r1, #88	; 0x58
 801cb12:	fb01 f303 	mul.w	r3, r1, r3
 801cb16:	4413      	add	r3, r2
 801cb18:	3310      	adds	r3, #16
 801cb1a:	687a      	ldr	r2, [r7, #4]
 801cb1c:	601a      	str	r2, [r3, #0]
	out[out_name].overload_config_timer = overload_timer;
 801cb1e:	7dfb      	ldrb	r3, [r7, #23]
 801cb20:	4a2a      	ldr	r2, [pc, #168]	; (801cbcc <vHWOutInit+0x110>)
 801cb22:	2158      	movs	r1, #88	; 0x58
 801cb24:	fb01 f303 	mul.w	r3, r1, r3
 801cb28:	4413      	add	r3, r2
 801cb2a:	3316      	adds	r3, #22
 801cb2c:	8aba      	ldrh	r2, [r7, #20]
 801cb2e:	801a      	strh	r2, [r3, #0]
	out[out_name].overload_timer = 0;
 801cb30:	7dfb      	ldrb	r3, [r7, #23]
 801cb32:	4a26      	ldr	r2, [pc, #152]	; (801cbcc <vHWOutInit+0x110>)
 801cb34:	2158      	movs	r1, #88	; 0x58
 801cb36:	fb01 f303 	mul.w	r3, r1, r3
 801cb3a:	4413      	add	r3, r2
 801cb3c:	3318      	adds	r3, #24
 801cb3e:	2200      	movs	r2, #0
 801cb40:	801a      	strh	r2, [r3, #0]
	out[out_name].out_logic_state =OUT_OFF;
 801cb42:	7dfb      	ldrb	r3, [r7, #23]
 801cb44:	4a21      	ldr	r2, [pc, #132]	; (801cbcc <vHWOutInit+0x110>)
 801cb46:	2158      	movs	r1, #88	; 0x58
 801cb48:	fb01 f303 	mul.w	r3, r1, r3
 801cb4c:	4413      	add	r3, r2
 801cb4e:	3308      	adds	r3, #8
 801cb50:	2201      	movs	r2, #1
 801cb52:	701a      	strb	r2, [r3, #0]
	out[out_name].out_state =STATE_OUT_OFF;
 801cb54:	7dfb      	ldrb	r3, [r7, #23]
 801cb56:	4a1d      	ldr	r2, [pc, #116]	; (801cbcc <vHWOutInit+0x110>)
 801cb58:	2158      	movs	r1, #88	; 0x58
 801cb5a:	fb01 f303 	mul.w	r3, r1, r3
 801cb5e:	4413      	add	r3, r2
 801cb60:	3309      	adds	r3, #9
 801cb62:	2200      	movs	r2, #0
 801cb64:	701a      	strb	r2, [r3, #0]
	out[out_name].error_flag = ERROR_OFF;
 801cb66:	7dfb      	ldrb	r3, [r7, #23]
 801cb68:	4a18      	ldr	r2, [pc, #96]	; (801cbcc <vHWOutInit+0x110>)
 801cb6a:	2158      	movs	r1, #88	; 0x58
 801cb6c:	fb01 f303 	mul.w	r3, r1, r3
 801cb70:	4413      	add	r3, r2
 801cb72:	3320      	adds	r3, #32
 801cb74:	2200      	movs	r2, #0
 801cb76:	701a      	strb	r2, [r3, #0]
	out[out_name].error_count = 0;
 801cb78:	7dfb      	ldrb	r3, [r7, #23]
 801cb7a:	4a14      	ldr	r2, [pc, #80]	; (801cbcc <vHWOutInit+0x110>)
 801cb7c:	2158      	movs	r1, #88	; 0x58
 801cb7e:	fb01 f303 	mul.w	r3, r1, r3
 801cb82:	4413      	add	r3, r2
 801cb84:	331a      	adds	r3, #26
 801cb86:	2200      	movs	r2, #0
 801cb88:	701a      	strb	r2, [r3, #0]
	out[out_name].restart_timer =0;
 801cb8a:	7dfb      	ldrb	r3, [r7, #23]
 801cb8c:	4a0f      	ldr	r2, [pc, #60]	; (801cbcc <vHWOutInit+0x110>)
 801cb8e:	2158      	movs	r1, #88	; 0x58
 801cb90:	fb01 f303 	mul.w	r3, r1, r3
 801cb94:	4413      	add	r3, r2
 801cb96:	331c      	adds	r3, #28
 801cb98:	2200      	movs	r2, #0
 801cb9a:	801a      	strh	r2, [r3, #0]
	out[out_name].restart_config_timer =1000;
 801cb9c:	7dfb      	ldrb	r3, [r7, #23]
 801cb9e:	4a0b      	ldr	r2, [pc, #44]	; (801cbcc <vHWOutInit+0x110>)
 801cba0:	2158      	movs	r1, #88	; 0x58
 801cba2:	fb01 f303 	mul.w	r3, r1, r3
 801cba6:	4413      	add	r3, r2
 801cba8:	331e      	adds	r3, #30
 801cbaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cbae:	801a      	strh	r2, [r3, #0]
	out[out_name].PWM = PWM;
 801cbb0:	7dfb      	ldrb	r3, [r7, #23]
 801cbb2:	4a06      	ldr	r2, [pc, #24]	; (801cbcc <vHWOutInit+0x110>)
 801cbb4:	2158      	movs	r1, #88	; 0x58
 801cbb6:	fb01 f303 	mul.w	r3, r1, r3
 801cbba:	4413      	add	r3, r2
 801cbbc:	3314      	adds	r3, #20
 801cbbe:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801cbc2:	701a      	strb	r2, [r3, #0]
	for (uint8_t j=0; j< 4U; j++)
 801cbc4:	2300      	movs	r3, #0
 801cbc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801cbca:	e112      	b.n	801cdf2 <vHWOutInit+0x336>
 801cbcc:	2000fbfc 	.word	0x2000fbfc
	{
		//Проверяем что хоты одно значение АЦП не равно нулю,что-то не словить делением на ноль.
		if ((CurSensData[out_name][j].Data !=0) || (CurSensData[out_name][j+1].Data !=0 ))
 801cbd0:	7dfa      	ldrb	r2, [r7, #23]
 801cbd2:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 801cbd6:	48b5      	ldr	r0, [pc, #724]	; (801ceac <vHWOutInit+0x3f0>)
 801cbd8:	4613      	mov	r3, r2
 801cbda:	009b      	lsls	r3, r3, #2
 801cbdc:	4413      	add	r3, r2
 801cbde:	440b      	add	r3, r1
 801cbe0:	00db      	lsls	r3, r3, #3
 801cbe2:	4403      	add	r3, r0
 801cbe4:	3304      	adds	r3, #4
 801cbe6:	edd3 7a00 	vldr	s15, [r3]
 801cbea:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbf2:	d113      	bne.n	801cc1c <vHWOutInit+0x160>
 801cbf4:	7dfa      	ldrb	r2, [r7, #23]
 801cbf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cbfa:	1c59      	adds	r1, r3, #1
 801cbfc:	48ab      	ldr	r0, [pc, #684]	; (801ceac <vHWOutInit+0x3f0>)
 801cbfe:	4613      	mov	r3, r2
 801cc00:	009b      	lsls	r3, r3, #2
 801cc02:	4413      	add	r3, r2
 801cc04:	440b      	add	r3, r1
 801cc06:	00db      	lsls	r3, r3, #3
 801cc08:	4403      	add	r3, r0
 801cc0a:	3304      	adds	r3, #4
 801cc0c:	edd3 7a00 	vldr	s15, [r3]
 801cc10:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc18:	f000 80e6 	beq.w	801cde8 <vHWOutInit+0x32c>
		{
			float temp,temp1,temp2;
			out[out_name].CSC[j].data = CurSensData[out_name][j+1].Data;
 801cc1c:	7dfa      	ldrb	r2, [r7, #23]
 801cc1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cc22:	1c59      	adds	r1, r3, #1
 801cc24:	48a1      	ldr	r0, [pc, #644]	; (801ceac <vHWOutInit+0x3f0>)
 801cc26:	4613      	mov	r3, r2
 801cc28:	009b      	lsls	r3, r3, #2
 801cc2a:	4413      	add	r3, r2
 801cc2c:	440b      	add	r3, r1
 801cc2e:	00db      	lsls	r3, r3, #3
 801cc30:	4403      	add	r3, r0
 801cc32:	3304      	adds	r3, #4
 801cc34:	edd3 7a00 	vldr	s15, [r3]
 801cc38:	7df9      	ldrb	r1, [r7, #23]
 801cc3a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801cc3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cc42:	ee17 3a90 	vmov	r3, s15
 801cc46:	b29c      	uxth	r4, r3
 801cc48:	4899      	ldr	r0, [pc, #612]	; (801ceb0 <vHWOutInit+0x3f4>)
 801cc4a:	4613      	mov	r3, r2
 801cc4c:	005b      	lsls	r3, r3, #1
 801cc4e:	4413      	add	r3, r2
 801cc50:	009b      	lsls	r3, r3, #2
 801cc52:	2258      	movs	r2, #88	; 0x58
 801cc54:	fb01 f202 	mul.w	r2, r1, r2
 801cc58:	4413      	add	r3, r2
 801cc5a:	4403      	add	r3, r0
 801cc5c:	3324      	adds	r3, #36	; 0x24
 801cc5e:	4622      	mov	r2, r4
 801cc60:	801a      	strh	r2, [r3, #0]
			out[out_name].CSC[j].k = (float)( CurSensData[out_name][j].KOOF -  CurSensData[out_name][j+1].KOOF) /(float) ( CurSensData[out_name][j].Data- CurSensData[out_name][j+1].Data);
 801cc62:	7dfa      	ldrb	r2, [r7, #23]
 801cc64:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 801cc68:	4890      	ldr	r0, [pc, #576]	; (801ceac <vHWOutInit+0x3f0>)
 801cc6a:	4613      	mov	r3, r2
 801cc6c:	009b      	lsls	r3, r3, #2
 801cc6e:	4413      	add	r3, r2
 801cc70:	440b      	add	r3, r1
 801cc72:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 801cc76:	461c      	mov	r4, r3
 801cc78:	7dfa      	ldrb	r2, [r7, #23]
 801cc7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cc7e:	1c59      	adds	r1, r3, #1
 801cc80:	488a      	ldr	r0, [pc, #552]	; (801ceac <vHWOutInit+0x3f0>)
 801cc82:	4613      	mov	r3, r2
 801cc84:	009b      	lsls	r3, r3, #2
 801cc86:	4413      	add	r3, r2
 801cc88:	440b      	add	r3, r1
 801cc8a:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 801cc8e:	1ae3      	subs	r3, r4, r3
 801cc90:	ee07 3a90 	vmov	s15, r3
 801cc94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801cc98:	7dfa      	ldrb	r2, [r7, #23]
 801cc9a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 801cc9e:	4883      	ldr	r0, [pc, #524]	; (801ceac <vHWOutInit+0x3f0>)
 801cca0:	4613      	mov	r3, r2
 801cca2:	009b      	lsls	r3, r3, #2
 801cca4:	4413      	add	r3, r2
 801cca6:	440b      	add	r3, r1
 801cca8:	00db      	lsls	r3, r3, #3
 801ccaa:	4403      	add	r3, r0
 801ccac:	3304      	adds	r3, #4
 801ccae:	ed93 7a00 	vldr	s14, [r3]
 801ccb2:	7dfa      	ldrb	r2, [r7, #23]
 801ccb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ccb8:	1c59      	adds	r1, r3, #1
 801ccba:	487c      	ldr	r0, [pc, #496]	; (801ceac <vHWOutInit+0x3f0>)
 801ccbc:	4613      	mov	r3, r2
 801ccbe:	009b      	lsls	r3, r3, #2
 801ccc0:	4413      	add	r3, r2
 801ccc2:	440b      	add	r3, r1
 801ccc4:	00db      	lsls	r3, r3, #3
 801ccc6:	4403      	add	r3, r0
 801ccc8:	3304      	adds	r3, #4
 801ccca:	edd3 7a00 	vldr	s15, [r3]
 801ccce:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ccd2:	7df9      	ldrb	r1, [r7, #23]
 801ccd4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801ccd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ccdc:	4874      	ldr	r0, [pc, #464]	; (801ceb0 <vHWOutInit+0x3f4>)
 801ccde:	4613      	mov	r3, r2
 801cce0:	005b      	lsls	r3, r3, #1
 801cce2:	4413      	add	r3, r2
 801cce4:	009b      	lsls	r3, r3, #2
 801cce6:	2258      	movs	r2, #88	; 0x58
 801cce8:	fb01 f202 	mul.w	r2, r1, r2
 801ccec:	4413      	add	r3, r2
 801ccee:	4403      	add	r3, r0
 801ccf0:	3328      	adds	r3, #40	; 0x28
 801ccf2:	edc3 7a00 	vstr	s15, [r3]
			temp =CurSensData[out_name][j].Data * CurSensData[out_name][j+1].KOOF;
 801ccf6:	7dfa      	ldrb	r2, [r7, #23]
 801ccf8:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 801ccfc:	486b      	ldr	r0, [pc, #428]	; (801ceac <vHWOutInit+0x3f0>)
 801ccfe:	4613      	mov	r3, r2
 801cd00:	009b      	lsls	r3, r3, #2
 801cd02:	4413      	add	r3, r2
 801cd04:	440b      	add	r3, r1
 801cd06:	00db      	lsls	r3, r3, #3
 801cd08:	4403      	add	r3, r0
 801cd0a:	3304      	adds	r3, #4
 801cd0c:	ed93 7a00 	vldr	s14, [r3]
 801cd10:	7dfa      	ldrb	r2, [r7, #23]
 801cd12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cd16:	1c59      	adds	r1, r3, #1
 801cd18:	4864      	ldr	r0, [pc, #400]	; (801ceac <vHWOutInit+0x3f0>)
 801cd1a:	4613      	mov	r3, r2
 801cd1c:	009b      	lsls	r3, r3, #2
 801cd1e:	4413      	add	r3, r2
 801cd20:	440b      	add	r3, r1
 801cd22:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 801cd26:	ee07 3a90 	vmov	s15, r3
 801cd2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cd32:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			temp1 = CurSensData[out_name][j+1].Data * CurSensData[out_name][j].KOOF;
 801cd36:	7dfa      	ldrb	r2, [r7, #23]
 801cd38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cd3c:	1c59      	adds	r1, r3, #1
 801cd3e:	485b      	ldr	r0, [pc, #364]	; (801ceac <vHWOutInit+0x3f0>)
 801cd40:	4613      	mov	r3, r2
 801cd42:	009b      	lsls	r3, r3, #2
 801cd44:	4413      	add	r3, r2
 801cd46:	440b      	add	r3, r1
 801cd48:	00db      	lsls	r3, r3, #3
 801cd4a:	4403      	add	r3, r0
 801cd4c:	3304      	adds	r3, #4
 801cd4e:	ed93 7a00 	vldr	s14, [r3]
 801cd52:	7dfa      	ldrb	r2, [r7, #23]
 801cd54:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 801cd58:	4854      	ldr	r0, [pc, #336]	; (801ceac <vHWOutInit+0x3f0>)
 801cd5a:	4613      	mov	r3, r2
 801cd5c:	009b      	lsls	r3, r3, #2
 801cd5e:	4413      	add	r3, r2
 801cd60:	440b      	add	r3, r1
 801cd62:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 801cd66:	ee07 3a90 	vmov	s15, r3
 801cd6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cd72:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			temp2 = CurSensData[out_name][j+1].Data - CurSensData[out_name][j].Data;
 801cd76:	7dfa      	ldrb	r2, [r7, #23]
 801cd78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cd7c:	1c59      	adds	r1, r3, #1
 801cd7e:	484b      	ldr	r0, [pc, #300]	; (801ceac <vHWOutInit+0x3f0>)
 801cd80:	4613      	mov	r3, r2
 801cd82:	009b      	lsls	r3, r3, #2
 801cd84:	4413      	add	r3, r2
 801cd86:	440b      	add	r3, r1
 801cd88:	00db      	lsls	r3, r3, #3
 801cd8a:	4403      	add	r3, r0
 801cd8c:	3304      	adds	r3, #4
 801cd8e:	ed93 7a00 	vldr	s14, [r3]
 801cd92:	7dfa      	ldrb	r2, [r7, #23]
 801cd94:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 801cd98:	4844      	ldr	r0, [pc, #272]	; (801ceac <vHWOutInit+0x3f0>)
 801cd9a:	4613      	mov	r3, r2
 801cd9c:	009b      	lsls	r3, r3, #2
 801cd9e:	4413      	add	r3, r2
 801cda0:	440b      	add	r3, r1
 801cda2:	00db      	lsls	r3, r3, #3
 801cda4:	4403      	add	r3, r0
 801cda6:	3304      	adds	r3, #4
 801cda8:	edd3 7a00 	vldr	s15, [r3]
 801cdac:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cdb0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			out[out_name].CSC[j].b = (temp1 - temp)/temp2;
 801cdb4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801cdb8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801cdbc:	ee77 6a67 	vsub.f32	s13, s14, s15
 801cdc0:	7df9      	ldrb	r1, [r7, #23]
 801cdc2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801cdc6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801cdca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cdce:	4838      	ldr	r0, [pc, #224]	; (801ceb0 <vHWOutInit+0x3f4>)
 801cdd0:	4613      	mov	r3, r2
 801cdd2:	005b      	lsls	r3, r3, #1
 801cdd4:	4413      	add	r3, r2
 801cdd6:	009b      	lsls	r3, r3, #2
 801cdd8:	2258      	movs	r2, #88	; 0x58
 801cdda:	fb01 f202 	mul.w	r2, r1, r2
 801cdde:	4413      	add	r3, r2
 801cde0:	4403      	add	r3, r0
 801cde2:	332c      	adds	r3, #44	; 0x2c
 801cde4:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t j=0; j< 4U; j++)
 801cde8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cdec:	3301      	adds	r3, #1
 801cdee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801cdf2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cdf6:	2b03      	cmp	r3, #3
 801cdf8:	f67f aeea 	bls.w	801cbd0 <vHWOutInit+0x114>
		}
	}

    TIM_OC_InitTypeDef sConfigOC = {0};
 801cdfc:	f107 031c 	add.w	r3, r7, #28
 801ce00:	2200      	movs	r2, #0
 801ce02:	601a      	str	r2, [r3, #0]
 801ce04:	605a      	str	r2, [r3, #4]
 801ce06:	609a      	str	r2, [r3, #8]
 801ce08:	60da      	str	r2, [r3, #12]
 801ce0a:	611a      	str	r2, [r3, #16]
 801ce0c:	615a      	str	r2, [r3, #20]
 801ce0e:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801ce10:	2360      	movs	r3, #96	; 0x60
 801ce12:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = (uint32_t)( out[out_name].ptim ->Init.Period *(float)out[out_name].PWM/100);
 801ce14:	7dfb      	ldrb	r3, [r7, #23]
 801ce16:	4a26      	ldr	r2, [pc, #152]	; (801ceb0 <vHWOutInit+0x3f4>)
 801ce18:	2158      	movs	r1, #88	; 0x58
 801ce1a:	fb01 f303 	mul.w	r3, r1, r3
 801ce1e:	4413      	add	r3, r2
 801ce20:	3304      	adds	r3, #4
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	68db      	ldr	r3, [r3, #12]
 801ce26:	ee07 3a90 	vmov	s15, r3
 801ce2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ce2e:	7dfb      	ldrb	r3, [r7, #23]
 801ce30:	4a1f      	ldr	r2, [pc, #124]	; (801ceb0 <vHWOutInit+0x3f4>)
 801ce32:	2158      	movs	r1, #88	; 0x58
 801ce34:	fb01 f303 	mul.w	r3, r1, r3
 801ce38:	4413      	add	r3, r2
 801ce3a:	3314      	adds	r3, #20
 801ce3c:	781b      	ldrb	r3, [r3, #0]
 801ce3e:	ee07 3a90 	vmov	s15, r3
 801ce42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce46:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ce4a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 801ceb4 <vHWOutInit+0x3f8>
 801ce4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ce52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ce56:	ee17 3a90 	vmov	r3, s15
 801ce5a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801ce5c:	2300      	movs	r3, #0
 801ce5e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801ce60:	2300      	movs	r3, #0
 801ce62:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801ce64:	2300      	movs	r3, #0
 801ce66:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801ce68:	2300      	movs	r3, #0
 801ce6a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(out[out_name].ptim , &sConfigOC, out[out_name].channel) != HAL_OK)
 801ce70:	7dfb      	ldrb	r3, [r7, #23]
 801ce72:	4a0f      	ldr	r2, [pc, #60]	; (801ceb0 <vHWOutInit+0x3f4>)
 801ce74:	2158      	movs	r1, #88	; 0x58
 801ce76:	fb01 f303 	mul.w	r3, r1, r3
 801ce7a:	4413      	add	r3, r2
 801ce7c:	3304      	adds	r3, #4
 801ce7e:	6818      	ldr	r0, [r3, #0]
 801ce80:	7dfb      	ldrb	r3, [r7, #23]
 801ce82:	4a0b      	ldr	r2, [pc, #44]	; (801ceb0 <vHWOutInit+0x3f4>)
 801ce84:	2158      	movs	r1, #88	; 0x58
 801ce86:	fb01 f303 	mul.w	r3, r1, r3
 801ce8a:	4413      	add	r3, r2
 801ce8c:	681a      	ldr	r2, [r3, #0]
 801ce8e:	f107 031c 	add.w	r3, r7, #28
 801ce92:	4619      	mov	r1, r3
 801ce94:	f7e9 fca8 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 801ce98:	4603      	mov	r3, r0
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d001      	beq.n	801cea2 <vHWOutInit+0x3e6>
	{
	    Error_Handler();
 801ce9e:	f7e5 fabf 	bl	8002420 <Error_Handler>
	}
}
 801cea2:	bf00      	nop
 801cea4:	374c      	adds	r7, #76	; 0x4c
 801cea6:	46bd      	mov	sp, r7
 801cea8:	bd90      	pop	{r4, r7, pc}
 801ceaa:	bf00      	nop
 801ceac:	20000010 	.word	0x20000010
 801ceb0:	2000fbfc 	.word	0x2000fbfc
 801ceb4:	42c80000 	.word	0x42c80000

0801ceb8 <vHWOutResete>:
	xEventGroupClearBits (xOutEvent, ( 0x1 < out_name) );
}


void vHWOutResete( OUT_NAME_TYPE out_name)
{
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b082      	sub	sp, #8
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	4603      	mov	r3, r0
 801cec0:	71fb      	strb	r3, [r7, #7]
	 HAL_TIM_PWM_Stop(out[out_name].ptim,  out[out_name].channel);
 801cec2:	79fb      	ldrb	r3, [r7, #7]
 801cec4:	4a10      	ldr	r2, [pc, #64]	; (801cf08 <vHWOutResete+0x50>)
 801cec6:	2158      	movs	r1, #88	; 0x58
 801cec8:	fb01 f303 	mul.w	r3, r1, r3
 801cecc:	4413      	add	r3, r2
 801cece:	3304      	adds	r3, #4
 801ced0:	681a      	ldr	r2, [r3, #0]
 801ced2:	79fb      	ldrb	r3, [r7, #7]
 801ced4:	490c      	ldr	r1, [pc, #48]	; (801cf08 <vHWOutResete+0x50>)
 801ced6:	2058      	movs	r0, #88	; 0x58
 801ced8:	fb00 f303 	mul.w	r3, r0, r3
 801cedc:	440b      	add	r3, r1
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	4619      	mov	r1, r3
 801cee2:	4610      	mov	r0, r2
 801cee4:	f7e9 fb08 	bl	80064f8 <HAL_TIM_PWM_Stop>
	 out_register &= ~(0x1<< out_name);
 801cee8:	79fb      	ldrb	r3, [r7, #7]
 801ceea:	2201      	movs	r2, #1
 801ceec:	fa02 f303 	lsl.w	r3, r2, r3
 801cef0:	43db      	mvns	r3, r3
 801cef2:	461a      	mov	r2, r3
 801cef4:	4b05      	ldr	r3, [pc, #20]	; (801cf0c <vHWOutResete+0x54>)
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	4013      	ands	r3, r2
 801cefa:	4a04      	ldr	r2, [pc, #16]	; (801cf0c <vHWOutResete+0x54>)
 801cefc:	6013      	str	r3, [r2, #0]

}
 801cefe:	bf00      	nop
 801cf00:	3708      	adds	r7, #8
 801cf02:	46bd      	mov	sp, r7
 801cf04:	bd80      	pop	{r7, pc}
 801cf06:	bf00      	nop
 801cf08:	2000fbfc 	.word	0x2000fbfc
 801cf0c:	2001031c 	.word	0x2001031c

0801cf10 <vHWOutSet>:

void vHWOutSet( OUT_NAME_TYPE out_name, uint8_t power)
{
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b08a      	sub	sp, #40	; 0x28
 801cf14:	af00      	add	r7, sp, #0
 801cf16:	4603      	mov	r3, r0
 801cf18:	460a      	mov	r2, r1
 801cf1a:	71fb      	strb	r3, [r7, #7]
 801cf1c:	4613      	mov	r3, r2
 801cf1e:	71bb      	strb	r3, [r7, #6]
   TIM_OC_InitTypeDef sConfigOC = {0};
 801cf20:	f107 030c 	add.w	r3, r7, #12
 801cf24:	2200      	movs	r2, #0
 801cf26:	601a      	str	r2, [r3, #0]
 801cf28:	605a      	str	r2, [r3, #4]
 801cf2a:	609a      	str	r2, [r3, #8]
 801cf2c:	60da      	str	r2, [r3, #12]
 801cf2e:	611a      	str	r2, [r3, #16]
 801cf30:	615a      	str	r2, [r3, #20]
 801cf32:	619a      	str	r2, [r3, #24]
   //В зависимости от номера выхода выибраетм таймер и канал таймера PWM
   if ( power != 100 )
 801cf34:	79bb      	ldrb	r3, [r7, #6]
 801cf36:	2b64      	cmp	r3, #100	; 0x64
 801cf38:	d048      	beq.n	801cfcc <vHWOutSet+0xbc>
   {
   	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801cf3a:	2360      	movs	r3, #96	; 0x60
 801cf3c:	60fb      	str	r3, [r7, #12]
   	  sConfigOC.Pulse = (uint32_t )((float)power/100 * (out[out_name].ptim->Init.Period *(float)out[out_name].PWM/100 ));
 801cf3e:	79bb      	ldrb	r3, [r7, #6]
 801cf40:	ee07 3a90 	vmov	s15, r3
 801cf44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf48:	eddf 6a31 	vldr	s13, [pc, #196]	; 801d010 <vHWOutSet+0x100>
 801cf4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801cf50:	79fb      	ldrb	r3, [r7, #7]
 801cf52:	4a30      	ldr	r2, [pc, #192]	; (801d014 <vHWOutSet+0x104>)
 801cf54:	2158      	movs	r1, #88	; 0x58
 801cf56:	fb01 f303 	mul.w	r3, r1, r3
 801cf5a:	4413      	add	r3, r2
 801cf5c:	3304      	adds	r3, #4
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	68db      	ldr	r3, [r3, #12]
 801cf62:	ee07 3a90 	vmov	s15, r3
 801cf66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cf6a:	79fb      	ldrb	r3, [r7, #7]
 801cf6c:	4a29      	ldr	r2, [pc, #164]	; (801d014 <vHWOutSet+0x104>)
 801cf6e:	2158      	movs	r1, #88	; 0x58
 801cf70:	fb01 f303 	mul.w	r3, r1, r3
 801cf74:	4413      	add	r3, r2
 801cf76:	3314      	adds	r3, #20
 801cf78:	781b      	ldrb	r3, [r3, #0]
 801cf7a:	ee07 3a90 	vmov	s15, r3
 801cf7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801cf86:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801d010 <vHWOutSet+0x100>
 801cf8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801cf8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cf92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cf96:	ee17 3a90 	vmov	r3, s15
 801cf9a:	613b      	str	r3, [r7, #16]
   	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801cf9c:	2300      	movs	r3, #0
 801cf9e:	617b      	str	r3, [r7, #20]
   	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	61fb      	str	r3, [r7, #28]
   	  HAL_TIM_PWM_ConfigChannel(out[out_name].ptim, &sConfigOC, out[out_name].channel);
 801cfa4:	79fb      	ldrb	r3, [r7, #7]
 801cfa6:	4a1b      	ldr	r2, [pc, #108]	; (801d014 <vHWOutSet+0x104>)
 801cfa8:	2158      	movs	r1, #88	; 0x58
 801cfaa:	fb01 f303 	mul.w	r3, r1, r3
 801cfae:	4413      	add	r3, r2
 801cfb0:	3304      	adds	r3, #4
 801cfb2:	6818      	ldr	r0, [r3, #0]
 801cfb4:	79fb      	ldrb	r3, [r7, #7]
 801cfb6:	4a17      	ldr	r2, [pc, #92]	; (801d014 <vHWOutSet+0x104>)
 801cfb8:	2158      	movs	r1, #88	; 0x58
 801cfba:	fb01 f303 	mul.w	r3, r1, r3
 801cfbe:	4413      	add	r3, r2
 801cfc0:	681a      	ldr	r2, [r3, #0]
 801cfc2:	f107 030c 	add.w	r3, r7, #12
 801cfc6:	4619      	mov	r1, r3
 801cfc8:	f7e9 fc0e 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>

   }
   HAL_TIM_PWM_Start(out[out_name].ptim,out[out_name].channel);
 801cfcc:	79fb      	ldrb	r3, [r7, #7]
 801cfce:	4a11      	ldr	r2, [pc, #68]	; (801d014 <vHWOutSet+0x104>)
 801cfd0:	2158      	movs	r1, #88	; 0x58
 801cfd2:	fb01 f303 	mul.w	r3, r1, r3
 801cfd6:	4413      	add	r3, r2
 801cfd8:	3304      	adds	r3, #4
 801cfda:	681a      	ldr	r2, [r3, #0]
 801cfdc:	79fb      	ldrb	r3, [r7, #7]
 801cfde:	490d      	ldr	r1, [pc, #52]	; (801d014 <vHWOutSet+0x104>)
 801cfe0:	2058      	movs	r0, #88	; 0x58
 801cfe2:	fb00 f303 	mul.w	r3, r0, r3
 801cfe6:	440b      	add	r3, r1
 801cfe8:	681b      	ldr	r3, [r3, #0]
 801cfea:	4619      	mov	r1, r3
 801cfec:	4610      	mov	r0, r2
 801cfee:	f7e9 f9bb 	bl	8006368 <HAL_TIM_PWM_Start>
   out_register |= 0x1<< out_name;
 801cff2:	79fb      	ldrb	r3, [r7, #7]
 801cff4:	2201      	movs	r2, #1
 801cff6:	fa02 f303 	lsl.w	r3, r2, r3
 801cffa:	461a      	mov	r2, r3
 801cffc:	4b06      	ldr	r3, [pc, #24]	; (801d018 <vHWOutSet+0x108>)
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	4313      	orrs	r3, r2
 801d002:	4a05      	ldr	r2, [pc, #20]	; (801d018 <vHWOutSet+0x108>)
 801d004:	6013      	str	r3, [r2, #0]
}
 801d006:	bf00      	nop
 801d008:	3728      	adds	r7, #40	; 0x28
 801d00a:	46bd      	mov	sp, r7
 801d00c:	bd80      	pop	{r7, pc}
 801d00e:	bf00      	nop
 801d010:	42c80000 	.word	0x42c80000
 801d014:	2000fbfc 	.word	0x2000fbfc
 801d018:	2001031c 	.word	0x2001031c

0801d01c <vOutInit>:
}



void vOutInit()
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b082      	sub	sp, #8
 801d020:	af02      	add	r7, sp, #8
	//Инициализация портов упраления ключами
	HAL_GPIO_WritePin(GPIOG, Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 801d022:	2200      	movs	r2, #0
 801d024:	f641 413e 	movw	r1, #7230	; 0x1c3e
 801d028:	489c      	ldr	r0, [pc, #624]	; (801d29c <vOutInit+0x280>)
 801d02a:	f7e8 f93d 	bl	80052a8 <HAL_GPIO_WritePin>
	                          |Cs_Dis8_17_18_Pin|Cs_Dis8_15_16_Pin|Cs_Dis20_3_Pin|Cs_Dis20_4_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin, GPIO_PIN_RESET);
 801d02e:	2200      	movs	r2, #0
 801d030:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 801d034:	489a      	ldr	r0, [pc, #616]	; (801d2a0 <vOutInit+0x284>)
 801d036:	f7e8 f937 	bl	80052a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Cs_Dis20_6_GPIO_Port, Cs_Dis20_6_Pin, GPIO_PIN_RESET);
 801d03a:	2200      	movs	r2, #0
 801d03c:	2180      	movs	r1, #128	; 0x80
 801d03e:	4899      	ldr	r0, [pc, #612]	; (801d2a4 <vOutInit+0x288>)
 801d040:	f7e8 f932 	bl	80052a8 <HAL_GPIO_WritePin>

	vHWOutInit(OUT_1, &htim4, TIM_CHANNEL_3, 20.0, 1000, 60, 100 );
 801d044:	2364      	movs	r3, #100	; 0x64
 801d046:	9300      	str	r3, [sp, #0]
 801d048:	eddf 0a97 	vldr	s1, [pc, #604]	; 801d2a8 <vOutInit+0x28c>
 801d04c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d050:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801d054:	2208      	movs	r2, #8
 801d056:	4995      	ldr	r1, [pc, #596]	; (801d2ac <vOutInit+0x290>)
 801d058:	2000      	movs	r0, #0
 801d05a:	f7ff fd2f 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_2, &htim4, TIM_CHANNEL_4, 20.0, 1000, 60, 100 );
 801d05e:	2364      	movs	r3, #100	; 0x64
 801d060:	9300      	str	r3, [sp, #0]
 801d062:	eddf 0a91 	vldr	s1, [pc, #580]	; 801d2a8 <vOutInit+0x28c>
 801d066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d06a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801d06e:	220c      	movs	r2, #12
 801d070:	498e      	ldr	r1, [pc, #568]	; (801d2ac <vOutInit+0x290>)
 801d072:	2001      	movs	r0, #1
 801d074:	f7ff fd22 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_3, &htim2, TIM_CHANNEL_1, 20.0, 1000, 60, 100 );
 801d078:	2364      	movs	r3, #100	; 0x64
 801d07a:	9300      	str	r3, [sp, #0]
 801d07c:	eddf 0a8a 	vldr	s1, [pc, #552]	; 801d2a8 <vOutInit+0x28c>
 801d080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d084:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801d088:	2200      	movs	r2, #0
 801d08a:	4989      	ldr	r1, [pc, #548]	; (801d2b0 <vOutInit+0x294>)
 801d08c:	2002      	movs	r0, #2
 801d08e:	f7ff fd15 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_4, &htim3, TIM_CHANNEL_2, 20.0, 1000, 60, 100 );
 801d092:	2364      	movs	r3, #100	; 0x64
 801d094:	9300      	str	r3, [sp, #0]
 801d096:	eddf 0a84 	vldr	s1, [pc, #528]	; 801d2a8 <vOutInit+0x28c>
 801d09a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d09e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801d0a2:	2204      	movs	r2, #4
 801d0a4:	4983      	ldr	r1, [pc, #524]	; (801d2b4 <vOutInit+0x298>)
 801d0a6:	2003      	movs	r0, #3
 801d0a8:	f7ff fd08 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_5, &htim1, TIM_CHANNEL_3, 20.0, 1000, 60, 100 );
 801d0ac:	2364      	movs	r3, #100	; 0x64
 801d0ae:	9300      	str	r3, [sp, #0]
 801d0b0:	eddf 0a7d 	vldr	s1, [pc, #500]	; 801d2a8 <vOutInit+0x28c>
 801d0b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d0b8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801d0bc:	2208      	movs	r2, #8
 801d0be:	497e      	ldr	r1, [pc, #504]	; (801d2b8 <vOutInit+0x29c>)
 801d0c0:	2004      	movs	r0, #4
 801d0c2:	f7ff fcfb 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_6, &htim1, TIM_CHANNEL_4, 20.0, 1000, 60, 100 );
 801d0c6:	2364      	movs	r3, #100	; 0x64
 801d0c8:	9300      	str	r3, [sp, #0]
 801d0ca:	eddf 0a77 	vldr	s1, [pc, #476]	; 801d2a8 <vOutInit+0x28c>
 801d0ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d0d2:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801d0d6:	220c      	movs	r2, #12
 801d0d8:	4977      	ldr	r1, [pc, #476]	; (801d2b8 <vOutInit+0x29c>)
 801d0da:	2005      	movs	r0, #5
 801d0dc:	f7ff fcee 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_7, &htim12, TIM_CHANNEL_1,20.0, 1000, 60, 100 );
 801d0e0:	2364      	movs	r3, #100	; 0x64
 801d0e2:	9300      	str	r3, [sp, #0]
 801d0e4:	eddf 0a70 	vldr	s1, [pc, #448]	; 801d2a8 <vOutInit+0x28c>
 801d0e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d0ec:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801d0f0:	2200      	movs	r2, #0
 801d0f2:	4972      	ldr	r1, [pc, #456]	; (801d2bc <vOutInit+0x2a0>)
 801d0f4:	2006      	movs	r0, #6
 801d0f6:	f7ff fce1 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_8, &htim4, TIM_CHANNEL_2, 20.0, 1000, 60, 100 );
 801d0fa:	2364      	movs	r3, #100	; 0x64
 801d0fc:	9300      	str	r3, [sp, #0]
 801d0fe:	eddf 0a6a 	vldr	s1, [pc, #424]	; 801d2a8 <vOutInit+0x28c>
 801d102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d106:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801d10a:	2204      	movs	r2, #4
 801d10c:	4967      	ldr	r1, [pc, #412]	; (801d2ac <vOutInit+0x290>)
 801d10e:	2007      	movs	r0, #7
 801d110:	f7ff fcd4 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_9, &htim1, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 801d114:	2364      	movs	r3, #100	; 0x64
 801d116:	9300      	str	r3, [sp, #0]
 801d118:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d11c:	2300      	movs	r3, #0
 801d11e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d122:	2200      	movs	r2, #0
 801d124:	4964      	ldr	r1, [pc, #400]	; (801d2b8 <vOutInit+0x29c>)
 801d126:	2008      	movs	r0, #8
 801d128:	f7ff fcc8 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_10, &htim1, TIM_CHANNEL_2,8.0, 0, 8.0, 100 );
 801d12c:	2364      	movs	r3, #100	; 0x64
 801d12e:	9300      	str	r3, [sp, #0]
 801d130:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d134:	2300      	movs	r3, #0
 801d136:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d13a:	2204      	movs	r2, #4
 801d13c:	495e      	ldr	r1, [pc, #376]	; (801d2b8 <vOutInit+0x29c>)
 801d13e:	2009      	movs	r0, #9
 801d140:	f7ff fcbc 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_11, &htim2, TIM_CHANNEL_4, 8.0, 0, 8.0, 100 );
 801d144:	2364      	movs	r3, #100	; 0x64
 801d146:	9300      	str	r3, [sp, #0]
 801d148:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d14c:	2300      	movs	r3, #0
 801d14e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d152:	220c      	movs	r2, #12
 801d154:	4956      	ldr	r1, [pc, #344]	; (801d2b0 <vOutInit+0x294>)
 801d156:	200a      	movs	r0, #10
 801d158:	f7ff fcb0 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_12, &htim2, TIM_CHANNEL_3, 8.0, 0, 8.0, 100 );
 801d15c:	2364      	movs	r3, #100	; 0x64
 801d15e:	9300      	str	r3, [sp, #0]
 801d160:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d164:	2300      	movs	r3, #0
 801d166:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d16a:	2208      	movs	r2, #8
 801d16c:	4950      	ldr	r1, [pc, #320]	; (801d2b0 <vOutInit+0x294>)
 801d16e:	200b      	movs	r0, #11
 801d170:	f7ff fca4 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_13, &htim8, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 801d174:	2364      	movs	r3, #100	; 0x64
 801d176:	9300      	str	r3, [sp, #0]
 801d178:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d17c:	2300      	movs	r3, #0
 801d17e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d182:	2200      	movs	r2, #0
 801d184:	494e      	ldr	r1, [pc, #312]	; (801d2c0 <vOutInit+0x2a4>)
 801d186:	200c      	movs	r0, #12
 801d188:	f7ff fc98 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_14, &htim8, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 801d18c:	2364      	movs	r3, #100	; 0x64
 801d18e:	9300      	str	r3, [sp, #0]
 801d190:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d194:	2300      	movs	r3, #0
 801d196:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d19a:	2204      	movs	r2, #4
 801d19c:	4948      	ldr	r1, [pc, #288]	; (801d2c0 <vOutInit+0x2a4>)
 801d19e:	200d      	movs	r0, #13
 801d1a0:	f7ff fc8c 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_15, &htim3, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 801d1a4:	2364      	movs	r3, #100	; 0x64
 801d1a6:	9300      	str	r3, [sp, #0]
 801d1a8:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d1ac:	2300      	movs	r3, #0
 801d1ae:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d1b2:	2200      	movs	r2, #0
 801d1b4:	493f      	ldr	r1, [pc, #252]	; (801d2b4 <vOutInit+0x298>)
 801d1b6:	200e      	movs	r0, #14
 801d1b8:	f7ff fc80 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_16, &htim2, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 801d1bc:	2364      	movs	r3, #100	; 0x64
 801d1be:	9300      	str	r3, [sp, #0]
 801d1c0:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d1ca:	2204      	movs	r2, #4
 801d1cc:	4938      	ldr	r1, [pc, #224]	; (801d2b0 <vOutInit+0x294>)
 801d1ce:	200f      	movs	r0, #15
 801d1d0:	f7ff fc74 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_17, &htim8, TIM_CHANNEL_3, 8.0, 0, 8.0, 100 );
 801d1d4:	2364      	movs	r3, #100	; 0x64
 801d1d6:	9300      	str	r3, [sp, #0]
 801d1d8:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d1dc:	2300      	movs	r3, #0
 801d1de:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d1e2:	2208      	movs	r2, #8
 801d1e4:	4936      	ldr	r1, [pc, #216]	; (801d2c0 <vOutInit+0x2a4>)
 801d1e6:	2010      	movs	r0, #16
 801d1e8:	f7ff fc68 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_18,  &htim8, TIM_CHANNEL_4, 8.0, 0, 8.0, 100 );
 801d1ec:	2364      	movs	r3, #100	; 0x64
 801d1ee:	9300      	str	r3, [sp, #0]
 801d1f0:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d1fa:	220c      	movs	r2, #12
 801d1fc:	4930      	ldr	r1, [pc, #192]	; (801d2c0 <vOutInit+0x2a4>)
 801d1fe:	2011      	movs	r0, #17
 801d200:	f7ff fc5c 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_19, &htim12, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 801d204:	2364      	movs	r3, #100	; 0x64
 801d206:	9300      	str	r3, [sp, #0]
 801d208:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d20c:	2300      	movs	r3, #0
 801d20e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d212:	2204      	movs	r2, #4
 801d214:	4929      	ldr	r1, [pc, #164]	; (801d2bc <vOutInit+0x2a0>)
 801d216:	2012      	movs	r0, #18
 801d218:	f7ff fc50 	bl	801cabc <vHWOutInit>
	vHWOutInit(OUT_20, &htim4, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 801d21c:	2364      	movs	r3, #100	; 0x64
 801d21e:	9300      	str	r3, [sp, #0]
 801d220:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801d224:	2300      	movs	r3, #0
 801d226:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801d22a:	2200      	movs	r2, #0
 801d22c:	491f      	ldr	r1, [pc, #124]	; (801d2ac <vOutInit+0x290>)
 801d22e:	2013      	movs	r0, #19
 801d230:	f7ff fc44 	bl	801cabc <vHWOutInit>
	//vHWOutSet(OUT_4,100);
	//vHWOutSet(OUT_5,100);
	//vHWOutSet(OUT_6,100);
	//vHWOutSet(OUT_7,100);
//	vHWOutSet(OUT_8,100);
	vHWOutSet(OUT_9,100);
 801d234:	2164      	movs	r1, #100	; 0x64
 801d236:	2008      	movs	r0, #8
 801d238:	f7ff fe6a 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_10,100);
 801d23c:	2164      	movs	r1, #100	; 0x64
 801d23e:	2009      	movs	r0, #9
 801d240:	f7ff fe66 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_11,100);
 801d244:	2164      	movs	r1, #100	; 0x64
 801d246:	200a      	movs	r0, #10
 801d248:	f7ff fe62 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_12,00);
 801d24c:	2100      	movs	r1, #0
 801d24e:	200b      	movs	r0, #11
 801d250:	f7ff fe5e 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_13,100);
 801d254:	2164      	movs	r1, #100	; 0x64
 801d256:	200c      	movs	r0, #12
 801d258:	f7ff fe5a 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_14,100);
 801d25c:	2164      	movs	r1, #100	; 0x64
 801d25e:	200d      	movs	r0, #13
 801d260:	f7ff fe56 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_15,100);
 801d264:	2164      	movs	r1, #100	; 0x64
 801d266:	200e      	movs	r0, #14
 801d268:	f7ff fe52 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_16,100);
 801d26c:	2164      	movs	r1, #100	; 0x64
 801d26e:	200f      	movs	r0, #15
 801d270:	f7ff fe4e 	bl	801cf10 <vHWOutSet>
vHWOutSet(OUT_17,100);
 801d274:	2164      	movs	r1, #100	; 0x64
 801d276:	2010      	movs	r0, #16
 801d278:	f7ff fe4a 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_18,100);
 801d27c:	2164      	movs	r1, #100	; 0x64
 801d27e:	2011      	movs	r0, #17
 801d280:	f7ff fe46 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_19,100);
 801d284:	2164      	movs	r1, #100	; 0x64
 801d286:	2012      	movs	r0, #18
 801d288:	f7ff fe42 	bl	801cf10 <vHWOutSet>
	vHWOutSet(OUT_20,100);
 801d28c:	2164      	movs	r1, #100	; 0x64
 801d28e:	2013      	movs	r0, #19
 801d290:	f7ff fe3e 	bl	801cf10 <vHWOutSet>
//
}
 801d294:	bf00      	nop
 801d296:	46bd      	mov	sp, r7
 801d298:	bd80      	pop	{r7, pc}
 801d29a:	bf00      	nop
 801d29c:	40021800 	.word	0x40021800
 801d2a0:	40020c00 	.word	0x40020c00
 801d2a4:	40021000 	.word	0x40021000
 801d2a8:	42700000 	.word	0x42700000
 801d2ac:	200008b8 	.word	0x200008b8
 801d2b0:	20000828 	.word	0x20000828
 801d2b4:	20000870 	.word	0x20000870
 801d2b8:	200007e0 	.word	0x200007e0
 801d2bc:	20000990 	.word	0x20000990
 801d2c0:	20000900 	.word	0x20000900

0801d2c4 <vADCTask>:
 // vADCConfigInit();
  return;
}

void vADCTask(void * argument)
{
 801d2c4:	b580      	push	{r7, lr}
 801d2c6:	b084      	sub	sp, #16
 801d2c8:	af02      	add	r7, sp, #8
 801d2ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vADCTask */
  xADCEvent = xEventGroupCreateStatic(&xADCCreatedEventGroup );
 801d2cc:	4816      	ldr	r0, [pc, #88]	; (801d328 <vADCTask+0x64>)
 801d2ce:	f7fc fcc1 	bl	8019c54 <xEventGroupCreateStatic>
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	4a15      	ldr	r2, [pc, #84]	; (801d32c <vADCTask+0x68>)
 801d2d6:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 801d2d8:	2001      	movs	r0, #1
 801d2da:	f7fc fc6b 	bl	8019bb4 <osDelay>
	HAL_ADC_Start_DMA( &hadc1,( uint32_t* )&ADC1_IN_Buffer, ( ADC_FRAME_SIZE * ADC1_CHANNELS ));
 801d2de:	2218      	movs	r2, #24
 801d2e0:	4913      	ldr	r1, [pc, #76]	; (801d330 <vADCTask+0x6c>)
 801d2e2:	4814      	ldr	r0, [pc, #80]	; (801d334 <vADCTask+0x70>)
 801d2e4:	f7e6 f836 	bl	8003354 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( &hadc2,( uint32_t* )&ADC2_IN_Buffer, ( ADC_FRAME_SIZE * ADC2_CHANNELS ));
 801d2e8:	2215      	movs	r2, #21
 801d2ea:	4913      	ldr	r1, [pc, #76]	; (801d338 <vADCTask+0x74>)
 801d2ec:	4813      	ldr	r0, [pc, #76]	; (801d33c <vADCTask+0x78>)
 801d2ee:	f7e6 f831 	bl	8003354 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA( &hadc3,( uint32_t* )&ADC3_IN_Buffer, ( ADC_FRAME_SIZE * ADC3_CHANNELS ));
 801d2f2:	221b      	movs	r2, #27
 801d2f4:	4912      	ldr	r1, [pc, #72]	; (801d340 <vADCTask+0x7c>)
 801d2f6:	4813      	ldr	r0, [pc, #76]	; (801d344 <vADCTask+0x80>)
 801d2f8:	f7e6 f82c 	bl	8003354 <HAL_ADC_Start_DMA>
	xEventGroupWaitBits( xADCEvent, ( ADC3_READY  | ADC2_READY | ADC1_READY   ), pdTRUE, pdTRUE, portMAX_DELAY );
 801d2fc:	4b0b      	ldr	r3, [pc, #44]	; (801d32c <vADCTask+0x68>)
 801d2fe:	6818      	ldr	r0, [r3, #0]
 801d300:	f04f 33ff 	mov.w	r3, #4294967295
 801d304:	9300      	str	r3, [sp, #0]
 801d306:	2301      	movs	r3, #1
 801d308:	2201      	movs	r2, #1
 801d30a:	2107      	movs	r1, #7
 801d30c:	f7fc fcda 	bl	8019cc4 <xEventGroupWaitBits>
	HAL_ADC_Stop_DMA(&hadc1);
 801d310:	4808      	ldr	r0, [pc, #32]	; (801d334 <vADCTask+0x70>)
 801d312:	f7e6 f92f 	bl	8003574 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 801d316:	4809      	ldr	r0, [pc, #36]	; (801d33c <vADCTask+0x78>)
 801d318:	f7e6 f92c 	bl	8003574 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 801d31c:	4809      	ldr	r0, [pc, #36]	; (801d344 <vADCTask+0x80>)
 801d31e:	f7e6 f929 	bl	8003574 <HAL_ADC_Stop_DMA>
	vDataConvertToFloat();
 801d322:	f000 f859 	bl	801d3d8 <vDataConvertToFloat>
	  osDelay(1);
 801d326:	e7d7      	b.n	801d2d8 <vADCTask+0x14>
 801d328:	20010324 	.word	0x20010324
 801d32c:	20010320 	.word	0x20010320
 801d330:	2000fb68 	.word	0x2000fb68
 801d334:	2000056c 	.word	0x2000056c
 801d338:	2000fb98 	.word	0x2000fb98
 801d33c:	200005b4 	.word	0x200005b4
 801d340:	2000fbc4 	.word	0x2000fbc4
 801d344:	200005fc 	.word	0x200005fc

0801d348 <vGetAverDataFromRAW>:
/*
 * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
 * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
 */
void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint16_t InIndex, uint16_t OutIndex, uint8_t Size,uint16_t FrameSize, uint16_t BufferSize)
{
 801d348:	b480      	push	{r7}
 801d34a:	b087      	sub	sp, #28
 801d34c:	af00      	add	r7, sp, #0
 801d34e:	60f8      	str	r0, [r7, #12]
 801d350:	60b9      	str	r1, [r7, #8]
 801d352:	4611      	mov	r1, r2
 801d354:	461a      	mov	r2, r3
 801d356:	460b      	mov	r3, r1
 801d358:	80fb      	strh	r3, [r7, #6]
 801d35a:	4613      	mov	r3, r2
 801d35c:	80bb      	strh	r3, [r7, #4]
	uint32_t temp;
	for (uint8_t i=0;i<Size;i++)
 801d35e:	2300      	movs	r3, #0
 801d360:	74fb      	strb	r3, [r7, #19]
 801d362:	e02b      	b.n	801d3bc <vGetAverDataFromRAW+0x74>
	{
		temp = 0;
 801d364:	2300      	movs	r3, #0
 801d366:	617b      	str	r3, [r7, #20]
		for (uint8_t j=0;j<FrameSize;j++)
 801d368:	2300      	movs	r3, #0
 801d36a:	74bb      	strb	r3, [r7, #18]
 801d36c:	e012      	b.n	801d394 <vGetAverDataFromRAW+0x4c>
		{
		  temp = temp + InData[InIndex+i+j*BufferSize];
 801d36e:	88fa      	ldrh	r2, [r7, #6]
 801d370:	7cfb      	ldrb	r3, [r7, #19]
 801d372:	441a      	add	r2, r3
 801d374:	7cbb      	ldrb	r3, [r7, #18]
 801d376:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 801d378:	fb01 f303 	mul.w	r3, r1, r3
 801d37c:	4413      	add	r3, r2
 801d37e:	005b      	lsls	r3, r3, #1
 801d380:	68fa      	ldr	r2, [r7, #12]
 801d382:	4413      	add	r3, r2
 801d384:	881b      	ldrh	r3, [r3, #0]
 801d386:	461a      	mov	r2, r3
 801d388:	697b      	ldr	r3, [r7, #20]
 801d38a:	4413      	add	r3, r2
 801d38c:	617b      	str	r3, [r7, #20]
		for (uint8_t j=0;j<FrameSize;j++)
 801d38e:	7cbb      	ldrb	r3, [r7, #18]
 801d390:	3301      	adds	r3, #1
 801d392:	74bb      	strb	r3, [r7, #18]
 801d394:	7cbb      	ldrb	r3, [r7, #18]
 801d396:	b29b      	uxth	r3, r3
 801d398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d39a:	429a      	cmp	r2, r3
 801d39c:	d8e7      	bhi.n	801d36e <vGetAverDataFromRAW+0x26>
		}
		OutData[OutIndex+i] = temp / FrameSize;
 801d39e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d3a0:	697a      	ldr	r2, [r7, #20]
 801d3a2:	fbb2 f1f3 	udiv	r1, r2, r3
 801d3a6:	88ba      	ldrh	r2, [r7, #4]
 801d3a8:	7cfb      	ldrb	r3, [r7, #19]
 801d3aa:	4413      	add	r3, r2
 801d3ac:	005b      	lsls	r3, r3, #1
 801d3ae:	68ba      	ldr	r2, [r7, #8]
 801d3b0:	4413      	add	r3, r2
 801d3b2:	b28a      	uxth	r2, r1
 801d3b4:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0;i<Size;i++)
 801d3b6:	7cfb      	ldrb	r3, [r7, #19]
 801d3b8:	3301      	adds	r3, #1
 801d3ba:	74fb      	strb	r3, [r7, #19]
 801d3bc:	7cfa      	ldrb	r2, [r7, #19]
 801d3be:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d3c2:	429a      	cmp	r2, r3
 801d3c4:	d3ce      	bcc.n	801d364 <vGetAverDataFromRAW+0x1c>
	}
}
 801d3c6:	bf00      	nop
 801d3c8:	bf00      	nop
 801d3ca:	371c      	adds	r7, #28
 801d3cc:	46bd      	mov	sp, r7
 801d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3d2:	4770      	bx	lr
 801d3d4:	0000      	movs	r0, r0
	...

0801d3d8 <vDataConvertToFloat>:

/*
 *  Функция усредняет данные из буфеера АЦП, и пробразует их значения
 */
void vDataConvertToFloat( void)
{
 801d3d8:	b590      	push	{r4, r7, lr}
 801d3da:	b087      	sub	sp, #28
 801d3dc:	af04      	add	r7, sp, #16
	uint8_t i;
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 7-8
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawCurData, 0U, 6U, 2U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 801d3de:	2308      	movs	r3, #8
 801d3e0:	9302      	str	r3, [sp, #8]
 801d3e2:	2303      	movs	r3, #3
 801d3e4:	9301      	str	r3, [sp, #4]
 801d3e6:	2302      	movs	r3, #2
 801d3e8:	9300      	str	r3, [sp, #0]
 801d3ea:	2306      	movs	r3, #6
 801d3ec:	2200      	movs	r2, #0
 801d3ee:	49ae      	ldr	r1, [pc, #696]	; (801d6a8 <vDataConvertToFloat+0x2d0>)
 801d3f0:	48ae      	ldr	r0, [pc, #696]	; (801d6ac <vDataConvertToFloat+0x2d4>)
 801d3f2:	f7ff ffa9 	bl	801d348 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 19-20
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawCurData, 2U, 18U, 2U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 801d3f6:	2308      	movs	r3, #8
 801d3f8:	9302      	str	r3, [sp, #8]
 801d3fa:	2303      	movs	r3, #3
 801d3fc:	9301      	str	r3, [sp, #4]
 801d3fe:	2302      	movs	r3, #2
 801d400:	9300      	str	r3, [sp, #0]
 801d402:	2312      	movs	r3, #18
 801d404:	2202      	movs	r2, #2
 801d406:	49a8      	ldr	r1, [pc, #672]	; (801d6a8 <vDataConvertToFloat+0x2d0>)
 801d408:	48a8      	ldr	r0, [pc, #672]	; (801d6ac <vDataConvertToFloat+0x2d4>)
 801d40a:	f7ff ff9d 	bl	801d348 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов AIN
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawVData, 4U, 0U, 4U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 801d40e:	2308      	movs	r3, #8
 801d410:	9302      	str	r3, [sp, #8]
 801d412:	2303      	movs	r3, #3
 801d414:	9301      	str	r3, [sp, #4]
 801d416:	2304      	movs	r3, #4
 801d418:	9300      	str	r3, [sp, #0]
 801d41a:	2300      	movs	r3, #0
 801d41c:	2204      	movs	r2, #4
 801d41e:	49a4      	ldr	r1, [pc, #656]	; (801d6b0 <vDataConvertToFloat+0x2d8>)
 801d420:	48a2      	ldr	r0, [pc, #648]	; (801d6ac <vDataConvertToFloat+0x2d4>)
 801d422:	f7ff ff91 	bl	801d348 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 2 данныех каналов каналов тока 4-6
	 vGetAverDataFromRAW((uint16_t *)&ADC2_IN_Buffer, (uint16_t *)&muRawCurData,0U, 3U, 3U ,ADC_FRAME_SIZE,ADC2_CHANNELS);
 801d426:	2307      	movs	r3, #7
 801d428:	9302      	str	r3, [sp, #8]
 801d42a:	2303      	movs	r3, #3
 801d42c:	9301      	str	r3, [sp, #4]
 801d42e:	2303      	movs	r3, #3
 801d430:	9300      	str	r3, [sp, #0]
 801d432:	2303      	movs	r3, #3
 801d434:	2200      	movs	r2, #0
 801d436:	499c      	ldr	r1, [pc, #624]	; (801d6a8 <vDataConvertToFloat+0x2d0>)
 801d438:	489e      	ldr	r0, [pc, #632]	; (801d6b4 <vDataConvertToFloat+0x2dc>)
 801d43a:	f7ff ff85 	bl	801d348 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 2 данныех каналов каналов тока 9-12
	 vGetAverDataFromRAW((uint16_t *)&ADC2_IN_Buffer, (uint16_t *)&muRawCurData, 3U, 8U, 4U ,ADC_FRAME_SIZE,ADC2_CHANNELS);
 801d43e:	2307      	movs	r3, #7
 801d440:	9302      	str	r3, [sp, #8]
 801d442:	2303      	movs	r3, #3
 801d444:	9301      	str	r3, [sp, #4]
 801d446:	2304      	movs	r3, #4
 801d448:	9300      	str	r3, [sp, #0]
 801d44a:	2308      	movs	r3, #8
 801d44c:	2203      	movs	r2, #3
 801d44e:	4996      	ldr	r1, [pc, #600]	; (801d6a8 <vDataConvertToFloat+0x2d0>)
 801d450:	4898      	ldr	r0, [pc, #608]	; (801d6b4 <vDataConvertToFloat+0x2dc>)
 801d452:	f7ff ff79 	bl	801d348 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 1-3
	 vGetAverDataFromRAW((uint16_t *)&ADC3_IN_Buffer, (uint16_t *)&muRawCurData, 0U, 0U, 3U ,ADC_FRAME_SIZE,ADC3_CHANNELS);
 801d456:	2309      	movs	r3, #9
 801d458:	9302      	str	r3, [sp, #8]
 801d45a:	2303      	movs	r3, #3
 801d45c:	9301      	str	r3, [sp, #4]
 801d45e:	2303      	movs	r3, #3
 801d460:	9300      	str	r3, [sp, #0]
 801d462:	2300      	movs	r3, #0
 801d464:	2200      	movs	r2, #0
 801d466:	4990      	ldr	r1, [pc, #576]	; (801d6a8 <vDataConvertToFloat+0x2d0>)
 801d468:	4893      	ldr	r0, [pc, #588]	; (801d6b8 <vDataConvertToFloat+0x2e0>)
 801d46a:	f7ff ff6d 	bl	801d348 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 13-18
	 vGetAverDataFromRAW((uint16_t *)&ADC3_IN_Buffer, (uint16_t *)&muRawCurData, 3U, 12U, 5U ,ADC_FRAME_SIZE,ADC3_CHANNELS);
 801d46e:	2309      	movs	r3, #9
 801d470:	9302      	str	r3, [sp, #8]
 801d472:	2303      	movs	r3, #3
 801d474:	9301      	str	r3, [sp, #4]
 801d476:	2305      	movs	r3, #5
 801d478:	9300      	str	r3, [sp, #0]
 801d47a:	230c      	movs	r3, #12
 801d47c:	2203      	movs	r2, #3
 801d47e:	498a      	ldr	r1, [pc, #552]	; (801d6a8 <vDataConvertToFloat+0x2d0>)
 801d480:	488d      	ldr	r0, [pc, #564]	; (801d6b8 <vDataConvertToFloat+0x2e0>)
 801d482:	f7ff ff61 	bl	801d348 <vGetAverDataFromRAW>
	 //Преобразование во флоат данных AIN
	 for ( i = 0; i < 4U; i++ )
 801d486:	2300      	movs	r3, #0
 801d488:	71fb      	strb	r3, [r7, #7]
 801d48a:	e024      	b.n	801d4d6 <vDataConvertToFloat+0xfe>
	 {
		 mfVData[ i ] = muRawVData[ i ] * COOF;
 801d48c:	79fb      	ldrb	r3, [r7, #7]
 801d48e:	4a88      	ldr	r2, [pc, #544]	; (801d6b0 <vDataConvertToFloat+0x2d8>)
 801d490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d494:	461a      	mov	r2, r3
 801d496:	4b89      	ldr	r3, [pc, #548]	; (801d6bc <vDataConvertToFloat+0x2e4>)
 801d498:	fb02 f303 	mul.w	r3, r2, r3
 801d49c:	4a88      	ldr	r2, [pc, #544]	; (801d6c0 <vDataConvertToFloat+0x2e8>)
 801d49e:	fb82 1203 	smull	r1, r2, r2, r3
 801d4a2:	1412      	asrs	r2, r2, #16
 801d4a4:	17db      	asrs	r3, r3, #31
 801d4a6:	1ad3      	subs	r3, r2, r3
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	f7e3 f853 	bl	8000554 <__aeabi_i2d>
 801d4ae:	a37c      	add	r3, pc, #496	; (adr r3, 801d6a0 <vDataConvertToFloat+0x2c8>)
 801d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4b4:	f7e3 f8b8 	bl	8000628 <__aeabi_dmul>
 801d4b8:	4602      	mov	r2, r0
 801d4ba:	460b      	mov	r3, r1
 801d4bc:	79fc      	ldrb	r4, [r7, #7]
 801d4be:	4610      	mov	r0, r2
 801d4c0:	4619      	mov	r1, r3
 801d4c2:	f7e3 fb81 	bl	8000bc8 <__aeabi_d2f>
 801d4c6:	4602      	mov	r2, r0
 801d4c8:	497e      	ldr	r1, [pc, #504]	; (801d6c4 <vDataConvertToFloat+0x2ec>)
 801d4ca:	00a3      	lsls	r3, r4, #2
 801d4cc:	440b      	add	r3, r1
 801d4ce:	601a      	str	r2, [r3, #0]
	 for ( i = 0; i < 4U; i++ )
 801d4d0:	79fb      	ldrb	r3, [r7, #7]
 801d4d2:	3301      	adds	r3, #1
 801d4d4:	71fb      	strb	r3, [r7, #7]
 801d4d6:	79fb      	ldrb	r3, [r7, #7]
 801d4d8:	2b03      	cmp	r3, #3
 801d4da:	d9d7      	bls.n	801d48c <vDataConvertToFloat+0xb4>
	 }
	 //Преобразвоание во float данных тока каналов 1-20
	 for ( i =0; i < 20U ; i++)
 801d4dc:	2300      	movs	r3, #0
 801d4de:	71fb      	strb	r3, [r7, #7]
 801d4e0:	e0d4      	b.n	801d68c <vDataConvertToFloat+0x2b4>
	{
		 if  (muRawCurData[ i ] == 0xFFF)
 801d4e2:	79fb      	ldrb	r3, [r7, #7]
 801d4e4:	4a70      	ldr	r2, [pc, #448]	; (801d6a8 <vDataConvertToFloat+0x2d0>)
 801d4e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d4ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 801d4ee:	4293      	cmp	r3, r2
 801d4f0:	d109      	bne.n	801d506 <vDataConvertToFloat+0x12e>
		 {
			 out[i].error_flag  = ERROR_ON;
 801d4f2:	79fb      	ldrb	r3, [r7, #7]
 801d4f4:	4a74      	ldr	r2, [pc, #464]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d4f6:	2158      	movs	r1, #88	; 0x58
 801d4f8:	fb01 f303 	mul.w	r3, r1, r3
 801d4fc:	4413      	add	r3, r2
 801d4fe:	3320      	adds	r3, #32
 801d500:	2201      	movs	r2, #1
 801d502:	701a      	strb	r2, [r3, #0]
 801d504:	e0bf      	b.n	801d686 <vDataConvertToFloat+0x2ae>
		 }
		 else
		 {
			 out[i].error_flag  = ERROR_OFF;
 801d506:	79fb      	ldrb	r3, [r7, #7]
 801d508:	4a6f      	ldr	r2, [pc, #444]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d50a:	2158      	movs	r1, #88	; 0x58
 801d50c:	fb01 f303 	mul.w	r3, r1, r3
 801d510:	4413      	add	r3, r2
 801d512:	3320      	adds	r3, #32
 801d514:	2200      	movs	r2, #0
 801d516:	701a      	strb	r2, [r3, #0]
			 for (uint8_t r = 0; r < 4U; r++)
 801d518:	2300      	movs	r3, #0
 801d51a:	71bb      	strb	r3, [r7, #6]
 801d51c:	e0af      	b.n	801d67e <vDataConvertToFloat+0x2a6>
			 {
				 float temp = (float) muRawCurData [ i ]*K;
 801d51e:	79fb      	ldrb	r3, [r7, #7]
 801d520:	4a61      	ldr	r2, [pc, #388]	; (801d6a8 <vDataConvertToFloat+0x2d0>)
 801d522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d526:	ee07 3a90 	vmov	s15, r3
 801d52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d52e:	ee17 0a90 	vmov	r0, s15
 801d532:	f7e3 f821 	bl	8000578 <__aeabi_f2d>
 801d536:	a35a      	add	r3, pc, #360	; (adr r3, 801d6a0 <vDataConvertToFloat+0x2c8>)
 801d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d53c:	f7e3 f874 	bl	8000628 <__aeabi_dmul>
 801d540:	4602      	mov	r2, r0
 801d542:	460b      	mov	r3, r1
 801d544:	4610      	mov	r0, r2
 801d546:	4619      	mov	r1, r3
 801d548:	f7e3 fb3e 	bl	8000bc8 <__aeabi_d2f>
 801d54c:	4603      	mov	r3, r0
 801d54e:	603b      	str	r3, [r7, #0]
				 if ( temp < out[i].CSC[r].data )
 801d550:	79f9      	ldrb	r1, [r7, #7]
 801d552:	79ba      	ldrb	r2, [r7, #6]
 801d554:	485c      	ldr	r0, [pc, #368]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d556:	4613      	mov	r3, r2
 801d558:	005b      	lsls	r3, r3, #1
 801d55a:	4413      	add	r3, r2
 801d55c:	009b      	lsls	r3, r3, #2
 801d55e:	2258      	movs	r2, #88	; 0x58
 801d560:	fb01 f202 	mul.w	r2, r1, r2
 801d564:	4413      	add	r3, r2
 801d566:	4403      	add	r3, r0
 801d568:	3324      	adds	r3, #36	; 0x24
 801d56a:	881b      	ldrh	r3, [r3, #0]
 801d56c:	ee07 3a90 	vmov	s15, r3
 801d570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d574:	ed97 7a00 	vldr	s14, [r7]
 801d578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d580:	d57a      	bpl.n	801d678 <vDataConvertToFloat+0x2a0>
				 {

					 out[i].current =  temp * out[i].CSC[r].k;
 801d582:	79f9      	ldrb	r1, [r7, #7]
 801d584:	79ba      	ldrb	r2, [r7, #6]
 801d586:	4850      	ldr	r0, [pc, #320]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d588:	4613      	mov	r3, r2
 801d58a:	005b      	lsls	r3, r3, #1
 801d58c:	4413      	add	r3, r2
 801d58e:	009b      	lsls	r3, r3, #2
 801d590:	2258      	movs	r2, #88	; 0x58
 801d592:	fb01 f202 	mul.w	r2, r1, r2
 801d596:	4413      	add	r3, r2
 801d598:	4403      	add	r3, r0
 801d59a:	3328      	adds	r3, #40	; 0x28
 801d59c:	ed93 7a00 	vldr	s14, [r3]
 801d5a0:	79fb      	ldrb	r3, [r7, #7]
 801d5a2:	edd7 7a00 	vldr	s15, [r7]
 801d5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d5aa:	4a47      	ldr	r2, [pc, #284]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d5ac:	2158      	movs	r1, #88	; 0x58
 801d5ae:	fb01 f303 	mul.w	r3, r1, r3
 801d5b2:	4413      	add	r3, r2
 801d5b4:	3354      	adds	r3, #84	; 0x54
 801d5b6:	edc3 7a00 	vstr	s15, [r3]
					 out[i].current =  out[i].current + out[i].CSC[r].b ;
 801d5ba:	79fb      	ldrb	r3, [r7, #7]
 801d5bc:	4a42      	ldr	r2, [pc, #264]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d5be:	2158      	movs	r1, #88	; 0x58
 801d5c0:	fb01 f303 	mul.w	r3, r1, r3
 801d5c4:	4413      	add	r3, r2
 801d5c6:	3354      	adds	r3, #84	; 0x54
 801d5c8:	ed93 7a00 	vldr	s14, [r3]
 801d5cc:	79f9      	ldrb	r1, [r7, #7]
 801d5ce:	79ba      	ldrb	r2, [r7, #6]
 801d5d0:	483d      	ldr	r0, [pc, #244]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d5d2:	4613      	mov	r3, r2
 801d5d4:	005b      	lsls	r3, r3, #1
 801d5d6:	4413      	add	r3, r2
 801d5d8:	009b      	lsls	r3, r3, #2
 801d5da:	2258      	movs	r2, #88	; 0x58
 801d5dc:	fb01 f202 	mul.w	r2, r1, r2
 801d5e0:	4413      	add	r3, r2
 801d5e2:	4403      	add	r3, r0
 801d5e4:	332c      	adds	r3, #44	; 0x2c
 801d5e6:	edd3 7a00 	vldr	s15, [r3]
 801d5ea:	79fb      	ldrb	r3, [r7, #7]
 801d5ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d5f0:	4a35      	ldr	r2, [pc, #212]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d5f2:	2158      	movs	r1, #88	; 0x58
 801d5f4:	fb01 f303 	mul.w	r3, r1, r3
 801d5f8:	4413      	add	r3, r2
 801d5fa:	3354      	adds	r3, #84	; 0x54
 801d5fc:	edc3 7a00 	vstr	s15, [r3]
					 out[i].current =  out[i].current* temp/RR;
 801d600:	79fb      	ldrb	r3, [r7, #7]
 801d602:	4a31      	ldr	r2, [pc, #196]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d604:	2158      	movs	r1, #88	; 0x58
 801d606:	fb01 f303 	mul.w	r3, r1, r3
 801d60a:	4413      	add	r3, r2
 801d60c:	3354      	adds	r3, #84	; 0x54
 801d60e:	ed93 7a00 	vldr	s14, [r3]
 801d612:	edd7 7a00 	vldr	s15, [r7]
 801d616:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d61a:	79fb      	ldrb	r3, [r7, #7]
 801d61c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 801d6cc <vDataConvertToFloat+0x2f4>
 801d620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801d624:	4a28      	ldr	r2, [pc, #160]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d626:	2158      	movs	r1, #88	; 0x58
 801d628:	fb01 f303 	mul.w	r3, r1, r3
 801d62c:	4413      	add	r3, r2
 801d62e:	3354      	adds	r3, #84	; 0x54
 801d630:	edc3 7a00 	vstr	s15, [r3]
					 if (out[i].current > out[i].power )
 801d634:	79fb      	ldrb	r3, [r7, #7]
 801d636:	4a24      	ldr	r2, [pc, #144]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d638:	2158      	movs	r1, #88	; 0x58
 801d63a:	fb01 f303 	mul.w	r3, r1, r3
 801d63e:	4413      	add	r3, r2
 801d640:	3354      	adds	r3, #84	; 0x54
 801d642:	ed93 7a00 	vldr	s14, [r3]
 801d646:	79fb      	ldrb	r3, [r7, #7]
 801d648:	4a1f      	ldr	r2, [pc, #124]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d64a:	2158      	movs	r1, #88	; 0x58
 801d64c:	fb01 f303 	mul.w	r3, r1, r3
 801d650:	4413      	add	r3, r2
 801d652:	330c      	adds	r3, #12
 801d654:	edd3 7a00 	vldr	s15, [r3]
 801d658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d660:	dc00      	bgt.n	801d664 <vDataConvertToFloat+0x28c>
					 {
						 out[i].error_flag = ERROR_OVERLOAD;
					 }
					 break;
 801d662:	e010      	b.n	801d686 <vDataConvertToFloat+0x2ae>
						 out[i].error_flag = ERROR_OVERLOAD;
 801d664:	79fb      	ldrb	r3, [r7, #7]
 801d666:	4a18      	ldr	r2, [pc, #96]	; (801d6c8 <vDataConvertToFloat+0x2f0>)
 801d668:	2158      	movs	r1, #88	; 0x58
 801d66a:	fb01 f303 	mul.w	r3, r1, r3
 801d66e:	4413      	add	r3, r2
 801d670:	3320      	adds	r3, #32
 801d672:	2202      	movs	r2, #2
 801d674:	701a      	strb	r2, [r3, #0]
					 break;
 801d676:	e006      	b.n	801d686 <vDataConvertToFloat+0x2ae>
			 for (uint8_t r = 0; r < 4U; r++)
 801d678:	79bb      	ldrb	r3, [r7, #6]
 801d67a:	3301      	adds	r3, #1
 801d67c:	71bb      	strb	r3, [r7, #6]
 801d67e:	79bb      	ldrb	r3, [r7, #6]
 801d680:	2b03      	cmp	r3, #3
 801d682:	f67f af4c 	bls.w	801d51e <vDataConvertToFloat+0x146>
	 for ( i =0; i < 20U ; i++)
 801d686:	79fb      	ldrb	r3, [r7, #7]
 801d688:	3301      	adds	r3, #1
 801d68a:	71fb      	strb	r3, [r7, #7]
 801d68c:	79fb      	ldrb	r3, [r7, #7]
 801d68e:	2b13      	cmp	r3, #19
 801d690:	f67f af27 	bls.w	801d4e2 <vDataConvertToFloat+0x10a>
				 }
			 }
		 }
	}
}
 801d694:	bf00      	nop
 801d696:	bf00      	nop
 801d698:	370c      	adds	r7, #12
 801d69a:	46bd      	mov	sp, r7
 801d69c:	bd90      	pop	{r4, r7, pc}
 801d69e:	bf00      	nop
 801d6a0:	e734d9b4 	.word	0xe734d9b4
 801d6a4:	3f4a680c 	.word	0x3f4a680c
 801d6a8:	200102dc 	.word	0x200102dc
 801d6ac:	2000fb68 	.word	0x2000fb68
 801d6b0:	20010304 	.word	0x20010304
 801d6b4:	2000fb98 	.word	0x2000fb98
 801d6b8:	2000fbc4 	.word	0x2000fbc4
 801d6bc:	000222e0 	.word	0x000222e0
 801d6c0:	6fd91d85 	.word	0x6fd91d85
 801d6c4:	2001030c 	.word	0x2001030c
 801d6c8:	2000fbfc 	.word	0x2000fbfc
 801d6cc:	447a0000 	.word	0x447a0000

0801d6d0 <vOutContolTask>:


void vOutContolTask(void * argument)
{
 801d6d0:	b580      	push	{r7, lr}
 801d6d2:	b086      	sub	sp, #24
 801d6d4:	af00      	add	r7, sp, #0
 801d6d6:	6078      	str	r0, [r7, #4]
	uint8_t temp_power,cur_power;
	xOutEvent = xEventGroupCreateStatic(&xOutCreatedEventGroup );
 801d6d8:	48ac      	ldr	r0, [pc, #688]	; (801d98c <vOutContolTask+0x2bc>)
 801d6da:	f7fc fabb 	bl	8019c54 <xEventGroupCreateStatic>
 801d6de:	4603      	mov	r3, r0
 801d6e0:	4aab      	ldr	r2, [pc, #684]	; (801d990 <vOutContolTask+0x2c0>)
 801d6e2:	6013      	str	r3, [r2, #0]
	EventBits_t config_state;
	vOutInit();
 801d6e4:	f7ff fc9a 	bl	801d01c <vOutInit>
	for(;;)
	{
		   vTaskDelay(1);
 801d6e8:	2001      	movs	r0, #1
 801d6ea:	f7fd fc17 	bl	801af1c <vTaskDelay>
		   config_state = xEventGroupGetBits (xOutEvent); //Получаем состоние конфигурационных флагов
 801d6ee:	4ba8      	ldr	r3, [pc, #672]	; (801d990 <vOutContolTask+0x2c0>)
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	2100      	movs	r1, #0
 801d6f4:	4618      	mov	r0, r3
 801d6f6:	f7fc fbb3 	bl	8019e60 <xEventGroupClearBits>
 801d6fa:	6138      	str	r0, [r7, #16]
			for (uint8_t i=0; i<OUT_COUNT;i++)
 801d6fc:	2300      	movs	r3, #0
 801d6fe:	75bb      	strb	r3, [r7, #22]
 801d700:	e19e      	b.n	801da40 <vOutContolTask+0x370>
			{
				if ( (config_state & ((uint32_t)0x1< i)) ==0 ) //Если канал не находится в режиме конфигурации, то переходим к обработке
 801d702:	7dbb      	ldrb	r3, [r7, #22]
 801d704:	2b01      	cmp	r3, #1
 801d706:	bf8c      	ite	hi
 801d708:	2301      	movhi	r3, #1
 801d70a:	2300      	movls	r3, #0
 801d70c:	b2db      	uxtb	r3, r3
 801d70e:	461a      	mov	r2, r3
 801d710:	693b      	ldr	r3, [r7, #16]
 801d712:	4013      	ands	r3, r2
 801d714:	2b00      	cmp	r3, #0
 801d716:	f040 8189 	bne.w	801da2c <vOutContolTask+0x35c>
				{
					switch (out[i].out_state)
 801d71a:	7dbb      	ldrb	r3, [r7, #22]
 801d71c:	4a9d      	ldr	r2, [pc, #628]	; (801d994 <vOutContolTask+0x2c4>)
 801d71e:	2158      	movs	r1, #88	; 0x58
 801d720:	fb01 f303 	mul.w	r3, r1, r3
 801d724:	4413      	add	r3, r2
 801d726:	3309      	adds	r3, #9
 801d728:	781b      	ldrb	r3, [r3, #0]
 801d72a:	2b10      	cmp	r3, #16
 801d72c:	f200 8185 	bhi.w	801da3a <vOutContolTask+0x36a>
 801d730:	a201      	add	r2, pc, #4	; (adr r2, 801d738 <vOutContolTask+0x68>)
 801d732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d736:	bf00      	nop
 801d738:	0801d77d 	.word	0x0801d77d
 801d73c:	0801d7bd 	.word	0x0801d7bd
 801d740:	0801d8c9 	.word	0x0801d8c9
 801d744:	0801da3b 	.word	0x0801da3b
 801d748:	0801da3b 	.word	0x0801da3b
 801d74c:	0801da3b 	.word	0x0801da3b
 801d750:	0801da3b 	.word	0x0801da3b
 801d754:	0801da3b 	.word	0x0801da3b
 801d758:	0801d93f 	.word	0x0801d93f
 801d75c:	0801da3b 	.word	0x0801da3b
 801d760:	0801da3b 	.word	0x0801da3b
 801d764:	0801da3b 	.word	0x0801da3b
 801d768:	0801da3b 	.word	0x0801da3b
 801d76c:	0801da3b 	.word	0x0801da3b
 801d770:	0801da3b 	.word	0x0801da3b
 801d774:	0801da3b 	.word	0x0801da3b
 801d778:	0801d999 	.word	0x0801d999
					{
					case STATE_OUT_OFF: //Состония входа - выключен
							if (out[i].out_logic_state == OUT_ON)  //Если обнаружено логическое соостония -вкл, то переходим в состония включения
 801d77c:	7dbb      	ldrb	r3, [r7, #22]
 801d77e:	4a85      	ldr	r2, [pc, #532]	; (801d994 <vOutContolTask+0x2c4>)
 801d780:	2158      	movs	r1, #88	; 0x58
 801d782:	fb01 f303 	mul.w	r3, r1, r3
 801d786:	4413      	add	r3, r2
 801d788:	3308      	adds	r3, #8
 801d78a:	781b      	ldrb	r3, [r3, #0]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	f040 814f 	bne.w	801da30 <vOutContolTask+0x360>
							{
								out[i].out_state = STATE_OUT_ON_PROCESS;
 801d792:	7dbb      	ldrb	r3, [r7, #22]
 801d794:	4a7f      	ldr	r2, [pc, #508]	; (801d994 <vOutContolTask+0x2c4>)
 801d796:	2158      	movs	r1, #88	; 0x58
 801d798:	fb01 f303 	mul.w	r3, r1, r3
 801d79c:	4413      	add	r3, r2
 801d79e:	3309      	adds	r3, #9
 801d7a0:	2201      	movs	r2, #1
 801d7a2:	701a      	strb	r2, [r3, #0]
								out[i].overload_timer = 0U;
 801d7a4:	7dbb      	ldrb	r3, [r7, #22]
 801d7a6:	4a7b      	ldr	r2, [pc, #492]	; (801d994 <vOutContolTask+0x2c4>)
 801d7a8:	2158      	movs	r1, #88	; 0x58
 801d7aa:	fb01 f303 	mul.w	r3, r1, r3
 801d7ae:	4413      	add	r3, r2
 801d7b0:	3318      	adds	r3, #24
 801d7b2:	2200      	movs	r2, #0
 801d7b4:	801a      	strh	r2, [r3, #0]
								cur_power = START_POWER;
 801d7b6:	231e      	movs	r3, #30
 801d7b8:	75fb      	strb	r3, [r7, #23]
							}
							break;
 801d7ba:	e139      	b.n	801da30 <vOutContolTask+0x360>
					case STATE_OUT_ON_PROCESS: //Состояния влючения
							out[i].overload_timer++;
 801d7bc:	7dbb      	ldrb	r3, [r7, #22]
 801d7be:	4975      	ldr	r1, [pc, #468]	; (801d994 <vOutContolTask+0x2c4>)
 801d7c0:	2258      	movs	r2, #88	; 0x58
 801d7c2:	fb03 f202 	mul.w	r2, r3, r2
 801d7c6:	440a      	add	r2, r1
 801d7c8:	3218      	adds	r2, #24
 801d7ca:	8812      	ldrh	r2, [r2, #0]
 801d7cc:	3201      	adds	r2, #1
 801d7ce:	b290      	uxth	r0, r2
 801d7d0:	4a70      	ldr	r2, [pc, #448]	; (801d994 <vOutContolTask+0x2c4>)
 801d7d2:	2158      	movs	r1, #88	; 0x58
 801d7d4:	fb01 f303 	mul.w	r3, r1, r3
 801d7d8:	4413      	add	r3, r2
 801d7da:	3318      	adds	r3, #24
 801d7dc:	4602      	mov	r2, r0
 801d7de:	801a      	strh	r2, [r3, #0]
							if ( (out[i].error_flag == ERROR_ON) || (out[i].error_flag == ERROR_OVERLOAD) ) //Если обнаружена перегрузка
 801d7e0:	7dbb      	ldrb	r3, [r7, #22]
 801d7e2:	4a6c      	ldr	r2, [pc, #432]	; (801d994 <vOutContolTask+0x2c4>)
 801d7e4:	2158      	movs	r1, #88	; 0x58
 801d7e6:	fb01 f303 	mul.w	r3, r1, r3
 801d7ea:	4413      	add	r3, r2
 801d7ec:	3320      	adds	r3, #32
 801d7ee:	781b      	ldrb	r3, [r3, #0]
 801d7f0:	2b01      	cmp	r3, #1
 801d7f2:	d009      	beq.n	801d808 <vOutContolTask+0x138>
 801d7f4:	7dbb      	ldrb	r3, [r7, #22]
 801d7f6:	4a67      	ldr	r2, [pc, #412]	; (801d994 <vOutContolTask+0x2c4>)
 801d7f8:	2158      	movs	r1, #88	; 0x58
 801d7fa:	fb01 f303 	mul.w	r3, r1, r3
 801d7fe:	4413      	add	r3, r2
 801d800:	3320      	adds	r3, #32
 801d802:	781b      	ldrb	r3, [r3, #0]
 801d804:	2b02      	cmp	r3, #2
 801d806:	d10d      	bne.n	801d824 <vOutContolTask+0x154>
							{
								vHWOutResete(i);  //Выключаем выход
 801d808:	7dbb      	ldrb	r3, [r7, #22]
 801d80a:	4618      	mov	r0, r3
 801d80c:	f7ff fb54 	bl	801ceb8 <vHWOutResete>
								out[i].out_state = STATE_OUT_ERROR_PROCESS; //Переходим в состония бработки ошибок
 801d810:	7dbb      	ldrb	r3, [r7, #22]
 801d812:	4a60      	ldr	r2, [pc, #384]	; (801d994 <vOutContolTask+0x2c4>)
 801d814:	2158      	movs	r1, #88	; 0x58
 801d816:	fb01 f303 	mul.w	r3, r1, r3
 801d81a:	4413      	add	r3, r2
 801d81c:	3309      	adds	r3, #9
 801d81e:	2208      	movs	r2, #8
 801d820:	701a      	strb	r2, [r3, #0]
								break;
 801d822:	e10a      	b.n	801da3a <vOutContolTask+0x36a>
							}
							if  ( out[i].overload_timer >= out[i].overload_config_timer ) //Если прошло время полонго пуска
 801d824:	7dbb      	ldrb	r3, [r7, #22]
 801d826:	4a5b      	ldr	r2, [pc, #364]	; (801d994 <vOutContolTask+0x2c4>)
 801d828:	2158      	movs	r1, #88	; 0x58
 801d82a:	fb01 f303 	mul.w	r3, r1, r3
 801d82e:	4413      	add	r3, r2
 801d830:	3318      	adds	r3, #24
 801d832:	881a      	ldrh	r2, [r3, #0]
 801d834:	7dbb      	ldrb	r3, [r7, #22]
 801d836:	4957      	ldr	r1, [pc, #348]	; (801d994 <vOutContolTask+0x2c4>)
 801d838:	2058      	movs	r0, #88	; 0x58
 801d83a:	fb00 f303 	mul.w	r3, r0, r3
 801d83e:	440b      	add	r3, r1
 801d840:	3316      	adds	r3, #22
 801d842:	881b      	ldrh	r3, [r3, #0]
 801d844:	429a      	cmp	r2, r3
 801d846:	d30b      	bcc.n	801d860 <vOutContolTask+0x190>
							{
									out[i].out_state = STATE_OUT_ON; //переходим в стосония влючено и запускаем выход на 100% мощности
 801d848:	7dbb      	ldrb	r3, [r7, #22]
 801d84a:	4a52      	ldr	r2, [pc, #328]	; (801d994 <vOutContolTask+0x2c4>)
 801d84c:	2158      	movs	r1, #88	; 0x58
 801d84e:	fb01 f303 	mul.w	r3, r1, r3
 801d852:	4413      	add	r3, r2
 801d854:	3309      	adds	r3, #9
 801d856:	2202      	movs	r2, #2
 801d858:	701a      	strb	r2, [r3, #0]
									cur_power = 100;
 801d85a:	2364      	movs	r3, #100	; 0x64
 801d85c:	75fb      	strb	r3, [r7, #23]
 801d85e:	e02c      	b.n	801d8ba <vOutContolTask+0x1ea>
							}
							else
							{   //время пуска не прошоло, вычисляем текущую мощность, котору надо пдать на выход.
								temp_power =(uint8_t) (float)out[i].overload_timer/out[i].overload_config_timer*100;
 801d860:	7dbb      	ldrb	r3, [r7, #22]
 801d862:	4a4c      	ldr	r2, [pc, #304]	; (801d994 <vOutContolTask+0x2c4>)
 801d864:	2158      	movs	r1, #88	; 0x58
 801d866:	fb01 f303 	mul.w	r3, r1, r3
 801d86a:	4413      	add	r3, r2
 801d86c:	3318      	adds	r3, #24
 801d86e:	881b      	ldrh	r3, [r3, #0]
 801d870:	ee07 3a90 	vmov	s15, r3
 801d874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d87c:	edc7 7a00 	vstr	s15, [r7]
 801d880:	783b      	ldrb	r3, [r7, #0]
 801d882:	b2db      	uxtb	r3, r3
 801d884:	4618      	mov	r0, r3
 801d886:	7dbb      	ldrb	r3, [r7, #22]
 801d888:	4a42      	ldr	r2, [pc, #264]	; (801d994 <vOutContolTask+0x2c4>)
 801d88a:	2158      	movs	r1, #88	; 0x58
 801d88c:	fb01 f303 	mul.w	r3, r1, r3
 801d890:	4413      	add	r3, r2
 801d892:	3316      	adds	r3, #22
 801d894:	881b      	ldrh	r3, [r3, #0]
 801d896:	fb90 f3f3 	sdiv	r3, r0, r3
 801d89a:	b2db      	uxtb	r3, r3
 801d89c:	461a      	mov	r2, r3
 801d89e:	0092      	lsls	r2, r2, #2
 801d8a0:	4413      	add	r3, r2
 801d8a2:	461a      	mov	r2, r3
 801d8a4:	0091      	lsls	r1, r2, #2
 801d8a6:	461a      	mov	r2, r3
 801d8a8:	460b      	mov	r3, r1
 801d8aa:	4413      	add	r3, r2
 801d8ac:	009b      	lsls	r3, r3, #2
 801d8ae:	73fb      	strb	r3, [r7, #15]
								if (temp_power > START_POWER)
 801d8b0:	7bfb      	ldrb	r3, [r7, #15]
 801d8b2:	2b1e      	cmp	r3, #30
 801d8b4:	d901      	bls.n	801d8ba <vOutContolTask+0x1ea>
								{
									cur_power = temp_power;
 801d8b6:	7bfb      	ldrb	r3, [r7, #15]
 801d8b8:	75fb      	strb	r3, [r7, #23]
								}
							}
							vHWOutSet(i,cur_power);
 801d8ba:	7dfa      	ldrb	r2, [r7, #23]
 801d8bc:	7dbb      	ldrb	r3, [r7, #22]
 801d8be:	4611      	mov	r1, r2
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	f7ff fb25 	bl	801cf10 <vHWOutSet>
							break;
 801d8c6:	e0b8      	b.n	801da3a <vOutContolTask+0x36a>
						case STATE_OUT_ON:  // Состояние входа - включен
								//Если система обнаружила ошибку ключа или ток больше номинального
								if ( (out[i].error_flag == ERROR_ON) || (out[i].error_flag == ERROR_OVERLOAD) )
 801d8c8:	7dbb      	ldrb	r3, [r7, #22]
 801d8ca:	4a32      	ldr	r2, [pc, #200]	; (801d994 <vOutContolTask+0x2c4>)
 801d8cc:	2158      	movs	r1, #88	; 0x58
 801d8ce:	fb01 f303 	mul.w	r3, r1, r3
 801d8d2:	4413      	add	r3, r2
 801d8d4:	3320      	adds	r3, #32
 801d8d6:	781b      	ldrb	r3, [r3, #0]
 801d8d8:	2b01      	cmp	r3, #1
 801d8da:	d009      	beq.n	801d8f0 <vOutContolTask+0x220>
 801d8dc:	7dbb      	ldrb	r3, [r7, #22]
 801d8de:	4a2d      	ldr	r2, [pc, #180]	; (801d994 <vOutContolTask+0x2c4>)
 801d8e0:	2158      	movs	r1, #88	; 0x58
 801d8e2:	fb01 f303 	mul.w	r3, r1, r3
 801d8e6:	4413      	add	r3, r2
 801d8e8:	3320      	adds	r3, #32
 801d8ea:	781b      	ldrb	r3, [r3, #0]
 801d8ec:	2b02      	cmp	r3, #2
 801d8ee:	d10d      	bne.n	801d90c <vOutContolTask+0x23c>
								{
									vHWOutResete(i);
 801d8f0:	7dbb      	ldrb	r3, [r7, #22]
 801d8f2:	4618      	mov	r0, r3
 801d8f4:	f7ff fae0 	bl	801ceb8 <vHWOutResete>
									out[i].out_state = STATE_OUT_ERROR_PROCESS;
 801d8f8:	7dbb      	ldrb	r3, [r7, #22]
 801d8fa:	4a26      	ldr	r2, [pc, #152]	; (801d994 <vOutContolTask+0x2c4>)
 801d8fc:	2158      	movs	r1, #88	; 0x58
 801d8fe:	fb01 f303 	mul.w	r3, r1, r3
 801d902:	4413      	add	r3, r2
 801d904:	3309      	adds	r3, #9
 801d906:	2208      	movs	r2, #8
 801d908:	701a      	strb	r2, [r3, #0]
									break;
 801d90a:	e096      	b.n	801da3a <vOutContolTask+0x36a>
								}
								if  (out[i].out_logic_state == OUT_OFF)
 801d90c:	7dbb      	ldrb	r3, [r7, #22]
 801d90e:	4a21      	ldr	r2, [pc, #132]	; (801d994 <vOutContolTask+0x2c4>)
 801d910:	2158      	movs	r1, #88	; 0x58
 801d912:	fb01 f303 	mul.w	r3, r1, r3
 801d916:	4413      	add	r3, r2
 801d918:	3308      	adds	r3, #8
 801d91a:	781b      	ldrb	r3, [r3, #0]
 801d91c:	2b01      	cmp	r3, #1
 801d91e:	f040 8089 	bne.w	801da34 <vOutContolTask+0x364>
								{
									vHWOutResete(i);
 801d922:	7dbb      	ldrb	r3, [r7, #22]
 801d924:	4618      	mov	r0, r3
 801d926:	f7ff fac7 	bl	801ceb8 <vHWOutResete>
									out[i].out_state = STATE_OUT_OFF;
 801d92a:	7dbb      	ldrb	r3, [r7, #22]
 801d92c:	4a19      	ldr	r2, [pc, #100]	; (801d994 <vOutContolTask+0x2c4>)
 801d92e:	2158      	movs	r1, #88	; 0x58
 801d930:	fb01 f303 	mul.w	r3, r1, r3
 801d934:	4413      	add	r3, r2
 801d936:	3309      	adds	r3, #9
 801d938:	2200      	movs	r2, #0
 801d93a:	701a      	strb	r2, [r3, #0]
								}
								break;
 801d93c:	e07a      	b.n	801da34 <vOutContolTask+0x364>
						case STATE_OUT_ERROR_PROCESS:
							   if (out[i].error_count == 1)
 801d93e:	7dbb      	ldrb	r3, [r7, #22]
 801d940:	4a14      	ldr	r2, [pc, #80]	; (801d994 <vOutContolTask+0x2c4>)
 801d942:	2158      	movs	r1, #88	; 0x58
 801d944:	fb01 f303 	mul.w	r3, r1, r3
 801d948:	4413      	add	r3, r2
 801d94a:	331a      	adds	r3, #26
 801d94c:	781b      	ldrb	r3, [r3, #0]
 801d94e:	2b01      	cmp	r3, #1
 801d950:	d109      	bne.n	801d966 <vOutContolTask+0x296>
							   {
								   out[i].out_state = STATE_OUT_ERROR;
 801d952:	7dbb      	ldrb	r3, [r7, #22]
 801d954:	4a0f      	ldr	r2, [pc, #60]	; (801d994 <vOutContolTask+0x2c4>)
 801d956:	2158      	movs	r1, #88	; 0x58
 801d958:	fb01 f303 	mul.w	r3, r1, r3
 801d95c:	4413      	add	r3, r2
 801d95e:	3309      	adds	r3, #9
 801d960:	2204      	movs	r2, #4
 801d962:	701a      	strb	r2, [r3, #0]
								   break;
 801d964:	e069      	b.n	801da3a <vOutContolTask+0x36a>
							   }
							   out[i].restart_timer = 0U;
 801d966:	7dbb      	ldrb	r3, [r7, #22]
 801d968:	4a0a      	ldr	r2, [pc, #40]	; (801d994 <vOutContolTask+0x2c4>)
 801d96a:	2158      	movs	r1, #88	; 0x58
 801d96c:	fb01 f303 	mul.w	r3, r1, r3
 801d970:	4413      	add	r3, r2
 801d972:	331c      	adds	r3, #28
 801d974:	2200      	movs	r2, #0
 801d976:	801a      	strh	r2, [r3, #0]
							   out[i].out_state = STATE_OUT_RESTART_PROCESS;
 801d978:	7dbb      	ldrb	r3, [r7, #22]
 801d97a:	4a06      	ldr	r2, [pc, #24]	; (801d994 <vOutContolTask+0x2c4>)
 801d97c:	2158      	movs	r1, #88	; 0x58
 801d97e:	fb01 f303 	mul.w	r3, r1, r3
 801d982:	4413      	add	r3, r2
 801d984:	3309      	adds	r3, #9
 801d986:	2210      	movs	r2, #16
 801d988:	701a      	strb	r2, [r3, #0]
							   break;
 801d98a:	e056      	b.n	801da3a <vOutContolTask+0x36a>
 801d98c:	20010348 	.word	0x20010348
 801d990:	20010344 	.word	0x20010344
 801d994:	2000fbfc 	.word	0x2000fbfc
						case STATE_OUT_ERROR:
							 break;
						case STATE_OUT_RESTART_PROCESS:
							out[i].restart_timer++;
 801d998:	7dbb      	ldrb	r3, [r7, #22]
 801d99a:	492c      	ldr	r1, [pc, #176]	; (801da4c <vOutContolTask+0x37c>)
 801d99c:	2258      	movs	r2, #88	; 0x58
 801d99e:	fb03 f202 	mul.w	r2, r3, r2
 801d9a2:	440a      	add	r2, r1
 801d9a4:	321c      	adds	r2, #28
 801d9a6:	8812      	ldrh	r2, [r2, #0]
 801d9a8:	3201      	adds	r2, #1
 801d9aa:	b290      	uxth	r0, r2
 801d9ac:	4a27      	ldr	r2, [pc, #156]	; (801da4c <vOutContolTask+0x37c>)
 801d9ae:	2158      	movs	r1, #88	; 0x58
 801d9b0:	fb01 f303 	mul.w	r3, r1, r3
 801d9b4:	4413      	add	r3, r2
 801d9b6:	331c      	adds	r3, #28
 801d9b8:	4602      	mov	r2, r0
 801d9ba:	801a      	strh	r2, [r3, #0]
							if  ( out[i].restart_timer >= out[i].restart_config_timer )
 801d9bc:	7dbb      	ldrb	r3, [r7, #22]
 801d9be:	4a23      	ldr	r2, [pc, #140]	; (801da4c <vOutContolTask+0x37c>)
 801d9c0:	2158      	movs	r1, #88	; 0x58
 801d9c2:	fb01 f303 	mul.w	r3, r1, r3
 801d9c6:	4413      	add	r3, r2
 801d9c8:	331c      	adds	r3, #28
 801d9ca:	881a      	ldrh	r2, [r3, #0]
 801d9cc:	7dbb      	ldrb	r3, [r7, #22]
 801d9ce:	491f      	ldr	r1, [pc, #124]	; (801da4c <vOutContolTask+0x37c>)
 801d9d0:	2058      	movs	r0, #88	; 0x58
 801d9d2:	fb00 f303 	mul.w	r3, r0, r3
 801d9d6:	440b      	add	r3, r1
 801d9d8:	331e      	adds	r3, #30
 801d9da:	881b      	ldrh	r3, [r3, #0]
 801d9dc:	429a      	cmp	r2, r3
 801d9de:	d32b      	bcc.n	801da38 <vOutContolTask+0x368>
							{
								if (out[i].error_count > 1)
 801d9e0:	7dbb      	ldrb	r3, [r7, #22]
 801d9e2:	4a1a      	ldr	r2, [pc, #104]	; (801da4c <vOutContolTask+0x37c>)
 801d9e4:	2158      	movs	r1, #88	; 0x58
 801d9e6:	fb01 f303 	mul.w	r3, r1, r3
 801d9ea:	4413      	add	r3, r2
 801d9ec:	331a      	adds	r3, #26
 801d9ee:	781b      	ldrb	r3, [r3, #0]
 801d9f0:	2b01      	cmp	r3, #1
 801d9f2:	d921      	bls.n	801da38 <vOutContolTask+0x368>
								{
									out[i].out_state = STATE_OUT_OFF;
 801d9f4:	7dbb      	ldrb	r3, [r7, #22]
 801d9f6:	4a15      	ldr	r2, [pc, #84]	; (801da4c <vOutContolTask+0x37c>)
 801d9f8:	2158      	movs	r1, #88	; 0x58
 801d9fa:	fb01 f303 	mul.w	r3, r1, r3
 801d9fe:	4413      	add	r3, r2
 801da00:	3309      	adds	r3, #9
 801da02:	2200      	movs	r2, #0
 801da04:	701a      	strb	r2, [r3, #0]
									out[i].error_count--;
 801da06:	7dbb      	ldrb	r3, [r7, #22]
 801da08:	4910      	ldr	r1, [pc, #64]	; (801da4c <vOutContolTask+0x37c>)
 801da0a:	2258      	movs	r2, #88	; 0x58
 801da0c:	fb03 f202 	mul.w	r2, r3, r2
 801da10:	440a      	add	r2, r1
 801da12:	321a      	adds	r2, #26
 801da14:	7812      	ldrb	r2, [r2, #0]
 801da16:	3a01      	subs	r2, #1
 801da18:	b2d0      	uxtb	r0, r2
 801da1a:	4a0c      	ldr	r2, [pc, #48]	; (801da4c <vOutContolTask+0x37c>)
 801da1c:	2158      	movs	r1, #88	; 0x58
 801da1e:	fb01 f303 	mul.w	r3, r1, r3
 801da22:	4413      	add	r3, r2
 801da24:	331a      	adds	r3, #26
 801da26:	4602      	mov	r2, r0
 801da28:	701a      	strb	r2, [r3, #0]
									break;
 801da2a:	e006      	b.n	801da3a <vOutContolTask+0x36a>
								}
							}
							break;
					}
				}
 801da2c:	bf00      	nop
 801da2e:	e004      	b.n	801da3a <vOutContolTask+0x36a>
							break;
 801da30:	bf00      	nop
 801da32:	e002      	b.n	801da3a <vOutContolTask+0x36a>
								break;
 801da34:	bf00      	nop
 801da36:	e000      	b.n	801da3a <vOutContolTask+0x36a>
							break;
 801da38:	bf00      	nop
			for (uint8_t i=0; i<OUT_COUNT;i++)
 801da3a:	7dbb      	ldrb	r3, [r7, #22]
 801da3c:	3301      	adds	r3, #1
 801da3e:	75bb      	strb	r3, [r7, #22]
 801da40:	7dbb      	ldrb	r3, [r7, #22]
 801da42:	2b13      	cmp	r3, #19
 801da44:	f67f ae5d 	bls.w	801d702 <vOutContolTask+0x32>
		   vTaskDelay(1);
 801da48:	e64e      	b.n	801d6e8 <vOutContolTask+0x18>
 801da4a:	bf00      	nop
 801da4c:	2000fbfc 	.word	0x2000fbfc

0801da50 <vADC_Ready>:
}



 void vADC_Ready ( uint8_t adc_number )
 {
 801da50:	b580      	push	{r7, lr}
 801da52:	b082      	sub	sp, #8
 801da54:	af00      	add	r7, sp, #0
 801da56:	4603      	mov	r3, r0
 801da58:	71fb      	strb	r3, [r7, #7]
   static portBASE_TYPE xHigherPriorityTaskWoken;

   xHigherPriorityTaskWoken = pdFALSE;
 801da5a:	4b1b      	ldr	r3, [pc, #108]	; (801dac8 <vADC_Ready+0x78>)
 801da5c:	2200      	movs	r2, #0
 801da5e:	601a      	str	r2, [r3, #0]
   switch ( adc_number )
 801da60:	79fb      	ldrb	r3, [r7, #7]
 801da62:	2b04      	cmp	r3, #4
 801da64:	d006      	beq.n	801da74 <vADC_Ready+0x24>
 801da66:	2b04      	cmp	r3, #4
 801da68:	dc1c      	bgt.n	801daa4 <vADC_Ready+0x54>
 801da6a:	2b01      	cmp	r3, #1
 801da6c:	d012      	beq.n	801da94 <vADC_Ready+0x44>
 801da6e:	2b02      	cmp	r3, #2
 801da70:	d008      	beq.n	801da84 <vADC_Ready+0x34>
       break;
     case ADC1_READY:
       xEventGroupSetBitsFromISR( xADCEvent, ADC1_READY, &xHigherPriorityTaskWoken );
       break;
     default:
       break;
 801da72:	e017      	b.n	801daa4 <vADC_Ready+0x54>
       xEventGroupSetBitsFromISR( xADCEvent, ADC3_READY, &xHigherPriorityTaskWoken );
 801da74:	4b15      	ldr	r3, [pc, #84]	; (801dacc <vADC_Ready+0x7c>)
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	4a13      	ldr	r2, [pc, #76]	; (801dac8 <vADC_Ready+0x78>)
 801da7a:	2104      	movs	r1, #4
 801da7c:	4618      	mov	r0, r3
 801da7e:	f7fc fae1 	bl	801a044 <xEventGroupSetBitsFromISR>
       break;
 801da82:	e010      	b.n	801daa6 <vADC_Ready+0x56>
       xEventGroupSetBitsFromISR( xADCEvent, ADC2_READY, &xHigherPriorityTaskWoken );
 801da84:	4b11      	ldr	r3, [pc, #68]	; (801dacc <vADC_Ready+0x7c>)
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	4a0f      	ldr	r2, [pc, #60]	; (801dac8 <vADC_Ready+0x78>)
 801da8a:	2102      	movs	r1, #2
 801da8c:	4618      	mov	r0, r3
 801da8e:	f7fc fad9 	bl	801a044 <xEventGroupSetBitsFromISR>
       break;
 801da92:	e008      	b.n	801daa6 <vADC_Ready+0x56>
       xEventGroupSetBitsFromISR( xADCEvent, ADC1_READY, &xHigherPriorityTaskWoken );
 801da94:	4b0d      	ldr	r3, [pc, #52]	; (801dacc <vADC_Ready+0x7c>)
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	4a0b      	ldr	r2, [pc, #44]	; (801dac8 <vADC_Ready+0x78>)
 801da9a:	2101      	movs	r1, #1
 801da9c:	4618      	mov	r0, r3
 801da9e:	f7fc fad1 	bl	801a044 <xEventGroupSetBitsFromISR>
       break;
 801daa2:	e000      	b.n	801daa6 <vADC_Ready+0x56>
       break;
 801daa4:	bf00      	nop
   }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 801daa6:	4b08      	ldr	r3, [pc, #32]	; (801dac8 <vADC_Ready+0x78>)
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d008      	beq.n	801dac0 <vADC_Ready+0x70>
 801daae:	4b08      	ldr	r3, [pc, #32]	; (801dad0 <vADC_Ready+0x80>)
 801dab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801dab4:	601a      	str	r2, [r3, #0]
 801dab6:	f3bf 8f4f 	dsb	sy
 801daba:	f3bf 8f6f 	isb	sy
   return;
 801dabe:	bf00      	nop
 801dac0:	bf00      	nop
 }
 801dac2:	3708      	adds	r7, #8
 801dac4:	46bd      	mov	sp, r7
 801dac6:	bd80      	pop	{r7, pc}
 801dac8:	20010368 	.word	0x20010368
 801dacc:	20010320 	.word	0x20010320
 801dad0:	e000ed04 	.word	0xe000ed04

0801dad4 <vLuaTask>:
#include "FreeRTOS.h"
#include "script.c"


void vLuaTask(void *argument)
{
 801dad4:	b580      	push	{r7, lr}
 801dad6:	b084      	sub	sp, #16
 801dad8:	af00      	add	r7, sp, #0
 801dada:	6078      	str	r0, [r7, #4]

	 lua_State *L = luaL_newstate(); //Create new LUA state
 801dadc:	f7ea fbbc 	bl	8008258 <luaL_newstate>
 801dae0:	60f8      	str	r0, [r7, #12]
  //   luaL_openlibs(L); // open standard libraries
  //   luaL_loadstring(L, lib );
 //    luaL_loadstring(L, mainscript);
	 while(1)
	{
		  vTaskDelay(1 );
 801dae2:	2001      	movs	r0, #1
 801dae4:	f7fd fa1a 	bl	801af1c <vTaskDelay>
	{
 801dae8:	e7fb      	b.n	801dae2 <vLuaTask+0xe>
	...

0801daec <floorf>:
 801daec:	ee10 3a10 	vmov	r3, s0
 801daf0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801daf4:	3a7f      	subs	r2, #127	; 0x7f
 801daf6:	2a16      	cmp	r2, #22
 801daf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801dafc:	dc2a      	bgt.n	801db54 <floorf+0x68>
 801dafe:	2a00      	cmp	r2, #0
 801db00:	da11      	bge.n	801db26 <floorf+0x3a>
 801db02:	eddf 7a18 	vldr	s15, [pc, #96]	; 801db64 <floorf+0x78>
 801db06:	ee30 0a27 	vadd.f32	s0, s0, s15
 801db0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801db0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db12:	dd05      	ble.n	801db20 <floorf+0x34>
 801db14:	2b00      	cmp	r3, #0
 801db16:	da23      	bge.n	801db60 <floorf+0x74>
 801db18:	4a13      	ldr	r2, [pc, #76]	; (801db68 <floorf+0x7c>)
 801db1a:	2900      	cmp	r1, #0
 801db1c:	bf18      	it	ne
 801db1e:	4613      	movne	r3, r2
 801db20:	ee00 3a10 	vmov	s0, r3
 801db24:	4770      	bx	lr
 801db26:	4911      	ldr	r1, [pc, #68]	; (801db6c <floorf+0x80>)
 801db28:	4111      	asrs	r1, r2
 801db2a:	420b      	tst	r3, r1
 801db2c:	d0fa      	beq.n	801db24 <floorf+0x38>
 801db2e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801db64 <floorf+0x78>
 801db32:	ee30 0a27 	vadd.f32	s0, s0, s15
 801db36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801db3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db3e:	ddef      	ble.n	801db20 <floorf+0x34>
 801db40:	2b00      	cmp	r3, #0
 801db42:	bfbe      	ittt	lt
 801db44:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801db48:	fa40 f202 	asrlt.w	r2, r0, r2
 801db4c:	189b      	addlt	r3, r3, r2
 801db4e:	ea23 0301 	bic.w	r3, r3, r1
 801db52:	e7e5      	b.n	801db20 <floorf+0x34>
 801db54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801db58:	d3e4      	bcc.n	801db24 <floorf+0x38>
 801db5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801db5e:	4770      	bx	lr
 801db60:	2300      	movs	r3, #0
 801db62:	e7dd      	b.n	801db20 <floorf+0x34>
 801db64:	7149f2ca 	.word	0x7149f2ca
 801db68:	bf800000 	.word	0xbf800000
 801db6c:	007fffff 	.word	0x007fffff

0801db70 <frexpf>:
 801db70:	ee10 3a10 	vmov	r3, s0
 801db74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801db78:	2100      	movs	r1, #0
 801db7a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801db7e:	6001      	str	r1, [r0, #0]
 801db80:	da19      	bge.n	801dbb6 <frexpf+0x46>
 801db82:	b1c2      	cbz	r2, 801dbb6 <frexpf+0x46>
 801db84:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801db88:	d10a      	bne.n	801dba0 <frexpf+0x30>
 801db8a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801dbb8 <frexpf+0x48>
 801db8e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801db92:	f06f 0118 	mvn.w	r1, #24
 801db96:	ee17 3a90 	vmov	r3, s15
 801db9a:	6001      	str	r1, [r0, #0]
 801db9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801dba0:	6801      	ldr	r1, [r0, #0]
 801dba2:	15d2      	asrs	r2, r2, #23
 801dba4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801dba8:	3a7e      	subs	r2, #126	; 0x7e
 801dbaa:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801dbae:	440a      	add	r2, r1
 801dbb0:	ee00 3a10 	vmov	s0, r3
 801dbb4:	6002      	str	r2, [r0, #0]
 801dbb6:	4770      	bx	lr
 801dbb8:	4c000000 	.word	0x4c000000

0801dbbc <scalbnf>:
 801dbbc:	ee10 3a10 	vmov	r3, s0
 801dbc0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801dbc4:	d025      	beq.n	801dc12 <scalbnf+0x56>
 801dbc6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801dbca:	d302      	bcc.n	801dbd2 <scalbnf+0x16>
 801dbcc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dbd0:	4770      	bx	lr
 801dbd2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801dbd6:	d122      	bne.n	801dc1e <scalbnf+0x62>
 801dbd8:	4b2a      	ldr	r3, [pc, #168]	; (801dc84 <scalbnf+0xc8>)
 801dbda:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801dc88 <scalbnf+0xcc>
 801dbde:	4298      	cmp	r0, r3
 801dbe0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dbe4:	db16      	blt.n	801dc14 <scalbnf+0x58>
 801dbe6:	ee10 3a10 	vmov	r3, s0
 801dbea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801dbee:	3a19      	subs	r2, #25
 801dbf0:	4402      	add	r2, r0
 801dbf2:	2afe      	cmp	r2, #254	; 0xfe
 801dbf4:	dd15      	ble.n	801dc22 <scalbnf+0x66>
 801dbf6:	ee10 3a10 	vmov	r3, s0
 801dbfa:	eddf 7a24 	vldr	s15, [pc, #144]	; 801dc8c <scalbnf+0xd0>
 801dbfe:	eddf 6a24 	vldr	s13, [pc, #144]	; 801dc90 <scalbnf+0xd4>
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	eeb0 7a67 	vmov.f32	s14, s15
 801dc08:	bfb8      	it	lt
 801dc0a:	eef0 7a66 	vmovlt.f32	s15, s13
 801dc0e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801dc12:	4770      	bx	lr
 801dc14:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801dc94 <scalbnf+0xd8>
 801dc18:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dc1c:	4770      	bx	lr
 801dc1e:	0dd2      	lsrs	r2, r2, #23
 801dc20:	e7e6      	b.n	801dbf0 <scalbnf+0x34>
 801dc22:	2a00      	cmp	r2, #0
 801dc24:	dd06      	ble.n	801dc34 <scalbnf+0x78>
 801dc26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801dc2a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801dc2e:	ee00 3a10 	vmov	s0, r3
 801dc32:	4770      	bx	lr
 801dc34:	f112 0f16 	cmn.w	r2, #22
 801dc38:	da1a      	bge.n	801dc70 <scalbnf+0xb4>
 801dc3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801dc3e:	4298      	cmp	r0, r3
 801dc40:	ee10 3a10 	vmov	r3, s0
 801dc44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dc48:	dd0a      	ble.n	801dc60 <scalbnf+0xa4>
 801dc4a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801dc8c <scalbnf+0xd0>
 801dc4e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801dc90 <scalbnf+0xd4>
 801dc52:	eef0 7a40 	vmov.f32	s15, s0
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	bf18      	it	ne
 801dc5a:	eeb0 0a47 	vmovne.f32	s0, s14
 801dc5e:	e7db      	b.n	801dc18 <scalbnf+0x5c>
 801dc60:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801dc94 <scalbnf+0xd8>
 801dc64:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801dc98 <scalbnf+0xdc>
 801dc68:	eef0 7a40 	vmov.f32	s15, s0
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	e7f3      	b.n	801dc58 <scalbnf+0x9c>
 801dc70:	3219      	adds	r2, #25
 801dc72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801dc76:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801dc7a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801dc9c <scalbnf+0xe0>
 801dc7e:	ee07 3a10 	vmov	s14, r3
 801dc82:	e7c4      	b.n	801dc0e <scalbnf+0x52>
 801dc84:	ffff3cb0 	.word	0xffff3cb0
 801dc88:	4c000000 	.word	0x4c000000
 801dc8c:	7149f2ca 	.word	0x7149f2ca
 801dc90:	f149f2ca 	.word	0xf149f2ca
 801dc94:	0da24260 	.word	0x0da24260
 801dc98:	8da24260 	.word	0x8da24260
 801dc9c:	33000000 	.word	0x33000000

0801dca0 <fmodf>:
 801dca0:	b508      	push	{r3, lr}
 801dca2:	ed2d 8b02 	vpush	{d8}
 801dca6:	eef0 8a40 	vmov.f32	s17, s0
 801dcaa:	eeb0 8a60 	vmov.f32	s16, s1
 801dcae:	f000 f86f 	bl	801dd90 <__ieee754_fmodf>
 801dcb2:	eef4 8a48 	vcmp.f32	s17, s16
 801dcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcba:	d60c      	bvs.n	801dcd6 <fmodf+0x36>
 801dcbc:	eddf 8a07 	vldr	s17, [pc, #28]	; 801dcdc <fmodf+0x3c>
 801dcc0:	eeb4 8a68 	vcmp.f32	s16, s17
 801dcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcc8:	d105      	bne.n	801dcd6 <fmodf+0x36>
 801dcca:	f000 fbf9 	bl	801e4c0 <__errno>
 801dcce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801dcd2:	2321      	movs	r3, #33	; 0x21
 801dcd4:	6003      	str	r3, [r0, #0]
 801dcd6:	ecbd 8b02 	vpop	{d8}
 801dcda:	bd08      	pop	{r3, pc}
 801dcdc:	00000000 	.word	0x00000000

0801dce0 <powf>:
 801dce0:	b508      	push	{r3, lr}
 801dce2:	ed2d 8b04 	vpush	{d8-d9}
 801dce6:	eeb0 8a60 	vmov.f32	s16, s1
 801dcea:	eeb0 9a40 	vmov.f32	s18, s0
 801dcee:	f000 f8d1 	bl	801de94 <__ieee754_powf>
 801dcf2:	eeb4 8a48 	vcmp.f32	s16, s16
 801dcf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcfa:	eef0 8a40 	vmov.f32	s17, s0
 801dcfe:	d63e      	bvs.n	801dd7e <powf+0x9e>
 801dd00:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801dd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd08:	d112      	bne.n	801dd30 <powf+0x50>
 801dd0a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801dd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd12:	d039      	beq.n	801dd88 <powf+0xa8>
 801dd14:	eeb0 0a48 	vmov.f32	s0, s16
 801dd18:	f000 fbb7 	bl	801e48a <finitef>
 801dd1c:	b378      	cbz	r0, 801dd7e <powf+0x9e>
 801dd1e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801dd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd26:	d52a      	bpl.n	801dd7e <powf+0x9e>
 801dd28:	f000 fbca 	bl	801e4c0 <__errno>
 801dd2c:	2322      	movs	r3, #34	; 0x22
 801dd2e:	e014      	b.n	801dd5a <powf+0x7a>
 801dd30:	f000 fbab 	bl	801e48a <finitef>
 801dd34:	b998      	cbnz	r0, 801dd5e <powf+0x7e>
 801dd36:	eeb0 0a49 	vmov.f32	s0, s18
 801dd3a:	f000 fba6 	bl	801e48a <finitef>
 801dd3e:	b170      	cbz	r0, 801dd5e <powf+0x7e>
 801dd40:	eeb0 0a48 	vmov.f32	s0, s16
 801dd44:	f000 fba1 	bl	801e48a <finitef>
 801dd48:	b148      	cbz	r0, 801dd5e <powf+0x7e>
 801dd4a:	eef4 8a68 	vcmp.f32	s17, s17
 801dd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd52:	d7e9      	bvc.n	801dd28 <powf+0x48>
 801dd54:	f000 fbb4 	bl	801e4c0 <__errno>
 801dd58:	2321      	movs	r3, #33	; 0x21
 801dd5a:	6003      	str	r3, [r0, #0]
 801dd5c:	e00f      	b.n	801dd7e <powf+0x9e>
 801dd5e:	eef5 8a40 	vcmp.f32	s17, #0.0
 801dd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd66:	d10a      	bne.n	801dd7e <powf+0x9e>
 801dd68:	eeb0 0a49 	vmov.f32	s0, s18
 801dd6c:	f000 fb8d 	bl	801e48a <finitef>
 801dd70:	b128      	cbz	r0, 801dd7e <powf+0x9e>
 801dd72:	eeb0 0a48 	vmov.f32	s0, s16
 801dd76:	f000 fb88 	bl	801e48a <finitef>
 801dd7a:	2800      	cmp	r0, #0
 801dd7c:	d1d4      	bne.n	801dd28 <powf+0x48>
 801dd7e:	eeb0 0a68 	vmov.f32	s0, s17
 801dd82:	ecbd 8b04 	vpop	{d8-d9}
 801dd86:	bd08      	pop	{r3, pc}
 801dd88:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801dd8c:	e7f7      	b.n	801dd7e <powf+0x9e>
	...

0801dd90 <__ieee754_fmodf>:
 801dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd92:	ee10 5a90 	vmov	r5, s1
 801dd96:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 801dd9a:	d009      	beq.n	801ddb0 <__ieee754_fmodf+0x20>
 801dd9c:	ee10 2a10 	vmov	r2, s0
 801dda0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801dda4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801dda8:	da02      	bge.n	801ddb0 <__ieee754_fmodf+0x20>
 801ddaa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801ddae:	dd04      	ble.n	801ddba <__ieee754_fmodf+0x2a>
 801ddb0:	ee60 0a20 	vmul.f32	s1, s0, s1
 801ddb4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801ddb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddba:	42a3      	cmp	r3, r4
 801ddbc:	dbfc      	blt.n	801ddb8 <__ieee754_fmodf+0x28>
 801ddbe:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 801ddc2:	d105      	bne.n	801ddd0 <__ieee754_fmodf+0x40>
 801ddc4:	4b32      	ldr	r3, [pc, #200]	; (801de90 <__ieee754_fmodf+0x100>)
 801ddc6:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 801ddca:	ed93 0a00 	vldr	s0, [r3]
 801ddce:	e7f3      	b.n	801ddb8 <__ieee754_fmodf+0x28>
 801ddd0:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 801ddd4:	d13f      	bne.n	801de56 <__ieee754_fmodf+0xc6>
 801ddd6:	0219      	lsls	r1, r3, #8
 801ddd8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 801dddc:	2900      	cmp	r1, #0
 801ddde:	dc37      	bgt.n	801de50 <__ieee754_fmodf+0xc0>
 801dde0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 801dde4:	d13d      	bne.n	801de62 <__ieee754_fmodf+0xd2>
 801dde6:	0227      	lsls	r7, r4, #8
 801dde8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 801ddec:	2f00      	cmp	r7, #0
 801ddee:	da35      	bge.n	801de5c <__ieee754_fmodf+0xcc>
 801ddf0:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801ddf4:	bfbb      	ittet	lt
 801ddf6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801ddfa:	1a12      	sublt	r2, r2, r0
 801ddfc:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801de00:	4093      	lsllt	r3, r2
 801de02:	bfa8      	it	ge
 801de04:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801de08:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801de0c:	bfb5      	itete	lt
 801de0e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801de12:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 801de16:	1a52      	sublt	r2, r2, r1
 801de18:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 801de1c:	bfb8      	it	lt
 801de1e:	4094      	lsllt	r4, r2
 801de20:	1a40      	subs	r0, r0, r1
 801de22:	1b1a      	subs	r2, r3, r4
 801de24:	bb00      	cbnz	r0, 801de68 <__ieee754_fmodf+0xd8>
 801de26:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 801de2a:	bf38      	it	cc
 801de2c:	4613      	movcc	r3, r2
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d0c8      	beq.n	801ddc4 <__ieee754_fmodf+0x34>
 801de32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801de36:	db1f      	blt.n	801de78 <__ieee754_fmodf+0xe8>
 801de38:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801de3c:	db1f      	blt.n	801de7e <__ieee754_fmodf+0xee>
 801de3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801de42:	317f      	adds	r1, #127	; 0x7f
 801de44:	4333      	orrs	r3, r6
 801de46:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801de4a:	ee00 3a10 	vmov	s0, r3
 801de4e:	e7b3      	b.n	801ddb8 <__ieee754_fmodf+0x28>
 801de50:	3801      	subs	r0, #1
 801de52:	0049      	lsls	r1, r1, #1
 801de54:	e7c2      	b.n	801dddc <__ieee754_fmodf+0x4c>
 801de56:	15d8      	asrs	r0, r3, #23
 801de58:	387f      	subs	r0, #127	; 0x7f
 801de5a:	e7c1      	b.n	801dde0 <__ieee754_fmodf+0x50>
 801de5c:	3901      	subs	r1, #1
 801de5e:	007f      	lsls	r7, r7, #1
 801de60:	e7c4      	b.n	801ddec <__ieee754_fmodf+0x5c>
 801de62:	15e1      	asrs	r1, r4, #23
 801de64:	397f      	subs	r1, #127	; 0x7f
 801de66:	e7c3      	b.n	801ddf0 <__ieee754_fmodf+0x60>
 801de68:	2a00      	cmp	r2, #0
 801de6a:	da02      	bge.n	801de72 <__ieee754_fmodf+0xe2>
 801de6c:	005b      	lsls	r3, r3, #1
 801de6e:	3801      	subs	r0, #1
 801de70:	e7d7      	b.n	801de22 <__ieee754_fmodf+0x92>
 801de72:	d0a7      	beq.n	801ddc4 <__ieee754_fmodf+0x34>
 801de74:	0053      	lsls	r3, r2, #1
 801de76:	e7fa      	b.n	801de6e <__ieee754_fmodf+0xde>
 801de78:	005b      	lsls	r3, r3, #1
 801de7a:	3901      	subs	r1, #1
 801de7c:	e7d9      	b.n	801de32 <__ieee754_fmodf+0xa2>
 801de7e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 801de82:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801de86:	3182      	adds	r1, #130	; 0x82
 801de88:	410b      	asrs	r3, r1
 801de8a:	4333      	orrs	r3, r6
 801de8c:	e7dd      	b.n	801de4a <__ieee754_fmodf+0xba>
 801de8e:	bf00      	nop
 801de90:	08022e88 	.word	0x08022e88

0801de94 <__ieee754_powf>:
 801de94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de98:	ee10 4a90 	vmov	r4, s1
 801de9c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801dea0:	ed2d 8b02 	vpush	{d8}
 801dea4:	ee10 6a10 	vmov	r6, s0
 801dea8:	eeb0 8a40 	vmov.f32	s16, s0
 801deac:	eef0 8a60 	vmov.f32	s17, s1
 801deb0:	d10c      	bne.n	801decc <__ieee754_powf+0x38>
 801deb2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 801deb6:	0076      	lsls	r6, r6, #1
 801deb8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 801debc:	f240 8296 	bls.w	801e3ec <__ieee754_powf+0x558>
 801dec0:	ee38 0a28 	vadd.f32	s0, s16, s17
 801dec4:	ecbd 8b02 	vpop	{d8}
 801dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801decc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801ded0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801ded4:	dcf4      	bgt.n	801dec0 <__ieee754_powf+0x2c>
 801ded6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801deda:	dd08      	ble.n	801deee <__ieee754_powf+0x5a>
 801dedc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 801dee0:	d1ee      	bne.n	801dec0 <__ieee754_powf+0x2c>
 801dee2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801dee6:	0064      	lsls	r4, r4, #1
 801dee8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801deec:	e7e6      	b.n	801debc <__ieee754_powf+0x28>
 801deee:	2e00      	cmp	r6, #0
 801def0:	da20      	bge.n	801df34 <__ieee754_powf+0xa0>
 801def2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801def6:	da2d      	bge.n	801df54 <__ieee754_powf+0xc0>
 801def8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801defc:	f2c0 827f 	blt.w	801e3fe <__ieee754_powf+0x56a>
 801df00:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801df04:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801df08:	fa48 f703 	asr.w	r7, r8, r3
 801df0c:	fa07 f303 	lsl.w	r3, r7, r3
 801df10:	4543      	cmp	r3, r8
 801df12:	f040 8274 	bne.w	801e3fe <__ieee754_powf+0x56a>
 801df16:	f007 0701 	and.w	r7, r7, #1
 801df1a:	f1c7 0702 	rsb	r7, r7, #2
 801df1e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801df22:	d11f      	bne.n	801df64 <__ieee754_powf+0xd0>
 801df24:	2c00      	cmp	r4, #0
 801df26:	f280 8267 	bge.w	801e3f8 <__ieee754_powf+0x564>
 801df2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801df2e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801df32:	e7c7      	b.n	801dec4 <__ieee754_powf+0x30>
 801df34:	2700      	movs	r7, #0
 801df36:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801df3a:	d1f0      	bne.n	801df1e <__ieee754_powf+0x8a>
 801df3c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801df40:	f000 8254 	beq.w	801e3ec <__ieee754_powf+0x558>
 801df44:	dd08      	ble.n	801df58 <__ieee754_powf+0xc4>
 801df46:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 801e250 <__ieee754_powf+0x3bc>
 801df4a:	2c00      	cmp	r4, #0
 801df4c:	bfa8      	it	ge
 801df4e:	eeb0 0a68 	vmovge.f32	s0, s17
 801df52:	e7b7      	b.n	801dec4 <__ieee754_powf+0x30>
 801df54:	2702      	movs	r7, #2
 801df56:	e7ee      	b.n	801df36 <__ieee754_powf+0xa2>
 801df58:	2c00      	cmp	r4, #0
 801df5a:	f280 824a 	bge.w	801e3f2 <__ieee754_powf+0x55e>
 801df5e:	eeb1 0a68 	vneg.f32	s0, s17
 801df62:	e7af      	b.n	801dec4 <__ieee754_powf+0x30>
 801df64:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801df68:	d102      	bne.n	801df70 <__ieee754_powf+0xdc>
 801df6a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801df6e:	e7a9      	b.n	801dec4 <__ieee754_powf+0x30>
 801df70:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801df74:	eeb0 0a48 	vmov.f32	s0, s16
 801df78:	d107      	bne.n	801df8a <__ieee754_powf+0xf6>
 801df7a:	2e00      	cmp	r6, #0
 801df7c:	db05      	blt.n	801df8a <__ieee754_powf+0xf6>
 801df7e:	ecbd 8b02 	vpop	{d8}
 801df82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df86:	f000 ba53 	b.w	801e430 <__ieee754_sqrtf>
 801df8a:	f000 fa77 	bl	801e47c <fabsf>
 801df8e:	b125      	cbz	r5, 801df9a <__ieee754_powf+0x106>
 801df90:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 801df94:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801df98:	d116      	bne.n	801dfc8 <__ieee754_powf+0x134>
 801df9a:	2c00      	cmp	r4, #0
 801df9c:	bfbc      	itt	lt
 801df9e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801dfa2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801dfa6:	2e00      	cmp	r6, #0
 801dfa8:	da8c      	bge.n	801dec4 <__ieee754_powf+0x30>
 801dfaa:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801dfae:	ea55 0307 	orrs.w	r3, r5, r7
 801dfb2:	d104      	bne.n	801dfbe <__ieee754_powf+0x12a>
 801dfb4:	ee70 7a40 	vsub.f32	s15, s0, s0
 801dfb8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801dfbc:	e782      	b.n	801dec4 <__ieee754_powf+0x30>
 801dfbe:	2f01      	cmp	r7, #1
 801dfc0:	d180      	bne.n	801dec4 <__ieee754_powf+0x30>
 801dfc2:	eeb1 0a40 	vneg.f32	s0, s0
 801dfc6:	e77d      	b.n	801dec4 <__ieee754_powf+0x30>
 801dfc8:	0ff0      	lsrs	r0, r6, #31
 801dfca:	3801      	subs	r0, #1
 801dfcc:	ea57 0300 	orrs.w	r3, r7, r0
 801dfd0:	d104      	bne.n	801dfdc <__ieee754_powf+0x148>
 801dfd2:	ee38 8a48 	vsub.f32	s16, s16, s16
 801dfd6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801dfda:	e773      	b.n	801dec4 <__ieee754_powf+0x30>
 801dfdc:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801dfe0:	dd74      	ble.n	801e0cc <__ieee754_powf+0x238>
 801dfe2:	4b9c      	ldr	r3, [pc, #624]	; (801e254 <__ieee754_powf+0x3c0>)
 801dfe4:	429d      	cmp	r5, r3
 801dfe6:	dc08      	bgt.n	801dffa <__ieee754_powf+0x166>
 801dfe8:	2c00      	cmp	r4, #0
 801dfea:	da0b      	bge.n	801e004 <__ieee754_powf+0x170>
 801dfec:	2000      	movs	r0, #0
 801dfee:	ecbd 8b02 	vpop	{d8}
 801dff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dff6:	f000 ba3b 	b.w	801e470 <__math_oflowf>
 801dffa:	4b97      	ldr	r3, [pc, #604]	; (801e258 <__ieee754_powf+0x3c4>)
 801dffc:	429d      	cmp	r5, r3
 801dffe:	dd08      	ble.n	801e012 <__ieee754_powf+0x17e>
 801e000:	2c00      	cmp	r4, #0
 801e002:	dcf3      	bgt.n	801dfec <__ieee754_powf+0x158>
 801e004:	2000      	movs	r0, #0
 801e006:	ecbd 8b02 	vpop	{d8}
 801e00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e00e:	f000 ba29 	b.w	801e464 <__math_uflowf>
 801e012:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e016:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e01a:	eddf 6a90 	vldr	s13, [pc, #576]	; 801e25c <__ieee754_powf+0x3c8>
 801e01e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801e022:	eee0 6a67 	vfms.f32	s13, s0, s15
 801e026:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e02a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801e02e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e032:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e036:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801e260 <__ieee754_powf+0x3cc>
 801e03a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801e03e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 801e264 <__ieee754_powf+0x3d0>
 801e042:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e046:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801e268 <__ieee754_powf+0x3d4>
 801e04a:	eef0 6a67 	vmov.f32	s13, s15
 801e04e:	eee0 6a07 	vfma.f32	s13, s0, s14
 801e052:	ee16 3a90 	vmov	r3, s13
 801e056:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801e05a:	f023 030f 	bic.w	r3, r3, #15
 801e05e:	ee00 3a90 	vmov	s1, r3
 801e062:	eee0 0a47 	vfms.f32	s1, s0, s14
 801e066:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e06a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801e06e:	f024 040f 	bic.w	r4, r4, #15
 801e072:	ee07 4a10 	vmov	s14, r4
 801e076:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801e07a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801e07e:	ee07 3a90 	vmov	s15, r3
 801e082:	eee7 0a27 	vfma.f32	s1, s14, s15
 801e086:	3f01      	subs	r7, #1
 801e088:	ea57 0200 	orrs.w	r2, r7, r0
 801e08c:	ee07 4a10 	vmov	s14, r4
 801e090:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e094:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e098:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801e09c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801e0a0:	ee17 4a10 	vmov	r4, s14
 801e0a4:	bf08      	it	eq
 801e0a6:	eeb0 8a40 	vmoveq.f32	s16, s0
 801e0aa:	2c00      	cmp	r4, #0
 801e0ac:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e0b0:	f340 817e 	ble.w	801e3b0 <__ieee754_powf+0x51c>
 801e0b4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801e0b8:	f340 80f8 	ble.w	801e2ac <__ieee754_powf+0x418>
 801e0bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0c4:	bf4c      	ite	mi
 801e0c6:	2001      	movmi	r0, #1
 801e0c8:	2000      	movpl	r0, #0
 801e0ca:	e790      	b.n	801dfee <__ieee754_powf+0x15a>
 801e0cc:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 801e0d0:	bf01      	itttt	eq
 801e0d2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801e26c <__ieee754_powf+0x3d8>
 801e0d6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801e0da:	f06f 0217 	mvneq.w	r2, #23
 801e0de:	ee17 5a90 	vmoveq	r5, s15
 801e0e2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801e0e6:	bf18      	it	ne
 801e0e8:	2200      	movne	r2, #0
 801e0ea:	3b7f      	subs	r3, #127	; 0x7f
 801e0ec:	4413      	add	r3, r2
 801e0ee:	4a60      	ldr	r2, [pc, #384]	; (801e270 <__ieee754_powf+0x3dc>)
 801e0f0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801e0f4:	4295      	cmp	r5, r2
 801e0f6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801e0fa:	dd06      	ble.n	801e10a <__ieee754_powf+0x276>
 801e0fc:	4a5d      	ldr	r2, [pc, #372]	; (801e274 <__ieee754_powf+0x3e0>)
 801e0fe:	4295      	cmp	r5, r2
 801e100:	f340 80a4 	ble.w	801e24c <__ieee754_powf+0x3b8>
 801e104:	3301      	adds	r3, #1
 801e106:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801e10a:	2500      	movs	r5, #0
 801e10c:	4a5a      	ldr	r2, [pc, #360]	; (801e278 <__ieee754_powf+0x3e4>)
 801e10e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801e112:	ee07 1a90 	vmov	s15, r1
 801e116:	ed92 7a00 	vldr	s14, [r2]
 801e11a:	4a58      	ldr	r2, [pc, #352]	; (801e27c <__ieee754_powf+0x3e8>)
 801e11c:	ee37 6a27 	vadd.f32	s12, s14, s15
 801e120:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e124:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801e128:	1049      	asrs	r1, r1, #1
 801e12a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801e12e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801e132:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801e136:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801e13a:	ee06 1a10 	vmov	s12, r1
 801e13e:	ee65 4a26 	vmul.f32	s9, s10, s13
 801e142:	ee36 7a47 	vsub.f32	s14, s12, s14
 801e146:	ee14 6a90 	vmov	r6, s9
 801e14a:	4016      	ands	r6, r2
 801e14c:	ee05 6a90 	vmov	s11, r6
 801e150:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801e154:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e158:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e280 <__ieee754_powf+0x3ec>
 801e15c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801e160:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801e164:	ee25 6a26 	vmul.f32	s12, s10, s13
 801e168:	eddf 6a46 	vldr	s13, [pc, #280]	; 801e284 <__ieee754_powf+0x3f0>
 801e16c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801e170:	eddf 6a45 	vldr	s13, [pc, #276]	; 801e288 <__ieee754_powf+0x3f4>
 801e174:	eee7 6a27 	vfma.f32	s13, s14, s15
 801e178:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801e25c <__ieee754_powf+0x3c8>
 801e17c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801e180:	eddf 6a42 	vldr	s13, [pc, #264]	; 801e28c <__ieee754_powf+0x3f8>
 801e184:	eee7 6a27 	vfma.f32	s13, s14, s15
 801e188:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801e290 <__ieee754_powf+0x3fc>
 801e18c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801e190:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801e194:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801e198:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e19c:	eee5 6a07 	vfma.f32	s13, s10, s14
 801e1a0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801e1a4:	eef0 7a45 	vmov.f32	s15, s10
 801e1a8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801e1ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1b0:	ee17 1a90 	vmov	r1, s15
 801e1b4:	4011      	ands	r1, r2
 801e1b6:	ee07 1a90 	vmov	s15, r1
 801e1ba:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801e1be:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801e1c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801e1c6:	ee27 7a24 	vmul.f32	s14, s14, s9
 801e1ca:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e1ce:	eeb0 6a47 	vmov.f32	s12, s14
 801e1d2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e1d6:	ee16 1a10 	vmov	r1, s12
 801e1da:	4011      	ands	r1, r2
 801e1dc:	ee06 1a90 	vmov	s13, r1
 801e1e0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801e1e4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801e294 <__ieee754_powf+0x400>
 801e1e8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801e298 <__ieee754_powf+0x404>
 801e1ec:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e1f0:	ee06 1a10 	vmov	s12, r1
 801e1f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e1f8:	eddf 7a28 	vldr	s15, [pc, #160]	; 801e29c <__ieee754_powf+0x408>
 801e1fc:	4928      	ldr	r1, [pc, #160]	; (801e2a0 <__ieee754_powf+0x40c>)
 801e1fe:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e202:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801e206:	edd1 7a00 	vldr	s15, [r1]
 801e20a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e20e:	ee07 3a90 	vmov	s15, r3
 801e212:	4b24      	ldr	r3, [pc, #144]	; (801e2a4 <__ieee754_powf+0x410>)
 801e214:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e218:	eef0 7a47 	vmov.f32	s15, s14
 801e21c:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e220:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801e224:	edd5 0a00 	vldr	s1, [r5]
 801e228:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801e22c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e230:	ee17 3a90 	vmov	r3, s15
 801e234:	4013      	ands	r3, r2
 801e236:	ee07 3a90 	vmov	s15, r3
 801e23a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801e23e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801e242:	eee6 6a65 	vfms.f32	s13, s12, s11
 801e246:	ee77 7a66 	vsub.f32	s15, s14, s13
 801e24a:	e70e      	b.n	801e06a <__ieee754_powf+0x1d6>
 801e24c:	2501      	movs	r5, #1
 801e24e:	e75d      	b.n	801e10c <__ieee754_powf+0x278>
 801e250:	00000000 	.word	0x00000000
 801e254:	3f7ffff3 	.word	0x3f7ffff3
 801e258:	3f800007 	.word	0x3f800007
 801e25c:	3eaaaaab 	.word	0x3eaaaaab
 801e260:	3fb8aa3b 	.word	0x3fb8aa3b
 801e264:	36eca570 	.word	0x36eca570
 801e268:	3fb8aa00 	.word	0x3fb8aa00
 801e26c:	4b800000 	.word	0x4b800000
 801e270:	001cc471 	.word	0x001cc471
 801e274:	005db3d6 	.word	0x005db3d6
 801e278:	08022e90 	.word	0x08022e90
 801e27c:	fffff000 	.word	0xfffff000
 801e280:	3e6c3255 	.word	0x3e6c3255
 801e284:	3e53f142 	.word	0x3e53f142
 801e288:	3e8ba305 	.word	0x3e8ba305
 801e28c:	3edb6db7 	.word	0x3edb6db7
 801e290:	3f19999a 	.word	0x3f19999a
 801e294:	3f76384f 	.word	0x3f76384f
 801e298:	3f763800 	.word	0x3f763800
 801e29c:	369dc3a0 	.word	0x369dc3a0
 801e2a0:	08022ea0 	.word	0x08022ea0
 801e2a4:	08022e98 	.word	0x08022e98
 801e2a8:	3338aa3c 	.word	0x3338aa3c
 801e2ac:	f040 8095 	bne.w	801e3da <__ieee754_powf+0x546>
 801e2b0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801e2a8 <__ieee754_powf+0x414>
 801e2b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e2b8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801e2bc:	eef4 6ac7 	vcmpe.f32	s13, s14
 801e2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2c4:	f73f aefa 	bgt.w	801e0bc <__ieee754_powf+0x228>
 801e2c8:	15db      	asrs	r3, r3, #23
 801e2ca:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801e2ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801e2d2:	4103      	asrs	r3, r0
 801e2d4:	4423      	add	r3, r4
 801e2d6:	494b      	ldr	r1, [pc, #300]	; (801e404 <__ieee754_powf+0x570>)
 801e2d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e2dc:	3a7f      	subs	r2, #127	; 0x7f
 801e2de:	4111      	asrs	r1, r2
 801e2e0:	ea23 0101 	bic.w	r1, r3, r1
 801e2e4:	ee07 1a10 	vmov	s14, r1
 801e2e8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801e2ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801e2f0:	f1c2 0217 	rsb	r2, r2, #23
 801e2f4:	4110      	asrs	r0, r2
 801e2f6:	2c00      	cmp	r4, #0
 801e2f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e2fc:	bfb8      	it	lt
 801e2fe:	4240      	neglt	r0, r0
 801e300:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801e304:	ed9f 0a40 	vldr	s0, [pc, #256]	; 801e408 <__ieee754_powf+0x574>
 801e308:	eddf 6a40 	vldr	s13, [pc, #256]	; 801e40c <__ieee754_powf+0x578>
 801e30c:	ee17 3a10 	vmov	r3, s14
 801e310:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801e314:	f023 030f 	bic.w	r3, r3, #15
 801e318:	ee07 3a10 	vmov	s14, r3
 801e31c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e320:	ee27 0a00 	vmul.f32	s0, s14, s0
 801e324:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e328:	eddf 7a39 	vldr	s15, [pc, #228]	; 801e410 <__ieee754_powf+0x57c>
 801e32c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 801e330:	eef0 7a40 	vmov.f32	s15, s0
 801e334:	eee7 7a26 	vfma.f32	s15, s14, s13
 801e338:	eeb0 6a67 	vmov.f32	s12, s15
 801e33c:	eea7 6a66 	vfms.f32	s12, s14, s13
 801e340:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801e344:	ee30 0a46 	vsub.f32	s0, s0, s12
 801e348:	eddf 6a32 	vldr	s13, [pc, #200]	; 801e414 <__ieee754_powf+0x580>
 801e34c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 801e418 <__ieee754_powf+0x584>
 801e350:	eee7 6a06 	vfma.f32	s13, s14, s12
 801e354:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801e41c <__ieee754_powf+0x588>
 801e358:	eea6 6a87 	vfma.f32	s12, s13, s14
 801e35c:	eddf 6a30 	vldr	s13, [pc, #192]	; 801e420 <__ieee754_powf+0x58c>
 801e360:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e364:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801e424 <__ieee754_powf+0x590>
 801e368:	eea6 6a87 	vfma.f32	s12, s13, s14
 801e36c:	eef0 6a67 	vmov.f32	s13, s15
 801e370:	eee6 6a47 	vfms.f32	s13, s12, s14
 801e374:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801e378:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801e37c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801e380:	eea7 0a80 	vfma.f32	s0, s15, s0
 801e384:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801e388:	ee37 0a40 	vsub.f32	s0, s14, s0
 801e38c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e390:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e394:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e398:	ee10 3a10 	vmov	r3, s0
 801e39c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801e3a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e3a4:	da1f      	bge.n	801e3e6 <__ieee754_powf+0x552>
 801e3a6:	f7ff fc09 	bl	801dbbc <scalbnf>
 801e3aa:	ee20 0a08 	vmul.f32	s0, s0, s16
 801e3ae:	e589      	b.n	801dec4 <__ieee754_powf+0x30>
 801e3b0:	4a1d      	ldr	r2, [pc, #116]	; (801e428 <__ieee754_powf+0x594>)
 801e3b2:	4293      	cmp	r3, r2
 801e3b4:	dd07      	ble.n	801e3c6 <__ieee754_powf+0x532>
 801e3b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3be:	bf4c      	ite	mi
 801e3c0:	2001      	movmi	r0, #1
 801e3c2:	2000      	movpl	r0, #0
 801e3c4:	e61f      	b.n	801e006 <__ieee754_powf+0x172>
 801e3c6:	d108      	bne.n	801e3da <__ieee754_powf+0x546>
 801e3c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e3cc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801e3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3d4:	f6ff af78 	blt.w	801e2c8 <__ieee754_powf+0x434>
 801e3d8:	e7ed      	b.n	801e3b6 <__ieee754_powf+0x522>
 801e3da:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801e3de:	f73f af73 	bgt.w	801e2c8 <__ieee754_powf+0x434>
 801e3e2:	2000      	movs	r0, #0
 801e3e4:	e78c      	b.n	801e300 <__ieee754_powf+0x46c>
 801e3e6:	ee00 3a10 	vmov	s0, r3
 801e3ea:	e7de      	b.n	801e3aa <__ieee754_powf+0x516>
 801e3ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e3f0:	e568      	b.n	801dec4 <__ieee754_powf+0x30>
 801e3f2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801e42c <__ieee754_powf+0x598>
 801e3f6:	e565      	b.n	801dec4 <__ieee754_powf+0x30>
 801e3f8:	eeb0 0a48 	vmov.f32	s0, s16
 801e3fc:	e562      	b.n	801dec4 <__ieee754_powf+0x30>
 801e3fe:	2700      	movs	r7, #0
 801e400:	e58d      	b.n	801df1e <__ieee754_powf+0x8a>
 801e402:	bf00      	nop
 801e404:	007fffff 	.word	0x007fffff
 801e408:	35bfbe8c 	.word	0x35bfbe8c
 801e40c:	3f317200 	.word	0x3f317200
 801e410:	3f317218 	.word	0x3f317218
 801e414:	b5ddea0e 	.word	0xb5ddea0e
 801e418:	3331bb4c 	.word	0x3331bb4c
 801e41c:	388ab355 	.word	0x388ab355
 801e420:	bb360b61 	.word	0xbb360b61
 801e424:	3e2aaaab 	.word	0x3e2aaaab
 801e428:	43160000 	.word	0x43160000
 801e42c:	00000000 	.word	0x00000000

0801e430 <__ieee754_sqrtf>:
 801e430:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e434:	4770      	bx	lr

0801e436 <with_errnof>:
 801e436:	b513      	push	{r0, r1, r4, lr}
 801e438:	4604      	mov	r4, r0
 801e43a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e43e:	f000 f83f 	bl	801e4c0 <__errno>
 801e442:	ed9d 0a01 	vldr	s0, [sp, #4]
 801e446:	6004      	str	r4, [r0, #0]
 801e448:	b002      	add	sp, #8
 801e44a:	bd10      	pop	{r4, pc}

0801e44c <xflowf>:
 801e44c:	b130      	cbz	r0, 801e45c <xflowf+0x10>
 801e44e:	eef1 7a40 	vneg.f32	s15, s0
 801e452:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e456:	2022      	movs	r0, #34	; 0x22
 801e458:	f7ff bfed 	b.w	801e436 <with_errnof>
 801e45c:	eef0 7a40 	vmov.f32	s15, s0
 801e460:	e7f7      	b.n	801e452 <xflowf+0x6>
	...

0801e464 <__math_uflowf>:
 801e464:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e46c <__math_uflowf+0x8>
 801e468:	f7ff bff0 	b.w	801e44c <xflowf>
 801e46c:	10000000 	.word	0x10000000

0801e470 <__math_oflowf>:
 801e470:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e478 <__math_oflowf+0x8>
 801e474:	f7ff bfea 	b.w	801e44c <xflowf>
 801e478:	70000000 	.word	0x70000000

0801e47c <fabsf>:
 801e47c:	ee10 3a10 	vmov	r3, s0
 801e480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e484:	ee00 3a10 	vmov	s0, r3
 801e488:	4770      	bx	lr

0801e48a <finitef>:
 801e48a:	b082      	sub	sp, #8
 801e48c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e490:	9801      	ldr	r0, [sp, #4]
 801e492:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e496:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801e49a:	bfac      	ite	ge
 801e49c:	2000      	movge	r0, #0
 801e49e:	2001      	movlt	r0, #1
 801e4a0:	b002      	add	sp, #8
 801e4a2:	4770      	bx	lr

0801e4a4 <nanf>:
 801e4a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e4ac <nanf+0x8>
 801e4a8:	4770      	bx	lr
 801e4aa:	bf00      	nop
 801e4ac:	7fc00000 	.word	0x7fc00000

0801e4b0 <abort>:
 801e4b0:	b508      	push	{r3, lr}
 801e4b2:	2006      	movs	r0, #6
 801e4b4:	f001 f8ba 	bl	801f62c <raise>
 801e4b8:	2001      	movs	r0, #1
 801e4ba:	f7e4 fdb7 	bl	800302c <_exit>
	...

0801e4c0 <__errno>:
 801e4c0:	4b01      	ldr	r3, [pc, #4]	; (801e4c8 <__errno+0x8>)
 801e4c2:	6818      	ldr	r0, [r3, #0]
 801e4c4:	4770      	bx	lr
 801e4c6:	bf00      	nop
 801e4c8:	20000330 	.word	0x20000330

0801e4cc <__sflush_r>:
 801e4cc:	898a      	ldrh	r2, [r1, #12]
 801e4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4d2:	4605      	mov	r5, r0
 801e4d4:	0710      	lsls	r0, r2, #28
 801e4d6:	460c      	mov	r4, r1
 801e4d8:	d458      	bmi.n	801e58c <__sflush_r+0xc0>
 801e4da:	684b      	ldr	r3, [r1, #4]
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	dc05      	bgt.n	801e4ec <__sflush_r+0x20>
 801e4e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	dc02      	bgt.n	801e4ec <__sflush_r+0x20>
 801e4e6:	2000      	movs	r0, #0
 801e4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e4ee:	2e00      	cmp	r6, #0
 801e4f0:	d0f9      	beq.n	801e4e6 <__sflush_r+0x1a>
 801e4f2:	2300      	movs	r3, #0
 801e4f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e4f8:	682f      	ldr	r7, [r5, #0]
 801e4fa:	602b      	str	r3, [r5, #0]
 801e4fc:	d032      	beq.n	801e564 <__sflush_r+0x98>
 801e4fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e500:	89a3      	ldrh	r3, [r4, #12]
 801e502:	075a      	lsls	r2, r3, #29
 801e504:	d505      	bpl.n	801e512 <__sflush_r+0x46>
 801e506:	6863      	ldr	r3, [r4, #4]
 801e508:	1ac0      	subs	r0, r0, r3
 801e50a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e50c:	b10b      	cbz	r3, 801e512 <__sflush_r+0x46>
 801e50e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e510:	1ac0      	subs	r0, r0, r3
 801e512:	2300      	movs	r3, #0
 801e514:	4602      	mov	r2, r0
 801e516:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e518:	6a21      	ldr	r1, [r4, #32]
 801e51a:	4628      	mov	r0, r5
 801e51c:	47b0      	blx	r6
 801e51e:	1c43      	adds	r3, r0, #1
 801e520:	89a3      	ldrh	r3, [r4, #12]
 801e522:	d106      	bne.n	801e532 <__sflush_r+0x66>
 801e524:	6829      	ldr	r1, [r5, #0]
 801e526:	291d      	cmp	r1, #29
 801e528:	d82c      	bhi.n	801e584 <__sflush_r+0xb8>
 801e52a:	4a2a      	ldr	r2, [pc, #168]	; (801e5d4 <__sflush_r+0x108>)
 801e52c:	40ca      	lsrs	r2, r1
 801e52e:	07d6      	lsls	r6, r2, #31
 801e530:	d528      	bpl.n	801e584 <__sflush_r+0xb8>
 801e532:	2200      	movs	r2, #0
 801e534:	6062      	str	r2, [r4, #4]
 801e536:	04d9      	lsls	r1, r3, #19
 801e538:	6922      	ldr	r2, [r4, #16]
 801e53a:	6022      	str	r2, [r4, #0]
 801e53c:	d504      	bpl.n	801e548 <__sflush_r+0x7c>
 801e53e:	1c42      	adds	r2, r0, #1
 801e540:	d101      	bne.n	801e546 <__sflush_r+0x7a>
 801e542:	682b      	ldr	r3, [r5, #0]
 801e544:	b903      	cbnz	r3, 801e548 <__sflush_r+0x7c>
 801e546:	6560      	str	r0, [r4, #84]	; 0x54
 801e548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e54a:	602f      	str	r7, [r5, #0]
 801e54c:	2900      	cmp	r1, #0
 801e54e:	d0ca      	beq.n	801e4e6 <__sflush_r+0x1a>
 801e550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e554:	4299      	cmp	r1, r3
 801e556:	d002      	beq.n	801e55e <__sflush_r+0x92>
 801e558:	4628      	mov	r0, r5
 801e55a:	f000 fbaf 	bl	801ecbc <_free_r>
 801e55e:	2000      	movs	r0, #0
 801e560:	6360      	str	r0, [r4, #52]	; 0x34
 801e562:	e7c1      	b.n	801e4e8 <__sflush_r+0x1c>
 801e564:	6a21      	ldr	r1, [r4, #32]
 801e566:	2301      	movs	r3, #1
 801e568:	4628      	mov	r0, r5
 801e56a:	47b0      	blx	r6
 801e56c:	1c41      	adds	r1, r0, #1
 801e56e:	d1c7      	bne.n	801e500 <__sflush_r+0x34>
 801e570:	682b      	ldr	r3, [r5, #0]
 801e572:	2b00      	cmp	r3, #0
 801e574:	d0c4      	beq.n	801e500 <__sflush_r+0x34>
 801e576:	2b1d      	cmp	r3, #29
 801e578:	d001      	beq.n	801e57e <__sflush_r+0xb2>
 801e57a:	2b16      	cmp	r3, #22
 801e57c:	d101      	bne.n	801e582 <__sflush_r+0xb6>
 801e57e:	602f      	str	r7, [r5, #0]
 801e580:	e7b1      	b.n	801e4e6 <__sflush_r+0x1a>
 801e582:	89a3      	ldrh	r3, [r4, #12]
 801e584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e588:	81a3      	strh	r3, [r4, #12]
 801e58a:	e7ad      	b.n	801e4e8 <__sflush_r+0x1c>
 801e58c:	690f      	ldr	r7, [r1, #16]
 801e58e:	2f00      	cmp	r7, #0
 801e590:	d0a9      	beq.n	801e4e6 <__sflush_r+0x1a>
 801e592:	0793      	lsls	r3, r2, #30
 801e594:	680e      	ldr	r6, [r1, #0]
 801e596:	bf08      	it	eq
 801e598:	694b      	ldreq	r3, [r1, #20]
 801e59a:	600f      	str	r7, [r1, #0]
 801e59c:	bf18      	it	ne
 801e59e:	2300      	movne	r3, #0
 801e5a0:	eba6 0807 	sub.w	r8, r6, r7
 801e5a4:	608b      	str	r3, [r1, #8]
 801e5a6:	f1b8 0f00 	cmp.w	r8, #0
 801e5aa:	dd9c      	ble.n	801e4e6 <__sflush_r+0x1a>
 801e5ac:	6a21      	ldr	r1, [r4, #32]
 801e5ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e5b0:	4643      	mov	r3, r8
 801e5b2:	463a      	mov	r2, r7
 801e5b4:	4628      	mov	r0, r5
 801e5b6:	47b0      	blx	r6
 801e5b8:	2800      	cmp	r0, #0
 801e5ba:	dc06      	bgt.n	801e5ca <__sflush_r+0xfe>
 801e5bc:	89a3      	ldrh	r3, [r4, #12]
 801e5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e5c2:	81a3      	strh	r3, [r4, #12]
 801e5c4:	f04f 30ff 	mov.w	r0, #4294967295
 801e5c8:	e78e      	b.n	801e4e8 <__sflush_r+0x1c>
 801e5ca:	4407      	add	r7, r0
 801e5cc:	eba8 0800 	sub.w	r8, r8, r0
 801e5d0:	e7e9      	b.n	801e5a6 <__sflush_r+0xda>
 801e5d2:	bf00      	nop
 801e5d4:	20400001 	.word	0x20400001

0801e5d8 <_fflush_r>:
 801e5d8:	b538      	push	{r3, r4, r5, lr}
 801e5da:	690b      	ldr	r3, [r1, #16]
 801e5dc:	4605      	mov	r5, r0
 801e5de:	460c      	mov	r4, r1
 801e5e0:	b913      	cbnz	r3, 801e5e8 <_fflush_r+0x10>
 801e5e2:	2500      	movs	r5, #0
 801e5e4:	4628      	mov	r0, r5
 801e5e6:	bd38      	pop	{r3, r4, r5, pc}
 801e5e8:	b118      	cbz	r0, 801e5f2 <_fflush_r+0x1a>
 801e5ea:	6983      	ldr	r3, [r0, #24]
 801e5ec:	b90b      	cbnz	r3, 801e5f2 <_fflush_r+0x1a>
 801e5ee:	f000 f899 	bl	801e724 <__sinit>
 801e5f2:	4b14      	ldr	r3, [pc, #80]	; (801e644 <_fflush_r+0x6c>)
 801e5f4:	429c      	cmp	r4, r3
 801e5f6:	d11b      	bne.n	801e630 <_fflush_r+0x58>
 801e5f8:	686c      	ldr	r4, [r5, #4]
 801e5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d0ef      	beq.n	801e5e2 <_fflush_r+0xa>
 801e602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e604:	07d0      	lsls	r0, r2, #31
 801e606:	d404      	bmi.n	801e612 <_fflush_r+0x3a>
 801e608:	0599      	lsls	r1, r3, #22
 801e60a:	d402      	bmi.n	801e612 <_fflush_r+0x3a>
 801e60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e60e:	f000 fa7e 	bl	801eb0e <__retarget_lock_acquire_recursive>
 801e612:	4628      	mov	r0, r5
 801e614:	4621      	mov	r1, r4
 801e616:	f7ff ff59 	bl	801e4cc <__sflush_r>
 801e61a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e61c:	07da      	lsls	r2, r3, #31
 801e61e:	4605      	mov	r5, r0
 801e620:	d4e0      	bmi.n	801e5e4 <_fflush_r+0xc>
 801e622:	89a3      	ldrh	r3, [r4, #12]
 801e624:	059b      	lsls	r3, r3, #22
 801e626:	d4dd      	bmi.n	801e5e4 <_fflush_r+0xc>
 801e628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e62a:	f000 fa71 	bl	801eb10 <__retarget_lock_release_recursive>
 801e62e:	e7d9      	b.n	801e5e4 <_fflush_r+0xc>
 801e630:	4b05      	ldr	r3, [pc, #20]	; (801e648 <_fflush_r+0x70>)
 801e632:	429c      	cmp	r4, r3
 801e634:	d101      	bne.n	801e63a <_fflush_r+0x62>
 801e636:	68ac      	ldr	r4, [r5, #8]
 801e638:	e7df      	b.n	801e5fa <_fflush_r+0x22>
 801e63a:	4b04      	ldr	r3, [pc, #16]	; (801e64c <_fflush_r+0x74>)
 801e63c:	429c      	cmp	r4, r3
 801e63e:	bf08      	it	eq
 801e640:	68ec      	ldreq	r4, [r5, #12]
 801e642:	e7da      	b.n	801e5fa <_fflush_r+0x22>
 801e644:	08022fcc 	.word	0x08022fcc
 801e648:	08022fec 	.word	0x08022fec
 801e64c:	08022fac 	.word	0x08022fac

0801e650 <fflush>:
 801e650:	4601      	mov	r1, r0
 801e652:	b920      	cbnz	r0, 801e65e <fflush+0xe>
 801e654:	4b04      	ldr	r3, [pc, #16]	; (801e668 <fflush+0x18>)
 801e656:	4905      	ldr	r1, [pc, #20]	; (801e66c <fflush+0x1c>)
 801e658:	6818      	ldr	r0, [r3, #0]
 801e65a:	f000 b9a1 	b.w	801e9a0 <_fwalk_reent>
 801e65e:	4b04      	ldr	r3, [pc, #16]	; (801e670 <fflush+0x20>)
 801e660:	6818      	ldr	r0, [r3, #0]
 801e662:	f7ff bfb9 	b.w	801e5d8 <_fflush_r>
 801e666:	bf00      	nop
 801e668:	0802300c 	.word	0x0802300c
 801e66c:	0801e5d9 	.word	0x0801e5d9
 801e670:	20000330 	.word	0x20000330

0801e674 <std>:
 801e674:	2300      	movs	r3, #0
 801e676:	b510      	push	{r4, lr}
 801e678:	4604      	mov	r4, r0
 801e67a:	e9c0 3300 	strd	r3, r3, [r0]
 801e67e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e682:	6083      	str	r3, [r0, #8]
 801e684:	8181      	strh	r1, [r0, #12]
 801e686:	6643      	str	r3, [r0, #100]	; 0x64
 801e688:	81c2      	strh	r2, [r0, #14]
 801e68a:	6183      	str	r3, [r0, #24]
 801e68c:	4619      	mov	r1, r3
 801e68e:	2208      	movs	r2, #8
 801e690:	305c      	adds	r0, #92	; 0x5c
 801e692:	f000 faf5 	bl	801ec80 <memset>
 801e696:	4b05      	ldr	r3, [pc, #20]	; (801e6ac <std+0x38>)
 801e698:	6263      	str	r3, [r4, #36]	; 0x24
 801e69a:	4b05      	ldr	r3, [pc, #20]	; (801e6b0 <std+0x3c>)
 801e69c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e69e:	4b05      	ldr	r3, [pc, #20]	; (801e6b4 <std+0x40>)
 801e6a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e6a2:	4b05      	ldr	r3, [pc, #20]	; (801e6b8 <std+0x44>)
 801e6a4:	6224      	str	r4, [r4, #32]
 801e6a6:	6323      	str	r3, [r4, #48]	; 0x30
 801e6a8:	bd10      	pop	{r4, pc}
 801e6aa:	bf00      	nop
 801e6ac:	0801f6cd 	.word	0x0801f6cd
 801e6b0:	0801f6ef 	.word	0x0801f6ef
 801e6b4:	0801f727 	.word	0x0801f727
 801e6b8:	0801f74b 	.word	0x0801f74b

0801e6bc <_cleanup_r>:
 801e6bc:	4901      	ldr	r1, [pc, #4]	; (801e6c4 <_cleanup_r+0x8>)
 801e6be:	f000 b96f 	b.w	801e9a0 <_fwalk_reent>
 801e6c2:	bf00      	nop
 801e6c4:	0801e5d9 	.word	0x0801e5d9

0801e6c8 <__sfmoreglue>:
 801e6c8:	b570      	push	{r4, r5, r6, lr}
 801e6ca:	2268      	movs	r2, #104	; 0x68
 801e6cc:	1e4d      	subs	r5, r1, #1
 801e6ce:	4355      	muls	r5, r2
 801e6d0:	460e      	mov	r6, r1
 801e6d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e6d6:	f000 fb5d 	bl	801ed94 <_malloc_r>
 801e6da:	4604      	mov	r4, r0
 801e6dc:	b140      	cbz	r0, 801e6f0 <__sfmoreglue+0x28>
 801e6de:	2100      	movs	r1, #0
 801e6e0:	e9c0 1600 	strd	r1, r6, [r0]
 801e6e4:	300c      	adds	r0, #12
 801e6e6:	60a0      	str	r0, [r4, #8]
 801e6e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e6ec:	f000 fac8 	bl	801ec80 <memset>
 801e6f0:	4620      	mov	r0, r4
 801e6f2:	bd70      	pop	{r4, r5, r6, pc}

0801e6f4 <__sfp_lock_acquire>:
 801e6f4:	4801      	ldr	r0, [pc, #4]	; (801e6fc <__sfp_lock_acquire+0x8>)
 801e6f6:	f000 ba0a 	b.w	801eb0e <__retarget_lock_acquire_recursive>
 801e6fa:	bf00      	nop
 801e6fc:	2001036d 	.word	0x2001036d

0801e700 <__sfp_lock_release>:
 801e700:	4801      	ldr	r0, [pc, #4]	; (801e708 <__sfp_lock_release+0x8>)
 801e702:	f000 ba05 	b.w	801eb10 <__retarget_lock_release_recursive>
 801e706:	bf00      	nop
 801e708:	2001036d 	.word	0x2001036d

0801e70c <__sinit_lock_acquire>:
 801e70c:	4801      	ldr	r0, [pc, #4]	; (801e714 <__sinit_lock_acquire+0x8>)
 801e70e:	f000 b9fe 	b.w	801eb0e <__retarget_lock_acquire_recursive>
 801e712:	bf00      	nop
 801e714:	2001036e 	.word	0x2001036e

0801e718 <__sinit_lock_release>:
 801e718:	4801      	ldr	r0, [pc, #4]	; (801e720 <__sinit_lock_release+0x8>)
 801e71a:	f000 b9f9 	b.w	801eb10 <__retarget_lock_release_recursive>
 801e71e:	bf00      	nop
 801e720:	2001036e 	.word	0x2001036e

0801e724 <__sinit>:
 801e724:	b510      	push	{r4, lr}
 801e726:	4604      	mov	r4, r0
 801e728:	f7ff fff0 	bl	801e70c <__sinit_lock_acquire>
 801e72c:	69a3      	ldr	r3, [r4, #24]
 801e72e:	b11b      	cbz	r3, 801e738 <__sinit+0x14>
 801e730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e734:	f7ff bff0 	b.w	801e718 <__sinit_lock_release>
 801e738:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e73c:	6523      	str	r3, [r4, #80]	; 0x50
 801e73e:	4b13      	ldr	r3, [pc, #76]	; (801e78c <__sinit+0x68>)
 801e740:	4a13      	ldr	r2, [pc, #76]	; (801e790 <__sinit+0x6c>)
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	62a2      	str	r2, [r4, #40]	; 0x28
 801e746:	42a3      	cmp	r3, r4
 801e748:	bf04      	itt	eq
 801e74a:	2301      	moveq	r3, #1
 801e74c:	61a3      	streq	r3, [r4, #24]
 801e74e:	4620      	mov	r0, r4
 801e750:	f000 f820 	bl	801e794 <__sfp>
 801e754:	6060      	str	r0, [r4, #4]
 801e756:	4620      	mov	r0, r4
 801e758:	f000 f81c 	bl	801e794 <__sfp>
 801e75c:	60a0      	str	r0, [r4, #8]
 801e75e:	4620      	mov	r0, r4
 801e760:	f000 f818 	bl	801e794 <__sfp>
 801e764:	2200      	movs	r2, #0
 801e766:	60e0      	str	r0, [r4, #12]
 801e768:	2104      	movs	r1, #4
 801e76a:	6860      	ldr	r0, [r4, #4]
 801e76c:	f7ff ff82 	bl	801e674 <std>
 801e770:	68a0      	ldr	r0, [r4, #8]
 801e772:	2201      	movs	r2, #1
 801e774:	2109      	movs	r1, #9
 801e776:	f7ff ff7d 	bl	801e674 <std>
 801e77a:	68e0      	ldr	r0, [r4, #12]
 801e77c:	2202      	movs	r2, #2
 801e77e:	2112      	movs	r1, #18
 801e780:	f7ff ff78 	bl	801e674 <std>
 801e784:	2301      	movs	r3, #1
 801e786:	61a3      	str	r3, [r4, #24]
 801e788:	e7d2      	b.n	801e730 <__sinit+0xc>
 801e78a:	bf00      	nop
 801e78c:	0802300c 	.word	0x0802300c
 801e790:	0801e6bd 	.word	0x0801e6bd

0801e794 <__sfp>:
 801e794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e796:	4607      	mov	r7, r0
 801e798:	f7ff ffac 	bl	801e6f4 <__sfp_lock_acquire>
 801e79c:	4b1e      	ldr	r3, [pc, #120]	; (801e818 <__sfp+0x84>)
 801e79e:	681e      	ldr	r6, [r3, #0]
 801e7a0:	69b3      	ldr	r3, [r6, #24]
 801e7a2:	b913      	cbnz	r3, 801e7aa <__sfp+0x16>
 801e7a4:	4630      	mov	r0, r6
 801e7a6:	f7ff ffbd 	bl	801e724 <__sinit>
 801e7aa:	3648      	adds	r6, #72	; 0x48
 801e7ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e7b0:	3b01      	subs	r3, #1
 801e7b2:	d503      	bpl.n	801e7bc <__sfp+0x28>
 801e7b4:	6833      	ldr	r3, [r6, #0]
 801e7b6:	b30b      	cbz	r3, 801e7fc <__sfp+0x68>
 801e7b8:	6836      	ldr	r6, [r6, #0]
 801e7ba:	e7f7      	b.n	801e7ac <__sfp+0x18>
 801e7bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e7c0:	b9d5      	cbnz	r5, 801e7f8 <__sfp+0x64>
 801e7c2:	4b16      	ldr	r3, [pc, #88]	; (801e81c <__sfp+0x88>)
 801e7c4:	60e3      	str	r3, [r4, #12]
 801e7c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e7ca:	6665      	str	r5, [r4, #100]	; 0x64
 801e7cc:	f000 f99e 	bl	801eb0c <__retarget_lock_init_recursive>
 801e7d0:	f7ff ff96 	bl	801e700 <__sfp_lock_release>
 801e7d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e7d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e7dc:	6025      	str	r5, [r4, #0]
 801e7de:	61a5      	str	r5, [r4, #24]
 801e7e0:	2208      	movs	r2, #8
 801e7e2:	4629      	mov	r1, r5
 801e7e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e7e8:	f000 fa4a 	bl	801ec80 <memset>
 801e7ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e7f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e7f4:	4620      	mov	r0, r4
 801e7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7f8:	3468      	adds	r4, #104	; 0x68
 801e7fa:	e7d9      	b.n	801e7b0 <__sfp+0x1c>
 801e7fc:	2104      	movs	r1, #4
 801e7fe:	4638      	mov	r0, r7
 801e800:	f7ff ff62 	bl	801e6c8 <__sfmoreglue>
 801e804:	4604      	mov	r4, r0
 801e806:	6030      	str	r0, [r6, #0]
 801e808:	2800      	cmp	r0, #0
 801e80a:	d1d5      	bne.n	801e7b8 <__sfp+0x24>
 801e80c:	f7ff ff78 	bl	801e700 <__sfp_lock_release>
 801e810:	230c      	movs	r3, #12
 801e812:	603b      	str	r3, [r7, #0]
 801e814:	e7ee      	b.n	801e7f4 <__sfp+0x60>
 801e816:	bf00      	nop
 801e818:	0802300c 	.word	0x0802300c
 801e81c:	ffff0001 	.word	0xffff0001

0801e820 <fiprintf>:
 801e820:	b40e      	push	{r1, r2, r3}
 801e822:	b503      	push	{r0, r1, lr}
 801e824:	4601      	mov	r1, r0
 801e826:	ab03      	add	r3, sp, #12
 801e828:	4805      	ldr	r0, [pc, #20]	; (801e840 <fiprintf+0x20>)
 801e82a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e82e:	6800      	ldr	r0, [r0, #0]
 801e830:	9301      	str	r3, [sp, #4]
 801e832:	f000 fb4d 	bl	801eed0 <_vfiprintf_r>
 801e836:	b002      	add	sp, #8
 801e838:	f85d eb04 	ldr.w	lr, [sp], #4
 801e83c:	b003      	add	sp, #12
 801e83e:	4770      	bx	lr
 801e840:	20000330 	.word	0x20000330

0801e844 <_fputc_r>:
 801e844:	b570      	push	{r4, r5, r6, lr}
 801e846:	460e      	mov	r6, r1
 801e848:	4614      	mov	r4, r2
 801e84a:	4605      	mov	r5, r0
 801e84c:	b118      	cbz	r0, 801e856 <_fputc_r+0x12>
 801e84e:	6983      	ldr	r3, [r0, #24]
 801e850:	b90b      	cbnz	r3, 801e856 <_fputc_r+0x12>
 801e852:	f7ff ff67 	bl	801e724 <__sinit>
 801e856:	4b14      	ldr	r3, [pc, #80]	; (801e8a8 <_fputc_r+0x64>)
 801e858:	429c      	cmp	r4, r3
 801e85a:	d11a      	bne.n	801e892 <_fputc_r+0x4e>
 801e85c:	686c      	ldr	r4, [r5, #4]
 801e85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e860:	07d8      	lsls	r0, r3, #31
 801e862:	d405      	bmi.n	801e870 <_fputc_r+0x2c>
 801e864:	89a3      	ldrh	r3, [r4, #12]
 801e866:	0599      	lsls	r1, r3, #22
 801e868:	d402      	bmi.n	801e870 <_fputc_r+0x2c>
 801e86a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e86c:	f000 f94f 	bl	801eb0e <__retarget_lock_acquire_recursive>
 801e870:	4622      	mov	r2, r4
 801e872:	4628      	mov	r0, r5
 801e874:	4631      	mov	r1, r6
 801e876:	f000 fdef 	bl	801f458 <_putc_r>
 801e87a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e87c:	07da      	lsls	r2, r3, #31
 801e87e:	4605      	mov	r5, r0
 801e880:	d405      	bmi.n	801e88e <_fputc_r+0x4a>
 801e882:	89a3      	ldrh	r3, [r4, #12]
 801e884:	059b      	lsls	r3, r3, #22
 801e886:	d402      	bmi.n	801e88e <_fputc_r+0x4a>
 801e888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e88a:	f000 f941 	bl	801eb10 <__retarget_lock_release_recursive>
 801e88e:	4628      	mov	r0, r5
 801e890:	bd70      	pop	{r4, r5, r6, pc}
 801e892:	4b06      	ldr	r3, [pc, #24]	; (801e8ac <_fputc_r+0x68>)
 801e894:	429c      	cmp	r4, r3
 801e896:	d101      	bne.n	801e89c <_fputc_r+0x58>
 801e898:	68ac      	ldr	r4, [r5, #8]
 801e89a:	e7e0      	b.n	801e85e <_fputc_r+0x1a>
 801e89c:	4b04      	ldr	r3, [pc, #16]	; (801e8b0 <_fputc_r+0x6c>)
 801e89e:	429c      	cmp	r4, r3
 801e8a0:	bf08      	it	eq
 801e8a2:	68ec      	ldreq	r4, [r5, #12]
 801e8a4:	e7db      	b.n	801e85e <_fputc_r+0x1a>
 801e8a6:	bf00      	nop
 801e8a8:	08022fcc 	.word	0x08022fcc
 801e8ac:	08022fec 	.word	0x08022fec
 801e8b0:	08022fac 	.word	0x08022fac

0801e8b4 <fputc>:
 801e8b4:	4b02      	ldr	r3, [pc, #8]	; (801e8c0 <fputc+0xc>)
 801e8b6:	460a      	mov	r2, r1
 801e8b8:	4601      	mov	r1, r0
 801e8ba:	6818      	ldr	r0, [r3, #0]
 801e8bc:	f7ff bfc2 	b.w	801e844 <_fputc_r>
 801e8c0:	20000330 	.word	0x20000330

0801e8c4 <_fputs_r>:
 801e8c4:	b570      	push	{r4, r5, r6, lr}
 801e8c6:	460e      	mov	r6, r1
 801e8c8:	4614      	mov	r4, r2
 801e8ca:	4605      	mov	r5, r0
 801e8cc:	b118      	cbz	r0, 801e8d6 <_fputs_r+0x12>
 801e8ce:	6983      	ldr	r3, [r0, #24]
 801e8d0:	b90b      	cbnz	r3, 801e8d6 <_fputs_r+0x12>
 801e8d2:	f7ff ff27 	bl	801e724 <__sinit>
 801e8d6:	4b2b      	ldr	r3, [pc, #172]	; (801e984 <_fputs_r+0xc0>)
 801e8d8:	429c      	cmp	r4, r3
 801e8da:	d11e      	bne.n	801e91a <_fputs_r+0x56>
 801e8dc:	686c      	ldr	r4, [r5, #4]
 801e8de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e8e0:	07da      	lsls	r2, r3, #31
 801e8e2:	d405      	bmi.n	801e8f0 <_fputs_r+0x2c>
 801e8e4:	89a3      	ldrh	r3, [r4, #12]
 801e8e6:	059b      	lsls	r3, r3, #22
 801e8e8:	d402      	bmi.n	801e8f0 <_fputs_r+0x2c>
 801e8ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8ec:	f000 f90f 	bl	801eb0e <__retarget_lock_acquire_recursive>
 801e8f0:	89a3      	ldrh	r3, [r4, #12]
 801e8f2:	0718      	lsls	r0, r3, #28
 801e8f4:	d51b      	bpl.n	801e92e <_fputs_r+0x6a>
 801e8f6:	6923      	ldr	r3, [r4, #16]
 801e8f8:	b1cb      	cbz	r3, 801e92e <_fputs_r+0x6a>
 801e8fa:	3e01      	subs	r6, #1
 801e8fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e900:	bb39      	cbnz	r1, 801e952 <_fputs_r+0x8e>
 801e902:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801e904:	f015 0501 	ands.w	r5, r5, #1
 801e908:	d139      	bne.n	801e97e <_fputs_r+0xba>
 801e90a:	89a3      	ldrh	r3, [r4, #12]
 801e90c:	0599      	lsls	r1, r3, #22
 801e90e:	d402      	bmi.n	801e916 <_fputs_r+0x52>
 801e910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e912:	f000 f8fd 	bl	801eb10 <__retarget_lock_release_recursive>
 801e916:	4628      	mov	r0, r5
 801e918:	bd70      	pop	{r4, r5, r6, pc}
 801e91a:	4b1b      	ldr	r3, [pc, #108]	; (801e988 <_fputs_r+0xc4>)
 801e91c:	429c      	cmp	r4, r3
 801e91e:	d101      	bne.n	801e924 <_fputs_r+0x60>
 801e920:	68ac      	ldr	r4, [r5, #8]
 801e922:	e7dc      	b.n	801e8de <_fputs_r+0x1a>
 801e924:	4b19      	ldr	r3, [pc, #100]	; (801e98c <_fputs_r+0xc8>)
 801e926:	429c      	cmp	r4, r3
 801e928:	bf08      	it	eq
 801e92a:	68ec      	ldreq	r4, [r5, #12]
 801e92c:	e7d7      	b.n	801e8de <_fputs_r+0x1a>
 801e92e:	4621      	mov	r1, r4
 801e930:	4628      	mov	r0, r5
 801e932:	f001 fe6f 	bl	8020614 <__swsetup_r>
 801e936:	2800      	cmp	r0, #0
 801e938:	d0df      	beq.n	801e8fa <_fputs_r+0x36>
 801e93a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e93c:	07da      	lsls	r2, r3, #31
 801e93e:	d405      	bmi.n	801e94c <_fputs_r+0x88>
 801e940:	89a3      	ldrh	r3, [r4, #12]
 801e942:	059b      	lsls	r3, r3, #22
 801e944:	d402      	bmi.n	801e94c <_fputs_r+0x88>
 801e946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e948:	f000 f8e2 	bl	801eb10 <__retarget_lock_release_recursive>
 801e94c:	f04f 35ff 	mov.w	r5, #4294967295
 801e950:	e7e1      	b.n	801e916 <_fputs_r+0x52>
 801e952:	68a3      	ldr	r3, [r4, #8]
 801e954:	3b01      	subs	r3, #1
 801e956:	2b00      	cmp	r3, #0
 801e958:	60a3      	str	r3, [r4, #8]
 801e95a:	da04      	bge.n	801e966 <_fputs_r+0xa2>
 801e95c:	69a2      	ldr	r2, [r4, #24]
 801e95e:	4293      	cmp	r3, r2
 801e960:	db06      	blt.n	801e970 <_fputs_r+0xac>
 801e962:	290a      	cmp	r1, #10
 801e964:	d004      	beq.n	801e970 <_fputs_r+0xac>
 801e966:	6823      	ldr	r3, [r4, #0]
 801e968:	1c5a      	adds	r2, r3, #1
 801e96a:	6022      	str	r2, [r4, #0]
 801e96c:	7019      	strb	r1, [r3, #0]
 801e96e:	e7c5      	b.n	801e8fc <_fputs_r+0x38>
 801e970:	4622      	mov	r2, r4
 801e972:	4628      	mov	r0, r5
 801e974:	f001 fddc 	bl	8020530 <__swbuf_r>
 801e978:	3001      	adds	r0, #1
 801e97a:	d1bf      	bne.n	801e8fc <_fputs_r+0x38>
 801e97c:	e7dd      	b.n	801e93a <_fputs_r+0x76>
 801e97e:	460d      	mov	r5, r1
 801e980:	e7c9      	b.n	801e916 <_fputs_r+0x52>
 801e982:	bf00      	nop
 801e984:	08022fcc 	.word	0x08022fcc
 801e988:	08022fec 	.word	0x08022fec
 801e98c:	08022fac 	.word	0x08022fac

0801e990 <fputs>:
 801e990:	4b02      	ldr	r3, [pc, #8]	; (801e99c <fputs+0xc>)
 801e992:	460a      	mov	r2, r1
 801e994:	4601      	mov	r1, r0
 801e996:	6818      	ldr	r0, [r3, #0]
 801e998:	f7ff bf94 	b.w	801e8c4 <_fputs_r>
 801e99c:	20000330 	.word	0x20000330

0801e9a0 <_fwalk_reent>:
 801e9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9a4:	4606      	mov	r6, r0
 801e9a6:	4688      	mov	r8, r1
 801e9a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e9ac:	2700      	movs	r7, #0
 801e9ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e9b2:	f1b9 0901 	subs.w	r9, r9, #1
 801e9b6:	d505      	bpl.n	801e9c4 <_fwalk_reent+0x24>
 801e9b8:	6824      	ldr	r4, [r4, #0]
 801e9ba:	2c00      	cmp	r4, #0
 801e9bc:	d1f7      	bne.n	801e9ae <_fwalk_reent+0xe>
 801e9be:	4638      	mov	r0, r7
 801e9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9c4:	89ab      	ldrh	r3, [r5, #12]
 801e9c6:	2b01      	cmp	r3, #1
 801e9c8:	d907      	bls.n	801e9da <_fwalk_reent+0x3a>
 801e9ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e9ce:	3301      	adds	r3, #1
 801e9d0:	d003      	beq.n	801e9da <_fwalk_reent+0x3a>
 801e9d2:	4629      	mov	r1, r5
 801e9d4:	4630      	mov	r0, r6
 801e9d6:	47c0      	blx	r8
 801e9d8:	4307      	orrs	r7, r0
 801e9da:	3568      	adds	r5, #104	; 0x68
 801e9dc:	e7e9      	b.n	801e9b2 <_fwalk_reent+0x12>
	...

0801e9e0 <_fwrite_r>:
 801e9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9e4:	9c08      	ldr	r4, [sp, #32]
 801e9e6:	468a      	mov	sl, r1
 801e9e8:	4690      	mov	r8, r2
 801e9ea:	fb02 f903 	mul.w	r9, r2, r3
 801e9ee:	4605      	mov	r5, r0
 801e9f0:	b118      	cbz	r0, 801e9fa <_fwrite_r+0x1a>
 801e9f2:	6983      	ldr	r3, [r0, #24]
 801e9f4:	b90b      	cbnz	r3, 801e9fa <_fwrite_r+0x1a>
 801e9f6:	f7ff fe95 	bl	801e724 <__sinit>
 801e9fa:	4b26      	ldr	r3, [pc, #152]	; (801ea94 <_fwrite_r+0xb4>)
 801e9fc:	429c      	cmp	r4, r3
 801e9fe:	d123      	bne.n	801ea48 <_fwrite_r+0x68>
 801ea00:	686c      	ldr	r4, [r5, #4]
 801ea02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea04:	07de      	lsls	r6, r3, #31
 801ea06:	d405      	bmi.n	801ea14 <_fwrite_r+0x34>
 801ea08:	89a3      	ldrh	r3, [r4, #12]
 801ea0a:	0598      	lsls	r0, r3, #22
 801ea0c:	d402      	bmi.n	801ea14 <_fwrite_r+0x34>
 801ea0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea10:	f000 f87d 	bl	801eb0e <__retarget_lock_acquire_recursive>
 801ea14:	89a3      	ldrh	r3, [r4, #12]
 801ea16:	0719      	lsls	r1, r3, #28
 801ea18:	d520      	bpl.n	801ea5c <_fwrite_r+0x7c>
 801ea1a:	6923      	ldr	r3, [r4, #16]
 801ea1c:	b1f3      	cbz	r3, 801ea5c <_fwrite_r+0x7c>
 801ea1e:	2600      	movs	r6, #0
 801ea20:	454e      	cmp	r6, r9
 801ea22:	d029      	beq.n	801ea78 <_fwrite_r+0x98>
 801ea24:	68a7      	ldr	r7, [r4, #8]
 801ea26:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801ea2a:	3f01      	subs	r7, #1
 801ea2c:	2f00      	cmp	r7, #0
 801ea2e:	60a7      	str	r7, [r4, #8]
 801ea30:	da04      	bge.n	801ea3c <_fwrite_r+0x5c>
 801ea32:	69a3      	ldr	r3, [r4, #24]
 801ea34:	429f      	cmp	r7, r3
 801ea36:	db19      	blt.n	801ea6c <_fwrite_r+0x8c>
 801ea38:	290a      	cmp	r1, #10
 801ea3a:	d017      	beq.n	801ea6c <_fwrite_r+0x8c>
 801ea3c:	6823      	ldr	r3, [r4, #0]
 801ea3e:	1c5a      	adds	r2, r3, #1
 801ea40:	6022      	str	r2, [r4, #0]
 801ea42:	7019      	strb	r1, [r3, #0]
 801ea44:	3601      	adds	r6, #1
 801ea46:	e7eb      	b.n	801ea20 <_fwrite_r+0x40>
 801ea48:	4b13      	ldr	r3, [pc, #76]	; (801ea98 <_fwrite_r+0xb8>)
 801ea4a:	429c      	cmp	r4, r3
 801ea4c:	d101      	bne.n	801ea52 <_fwrite_r+0x72>
 801ea4e:	68ac      	ldr	r4, [r5, #8]
 801ea50:	e7d7      	b.n	801ea02 <_fwrite_r+0x22>
 801ea52:	4b12      	ldr	r3, [pc, #72]	; (801ea9c <_fwrite_r+0xbc>)
 801ea54:	429c      	cmp	r4, r3
 801ea56:	bf08      	it	eq
 801ea58:	68ec      	ldreq	r4, [r5, #12]
 801ea5a:	e7d2      	b.n	801ea02 <_fwrite_r+0x22>
 801ea5c:	4621      	mov	r1, r4
 801ea5e:	4628      	mov	r0, r5
 801ea60:	f001 fdd8 	bl	8020614 <__swsetup_r>
 801ea64:	2800      	cmp	r0, #0
 801ea66:	d0da      	beq.n	801ea1e <_fwrite_r+0x3e>
 801ea68:	2600      	movs	r6, #0
 801ea6a:	e005      	b.n	801ea78 <_fwrite_r+0x98>
 801ea6c:	4622      	mov	r2, r4
 801ea6e:	4628      	mov	r0, r5
 801ea70:	f001 fd5e 	bl	8020530 <__swbuf_r>
 801ea74:	3001      	adds	r0, #1
 801ea76:	d1e5      	bne.n	801ea44 <_fwrite_r+0x64>
 801ea78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea7a:	07da      	lsls	r2, r3, #31
 801ea7c:	d405      	bmi.n	801ea8a <_fwrite_r+0xaa>
 801ea7e:	89a3      	ldrh	r3, [r4, #12]
 801ea80:	059b      	lsls	r3, r3, #22
 801ea82:	d402      	bmi.n	801ea8a <_fwrite_r+0xaa>
 801ea84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea86:	f000 f843 	bl	801eb10 <__retarget_lock_release_recursive>
 801ea8a:	fbb6 f0f8 	udiv	r0, r6, r8
 801ea8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea92:	bf00      	nop
 801ea94:	08022fcc 	.word	0x08022fcc
 801ea98:	08022fec 	.word	0x08022fec
 801ea9c:	08022fac 	.word	0x08022fac

0801eaa0 <fwrite>:
 801eaa0:	b507      	push	{r0, r1, r2, lr}
 801eaa2:	9300      	str	r3, [sp, #0]
 801eaa4:	4613      	mov	r3, r2
 801eaa6:	460a      	mov	r2, r1
 801eaa8:	4601      	mov	r1, r0
 801eaaa:	4803      	ldr	r0, [pc, #12]	; (801eab8 <fwrite+0x18>)
 801eaac:	6800      	ldr	r0, [r0, #0]
 801eaae:	f7ff ff97 	bl	801e9e0 <_fwrite_r>
 801eab2:	b003      	add	sp, #12
 801eab4:	f85d fb04 	ldr.w	pc, [sp], #4
 801eab8:	20000330 	.word	0x20000330

0801eabc <__libc_init_array>:
 801eabc:	b570      	push	{r4, r5, r6, lr}
 801eabe:	4d0d      	ldr	r5, [pc, #52]	; (801eaf4 <__libc_init_array+0x38>)
 801eac0:	4c0d      	ldr	r4, [pc, #52]	; (801eaf8 <__libc_init_array+0x3c>)
 801eac2:	1b64      	subs	r4, r4, r5
 801eac4:	10a4      	asrs	r4, r4, #2
 801eac6:	2600      	movs	r6, #0
 801eac8:	42a6      	cmp	r6, r4
 801eaca:	d109      	bne.n	801eae0 <__libc_init_array+0x24>
 801eacc:	4d0b      	ldr	r5, [pc, #44]	; (801eafc <__libc_init_array+0x40>)
 801eace:	4c0c      	ldr	r4, [pc, #48]	; (801eb00 <__libc_init_array+0x44>)
 801ead0:	f003 f876 	bl	8021bc0 <_init>
 801ead4:	1b64      	subs	r4, r4, r5
 801ead6:	10a4      	asrs	r4, r4, #2
 801ead8:	2600      	movs	r6, #0
 801eada:	42a6      	cmp	r6, r4
 801eadc:	d105      	bne.n	801eaea <__libc_init_array+0x2e>
 801eade:	bd70      	pop	{r4, r5, r6, pc}
 801eae0:	f855 3b04 	ldr.w	r3, [r5], #4
 801eae4:	4798      	blx	r3
 801eae6:	3601      	adds	r6, #1
 801eae8:	e7ee      	b.n	801eac8 <__libc_init_array+0xc>
 801eaea:	f855 3b04 	ldr.w	r3, [r5], #4
 801eaee:	4798      	blx	r3
 801eaf0:	3601      	adds	r6, #1
 801eaf2:	e7f2      	b.n	801eada <__libc_init_array+0x1e>
 801eaf4:	080232e4 	.word	0x080232e4
 801eaf8:	080232e4 	.word	0x080232e4
 801eafc:	080232e4 	.word	0x080232e4
 801eb00:	080232e8 	.word	0x080232e8

0801eb04 <localeconv>:
 801eb04:	4800      	ldr	r0, [pc, #0]	; (801eb08 <localeconv+0x4>)
 801eb06:	4770      	bx	lr
 801eb08:	20000484 	.word	0x20000484

0801eb0c <__retarget_lock_init_recursive>:
 801eb0c:	4770      	bx	lr

0801eb0e <__retarget_lock_acquire_recursive>:
 801eb0e:	4770      	bx	lr

0801eb10 <__retarget_lock_release_recursive>:
 801eb10:	4770      	bx	lr

0801eb12 <__swhatbuf_r>:
 801eb12:	b570      	push	{r4, r5, r6, lr}
 801eb14:	460e      	mov	r6, r1
 801eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb1a:	2900      	cmp	r1, #0
 801eb1c:	b096      	sub	sp, #88	; 0x58
 801eb1e:	4614      	mov	r4, r2
 801eb20:	461d      	mov	r5, r3
 801eb22:	da08      	bge.n	801eb36 <__swhatbuf_r+0x24>
 801eb24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801eb28:	2200      	movs	r2, #0
 801eb2a:	602a      	str	r2, [r5, #0]
 801eb2c:	061a      	lsls	r2, r3, #24
 801eb2e:	d410      	bmi.n	801eb52 <__swhatbuf_r+0x40>
 801eb30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eb34:	e00e      	b.n	801eb54 <__swhatbuf_r+0x42>
 801eb36:	466a      	mov	r2, sp
 801eb38:	f001 fe08 	bl	802074c <_fstat_r>
 801eb3c:	2800      	cmp	r0, #0
 801eb3e:	dbf1      	blt.n	801eb24 <__swhatbuf_r+0x12>
 801eb40:	9a01      	ldr	r2, [sp, #4]
 801eb42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801eb46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801eb4a:	425a      	negs	r2, r3
 801eb4c:	415a      	adcs	r2, r3
 801eb4e:	602a      	str	r2, [r5, #0]
 801eb50:	e7ee      	b.n	801eb30 <__swhatbuf_r+0x1e>
 801eb52:	2340      	movs	r3, #64	; 0x40
 801eb54:	2000      	movs	r0, #0
 801eb56:	6023      	str	r3, [r4, #0]
 801eb58:	b016      	add	sp, #88	; 0x58
 801eb5a:	bd70      	pop	{r4, r5, r6, pc}

0801eb5c <__smakebuf_r>:
 801eb5c:	898b      	ldrh	r3, [r1, #12]
 801eb5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eb60:	079d      	lsls	r5, r3, #30
 801eb62:	4606      	mov	r6, r0
 801eb64:	460c      	mov	r4, r1
 801eb66:	d507      	bpl.n	801eb78 <__smakebuf_r+0x1c>
 801eb68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eb6c:	6023      	str	r3, [r4, #0]
 801eb6e:	6123      	str	r3, [r4, #16]
 801eb70:	2301      	movs	r3, #1
 801eb72:	6163      	str	r3, [r4, #20]
 801eb74:	b002      	add	sp, #8
 801eb76:	bd70      	pop	{r4, r5, r6, pc}
 801eb78:	ab01      	add	r3, sp, #4
 801eb7a:	466a      	mov	r2, sp
 801eb7c:	f7ff ffc9 	bl	801eb12 <__swhatbuf_r>
 801eb80:	9900      	ldr	r1, [sp, #0]
 801eb82:	4605      	mov	r5, r0
 801eb84:	4630      	mov	r0, r6
 801eb86:	f000 f905 	bl	801ed94 <_malloc_r>
 801eb8a:	b948      	cbnz	r0, 801eba0 <__smakebuf_r+0x44>
 801eb8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb90:	059a      	lsls	r2, r3, #22
 801eb92:	d4ef      	bmi.n	801eb74 <__smakebuf_r+0x18>
 801eb94:	f023 0303 	bic.w	r3, r3, #3
 801eb98:	f043 0302 	orr.w	r3, r3, #2
 801eb9c:	81a3      	strh	r3, [r4, #12]
 801eb9e:	e7e3      	b.n	801eb68 <__smakebuf_r+0xc>
 801eba0:	4b0d      	ldr	r3, [pc, #52]	; (801ebd8 <__smakebuf_r+0x7c>)
 801eba2:	62b3      	str	r3, [r6, #40]	; 0x28
 801eba4:	89a3      	ldrh	r3, [r4, #12]
 801eba6:	6020      	str	r0, [r4, #0]
 801eba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ebac:	81a3      	strh	r3, [r4, #12]
 801ebae:	9b00      	ldr	r3, [sp, #0]
 801ebb0:	6163      	str	r3, [r4, #20]
 801ebb2:	9b01      	ldr	r3, [sp, #4]
 801ebb4:	6120      	str	r0, [r4, #16]
 801ebb6:	b15b      	cbz	r3, 801ebd0 <__smakebuf_r+0x74>
 801ebb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebbc:	4630      	mov	r0, r6
 801ebbe:	f002 f959 	bl	8020e74 <_isatty_r>
 801ebc2:	b128      	cbz	r0, 801ebd0 <__smakebuf_r+0x74>
 801ebc4:	89a3      	ldrh	r3, [r4, #12]
 801ebc6:	f023 0303 	bic.w	r3, r3, #3
 801ebca:	f043 0301 	orr.w	r3, r3, #1
 801ebce:	81a3      	strh	r3, [r4, #12]
 801ebd0:	89a0      	ldrh	r0, [r4, #12]
 801ebd2:	4305      	orrs	r5, r0
 801ebd4:	81a5      	strh	r5, [r4, #12]
 801ebd6:	e7cd      	b.n	801eb74 <__smakebuf_r+0x18>
 801ebd8:	0801e6bd 	.word	0x0801e6bd

0801ebdc <malloc>:
 801ebdc:	4b02      	ldr	r3, [pc, #8]	; (801ebe8 <malloc+0xc>)
 801ebde:	4601      	mov	r1, r0
 801ebe0:	6818      	ldr	r0, [r3, #0]
 801ebe2:	f000 b8d7 	b.w	801ed94 <_malloc_r>
 801ebe6:	bf00      	nop
 801ebe8:	20000330 	.word	0x20000330

0801ebec <__ascii_mbtowc>:
 801ebec:	b082      	sub	sp, #8
 801ebee:	b901      	cbnz	r1, 801ebf2 <__ascii_mbtowc+0x6>
 801ebf0:	a901      	add	r1, sp, #4
 801ebf2:	b142      	cbz	r2, 801ec06 <__ascii_mbtowc+0x1a>
 801ebf4:	b14b      	cbz	r3, 801ec0a <__ascii_mbtowc+0x1e>
 801ebf6:	7813      	ldrb	r3, [r2, #0]
 801ebf8:	600b      	str	r3, [r1, #0]
 801ebfa:	7812      	ldrb	r2, [r2, #0]
 801ebfc:	1e10      	subs	r0, r2, #0
 801ebfe:	bf18      	it	ne
 801ec00:	2001      	movne	r0, #1
 801ec02:	b002      	add	sp, #8
 801ec04:	4770      	bx	lr
 801ec06:	4610      	mov	r0, r2
 801ec08:	e7fb      	b.n	801ec02 <__ascii_mbtowc+0x16>
 801ec0a:	f06f 0001 	mvn.w	r0, #1
 801ec0e:	e7f8      	b.n	801ec02 <__ascii_mbtowc+0x16>

0801ec10 <memcmp>:
 801ec10:	b510      	push	{r4, lr}
 801ec12:	3901      	subs	r1, #1
 801ec14:	4402      	add	r2, r0
 801ec16:	4290      	cmp	r0, r2
 801ec18:	d101      	bne.n	801ec1e <memcmp+0xe>
 801ec1a:	2000      	movs	r0, #0
 801ec1c:	e005      	b.n	801ec2a <memcmp+0x1a>
 801ec1e:	7803      	ldrb	r3, [r0, #0]
 801ec20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ec24:	42a3      	cmp	r3, r4
 801ec26:	d001      	beq.n	801ec2c <memcmp+0x1c>
 801ec28:	1b18      	subs	r0, r3, r4
 801ec2a:	bd10      	pop	{r4, pc}
 801ec2c:	3001      	adds	r0, #1
 801ec2e:	e7f2      	b.n	801ec16 <memcmp+0x6>

0801ec30 <memcpy>:
 801ec30:	440a      	add	r2, r1
 801ec32:	4291      	cmp	r1, r2
 801ec34:	f100 33ff 	add.w	r3, r0, #4294967295
 801ec38:	d100      	bne.n	801ec3c <memcpy+0xc>
 801ec3a:	4770      	bx	lr
 801ec3c:	b510      	push	{r4, lr}
 801ec3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec42:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ec46:	4291      	cmp	r1, r2
 801ec48:	d1f9      	bne.n	801ec3e <memcpy+0xe>
 801ec4a:	bd10      	pop	{r4, pc}

0801ec4c <memmove>:
 801ec4c:	4288      	cmp	r0, r1
 801ec4e:	b510      	push	{r4, lr}
 801ec50:	eb01 0402 	add.w	r4, r1, r2
 801ec54:	d902      	bls.n	801ec5c <memmove+0x10>
 801ec56:	4284      	cmp	r4, r0
 801ec58:	4623      	mov	r3, r4
 801ec5a:	d807      	bhi.n	801ec6c <memmove+0x20>
 801ec5c:	1e43      	subs	r3, r0, #1
 801ec5e:	42a1      	cmp	r1, r4
 801ec60:	d008      	beq.n	801ec74 <memmove+0x28>
 801ec62:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ec66:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ec6a:	e7f8      	b.n	801ec5e <memmove+0x12>
 801ec6c:	4402      	add	r2, r0
 801ec6e:	4601      	mov	r1, r0
 801ec70:	428a      	cmp	r2, r1
 801ec72:	d100      	bne.n	801ec76 <memmove+0x2a>
 801ec74:	bd10      	pop	{r4, pc}
 801ec76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ec7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ec7e:	e7f7      	b.n	801ec70 <memmove+0x24>

0801ec80 <memset>:
 801ec80:	4402      	add	r2, r0
 801ec82:	4603      	mov	r3, r0
 801ec84:	4293      	cmp	r3, r2
 801ec86:	d100      	bne.n	801ec8a <memset+0xa>
 801ec88:	4770      	bx	lr
 801ec8a:	f803 1b01 	strb.w	r1, [r3], #1
 801ec8e:	e7f9      	b.n	801ec84 <memset+0x4>

0801ec90 <_calloc_r>:
 801ec90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ec92:	fba1 2402 	umull	r2, r4, r1, r2
 801ec96:	b94c      	cbnz	r4, 801ecac <_calloc_r+0x1c>
 801ec98:	4611      	mov	r1, r2
 801ec9a:	9201      	str	r2, [sp, #4]
 801ec9c:	f000 f87a 	bl	801ed94 <_malloc_r>
 801eca0:	9a01      	ldr	r2, [sp, #4]
 801eca2:	4605      	mov	r5, r0
 801eca4:	b930      	cbnz	r0, 801ecb4 <_calloc_r+0x24>
 801eca6:	4628      	mov	r0, r5
 801eca8:	b003      	add	sp, #12
 801ecaa:	bd30      	pop	{r4, r5, pc}
 801ecac:	220c      	movs	r2, #12
 801ecae:	6002      	str	r2, [r0, #0]
 801ecb0:	2500      	movs	r5, #0
 801ecb2:	e7f8      	b.n	801eca6 <_calloc_r+0x16>
 801ecb4:	4621      	mov	r1, r4
 801ecb6:	f7ff ffe3 	bl	801ec80 <memset>
 801ecba:	e7f4      	b.n	801eca6 <_calloc_r+0x16>

0801ecbc <_free_r>:
 801ecbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ecbe:	2900      	cmp	r1, #0
 801ecc0:	d044      	beq.n	801ed4c <_free_r+0x90>
 801ecc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ecc6:	9001      	str	r0, [sp, #4]
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	f1a1 0404 	sub.w	r4, r1, #4
 801ecce:	bfb8      	it	lt
 801ecd0:	18e4      	addlt	r4, r4, r3
 801ecd2:	f002 f8f1 	bl	8020eb8 <__malloc_lock>
 801ecd6:	4a1e      	ldr	r2, [pc, #120]	; (801ed50 <_free_r+0x94>)
 801ecd8:	9801      	ldr	r0, [sp, #4]
 801ecda:	6813      	ldr	r3, [r2, #0]
 801ecdc:	b933      	cbnz	r3, 801ecec <_free_r+0x30>
 801ecde:	6063      	str	r3, [r4, #4]
 801ece0:	6014      	str	r4, [r2, #0]
 801ece2:	b003      	add	sp, #12
 801ece4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ece8:	f002 b8ec 	b.w	8020ec4 <__malloc_unlock>
 801ecec:	42a3      	cmp	r3, r4
 801ecee:	d908      	bls.n	801ed02 <_free_r+0x46>
 801ecf0:	6825      	ldr	r5, [r4, #0]
 801ecf2:	1961      	adds	r1, r4, r5
 801ecf4:	428b      	cmp	r3, r1
 801ecf6:	bf01      	itttt	eq
 801ecf8:	6819      	ldreq	r1, [r3, #0]
 801ecfa:	685b      	ldreq	r3, [r3, #4]
 801ecfc:	1949      	addeq	r1, r1, r5
 801ecfe:	6021      	streq	r1, [r4, #0]
 801ed00:	e7ed      	b.n	801ecde <_free_r+0x22>
 801ed02:	461a      	mov	r2, r3
 801ed04:	685b      	ldr	r3, [r3, #4]
 801ed06:	b10b      	cbz	r3, 801ed0c <_free_r+0x50>
 801ed08:	42a3      	cmp	r3, r4
 801ed0a:	d9fa      	bls.n	801ed02 <_free_r+0x46>
 801ed0c:	6811      	ldr	r1, [r2, #0]
 801ed0e:	1855      	adds	r5, r2, r1
 801ed10:	42a5      	cmp	r5, r4
 801ed12:	d10b      	bne.n	801ed2c <_free_r+0x70>
 801ed14:	6824      	ldr	r4, [r4, #0]
 801ed16:	4421      	add	r1, r4
 801ed18:	1854      	adds	r4, r2, r1
 801ed1a:	42a3      	cmp	r3, r4
 801ed1c:	6011      	str	r1, [r2, #0]
 801ed1e:	d1e0      	bne.n	801ece2 <_free_r+0x26>
 801ed20:	681c      	ldr	r4, [r3, #0]
 801ed22:	685b      	ldr	r3, [r3, #4]
 801ed24:	6053      	str	r3, [r2, #4]
 801ed26:	4421      	add	r1, r4
 801ed28:	6011      	str	r1, [r2, #0]
 801ed2a:	e7da      	b.n	801ece2 <_free_r+0x26>
 801ed2c:	d902      	bls.n	801ed34 <_free_r+0x78>
 801ed2e:	230c      	movs	r3, #12
 801ed30:	6003      	str	r3, [r0, #0]
 801ed32:	e7d6      	b.n	801ece2 <_free_r+0x26>
 801ed34:	6825      	ldr	r5, [r4, #0]
 801ed36:	1961      	adds	r1, r4, r5
 801ed38:	428b      	cmp	r3, r1
 801ed3a:	bf04      	itt	eq
 801ed3c:	6819      	ldreq	r1, [r3, #0]
 801ed3e:	685b      	ldreq	r3, [r3, #4]
 801ed40:	6063      	str	r3, [r4, #4]
 801ed42:	bf04      	itt	eq
 801ed44:	1949      	addeq	r1, r1, r5
 801ed46:	6021      	streq	r1, [r4, #0]
 801ed48:	6054      	str	r4, [r2, #4]
 801ed4a:	e7ca      	b.n	801ece2 <_free_r+0x26>
 801ed4c:	b003      	add	sp, #12
 801ed4e:	bd30      	pop	{r4, r5, pc}
 801ed50:	20010370 	.word	0x20010370

0801ed54 <sbrk_aligned>:
 801ed54:	b570      	push	{r4, r5, r6, lr}
 801ed56:	4e0e      	ldr	r6, [pc, #56]	; (801ed90 <sbrk_aligned+0x3c>)
 801ed58:	460c      	mov	r4, r1
 801ed5a:	6831      	ldr	r1, [r6, #0]
 801ed5c:	4605      	mov	r5, r0
 801ed5e:	b911      	cbnz	r1, 801ed66 <sbrk_aligned+0x12>
 801ed60:	f000 fc2c 	bl	801f5bc <_sbrk_r>
 801ed64:	6030      	str	r0, [r6, #0]
 801ed66:	4621      	mov	r1, r4
 801ed68:	4628      	mov	r0, r5
 801ed6a:	f000 fc27 	bl	801f5bc <_sbrk_r>
 801ed6e:	1c43      	adds	r3, r0, #1
 801ed70:	d00a      	beq.n	801ed88 <sbrk_aligned+0x34>
 801ed72:	1cc4      	adds	r4, r0, #3
 801ed74:	f024 0403 	bic.w	r4, r4, #3
 801ed78:	42a0      	cmp	r0, r4
 801ed7a:	d007      	beq.n	801ed8c <sbrk_aligned+0x38>
 801ed7c:	1a21      	subs	r1, r4, r0
 801ed7e:	4628      	mov	r0, r5
 801ed80:	f000 fc1c 	bl	801f5bc <_sbrk_r>
 801ed84:	3001      	adds	r0, #1
 801ed86:	d101      	bne.n	801ed8c <sbrk_aligned+0x38>
 801ed88:	f04f 34ff 	mov.w	r4, #4294967295
 801ed8c:	4620      	mov	r0, r4
 801ed8e:	bd70      	pop	{r4, r5, r6, pc}
 801ed90:	20010374 	.word	0x20010374

0801ed94 <_malloc_r>:
 801ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed98:	1ccd      	adds	r5, r1, #3
 801ed9a:	f025 0503 	bic.w	r5, r5, #3
 801ed9e:	3508      	adds	r5, #8
 801eda0:	2d0c      	cmp	r5, #12
 801eda2:	bf38      	it	cc
 801eda4:	250c      	movcc	r5, #12
 801eda6:	2d00      	cmp	r5, #0
 801eda8:	4607      	mov	r7, r0
 801edaa:	db01      	blt.n	801edb0 <_malloc_r+0x1c>
 801edac:	42a9      	cmp	r1, r5
 801edae:	d905      	bls.n	801edbc <_malloc_r+0x28>
 801edb0:	230c      	movs	r3, #12
 801edb2:	603b      	str	r3, [r7, #0]
 801edb4:	2600      	movs	r6, #0
 801edb6:	4630      	mov	r0, r6
 801edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801edbc:	4e2e      	ldr	r6, [pc, #184]	; (801ee78 <_malloc_r+0xe4>)
 801edbe:	f002 f87b 	bl	8020eb8 <__malloc_lock>
 801edc2:	6833      	ldr	r3, [r6, #0]
 801edc4:	461c      	mov	r4, r3
 801edc6:	bb34      	cbnz	r4, 801ee16 <_malloc_r+0x82>
 801edc8:	4629      	mov	r1, r5
 801edca:	4638      	mov	r0, r7
 801edcc:	f7ff ffc2 	bl	801ed54 <sbrk_aligned>
 801edd0:	1c43      	adds	r3, r0, #1
 801edd2:	4604      	mov	r4, r0
 801edd4:	d14d      	bne.n	801ee72 <_malloc_r+0xde>
 801edd6:	6834      	ldr	r4, [r6, #0]
 801edd8:	4626      	mov	r6, r4
 801edda:	2e00      	cmp	r6, #0
 801eddc:	d140      	bne.n	801ee60 <_malloc_r+0xcc>
 801edde:	6823      	ldr	r3, [r4, #0]
 801ede0:	4631      	mov	r1, r6
 801ede2:	4638      	mov	r0, r7
 801ede4:	eb04 0803 	add.w	r8, r4, r3
 801ede8:	f000 fbe8 	bl	801f5bc <_sbrk_r>
 801edec:	4580      	cmp	r8, r0
 801edee:	d13a      	bne.n	801ee66 <_malloc_r+0xd2>
 801edf0:	6821      	ldr	r1, [r4, #0]
 801edf2:	3503      	adds	r5, #3
 801edf4:	1a6d      	subs	r5, r5, r1
 801edf6:	f025 0503 	bic.w	r5, r5, #3
 801edfa:	3508      	adds	r5, #8
 801edfc:	2d0c      	cmp	r5, #12
 801edfe:	bf38      	it	cc
 801ee00:	250c      	movcc	r5, #12
 801ee02:	4629      	mov	r1, r5
 801ee04:	4638      	mov	r0, r7
 801ee06:	f7ff ffa5 	bl	801ed54 <sbrk_aligned>
 801ee0a:	3001      	adds	r0, #1
 801ee0c:	d02b      	beq.n	801ee66 <_malloc_r+0xd2>
 801ee0e:	6823      	ldr	r3, [r4, #0]
 801ee10:	442b      	add	r3, r5
 801ee12:	6023      	str	r3, [r4, #0]
 801ee14:	e00e      	b.n	801ee34 <_malloc_r+0xa0>
 801ee16:	6822      	ldr	r2, [r4, #0]
 801ee18:	1b52      	subs	r2, r2, r5
 801ee1a:	d41e      	bmi.n	801ee5a <_malloc_r+0xc6>
 801ee1c:	2a0b      	cmp	r2, #11
 801ee1e:	d916      	bls.n	801ee4e <_malloc_r+0xba>
 801ee20:	1961      	adds	r1, r4, r5
 801ee22:	42a3      	cmp	r3, r4
 801ee24:	6025      	str	r5, [r4, #0]
 801ee26:	bf18      	it	ne
 801ee28:	6059      	strne	r1, [r3, #4]
 801ee2a:	6863      	ldr	r3, [r4, #4]
 801ee2c:	bf08      	it	eq
 801ee2e:	6031      	streq	r1, [r6, #0]
 801ee30:	5162      	str	r2, [r4, r5]
 801ee32:	604b      	str	r3, [r1, #4]
 801ee34:	4638      	mov	r0, r7
 801ee36:	f104 060b 	add.w	r6, r4, #11
 801ee3a:	f002 f843 	bl	8020ec4 <__malloc_unlock>
 801ee3e:	f026 0607 	bic.w	r6, r6, #7
 801ee42:	1d23      	adds	r3, r4, #4
 801ee44:	1af2      	subs	r2, r6, r3
 801ee46:	d0b6      	beq.n	801edb6 <_malloc_r+0x22>
 801ee48:	1b9b      	subs	r3, r3, r6
 801ee4a:	50a3      	str	r3, [r4, r2]
 801ee4c:	e7b3      	b.n	801edb6 <_malloc_r+0x22>
 801ee4e:	6862      	ldr	r2, [r4, #4]
 801ee50:	42a3      	cmp	r3, r4
 801ee52:	bf0c      	ite	eq
 801ee54:	6032      	streq	r2, [r6, #0]
 801ee56:	605a      	strne	r2, [r3, #4]
 801ee58:	e7ec      	b.n	801ee34 <_malloc_r+0xa0>
 801ee5a:	4623      	mov	r3, r4
 801ee5c:	6864      	ldr	r4, [r4, #4]
 801ee5e:	e7b2      	b.n	801edc6 <_malloc_r+0x32>
 801ee60:	4634      	mov	r4, r6
 801ee62:	6876      	ldr	r6, [r6, #4]
 801ee64:	e7b9      	b.n	801edda <_malloc_r+0x46>
 801ee66:	230c      	movs	r3, #12
 801ee68:	603b      	str	r3, [r7, #0]
 801ee6a:	4638      	mov	r0, r7
 801ee6c:	f002 f82a 	bl	8020ec4 <__malloc_unlock>
 801ee70:	e7a1      	b.n	801edb6 <_malloc_r+0x22>
 801ee72:	6025      	str	r5, [r4, #0]
 801ee74:	e7de      	b.n	801ee34 <_malloc_r+0xa0>
 801ee76:	bf00      	nop
 801ee78:	20010370 	.word	0x20010370

0801ee7c <__sfputc_r>:
 801ee7c:	6893      	ldr	r3, [r2, #8]
 801ee7e:	3b01      	subs	r3, #1
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	b410      	push	{r4}
 801ee84:	6093      	str	r3, [r2, #8]
 801ee86:	da08      	bge.n	801ee9a <__sfputc_r+0x1e>
 801ee88:	6994      	ldr	r4, [r2, #24]
 801ee8a:	42a3      	cmp	r3, r4
 801ee8c:	db01      	blt.n	801ee92 <__sfputc_r+0x16>
 801ee8e:	290a      	cmp	r1, #10
 801ee90:	d103      	bne.n	801ee9a <__sfputc_r+0x1e>
 801ee92:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ee96:	f001 bb4b 	b.w	8020530 <__swbuf_r>
 801ee9a:	6813      	ldr	r3, [r2, #0]
 801ee9c:	1c58      	adds	r0, r3, #1
 801ee9e:	6010      	str	r0, [r2, #0]
 801eea0:	7019      	strb	r1, [r3, #0]
 801eea2:	4608      	mov	r0, r1
 801eea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eea8:	4770      	bx	lr

0801eeaa <__sfputs_r>:
 801eeaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeac:	4606      	mov	r6, r0
 801eeae:	460f      	mov	r7, r1
 801eeb0:	4614      	mov	r4, r2
 801eeb2:	18d5      	adds	r5, r2, r3
 801eeb4:	42ac      	cmp	r4, r5
 801eeb6:	d101      	bne.n	801eebc <__sfputs_r+0x12>
 801eeb8:	2000      	movs	r0, #0
 801eeba:	e007      	b.n	801eecc <__sfputs_r+0x22>
 801eebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eec0:	463a      	mov	r2, r7
 801eec2:	4630      	mov	r0, r6
 801eec4:	f7ff ffda 	bl	801ee7c <__sfputc_r>
 801eec8:	1c43      	adds	r3, r0, #1
 801eeca:	d1f3      	bne.n	801eeb4 <__sfputs_r+0xa>
 801eecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eed0 <_vfiprintf_r>:
 801eed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eed4:	460d      	mov	r5, r1
 801eed6:	b09d      	sub	sp, #116	; 0x74
 801eed8:	4614      	mov	r4, r2
 801eeda:	4698      	mov	r8, r3
 801eedc:	4606      	mov	r6, r0
 801eede:	b118      	cbz	r0, 801eee8 <_vfiprintf_r+0x18>
 801eee0:	6983      	ldr	r3, [r0, #24]
 801eee2:	b90b      	cbnz	r3, 801eee8 <_vfiprintf_r+0x18>
 801eee4:	f7ff fc1e 	bl	801e724 <__sinit>
 801eee8:	4b89      	ldr	r3, [pc, #548]	; (801f110 <_vfiprintf_r+0x240>)
 801eeea:	429d      	cmp	r5, r3
 801eeec:	d11b      	bne.n	801ef26 <_vfiprintf_r+0x56>
 801eeee:	6875      	ldr	r5, [r6, #4]
 801eef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eef2:	07d9      	lsls	r1, r3, #31
 801eef4:	d405      	bmi.n	801ef02 <_vfiprintf_r+0x32>
 801eef6:	89ab      	ldrh	r3, [r5, #12]
 801eef8:	059a      	lsls	r2, r3, #22
 801eefa:	d402      	bmi.n	801ef02 <_vfiprintf_r+0x32>
 801eefc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eefe:	f7ff fe06 	bl	801eb0e <__retarget_lock_acquire_recursive>
 801ef02:	89ab      	ldrh	r3, [r5, #12]
 801ef04:	071b      	lsls	r3, r3, #28
 801ef06:	d501      	bpl.n	801ef0c <_vfiprintf_r+0x3c>
 801ef08:	692b      	ldr	r3, [r5, #16]
 801ef0a:	b9eb      	cbnz	r3, 801ef48 <_vfiprintf_r+0x78>
 801ef0c:	4629      	mov	r1, r5
 801ef0e:	4630      	mov	r0, r6
 801ef10:	f001 fb80 	bl	8020614 <__swsetup_r>
 801ef14:	b1c0      	cbz	r0, 801ef48 <_vfiprintf_r+0x78>
 801ef16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef18:	07dc      	lsls	r4, r3, #31
 801ef1a:	d50e      	bpl.n	801ef3a <_vfiprintf_r+0x6a>
 801ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 801ef20:	b01d      	add	sp, #116	; 0x74
 801ef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef26:	4b7b      	ldr	r3, [pc, #492]	; (801f114 <_vfiprintf_r+0x244>)
 801ef28:	429d      	cmp	r5, r3
 801ef2a:	d101      	bne.n	801ef30 <_vfiprintf_r+0x60>
 801ef2c:	68b5      	ldr	r5, [r6, #8]
 801ef2e:	e7df      	b.n	801eef0 <_vfiprintf_r+0x20>
 801ef30:	4b79      	ldr	r3, [pc, #484]	; (801f118 <_vfiprintf_r+0x248>)
 801ef32:	429d      	cmp	r5, r3
 801ef34:	bf08      	it	eq
 801ef36:	68f5      	ldreq	r5, [r6, #12]
 801ef38:	e7da      	b.n	801eef0 <_vfiprintf_r+0x20>
 801ef3a:	89ab      	ldrh	r3, [r5, #12]
 801ef3c:	0598      	lsls	r0, r3, #22
 801ef3e:	d4ed      	bmi.n	801ef1c <_vfiprintf_r+0x4c>
 801ef40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef42:	f7ff fde5 	bl	801eb10 <__retarget_lock_release_recursive>
 801ef46:	e7e9      	b.n	801ef1c <_vfiprintf_r+0x4c>
 801ef48:	2300      	movs	r3, #0
 801ef4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ef4c:	2320      	movs	r3, #32
 801ef4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ef52:	f8cd 800c 	str.w	r8, [sp, #12]
 801ef56:	2330      	movs	r3, #48	; 0x30
 801ef58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f11c <_vfiprintf_r+0x24c>
 801ef5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ef60:	f04f 0901 	mov.w	r9, #1
 801ef64:	4623      	mov	r3, r4
 801ef66:	469a      	mov	sl, r3
 801ef68:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef6c:	b10a      	cbz	r2, 801ef72 <_vfiprintf_r+0xa2>
 801ef6e:	2a25      	cmp	r2, #37	; 0x25
 801ef70:	d1f9      	bne.n	801ef66 <_vfiprintf_r+0x96>
 801ef72:	ebba 0b04 	subs.w	fp, sl, r4
 801ef76:	d00b      	beq.n	801ef90 <_vfiprintf_r+0xc0>
 801ef78:	465b      	mov	r3, fp
 801ef7a:	4622      	mov	r2, r4
 801ef7c:	4629      	mov	r1, r5
 801ef7e:	4630      	mov	r0, r6
 801ef80:	f7ff ff93 	bl	801eeaa <__sfputs_r>
 801ef84:	3001      	adds	r0, #1
 801ef86:	f000 80aa 	beq.w	801f0de <_vfiprintf_r+0x20e>
 801ef8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef8c:	445a      	add	r2, fp
 801ef8e:	9209      	str	r2, [sp, #36]	; 0x24
 801ef90:	f89a 3000 	ldrb.w	r3, [sl]
 801ef94:	2b00      	cmp	r3, #0
 801ef96:	f000 80a2 	beq.w	801f0de <_vfiprintf_r+0x20e>
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	f04f 32ff 	mov.w	r2, #4294967295
 801efa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801efa4:	f10a 0a01 	add.w	sl, sl, #1
 801efa8:	9304      	str	r3, [sp, #16]
 801efaa:	9307      	str	r3, [sp, #28]
 801efac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801efb0:	931a      	str	r3, [sp, #104]	; 0x68
 801efb2:	4654      	mov	r4, sl
 801efb4:	2205      	movs	r2, #5
 801efb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efba:	4858      	ldr	r0, [pc, #352]	; (801f11c <_vfiprintf_r+0x24c>)
 801efbc:	f7e1 f908 	bl	80001d0 <memchr>
 801efc0:	9a04      	ldr	r2, [sp, #16]
 801efc2:	b9d8      	cbnz	r0, 801effc <_vfiprintf_r+0x12c>
 801efc4:	06d1      	lsls	r1, r2, #27
 801efc6:	bf44      	itt	mi
 801efc8:	2320      	movmi	r3, #32
 801efca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801efce:	0713      	lsls	r3, r2, #28
 801efd0:	bf44      	itt	mi
 801efd2:	232b      	movmi	r3, #43	; 0x2b
 801efd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801efd8:	f89a 3000 	ldrb.w	r3, [sl]
 801efdc:	2b2a      	cmp	r3, #42	; 0x2a
 801efde:	d015      	beq.n	801f00c <_vfiprintf_r+0x13c>
 801efe0:	9a07      	ldr	r2, [sp, #28]
 801efe2:	4654      	mov	r4, sl
 801efe4:	2000      	movs	r0, #0
 801efe6:	f04f 0c0a 	mov.w	ip, #10
 801efea:	4621      	mov	r1, r4
 801efec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eff0:	3b30      	subs	r3, #48	; 0x30
 801eff2:	2b09      	cmp	r3, #9
 801eff4:	d94e      	bls.n	801f094 <_vfiprintf_r+0x1c4>
 801eff6:	b1b0      	cbz	r0, 801f026 <_vfiprintf_r+0x156>
 801eff8:	9207      	str	r2, [sp, #28]
 801effa:	e014      	b.n	801f026 <_vfiprintf_r+0x156>
 801effc:	eba0 0308 	sub.w	r3, r0, r8
 801f000:	fa09 f303 	lsl.w	r3, r9, r3
 801f004:	4313      	orrs	r3, r2
 801f006:	9304      	str	r3, [sp, #16]
 801f008:	46a2      	mov	sl, r4
 801f00a:	e7d2      	b.n	801efb2 <_vfiprintf_r+0xe2>
 801f00c:	9b03      	ldr	r3, [sp, #12]
 801f00e:	1d19      	adds	r1, r3, #4
 801f010:	681b      	ldr	r3, [r3, #0]
 801f012:	9103      	str	r1, [sp, #12]
 801f014:	2b00      	cmp	r3, #0
 801f016:	bfbb      	ittet	lt
 801f018:	425b      	neglt	r3, r3
 801f01a:	f042 0202 	orrlt.w	r2, r2, #2
 801f01e:	9307      	strge	r3, [sp, #28]
 801f020:	9307      	strlt	r3, [sp, #28]
 801f022:	bfb8      	it	lt
 801f024:	9204      	strlt	r2, [sp, #16]
 801f026:	7823      	ldrb	r3, [r4, #0]
 801f028:	2b2e      	cmp	r3, #46	; 0x2e
 801f02a:	d10c      	bne.n	801f046 <_vfiprintf_r+0x176>
 801f02c:	7863      	ldrb	r3, [r4, #1]
 801f02e:	2b2a      	cmp	r3, #42	; 0x2a
 801f030:	d135      	bne.n	801f09e <_vfiprintf_r+0x1ce>
 801f032:	9b03      	ldr	r3, [sp, #12]
 801f034:	1d1a      	adds	r2, r3, #4
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	9203      	str	r2, [sp, #12]
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	bfb8      	it	lt
 801f03e:	f04f 33ff 	movlt.w	r3, #4294967295
 801f042:	3402      	adds	r4, #2
 801f044:	9305      	str	r3, [sp, #20]
 801f046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f12c <_vfiprintf_r+0x25c>
 801f04a:	7821      	ldrb	r1, [r4, #0]
 801f04c:	2203      	movs	r2, #3
 801f04e:	4650      	mov	r0, sl
 801f050:	f7e1 f8be 	bl	80001d0 <memchr>
 801f054:	b140      	cbz	r0, 801f068 <_vfiprintf_r+0x198>
 801f056:	2340      	movs	r3, #64	; 0x40
 801f058:	eba0 000a 	sub.w	r0, r0, sl
 801f05c:	fa03 f000 	lsl.w	r0, r3, r0
 801f060:	9b04      	ldr	r3, [sp, #16]
 801f062:	4303      	orrs	r3, r0
 801f064:	3401      	adds	r4, #1
 801f066:	9304      	str	r3, [sp, #16]
 801f068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f06c:	482c      	ldr	r0, [pc, #176]	; (801f120 <_vfiprintf_r+0x250>)
 801f06e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f072:	2206      	movs	r2, #6
 801f074:	f7e1 f8ac 	bl	80001d0 <memchr>
 801f078:	2800      	cmp	r0, #0
 801f07a:	d03f      	beq.n	801f0fc <_vfiprintf_r+0x22c>
 801f07c:	4b29      	ldr	r3, [pc, #164]	; (801f124 <_vfiprintf_r+0x254>)
 801f07e:	bb1b      	cbnz	r3, 801f0c8 <_vfiprintf_r+0x1f8>
 801f080:	9b03      	ldr	r3, [sp, #12]
 801f082:	3307      	adds	r3, #7
 801f084:	f023 0307 	bic.w	r3, r3, #7
 801f088:	3308      	adds	r3, #8
 801f08a:	9303      	str	r3, [sp, #12]
 801f08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f08e:	443b      	add	r3, r7
 801f090:	9309      	str	r3, [sp, #36]	; 0x24
 801f092:	e767      	b.n	801ef64 <_vfiprintf_r+0x94>
 801f094:	fb0c 3202 	mla	r2, ip, r2, r3
 801f098:	460c      	mov	r4, r1
 801f09a:	2001      	movs	r0, #1
 801f09c:	e7a5      	b.n	801efea <_vfiprintf_r+0x11a>
 801f09e:	2300      	movs	r3, #0
 801f0a0:	3401      	adds	r4, #1
 801f0a2:	9305      	str	r3, [sp, #20]
 801f0a4:	4619      	mov	r1, r3
 801f0a6:	f04f 0c0a 	mov.w	ip, #10
 801f0aa:	4620      	mov	r0, r4
 801f0ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f0b0:	3a30      	subs	r2, #48	; 0x30
 801f0b2:	2a09      	cmp	r2, #9
 801f0b4:	d903      	bls.n	801f0be <_vfiprintf_r+0x1ee>
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	d0c5      	beq.n	801f046 <_vfiprintf_r+0x176>
 801f0ba:	9105      	str	r1, [sp, #20]
 801f0bc:	e7c3      	b.n	801f046 <_vfiprintf_r+0x176>
 801f0be:	fb0c 2101 	mla	r1, ip, r1, r2
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	2301      	movs	r3, #1
 801f0c6:	e7f0      	b.n	801f0aa <_vfiprintf_r+0x1da>
 801f0c8:	ab03      	add	r3, sp, #12
 801f0ca:	9300      	str	r3, [sp, #0]
 801f0cc:	462a      	mov	r2, r5
 801f0ce:	4b16      	ldr	r3, [pc, #88]	; (801f128 <_vfiprintf_r+0x258>)
 801f0d0:	a904      	add	r1, sp, #16
 801f0d2:	4630      	mov	r0, r6
 801f0d4:	f3af 8000 	nop.w
 801f0d8:	4607      	mov	r7, r0
 801f0da:	1c78      	adds	r0, r7, #1
 801f0dc:	d1d6      	bne.n	801f08c <_vfiprintf_r+0x1bc>
 801f0de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f0e0:	07d9      	lsls	r1, r3, #31
 801f0e2:	d405      	bmi.n	801f0f0 <_vfiprintf_r+0x220>
 801f0e4:	89ab      	ldrh	r3, [r5, #12]
 801f0e6:	059a      	lsls	r2, r3, #22
 801f0e8:	d402      	bmi.n	801f0f0 <_vfiprintf_r+0x220>
 801f0ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f0ec:	f7ff fd10 	bl	801eb10 <__retarget_lock_release_recursive>
 801f0f0:	89ab      	ldrh	r3, [r5, #12]
 801f0f2:	065b      	lsls	r3, r3, #25
 801f0f4:	f53f af12 	bmi.w	801ef1c <_vfiprintf_r+0x4c>
 801f0f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f0fa:	e711      	b.n	801ef20 <_vfiprintf_r+0x50>
 801f0fc:	ab03      	add	r3, sp, #12
 801f0fe:	9300      	str	r3, [sp, #0]
 801f100:	462a      	mov	r2, r5
 801f102:	4b09      	ldr	r3, [pc, #36]	; (801f128 <_vfiprintf_r+0x258>)
 801f104:	a904      	add	r1, sp, #16
 801f106:	4630      	mov	r0, r6
 801f108:	f000 f880 	bl	801f20c <_printf_i>
 801f10c:	e7e4      	b.n	801f0d8 <_vfiprintf_r+0x208>
 801f10e:	bf00      	nop
 801f110:	08022fcc 	.word	0x08022fcc
 801f114:	08022fec 	.word	0x08022fec
 801f118:	08022fac 	.word	0x08022fac
 801f11c:	0802301a 	.word	0x0802301a
 801f120:	08023024 	.word	0x08023024
 801f124:	00000000 	.word	0x00000000
 801f128:	0801eeab 	.word	0x0801eeab
 801f12c:	08023020 	.word	0x08023020

0801f130 <_printf_common>:
 801f130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f134:	4616      	mov	r6, r2
 801f136:	4699      	mov	r9, r3
 801f138:	688a      	ldr	r2, [r1, #8]
 801f13a:	690b      	ldr	r3, [r1, #16]
 801f13c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f140:	4293      	cmp	r3, r2
 801f142:	bfb8      	it	lt
 801f144:	4613      	movlt	r3, r2
 801f146:	6033      	str	r3, [r6, #0]
 801f148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f14c:	4607      	mov	r7, r0
 801f14e:	460c      	mov	r4, r1
 801f150:	b10a      	cbz	r2, 801f156 <_printf_common+0x26>
 801f152:	3301      	adds	r3, #1
 801f154:	6033      	str	r3, [r6, #0]
 801f156:	6823      	ldr	r3, [r4, #0]
 801f158:	0699      	lsls	r1, r3, #26
 801f15a:	bf42      	ittt	mi
 801f15c:	6833      	ldrmi	r3, [r6, #0]
 801f15e:	3302      	addmi	r3, #2
 801f160:	6033      	strmi	r3, [r6, #0]
 801f162:	6825      	ldr	r5, [r4, #0]
 801f164:	f015 0506 	ands.w	r5, r5, #6
 801f168:	d106      	bne.n	801f178 <_printf_common+0x48>
 801f16a:	f104 0a19 	add.w	sl, r4, #25
 801f16e:	68e3      	ldr	r3, [r4, #12]
 801f170:	6832      	ldr	r2, [r6, #0]
 801f172:	1a9b      	subs	r3, r3, r2
 801f174:	42ab      	cmp	r3, r5
 801f176:	dc26      	bgt.n	801f1c6 <_printf_common+0x96>
 801f178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f17c:	1e13      	subs	r3, r2, #0
 801f17e:	6822      	ldr	r2, [r4, #0]
 801f180:	bf18      	it	ne
 801f182:	2301      	movne	r3, #1
 801f184:	0692      	lsls	r2, r2, #26
 801f186:	d42b      	bmi.n	801f1e0 <_printf_common+0xb0>
 801f188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f18c:	4649      	mov	r1, r9
 801f18e:	4638      	mov	r0, r7
 801f190:	47c0      	blx	r8
 801f192:	3001      	adds	r0, #1
 801f194:	d01e      	beq.n	801f1d4 <_printf_common+0xa4>
 801f196:	6823      	ldr	r3, [r4, #0]
 801f198:	68e5      	ldr	r5, [r4, #12]
 801f19a:	6832      	ldr	r2, [r6, #0]
 801f19c:	f003 0306 	and.w	r3, r3, #6
 801f1a0:	2b04      	cmp	r3, #4
 801f1a2:	bf08      	it	eq
 801f1a4:	1aad      	subeq	r5, r5, r2
 801f1a6:	68a3      	ldr	r3, [r4, #8]
 801f1a8:	6922      	ldr	r2, [r4, #16]
 801f1aa:	bf0c      	ite	eq
 801f1ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f1b0:	2500      	movne	r5, #0
 801f1b2:	4293      	cmp	r3, r2
 801f1b4:	bfc4      	itt	gt
 801f1b6:	1a9b      	subgt	r3, r3, r2
 801f1b8:	18ed      	addgt	r5, r5, r3
 801f1ba:	2600      	movs	r6, #0
 801f1bc:	341a      	adds	r4, #26
 801f1be:	42b5      	cmp	r5, r6
 801f1c0:	d11a      	bne.n	801f1f8 <_printf_common+0xc8>
 801f1c2:	2000      	movs	r0, #0
 801f1c4:	e008      	b.n	801f1d8 <_printf_common+0xa8>
 801f1c6:	2301      	movs	r3, #1
 801f1c8:	4652      	mov	r2, sl
 801f1ca:	4649      	mov	r1, r9
 801f1cc:	4638      	mov	r0, r7
 801f1ce:	47c0      	blx	r8
 801f1d0:	3001      	adds	r0, #1
 801f1d2:	d103      	bne.n	801f1dc <_printf_common+0xac>
 801f1d4:	f04f 30ff 	mov.w	r0, #4294967295
 801f1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1dc:	3501      	adds	r5, #1
 801f1de:	e7c6      	b.n	801f16e <_printf_common+0x3e>
 801f1e0:	18e1      	adds	r1, r4, r3
 801f1e2:	1c5a      	adds	r2, r3, #1
 801f1e4:	2030      	movs	r0, #48	; 0x30
 801f1e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f1ea:	4422      	add	r2, r4
 801f1ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f1f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f1f4:	3302      	adds	r3, #2
 801f1f6:	e7c7      	b.n	801f188 <_printf_common+0x58>
 801f1f8:	2301      	movs	r3, #1
 801f1fa:	4622      	mov	r2, r4
 801f1fc:	4649      	mov	r1, r9
 801f1fe:	4638      	mov	r0, r7
 801f200:	47c0      	blx	r8
 801f202:	3001      	adds	r0, #1
 801f204:	d0e6      	beq.n	801f1d4 <_printf_common+0xa4>
 801f206:	3601      	adds	r6, #1
 801f208:	e7d9      	b.n	801f1be <_printf_common+0x8e>
	...

0801f20c <_printf_i>:
 801f20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f210:	7e0f      	ldrb	r7, [r1, #24]
 801f212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f214:	2f78      	cmp	r7, #120	; 0x78
 801f216:	4691      	mov	r9, r2
 801f218:	4680      	mov	r8, r0
 801f21a:	460c      	mov	r4, r1
 801f21c:	469a      	mov	sl, r3
 801f21e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f222:	d807      	bhi.n	801f234 <_printf_i+0x28>
 801f224:	2f62      	cmp	r7, #98	; 0x62
 801f226:	d80a      	bhi.n	801f23e <_printf_i+0x32>
 801f228:	2f00      	cmp	r7, #0
 801f22a:	f000 80d8 	beq.w	801f3de <_printf_i+0x1d2>
 801f22e:	2f58      	cmp	r7, #88	; 0x58
 801f230:	f000 80a3 	beq.w	801f37a <_printf_i+0x16e>
 801f234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f23c:	e03a      	b.n	801f2b4 <_printf_i+0xa8>
 801f23e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f242:	2b15      	cmp	r3, #21
 801f244:	d8f6      	bhi.n	801f234 <_printf_i+0x28>
 801f246:	a101      	add	r1, pc, #4	; (adr r1, 801f24c <_printf_i+0x40>)
 801f248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f24c:	0801f2a5 	.word	0x0801f2a5
 801f250:	0801f2b9 	.word	0x0801f2b9
 801f254:	0801f235 	.word	0x0801f235
 801f258:	0801f235 	.word	0x0801f235
 801f25c:	0801f235 	.word	0x0801f235
 801f260:	0801f235 	.word	0x0801f235
 801f264:	0801f2b9 	.word	0x0801f2b9
 801f268:	0801f235 	.word	0x0801f235
 801f26c:	0801f235 	.word	0x0801f235
 801f270:	0801f235 	.word	0x0801f235
 801f274:	0801f235 	.word	0x0801f235
 801f278:	0801f3c5 	.word	0x0801f3c5
 801f27c:	0801f2e9 	.word	0x0801f2e9
 801f280:	0801f3a7 	.word	0x0801f3a7
 801f284:	0801f235 	.word	0x0801f235
 801f288:	0801f235 	.word	0x0801f235
 801f28c:	0801f3e7 	.word	0x0801f3e7
 801f290:	0801f235 	.word	0x0801f235
 801f294:	0801f2e9 	.word	0x0801f2e9
 801f298:	0801f235 	.word	0x0801f235
 801f29c:	0801f235 	.word	0x0801f235
 801f2a0:	0801f3af 	.word	0x0801f3af
 801f2a4:	682b      	ldr	r3, [r5, #0]
 801f2a6:	1d1a      	adds	r2, r3, #4
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	602a      	str	r2, [r5, #0]
 801f2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f2b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f2b4:	2301      	movs	r3, #1
 801f2b6:	e0a3      	b.n	801f400 <_printf_i+0x1f4>
 801f2b8:	6820      	ldr	r0, [r4, #0]
 801f2ba:	6829      	ldr	r1, [r5, #0]
 801f2bc:	0606      	lsls	r6, r0, #24
 801f2be:	f101 0304 	add.w	r3, r1, #4
 801f2c2:	d50a      	bpl.n	801f2da <_printf_i+0xce>
 801f2c4:	680e      	ldr	r6, [r1, #0]
 801f2c6:	602b      	str	r3, [r5, #0]
 801f2c8:	2e00      	cmp	r6, #0
 801f2ca:	da03      	bge.n	801f2d4 <_printf_i+0xc8>
 801f2cc:	232d      	movs	r3, #45	; 0x2d
 801f2ce:	4276      	negs	r6, r6
 801f2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f2d4:	485e      	ldr	r0, [pc, #376]	; (801f450 <_printf_i+0x244>)
 801f2d6:	230a      	movs	r3, #10
 801f2d8:	e019      	b.n	801f30e <_printf_i+0x102>
 801f2da:	680e      	ldr	r6, [r1, #0]
 801f2dc:	602b      	str	r3, [r5, #0]
 801f2de:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f2e2:	bf18      	it	ne
 801f2e4:	b236      	sxthne	r6, r6
 801f2e6:	e7ef      	b.n	801f2c8 <_printf_i+0xbc>
 801f2e8:	682b      	ldr	r3, [r5, #0]
 801f2ea:	6820      	ldr	r0, [r4, #0]
 801f2ec:	1d19      	adds	r1, r3, #4
 801f2ee:	6029      	str	r1, [r5, #0]
 801f2f0:	0601      	lsls	r1, r0, #24
 801f2f2:	d501      	bpl.n	801f2f8 <_printf_i+0xec>
 801f2f4:	681e      	ldr	r6, [r3, #0]
 801f2f6:	e002      	b.n	801f2fe <_printf_i+0xf2>
 801f2f8:	0646      	lsls	r6, r0, #25
 801f2fa:	d5fb      	bpl.n	801f2f4 <_printf_i+0xe8>
 801f2fc:	881e      	ldrh	r6, [r3, #0]
 801f2fe:	4854      	ldr	r0, [pc, #336]	; (801f450 <_printf_i+0x244>)
 801f300:	2f6f      	cmp	r7, #111	; 0x6f
 801f302:	bf0c      	ite	eq
 801f304:	2308      	moveq	r3, #8
 801f306:	230a      	movne	r3, #10
 801f308:	2100      	movs	r1, #0
 801f30a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f30e:	6865      	ldr	r5, [r4, #4]
 801f310:	60a5      	str	r5, [r4, #8]
 801f312:	2d00      	cmp	r5, #0
 801f314:	bfa2      	ittt	ge
 801f316:	6821      	ldrge	r1, [r4, #0]
 801f318:	f021 0104 	bicge.w	r1, r1, #4
 801f31c:	6021      	strge	r1, [r4, #0]
 801f31e:	b90e      	cbnz	r6, 801f324 <_printf_i+0x118>
 801f320:	2d00      	cmp	r5, #0
 801f322:	d04d      	beq.n	801f3c0 <_printf_i+0x1b4>
 801f324:	4615      	mov	r5, r2
 801f326:	fbb6 f1f3 	udiv	r1, r6, r3
 801f32a:	fb03 6711 	mls	r7, r3, r1, r6
 801f32e:	5dc7      	ldrb	r7, [r0, r7]
 801f330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f334:	4637      	mov	r7, r6
 801f336:	42bb      	cmp	r3, r7
 801f338:	460e      	mov	r6, r1
 801f33a:	d9f4      	bls.n	801f326 <_printf_i+0x11a>
 801f33c:	2b08      	cmp	r3, #8
 801f33e:	d10b      	bne.n	801f358 <_printf_i+0x14c>
 801f340:	6823      	ldr	r3, [r4, #0]
 801f342:	07de      	lsls	r6, r3, #31
 801f344:	d508      	bpl.n	801f358 <_printf_i+0x14c>
 801f346:	6923      	ldr	r3, [r4, #16]
 801f348:	6861      	ldr	r1, [r4, #4]
 801f34a:	4299      	cmp	r1, r3
 801f34c:	bfde      	ittt	le
 801f34e:	2330      	movle	r3, #48	; 0x30
 801f350:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f354:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f358:	1b52      	subs	r2, r2, r5
 801f35a:	6122      	str	r2, [r4, #16]
 801f35c:	f8cd a000 	str.w	sl, [sp]
 801f360:	464b      	mov	r3, r9
 801f362:	aa03      	add	r2, sp, #12
 801f364:	4621      	mov	r1, r4
 801f366:	4640      	mov	r0, r8
 801f368:	f7ff fee2 	bl	801f130 <_printf_common>
 801f36c:	3001      	adds	r0, #1
 801f36e:	d14c      	bne.n	801f40a <_printf_i+0x1fe>
 801f370:	f04f 30ff 	mov.w	r0, #4294967295
 801f374:	b004      	add	sp, #16
 801f376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f37a:	4835      	ldr	r0, [pc, #212]	; (801f450 <_printf_i+0x244>)
 801f37c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f380:	6829      	ldr	r1, [r5, #0]
 801f382:	6823      	ldr	r3, [r4, #0]
 801f384:	f851 6b04 	ldr.w	r6, [r1], #4
 801f388:	6029      	str	r1, [r5, #0]
 801f38a:	061d      	lsls	r5, r3, #24
 801f38c:	d514      	bpl.n	801f3b8 <_printf_i+0x1ac>
 801f38e:	07df      	lsls	r7, r3, #31
 801f390:	bf44      	itt	mi
 801f392:	f043 0320 	orrmi.w	r3, r3, #32
 801f396:	6023      	strmi	r3, [r4, #0]
 801f398:	b91e      	cbnz	r6, 801f3a2 <_printf_i+0x196>
 801f39a:	6823      	ldr	r3, [r4, #0]
 801f39c:	f023 0320 	bic.w	r3, r3, #32
 801f3a0:	6023      	str	r3, [r4, #0]
 801f3a2:	2310      	movs	r3, #16
 801f3a4:	e7b0      	b.n	801f308 <_printf_i+0xfc>
 801f3a6:	6823      	ldr	r3, [r4, #0]
 801f3a8:	f043 0320 	orr.w	r3, r3, #32
 801f3ac:	6023      	str	r3, [r4, #0]
 801f3ae:	2378      	movs	r3, #120	; 0x78
 801f3b0:	4828      	ldr	r0, [pc, #160]	; (801f454 <_printf_i+0x248>)
 801f3b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f3b6:	e7e3      	b.n	801f380 <_printf_i+0x174>
 801f3b8:	0659      	lsls	r1, r3, #25
 801f3ba:	bf48      	it	mi
 801f3bc:	b2b6      	uxthmi	r6, r6
 801f3be:	e7e6      	b.n	801f38e <_printf_i+0x182>
 801f3c0:	4615      	mov	r5, r2
 801f3c2:	e7bb      	b.n	801f33c <_printf_i+0x130>
 801f3c4:	682b      	ldr	r3, [r5, #0]
 801f3c6:	6826      	ldr	r6, [r4, #0]
 801f3c8:	6961      	ldr	r1, [r4, #20]
 801f3ca:	1d18      	adds	r0, r3, #4
 801f3cc:	6028      	str	r0, [r5, #0]
 801f3ce:	0635      	lsls	r5, r6, #24
 801f3d0:	681b      	ldr	r3, [r3, #0]
 801f3d2:	d501      	bpl.n	801f3d8 <_printf_i+0x1cc>
 801f3d4:	6019      	str	r1, [r3, #0]
 801f3d6:	e002      	b.n	801f3de <_printf_i+0x1d2>
 801f3d8:	0670      	lsls	r0, r6, #25
 801f3da:	d5fb      	bpl.n	801f3d4 <_printf_i+0x1c8>
 801f3dc:	8019      	strh	r1, [r3, #0]
 801f3de:	2300      	movs	r3, #0
 801f3e0:	6123      	str	r3, [r4, #16]
 801f3e2:	4615      	mov	r5, r2
 801f3e4:	e7ba      	b.n	801f35c <_printf_i+0x150>
 801f3e6:	682b      	ldr	r3, [r5, #0]
 801f3e8:	1d1a      	adds	r2, r3, #4
 801f3ea:	602a      	str	r2, [r5, #0]
 801f3ec:	681d      	ldr	r5, [r3, #0]
 801f3ee:	6862      	ldr	r2, [r4, #4]
 801f3f0:	2100      	movs	r1, #0
 801f3f2:	4628      	mov	r0, r5
 801f3f4:	f7e0 feec 	bl	80001d0 <memchr>
 801f3f8:	b108      	cbz	r0, 801f3fe <_printf_i+0x1f2>
 801f3fa:	1b40      	subs	r0, r0, r5
 801f3fc:	6060      	str	r0, [r4, #4]
 801f3fe:	6863      	ldr	r3, [r4, #4]
 801f400:	6123      	str	r3, [r4, #16]
 801f402:	2300      	movs	r3, #0
 801f404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f408:	e7a8      	b.n	801f35c <_printf_i+0x150>
 801f40a:	6923      	ldr	r3, [r4, #16]
 801f40c:	462a      	mov	r2, r5
 801f40e:	4649      	mov	r1, r9
 801f410:	4640      	mov	r0, r8
 801f412:	47d0      	blx	sl
 801f414:	3001      	adds	r0, #1
 801f416:	d0ab      	beq.n	801f370 <_printf_i+0x164>
 801f418:	6823      	ldr	r3, [r4, #0]
 801f41a:	079b      	lsls	r3, r3, #30
 801f41c:	d413      	bmi.n	801f446 <_printf_i+0x23a>
 801f41e:	68e0      	ldr	r0, [r4, #12]
 801f420:	9b03      	ldr	r3, [sp, #12]
 801f422:	4298      	cmp	r0, r3
 801f424:	bfb8      	it	lt
 801f426:	4618      	movlt	r0, r3
 801f428:	e7a4      	b.n	801f374 <_printf_i+0x168>
 801f42a:	2301      	movs	r3, #1
 801f42c:	4632      	mov	r2, r6
 801f42e:	4649      	mov	r1, r9
 801f430:	4640      	mov	r0, r8
 801f432:	47d0      	blx	sl
 801f434:	3001      	adds	r0, #1
 801f436:	d09b      	beq.n	801f370 <_printf_i+0x164>
 801f438:	3501      	adds	r5, #1
 801f43a:	68e3      	ldr	r3, [r4, #12]
 801f43c:	9903      	ldr	r1, [sp, #12]
 801f43e:	1a5b      	subs	r3, r3, r1
 801f440:	42ab      	cmp	r3, r5
 801f442:	dcf2      	bgt.n	801f42a <_printf_i+0x21e>
 801f444:	e7eb      	b.n	801f41e <_printf_i+0x212>
 801f446:	2500      	movs	r5, #0
 801f448:	f104 0619 	add.w	r6, r4, #25
 801f44c:	e7f5      	b.n	801f43a <_printf_i+0x22e>
 801f44e:	bf00      	nop
 801f450:	0802302b 	.word	0x0802302b
 801f454:	0802303c 	.word	0x0802303c

0801f458 <_putc_r>:
 801f458:	b570      	push	{r4, r5, r6, lr}
 801f45a:	460d      	mov	r5, r1
 801f45c:	4614      	mov	r4, r2
 801f45e:	4606      	mov	r6, r0
 801f460:	b118      	cbz	r0, 801f46a <_putc_r+0x12>
 801f462:	6983      	ldr	r3, [r0, #24]
 801f464:	b90b      	cbnz	r3, 801f46a <_putc_r+0x12>
 801f466:	f7ff f95d 	bl	801e724 <__sinit>
 801f46a:	4b1c      	ldr	r3, [pc, #112]	; (801f4dc <_putc_r+0x84>)
 801f46c:	429c      	cmp	r4, r3
 801f46e:	d124      	bne.n	801f4ba <_putc_r+0x62>
 801f470:	6874      	ldr	r4, [r6, #4]
 801f472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f474:	07d8      	lsls	r0, r3, #31
 801f476:	d405      	bmi.n	801f484 <_putc_r+0x2c>
 801f478:	89a3      	ldrh	r3, [r4, #12]
 801f47a:	0599      	lsls	r1, r3, #22
 801f47c:	d402      	bmi.n	801f484 <_putc_r+0x2c>
 801f47e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f480:	f7ff fb45 	bl	801eb0e <__retarget_lock_acquire_recursive>
 801f484:	68a3      	ldr	r3, [r4, #8]
 801f486:	3b01      	subs	r3, #1
 801f488:	2b00      	cmp	r3, #0
 801f48a:	60a3      	str	r3, [r4, #8]
 801f48c:	da05      	bge.n	801f49a <_putc_r+0x42>
 801f48e:	69a2      	ldr	r2, [r4, #24]
 801f490:	4293      	cmp	r3, r2
 801f492:	db1c      	blt.n	801f4ce <_putc_r+0x76>
 801f494:	b2eb      	uxtb	r3, r5
 801f496:	2b0a      	cmp	r3, #10
 801f498:	d019      	beq.n	801f4ce <_putc_r+0x76>
 801f49a:	6823      	ldr	r3, [r4, #0]
 801f49c:	1c5a      	adds	r2, r3, #1
 801f49e:	6022      	str	r2, [r4, #0]
 801f4a0:	701d      	strb	r5, [r3, #0]
 801f4a2:	b2ed      	uxtb	r5, r5
 801f4a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f4a6:	07da      	lsls	r2, r3, #31
 801f4a8:	d405      	bmi.n	801f4b6 <_putc_r+0x5e>
 801f4aa:	89a3      	ldrh	r3, [r4, #12]
 801f4ac:	059b      	lsls	r3, r3, #22
 801f4ae:	d402      	bmi.n	801f4b6 <_putc_r+0x5e>
 801f4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f4b2:	f7ff fb2d 	bl	801eb10 <__retarget_lock_release_recursive>
 801f4b6:	4628      	mov	r0, r5
 801f4b8:	bd70      	pop	{r4, r5, r6, pc}
 801f4ba:	4b09      	ldr	r3, [pc, #36]	; (801f4e0 <_putc_r+0x88>)
 801f4bc:	429c      	cmp	r4, r3
 801f4be:	d101      	bne.n	801f4c4 <_putc_r+0x6c>
 801f4c0:	68b4      	ldr	r4, [r6, #8]
 801f4c2:	e7d6      	b.n	801f472 <_putc_r+0x1a>
 801f4c4:	4b07      	ldr	r3, [pc, #28]	; (801f4e4 <_putc_r+0x8c>)
 801f4c6:	429c      	cmp	r4, r3
 801f4c8:	bf08      	it	eq
 801f4ca:	68f4      	ldreq	r4, [r6, #12]
 801f4cc:	e7d1      	b.n	801f472 <_putc_r+0x1a>
 801f4ce:	4629      	mov	r1, r5
 801f4d0:	4622      	mov	r2, r4
 801f4d2:	4630      	mov	r0, r6
 801f4d4:	f001 f82c 	bl	8020530 <__swbuf_r>
 801f4d8:	4605      	mov	r5, r0
 801f4da:	e7e3      	b.n	801f4a4 <_putc_r+0x4c>
 801f4dc:	08022fcc 	.word	0x08022fcc
 801f4e0:	08022fec 	.word	0x08022fec
 801f4e4:	08022fac 	.word	0x08022fac

0801f4e8 <cleanup_glue>:
 801f4e8:	b538      	push	{r3, r4, r5, lr}
 801f4ea:	460c      	mov	r4, r1
 801f4ec:	6809      	ldr	r1, [r1, #0]
 801f4ee:	4605      	mov	r5, r0
 801f4f0:	b109      	cbz	r1, 801f4f6 <cleanup_glue+0xe>
 801f4f2:	f7ff fff9 	bl	801f4e8 <cleanup_glue>
 801f4f6:	4621      	mov	r1, r4
 801f4f8:	4628      	mov	r0, r5
 801f4fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f4fe:	f7ff bbdd 	b.w	801ecbc <_free_r>
	...

0801f504 <_reclaim_reent>:
 801f504:	4b2c      	ldr	r3, [pc, #176]	; (801f5b8 <_reclaim_reent+0xb4>)
 801f506:	681b      	ldr	r3, [r3, #0]
 801f508:	4283      	cmp	r3, r0
 801f50a:	b570      	push	{r4, r5, r6, lr}
 801f50c:	4604      	mov	r4, r0
 801f50e:	d051      	beq.n	801f5b4 <_reclaim_reent+0xb0>
 801f510:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801f512:	b143      	cbz	r3, 801f526 <_reclaim_reent+0x22>
 801f514:	68db      	ldr	r3, [r3, #12]
 801f516:	2b00      	cmp	r3, #0
 801f518:	d14a      	bne.n	801f5b0 <_reclaim_reent+0xac>
 801f51a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f51c:	6819      	ldr	r1, [r3, #0]
 801f51e:	b111      	cbz	r1, 801f526 <_reclaim_reent+0x22>
 801f520:	4620      	mov	r0, r4
 801f522:	f7ff fbcb 	bl	801ecbc <_free_r>
 801f526:	6961      	ldr	r1, [r4, #20]
 801f528:	b111      	cbz	r1, 801f530 <_reclaim_reent+0x2c>
 801f52a:	4620      	mov	r0, r4
 801f52c:	f7ff fbc6 	bl	801ecbc <_free_r>
 801f530:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f532:	b111      	cbz	r1, 801f53a <_reclaim_reent+0x36>
 801f534:	4620      	mov	r0, r4
 801f536:	f7ff fbc1 	bl	801ecbc <_free_r>
 801f53a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f53c:	b111      	cbz	r1, 801f544 <_reclaim_reent+0x40>
 801f53e:	4620      	mov	r0, r4
 801f540:	f7ff fbbc 	bl	801ecbc <_free_r>
 801f544:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f546:	b111      	cbz	r1, 801f54e <_reclaim_reent+0x4a>
 801f548:	4620      	mov	r0, r4
 801f54a:	f7ff fbb7 	bl	801ecbc <_free_r>
 801f54e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f550:	b111      	cbz	r1, 801f558 <_reclaim_reent+0x54>
 801f552:	4620      	mov	r0, r4
 801f554:	f7ff fbb2 	bl	801ecbc <_free_r>
 801f558:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f55a:	b111      	cbz	r1, 801f562 <_reclaim_reent+0x5e>
 801f55c:	4620      	mov	r0, r4
 801f55e:	f7ff fbad 	bl	801ecbc <_free_r>
 801f562:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f564:	b111      	cbz	r1, 801f56c <_reclaim_reent+0x68>
 801f566:	4620      	mov	r0, r4
 801f568:	f7ff fba8 	bl	801ecbc <_free_r>
 801f56c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f56e:	b111      	cbz	r1, 801f576 <_reclaim_reent+0x72>
 801f570:	4620      	mov	r0, r4
 801f572:	f7ff fba3 	bl	801ecbc <_free_r>
 801f576:	69a3      	ldr	r3, [r4, #24]
 801f578:	b1e3      	cbz	r3, 801f5b4 <_reclaim_reent+0xb0>
 801f57a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f57c:	4620      	mov	r0, r4
 801f57e:	4798      	blx	r3
 801f580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f582:	b1b9      	cbz	r1, 801f5b4 <_reclaim_reent+0xb0>
 801f584:	4620      	mov	r0, r4
 801f586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f58a:	f7ff bfad 	b.w	801f4e8 <cleanup_glue>
 801f58e:	5949      	ldr	r1, [r1, r5]
 801f590:	b941      	cbnz	r1, 801f5a4 <_reclaim_reent+0xa0>
 801f592:	3504      	adds	r5, #4
 801f594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f596:	2d80      	cmp	r5, #128	; 0x80
 801f598:	68d9      	ldr	r1, [r3, #12]
 801f59a:	d1f8      	bne.n	801f58e <_reclaim_reent+0x8a>
 801f59c:	4620      	mov	r0, r4
 801f59e:	f7ff fb8d 	bl	801ecbc <_free_r>
 801f5a2:	e7ba      	b.n	801f51a <_reclaim_reent+0x16>
 801f5a4:	680e      	ldr	r6, [r1, #0]
 801f5a6:	4620      	mov	r0, r4
 801f5a8:	f7ff fb88 	bl	801ecbc <_free_r>
 801f5ac:	4631      	mov	r1, r6
 801f5ae:	e7ef      	b.n	801f590 <_reclaim_reent+0x8c>
 801f5b0:	2500      	movs	r5, #0
 801f5b2:	e7ef      	b.n	801f594 <_reclaim_reent+0x90>
 801f5b4:	bd70      	pop	{r4, r5, r6, pc}
 801f5b6:	bf00      	nop
 801f5b8:	20000330 	.word	0x20000330

0801f5bc <_sbrk_r>:
 801f5bc:	b538      	push	{r3, r4, r5, lr}
 801f5be:	4d06      	ldr	r5, [pc, #24]	; (801f5d8 <_sbrk_r+0x1c>)
 801f5c0:	2300      	movs	r3, #0
 801f5c2:	4604      	mov	r4, r0
 801f5c4:	4608      	mov	r0, r1
 801f5c6:	602b      	str	r3, [r5, #0]
 801f5c8:	f7e3 fda8 	bl	800311c <_sbrk>
 801f5cc:	1c43      	adds	r3, r0, #1
 801f5ce:	d102      	bne.n	801f5d6 <_sbrk_r+0x1a>
 801f5d0:	682b      	ldr	r3, [r5, #0]
 801f5d2:	b103      	cbz	r3, 801f5d6 <_sbrk_r+0x1a>
 801f5d4:	6023      	str	r3, [r4, #0]
 801f5d6:	bd38      	pop	{r3, r4, r5, pc}
 801f5d8:	20010378 	.word	0x20010378

0801f5dc <_raise_r>:
 801f5dc:	291f      	cmp	r1, #31
 801f5de:	b538      	push	{r3, r4, r5, lr}
 801f5e0:	4604      	mov	r4, r0
 801f5e2:	460d      	mov	r5, r1
 801f5e4:	d904      	bls.n	801f5f0 <_raise_r+0x14>
 801f5e6:	2316      	movs	r3, #22
 801f5e8:	6003      	str	r3, [r0, #0]
 801f5ea:	f04f 30ff 	mov.w	r0, #4294967295
 801f5ee:	bd38      	pop	{r3, r4, r5, pc}
 801f5f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f5f2:	b112      	cbz	r2, 801f5fa <_raise_r+0x1e>
 801f5f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f5f8:	b94b      	cbnz	r3, 801f60e <_raise_r+0x32>
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	f000 f830 	bl	801f660 <_getpid_r>
 801f600:	462a      	mov	r2, r5
 801f602:	4601      	mov	r1, r0
 801f604:	4620      	mov	r0, r4
 801f606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f60a:	f000 b817 	b.w	801f63c <_kill_r>
 801f60e:	2b01      	cmp	r3, #1
 801f610:	d00a      	beq.n	801f628 <_raise_r+0x4c>
 801f612:	1c59      	adds	r1, r3, #1
 801f614:	d103      	bne.n	801f61e <_raise_r+0x42>
 801f616:	2316      	movs	r3, #22
 801f618:	6003      	str	r3, [r0, #0]
 801f61a:	2001      	movs	r0, #1
 801f61c:	e7e7      	b.n	801f5ee <_raise_r+0x12>
 801f61e:	2400      	movs	r4, #0
 801f620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f624:	4628      	mov	r0, r5
 801f626:	4798      	blx	r3
 801f628:	2000      	movs	r0, #0
 801f62a:	e7e0      	b.n	801f5ee <_raise_r+0x12>

0801f62c <raise>:
 801f62c:	4b02      	ldr	r3, [pc, #8]	; (801f638 <raise+0xc>)
 801f62e:	4601      	mov	r1, r0
 801f630:	6818      	ldr	r0, [r3, #0]
 801f632:	f7ff bfd3 	b.w	801f5dc <_raise_r>
 801f636:	bf00      	nop
 801f638:	20000330 	.word	0x20000330

0801f63c <_kill_r>:
 801f63c:	b538      	push	{r3, r4, r5, lr}
 801f63e:	4d07      	ldr	r5, [pc, #28]	; (801f65c <_kill_r+0x20>)
 801f640:	2300      	movs	r3, #0
 801f642:	4604      	mov	r4, r0
 801f644:	4608      	mov	r0, r1
 801f646:	4611      	mov	r1, r2
 801f648:	602b      	str	r3, [r5, #0]
 801f64a:	f7e3 fcdf 	bl	800300c <_kill>
 801f64e:	1c43      	adds	r3, r0, #1
 801f650:	d102      	bne.n	801f658 <_kill_r+0x1c>
 801f652:	682b      	ldr	r3, [r5, #0]
 801f654:	b103      	cbz	r3, 801f658 <_kill_r+0x1c>
 801f656:	6023      	str	r3, [r4, #0]
 801f658:	bd38      	pop	{r3, r4, r5, pc}
 801f65a:	bf00      	nop
 801f65c:	20010378 	.word	0x20010378

0801f660 <_getpid_r>:
 801f660:	f7e3 bccc 	b.w	8002ffc <_getpid>

0801f664 <sniprintf>:
 801f664:	b40c      	push	{r2, r3}
 801f666:	b530      	push	{r4, r5, lr}
 801f668:	4b17      	ldr	r3, [pc, #92]	; (801f6c8 <sniprintf+0x64>)
 801f66a:	1e0c      	subs	r4, r1, #0
 801f66c:	681d      	ldr	r5, [r3, #0]
 801f66e:	b09d      	sub	sp, #116	; 0x74
 801f670:	da08      	bge.n	801f684 <sniprintf+0x20>
 801f672:	238b      	movs	r3, #139	; 0x8b
 801f674:	602b      	str	r3, [r5, #0]
 801f676:	f04f 30ff 	mov.w	r0, #4294967295
 801f67a:	b01d      	add	sp, #116	; 0x74
 801f67c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f680:	b002      	add	sp, #8
 801f682:	4770      	bx	lr
 801f684:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f688:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f68c:	bf14      	ite	ne
 801f68e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f692:	4623      	moveq	r3, r4
 801f694:	9304      	str	r3, [sp, #16]
 801f696:	9307      	str	r3, [sp, #28]
 801f698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f69c:	9002      	str	r0, [sp, #8]
 801f69e:	9006      	str	r0, [sp, #24]
 801f6a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f6a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f6a6:	ab21      	add	r3, sp, #132	; 0x84
 801f6a8:	a902      	add	r1, sp, #8
 801f6aa:	4628      	mov	r0, r5
 801f6ac:	9301      	str	r3, [sp, #4]
 801f6ae:	f002 f95b 	bl	8021968 <_svfiprintf_r>
 801f6b2:	1c43      	adds	r3, r0, #1
 801f6b4:	bfbc      	itt	lt
 801f6b6:	238b      	movlt	r3, #139	; 0x8b
 801f6b8:	602b      	strlt	r3, [r5, #0]
 801f6ba:	2c00      	cmp	r4, #0
 801f6bc:	d0dd      	beq.n	801f67a <sniprintf+0x16>
 801f6be:	9b02      	ldr	r3, [sp, #8]
 801f6c0:	2200      	movs	r2, #0
 801f6c2:	701a      	strb	r2, [r3, #0]
 801f6c4:	e7d9      	b.n	801f67a <sniprintf+0x16>
 801f6c6:	bf00      	nop
 801f6c8:	20000330 	.word	0x20000330

0801f6cc <__sread>:
 801f6cc:	b510      	push	{r4, lr}
 801f6ce:	460c      	mov	r4, r1
 801f6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6d4:	f002 fa48 	bl	8021b68 <_read_r>
 801f6d8:	2800      	cmp	r0, #0
 801f6da:	bfab      	itete	ge
 801f6dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f6de:	89a3      	ldrhlt	r3, [r4, #12]
 801f6e0:	181b      	addge	r3, r3, r0
 801f6e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f6e6:	bfac      	ite	ge
 801f6e8:	6563      	strge	r3, [r4, #84]	; 0x54
 801f6ea:	81a3      	strhlt	r3, [r4, #12]
 801f6ec:	bd10      	pop	{r4, pc}

0801f6ee <__swrite>:
 801f6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6f2:	461f      	mov	r7, r3
 801f6f4:	898b      	ldrh	r3, [r1, #12]
 801f6f6:	05db      	lsls	r3, r3, #23
 801f6f8:	4605      	mov	r5, r0
 801f6fa:	460c      	mov	r4, r1
 801f6fc:	4616      	mov	r6, r2
 801f6fe:	d505      	bpl.n	801f70c <__swrite+0x1e>
 801f700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f704:	2302      	movs	r3, #2
 801f706:	2200      	movs	r2, #0
 801f708:	f001 fbc4 	bl	8020e94 <_lseek_r>
 801f70c:	89a3      	ldrh	r3, [r4, #12]
 801f70e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f716:	81a3      	strh	r3, [r4, #12]
 801f718:	4632      	mov	r2, r6
 801f71a:	463b      	mov	r3, r7
 801f71c:	4628      	mov	r0, r5
 801f71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f722:	f000 bf65 	b.w	80205f0 <_write_r>

0801f726 <__sseek>:
 801f726:	b510      	push	{r4, lr}
 801f728:	460c      	mov	r4, r1
 801f72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f72e:	f001 fbb1 	bl	8020e94 <_lseek_r>
 801f732:	1c43      	adds	r3, r0, #1
 801f734:	89a3      	ldrh	r3, [r4, #12]
 801f736:	bf15      	itete	ne
 801f738:	6560      	strne	r0, [r4, #84]	; 0x54
 801f73a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f73e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f742:	81a3      	strheq	r3, [r4, #12]
 801f744:	bf18      	it	ne
 801f746:	81a3      	strhne	r3, [r4, #12]
 801f748:	bd10      	pop	{r4, pc}

0801f74a <__sclose>:
 801f74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f74e:	f000 bfed 	b.w	802072c <_close_r>

0801f752 <strchr>:
 801f752:	b2c9      	uxtb	r1, r1
 801f754:	4603      	mov	r3, r0
 801f756:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f75a:	b11a      	cbz	r2, 801f764 <strchr+0x12>
 801f75c:	428a      	cmp	r2, r1
 801f75e:	d1f9      	bne.n	801f754 <strchr+0x2>
 801f760:	4618      	mov	r0, r3
 801f762:	4770      	bx	lr
 801f764:	2900      	cmp	r1, #0
 801f766:	bf18      	it	ne
 801f768:	2300      	movne	r3, #0
 801f76a:	e7f9      	b.n	801f760 <strchr+0xe>

0801f76c <strcoll>:
 801f76c:	f7e0 bd8e 	b.w	800028c <strcmp>

0801f770 <strcpy>:
 801f770:	4603      	mov	r3, r0
 801f772:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f776:	f803 2b01 	strb.w	r2, [r3], #1
 801f77a:	2a00      	cmp	r2, #0
 801f77c:	d1f9      	bne.n	801f772 <strcpy+0x2>
 801f77e:	4770      	bx	lr

0801f780 <strncmp>:
 801f780:	b510      	push	{r4, lr}
 801f782:	b17a      	cbz	r2, 801f7a4 <strncmp+0x24>
 801f784:	4603      	mov	r3, r0
 801f786:	3901      	subs	r1, #1
 801f788:	1884      	adds	r4, r0, r2
 801f78a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f78e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f792:	4290      	cmp	r0, r2
 801f794:	d101      	bne.n	801f79a <strncmp+0x1a>
 801f796:	42a3      	cmp	r3, r4
 801f798:	d101      	bne.n	801f79e <strncmp+0x1e>
 801f79a:	1a80      	subs	r0, r0, r2
 801f79c:	bd10      	pop	{r4, pc}
 801f79e:	2800      	cmp	r0, #0
 801f7a0:	d1f3      	bne.n	801f78a <strncmp+0xa>
 801f7a2:	e7fa      	b.n	801f79a <strncmp+0x1a>
 801f7a4:	4610      	mov	r0, r2
 801f7a6:	e7f9      	b.n	801f79c <strncmp+0x1c>

0801f7a8 <strpbrk>:
 801f7a8:	b570      	push	{r4, r5, r6, lr}
 801f7aa:	7803      	ldrb	r3, [r0, #0]
 801f7ac:	b1a3      	cbz	r3, 801f7d8 <strpbrk+0x30>
 801f7ae:	4603      	mov	r3, r0
 801f7b0:	460c      	mov	r4, r1
 801f7b2:	4618      	mov	r0, r3
 801f7b4:	f813 5b01 	ldrb.w	r5, [r3], #1
 801f7b8:	b14d      	cbz	r5, 801f7ce <strpbrk+0x26>
 801f7ba:	460a      	mov	r2, r1
 801f7bc:	e001      	b.n	801f7c2 <strpbrk+0x1a>
 801f7be:	42ae      	cmp	r6, r5
 801f7c0:	d009      	beq.n	801f7d6 <strpbrk+0x2e>
 801f7c2:	4614      	mov	r4, r2
 801f7c4:	f812 6b01 	ldrb.w	r6, [r2], #1
 801f7c8:	2e00      	cmp	r6, #0
 801f7ca:	d1f8      	bne.n	801f7be <strpbrk+0x16>
 801f7cc:	e7f1      	b.n	801f7b2 <strpbrk+0xa>
 801f7ce:	7823      	ldrb	r3, [r4, #0]
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	bf08      	it	eq
 801f7d4:	2000      	moveq	r0, #0
 801f7d6:	bd70      	pop	{r4, r5, r6, pc}
 801f7d8:	4618      	mov	r0, r3
 801f7da:	e7fc      	b.n	801f7d6 <strpbrk+0x2e>

0801f7dc <strspn>:
 801f7dc:	b570      	push	{r4, r5, r6, lr}
 801f7de:	4603      	mov	r3, r0
 801f7e0:	461e      	mov	r6, r3
 801f7e2:	f813 4b01 	ldrb.w	r4, [r3], #1
 801f7e6:	b13c      	cbz	r4, 801f7f8 <strspn+0x1c>
 801f7e8:	1e4a      	subs	r2, r1, #1
 801f7ea:	e001      	b.n	801f7f0 <strspn+0x14>
 801f7ec:	42a5      	cmp	r5, r4
 801f7ee:	d0f7      	beq.n	801f7e0 <strspn+0x4>
 801f7f0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801f7f4:	2d00      	cmp	r5, #0
 801f7f6:	d1f9      	bne.n	801f7ec <strspn+0x10>
 801f7f8:	1a30      	subs	r0, r6, r0
 801f7fa:	bd70      	pop	{r4, r5, r6, pc}

0801f7fc <sulp>:
 801f7fc:	b570      	push	{r4, r5, r6, lr}
 801f7fe:	4604      	mov	r4, r0
 801f800:	460d      	mov	r5, r1
 801f802:	ec45 4b10 	vmov	d0, r4, r5
 801f806:	4616      	mov	r6, r2
 801f808:	f001 fed4 	bl	80215b4 <__ulp>
 801f80c:	ec51 0b10 	vmov	r0, r1, d0
 801f810:	b17e      	cbz	r6, 801f832 <sulp+0x36>
 801f812:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f816:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f81a:	2b00      	cmp	r3, #0
 801f81c:	dd09      	ble.n	801f832 <sulp+0x36>
 801f81e:	051b      	lsls	r3, r3, #20
 801f820:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801f824:	2400      	movs	r4, #0
 801f826:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801f82a:	4622      	mov	r2, r4
 801f82c:	462b      	mov	r3, r5
 801f82e:	f7e0 fefb 	bl	8000628 <__aeabi_dmul>
 801f832:	bd70      	pop	{r4, r5, r6, pc}
 801f834:	0000      	movs	r0, r0
	...

0801f838 <_strtod_l>:
 801f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f83c:	ed2d 8b02 	vpush	{d8}
 801f840:	b09d      	sub	sp, #116	; 0x74
 801f842:	461f      	mov	r7, r3
 801f844:	2300      	movs	r3, #0
 801f846:	9318      	str	r3, [sp, #96]	; 0x60
 801f848:	4ba2      	ldr	r3, [pc, #648]	; (801fad4 <_strtod_l+0x29c>)
 801f84a:	9213      	str	r2, [sp, #76]	; 0x4c
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	9305      	str	r3, [sp, #20]
 801f850:	4604      	mov	r4, r0
 801f852:	4618      	mov	r0, r3
 801f854:	4688      	mov	r8, r1
 801f856:	f7e0 fd23 	bl	80002a0 <strlen>
 801f85a:	f04f 0a00 	mov.w	sl, #0
 801f85e:	4605      	mov	r5, r0
 801f860:	f04f 0b00 	mov.w	fp, #0
 801f864:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801f868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f86a:	781a      	ldrb	r2, [r3, #0]
 801f86c:	2a2b      	cmp	r2, #43	; 0x2b
 801f86e:	d04e      	beq.n	801f90e <_strtod_l+0xd6>
 801f870:	d83b      	bhi.n	801f8ea <_strtod_l+0xb2>
 801f872:	2a0d      	cmp	r2, #13
 801f874:	d834      	bhi.n	801f8e0 <_strtod_l+0xa8>
 801f876:	2a08      	cmp	r2, #8
 801f878:	d834      	bhi.n	801f8e4 <_strtod_l+0xac>
 801f87a:	2a00      	cmp	r2, #0
 801f87c:	d03e      	beq.n	801f8fc <_strtod_l+0xc4>
 801f87e:	2300      	movs	r3, #0
 801f880:	930a      	str	r3, [sp, #40]	; 0x28
 801f882:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801f884:	7833      	ldrb	r3, [r6, #0]
 801f886:	2b30      	cmp	r3, #48	; 0x30
 801f888:	f040 80b0 	bne.w	801f9ec <_strtod_l+0x1b4>
 801f88c:	7873      	ldrb	r3, [r6, #1]
 801f88e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f892:	2b58      	cmp	r3, #88	; 0x58
 801f894:	d168      	bne.n	801f968 <_strtod_l+0x130>
 801f896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f898:	9301      	str	r3, [sp, #4]
 801f89a:	ab18      	add	r3, sp, #96	; 0x60
 801f89c:	9702      	str	r7, [sp, #8]
 801f89e:	9300      	str	r3, [sp, #0]
 801f8a0:	4a8d      	ldr	r2, [pc, #564]	; (801fad8 <_strtod_l+0x2a0>)
 801f8a2:	ab19      	add	r3, sp, #100	; 0x64
 801f8a4:	a917      	add	r1, sp, #92	; 0x5c
 801f8a6:	4620      	mov	r0, r4
 801f8a8:	f000 ffca 	bl	8020840 <__gethex>
 801f8ac:	f010 0707 	ands.w	r7, r0, #7
 801f8b0:	4605      	mov	r5, r0
 801f8b2:	d005      	beq.n	801f8c0 <_strtod_l+0x88>
 801f8b4:	2f06      	cmp	r7, #6
 801f8b6:	d12c      	bne.n	801f912 <_strtod_l+0xda>
 801f8b8:	3601      	adds	r6, #1
 801f8ba:	2300      	movs	r3, #0
 801f8bc:	9617      	str	r6, [sp, #92]	; 0x5c
 801f8be:	930a      	str	r3, [sp, #40]	; 0x28
 801f8c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	f040 8590 	bne.w	80203e8 <_strtod_l+0xbb0>
 801f8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8ca:	b1eb      	cbz	r3, 801f908 <_strtod_l+0xd0>
 801f8cc:	4652      	mov	r2, sl
 801f8ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801f8d2:	ec43 2b10 	vmov	d0, r2, r3
 801f8d6:	b01d      	add	sp, #116	; 0x74
 801f8d8:	ecbd 8b02 	vpop	{d8}
 801f8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8e0:	2a20      	cmp	r2, #32
 801f8e2:	d1cc      	bne.n	801f87e <_strtod_l+0x46>
 801f8e4:	3301      	adds	r3, #1
 801f8e6:	9317      	str	r3, [sp, #92]	; 0x5c
 801f8e8:	e7be      	b.n	801f868 <_strtod_l+0x30>
 801f8ea:	2a2d      	cmp	r2, #45	; 0x2d
 801f8ec:	d1c7      	bne.n	801f87e <_strtod_l+0x46>
 801f8ee:	2201      	movs	r2, #1
 801f8f0:	920a      	str	r2, [sp, #40]	; 0x28
 801f8f2:	1c5a      	adds	r2, r3, #1
 801f8f4:	9217      	str	r2, [sp, #92]	; 0x5c
 801f8f6:	785b      	ldrb	r3, [r3, #1]
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	d1c2      	bne.n	801f882 <_strtod_l+0x4a>
 801f8fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f8fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801f902:	2b00      	cmp	r3, #0
 801f904:	f040 856e 	bne.w	80203e4 <_strtod_l+0xbac>
 801f908:	4652      	mov	r2, sl
 801f90a:	465b      	mov	r3, fp
 801f90c:	e7e1      	b.n	801f8d2 <_strtod_l+0x9a>
 801f90e:	2200      	movs	r2, #0
 801f910:	e7ee      	b.n	801f8f0 <_strtod_l+0xb8>
 801f912:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f914:	b13a      	cbz	r2, 801f926 <_strtod_l+0xee>
 801f916:	2135      	movs	r1, #53	; 0x35
 801f918:	a81a      	add	r0, sp, #104	; 0x68
 801f91a:	f001 ff56 	bl	80217ca <__copybits>
 801f91e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f920:	4620      	mov	r0, r4
 801f922:	f001 fb15 	bl	8020f50 <_Bfree>
 801f926:	3f01      	subs	r7, #1
 801f928:	2f04      	cmp	r7, #4
 801f92a:	d806      	bhi.n	801f93a <_strtod_l+0x102>
 801f92c:	e8df f007 	tbb	[pc, r7]
 801f930:	1714030a 	.word	0x1714030a
 801f934:	0a          	.byte	0x0a
 801f935:	00          	.byte	0x00
 801f936:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801f93a:	0728      	lsls	r0, r5, #28
 801f93c:	d5c0      	bpl.n	801f8c0 <_strtod_l+0x88>
 801f93e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801f942:	e7bd      	b.n	801f8c0 <_strtod_l+0x88>
 801f944:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801f948:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f94a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f94e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f952:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801f956:	e7f0      	b.n	801f93a <_strtod_l+0x102>
 801f958:	f8df b180 	ldr.w	fp, [pc, #384]	; 801fadc <_strtod_l+0x2a4>
 801f95c:	e7ed      	b.n	801f93a <_strtod_l+0x102>
 801f95e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801f962:	f04f 3aff 	mov.w	sl, #4294967295
 801f966:	e7e8      	b.n	801f93a <_strtod_l+0x102>
 801f968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f96a:	1c5a      	adds	r2, r3, #1
 801f96c:	9217      	str	r2, [sp, #92]	; 0x5c
 801f96e:	785b      	ldrb	r3, [r3, #1]
 801f970:	2b30      	cmp	r3, #48	; 0x30
 801f972:	d0f9      	beq.n	801f968 <_strtod_l+0x130>
 801f974:	2b00      	cmp	r3, #0
 801f976:	d0a3      	beq.n	801f8c0 <_strtod_l+0x88>
 801f978:	2301      	movs	r3, #1
 801f97a:	f04f 0900 	mov.w	r9, #0
 801f97e:	9304      	str	r3, [sp, #16]
 801f980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f982:	9308      	str	r3, [sp, #32]
 801f984:	f8cd 901c 	str.w	r9, [sp, #28]
 801f988:	464f      	mov	r7, r9
 801f98a:	220a      	movs	r2, #10
 801f98c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f98e:	7806      	ldrb	r6, [r0, #0]
 801f990:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801f994:	b2d9      	uxtb	r1, r3
 801f996:	2909      	cmp	r1, #9
 801f998:	d92a      	bls.n	801f9f0 <_strtod_l+0x1b8>
 801f99a:	9905      	ldr	r1, [sp, #20]
 801f99c:	462a      	mov	r2, r5
 801f99e:	f7ff feef 	bl	801f780 <strncmp>
 801f9a2:	b398      	cbz	r0, 801fa0c <_strtod_l+0x1d4>
 801f9a4:	2000      	movs	r0, #0
 801f9a6:	4632      	mov	r2, r6
 801f9a8:	463d      	mov	r5, r7
 801f9aa:	9005      	str	r0, [sp, #20]
 801f9ac:	4603      	mov	r3, r0
 801f9ae:	2a65      	cmp	r2, #101	; 0x65
 801f9b0:	d001      	beq.n	801f9b6 <_strtod_l+0x17e>
 801f9b2:	2a45      	cmp	r2, #69	; 0x45
 801f9b4:	d118      	bne.n	801f9e8 <_strtod_l+0x1b0>
 801f9b6:	b91d      	cbnz	r5, 801f9c0 <_strtod_l+0x188>
 801f9b8:	9a04      	ldr	r2, [sp, #16]
 801f9ba:	4302      	orrs	r2, r0
 801f9bc:	d09e      	beq.n	801f8fc <_strtod_l+0xc4>
 801f9be:	2500      	movs	r5, #0
 801f9c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801f9c4:	f108 0201 	add.w	r2, r8, #1
 801f9c8:	9217      	str	r2, [sp, #92]	; 0x5c
 801f9ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f9ce:	2a2b      	cmp	r2, #43	; 0x2b
 801f9d0:	d075      	beq.n	801fabe <_strtod_l+0x286>
 801f9d2:	2a2d      	cmp	r2, #45	; 0x2d
 801f9d4:	d07b      	beq.n	801face <_strtod_l+0x296>
 801f9d6:	f04f 0c00 	mov.w	ip, #0
 801f9da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801f9de:	2909      	cmp	r1, #9
 801f9e0:	f240 8082 	bls.w	801fae8 <_strtod_l+0x2b0>
 801f9e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801f9e8:	2600      	movs	r6, #0
 801f9ea:	e09d      	b.n	801fb28 <_strtod_l+0x2f0>
 801f9ec:	2300      	movs	r3, #0
 801f9ee:	e7c4      	b.n	801f97a <_strtod_l+0x142>
 801f9f0:	2f08      	cmp	r7, #8
 801f9f2:	bfd8      	it	le
 801f9f4:	9907      	ldrle	r1, [sp, #28]
 801f9f6:	f100 0001 	add.w	r0, r0, #1
 801f9fa:	bfda      	itte	le
 801f9fc:	fb02 3301 	mlale	r3, r2, r1, r3
 801fa00:	9307      	strle	r3, [sp, #28]
 801fa02:	fb02 3909 	mlagt	r9, r2, r9, r3
 801fa06:	3701      	adds	r7, #1
 801fa08:	9017      	str	r0, [sp, #92]	; 0x5c
 801fa0a:	e7bf      	b.n	801f98c <_strtod_l+0x154>
 801fa0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fa0e:	195a      	adds	r2, r3, r5
 801fa10:	9217      	str	r2, [sp, #92]	; 0x5c
 801fa12:	5d5a      	ldrb	r2, [r3, r5]
 801fa14:	2f00      	cmp	r7, #0
 801fa16:	d037      	beq.n	801fa88 <_strtod_l+0x250>
 801fa18:	9005      	str	r0, [sp, #20]
 801fa1a:	463d      	mov	r5, r7
 801fa1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801fa20:	2b09      	cmp	r3, #9
 801fa22:	d912      	bls.n	801fa4a <_strtod_l+0x212>
 801fa24:	2301      	movs	r3, #1
 801fa26:	e7c2      	b.n	801f9ae <_strtod_l+0x176>
 801fa28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fa2a:	1c5a      	adds	r2, r3, #1
 801fa2c:	9217      	str	r2, [sp, #92]	; 0x5c
 801fa2e:	785a      	ldrb	r2, [r3, #1]
 801fa30:	3001      	adds	r0, #1
 801fa32:	2a30      	cmp	r2, #48	; 0x30
 801fa34:	d0f8      	beq.n	801fa28 <_strtod_l+0x1f0>
 801fa36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801fa3a:	2b08      	cmp	r3, #8
 801fa3c:	f200 84d9 	bhi.w	80203f2 <_strtod_l+0xbba>
 801fa40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fa42:	9005      	str	r0, [sp, #20]
 801fa44:	2000      	movs	r0, #0
 801fa46:	9308      	str	r3, [sp, #32]
 801fa48:	4605      	mov	r5, r0
 801fa4a:	3a30      	subs	r2, #48	; 0x30
 801fa4c:	f100 0301 	add.w	r3, r0, #1
 801fa50:	d014      	beq.n	801fa7c <_strtod_l+0x244>
 801fa52:	9905      	ldr	r1, [sp, #20]
 801fa54:	4419      	add	r1, r3
 801fa56:	9105      	str	r1, [sp, #20]
 801fa58:	462b      	mov	r3, r5
 801fa5a:	eb00 0e05 	add.w	lr, r0, r5
 801fa5e:	210a      	movs	r1, #10
 801fa60:	4573      	cmp	r3, lr
 801fa62:	d113      	bne.n	801fa8c <_strtod_l+0x254>
 801fa64:	182b      	adds	r3, r5, r0
 801fa66:	2b08      	cmp	r3, #8
 801fa68:	f105 0501 	add.w	r5, r5, #1
 801fa6c:	4405      	add	r5, r0
 801fa6e:	dc1c      	bgt.n	801faaa <_strtod_l+0x272>
 801fa70:	9907      	ldr	r1, [sp, #28]
 801fa72:	230a      	movs	r3, #10
 801fa74:	fb03 2301 	mla	r3, r3, r1, r2
 801fa78:	9307      	str	r3, [sp, #28]
 801fa7a:	2300      	movs	r3, #0
 801fa7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fa7e:	1c51      	adds	r1, r2, #1
 801fa80:	9117      	str	r1, [sp, #92]	; 0x5c
 801fa82:	7852      	ldrb	r2, [r2, #1]
 801fa84:	4618      	mov	r0, r3
 801fa86:	e7c9      	b.n	801fa1c <_strtod_l+0x1e4>
 801fa88:	4638      	mov	r0, r7
 801fa8a:	e7d2      	b.n	801fa32 <_strtod_l+0x1fa>
 801fa8c:	2b08      	cmp	r3, #8
 801fa8e:	dc04      	bgt.n	801fa9a <_strtod_l+0x262>
 801fa90:	9e07      	ldr	r6, [sp, #28]
 801fa92:	434e      	muls	r6, r1
 801fa94:	9607      	str	r6, [sp, #28]
 801fa96:	3301      	adds	r3, #1
 801fa98:	e7e2      	b.n	801fa60 <_strtod_l+0x228>
 801fa9a:	f103 0c01 	add.w	ip, r3, #1
 801fa9e:	f1bc 0f10 	cmp.w	ip, #16
 801faa2:	bfd8      	it	le
 801faa4:	fb01 f909 	mulle.w	r9, r1, r9
 801faa8:	e7f5      	b.n	801fa96 <_strtod_l+0x25e>
 801faaa:	2d10      	cmp	r5, #16
 801faac:	bfdc      	itt	le
 801faae:	230a      	movle	r3, #10
 801fab0:	fb03 2909 	mlale	r9, r3, r9, r2
 801fab4:	e7e1      	b.n	801fa7a <_strtod_l+0x242>
 801fab6:	2300      	movs	r3, #0
 801fab8:	9305      	str	r3, [sp, #20]
 801faba:	2301      	movs	r3, #1
 801fabc:	e77c      	b.n	801f9b8 <_strtod_l+0x180>
 801fabe:	f04f 0c00 	mov.w	ip, #0
 801fac2:	f108 0202 	add.w	r2, r8, #2
 801fac6:	9217      	str	r2, [sp, #92]	; 0x5c
 801fac8:	f898 2002 	ldrb.w	r2, [r8, #2]
 801facc:	e785      	b.n	801f9da <_strtod_l+0x1a2>
 801face:	f04f 0c01 	mov.w	ip, #1
 801fad2:	e7f6      	b.n	801fac2 <_strtod_l+0x28a>
 801fad4:	08023160 	.word	0x08023160
 801fad8:	0802305c 	.word	0x0802305c
 801fadc:	7ff00000 	.word	0x7ff00000
 801fae0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fae2:	1c51      	adds	r1, r2, #1
 801fae4:	9117      	str	r1, [sp, #92]	; 0x5c
 801fae6:	7852      	ldrb	r2, [r2, #1]
 801fae8:	2a30      	cmp	r2, #48	; 0x30
 801faea:	d0f9      	beq.n	801fae0 <_strtod_l+0x2a8>
 801faec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801faf0:	2908      	cmp	r1, #8
 801faf2:	f63f af79 	bhi.w	801f9e8 <_strtod_l+0x1b0>
 801faf6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801fafa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fafc:	9206      	str	r2, [sp, #24]
 801fafe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fb00:	1c51      	adds	r1, r2, #1
 801fb02:	9117      	str	r1, [sp, #92]	; 0x5c
 801fb04:	7852      	ldrb	r2, [r2, #1]
 801fb06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801fb0a:	2e09      	cmp	r6, #9
 801fb0c:	d937      	bls.n	801fb7e <_strtod_l+0x346>
 801fb0e:	9e06      	ldr	r6, [sp, #24]
 801fb10:	1b89      	subs	r1, r1, r6
 801fb12:	2908      	cmp	r1, #8
 801fb14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801fb18:	dc02      	bgt.n	801fb20 <_strtod_l+0x2e8>
 801fb1a:	4576      	cmp	r6, lr
 801fb1c:	bfa8      	it	ge
 801fb1e:	4676      	movge	r6, lr
 801fb20:	f1bc 0f00 	cmp.w	ip, #0
 801fb24:	d000      	beq.n	801fb28 <_strtod_l+0x2f0>
 801fb26:	4276      	negs	r6, r6
 801fb28:	2d00      	cmp	r5, #0
 801fb2a:	d14d      	bne.n	801fbc8 <_strtod_l+0x390>
 801fb2c:	9904      	ldr	r1, [sp, #16]
 801fb2e:	4301      	orrs	r1, r0
 801fb30:	f47f aec6 	bne.w	801f8c0 <_strtod_l+0x88>
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	f47f aee1 	bne.w	801f8fc <_strtod_l+0xc4>
 801fb3a:	2a69      	cmp	r2, #105	; 0x69
 801fb3c:	d027      	beq.n	801fb8e <_strtod_l+0x356>
 801fb3e:	dc24      	bgt.n	801fb8a <_strtod_l+0x352>
 801fb40:	2a49      	cmp	r2, #73	; 0x49
 801fb42:	d024      	beq.n	801fb8e <_strtod_l+0x356>
 801fb44:	2a4e      	cmp	r2, #78	; 0x4e
 801fb46:	f47f aed9 	bne.w	801f8fc <_strtod_l+0xc4>
 801fb4a:	499f      	ldr	r1, [pc, #636]	; (801fdc8 <_strtod_l+0x590>)
 801fb4c:	a817      	add	r0, sp, #92	; 0x5c
 801fb4e:	f001 f8cf 	bl	8020cf0 <__match>
 801fb52:	2800      	cmp	r0, #0
 801fb54:	f43f aed2 	beq.w	801f8fc <_strtod_l+0xc4>
 801fb58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fb5a:	781b      	ldrb	r3, [r3, #0]
 801fb5c:	2b28      	cmp	r3, #40	; 0x28
 801fb5e:	d12d      	bne.n	801fbbc <_strtod_l+0x384>
 801fb60:	499a      	ldr	r1, [pc, #616]	; (801fdcc <_strtod_l+0x594>)
 801fb62:	aa1a      	add	r2, sp, #104	; 0x68
 801fb64:	a817      	add	r0, sp, #92	; 0x5c
 801fb66:	f001 f8d7 	bl	8020d18 <__hexnan>
 801fb6a:	2805      	cmp	r0, #5
 801fb6c:	d126      	bne.n	801fbbc <_strtod_l+0x384>
 801fb6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fb70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801fb74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801fb78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801fb7c:	e6a0      	b.n	801f8c0 <_strtod_l+0x88>
 801fb7e:	210a      	movs	r1, #10
 801fb80:	fb01 2e0e 	mla	lr, r1, lr, r2
 801fb84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801fb88:	e7b9      	b.n	801fafe <_strtod_l+0x2c6>
 801fb8a:	2a6e      	cmp	r2, #110	; 0x6e
 801fb8c:	e7db      	b.n	801fb46 <_strtod_l+0x30e>
 801fb8e:	4990      	ldr	r1, [pc, #576]	; (801fdd0 <_strtod_l+0x598>)
 801fb90:	a817      	add	r0, sp, #92	; 0x5c
 801fb92:	f001 f8ad 	bl	8020cf0 <__match>
 801fb96:	2800      	cmp	r0, #0
 801fb98:	f43f aeb0 	beq.w	801f8fc <_strtod_l+0xc4>
 801fb9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fb9e:	498d      	ldr	r1, [pc, #564]	; (801fdd4 <_strtod_l+0x59c>)
 801fba0:	3b01      	subs	r3, #1
 801fba2:	a817      	add	r0, sp, #92	; 0x5c
 801fba4:	9317      	str	r3, [sp, #92]	; 0x5c
 801fba6:	f001 f8a3 	bl	8020cf0 <__match>
 801fbaa:	b910      	cbnz	r0, 801fbb2 <_strtod_l+0x37a>
 801fbac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fbae:	3301      	adds	r3, #1
 801fbb0:	9317      	str	r3, [sp, #92]	; 0x5c
 801fbb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 801fde4 <_strtod_l+0x5ac>
 801fbb6:	f04f 0a00 	mov.w	sl, #0
 801fbba:	e681      	b.n	801f8c0 <_strtod_l+0x88>
 801fbbc:	4886      	ldr	r0, [pc, #536]	; (801fdd8 <_strtod_l+0x5a0>)
 801fbbe:	f001 ffe7 	bl	8021b90 <nan>
 801fbc2:	ec5b ab10 	vmov	sl, fp, d0
 801fbc6:	e67b      	b.n	801f8c0 <_strtod_l+0x88>
 801fbc8:	9b05      	ldr	r3, [sp, #20]
 801fbca:	9807      	ldr	r0, [sp, #28]
 801fbcc:	1af3      	subs	r3, r6, r3
 801fbce:	2f00      	cmp	r7, #0
 801fbd0:	bf08      	it	eq
 801fbd2:	462f      	moveq	r7, r5
 801fbd4:	2d10      	cmp	r5, #16
 801fbd6:	9306      	str	r3, [sp, #24]
 801fbd8:	46a8      	mov	r8, r5
 801fbda:	bfa8      	it	ge
 801fbdc:	f04f 0810 	movge.w	r8, #16
 801fbe0:	f7e0 fca8 	bl	8000534 <__aeabi_ui2d>
 801fbe4:	2d09      	cmp	r5, #9
 801fbe6:	4682      	mov	sl, r0
 801fbe8:	468b      	mov	fp, r1
 801fbea:	dd13      	ble.n	801fc14 <_strtod_l+0x3dc>
 801fbec:	4b7b      	ldr	r3, [pc, #492]	; (801fddc <_strtod_l+0x5a4>)
 801fbee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801fbf2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801fbf6:	f7e0 fd17 	bl	8000628 <__aeabi_dmul>
 801fbfa:	4682      	mov	sl, r0
 801fbfc:	4648      	mov	r0, r9
 801fbfe:	468b      	mov	fp, r1
 801fc00:	f7e0 fc98 	bl	8000534 <__aeabi_ui2d>
 801fc04:	4602      	mov	r2, r0
 801fc06:	460b      	mov	r3, r1
 801fc08:	4650      	mov	r0, sl
 801fc0a:	4659      	mov	r1, fp
 801fc0c:	f7e0 fb56 	bl	80002bc <__adddf3>
 801fc10:	4682      	mov	sl, r0
 801fc12:	468b      	mov	fp, r1
 801fc14:	2d0f      	cmp	r5, #15
 801fc16:	dc38      	bgt.n	801fc8a <_strtod_l+0x452>
 801fc18:	9b06      	ldr	r3, [sp, #24]
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	f43f ae50 	beq.w	801f8c0 <_strtod_l+0x88>
 801fc20:	dd24      	ble.n	801fc6c <_strtod_l+0x434>
 801fc22:	2b16      	cmp	r3, #22
 801fc24:	dc0b      	bgt.n	801fc3e <_strtod_l+0x406>
 801fc26:	496d      	ldr	r1, [pc, #436]	; (801fddc <_strtod_l+0x5a4>)
 801fc28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fc2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc30:	4652      	mov	r2, sl
 801fc32:	465b      	mov	r3, fp
 801fc34:	f7e0 fcf8 	bl	8000628 <__aeabi_dmul>
 801fc38:	4682      	mov	sl, r0
 801fc3a:	468b      	mov	fp, r1
 801fc3c:	e640      	b.n	801f8c0 <_strtod_l+0x88>
 801fc3e:	9a06      	ldr	r2, [sp, #24]
 801fc40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801fc44:	4293      	cmp	r3, r2
 801fc46:	db20      	blt.n	801fc8a <_strtod_l+0x452>
 801fc48:	4c64      	ldr	r4, [pc, #400]	; (801fddc <_strtod_l+0x5a4>)
 801fc4a:	f1c5 050f 	rsb	r5, r5, #15
 801fc4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801fc52:	4652      	mov	r2, sl
 801fc54:	465b      	mov	r3, fp
 801fc56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc5a:	f7e0 fce5 	bl	8000628 <__aeabi_dmul>
 801fc5e:	9b06      	ldr	r3, [sp, #24]
 801fc60:	1b5d      	subs	r5, r3, r5
 801fc62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801fc66:	e9d4 2300 	ldrd	r2, r3, [r4]
 801fc6a:	e7e3      	b.n	801fc34 <_strtod_l+0x3fc>
 801fc6c:	9b06      	ldr	r3, [sp, #24]
 801fc6e:	3316      	adds	r3, #22
 801fc70:	db0b      	blt.n	801fc8a <_strtod_l+0x452>
 801fc72:	9b05      	ldr	r3, [sp, #20]
 801fc74:	1b9e      	subs	r6, r3, r6
 801fc76:	4b59      	ldr	r3, [pc, #356]	; (801fddc <_strtod_l+0x5a4>)
 801fc78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801fc7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fc80:	4650      	mov	r0, sl
 801fc82:	4659      	mov	r1, fp
 801fc84:	f7e0 fdfa 	bl	800087c <__aeabi_ddiv>
 801fc88:	e7d6      	b.n	801fc38 <_strtod_l+0x400>
 801fc8a:	9b06      	ldr	r3, [sp, #24]
 801fc8c:	eba5 0808 	sub.w	r8, r5, r8
 801fc90:	4498      	add	r8, r3
 801fc92:	f1b8 0f00 	cmp.w	r8, #0
 801fc96:	dd74      	ble.n	801fd82 <_strtod_l+0x54a>
 801fc98:	f018 030f 	ands.w	r3, r8, #15
 801fc9c:	d00a      	beq.n	801fcb4 <_strtod_l+0x47c>
 801fc9e:	494f      	ldr	r1, [pc, #316]	; (801fddc <_strtod_l+0x5a4>)
 801fca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fca4:	4652      	mov	r2, sl
 801fca6:	465b      	mov	r3, fp
 801fca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fcac:	f7e0 fcbc 	bl	8000628 <__aeabi_dmul>
 801fcb0:	4682      	mov	sl, r0
 801fcb2:	468b      	mov	fp, r1
 801fcb4:	f038 080f 	bics.w	r8, r8, #15
 801fcb8:	d04f      	beq.n	801fd5a <_strtod_l+0x522>
 801fcba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801fcbe:	dd22      	ble.n	801fd06 <_strtod_l+0x4ce>
 801fcc0:	2500      	movs	r5, #0
 801fcc2:	462e      	mov	r6, r5
 801fcc4:	9507      	str	r5, [sp, #28]
 801fcc6:	9505      	str	r5, [sp, #20]
 801fcc8:	2322      	movs	r3, #34	; 0x22
 801fcca:	f8df b118 	ldr.w	fp, [pc, #280]	; 801fde4 <_strtod_l+0x5ac>
 801fcce:	6023      	str	r3, [r4, #0]
 801fcd0:	f04f 0a00 	mov.w	sl, #0
 801fcd4:	9b07      	ldr	r3, [sp, #28]
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	f43f adf2 	beq.w	801f8c0 <_strtod_l+0x88>
 801fcdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fcde:	4620      	mov	r0, r4
 801fce0:	f001 f936 	bl	8020f50 <_Bfree>
 801fce4:	9905      	ldr	r1, [sp, #20]
 801fce6:	4620      	mov	r0, r4
 801fce8:	f001 f932 	bl	8020f50 <_Bfree>
 801fcec:	4631      	mov	r1, r6
 801fcee:	4620      	mov	r0, r4
 801fcf0:	f001 f92e 	bl	8020f50 <_Bfree>
 801fcf4:	9907      	ldr	r1, [sp, #28]
 801fcf6:	4620      	mov	r0, r4
 801fcf8:	f001 f92a 	bl	8020f50 <_Bfree>
 801fcfc:	4629      	mov	r1, r5
 801fcfe:	4620      	mov	r0, r4
 801fd00:	f001 f926 	bl	8020f50 <_Bfree>
 801fd04:	e5dc      	b.n	801f8c0 <_strtod_l+0x88>
 801fd06:	4b36      	ldr	r3, [pc, #216]	; (801fde0 <_strtod_l+0x5a8>)
 801fd08:	9304      	str	r3, [sp, #16]
 801fd0a:	2300      	movs	r3, #0
 801fd0c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801fd10:	4650      	mov	r0, sl
 801fd12:	4659      	mov	r1, fp
 801fd14:	4699      	mov	r9, r3
 801fd16:	f1b8 0f01 	cmp.w	r8, #1
 801fd1a:	dc21      	bgt.n	801fd60 <_strtod_l+0x528>
 801fd1c:	b10b      	cbz	r3, 801fd22 <_strtod_l+0x4ea>
 801fd1e:	4682      	mov	sl, r0
 801fd20:	468b      	mov	fp, r1
 801fd22:	4b2f      	ldr	r3, [pc, #188]	; (801fde0 <_strtod_l+0x5a8>)
 801fd24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801fd28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801fd2c:	4652      	mov	r2, sl
 801fd2e:	465b      	mov	r3, fp
 801fd30:	e9d9 0100 	ldrd	r0, r1, [r9]
 801fd34:	f7e0 fc78 	bl	8000628 <__aeabi_dmul>
 801fd38:	4b2a      	ldr	r3, [pc, #168]	; (801fde4 <_strtod_l+0x5ac>)
 801fd3a:	460a      	mov	r2, r1
 801fd3c:	400b      	ands	r3, r1
 801fd3e:	492a      	ldr	r1, [pc, #168]	; (801fde8 <_strtod_l+0x5b0>)
 801fd40:	428b      	cmp	r3, r1
 801fd42:	4682      	mov	sl, r0
 801fd44:	d8bc      	bhi.n	801fcc0 <_strtod_l+0x488>
 801fd46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801fd4a:	428b      	cmp	r3, r1
 801fd4c:	bf86      	itte	hi
 801fd4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801fdec <_strtod_l+0x5b4>
 801fd52:	f04f 3aff 	movhi.w	sl, #4294967295
 801fd56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	9304      	str	r3, [sp, #16]
 801fd5e:	e084      	b.n	801fe6a <_strtod_l+0x632>
 801fd60:	f018 0f01 	tst.w	r8, #1
 801fd64:	d005      	beq.n	801fd72 <_strtod_l+0x53a>
 801fd66:	9b04      	ldr	r3, [sp, #16]
 801fd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd6c:	f7e0 fc5c 	bl	8000628 <__aeabi_dmul>
 801fd70:	2301      	movs	r3, #1
 801fd72:	9a04      	ldr	r2, [sp, #16]
 801fd74:	3208      	adds	r2, #8
 801fd76:	f109 0901 	add.w	r9, r9, #1
 801fd7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801fd7e:	9204      	str	r2, [sp, #16]
 801fd80:	e7c9      	b.n	801fd16 <_strtod_l+0x4de>
 801fd82:	d0ea      	beq.n	801fd5a <_strtod_l+0x522>
 801fd84:	f1c8 0800 	rsb	r8, r8, #0
 801fd88:	f018 020f 	ands.w	r2, r8, #15
 801fd8c:	d00a      	beq.n	801fda4 <_strtod_l+0x56c>
 801fd8e:	4b13      	ldr	r3, [pc, #76]	; (801fddc <_strtod_l+0x5a4>)
 801fd90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fd94:	4650      	mov	r0, sl
 801fd96:	4659      	mov	r1, fp
 801fd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd9c:	f7e0 fd6e 	bl	800087c <__aeabi_ddiv>
 801fda0:	4682      	mov	sl, r0
 801fda2:	468b      	mov	fp, r1
 801fda4:	ea5f 1828 	movs.w	r8, r8, asr #4
 801fda8:	d0d7      	beq.n	801fd5a <_strtod_l+0x522>
 801fdaa:	f1b8 0f1f 	cmp.w	r8, #31
 801fdae:	dd1f      	ble.n	801fdf0 <_strtod_l+0x5b8>
 801fdb0:	2500      	movs	r5, #0
 801fdb2:	462e      	mov	r6, r5
 801fdb4:	9507      	str	r5, [sp, #28]
 801fdb6:	9505      	str	r5, [sp, #20]
 801fdb8:	2322      	movs	r3, #34	; 0x22
 801fdba:	f04f 0a00 	mov.w	sl, #0
 801fdbe:	f04f 0b00 	mov.w	fp, #0
 801fdc2:	6023      	str	r3, [r4, #0]
 801fdc4:	e786      	b.n	801fcd4 <_strtod_l+0x49c>
 801fdc6:	bf00      	nop
 801fdc8:	08023056 	.word	0x08023056
 801fdcc:	08023070 	.word	0x08023070
 801fdd0:	0802304d 	.word	0x0802304d
 801fdd4:	08023050 	.word	0x08023050
 801fdd8:	080230eb 	.word	0x080230eb
 801fddc:	08023208 	.word	0x08023208
 801fde0:	080231e0 	.word	0x080231e0
 801fde4:	7ff00000 	.word	0x7ff00000
 801fde8:	7ca00000 	.word	0x7ca00000
 801fdec:	7fefffff 	.word	0x7fefffff
 801fdf0:	f018 0310 	ands.w	r3, r8, #16
 801fdf4:	bf18      	it	ne
 801fdf6:	236a      	movne	r3, #106	; 0x6a
 801fdf8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80201a8 <_strtod_l+0x970>
 801fdfc:	9304      	str	r3, [sp, #16]
 801fdfe:	4650      	mov	r0, sl
 801fe00:	4659      	mov	r1, fp
 801fe02:	2300      	movs	r3, #0
 801fe04:	f018 0f01 	tst.w	r8, #1
 801fe08:	d004      	beq.n	801fe14 <_strtod_l+0x5dc>
 801fe0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801fe0e:	f7e0 fc0b 	bl	8000628 <__aeabi_dmul>
 801fe12:	2301      	movs	r3, #1
 801fe14:	ea5f 0868 	movs.w	r8, r8, asr #1
 801fe18:	f109 0908 	add.w	r9, r9, #8
 801fe1c:	d1f2      	bne.n	801fe04 <_strtod_l+0x5cc>
 801fe1e:	b10b      	cbz	r3, 801fe24 <_strtod_l+0x5ec>
 801fe20:	4682      	mov	sl, r0
 801fe22:	468b      	mov	fp, r1
 801fe24:	9b04      	ldr	r3, [sp, #16]
 801fe26:	b1c3      	cbz	r3, 801fe5a <_strtod_l+0x622>
 801fe28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801fe2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	4659      	mov	r1, fp
 801fe34:	dd11      	ble.n	801fe5a <_strtod_l+0x622>
 801fe36:	2b1f      	cmp	r3, #31
 801fe38:	f340 8124 	ble.w	8020084 <_strtod_l+0x84c>
 801fe3c:	2b34      	cmp	r3, #52	; 0x34
 801fe3e:	bfde      	ittt	le
 801fe40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801fe44:	f04f 33ff 	movle.w	r3, #4294967295
 801fe48:	fa03 f202 	lslle.w	r2, r3, r2
 801fe4c:	f04f 0a00 	mov.w	sl, #0
 801fe50:	bfcc      	ite	gt
 801fe52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801fe56:	ea02 0b01 	andle.w	fp, r2, r1
 801fe5a:	2200      	movs	r2, #0
 801fe5c:	2300      	movs	r3, #0
 801fe5e:	4650      	mov	r0, sl
 801fe60:	4659      	mov	r1, fp
 801fe62:	f7e0 fe49 	bl	8000af8 <__aeabi_dcmpeq>
 801fe66:	2800      	cmp	r0, #0
 801fe68:	d1a2      	bne.n	801fdb0 <_strtod_l+0x578>
 801fe6a:	9b07      	ldr	r3, [sp, #28]
 801fe6c:	9300      	str	r3, [sp, #0]
 801fe6e:	9908      	ldr	r1, [sp, #32]
 801fe70:	462b      	mov	r3, r5
 801fe72:	463a      	mov	r2, r7
 801fe74:	4620      	mov	r0, r4
 801fe76:	f001 f8d3 	bl	8021020 <__s2b>
 801fe7a:	9007      	str	r0, [sp, #28]
 801fe7c:	2800      	cmp	r0, #0
 801fe7e:	f43f af1f 	beq.w	801fcc0 <_strtod_l+0x488>
 801fe82:	9b05      	ldr	r3, [sp, #20]
 801fe84:	1b9e      	subs	r6, r3, r6
 801fe86:	9b06      	ldr	r3, [sp, #24]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	bfb4      	ite	lt
 801fe8c:	4633      	movlt	r3, r6
 801fe8e:	2300      	movge	r3, #0
 801fe90:	930c      	str	r3, [sp, #48]	; 0x30
 801fe92:	9b06      	ldr	r3, [sp, #24]
 801fe94:	2500      	movs	r5, #0
 801fe96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe9a:	9312      	str	r3, [sp, #72]	; 0x48
 801fe9c:	462e      	mov	r6, r5
 801fe9e:	9b07      	ldr	r3, [sp, #28]
 801fea0:	4620      	mov	r0, r4
 801fea2:	6859      	ldr	r1, [r3, #4]
 801fea4:	f001 f814 	bl	8020ed0 <_Balloc>
 801fea8:	9005      	str	r0, [sp, #20]
 801feaa:	2800      	cmp	r0, #0
 801feac:	f43f af0c 	beq.w	801fcc8 <_strtod_l+0x490>
 801feb0:	9b07      	ldr	r3, [sp, #28]
 801feb2:	691a      	ldr	r2, [r3, #16]
 801feb4:	3202      	adds	r2, #2
 801feb6:	f103 010c 	add.w	r1, r3, #12
 801feba:	0092      	lsls	r2, r2, #2
 801febc:	300c      	adds	r0, #12
 801febe:	f7fe feb7 	bl	801ec30 <memcpy>
 801fec2:	ec4b ab10 	vmov	d0, sl, fp
 801fec6:	aa1a      	add	r2, sp, #104	; 0x68
 801fec8:	a919      	add	r1, sp, #100	; 0x64
 801feca:	4620      	mov	r0, r4
 801fecc:	f001 fbee 	bl	80216ac <__d2b>
 801fed0:	ec4b ab18 	vmov	d8, sl, fp
 801fed4:	9018      	str	r0, [sp, #96]	; 0x60
 801fed6:	2800      	cmp	r0, #0
 801fed8:	f43f aef6 	beq.w	801fcc8 <_strtod_l+0x490>
 801fedc:	2101      	movs	r1, #1
 801fede:	4620      	mov	r0, r4
 801fee0:	f001 f938 	bl	8021154 <__i2b>
 801fee4:	4606      	mov	r6, r0
 801fee6:	2800      	cmp	r0, #0
 801fee8:	f43f aeee 	beq.w	801fcc8 <_strtod_l+0x490>
 801feec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801feee:	9904      	ldr	r1, [sp, #16]
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	bfab      	itete	ge
 801fef4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801fef6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801fef8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801fefa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801fefe:	bfac      	ite	ge
 801ff00:	eb03 0902 	addge.w	r9, r3, r2
 801ff04:	1ad7      	sublt	r7, r2, r3
 801ff06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ff08:	eba3 0801 	sub.w	r8, r3, r1
 801ff0c:	4490      	add	r8, r2
 801ff0e:	4ba1      	ldr	r3, [pc, #644]	; (8020194 <_strtod_l+0x95c>)
 801ff10:	f108 38ff 	add.w	r8, r8, #4294967295
 801ff14:	4598      	cmp	r8, r3
 801ff16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ff1a:	f280 80c7 	bge.w	80200ac <_strtod_l+0x874>
 801ff1e:	eba3 0308 	sub.w	r3, r3, r8
 801ff22:	2b1f      	cmp	r3, #31
 801ff24:	eba2 0203 	sub.w	r2, r2, r3
 801ff28:	f04f 0101 	mov.w	r1, #1
 801ff2c:	f300 80b1 	bgt.w	8020092 <_strtod_l+0x85a>
 801ff30:	fa01 f303 	lsl.w	r3, r1, r3
 801ff34:	930d      	str	r3, [sp, #52]	; 0x34
 801ff36:	2300      	movs	r3, #0
 801ff38:	9308      	str	r3, [sp, #32]
 801ff3a:	eb09 0802 	add.w	r8, r9, r2
 801ff3e:	9b04      	ldr	r3, [sp, #16]
 801ff40:	45c1      	cmp	r9, r8
 801ff42:	4417      	add	r7, r2
 801ff44:	441f      	add	r7, r3
 801ff46:	464b      	mov	r3, r9
 801ff48:	bfa8      	it	ge
 801ff4a:	4643      	movge	r3, r8
 801ff4c:	42bb      	cmp	r3, r7
 801ff4e:	bfa8      	it	ge
 801ff50:	463b      	movge	r3, r7
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	bfc2      	ittt	gt
 801ff56:	eba8 0803 	subgt.w	r8, r8, r3
 801ff5a:	1aff      	subgt	r7, r7, r3
 801ff5c:	eba9 0903 	subgt.w	r9, r9, r3
 801ff60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	dd17      	ble.n	801ff96 <_strtod_l+0x75e>
 801ff66:	4631      	mov	r1, r6
 801ff68:	461a      	mov	r2, r3
 801ff6a:	4620      	mov	r0, r4
 801ff6c:	f001 f9b2 	bl	80212d4 <__pow5mult>
 801ff70:	4606      	mov	r6, r0
 801ff72:	2800      	cmp	r0, #0
 801ff74:	f43f aea8 	beq.w	801fcc8 <_strtod_l+0x490>
 801ff78:	4601      	mov	r1, r0
 801ff7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ff7c:	4620      	mov	r0, r4
 801ff7e:	f001 f8ff 	bl	8021180 <__multiply>
 801ff82:	900b      	str	r0, [sp, #44]	; 0x2c
 801ff84:	2800      	cmp	r0, #0
 801ff86:	f43f ae9f 	beq.w	801fcc8 <_strtod_l+0x490>
 801ff8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ff8c:	4620      	mov	r0, r4
 801ff8e:	f000 ffdf 	bl	8020f50 <_Bfree>
 801ff92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff94:	9318      	str	r3, [sp, #96]	; 0x60
 801ff96:	f1b8 0f00 	cmp.w	r8, #0
 801ff9a:	f300 808c 	bgt.w	80200b6 <_strtod_l+0x87e>
 801ff9e:	9b06      	ldr	r3, [sp, #24]
 801ffa0:	2b00      	cmp	r3, #0
 801ffa2:	dd08      	ble.n	801ffb6 <_strtod_l+0x77e>
 801ffa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ffa6:	9905      	ldr	r1, [sp, #20]
 801ffa8:	4620      	mov	r0, r4
 801ffaa:	f001 f993 	bl	80212d4 <__pow5mult>
 801ffae:	9005      	str	r0, [sp, #20]
 801ffb0:	2800      	cmp	r0, #0
 801ffb2:	f43f ae89 	beq.w	801fcc8 <_strtod_l+0x490>
 801ffb6:	2f00      	cmp	r7, #0
 801ffb8:	dd08      	ble.n	801ffcc <_strtod_l+0x794>
 801ffba:	9905      	ldr	r1, [sp, #20]
 801ffbc:	463a      	mov	r2, r7
 801ffbe:	4620      	mov	r0, r4
 801ffc0:	f001 f9e2 	bl	8021388 <__lshift>
 801ffc4:	9005      	str	r0, [sp, #20]
 801ffc6:	2800      	cmp	r0, #0
 801ffc8:	f43f ae7e 	beq.w	801fcc8 <_strtod_l+0x490>
 801ffcc:	f1b9 0f00 	cmp.w	r9, #0
 801ffd0:	dd08      	ble.n	801ffe4 <_strtod_l+0x7ac>
 801ffd2:	4631      	mov	r1, r6
 801ffd4:	464a      	mov	r2, r9
 801ffd6:	4620      	mov	r0, r4
 801ffd8:	f001 f9d6 	bl	8021388 <__lshift>
 801ffdc:	4606      	mov	r6, r0
 801ffde:	2800      	cmp	r0, #0
 801ffe0:	f43f ae72 	beq.w	801fcc8 <_strtod_l+0x490>
 801ffe4:	9a05      	ldr	r2, [sp, #20]
 801ffe6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ffe8:	4620      	mov	r0, r4
 801ffea:	f001 fa59 	bl	80214a0 <__mdiff>
 801ffee:	4605      	mov	r5, r0
 801fff0:	2800      	cmp	r0, #0
 801fff2:	f43f ae69 	beq.w	801fcc8 <_strtod_l+0x490>
 801fff6:	68c3      	ldr	r3, [r0, #12]
 801fff8:	930b      	str	r3, [sp, #44]	; 0x2c
 801fffa:	2300      	movs	r3, #0
 801fffc:	60c3      	str	r3, [r0, #12]
 801fffe:	4631      	mov	r1, r6
 8020000:	f001 fa32 	bl	8021468 <__mcmp>
 8020004:	2800      	cmp	r0, #0
 8020006:	da60      	bge.n	80200ca <_strtod_l+0x892>
 8020008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802000a:	ea53 030a 	orrs.w	r3, r3, sl
 802000e:	f040 8082 	bne.w	8020116 <_strtod_l+0x8de>
 8020012:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020016:	2b00      	cmp	r3, #0
 8020018:	d17d      	bne.n	8020116 <_strtod_l+0x8de>
 802001a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802001e:	0d1b      	lsrs	r3, r3, #20
 8020020:	051b      	lsls	r3, r3, #20
 8020022:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8020026:	d976      	bls.n	8020116 <_strtod_l+0x8de>
 8020028:	696b      	ldr	r3, [r5, #20]
 802002a:	b913      	cbnz	r3, 8020032 <_strtod_l+0x7fa>
 802002c:	692b      	ldr	r3, [r5, #16]
 802002e:	2b01      	cmp	r3, #1
 8020030:	dd71      	ble.n	8020116 <_strtod_l+0x8de>
 8020032:	4629      	mov	r1, r5
 8020034:	2201      	movs	r2, #1
 8020036:	4620      	mov	r0, r4
 8020038:	f001 f9a6 	bl	8021388 <__lshift>
 802003c:	4631      	mov	r1, r6
 802003e:	4605      	mov	r5, r0
 8020040:	f001 fa12 	bl	8021468 <__mcmp>
 8020044:	2800      	cmp	r0, #0
 8020046:	dd66      	ble.n	8020116 <_strtod_l+0x8de>
 8020048:	9904      	ldr	r1, [sp, #16]
 802004a:	4a53      	ldr	r2, [pc, #332]	; (8020198 <_strtod_l+0x960>)
 802004c:	465b      	mov	r3, fp
 802004e:	2900      	cmp	r1, #0
 8020050:	f000 8081 	beq.w	8020156 <_strtod_l+0x91e>
 8020054:	ea02 010b 	and.w	r1, r2, fp
 8020058:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802005c:	dc7b      	bgt.n	8020156 <_strtod_l+0x91e>
 802005e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8020062:	f77f aea9 	ble.w	801fdb8 <_strtod_l+0x580>
 8020066:	4b4d      	ldr	r3, [pc, #308]	; (802019c <_strtod_l+0x964>)
 8020068:	4650      	mov	r0, sl
 802006a:	4659      	mov	r1, fp
 802006c:	2200      	movs	r2, #0
 802006e:	f7e0 fadb 	bl	8000628 <__aeabi_dmul>
 8020072:	460b      	mov	r3, r1
 8020074:	4303      	orrs	r3, r0
 8020076:	bf08      	it	eq
 8020078:	2322      	moveq	r3, #34	; 0x22
 802007a:	4682      	mov	sl, r0
 802007c:	468b      	mov	fp, r1
 802007e:	bf08      	it	eq
 8020080:	6023      	streq	r3, [r4, #0]
 8020082:	e62b      	b.n	801fcdc <_strtod_l+0x4a4>
 8020084:	f04f 32ff 	mov.w	r2, #4294967295
 8020088:	fa02 f303 	lsl.w	r3, r2, r3
 802008c:	ea03 0a0a 	and.w	sl, r3, sl
 8020090:	e6e3      	b.n	801fe5a <_strtod_l+0x622>
 8020092:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8020096:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 802009a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 802009e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80200a2:	fa01 f308 	lsl.w	r3, r1, r8
 80200a6:	9308      	str	r3, [sp, #32]
 80200a8:	910d      	str	r1, [sp, #52]	; 0x34
 80200aa:	e746      	b.n	801ff3a <_strtod_l+0x702>
 80200ac:	2300      	movs	r3, #0
 80200ae:	9308      	str	r3, [sp, #32]
 80200b0:	2301      	movs	r3, #1
 80200b2:	930d      	str	r3, [sp, #52]	; 0x34
 80200b4:	e741      	b.n	801ff3a <_strtod_l+0x702>
 80200b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80200b8:	4642      	mov	r2, r8
 80200ba:	4620      	mov	r0, r4
 80200bc:	f001 f964 	bl	8021388 <__lshift>
 80200c0:	9018      	str	r0, [sp, #96]	; 0x60
 80200c2:	2800      	cmp	r0, #0
 80200c4:	f47f af6b 	bne.w	801ff9e <_strtod_l+0x766>
 80200c8:	e5fe      	b.n	801fcc8 <_strtod_l+0x490>
 80200ca:	465f      	mov	r7, fp
 80200cc:	d16e      	bne.n	80201ac <_strtod_l+0x974>
 80200ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80200d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80200d4:	b342      	cbz	r2, 8020128 <_strtod_l+0x8f0>
 80200d6:	4a32      	ldr	r2, [pc, #200]	; (80201a0 <_strtod_l+0x968>)
 80200d8:	4293      	cmp	r3, r2
 80200da:	d128      	bne.n	802012e <_strtod_l+0x8f6>
 80200dc:	9b04      	ldr	r3, [sp, #16]
 80200de:	4651      	mov	r1, sl
 80200e0:	b1eb      	cbz	r3, 802011e <_strtod_l+0x8e6>
 80200e2:	4b2d      	ldr	r3, [pc, #180]	; (8020198 <_strtod_l+0x960>)
 80200e4:	403b      	ands	r3, r7
 80200e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80200ea:	f04f 32ff 	mov.w	r2, #4294967295
 80200ee:	d819      	bhi.n	8020124 <_strtod_l+0x8ec>
 80200f0:	0d1b      	lsrs	r3, r3, #20
 80200f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80200f6:	fa02 f303 	lsl.w	r3, r2, r3
 80200fa:	4299      	cmp	r1, r3
 80200fc:	d117      	bne.n	802012e <_strtod_l+0x8f6>
 80200fe:	4b29      	ldr	r3, [pc, #164]	; (80201a4 <_strtod_l+0x96c>)
 8020100:	429f      	cmp	r7, r3
 8020102:	d102      	bne.n	802010a <_strtod_l+0x8d2>
 8020104:	3101      	adds	r1, #1
 8020106:	f43f addf 	beq.w	801fcc8 <_strtod_l+0x490>
 802010a:	4b23      	ldr	r3, [pc, #140]	; (8020198 <_strtod_l+0x960>)
 802010c:	403b      	ands	r3, r7
 802010e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8020112:	f04f 0a00 	mov.w	sl, #0
 8020116:	9b04      	ldr	r3, [sp, #16]
 8020118:	2b00      	cmp	r3, #0
 802011a:	d1a4      	bne.n	8020066 <_strtod_l+0x82e>
 802011c:	e5de      	b.n	801fcdc <_strtod_l+0x4a4>
 802011e:	f04f 33ff 	mov.w	r3, #4294967295
 8020122:	e7ea      	b.n	80200fa <_strtod_l+0x8c2>
 8020124:	4613      	mov	r3, r2
 8020126:	e7e8      	b.n	80200fa <_strtod_l+0x8c2>
 8020128:	ea53 030a 	orrs.w	r3, r3, sl
 802012c:	d08c      	beq.n	8020048 <_strtod_l+0x810>
 802012e:	9b08      	ldr	r3, [sp, #32]
 8020130:	b1db      	cbz	r3, 802016a <_strtod_l+0x932>
 8020132:	423b      	tst	r3, r7
 8020134:	d0ef      	beq.n	8020116 <_strtod_l+0x8de>
 8020136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020138:	9a04      	ldr	r2, [sp, #16]
 802013a:	4650      	mov	r0, sl
 802013c:	4659      	mov	r1, fp
 802013e:	b1c3      	cbz	r3, 8020172 <_strtod_l+0x93a>
 8020140:	f7ff fb5c 	bl	801f7fc <sulp>
 8020144:	4602      	mov	r2, r0
 8020146:	460b      	mov	r3, r1
 8020148:	ec51 0b18 	vmov	r0, r1, d8
 802014c:	f7e0 f8b6 	bl	80002bc <__adddf3>
 8020150:	4682      	mov	sl, r0
 8020152:	468b      	mov	fp, r1
 8020154:	e7df      	b.n	8020116 <_strtod_l+0x8de>
 8020156:	4013      	ands	r3, r2
 8020158:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802015c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020160:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020164:	f04f 3aff 	mov.w	sl, #4294967295
 8020168:	e7d5      	b.n	8020116 <_strtod_l+0x8de>
 802016a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802016c:	ea13 0f0a 	tst.w	r3, sl
 8020170:	e7e0      	b.n	8020134 <_strtod_l+0x8fc>
 8020172:	f7ff fb43 	bl	801f7fc <sulp>
 8020176:	4602      	mov	r2, r0
 8020178:	460b      	mov	r3, r1
 802017a:	ec51 0b18 	vmov	r0, r1, d8
 802017e:	f7e0 f89b 	bl	80002b8 <__aeabi_dsub>
 8020182:	2200      	movs	r2, #0
 8020184:	2300      	movs	r3, #0
 8020186:	4682      	mov	sl, r0
 8020188:	468b      	mov	fp, r1
 802018a:	f7e0 fcb5 	bl	8000af8 <__aeabi_dcmpeq>
 802018e:	2800      	cmp	r0, #0
 8020190:	d0c1      	beq.n	8020116 <_strtod_l+0x8de>
 8020192:	e611      	b.n	801fdb8 <_strtod_l+0x580>
 8020194:	fffffc02 	.word	0xfffffc02
 8020198:	7ff00000 	.word	0x7ff00000
 802019c:	39500000 	.word	0x39500000
 80201a0:	000fffff 	.word	0x000fffff
 80201a4:	7fefffff 	.word	0x7fefffff
 80201a8:	08023088 	.word	0x08023088
 80201ac:	4631      	mov	r1, r6
 80201ae:	4628      	mov	r0, r5
 80201b0:	f001 fad8 	bl	8021764 <__ratio>
 80201b4:	ec59 8b10 	vmov	r8, r9, d0
 80201b8:	ee10 0a10 	vmov	r0, s0
 80201bc:	2200      	movs	r2, #0
 80201be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80201c2:	4649      	mov	r1, r9
 80201c4:	f7e0 fcac 	bl	8000b20 <__aeabi_dcmple>
 80201c8:	2800      	cmp	r0, #0
 80201ca:	d07a      	beq.n	80202c2 <_strtod_l+0xa8a>
 80201cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d04a      	beq.n	8020268 <_strtod_l+0xa30>
 80201d2:	4b95      	ldr	r3, [pc, #596]	; (8020428 <_strtod_l+0xbf0>)
 80201d4:	2200      	movs	r2, #0
 80201d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80201da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020428 <_strtod_l+0xbf0>
 80201de:	f04f 0800 	mov.w	r8, #0
 80201e2:	4b92      	ldr	r3, [pc, #584]	; (802042c <_strtod_l+0xbf4>)
 80201e4:	403b      	ands	r3, r7
 80201e6:	930d      	str	r3, [sp, #52]	; 0x34
 80201e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80201ea:	4b91      	ldr	r3, [pc, #580]	; (8020430 <_strtod_l+0xbf8>)
 80201ec:	429a      	cmp	r2, r3
 80201ee:	f040 80b0 	bne.w	8020352 <_strtod_l+0xb1a>
 80201f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80201f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80201fa:	ec4b ab10 	vmov	d0, sl, fp
 80201fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020202:	f001 f9d7 	bl	80215b4 <__ulp>
 8020206:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802020a:	ec53 2b10 	vmov	r2, r3, d0
 802020e:	f7e0 fa0b 	bl	8000628 <__aeabi_dmul>
 8020212:	4652      	mov	r2, sl
 8020214:	465b      	mov	r3, fp
 8020216:	f7e0 f851 	bl	80002bc <__adddf3>
 802021a:	460b      	mov	r3, r1
 802021c:	4983      	ldr	r1, [pc, #524]	; (802042c <_strtod_l+0xbf4>)
 802021e:	4a85      	ldr	r2, [pc, #532]	; (8020434 <_strtod_l+0xbfc>)
 8020220:	4019      	ands	r1, r3
 8020222:	4291      	cmp	r1, r2
 8020224:	4682      	mov	sl, r0
 8020226:	d960      	bls.n	80202ea <_strtod_l+0xab2>
 8020228:	ee18 3a90 	vmov	r3, s17
 802022c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020230:	4293      	cmp	r3, r2
 8020232:	d104      	bne.n	802023e <_strtod_l+0xa06>
 8020234:	ee18 3a10 	vmov	r3, s16
 8020238:	3301      	adds	r3, #1
 802023a:	f43f ad45 	beq.w	801fcc8 <_strtod_l+0x490>
 802023e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8020440 <_strtod_l+0xc08>
 8020242:	f04f 3aff 	mov.w	sl, #4294967295
 8020246:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020248:	4620      	mov	r0, r4
 802024a:	f000 fe81 	bl	8020f50 <_Bfree>
 802024e:	9905      	ldr	r1, [sp, #20]
 8020250:	4620      	mov	r0, r4
 8020252:	f000 fe7d 	bl	8020f50 <_Bfree>
 8020256:	4631      	mov	r1, r6
 8020258:	4620      	mov	r0, r4
 802025a:	f000 fe79 	bl	8020f50 <_Bfree>
 802025e:	4629      	mov	r1, r5
 8020260:	4620      	mov	r0, r4
 8020262:	f000 fe75 	bl	8020f50 <_Bfree>
 8020266:	e61a      	b.n	801fe9e <_strtod_l+0x666>
 8020268:	f1ba 0f00 	cmp.w	sl, #0
 802026c:	d11b      	bne.n	80202a6 <_strtod_l+0xa6e>
 802026e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020272:	b9f3      	cbnz	r3, 80202b2 <_strtod_l+0xa7a>
 8020274:	4b6c      	ldr	r3, [pc, #432]	; (8020428 <_strtod_l+0xbf0>)
 8020276:	2200      	movs	r2, #0
 8020278:	4640      	mov	r0, r8
 802027a:	4649      	mov	r1, r9
 802027c:	f7e0 fc46 	bl	8000b0c <__aeabi_dcmplt>
 8020280:	b9d0      	cbnz	r0, 80202b8 <_strtod_l+0xa80>
 8020282:	4640      	mov	r0, r8
 8020284:	4649      	mov	r1, r9
 8020286:	4b6c      	ldr	r3, [pc, #432]	; (8020438 <_strtod_l+0xc00>)
 8020288:	2200      	movs	r2, #0
 802028a:	f7e0 f9cd 	bl	8000628 <__aeabi_dmul>
 802028e:	4680      	mov	r8, r0
 8020290:	4689      	mov	r9, r1
 8020292:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8020296:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 802029a:	9315      	str	r3, [sp, #84]	; 0x54
 802029c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80202a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80202a4:	e79d      	b.n	80201e2 <_strtod_l+0x9aa>
 80202a6:	f1ba 0f01 	cmp.w	sl, #1
 80202aa:	d102      	bne.n	80202b2 <_strtod_l+0xa7a>
 80202ac:	2f00      	cmp	r7, #0
 80202ae:	f43f ad83 	beq.w	801fdb8 <_strtod_l+0x580>
 80202b2:	4b62      	ldr	r3, [pc, #392]	; (802043c <_strtod_l+0xc04>)
 80202b4:	2200      	movs	r2, #0
 80202b6:	e78e      	b.n	80201d6 <_strtod_l+0x99e>
 80202b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8020438 <_strtod_l+0xc00>
 80202bc:	f04f 0800 	mov.w	r8, #0
 80202c0:	e7e7      	b.n	8020292 <_strtod_l+0xa5a>
 80202c2:	4b5d      	ldr	r3, [pc, #372]	; (8020438 <_strtod_l+0xc00>)
 80202c4:	4640      	mov	r0, r8
 80202c6:	4649      	mov	r1, r9
 80202c8:	2200      	movs	r2, #0
 80202ca:	f7e0 f9ad 	bl	8000628 <__aeabi_dmul>
 80202ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202d0:	4680      	mov	r8, r0
 80202d2:	4689      	mov	r9, r1
 80202d4:	b933      	cbnz	r3, 80202e4 <_strtod_l+0xaac>
 80202d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80202da:	900e      	str	r0, [sp, #56]	; 0x38
 80202dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80202de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80202e2:	e7dd      	b.n	80202a0 <_strtod_l+0xa68>
 80202e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80202e8:	e7f9      	b.n	80202de <_strtod_l+0xaa6>
 80202ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80202ee:	9b04      	ldr	r3, [sp, #16]
 80202f0:	2b00      	cmp	r3, #0
 80202f2:	d1a8      	bne.n	8020246 <_strtod_l+0xa0e>
 80202f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80202f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80202fa:	0d1b      	lsrs	r3, r3, #20
 80202fc:	051b      	lsls	r3, r3, #20
 80202fe:	429a      	cmp	r2, r3
 8020300:	d1a1      	bne.n	8020246 <_strtod_l+0xa0e>
 8020302:	4640      	mov	r0, r8
 8020304:	4649      	mov	r1, r9
 8020306:	f7e0 fcc7 	bl	8000c98 <__aeabi_d2lz>
 802030a:	f7e0 f95f 	bl	80005cc <__aeabi_l2d>
 802030e:	4602      	mov	r2, r0
 8020310:	460b      	mov	r3, r1
 8020312:	4640      	mov	r0, r8
 8020314:	4649      	mov	r1, r9
 8020316:	f7df ffcf 	bl	80002b8 <__aeabi_dsub>
 802031a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802031c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020320:	ea43 030a 	orr.w	r3, r3, sl
 8020324:	4313      	orrs	r3, r2
 8020326:	4680      	mov	r8, r0
 8020328:	4689      	mov	r9, r1
 802032a:	d055      	beq.n	80203d8 <_strtod_l+0xba0>
 802032c:	a336      	add	r3, pc, #216	; (adr r3, 8020408 <_strtod_l+0xbd0>)
 802032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020332:	f7e0 fbeb 	bl	8000b0c <__aeabi_dcmplt>
 8020336:	2800      	cmp	r0, #0
 8020338:	f47f acd0 	bne.w	801fcdc <_strtod_l+0x4a4>
 802033c:	a334      	add	r3, pc, #208	; (adr r3, 8020410 <_strtod_l+0xbd8>)
 802033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020342:	4640      	mov	r0, r8
 8020344:	4649      	mov	r1, r9
 8020346:	f7e0 fbff 	bl	8000b48 <__aeabi_dcmpgt>
 802034a:	2800      	cmp	r0, #0
 802034c:	f43f af7b 	beq.w	8020246 <_strtod_l+0xa0e>
 8020350:	e4c4      	b.n	801fcdc <_strtod_l+0x4a4>
 8020352:	9b04      	ldr	r3, [sp, #16]
 8020354:	b333      	cbz	r3, 80203a4 <_strtod_l+0xb6c>
 8020356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020358:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802035c:	d822      	bhi.n	80203a4 <_strtod_l+0xb6c>
 802035e:	a32e      	add	r3, pc, #184	; (adr r3, 8020418 <_strtod_l+0xbe0>)
 8020360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020364:	4640      	mov	r0, r8
 8020366:	4649      	mov	r1, r9
 8020368:	f7e0 fbda 	bl	8000b20 <__aeabi_dcmple>
 802036c:	b1a0      	cbz	r0, 8020398 <_strtod_l+0xb60>
 802036e:	4649      	mov	r1, r9
 8020370:	4640      	mov	r0, r8
 8020372:	f7e0 fc09 	bl	8000b88 <__aeabi_d2uiz>
 8020376:	2801      	cmp	r0, #1
 8020378:	bf38      	it	cc
 802037a:	2001      	movcc	r0, #1
 802037c:	f7e0 f8da 	bl	8000534 <__aeabi_ui2d>
 8020380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020382:	4680      	mov	r8, r0
 8020384:	4689      	mov	r9, r1
 8020386:	bb23      	cbnz	r3, 80203d2 <_strtod_l+0xb9a>
 8020388:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802038c:	9010      	str	r0, [sp, #64]	; 0x40
 802038e:	9311      	str	r3, [sp, #68]	; 0x44
 8020390:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8020394:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802039a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802039c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80203a0:	1a9b      	subs	r3, r3, r2
 80203a2:	9309      	str	r3, [sp, #36]	; 0x24
 80203a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80203a8:	eeb0 0a48 	vmov.f32	s0, s16
 80203ac:	eef0 0a68 	vmov.f32	s1, s17
 80203b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80203b4:	f001 f8fe 	bl	80215b4 <__ulp>
 80203b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80203bc:	ec53 2b10 	vmov	r2, r3, d0
 80203c0:	f7e0 f932 	bl	8000628 <__aeabi_dmul>
 80203c4:	ec53 2b18 	vmov	r2, r3, d8
 80203c8:	f7df ff78 	bl	80002bc <__adddf3>
 80203cc:	4682      	mov	sl, r0
 80203ce:	468b      	mov	fp, r1
 80203d0:	e78d      	b.n	80202ee <_strtod_l+0xab6>
 80203d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80203d6:	e7db      	b.n	8020390 <_strtod_l+0xb58>
 80203d8:	a311      	add	r3, pc, #68	; (adr r3, 8020420 <_strtod_l+0xbe8>)
 80203da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203de:	f7e0 fb95 	bl	8000b0c <__aeabi_dcmplt>
 80203e2:	e7b2      	b.n	802034a <_strtod_l+0xb12>
 80203e4:	2300      	movs	r3, #0
 80203e6:	930a      	str	r3, [sp, #40]	; 0x28
 80203e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80203ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80203ec:	6013      	str	r3, [r2, #0]
 80203ee:	f7ff ba6b 	b.w	801f8c8 <_strtod_l+0x90>
 80203f2:	2a65      	cmp	r2, #101	; 0x65
 80203f4:	f43f ab5f 	beq.w	801fab6 <_strtod_l+0x27e>
 80203f8:	2a45      	cmp	r2, #69	; 0x45
 80203fa:	f43f ab5c 	beq.w	801fab6 <_strtod_l+0x27e>
 80203fe:	2301      	movs	r3, #1
 8020400:	f7ff bb94 	b.w	801fb2c <_strtod_l+0x2f4>
 8020404:	f3af 8000 	nop.w
 8020408:	94a03595 	.word	0x94a03595
 802040c:	3fdfffff 	.word	0x3fdfffff
 8020410:	35afe535 	.word	0x35afe535
 8020414:	3fe00000 	.word	0x3fe00000
 8020418:	ffc00000 	.word	0xffc00000
 802041c:	41dfffff 	.word	0x41dfffff
 8020420:	94a03595 	.word	0x94a03595
 8020424:	3fcfffff 	.word	0x3fcfffff
 8020428:	3ff00000 	.word	0x3ff00000
 802042c:	7ff00000 	.word	0x7ff00000
 8020430:	7fe00000 	.word	0x7fe00000
 8020434:	7c9fffff 	.word	0x7c9fffff
 8020438:	3fe00000 	.word	0x3fe00000
 802043c:	bff00000 	.word	0xbff00000
 8020440:	7fefffff 	.word	0x7fefffff

08020444 <strtof>:
 8020444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020448:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80204f8 <strtof+0xb4>
 802044c:	4b26      	ldr	r3, [pc, #152]	; (80204e8 <strtof+0xa4>)
 802044e:	460a      	mov	r2, r1
 8020450:	ed2d 8b02 	vpush	{d8}
 8020454:	4601      	mov	r1, r0
 8020456:	f8d8 0000 	ldr.w	r0, [r8]
 802045a:	f7ff f9ed 	bl	801f838 <_strtod_l>
 802045e:	ec55 4b10 	vmov	r4, r5, d0
 8020462:	ee10 2a10 	vmov	r2, s0
 8020466:	ee10 0a10 	vmov	r0, s0
 802046a:	462b      	mov	r3, r5
 802046c:	4629      	mov	r1, r5
 802046e:	f7e0 fb75 	bl	8000b5c <__aeabi_dcmpun>
 8020472:	b190      	cbz	r0, 802049a <strtof+0x56>
 8020474:	2d00      	cmp	r5, #0
 8020476:	481d      	ldr	r0, [pc, #116]	; (80204ec <strtof+0xa8>)
 8020478:	da09      	bge.n	802048e <strtof+0x4a>
 802047a:	f7fe f813 	bl	801e4a4 <nanf>
 802047e:	eeb1 8a40 	vneg.f32	s16, s0
 8020482:	eeb0 0a48 	vmov.f32	s0, s16
 8020486:	ecbd 8b02 	vpop	{d8}
 802048a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802048e:	ecbd 8b02 	vpop	{d8}
 8020492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020496:	f7fe b805 	b.w	801e4a4 <nanf>
 802049a:	4620      	mov	r0, r4
 802049c:	4629      	mov	r1, r5
 802049e:	f7e0 fb93 	bl	8000bc8 <__aeabi_d2f>
 80204a2:	ee08 0a10 	vmov	s16, r0
 80204a6:	eddf 7a12 	vldr	s15, [pc, #72]	; 80204f0 <strtof+0xac>
 80204aa:	eeb0 7ac8 	vabs.f32	s14, s16
 80204ae:	eeb4 7a67 	vcmp.f32	s14, s15
 80204b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204b6:	dde4      	ble.n	8020482 <strtof+0x3e>
 80204b8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80204bc:	4b0d      	ldr	r3, [pc, #52]	; (80204f4 <strtof+0xb0>)
 80204be:	f04f 32ff 	mov.w	r2, #4294967295
 80204c2:	4620      	mov	r0, r4
 80204c4:	4639      	mov	r1, r7
 80204c6:	f7e0 fb49 	bl	8000b5c <__aeabi_dcmpun>
 80204ca:	b940      	cbnz	r0, 80204de <strtof+0x9a>
 80204cc:	4b09      	ldr	r3, [pc, #36]	; (80204f4 <strtof+0xb0>)
 80204ce:	f04f 32ff 	mov.w	r2, #4294967295
 80204d2:	4620      	mov	r0, r4
 80204d4:	4639      	mov	r1, r7
 80204d6:	f7e0 fb23 	bl	8000b20 <__aeabi_dcmple>
 80204da:	2800      	cmp	r0, #0
 80204dc:	d0d1      	beq.n	8020482 <strtof+0x3e>
 80204de:	f8d8 3000 	ldr.w	r3, [r8]
 80204e2:	2222      	movs	r2, #34	; 0x22
 80204e4:	601a      	str	r2, [r3, #0]
 80204e6:	e7cc      	b.n	8020482 <strtof+0x3e>
 80204e8:	20000394 	.word	0x20000394
 80204ec:	080230eb 	.word	0x080230eb
 80204f0:	7f7fffff 	.word	0x7f7fffff
 80204f4:	7fefffff 	.word	0x7fefffff
 80204f8:	20000330 	.word	0x20000330

080204fc <time>:
 80204fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80204fe:	4b0b      	ldr	r3, [pc, #44]	; (802052c <time+0x30>)
 8020500:	2200      	movs	r2, #0
 8020502:	4669      	mov	r1, sp
 8020504:	4604      	mov	r4, r0
 8020506:	6818      	ldr	r0, [r3, #0]
 8020508:	f000 fca2 	bl	8020e50 <_gettimeofday_r>
 802050c:	2800      	cmp	r0, #0
 802050e:	bfbe      	ittt	lt
 8020510:	f04f 32ff 	movlt.w	r2, #4294967295
 8020514:	f04f 33ff 	movlt.w	r3, #4294967295
 8020518:	e9cd 2300 	strdlt	r2, r3, [sp]
 802051c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020520:	b10c      	cbz	r4, 8020526 <time+0x2a>
 8020522:	e9c4 0100 	strd	r0, r1, [r4]
 8020526:	b004      	add	sp, #16
 8020528:	bd10      	pop	{r4, pc}
 802052a:	bf00      	nop
 802052c:	20000330 	.word	0x20000330

08020530 <__swbuf_r>:
 8020530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020532:	460e      	mov	r6, r1
 8020534:	4614      	mov	r4, r2
 8020536:	4605      	mov	r5, r0
 8020538:	b118      	cbz	r0, 8020542 <__swbuf_r+0x12>
 802053a:	6983      	ldr	r3, [r0, #24]
 802053c:	b90b      	cbnz	r3, 8020542 <__swbuf_r+0x12>
 802053e:	f7fe f8f1 	bl	801e724 <__sinit>
 8020542:	4b21      	ldr	r3, [pc, #132]	; (80205c8 <__swbuf_r+0x98>)
 8020544:	429c      	cmp	r4, r3
 8020546:	d12b      	bne.n	80205a0 <__swbuf_r+0x70>
 8020548:	686c      	ldr	r4, [r5, #4]
 802054a:	69a3      	ldr	r3, [r4, #24]
 802054c:	60a3      	str	r3, [r4, #8]
 802054e:	89a3      	ldrh	r3, [r4, #12]
 8020550:	071a      	lsls	r2, r3, #28
 8020552:	d52f      	bpl.n	80205b4 <__swbuf_r+0x84>
 8020554:	6923      	ldr	r3, [r4, #16]
 8020556:	b36b      	cbz	r3, 80205b4 <__swbuf_r+0x84>
 8020558:	6923      	ldr	r3, [r4, #16]
 802055a:	6820      	ldr	r0, [r4, #0]
 802055c:	1ac0      	subs	r0, r0, r3
 802055e:	6963      	ldr	r3, [r4, #20]
 8020560:	b2f6      	uxtb	r6, r6
 8020562:	4283      	cmp	r3, r0
 8020564:	4637      	mov	r7, r6
 8020566:	dc04      	bgt.n	8020572 <__swbuf_r+0x42>
 8020568:	4621      	mov	r1, r4
 802056a:	4628      	mov	r0, r5
 802056c:	f7fe f834 	bl	801e5d8 <_fflush_r>
 8020570:	bb30      	cbnz	r0, 80205c0 <__swbuf_r+0x90>
 8020572:	68a3      	ldr	r3, [r4, #8]
 8020574:	3b01      	subs	r3, #1
 8020576:	60a3      	str	r3, [r4, #8]
 8020578:	6823      	ldr	r3, [r4, #0]
 802057a:	1c5a      	adds	r2, r3, #1
 802057c:	6022      	str	r2, [r4, #0]
 802057e:	701e      	strb	r6, [r3, #0]
 8020580:	6963      	ldr	r3, [r4, #20]
 8020582:	3001      	adds	r0, #1
 8020584:	4283      	cmp	r3, r0
 8020586:	d004      	beq.n	8020592 <__swbuf_r+0x62>
 8020588:	89a3      	ldrh	r3, [r4, #12]
 802058a:	07db      	lsls	r3, r3, #31
 802058c:	d506      	bpl.n	802059c <__swbuf_r+0x6c>
 802058e:	2e0a      	cmp	r6, #10
 8020590:	d104      	bne.n	802059c <__swbuf_r+0x6c>
 8020592:	4621      	mov	r1, r4
 8020594:	4628      	mov	r0, r5
 8020596:	f7fe f81f 	bl	801e5d8 <_fflush_r>
 802059a:	b988      	cbnz	r0, 80205c0 <__swbuf_r+0x90>
 802059c:	4638      	mov	r0, r7
 802059e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205a0:	4b0a      	ldr	r3, [pc, #40]	; (80205cc <__swbuf_r+0x9c>)
 80205a2:	429c      	cmp	r4, r3
 80205a4:	d101      	bne.n	80205aa <__swbuf_r+0x7a>
 80205a6:	68ac      	ldr	r4, [r5, #8]
 80205a8:	e7cf      	b.n	802054a <__swbuf_r+0x1a>
 80205aa:	4b09      	ldr	r3, [pc, #36]	; (80205d0 <__swbuf_r+0xa0>)
 80205ac:	429c      	cmp	r4, r3
 80205ae:	bf08      	it	eq
 80205b0:	68ec      	ldreq	r4, [r5, #12]
 80205b2:	e7ca      	b.n	802054a <__swbuf_r+0x1a>
 80205b4:	4621      	mov	r1, r4
 80205b6:	4628      	mov	r0, r5
 80205b8:	f000 f82c 	bl	8020614 <__swsetup_r>
 80205bc:	2800      	cmp	r0, #0
 80205be:	d0cb      	beq.n	8020558 <__swbuf_r+0x28>
 80205c0:	f04f 37ff 	mov.w	r7, #4294967295
 80205c4:	e7ea      	b.n	802059c <__swbuf_r+0x6c>
 80205c6:	bf00      	nop
 80205c8:	08022fcc 	.word	0x08022fcc
 80205cc:	08022fec 	.word	0x08022fec
 80205d0:	08022fac 	.word	0x08022fac

080205d4 <__ascii_wctomb>:
 80205d4:	b149      	cbz	r1, 80205ea <__ascii_wctomb+0x16>
 80205d6:	2aff      	cmp	r2, #255	; 0xff
 80205d8:	bf85      	ittet	hi
 80205da:	238a      	movhi	r3, #138	; 0x8a
 80205dc:	6003      	strhi	r3, [r0, #0]
 80205de:	700a      	strbls	r2, [r1, #0]
 80205e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80205e4:	bf98      	it	ls
 80205e6:	2001      	movls	r0, #1
 80205e8:	4770      	bx	lr
 80205ea:	4608      	mov	r0, r1
 80205ec:	4770      	bx	lr
	...

080205f0 <_write_r>:
 80205f0:	b538      	push	{r3, r4, r5, lr}
 80205f2:	4d07      	ldr	r5, [pc, #28]	; (8020610 <_write_r+0x20>)
 80205f4:	4604      	mov	r4, r0
 80205f6:	4608      	mov	r0, r1
 80205f8:	4611      	mov	r1, r2
 80205fa:	2200      	movs	r2, #0
 80205fc:	602a      	str	r2, [r5, #0]
 80205fe:	461a      	mov	r2, r3
 8020600:	f7e2 fd3b 	bl	800307a <_write>
 8020604:	1c43      	adds	r3, r0, #1
 8020606:	d102      	bne.n	802060e <_write_r+0x1e>
 8020608:	682b      	ldr	r3, [r5, #0]
 802060a:	b103      	cbz	r3, 802060e <_write_r+0x1e>
 802060c:	6023      	str	r3, [r4, #0]
 802060e:	bd38      	pop	{r3, r4, r5, pc}
 8020610:	20010378 	.word	0x20010378

08020614 <__swsetup_r>:
 8020614:	4b32      	ldr	r3, [pc, #200]	; (80206e0 <__swsetup_r+0xcc>)
 8020616:	b570      	push	{r4, r5, r6, lr}
 8020618:	681d      	ldr	r5, [r3, #0]
 802061a:	4606      	mov	r6, r0
 802061c:	460c      	mov	r4, r1
 802061e:	b125      	cbz	r5, 802062a <__swsetup_r+0x16>
 8020620:	69ab      	ldr	r3, [r5, #24]
 8020622:	b913      	cbnz	r3, 802062a <__swsetup_r+0x16>
 8020624:	4628      	mov	r0, r5
 8020626:	f7fe f87d 	bl	801e724 <__sinit>
 802062a:	4b2e      	ldr	r3, [pc, #184]	; (80206e4 <__swsetup_r+0xd0>)
 802062c:	429c      	cmp	r4, r3
 802062e:	d10f      	bne.n	8020650 <__swsetup_r+0x3c>
 8020630:	686c      	ldr	r4, [r5, #4]
 8020632:	89a3      	ldrh	r3, [r4, #12]
 8020634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020638:	0719      	lsls	r1, r3, #28
 802063a:	d42c      	bmi.n	8020696 <__swsetup_r+0x82>
 802063c:	06dd      	lsls	r5, r3, #27
 802063e:	d411      	bmi.n	8020664 <__swsetup_r+0x50>
 8020640:	2309      	movs	r3, #9
 8020642:	6033      	str	r3, [r6, #0]
 8020644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020648:	81a3      	strh	r3, [r4, #12]
 802064a:	f04f 30ff 	mov.w	r0, #4294967295
 802064e:	e03e      	b.n	80206ce <__swsetup_r+0xba>
 8020650:	4b25      	ldr	r3, [pc, #148]	; (80206e8 <__swsetup_r+0xd4>)
 8020652:	429c      	cmp	r4, r3
 8020654:	d101      	bne.n	802065a <__swsetup_r+0x46>
 8020656:	68ac      	ldr	r4, [r5, #8]
 8020658:	e7eb      	b.n	8020632 <__swsetup_r+0x1e>
 802065a:	4b24      	ldr	r3, [pc, #144]	; (80206ec <__swsetup_r+0xd8>)
 802065c:	429c      	cmp	r4, r3
 802065e:	bf08      	it	eq
 8020660:	68ec      	ldreq	r4, [r5, #12]
 8020662:	e7e6      	b.n	8020632 <__swsetup_r+0x1e>
 8020664:	0758      	lsls	r0, r3, #29
 8020666:	d512      	bpl.n	802068e <__swsetup_r+0x7a>
 8020668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802066a:	b141      	cbz	r1, 802067e <__swsetup_r+0x6a>
 802066c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020670:	4299      	cmp	r1, r3
 8020672:	d002      	beq.n	802067a <__swsetup_r+0x66>
 8020674:	4630      	mov	r0, r6
 8020676:	f7fe fb21 	bl	801ecbc <_free_r>
 802067a:	2300      	movs	r3, #0
 802067c:	6363      	str	r3, [r4, #52]	; 0x34
 802067e:	89a3      	ldrh	r3, [r4, #12]
 8020680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020684:	81a3      	strh	r3, [r4, #12]
 8020686:	2300      	movs	r3, #0
 8020688:	6063      	str	r3, [r4, #4]
 802068a:	6923      	ldr	r3, [r4, #16]
 802068c:	6023      	str	r3, [r4, #0]
 802068e:	89a3      	ldrh	r3, [r4, #12]
 8020690:	f043 0308 	orr.w	r3, r3, #8
 8020694:	81a3      	strh	r3, [r4, #12]
 8020696:	6923      	ldr	r3, [r4, #16]
 8020698:	b94b      	cbnz	r3, 80206ae <__swsetup_r+0x9a>
 802069a:	89a3      	ldrh	r3, [r4, #12]
 802069c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80206a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80206a4:	d003      	beq.n	80206ae <__swsetup_r+0x9a>
 80206a6:	4621      	mov	r1, r4
 80206a8:	4630      	mov	r0, r6
 80206aa:	f7fe fa57 	bl	801eb5c <__smakebuf_r>
 80206ae:	89a0      	ldrh	r0, [r4, #12]
 80206b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80206b4:	f010 0301 	ands.w	r3, r0, #1
 80206b8:	d00a      	beq.n	80206d0 <__swsetup_r+0xbc>
 80206ba:	2300      	movs	r3, #0
 80206bc:	60a3      	str	r3, [r4, #8]
 80206be:	6963      	ldr	r3, [r4, #20]
 80206c0:	425b      	negs	r3, r3
 80206c2:	61a3      	str	r3, [r4, #24]
 80206c4:	6923      	ldr	r3, [r4, #16]
 80206c6:	b943      	cbnz	r3, 80206da <__swsetup_r+0xc6>
 80206c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80206cc:	d1ba      	bne.n	8020644 <__swsetup_r+0x30>
 80206ce:	bd70      	pop	{r4, r5, r6, pc}
 80206d0:	0781      	lsls	r1, r0, #30
 80206d2:	bf58      	it	pl
 80206d4:	6963      	ldrpl	r3, [r4, #20]
 80206d6:	60a3      	str	r3, [r4, #8]
 80206d8:	e7f4      	b.n	80206c4 <__swsetup_r+0xb0>
 80206da:	2000      	movs	r0, #0
 80206dc:	e7f7      	b.n	80206ce <__swsetup_r+0xba>
 80206de:	bf00      	nop
 80206e0:	20000330 	.word	0x20000330
 80206e4:	08022fcc 	.word	0x08022fcc
 80206e8:	08022fec 	.word	0x08022fec
 80206ec:	08022fac 	.word	0x08022fac

080206f0 <__assert_func>:
 80206f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80206f2:	4614      	mov	r4, r2
 80206f4:	461a      	mov	r2, r3
 80206f6:	4b09      	ldr	r3, [pc, #36]	; (802071c <__assert_func+0x2c>)
 80206f8:	681b      	ldr	r3, [r3, #0]
 80206fa:	4605      	mov	r5, r0
 80206fc:	68d8      	ldr	r0, [r3, #12]
 80206fe:	b14c      	cbz	r4, 8020714 <__assert_func+0x24>
 8020700:	4b07      	ldr	r3, [pc, #28]	; (8020720 <__assert_func+0x30>)
 8020702:	9100      	str	r1, [sp, #0]
 8020704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020708:	4906      	ldr	r1, [pc, #24]	; (8020724 <__assert_func+0x34>)
 802070a:	462b      	mov	r3, r5
 802070c:	f7fe f888 	bl	801e820 <fiprintf>
 8020710:	f7fd fece 	bl	801e4b0 <abort>
 8020714:	4b04      	ldr	r3, [pc, #16]	; (8020728 <__assert_func+0x38>)
 8020716:	461c      	mov	r4, r3
 8020718:	e7f3      	b.n	8020702 <__assert_func+0x12>
 802071a:	bf00      	nop
 802071c:	20000330 	.word	0x20000330
 8020720:	080230b0 	.word	0x080230b0
 8020724:	080230bd 	.word	0x080230bd
 8020728:	080230eb 	.word	0x080230eb

0802072c <_close_r>:
 802072c:	b538      	push	{r3, r4, r5, lr}
 802072e:	4d06      	ldr	r5, [pc, #24]	; (8020748 <_close_r+0x1c>)
 8020730:	2300      	movs	r3, #0
 8020732:	4604      	mov	r4, r0
 8020734:	4608      	mov	r0, r1
 8020736:	602b      	str	r3, [r5, #0]
 8020738:	f7e2 fcbb 	bl	80030b2 <_close>
 802073c:	1c43      	adds	r3, r0, #1
 802073e:	d102      	bne.n	8020746 <_close_r+0x1a>
 8020740:	682b      	ldr	r3, [r5, #0]
 8020742:	b103      	cbz	r3, 8020746 <_close_r+0x1a>
 8020744:	6023      	str	r3, [r4, #0]
 8020746:	bd38      	pop	{r3, r4, r5, pc}
 8020748:	20010378 	.word	0x20010378

0802074c <_fstat_r>:
 802074c:	b538      	push	{r3, r4, r5, lr}
 802074e:	4d07      	ldr	r5, [pc, #28]	; (802076c <_fstat_r+0x20>)
 8020750:	2300      	movs	r3, #0
 8020752:	4604      	mov	r4, r0
 8020754:	4608      	mov	r0, r1
 8020756:	4611      	mov	r1, r2
 8020758:	602b      	str	r3, [r5, #0]
 802075a:	f7e2 fcb6 	bl	80030ca <_fstat>
 802075e:	1c43      	adds	r3, r0, #1
 8020760:	d102      	bne.n	8020768 <_fstat_r+0x1c>
 8020762:	682b      	ldr	r3, [r5, #0]
 8020764:	b103      	cbz	r3, 8020768 <_fstat_r+0x1c>
 8020766:	6023      	str	r3, [r4, #0]
 8020768:	bd38      	pop	{r3, r4, r5, pc}
 802076a:	bf00      	nop
 802076c:	20010378 	.word	0x20010378

08020770 <rshift>:
 8020770:	6903      	ldr	r3, [r0, #16]
 8020772:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802077a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802077e:	f100 0414 	add.w	r4, r0, #20
 8020782:	dd45      	ble.n	8020810 <rshift+0xa0>
 8020784:	f011 011f 	ands.w	r1, r1, #31
 8020788:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802078c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020790:	d10c      	bne.n	80207ac <rshift+0x3c>
 8020792:	f100 0710 	add.w	r7, r0, #16
 8020796:	4629      	mov	r1, r5
 8020798:	42b1      	cmp	r1, r6
 802079a:	d334      	bcc.n	8020806 <rshift+0x96>
 802079c:	1a9b      	subs	r3, r3, r2
 802079e:	009b      	lsls	r3, r3, #2
 80207a0:	1eea      	subs	r2, r5, #3
 80207a2:	4296      	cmp	r6, r2
 80207a4:	bf38      	it	cc
 80207a6:	2300      	movcc	r3, #0
 80207a8:	4423      	add	r3, r4
 80207aa:	e015      	b.n	80207d8 <rshift+0x68>
 80207ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80207b0:	f1c1 0820 	rsb	r8, r1, #32
 80207b4:	40cf      	lsrs	r7, r1
 80207b6:	f105 0e04 	add.w	lr, r5, #4
 80207ba:	46a1      	mov	r9, r4
 80207bc:	4576      	cmp	r6, lr
 80207be:	46f4      	mov	ip, lr
 80207c0:	d815      	bhi.n	80207ee <rshift+0x7e>
 80207c2:	1a9a      	subs	r2, r3, r2
 80207c4:	0092      	lsls	r2, r2, #2
 80207c6:	3a04      	subs	r2, #4
 80207c8:	3501      	adds	r5, #1
 80207ca:	42ae      	cmp	r6, r5
 80207cc:	bf38      	it	cc
 80207ce:	2200      	movcc	r2, #0
 80207d0:	18a3      	adds	r3, r4, r2
 80207d2:	50a7      	str	r7, [r4, r2]
 80207d4:	b107      	cbz	r7, 80207d8 <rshift+0x68>
 80207d6:	3304      	adds	r3, #4
 80207d8:	1b1a      	subs	r2, r3, r4
 80207da:	42a3      	cmp	r3, r4
 80207dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80207e0:	bf08      	it	eq
 80207e2:	2300      	moveq	r3, #0
 80207e4:	6102      	str	r2, [r0, #16]
 80207e6:	bf08      	it	eq
 80207e8:	6143      	streq	r3, [r0, #20]
 80207ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80207ee:	f8dc c000 	ldr.w	ip, [ip]
 80207f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80207f6:	ea4c 0707 	orr.w	r7, ip, r7
 80207fa:	f849 7b04 	str.w	r7, [r9], #4
 80207fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020802:	40cf      	lsrs	r7, r1
 8020804:	e7da      	b.n	80207bc <rshift+0x4c>
 8020806:	f851 cb04 	ldr.w	ip, [r1], #4
 802080a:	f847 cf04 	str.w	ip, [r7, #4]!
 802080e:	e7c3      	b.n	8020798 <rshift+0x28>
 8020810:	4623      	mov	r3, r4
 8020812:	e7e1      	b.n	80207d8 <rshift+0x68>

08020814 <__hexdig_fun>:
 8020814:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8020818:	2b09      	cmp	r3, #9
 802081a:	d802      	bhi.n	8020822 <__hexdig_fun+0xe>
 802081c:	3820      	subs	r0, #32
 802081e:	b2c0      	uxtb	r0, r0
 8020820:	4770      	bx	lr
 8020822:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8020826:	2b05      	cmp	r3, #5
 8020828:	d801      	bhi.n	802082e <__hexdig_fun+0x1a>
 802082a:	3847      	subs	r0, #71	; 0x47
 802082c:	e7f7      	b.n	802081e <__hexdig_fun+0xa>
 802082e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8020832:	2b05      	cmp	r3, #5
 8020834:	d801      	bhi.n	802083a <__hexdig_fun+0x26>
 8020836:	3827      	subs	r0, #39	; 0x27
 8020838:	e7f1      	b.n	802081e <__hexdig_fun+0xa>
 802083a:	2000      	movs	r0, #0
 802083c:	4770      	bx	lr
	...

08020840 <__gethex>:
 8020840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020844:	ed2d 8b02 	vpush	{d8}
 8020848:	b089      	sub	sp, #36	; 0x24
 802084a:	ee08 0a10 	vmov	s16, r0
 802084e:	9304      	str	r3, [sp, #16]
 8020850:	4bb4      	ldr	r3, [pc, #720]	; (8020b24 <__gethex+0x2e4>)
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	9301      	str	r3, [sp, #4]
 8020856:	4618      	mov	r0, r3
 8020858:	468b      	mov	fp, r1
 802085a:	4690      	mov	r8, r2
 802085c:	f7df fd20 	bl	80002a0 <strlen>
 8020860:	9b01      	ldr	r3, [sp, #4]
 8020862:	f8db 2000 	ldr.w	r2, [fp]
 8020866:	4403      	add	r3, r0
 8020868:	4682      	mov	sl, r0
 802086a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802086e:	9305      	str	r3, [sp, #20]
 8020870:	1c93      	adds	r3, r2, #2
 8020872:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8020876:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802087a:	32fe      	adds	r2, #254	; 0xfe
 802087c:	18d1      	adds	r1, r2, r3
 802087e:	461f      	mov	r7, r3
 8020880:	f813 0b01 	ldrb.w	r0, [r3], #1
 8020884:	9100      	str	r1, [sp, #0]
 8020886:	2830      	cmp	r0, #48	; 0x30
 8020888:	d0f8      	beq.n	802087c <__gethex+0x3c>
 802088a:	f7ff ffc3 	bl	8020814 <__hexdig_fun>
 802088e:	4604      	mov	r4, r0
 8020890:	2800      	cmp	r0, #0
 8020892:	d13a      	bne.n	802090a <__gethex+0xca>
 8020894:	9901      	ldr	r1, [sp, #4]
 8020896:	4652      	mov	r2, sl
 8020898:	4638      	mov	r0, r7
 802089a:	f7fe ff71 	bl	801f780 <strncmp>
 802089e:	4605      	mov	r5, r0
 80208a0:	2800      	cmp	r0, #0
 80208a2:	d168      	bne.n	8020976 <__gethex+0x136>
 80208a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80208a8:	eb07 060a 	add.w	r6, r7, sl
 80208ac:	f7ff ffb2 	bl	8020814 <__hexdig_fun>
 80208b0:	2800      	cmp	r0, #0
 80208b2:	d062      	beq.n	802097a <__gethex+0x13a>
 80208b4:	4633      	mov	r3, r6
 80208b6:	7818      	ldrb	r0, [r3, #0]
 80208b8:	2830      	cmp	r0, #48	; 0x30
 80208ba:	461f      	mov	r7, r3
 80208bc:	f103 0301 	add.w	r3, r3, #1
 80208c0:	d0f9      	beq.n	80208b6 <__gethex+0x76>
 80208c2:	f7ff ffa7 	bl	8020814 <__hexdig_fun>
 80208c6:	2301      	movs	r3, #1
 80208c8:	fab0 f480 	clz	r4, r0
 80208cc:	0964      	lsrs	r4, r4, #5
 80208ce:	4635      	mov	r5, r6
 80208d0:	9300      	str	r3, [sp, #0]
 80208d2:	463a      	mov	r2, r7
 80208d4:	4616      	mov	r6, r2
 80208d6:	3201      	adds	r2, #1
 80208d8:	7830      	ldrb	r0, [r6, #0]
 80208da:	f7ff ff9b 	bl	8020814 <__hexdig_fun>
 80208de:	2800      	cmp	r0, #0
 80208e0:	d1f8      	bne.n	80208d4 <__gethex+0x94>
 80208e2:	9901      	ldr	r1, [sp, #4]
 80208e4:	4652      	mov	r2, sl
 80208e6:	4630      	mov	r0, r6
 80208e8:	f7fe ff4a 	bl	801f780 <strncmp>
 80208ec:	b980      	cbnz	r0, 8020910 <__gethex+0xd0>
 80208ee:	b94d      	cbnz	r5, 8020904 <__gethex+0xc4>
 80208f0:	eb06 050a 	add.w	r5, r6, sl
 80208f4:	462a      	mov	r2, r5
 80208f6:	4616      	mov	r6, r2
 80208f8:	3201      	adds	r2, #1
 80208fa:	7830      	ldrb	r0, [r6, #0]
 80208fc:	f7ff ff8a 	bl	8020814 <__hexdig_fun>
 8020900:	2800      	cmp	r0, #0
 8020902:	d1f8      	bne.n	80208f6 <__gethex+0xb6>
 8020904:	1bad      	subs	r5, r5, r6
 8020906:	00ad      	lsls	r5, r5, #2
 8020908:	e004      	b.n	8020914 <__gethex+0xd4>
 802090a:	2400      	movs	r4, #0
 802090c:	4625      	mov	r5, r4
 802090e:	e7e0      	b.n	80208d2 <__gethex+0x92>
 8020910:	2d00      	cmp	r5, #0
 8020912:	d1f7      	bne.n	8020904 <__gethex+0xc4>
 8020914:	7833      	ldrb	r3, [r6, #0]
 8020916:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802091a:	2b50      	cmp	r3, #80	; 0x50
 802091c:	d13b      	bne.n	8020996 <__gethex+0x156>
 802091e:	7873      	ldrb	r3, [r6, #1]
 8020920:	2b2b      	cmp	r3, #43	; 0x2b
 8020922:	d02c      	beq.n	802097e <__gethex+0x13e>
 8020924:	2b2d      	cmp	r3, #45	; 0x2d
 8020926:	d02e      	beq.n	8020986 <__gethex+0x146>
 8020928:	1c71      	adds	r1, r6, #1
 802092a:	f04f 0900 	mov.w	r9, #0
 802092e:	7808      	ldrb	r0, [r1, #0]
 8020930:	f7ff ff70 	bl	8020814 <__hexdig_fun>
 8020934:	1e43      	subs	r3, r0, #1
 8020936:	b2db      	uxtb	r3, r3
 8020938:	2b18      	cmp	r3, #24
 802093a:	d82c      	bhi.n	8020996 <__gethex+0x156>
 802093c:	f1a0 0210 	sub.w	r2, r0, #16
 8020940:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020944:	f7ff ff66 	bl	8020814 <__hexdig_fun>
 8020948:	1e43      	subs	r3, r0, #1
 802094a:	b2db      	uxtb	r3, r3
 802094c:	2b18      	cmp	r3, #24
 802094e:	d91d      	bls.n	802098c <__gethex+0x14c>
 8020950:	f1b9 0f00 	cmp.w	r9, #0
 8020954:	d000      	beq.n	8020958 <__gethex+0x118>
 8020956:	4252      	negs	r2, r2
 8020958:	4415      	add	r5, r2
 802095a:	f8cb 1000 	str.w	r1, [fp]
 802095e:	b1e4      	cbz	r4, 802099a <__gethex+0x15a>
 8020960:	9b00      	ldr	r3, [sp, #0]
 8020962:	2b00      	cmp	r3, #0
 8020964:	bf14      	ite	ne
 8020966:	2700      	movne	r7, #0
 8020968:	2706      	moveq	r7, #6
 802096a:	4638      	mov	r0, r7
 802096c:	b009      	add	sp, #36	; 0x24
 802096e:	ecbd 8b02 	vpop	{d8}
 8020972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020976:	463e      	mov	r6, r7
 8020978:	4625      	mov	r5, r4
 802097a:	2401      	movs	r4, #1
 802097c:	e7ca      	b.n	8020914 <__gethex+0xd4>
 802097e:	f04f 0900 	mov.w	r9, #0
 8020982:	1cb1      	adds	r1, r6, #2
 8020984:	e7d3      	b.n	802092e <__gethex+0xee>
 8020986:	f04f 0901 	mov.w	r9, #1
 802098a:	e7fa      	b.n	8020982 <__gethex+0x142>
 802098c:	230a      	movs	r3, #10
 802098e:	fb03 0202 	mla	r2, r3, r2, r0
 8020992:	3a10      	subs	r2, #16
 8020994:	e7d4      	b.n	8020940 <__gethex+0x100>
 8020996:	4631      	mov	r1, r6
 8020998:	e7df      	b.n	802095a <__gethex+0x11a>
 802099a:	1bf3      	subs	r3, r6, r7
 802099c:	3b01      	subs	r3, #1
 802099e:	4621      	mov	r1, r4
 80209a0:	2b07      	cmp	r3, #7
 80209a2:	dc0b      	bgt.n	80209bc <__gethex+0x17c>
 80209a4:	ee18 0a10 	vmov	r0, s16
 80209a8:	f000 fa92 	bl	8020ed0 <_Balloc>
 80209ac:	4604      	mov	r4, r0
 80209ae:	b940      	cbnz	r0, 80209c2 <__gethex+0x182>
 80209b0:	4b5d      	ldr	r3, [pc, #372]	; (8020b28 <__gethex+0x2e8>)
 80209b2:	4602      	mov	r2, r0
 80209b4:	21de      	movs	r1, #222	; 0xde
 80209b6:	485d      	ldr	r0, [pc, #372]	; (8020b2c <__gethex+0x2ec>)
 80209b8:	f7ff fe9a 	bl	80206f0 <__assert_func>
 80209bc:	3101      	adds	r1, #1
 80209be:	105b      	asrs	r3, r3, #1
 80209c0:	e7ee      	b.n	80209a0 <__gethex+0x160>
 80209c2:	f100 0914 	add.w	r9, r0, #20
 80209c6:	f04f 0b00 	mov.w	fp, #0
 80209ca:	f1ca 0301 	rsb	r3, sl, #1
 80209ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80209d2:	f8cd b000 	str.w	fp, [sp]
 80209d6:	9306      	str	r3, [sp, #24]
 80209d8:	42b7      	cmp	r7, r6
 80209da:	d340      	bcc.n	8020a5e <__gethex+0x21e>
 80209dc:	9802      	ldr	r0, [sp, #8]
 80209de:	9b00      	ldr	r3, [sp, #0]
 80209e0:	f840 3b04 	str.w	r3, [r0], #4
 80209e4:	eba0 0009 	sub.w	r0, r0, r9
 80209e8:	1080      	asrs	r0, r0, #2
 80209ea:	0146      	lsls	r6, r0, #5
 80209ec:	6120      	str	r0, [r4, #16]
 80209ee:	4618      	mov	r0, r3
 80209f0:	f000 fb60 	bl	80210b4 <__hi0bits>
 80209f4:	1a30      	subs	r0, r6, r0
 80209f6:	f8d8 6000 	ldr.w	r6, [r8]
 80209fa:	42b0      	cmp	r0, r6
 80209fc:	dd63      	ble.n	8020ac6 <__gethex+0x286>
 80209fe:	1b87      	subs	r7, r0, r6
 8020a00:	4639      	mov	r1, r7
 8020a02:	4620      	mov	r0, r4
 8020a04:	f000 ff04 	bl	8021810 <__any_on>
 8020a08:	4682      	mov	sl, r0
 8020a0a:	b1a8      	cbz	r0, 8020a38 <__gethex+0x1f8>
 8020a0c:	1e7b      	subs	r3, r7, #1
 8020a0e:	1159      	asrs	r1, r3, #5
 8020a10:	f003 021f 	and.w	r2, r3, #31
 8020a14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8020a18:	f04f 0a01 	mov.w	sl, #1
 8020a1c:	fa0a f202 	lsl.w	r2, sl, r2
 8020a20:	420a      	tst	r2, r1
 8020a22:	d009      	beq.n	8020a38 <__gethex+0x1f8>
 8020a24:	4553      	cmp	r3, sl
 8020a26:	dd05      	ble.n	8020a34 <__gethex+0x1f4>
 8020a28:	1eb9      	subs	r1, r7, #2
 8020a2a:	4620      	mov	r0, r4
 8020a2c:	f000 fef0 	bl	8021810 <__any_on>
 8020a30:	2800      	cmp	r0, #0
 8020a32:	d145      	bne.n	8020ac0 <__gethex+0x280>
 8020a34:	f04f 0a02 	mov.w	sl, #2
 8020a38:	4639      	mov	r1, r7
 8020a3a:	4620      	mov	r0, r4
 8020a3c:	f7ff fe98 	bl	8020770 <rshift>
 8020a40:	443d      	add	r5, r7
 8020a42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020a46:	42ab      	cmp	r3, r5
 8020a48:	da4c      	bge.n	8020ae4 <__gethex+0x2a4>
 8020a4a:	ee18 0a10 	vmov	r0, s16
 8020a4e:	4621      	mov	r1, r4
 8020a50:	f000 fa7e 	bl	8020f50 <_Bfree>
 8020a54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020a56:	2300      	movs	r3, #0
 8020a58:	6013      	str	r3, [r2, #0]
 8020a5a:	27a3      	movs	r7, #163	; 0xa3
 8020a5c:	e785      	b.n	802096a <__gethex+0x12a>
 8020a5e:	1e73      	subs	r3, r6, #1
 8020a60:	9a05      	ldr	r2, [sp, #20]
 8020a62:	9303      	str	r3, [sp, #12]
 8020a64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8020a68:	4293      	cmp	r3, r2
 8020a6a:	d019      	beq.n	8020aa0 <__gethex+0x260>
 8020a6c:	f1bb 0f20 	cmp.w	fp, #32
 8020a70:	d107      	bne.n	8020a82 <__gethex+0x242>
 8020a72:	9b02      	ldr	r3, [sp, #8]
 8020a74:	9a00      	ldr	r2, [sp, #0]
 8020a76:	f843 2b04 	str.w	r2, [r3], #4
 8020a7a:	9302      	str	r3, [sp, #8]
 8020a7c:	2300      	movs	r3, #0
 8020a7e:	9300      	str	r3, [sp, #0]
 8020a80:	469b      	mov	fp, r3
 8020a82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8020a86:	f7ff fec5 	bl	8020814 <__hexdig_fun>
 8020a8a:	9b00      	ldr	r3, [sp, #0]
 8020a8c:	f000 000f 	and.w	r0, r0, #15
 8020a90:	fa00 f00b 	lsl.w	r0, r0, fp
 8020a94:	4303      	orrs	r3, r0
 8020a96:	9300      	str	r3, [sp, #0]
 8020a98:	f10b 0b04 	add.w	fp, fp, #4
 8020a9c:	9b03      	ldr	r3, [sp, #12]
 8020a9e:	e00d      	b.n	8020abc <__gethex+0x27c>
 8020aa0:	9b03      	ldr	r3, [sp, #12]
 8020aa2:	9a06      	ldr	r2, [sp, #24]
 8020aa4:	4413      	add	r3, r2
 8020aa6:	42bb      	cmp	r3, r7
 8020aa8:	d3e0      	bcc.n	8020a6c <__gethex+0x22c>
 8020aaa:	4618      	mov	r0, r3
 8020aac:	9901      	ldr	r1, [sp, #4]
 8020aae:	9307      	str	r3, [sp, #28]
 8020ab0:	4652      	mov	r2, sl
 8020ab2:	f7fe fe65 	bl	801f780 <strncmp>
 8020ab6:	9b07      	ldr	r3, [sp, #28]
 8020ab8:	2800      	cmp	r0, #0
 8020aba:	d1d7      	bne.n	8020a6c <__gethex+0x22c>
 8020abc:	461e      	mov	r6, r3
 8020abe:	e78b      	b.n	80209d8 <__gethex+0x198>
 8020ac0:	f04f 0a03 	mov.w	sl, #3
 8020ac4:	e7b8      	b.n	8020a38 <__gethex+0x1f8>
 8020ac6:	da0a      	bge.n	8020ade <__gethex+0x29e>
 8020ac8:	1a37      	subs	r7, r6, r0
 8020aca:	4621      	mov	r1, r4
 8020acc:	ee18 0a10 	vmov	r0, s16
 8020ad0:	463a      	mov	r2, r7
 8020ad2:	f000 fc59 	bl	8021388 <__lshift>
 8020ad6:	1bed      	subs	r5, r5, r7
 8020ad8:	4604      	mov	r4, r0
 8020ada:	f100 0914 	add.w	r9, r0, #20
 8020ade:	f04f 0a00 	mov.w	sl, #0
 8020ae2:	e7ae      	b.n	8020a42 <__gethex+0x202>
 8020ae4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020ae8:	42a8      	cmp	r0, r5
 8020aea:	dd72      	ble.n	8020bd2 <__gethex+0x392>
 8020aec:	1b45      	subs	r5, r0, r5
 8020aee:	42ae      	cmp	r6, r5
 8020af0:	dc36      	bgt.n	8020b60 <__gethex+0x320>
 8020af2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020af6:	2b02      	cmp	r3, #2
 8020af8:	d02a      	beq.n	8020b50 <__gethex+0x310>
 8020afa:	2b03      	cmp	r3, #3
 8020afc:	d02c      	beq.n	8020b58 <__gethex+0x318>
 8020afe:	2b01      	cmp	r3, #1
 8020b00:	d11c      	bne.n	8020b3c <__gethex+0x2fc>
 8020b02:	42ae      	cmp	r6, r5
 8020b04:	d11a      	bne.n	8020b3c <__gethex+0x2fc>
 8020b06:	2e01      	cmp	r6, #1
 8020b08:	d112      	bne.n	8020b30 <__gethex+0x2f0>
 8020b0a:	9a04      	ldr	r2, [sp, #16]
 8020b0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020b10:	6013      	str	r3, [r2, #0]
 8020b12:	2301      	movs	r3, #1
 8020b14:	6123      	str	r3, [r4, #16]
 8020b16:	f8c9 3000 	str.w	r3, [r9]
 8020b1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020b1c:	2762      	movs	r7, #98	; 0x62
 8020b1e:	601c      	str	r4, [r3, #0]
 8020b20:	e723      	b.n	802096a <__gethex+0x12a>
 8020b22:	bf00      	nop
 8020b24:	08023160 	.word	0x08023160
 8020b28:	080230ec 	.word	0x080230ec
 8020b2c:	080230fd 	.word	0x080230fd
 8020b30:	1e71      	subs	r1, r6, #1
 8020b32:	4620      	mov	r0, r4
 8020b34:	f000 fe6c 	bl	8021810 <__any_on>
 8020b38:	2800      	cmp	r0, #0
 8020b3a:	d1e6      	bne.n	8020b0a <__gethex+0x2ca>
 8020b3c:	ee18 0a10 	vmov	r0, s16
 8020b40:	4621      	mov	r1, r4
 8020b42:	f000 fa05 	bl	8020f50 <_Bfree>
 8020b46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b48:	2300      	movs	r3, #0
 8020b4a:	6013      	str	r3, [r2, #0]
 8020b4c:	2750      	movs	r7, #80	; 0x50
 8020b4e:	e70c      	b.n	802096a <__gethex+0x12a>
 8020b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d1f2      	bne.n	8020b3c <__gethex+0x2fc>
 8020b56:	e7d8      	b.n	8020b0a <__gethex+0x2ca>
 8020b58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	d1d5      	bne.n	8020b0a <__gethex+0x2ca>
 8020b5e:	e7ed      	b.n	8020b3c <__gethex+0x2fc>
 8020b60:	1e6f      	subs	r7, r5, #1
 8020b62:	f1ba 0f00 	cmp.w	sl, #0
 8020b66:	d131      	bne.n	8020bcc <__gethex+0x38c>
 8020b68:	b127      	cbz	r7, 8020b74 <__gethex+0x334>
 8020b6a:	4639      	mov	r1, r7
 8020b6c:	4620      	mov	r0, r4
 8020b6e:	f000 fe4f 	bl	8021810 <__any_on>
 8020b72:	4682      	mov	sl, r0
 8020b74:	117b      	asrs	r3, r7, #5
 8020b76:	2101      	movs	r1, #1
 8020b78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020b7c:	f007 071f 	and.w	r7, r7, #31
 8020b80:	fa01 f707 	lsl.w	r7, r1, r7
 8020b84:	421f      	tst	r7, r3
 8020b86:	4629      	mov	r1, r5
 8020b88:	4620      	mov	r0, r4
 8020b8a:	bf18      	it	ne
 8020b8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8020b90:	1b76      	subs	r6, r6, r5
 8020b92:	f7ff fded 	bl	8020770 <rshift>
 8020b96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020b9a:	2702      	movs	r7, #2
 8020b9c:	f1ba 0f00 	cmp.w	sl, #0
 8020ba0:	d048      	beq.n	8020c34 <__gethex+0x3f4>
 8020ba2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020ba6:	2b02      	cmp	r3, #2
 8020ba8:	d015      	beq.n	8020bd6 <__gethex+0x396>
 8020baa:	2b03      	cmp	r3, #3
 8020bac:	d017      	beq.n	8020bde <__gethex+0x39e>
 8020bae:	2b01      	cmp	r3, #1
 8020bb0:	d109      	bne.n	8020bc6 <__gethex+0x386>
 8020bb2:	f01a 0f02 	tst.w	sl, #2
 8020bb6:	d006      	beq.n	8020bc6 <__gethex+0x386>
 8020bb8:	f8d9 0000 	ldr.w	r0, [r9]
 8020bbc:	ea4a 0a00 	orr.w	sl, sl, r0
 8020bc0:	f01a 0f01 	tst.w	sl, #1
 8020bc4:	d10e      	bne.n	8020be4 <__gethex+0x3a4>
 8020bc6:	f047 0710 	orr.w	r7, r7, #16
 8020bca:	e033      	b.n	8020c34 <__gethex+0x3f4>
 8020bcc:	f04f 0a01 	mov.w	sl, #1
 8020bd0:	e7d0      	b.n	8020b74 <__gethex+0x334>
 8020bd2:	2701      	movs	r7, #1
 8020bd4:	e7e2      	b.n	8020b9c <__gethex+0x35c>
 8020bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020bd8:	f1c3 0301 	rsb	r3, r3, #1
 8020bdc:	9315      	str	r3, [sp, #84]	; 0x54
 8020bde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	d0f0      	beq.n	8020bc6 <__gethex+0x386>
 8020be4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020be8:	f104 0314 	add.w	r3, r4, #20
 8020bec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8020bf0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8020bf4:	f04f 0c00 	mov.w	ip, #0
 8020bf8:	4618      	mov	r0, r3
 8020bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8020bfe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8020c02:	d01c      	beq.n	8020c3e <__gethex+0x3fe>
 8020c04:	3201      	adds	r2, #1
 8020c06:	6002      	str	r2, [r0, #0]
 8020c08:	2f02      	cmp	r7, #2
 8020c0a:	f104 0314 	add.w	r3, r4, #20
 8020c0e:	d13f      	bne.n	8020c90 <__gethex+0x450>
 8020c10:	f8d8 2000 	ldr.w	r2, [r8]
 8020c14:	3a01      	subs	r2, #1
 8020c16:	42b2      	cmp	r2, r6
 8020c18:	d10a      	bne.n	8020c30 <__gethex+0x3f0>
 8020c1a:	1171      	asrs	r1, r6, #5
 8020c1c:	2201      	movs	r2, #1
 8020c1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020c22:	f006 061f 	and.w	r6, r6, #31
 8020c26:	fa02 f606 	lsl.w	r6, r2, r6
 8020c2a:	421e      	tst	r6, r3
 8020c2c:	bf18      	it	ne
 8020c2e:	4617      	movne	r7, r2
 8020c30:	f047 0720 	orr.w	r7, r7, #32
 8020c34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020c36:	601c      	str	r4, [r3, #0]
 8020c38:	9b04      	ldr	r3, [sp, #16]
 8020c3a:	601d      	str	r5, [r3, #0]
 8020c3c:	e695      	b.n	802096a <__gethex+0x12a>
 8020c3e:	4299      	cmp	r1, r3
 8020c40:	f843 cc04 	str.w	ip, [r3, #-4]
 8020c44:	d8d8      	bhi.n	8020bf8 <__gethex+0x3b8>
 8020c46:	68a3      	ldr	r3, [r4, #8]
 8020c48:	459b      	cmp	fp, r3
 8020c4a:	db19      	blt.n	8020c80 <__gethex+0x440>
 8020c4c:	6861      	ldr	r1, [r4, #4]
 8020c4e:	ee18 0a10 	vmov	r0, s16
 8020c52:	3101      	adds	r1, #1
 8020c54:	f000 f93c 	bl	8020ed0 <_Balloc>
 8020c58:	4681      	mov	r9, r0
 8020c5a:	b918      	cbnz	r0, 8020c64 <__gethex+0x424>
 8020c5c:	4b1a      	ldr	r3, [pc, #104]	; (8020cc8 <__gethex+0x488>)
 8020c5e:	4602      	mov	r2, r0
 8020c60:	2184      	movs	r1, #132	; 0x84
 8020c62:	e6a8      	b.n	80209b6 <__gethex+0x176>
 8020c64:	6922      	ldr	r2, [r4, #16]
 8020c66:	3202      	adds	r2, #2
 8020c68:	f104 010c 	add.w	r1, r4, #12
 8020c6c:	0092      	lsls	r2, r2, #2
 8020c6e:	300c      	adds	r0, #12
 8020c70:	f7fd ffde 	bl	801ec30 <memcpy>
 8020c74:	4621      	mov	r1, r4
 8020c76:	ee18 0a10 	vmov	r0, s16
 8020c7a:	f000 f969 	bl	8020f50 <_Bfree>
 8020c7e:	464c      	mov	r4, r9
 8020c80:	6923      	ldr	r3, [r4, #16]
 8020c82:	1c5a      	adds	r2, r3, #1
 8020c84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020c88:	6122      	str	r2, [r4, #16]
 8020c8a:	2201      	movs	r2, #1
 8020c8c:	615a      	str	r2, [r3, #20]
 8020c8e:	e7bb      	b.n	8020c08 <__gethex+0x3c8>
 8020c90:	6922      	ldr	r2, [r4, #16]
 8020c92:	455a      	cmp	r2, fp
 8020c94:	dd0b      	ble.n	8020cae <__gethex+0x46e>
 8020c96:	2101      	movs	r1, #1
 8020c98:	4620      	mov	r0, r4
 8020c9a:	f7ff fd69 	bl	8020770 <rshift>
 8020c9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020ca2:	3501      	adds	r5, #1
 8020ca4:	42ab      	cmp	r3, r5
 8020ca6:	f6ff aed0 	blt.w	8020a4a <__gethex+0x20a>
 8020caa:	2701      	movs	r7, #1
 8020cac:	e7c0      	b.n	8020c30 <__gethex+0x3f0>
 8020cae:	f016 061f 	ands.w	r6, r6, #31
 8020cb2:	d0fa      	beq.n	8020caa <__gethex+0x46a>
 8020cb4:	4453      	add	r3, sl
 8020cb6:	f1c6 0620 	rsb	r6, r6, #32
 8020cba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8020cbe:	f000 f9f9 	bl	80210b4 <__hi0bits>
 8020cc2:	42b0      	cmp	r0, r6
 8020cc4:	dbe7      	blt.n	8020c96 <__gethex+0x456>
 8020cc6:	e7f0      	b.n	8020caa <__gethex+0x46a>
 8020cc8:	080230ec 	.word	0x080230ec

08020ccc <L_shift>:
 8020ccc:	f1c2 0208 	rsb	r2, r2, #8
 8020cd0:	0092      	lsls	r2, r2, #2
 8020cd2:	b570      	push	{r4, r5, r6, lr}
 8020cd4:	f1c2 0620 	rsb	r6, r2, #32
 8020cd8:	6843      	ldr	r3, [r0, #4]
 8020cda:	6804      	ldr	r4, [r0, #0]
 8020cdc:	fa03 f506 	lsl.w	r5, r3, r6
 8020ce0:	432c      	orrs	r4, r5
 8020ce2:	40d3      	lsrs	r3, r2
 8020ce4:	6004      	str	r4, [r0, #0]
 8020ce6:	f840 3f04 	str.w	r3, [r0, #4]!
 8020cea:	4288      	cmp	r0, r1
 8020cec:	d3f4      	bcc.n	8020cd8 <L_shift+0xc>
 8020cee:	bd70      	pop	{r4, r5, r6, pc}

08020cf0 <__match>:
 8020cf0:	b530      	push	{r4, r5, lr}
 8020cf2:	6803      	ldr	r3, [r0, #0]
 8020cf4:	3301      	adds	r3, #1
 8020cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020cfa:	b914      	cbnz	r4, 8020d02 <__match+0x12>
 8020cfc:	6003      	str	r3, [r0, #0]
 8020cfe:	2001      	movs	r0, #1
 8020d00:	bd30      	pop	{r4, r5, pc}
 8020d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020d06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8020d0a:	2d19      	cmp	r5, #25
 8020d0c:	bf98      	it	ls
 8020d0e:	3220      	addls	r2, #32
 8020d10:	42a2      	cmp	r2, r4
 8020d12:	d0f0      	beq.n	8020cf6 <__match+0x6>
 8020d14:	2000      	movs	r0, #0
 8020d16:	e7f3      	b.n	8020d00 <__match+0x10>

08020d18 <__hexnan>:
 8020d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d1c:	680b      	ldr	r3, [r1, #0]
 8020d1e:	115e      	asrs	r6, r3, #5
 8020d20:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020d24:	f013 031f 	ands.w	r3, r3, #31
 8020d28:	b087      	sub	sp, #28
 8020d2a:	bf18      	it	ne
 8020d2c:	3604      	addne	r6, #4
 8020d2e:	2500      	movs	r5, #0
 8020d30:	1f37      	subs	r7, r6, #4
 8020d32:	4690      	mov	r8, r2
 8020d34:	6802      	ldr	r2, [r0, #0]
 8020d36:	9301      	str	r3, [sp, #4]
 8020d38:	4682      	mov	sl, r0
 8020d3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8020d3e:	46b9      	mov	r9, r7
 8020d40:	463c      	mov	r4, r7
 8020d42:	9502      	str	r5, [sp, #8]
 8020d44:	46ab      	mov	fp, r5
 8020d46:	7851      	ldrb	r1, [r2, #1]
 8020d48:	1c53      	adds	r3, r2, #1
 8020d4a:	9303      	str	r3, [sp, #12]
 8020d4c:	b341      	cbz	r1, 8020da0 <__hexnan+0x88>
 8020d4e:	4608      	mov	r0, r1
 8020d50:	9205      	str	r2, [sp, #20]
 8020d52:	9104      	str	r1, [sp, #16]
 8020d54:	f7ff fd5e 	bl	8020814 <__hexdig_fun>
 8020d58:	2800      	cmp	r0, #0
 8020d5a:	d14f      	bne.n	8020dfc <__hexnan+0xe4>
 8020d5c:	9904      	ldr	r1, [sp, #16]
 8020d5e:	9a05      	ldr	r2, [sp, #20]
 8020d60:	2920      	cmp	r1, #32
 8020d62:	d818      	bhi.n	8020d96 <__hexnan+0x7e>
 8020d64:	9b02      	ldr	r3, [sp, #8]
 8020d66:	459b      	cmp	fp, r3
 8020d68:	dd13      	ble.n	8020d92 <__hexnan+0x7a>
 8020d6a:	454c      	cmp	r4, r9
 8020d6c:	d206      	bcs.n	8020d7c <__hexnan+0x64>
 8020d6e:	2d07      	cmp	r5, #7
 8020d70:	dc04      	bgt.n	8020d7c <__hexnan+0x64>
 8020d72:	462a      	mov	r2, r5
 8020d74:	4649      	mov	r1, r9
 8020d76:	4620      	mov	r0, r4
 8020d78:	f7ff ffa8 	bl	8020ccc <L_shift>
 8020d7c:	4544      	cmp	r4, r8
 8020d7e:	d950      	bls.n	8020e22 <__hexnan+0x10a>
 8020d80:	2300      	movs	r3, #0
 8020d82:	f1a4 0904 	sub.w	r9, r4, #4
 8020d86:	f844 3c04 	str.w	r3, [r4, #-4]
 8020d8a:	f8cd b008 	str.w	fp, [sp, #8]
 8020d8e:	464c      	mov	r4, r9
 8020d90:	461d      	mov	r5, r3
 8020d92:	9a03      	ldr	r2, [sp, #12]
 8020d94:	e7d7      	b.n	8020d46 <__hexnan+0x2e>
 8020d96:	2929      	cmp	r1, #41	; 0x29
 8020d98:	d156      	bne.n	8020e48 <__hexnan+0x130>
 8020d9a:	3202      	adds	r2, #2
 8020d9c:	f8ca 2000 	str.w	r2, [sl]
 8020da0:	f1bb 0f00 	cmp.w	fp, #0
 8020da4:	d050      	beq.n	8020e48 <__hexnan+0x130>
 8020da6:	454c      	cmp	r4, r9
 8020da8:	d206      	bcs.n	8020db8 <__hexnan+0xa0>
 8020daa:	2d07      	cmp	r5, #7
 8020dac:	dc04      	bgt.n	8020db8 <__hexnan+0xa0>
 8020dae:	462a      	mov	r2, r5
 8020db0:	4649      	mov	r1, r9
 8020db2:	4620      	mov	r0, r4
 8020db4:	f7ff ff8a 	bl	8020ccc <L_shift>
 8020db8:	4544      	cmp	r4, r8
 8020dba:	d934      	bls.n	8020e26 <__hexnan+0x10e>
 8020dbc:	f1a8 0204 	sub.w	r2, r8, #4
 8020dc0:	4623      	mov	r3, r4
 8020dc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8020dc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8020dca:	429f      	cmp	r7, r3
 8020dcc:	d2f9      	bcs.n	8020dc2 <__hexnan+0xaa>
 8020dce:	1b3b      	subs	r3, r7, r4
 8020dd0:	f023 0303 	bic.w	r3, r3, #3
 8020dd4:	3304      	adds	r3, #4
 8020dd6:	3401      	adds	r4, #1
 8020dd8:	3e03      	subs	r6, #3
 8020dda:	42b4      	cmp	r4, r6
 8020ddc:	bf88      	it	hi
 8020dde:	2304      	movhi	r3, #4
 8020de0:	4443      	add	r3, r8
 8020de2:	2200      	movs	r2, #0
 8020de4:	f843 2b04 	str.w	r2, [r3], #4
 8020de8:	429f      	cmp	r7, r3
 8020dea:	d2fb      	bcs.n	8020de4 <__hexnan+0xcc>
 8020dec:	683b      	ldr	r3, [r7, #0]
 8020dee:	b91b      	cbnz	r3, 8020df8 <__hexnan+0xe0>
 8020df0:	4547      	cmp	r7, r8
 8020df2:	d127      	bne.n	8020e44 <__hexnan+0x12c>
 8020df4:	2301      	movs	r3, #1
 8020df6:	603b      	str	r3, [r7, #0]
 8020df8:	2005      	movs	r0, #5
 8020dfa:	e026      	b.n	8020e4a <__hexnan+0x132>
 8020dfc:	3501      	adds	r5, #1
 8020dfe:	2d08      	cmp	r5, #8
 8020e00:	f10b 0b01 	add.w	fp, fp, #1
 8020e04:	dd06      	ble.n	8020e14 <__hexnan+0xfc>
 8020e06:	4544      	cmp	r4, r8
 8020e08:	d9c3      	bls.n	8020d92 <__hexnan+0x7a>
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8020e10:	2501      	movs	r5, #1
 8020e12:	3c04      	subs	r4, #4
 8020e14:	6822      	ldr	r2, [r4, #0]
 8020e16:	f000 000f 	and.w	r0, r0, #15
 8020e1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8020e1e:	6022      	str	r2, [r4, #0]
 8020e20:	e7b7      	b.n	8020d92 <__hexnan+0x7a>
 8020e22:	2508      	movs	r5, #8
 8020e24:	e7b5      	b.n	8020d92 <__hexnan+0x7a>
 8020e26:	9b01      	ldr	r3, [sp, #4]
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	d0df      	beq.n	8020dec <__hexnan+0xd4>
 8020e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8020e30:	f1c3 0320 	rsb	r3, r3, #32
 8020e34:	fa22 f303 	lsr.w	r3, r2, r3
 8020e38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020e3c:	401a      	ands	r2, r3
 8020e3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8020e42:	e7d3      	b.n	8020dec <__hexnan+0xd4>
 8020e44:	3f04      	subs	r7, #4
 8020e46:	e7d1      	b.n	8020dec <__hexnan+0xd4>
 8020e48:	2004      	movs	r0, #4
 8020e4a:	b007      	add	sp, #28
 8020e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e50 <_gettimeofday_r>:
 8020e50:	b538      	push	{r3, r4, r5, lr}
 8020e52:	4d07      	ldr	r5, [pc, #28]	; (8020e70 <_gettimeofday_r+0x20>)
 8020e54:	2300      	movs	r3, #0
 8020e56:	4604      	mov	r4, r0
 8020e58:	4608      	mov	r0, r1
 8020e5a:	4611      	mov	r1, r2
 8020e5c:	602b      	str	r3, [r5, #0]
 8020e5e:	f000 fea7 	bl	8021bb0 <_gettimeofday>
 8020e62:	1c43      	adds	r3, r0, #1
 8020e64:	d102      	bne.n	8020e6c <_gettimeofday_r+0x1c>
 8020e66:	682b      	ldr	r3, [r5, #0]
 8020e68:	b103      	cbz	r3, 8020e6c <_gettimeofday_r+0x1c>
 8020e6a:	6023      	str	r3, [r4, #0]
 8020e6c:	bd38      	pop	{r3, r4, r5, pc}
 8020e6e:	bf00      	nop
 8020e70:	20010378 	.word	0x20010378

08020e74 <_isatty_r>:
 8020e74:	b538      	push	{r3, r4, r5, lr}
 8020e76:	4d06      	ldr	r5, [pc, #24]	; (8020e90 <_isatty_r+0x1c>)
 8020e78:	2300      	movs	r3, #0
 8020e7a:	4604      	mov	r4, r0
 8020e7c:	4608      	mov	r0, r1
 8020e7e:	602b      	str	r3, [r5, #0]
 8020e80:	f7e2 f933 	bl	80030ea <_isatty>
 8020e84:	1c43      	adds	r3, r0, #1
 8020e86:	d102      	bne.n	8020e8e <_isatty_r+0x1a>
 8020e88:	682b      	ldr	r3, [r5, #0]
 8020e8a:	b103      	cbz	r3, 8020e8e <_isatty_r+0x1a>
 8020e8c:	6023      	str	r3, [r4, #0]
 8020e8e:	bd38      	pop	{r3, r4, r5, pc}
 8020e90:	20010378 	.word	0x20010378

08020e94 <_lseek_r>:
 8020e94:	b538      	push	{r3, r4, r5, lr}
 8020e96:	4d07      	ldr	r5, [pc, #28]	; (8020eb4 <_lseek_r+0x20>)
 8020e98:	4604      	mov	r4, r0
 8020e9a:	4608      	mov	r0, r1
 8020e9c:	4611      	mov	r1, r2
 8020e9e:	2200      	movs	r2, #0
 8020ea0:	602a      	str	r2, [r5, #0]
 8020ea2:	461a      	mov	r2, r3
 8020ea4:	f7e2 f92c 	bl	8003100 <_lseek>
 8020ea8:	1c43      	adds	r3, r0, #1
 8020eaa:	d102      	bne.n	8020eb2 <_lseek_r+0x1e>
 8020eac:	682b      	ldr	r3, [r5, #0]
 8020eae:	b103      	cbz	r3, 8020eb2 <_lseek_r+0x1e>
 8020eb0:	6023      	str	r3, [r4, #0]
 8020eb2:	bd38      	pop	{r3, r4, r5, pc}
 8020eb4:	20010378 	.word	0x20010378

08020eb8 <__malloc_lock>:
 8020eb8:	4801      	ldr	r0, [pc, #4]	; (8020ec0 <__malloc_lock+0x8>)
 8020eba:	f7fd be28 	b.w	801eb0e <__retarget_lock_acquire_recursive>
 8020ebe:	bf00      	nop
 8020ec0:	2001036c 	.word	0x2001036c

08020ec4 <__malloc_unlock>:
 8020ec4:	4801      	ldr	r0, [pc, #4]	; (8020ecc <__malloc_unlock+0x8>)
 8020ec6:	f7fd be23 	b.w	801eb10 <__retarget_lock_release_recursive>
 8020eca:	bf00      	nop
 8020ecc:	2001036c 	.word	0x2001036c

08020ed0 <_Balloc>:
 8020ed0:	b570      	push	{r4, r5, r6, lr}
 8020ed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020ed4:	4604      	mov	r4, r0
 8020ed6:	460d      	mov	r5, r1
 8020ed8:	b976      	cbnz	r6, 8020ef8 <_Balloc+0x28>
 8020eda:	2010      	movs	r0, #16
 8020edc:	f7fd fe7e 	bl	801ebdc <malloc>
 8020ee0:	4602      	mov	r2, r0
 8020ee2:	6260      	str	r0, [r4, #36]	; 0x24
 8020ee4:	b920      	cbnz	r0, 8020ef0 <_Balloc+0x20>
 8020ee6:	4b18      	ldr	r3, [pc, #96]	; (8020f48 <_Balloc+0x78>)
 8020ee8:	4818      	ldr	r0, [pc, #96]	; (8020f4c <_Balloc+0x7c>)
 8020eea:	2166      	movs	r1, #102	; 0x66
 8020eec:	f7ff fc00 	bl	80206f0 <__assert_func>
 8020ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020ef4:	6006      	str	r6, [r0, #0]
 8020ef6:	60c6      	str	r6, [r0, #12]
 8020ef8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020efa:	68f3      	ldr	r3, [r6, #12]
 8020efc:	b183      	cbz	r3, 8020f20 <_Balloc+0x50>
 8020efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f00:	68db      	ldr	r3, [r3, #12]
 8020f02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020f06:	b9b8      	cbnz	r0, 8020f38 <_Balloc+0x68>
 8020f08:	2101      	movs	r1, #1
 8020f0a:	fa01 f605 	lsl.w	r6, r1, r5
 8020f0e:	1d72      	adds	r2, r6, #5
 8020f10:	0092      	lsls	r2, r2, #2
 8020f12:	4620      	mov	r0, r4
 8020f14:	f7fd febc 	bl	801ec90 <_calloc_r>
 8020f18:	b160      	cbz	r0, 8020f34 <_Balloc+0x64>
 8020f1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020f1e:	e00e      	b.n	8020f3e <_Balloc+0x6e>
 8020f20:	2221      	movs	r2, #33	; 0x21
 8020f22:	2104      	movs	r1, #4
 8020f24:	4620      	mov	r0, r4
 8020f26:	f7fd feb3 	bl	801ec90 <_calloc_r>
 8020f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f2c:	60f0      	str	r0, [r6, #12]
 8020f2e:	68db      	ldr	r3, [r3, #12]
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d1e4      	bne.n	8020efe <_Balloc+0x2e>
 8020f34:	2000      	movs	r0, #0
 8020f36:	bd70      	pop	{r4, r5, r6, pc}
 8020f38:	6802      	ldr	r2, [r0, #0]
 8020f3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020f3e:	2300      	movs	r3, #0
 8020f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020f44:	e7f7      	b.n	8020f36 <_Balloc+0x66>
 8020f46:	bf00      	nop
 8020f48:	0802316c 	.word	0x0802316c
 8020f4c:	08023183 	.word	0x08023183

08020f50 <_Bfree>:
 8020f50:	b570      	push	{r4, r5, r6, lr}
 8020f52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020f54:	4605      	mov	r5, r0
 8020f56:	460c      	mov	r4, r1
 8020f58:	b976      	cbnz	r6, 8020f78 <_Bfree+0x28>
 8020f5a:	2010      	movs	r0, #16
 8020f5c:	f7fd fe3e 	bl	801ebdc <malloc>
 8020f60:	4602      	mov	r2, r0
 8020f62:	6268      	str	r0, [r5, #36]	; 0x24
 8020f64:	b920      	cbnz	r0, 8020f70 <_Bfree+0x20>
 8020f66:	4b09      	ldr	r3, [pc, #36]	; (8020f8c <_Bfree+0x3c>)
 8020f68:	4809      	ldr	r0, [pc, #36]	; (8020f90 <_Bfree+0x40>)
 8020f6a:	218a      	movs	r1, #138	; 0x8a
 8020f6c:	f7ff fbc0 	bl	80206f0 <__assert_func>
 8020f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020f74:	6006      	str	r6, [r0, #0]
 8020f76:	60c6      	str	r6, [r0, #12]
 8020f78:	b13c      	cbz	r4, 8020f8a <_Bfree+0x3a>
 8020f7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020f7c:	6862      	ldr	r2, [r4, #4]
 8020f7e:	68db      	ldr	r3, [r3, #12]
 8020f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020f84:	6021      	str	r1, [r4, #0]
 8020f86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020f8a:	bd70      	pop	{r4, r5, r6, pc}
 8020f8c:	0802316c 	.word	0x0802316c
 8020f90:	08023183 	.word	0x08023183

08020f94 <__multadd>:
 8020f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f98:	690d      	ldr	r5, [r1, #16]
 8020f9a:	4607      	mov	r7, r0
 8020f9c:	460c      	mov	r4, r1
 8020f9e:	461e      	mov	r6, r3
 8020fa0:	f101 0c14 	add.w	ip, r1, #20
 8020fa4:	2000      	movs	r0, #0
 8020fa6:	f8dc 3000 	ldr.w	r3, [ip]
 8020faa:	b299      	uxth	r1, r3
 8020fac:	fb02 6101 	mla	r1, r2, r1, r6
 8020fb0:	0c1e      	lsrs	r6, r3, #16
 8020fb2:	0c0b      	lsrs	r3, r1, #16
 8020fb4:	fb02 3306 	mla	r3, r2, r6, r3
 8020fb8:	b289      	uxth	r1, r1
 8020fba:	3001      	adds	r0, #1
 8020fbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020fc0:	4285      	cmp	r5, r0
 8020fc2:	f84c 1b04 	str.w	r1, [ip], #4
 8020fc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020fca:	dcec      	bgt.n	8020fa6 <__multadd+0x12>
 8020fcc:	b30e      	cbz	r6, 8021012 <__multadd+0x7e>
 8020fce:	68a3      	ldr	r3, [r4, #8]
 8020fd0:	42ab      	cmp	r3, r5
 8020fd2:	dc19      	bgt.n	8021008 <__multadd+0x74>
 8020fd4:	6861      	ldr	r1, [r4, #4]
 8020fd6:	4638      	mov	r0, r7
 8020fd8:	3101      	adds	r1, #1
 8020fda:	f7ff ff79 	bl	8020ed0 <_Balloc>
 8020fde:	4680      	mov	r8, r0
 8020fe0:	b928      	cbnz	r0, 8020fee <__multadd+0x5a>
 8020fe2:	4602      	mov	r2, r0
 8020fe4:	4b0c      	ldr	r3, [pc, #48]	; (8021018 <__multadd+0x84>)
 8020fe6:	480d      	ldr	r0, [pc, #52]	; (802101c <__multadd+0x88>)
 8020fe8:	21b5      	movs	r1, #181	; 0xb5
 8020fea:	f7ff fb81 	bl	80206f0 <__assert_func>
 8020fee:	6922      	ldr	r2, [r4, #16]
 8020ff0:	3202      	adds	r2, #2
 8020ff2:	f104 010c 	add.w	r1, r4, #12
 8020ff6:	0092      	lsls	r2, r2, #2
 8020ff8:	300c      	adds	r0, #12
 8020ffa:	f7fd fe19 	bl	801ec30 <memcpy>
 8020ffe:	4621      	mov	r1, r4
 8021000:	4638      	mov	r0, r7
 8021002:	f7ff ffa5 	bl	8020f50 <_Bfree>
 8021006:	4644      	mov	r4, r8
 8021008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802100c:	3501      	adds	r5, #1
 802100e:	615e      	str	r6, [r3, #20]
 8021010:	6125      	str	r5, [r4, #16]
 8021012:	4620      	mov	r0, r4
 8021014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021018:	080230ec 	.word	0x080230ec
 802101c:	08023183 	.word	0x08023183

08021020 <__s2b>:
 8021020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021024:	460c      	mov	r4, r1
 8021026:	4615      	mov	r5, r2
 8021028:	461f      	mov	r7, r3
 802102a:	2209      	movs	r2, #9
 802102c:	3308      	adds	r3, #8
 802102e:	4606      	mov	r6, r0
 8021030:	fb93 f3f2 	sdiv	r3, r3, r2
 8021034:	2100      	movs	r1, #0
 8021036:	2201      	movs	r2, #1
 8021038:	429a      	cmp	r2, r3
 802103a:	db09      	blt.n	8021050 <__s2b+0x30>
 802103c:	4630      	mov	r0, r6
 802103e:	f7ff ff47 	bl	8020ed0 <_Balloc>
 8021042:	b940      	cbnz	r0, 8021056 <__s2b+0x36>
 8021044:	4602      	mov	r2, r0
 8021046:	4b19      	ldr	r3, [pc, #100]	; (80210ac <__s2b+0x8c>)
 8021048:	4819      	ldr	r0, [pc, #100]	; (80210b0 <__s2b+0x90>)
 802104a:	21ce      	movs	r1, #206	; 0xce
 802104c:	f7ff fb50 	bl	80206f0 <__assert_func>
 8021050:	0052      	lsls	r2, r2, #1
 8021052:	3101      	adds	r1, #1
 8021054:	e7f0      	b.n	8021038 <__s2b+0x18>
 8021056:	9b08      	ldr	r3, [sp, #32]
 8021058:	6143      	str	r3, [r0, #20]
 802105a:	2d09      	cmp	r5, #9
 802105c:	f04f 0301 	mov.w	r3, #1
 8021060:	6103      	str	r3, [r0, #16]
 8021062:	dd16      	ble.n	8021092 <__s2b+0x72>
 8021064:	f104 0909 	add.w	r9, r4, #9
 8021068:	46c8      	mov	r8, r9
 802106a:	442c      	add	r4, r5
 802106c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021070:	4601      	mov	r1, r0
 8021072:	3b30      	subs	r3, #48	; 0x30
 8021074:	220a      	movs	r2, #10
 8021076:	4630      	mov	r0, r6
 8021078:	f7ff ff8c 	bl	8020f94 <__multadd>
 802107c:	45a0      	cmp	r8, r4
 802107e:	d1f5      	bne.n	802106c <__s2b+0x4c>
 8021080:	f1a5 0408 	sub.w	r4, r5, #8
 8021084:	444c      	add	r4, r9
 8021086:	1b2d      	subs	r5, r5, r4
 8021088:	1963      	adds	r3, r4, r5
 802108a:	42bb      	cmp	r3, r7
 802108c:	db04      	blt.n	8021098 <__s2b+0x78>
 802108e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021092:	340a      	adds	r4, #10
 8021094:	2509      	movs	r5, #9
 8021096:	e7f6      	b.n	8021086 <__s2b+0x66>
 8021098:	f814 3b01 	ldrb.w	r3, [r4], #1
 802109c:	4601      	mov	r1, r0
 802109e:	3b30      	subs	r3, #48	; 0x30
 80210a0:	220a      	movs	r2, #10
 80210a2:	4630      	mov	r0, r6
 80210a4:	f7ff ff76 	bl	8020f94 <__multadd>
 80210a8:	e7ee      	b.n	8021088 <__s2b+0x68>
 80210aa:	bf00      	nop
 80210ac:	080230ec 	.word	0x080230ec
 80210b0:	08023183 	.word	0x08023183

080210b4 <__hi0bits>:
 80210b4:	0c03      	lsrs	r3, r0, #16
 80210b6:	041b      	lsls	r3, r3, #16
 80210b8:	b9d3      	cbnz	r3, 80210f0 <__hi0bits+0x3c>
 80210ba:	0400      	lsls	r0, r0, #16
 80210bc:	2310      	movs	r3, #16
 80210be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80210c2:	bf04      	itt	eq
 80210c4:	0200      	lsleq	r0, r0, #8
 80210c6:	3308      	addeq	r3, #8
 80210c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80210cc:	bf04      	itt	eq
 80210ce:	0100      	lsleq	r0, r0, #4
 80210d0:	3304      	addeq	r3, #4
 80210d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80210d6:	bf04      	itt	eq
 80210d8:	0080      	lsleq	r0, r0, #2
 80210da:	3302      	addeq	r3, #2
 80210dc:	2800      	cmp	r0, #0
 80210de:	db05      	blt.n	80210ec <__hi0bits+0x38>
 80210e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80210e4:	f103 0301 	add.w	r3, r3, #1
 80210e8:	bf08      	it	eq
 80210ea:	2320      	moveq	r3, #32
 80210ec:	4618      	mov	r0, r3
 80210ee:	4770      	bx	lr
 80210f0:	2300      	movs	r3, #0
 80210f2:	e7e4      	b.n	80210be <__hi0bits+0xa>

080210f4 <__lo0bits>:
 80210f4:	6803      	ldr	r3, [r0, #0]
 80210f6:	f013 0207 	ands.w	r2, r3, #7
 80210fa:	4601      	mov	r1, r0
 80210fc:	d00b      	beq.n	8021116 <__lo0bits+0x22>
 80210fe:	07da      	lsls	r2, r3, #31
 8021100:	d423      	bmi.n	802114a <__lo0bits+0x56>
 8021102:	0798      	lsls	r0, r3, #30
 8021104:	bf49      	itett	mi
 8021106:	085b      	lsrmi	r3, r3, #1
 8021108:	089b      	lsrpl	r3, r3, #2
 802110a:	2001      	movmi	r0, #1
 802110c:	600b      	strmi	r3, [r1, #0]
 802110e:	bf5c      	itt	pl
 8021110:	600b      	strpl	r3, [r1, #0]
 8021112:	2002      	movpl	r0, #2
 8021114:	4770      	bx	lr
 8021116:	b298      	uxth	r0, r3
 8021118:	b9a8      	cbnz	r0, 8021146 <__lo0bits+0x52>
 802111a:	0c1b      	lsrs	r3, r3, #16
 802111c:	2010      	movs	r0, #16
 802111e:	b2da      	uxtb	r2, r3
 8021120:	b90a      	cbnz	r2, 8021126 <__lo0bits+0x32>
 8021122:	3008      	adds	r0, #8
 8021124:	0a1b      	lsrs	r3, r3, #8
 8021126:	071a      	lsls	r2, r3, #28
 8021128:	bf04      	itt	eq
 802112a:	091b      	lsreq	r3, r3, #4
 802112c:	3004      	addeq	r0, #4
 802112e:	079a      	lsls	r2, r3, #30
 8021130:	bf04      	itt	eq
 8021132:	089b      	lsreq	r3, r3, #2
 8021134:	3002      	addeq	r0, #2
 8021136:	07da      	lsls	r2, r3, #31
 8021138:	d403      	bmi.n	8021142 <__lo0bits+0x4e>
 802113a:	085b      	lsrs	r3, r3, #1
 802113c:	f100 0001 	add.w	r0, r0, #1
 8021140:	d005      	beq.n	802114e <__lo0bits+0x5a>
 8021142:	600b      	str	r3, [r1, #0]
 8021144:	4770      	bx	lr
 8021146:	4610      	mov	r0, r2
 8021148:	e7e9      	b.n	802111e <__lo0bits+0x2a>
 802114a:	2000      	movs	r0, #0
 802114c:	4770      	bx	lr
 802114e:	2020      	movs	r0, #32
 8021150:	4770      	bx	lr
	...

08021154 <__i2b>:
 8021154:	b510      	push	{r4, lr}
 8021156:	460c      	mov	r4, r1
 8021158:	2101      	movs	r1, #1
 802115a:	f7ff feb9 	bl	8020ed0 <_Balloc>
 802115e:	4602      	mov	r2, r0
 8021160:	b928      	cbnz	r0, 802116e <__i2b+0x1a>
 8021162:	4b05      	ldr	r3, [pc, #20]	; (8021178 <__i2b+0x24>)
 8021164:	4805      	ldr	r0, [pc, #20]	; (802117c <__i2b+0x28>)
 8021166:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802116a:	f7ff fac1 	bl	80206f0 <__assert_func>
 802116e:	2301      	movs	r3, #1
 8021170:	6144      	str	r4, [r0, #20]
 8021172:	6103      	str	r3, [r0, #16]
 8021174:	bd10      	pop	{r4, pc}
 8021176:	bf00      	nop
 8021178:	080230ec 	.word	0x080230ec
 802117c:	08023183 	.word	0x08023183

08021180 <__multiply>:
 8021180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021184:	4691      	mov	r9, r2
 8021186:	690a      	ldr	r2, [r1, #16]
 8021188:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802118c:	429a      	cmp	r2, r3
 802118e:	bfb8      	it	lt
 8021190:	460b      	movlt	r3, r1
 8021192:	460c      	mov	r4, r1
 8021194:	bfbc      	itt	lt
 8021196:	464c      	movlt	r4, r9
 8021198:	4699      	movlt	r9, r3
 802119a:	6927      	ldr	r7, [r4, #16]
 802119c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80211a0:	68a3      	ldr	r3, [r4, #8]
 80211a2:	6861      	ldr	r1, [r4, #4]
 80211a4:	eb07 060a 	add.w	r6, r7, sl
 80211a8:	42b3      	cmp	r3, r6
 80211aa:	b085      	sub	sp, #20
 80211ac:	bfb8      	it	lt
 80211ae:	3101      	addlt	r1, #1
 80211b0:	f7ff fe8e 	bl	8020ed0 <_Balloc>
 80211b4:	b930      	cbnz	r0, 80211c4 <__multiply+0x44>
 80211b6:	4602      	mov	r2, r0
 80211b8:	4b44      	ldr	r3, [pc, #272]	; (80212cc <__multiply+0x14c>)
 80211ba:	4845      	ldr	r0, [pc, #276]	; (80212d0 <__multiply+0x150>)
 80211bc:	f240 115d 	movw	r1, #349	; 0x15d
 80211c0:	f7ff fa96 	bl	80206f0 <__assert_func>
 80211c4:	f100 0514 	add.w	r5, r0, #20
 80211c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80211cc:	462b      	mov	r3, r5
 80211ce:	2200      	movs	r2, #0
 80211d0:	4543      	cmp	r3, r8
 80211d2:	d321      	bcc.n	8021218 <__multiply+0x98>
 80211d4:	f104 0314 	add.w	r3, r4, #20
 80211d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80211dc:	f109 0314 	add.w	r3, r9, #20
 80211e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80211e4:	9202      	str	r2, [sp, #8]
 80211e6:	1b3a      	subs	r2, r7, r4
 80211e8:	3a15      	subs	r2, #21
 80211ea:	f022 0203 	bic.w	r2, r2, #3
 80211ee:	3204      	adds	r2, #4
 80211f0:	f104 0115 	add.w	r1, r4, #21
 80211f4:	428f      	cmp	r7, r1
 80211f6:	bf38      	it	cc
 80211f8:	2204      	movcc	r2, #4
 80211fa:	9201      	str	r2, [sp, #4]
 80211fc:	9a02      	ldr	r2, [sp, #8]
 80211fe:	9303      	str	r3, [sp, #12]
 8021200:	429a      	cmp	r2, r3
 8021202:	d80c      	bhi.n	802121e <__multiply+0x9e>
 8021204:	2e00      	cmp	r6, #0
 8021206:	dd03      	ble.n	8021210 <__multiply+0x90>
 8021208:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802120c:	2b00      	cmp	r3, #0
 802120e:	d05a      	beq.n	80212c6 <__multiply+0x146>
 8021210:	6106      	str	r6, [r0, #16]
 8021212:	b005      	add	sp, #20
 8021214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021218:	f843 2b04 	str.w	r2, [r3], #4
 802121c:	e7d8      	b.n	80211d0 <__multiply+0x50>
 802121e:	f8b3 a000 	ldrh.w	sl, [r3]
 8021222:	f1ba 0f00 	cmp.w	sl, #0
 8021226:	d024      	beq.n	8021272 <__multiply+0xf2>
 8021228:	f104 0e14 	add.w	lr, r4, #20
 802122c:	46a9      	mov	r9, r5
 802122e:	f04f 0c00 	mov.w	ip, #0
 8021232:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021236:	f8d9 1000 	ldr.w	r1, [r9]
 802123a:	fa1f fb82 	uxth.w	fp, r2
 802123e:	b289      	uxth	r1, r1
 8021240:	fb0a 110b 	mla	r1, sl, fp, r1
 8021244:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021248:	f8d9 2000 	ldr.w	r2, [r9]
 802124c:	4461      	add	r1, ip
 802124e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021252:	fb0a c20b 	mla	r2, sl, fp, ip
 8021256:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802125a:	b289      	uxth	r1, r1
 802125c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021260:	4577      	cmp	r7, lr
 8021262:	f849 1b04 	str.w	r1, [r9], #4
 8021266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802126a:	d8e2      	bhi.n	8021232 <__multiply+0xb2>
 802126c:	9a01      	ldr	r2, [sp, #4]
 802126e:	f845 c002 	str.w	ip, [r5, r2]
 8021272:	9a03      	ldr	r2, [sp, #12]
 8021274:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021278:	3304      	adds	r3, #4
 802127a:	f1b9 0f00 	cmp.w	r9, #0
 802127e:	d020      	beq.n	80212c2 <__multiply+0x142>
 8021280:	6829      	ldr	r1, [r5, #0]
 8021282:	f104 0c14 	add.w	ip, r4, #20
 8021286:	46ae      	mov	lr, r5
 8021288:	f04f 0a00 	mov.w	sl, #0
 802128c:	f8bc b000 	ldrh.w	fp, [ip]
 8021290:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021294:	fb09 220b 	mla	r2, r9, fp, r2
 8021298:	4492      	add	sl, r2
 802129a:	b289      	uxth	r1, r1
 802129c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80212a0:	f84e 1b04 	str.w	r1, [lr], #4
 80212a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80212a8:	f8be 1000 	ldrh.w	r1, [lr]
 80212ac:	0c12      	lsrs	r2, r2, #16
 80212ae:	fb09 1102 	mla	r1, r9, r2, r1
 80212b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80212b6:	4567      	cmp	r7, ip
 80212b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80212bc:	d8e6      	bhi.n	802128c <__multiply+0x10c>
 80212be:	9a01      	ldr	r2, [sp, #4]
 80212c0:	50a9      	str	r1, [r5, r2]
 80212c2:	3504      	adds	r5, #4
 80212c4:	e79a      	b.n	80211fc <__multiply+0x7c>
 80212c6:	3e01      	subs	r6, #1
 80212c8:	e79c      	b.n	8021204 <__multiply+0x84>
 80212ca:	bf00      	nop
 80212cc:	080230ec 	.word	0x080230ec
 80212d0:	08023183 	.word	0x08023183

080212d4 <__pow5mult>:
 80212d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212d8:	4615      	mov	r5, r2
 80212da:	f012 0203 	ands.w	r2, r2, #3
 80212de:	4606      	mov	r6, r0
 80212e0:	460f      	mov	r7, r1
 80212e2:	d007      	beq.n	80212f4 <__pow5mult+0x20>
 80212e4:	4c25      	ldr	r4, [pc, #148]	; (802137c <__pow5mult+0xa8>)
 80212e6:	3a01      	subs	r2, #1
 80212e8:	2300      	movs	r3, #0
 80212ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80212ee:	f7ff fe51 	bl	8020f94 <__multadd>
 80212f2:	4607      	mov	r7, r0
 80212f4:	10ad      	asrs	r5, r5, #2
 80212f6:	d03d      	beq.n	8021374 <__pow5mult+0xa0>
 80212f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80212fa:	b97c      	cbnz	r4, 802131c <__pow5mult+0x48>
 80212fc:	2010      	movs	r0, #16
 80212fe:	f7fd fc6d 	bl	801ebdc <malloc>
 8021302:	4602      	mov	r2, r0
 8021304:	6270      	str	r0, [r6, #36]	; 0x24
 8021306:	b928      	cbnz	r0, 8021314 <__pow5mult+0x40>
 8021308:	4b1d      	ldr	r3, [pc, #116]	; (8021380 <__pow5mult+0xac>)
 802130a:	481e      	ldr	r0, [pc, #120]	; (8021384 <__pow5mult+0xb0>)
 802130c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021310:	f7ff f9ee 	bl	80206f0 <__assert_func>
 8021314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021318:	6004      	str	r4, [r0, #0]
 802131a:	60c4      	str	r4, [r0, #12]
 802131c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021324:	b94c      	cbnz	r4, 802133a <__pow5mult+0x66>
 8021326:	f240 2171 	movw	r1, #625	; 0x271
 802132a:	4630      	mov	r0, r6
 802132c:	f7ff ff12 	bl	8021154 <__i2b>
 8021330:	2300      	movs	r3, #0
 8021332:	f8c8 0008 	str.w	r0, [r8, #8]
 8021336:	4604      	mov	r4, r0
 8021338:	6003      	str	r3, [r0, #0]
 802133a:	f04f 0900 	mov.w	r9, #0
 802133e:	07eb      	lsls	r3, r5, #31
 8021340:	d50a      	bpl.n	8021358 <__pow5mult+0x84>
 8021342:	4639      	mov	r1, r7
 8021344:	4622      	mov	r2, r4
 8021346:	4630      	mov	r0, r6
 8021348:	f7ff ff1a 	bl	8021180 <__multiply>
 802134c:	4639      	mov	r1, r7
 802134e:	4680      	mov	r8, r0
 8021350:	4630      	mov	r0, r6
 8021352:	f7ff fdfd 	bl	8020f50 <_Bfree>
 8021356:	4647      	mov	r7, r8
 8021358:	106d      	asrs	r5, r5, #1
 802135a:	d00b      	beq.n	8021374 <__pow5mult+0xa0>
 802135c:	6820      	ldr	r0, [r4, #0]
 802135e:	b938      	cbnz	r0, 8021370 <__pow5mult+0x9c>
 8021360:	4622      	mov	r2, r4
 8021362:	4621      	mov	r1, r4
 8021364:	4630      	mov	r0, r6
 8021366:	f7ff ff0b 	bl	8021180 <__multiply>
 802136a:	6020      	str	r0, [r4, #0]
 802136c:	f8c0 9000 	str.w	r9, [r0]
 8021370:	4604      	mov	r4, r0
 8021372:	e7e4      	b.n	802133e <__pow5mult+0x6a>
 8021374:	4638      	mov	r0, r7
 8021376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802137a:	bf00      	nop
 802137c:	080232d0 	.word	0x080232d0
 8021380:	0802316c 	.word	0x0802316c
 8021384:	08023183 	.word	0x08023183

08021388 <__lshift>:
 8021388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802138c:	460c      	mov	r4, r1
 802138e:	6849      	ldr	r1, [r1, #4]
 8021390:	6923      	ldr	r3, [r4, #16]
 8021392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021396:	68a3      	ldr	r3, [r4, #8]
 8021398:	4607      	mov	r7, r0
 802139a:	4691      	mov	r9, r2
 802139c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80213a0:	f108 0601 	add.w	r6, r8, #1
 80213a4:	42b3      	cmp	r3, r6
 80213a6:	db0b      	blt.n	80213c0 <__lshift+0x38>
 80213a8:	4638      	mov	r0, r7
 80213aa:	f7ff fd91 	bl	8020ed0 <_Balloc>
 80213ae:	4605      	mov	r5, r0
 80213b0:	b948      	cbnz	r0, 80213c6 <__lshift+0x3e>
 80213b2:	4602      	mov	r2, r0
 80213b4:	4b2a      	ldr	r3, [pc, #168]	; (8021460 <__lshift+0xd8>)
 80213b6:	482b      	ldr	r0, [pc, #172]	; (8021464 <__lshift+0xdc>)
 80213b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80213bc:	f7ff f998 	bl	80206f0 <__assert_func>
 80213c0:	3101      	adds	r1, #1
 80213c2:	005b      	lsls	r3, r3, #1
 80213c4:	e7ee      	b.n	80213a4 <__lshift+0x1c>
 80213c6:	2300      	movs	r3, #0
 80213c8:	f100 0114 	add.w	r1, r0, #20
 80213cc:	f100 0210 	add.w	r2, r0, #16
 80213d0:	4618      	mov	r0, r3
 80213d2:	4553      	cmp	r3, sl
 80213d4:	db37      	blt.n	8021446 <__lshift+0xbe>
 80213d6:	6920      	ldr	r0, [r4, #16]
 80213d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80213dc:	f104 0314 	add.w	r3, r4, #20
 80213e0:	f019 091f 	ands.w	r9, r9, #31
 80213e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80213e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80213ec:	d02f      	beq.n	802144e <__lshift+0xc6>
 80213ee:	f1c9 0e20 	rsb	lr, r9, #32
 80213f2:	468a      	mov	sl, r1
 80213f4:	f04f 0c00 	mov.w	ip, #0
 80213f8:	681a      	ldr	r2, [r3, #0]
 80213fa:	fa02 f209 	lsl.w	r2, r2, r9
 80213fe:	ea42 020c 	orr.w	r2, r2, ip
 8021402:	f84a 2b04 	str.w	r2, [sl], #4
 8021406:	f853 2b04 	ldr.w	r2, [r3], #4
 802140a:	4298      	cmp	r0, r3
 802140c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8021410:	d8f2      	bhi.n	80213f8 <__lshift+0x70>
 8021412:	1b03      	subs	r3, r0, r4
 8021414:	3b15      	subs	r3, #21
 8021416:	f023 0303 	bic.w	r3, r3, #3
 802141a:	3304      	adds	r3, #4
 802141c:	f104 0215 	add.w	r2, r4, #21
 8021420:	4290      	cmp	r0, r2
 8021422:	bf38      	it	cc
 8021424:	2304      	movcc	r3, #4
 8021426:	f841 c003 	str.w	ip, [r1, r3]
 802142a:	f1bc 0f00 	cmp.w	ip, #0
 802142e:	d001      	beq.n	8021434 <__lshift+0xac>
 8021430:	f108 0602 	add.w	r6, r8, #2
 8021434:	3e01      	subs	r6, #1
 8021436:	4638      	mov	r0, r7
 8021438:	612e      	str	r6, [r5, #16]
 802143a:	4621      	mov	r1, r4
 802143c:	f7ff fd88 	bl	8020f50 <_Bfree>
 8021440:	4628      	mov	r0, r5
 8021442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021446:	f842 0f04 	str.w	r0, [r2, #4]!
 802144a:	3301      	adds	r3, #1
 802144c:	e7c1      	b.n	80213d2 <__lshift+0x4a>
 802144e:	3904      	subs	r1, #4
 8021450:	f853 2b04 	ldr.w	r2, [r3], #4
 8021454:	f841 2f04 	str.w	r2, [r1, #4]!
 8021458:	4298      	cmp	r0, r3
 802145a:	d8f9      	bhi.n	8021450 <__lshift+0xc8>
 802145c:	e7ea      	b.n	8021434 <__lshift+0xac>
 802145e:	bf00      	nop
 8021460:	080230ec 	.word	0x080230ec
 8021464:	08023183 	.word	0x08023183

08021468 <__mcmp>:
 8021468:	b530      	push	{r4, r5, lr}
 802146a:	6902      	ldr	r2, [r0, #16]
 802146c:	690c      	ldr	r4, [r1, #16]
 802146e:	1b12      	subs	r2, r2, r4
 8021470:	d10e      	bne.n	8021490 <__mcmp+0x28>
 8021472:	f100 0314 	add.w	r3, r0, #20
 8021476:	3114      	adds	r1, #20
 8021478:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802147c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021480:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021484:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021488:	42a5      	cmp	r5, r4
 802148a:	d003      	beq.n	8021494 <__mcmp+0x2c>
 802148c:	d305      	bcc.n	802149a <__mcmp+0x32>
 802148e:	2201      	movs	r2, #1
 8021490:	4610      	mov	r0, r2
 8021492:	bd30      	pop	{r4, r5, pc}
 8021494:	4283      	cmp	r3, r0
 8021496:	d3f3      	bcc.n	8021480 <__mcmp+0x18>
 8021498:	e7fa      	b.n	8021490 <__mcmp+0x28>
 802149a:	f04f 32ff 	mov.w	r2, #4294967295
 802149e:	e7f7      	b.n	8021490 <__mcmp+0x28>

080214a0 <__mdiff>:
 80214a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214a4:	460c      	mov	r4, r1
 80214a6:	4606      	mov	r6, r0
 80214a8:	4611      	mov	r1, r2
 80214aa:	4620      	mov	r0, r4
 80214ac:	4690      	mov	r8, r2
 80214ae:	f7ff ffdb 	bl	8021468 <__mcmp>
 80214b2:	1e05      	subs	r5, r0, #0
 80214b4:	d110      	bne.n	80214d8 <__mdiff+0x38>
 80214b6:	4629      	mov	r1, r5
 80214b8:	4630      	mov	r0, r6
 80214ba:	f7ff fd09 	bl	8020ed0 <_Balloc>
 80214be:	b930      	cbnz	r0, 80214ce <__mdiff+0x2e>
 80214c0:	4b3a      	ldr	r3, [pc, #232]	; (80215ac <__mdiff+0x10c>)
 80214c2:	4602      	mov	r2, r0
 80214c4:	f240 2132 	movw	r1, #562	; 0x232
 80214c8:	4839      	ldr	r0, [pc, #228]	; (80215b0 <__mdiff+0x110>)
 80214ca:	f7ff f911 	bl	80206f0 <__assert_func>
 80214ce:	2301      	movs	r3, #1
 80214d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80214d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214d8:	bfa4      	itt	ge
 80214da:	4643      	movge	r3, r8
 80214dc:	46a0      	movge	r8, r4
 80214de:	4630      	mov	r0, r6
 80214e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80214e4:	bfa6      	itte	ge
 80214e6:	461c      	movge	r4, r3
 80214e8:	2500      	movge	r5, #0
 80214ea:	2501      	movlt	r5, #1
 80214ec:	f7ff fcf0 	bl	8020ed0 <_Balloc>
 80214f0:	b920      	cbnz	r0, 80214fc <__mdiff+0x5c>
 80214f2:	4b2e      	ldr	r3, [pc, #184]	; (80215ac <__mdiff+0x10c>)
 80214f4:	4602      	mov	r2, r0
 80214f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80214fa:	e7e5      	b.n	80214c8 <__mdiff+0x28>
 80214fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021500:	6926      	ldr	r6, [r4, #16]
 8021502:	60c5      	str	r5, [r0, #12]
 8021504:	f104 0914 	add.w	r9, r4, #20
 8021508:	f108 0514 	add.w	r5, r8, #20
 802150c:	f100 0e14 	add.w	lr, r0, #20
 8021510:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021514:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021518:	f108 0210 	add.w	r2, r8, #16
 802151c:	46f2      	mov	sl, lr
 802151e:	2100      	movs	r1, #0
 8021520:	f859 3b04 	ldr.w	r3, [r9], #4
 8021524:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021528:	fa1f f883 	uxth.w	r8, r3
 802152c:	fa11 f18b 	uxtah	r1, r1, fp
 8021530:	0c1b      	lsrs	r3, r3, #16
 8021532:	eba1 0808 	sub.w	r8, r1, r8
 8021536:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802153a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802153e:	fa1f f888 	uxth.w	r8, r8
 8021542:	1419      	asrs	r1, r3, #16
 8021544:	454e      	cmp	r6, r9
 8021546:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802154a:	f84a 3b04 	str.w	r3, [sl], #4
 802154e:	d8e7      	bhi.n	8021520 <__mdiff+0x80>
 8021550:	1b33      	subs	r3, r6, r4
 8021552:	3b15      	subs	r3, #21
 8021554:	f023 0303 	bic.w	r3, r3, #3
 8021558:	3304      	adds	r3, #4
 802155a:	3415      	adds	r4, #21
 802155c:	42a6      	cmp	r6, r4
 802155e:	bf38      	it	cc
 8021560:	2304      	movcc	r3, #4
 8021562:	441d      	add	r5, r3
 8021564:	4473      	add	r3, lr
 8021566:	469e      	mov	lr, r3
 8021568:	462e      	mov	r6, r5
 802156a:	4566      	cmp	r6, ip
 802156c:	d30e      	bcc.n	802158c <__mdiff+0xec>
 802156e:	f10c 0203 	add.w	r2, ip, #3
 8021572:	1b52      	subs	r2, r2, r5
 8021574:	f022 0203 	bic.w	r2, r2, #3
 8021578:	3d03      	subs	r5, #3
 802157a:	45ac      	cmp	ip, r5
 802157c:	bf38      	it	cc
 802157e:	2200      	movcc	r2, #0
 8021580:	441a      	add	r2, r3
 8021582:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021586:	b17b      	cbz	r3, 80215a8 <__mdiff+0x108>
 8021588:	6107      	str	r7, [r0, #16]
 802158a:	e7a3      	b.n	80214d4 <__mdiff+0x34>
 802158c:	f856 8b04 	ldr.w	r8, [r6], #4
 8021590:	fa11 f288 	uxtah	r2, r1, r8
 8021594:	1414      	asrs	r4, r2, #16
 8021596:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802159a:	b292      	uxth	r2, r2
 802159c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80215a0:	f84e 2b04 	str.w	r2, [lr], #4
 80215a4:	1421      	asrs	r1, r4, #16
 80215a6:	e7e0      	b.n	802156a <__mdiff+0xca>
 80215a8:	3f01      	subs	r7, #1
 80215aa:	e7ea      	b.n	8021582 <__mdiff+0xe2>
 80215ac:	080230ec 	.word	0x080230ec
 80215b0:	08023183 	.word	0x08023183

080215b4 <__ulp>:
 80215b4:	b082      	sub	sp, #8
 80215b6:	ed8d 0b00 	vstr	d0, [sp]
 80215ba:	9b01      	ldr	r3, [sp, #4]
 80215bc:	4912      	ldr	r1, [pc, #72]	; (8021608 <__ulp+0x54>)
 80215be:	4019      	ands	r1, r3
 80215c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80215c4:	2900      	cmp	r1, #0
 80215c6:	dd05      	ble.n	80215d4 <__ulp+0x20>
 80215c8:	2200      	movs	r2, #0
 80215ca:	460b      	mov	r3, r1
 80215cc:	ec43 2b10 	vmov	d0, r2, r3
 80215d0:	b002      	add	sp, #8
 80215d2:	4770      	bx	lr
 80215d4:	4249      	negs	r1, r1
 80215d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80215da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80215de:	f04f 0200 	mov.w	r2, #0
 80215e2:	f04f 0300 	mov.w	r3, #0
 80215e6:	da04      	bge.n	80215f2 <__ulp+0x3e>
 80215e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80215ec:	fa41 f300 	asr.w	r3, r1, r0
 80215f0:	e7ec      	b.n	80215cc <__ulp+0x18>
 80215f2:	f1a0 0114 	sub.w	r1, r0, #20
 80215f6:	291e      	cmp	r1, #30
 80215f8:	bfda      	itte	le
 80215fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80215fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8021602:	2101      	movgt	r1, #1
 8021604:	460a      	mov	r2, r1
 8021606:	e7e1      	b.n	80215cc <__ulp+0x18>
 8021608:	7ff00000 	.word	0x7ff00000

0802160c <__b2d>:
 802160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802160e:	6905      	ldr	r5, [r0, #16]
 8021610:	f100 0714 	add.w	r7, r0, #20
 8021614:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8021618:	1f2e      	subs	r6, r5, #4
 802161a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802161e:	4620      	mov	r0, r4
 8021620:	f7ff fd48 	bl	80210b4 <__hi0bits>
 8021624:	f1c0 0320 	rsb	r3, r0, #32
 8021628:	280a      	cmp	r0, #10
 802162a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80216a8 <__b2d+0x9c>
 802162e:	600b      	str	r3, [r1, #0]
 8021630:	dc14      	bgt.n	802165c <__b2d+0x50>
 8021632:	f1c0 0e0b 	rsb	lr, r0, #11
 8021636:	fa24 f10e 	lsr.w	r1, r4, lr
 802163a:	42b7      	cmp	r7, r6
 802163c:	ea41 030c 	orr.w	r3, r1, ip
 8021640:	bf34      	ite	cc
 8021642:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021646:	2100      	movcs	r1, #0
 8021648:	3015      	adds	r0, #21
 802164a:	fa04 f000 	lsl.w	r0, r4, r0
 802164e:	fa21 f10e 	lsr.w	r1, r1, lr
 8021652:	ea40 0201 	orr.w	r2, r0, r1
 8021656:	ec43 2b10 	vmov	d0, r2, r3
 802165a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802165c:	42b7      	cmp	r7, r6
 802165e:	bf3a      	itte	cc
 8021660:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021664:	f1a5 0608 	subcc.w	r6, r5, #8
 8021668:	2100      	movcs	r1, #0
 802166a:	380b      	subs	r0, #11
 802166c:	d017      	beq.n	802169e <__b2d+0x92>
 802166e:	f1c0 0c20 	rsb	ip, r0, #32
 8021672:	fa04 f500 	lsl.w	r5, r4, r0
 8021676:	42be      	cmp	r6, r7
 8021678:	fa21 f40c 	lsr.w	r4, r1, ip
 802167c:	ea45 0504 	orr.w	r5, r5, r4
 8021680:	bf8c      	ite	hi
 8021682:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8021686:	2400      	movls	r4, #0
 8021688:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802168c:	fa01 f000 	lsl.w	r0, r1, r0
 8021690:	fa24 f40c 	lsr.w	r4, r4, ip
 8021694:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021698:	ea40 0204 	orr.w	r2, r0, r4
 802169c:	e7db      	b.n	8021656 <__b2d+0x4a>
 802169e:	ea44 030c 	orr.w	r3, r4, ip
 80216a2:	460a      	mov	r2, r1
 80216a4:	e7d7      	b.n	8021656 <__b2d+0x4a>
 80216a6:	bf00      	nop
 80216a8:	3ff00000 	.word	0x3ff00000

080216ac <__d2b>:
 80216ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80216b0:	4689      	mov	r9, r1
 80216b2:	2101      	movs	r1, #1
 80216b4:	ec57 6b10 	vmov	r6, r7, d0
 80216b8:	4690      	mov	r8, r2
 80216ba:	f7ff fc09 	bl	8020ed0 <_Balloc>
 80216be:	4604      	mov	r4, r0
 80216c0:	b930      	cbnz	r0, 80216d0 <__d2b+0x24>
 80216c2:	4602      	mov	r2, r0
 80216c4:	4b25      	ldr	r3, [pc, #148]	; (802175c <__d2b+0xb0>)
 80216c6:	4826      	ldr	r0, [pc, #152]	; (8021760 <__d2b+0xb4>)
 80216c8:	f240 310a 	movw	r1, #778	; 0x30a
 80216cc:	f7ff f810 	bl	80206f0 <__assert_func>
 80216d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80216d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80216d8:	bb35      	cbnz	r5, 8021728 <__d2b+0x7c>
 80216da:	2e00      	cmp	r6, #0
 80216dc:	9301      	str	r3, [sp, #4]
 80216de:	d028      	beq.n	8021732 <__d2b+0x86>
 80216e0:	4668      	mov	r0, sp
 80216e2:	9600      	str	r6, [sp, #0]
 80216e4:	f7ff fd06 	bl	80210f4 <__lo0bits>
 80216e8:	9900      	ldr	r1, [sp, #0]
 80216ea:	b300      	cbz	r0, 802172e <__d2b+0x82>
 80216ec:	9a01      	ldr	r2, [sp, #4]
 80216ee:	f1c0 0320 	rsb	r3, r0, #32
 80216f2:	fa02 f303 	lsl.w	r3, r2, r3
 80216f6:	430b      	orrs	r3, r1
 80216f8:	40c2      	lsrs	r2, r0
 80216fa:	6163      	str	r3, [r4, #20]
 80216fc:	9201      	str	r2, [sp, #4]
 80216fe:	9b01      	ldr	r3, [sp, #4]
 8021700:	61a3      	str	r3, [r4, #24]
 8021702:	2b00      	cmp	r3, #0
 8021704:	bf14      	ite	ne
 8021706:	2202      	movne	r2, #2
 8021708:	2201      	moveq	r2, #1
 802170a:	6122      	str	r2, [r4, #16]
 802170c:	b1d5      	cbz	r5, 8021744 <__d2b+0x98>
 802170e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021712:	4405      	add	r5, r0
 8021714:	f8c9 5000 	str.w	r5, [r9]
 8021718:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802171c:	f8c8 0000 	str.w	r0, [r8]
 8021720:	4620      	mov	r0, r4
 8021722:	b003      	add	sp, #12
 8021724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802172c:	e7d5      	b.n	80216da <__d2b+0x2e>
 802172e:	6161      	str	r1, [r4, #20]
 8021730:	e7e5      	b.n	80216fe <__d2b+0x52>
 8021732:	a801      	add	r0, sp, #4
 8021734:	f7ff fcde 	bl	80210f4 <__lo0bits>
 8021738:	9b01      	ldr	r3, [sp, #4]
 802173a:	6163      	str	r3, [r4, #20]
 802173c:	2201      	movs	r2, #1
 802173e:	6122      	str	r2, [r4, #16]
 8021740:	3020      	adds	r0, #32
 8021742:	e7e3      	b.n	802170c <__d2b+0x60>
 8021744:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021748:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802174c:	f8c9 0000 	str.w	r0, [r9]
 8021750:	6918      	ldr	r0, [r3, #16]
 8021752:	f7ff fcaf 	bl	80210b4 <__hi0bits>
 8021756:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802175a:	e7df      	b.n	802171c <__d2b+0x70>
 802175c:	080230ec 	.word	0x080230ec
 8021760:	08023183 	.word	0x08023183

08021764 <__ratio>:
 8021764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021768:	4688      	mov	r8, r1
 802176a:	4669      	mov	r1, sp
 802176c:	4681      	mov	r9, r0
 802176e:	f7ff ff4d 	bl	802160c <__b2d>
 8021772:	a901      	add	r1, sp, #4
 8021774:	4640      	mov	r0, r8
 8021776:	ec55 4b10 	vmov	r4, r5, d0
 802177a:	f7ff ff47 	bl	802160c <__b2d>
 802177e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021782:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021786:	eba3 0c02 	sub.w	ip, r3, r2
 802178a:	e9dd 3200 	ldrd	r3, r2, [sp]
 802178e:	1a9b      	subs	r3, r3, r2
 8021790:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8021794:	ec51 0b10 	vmov	r0, r1, d0
 8021798:	2b00      	cmp	r3, #0
 802179a:	bfd6      	itet	le
 802179c:	460a      	movle	r2, r1
 802179e:	462a      	movgt	r2, r5
 80217a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80217a4:	468b      	mov	fp, r1
 80217a6:	462f      	mov	r7, r5
 80217a8:	bfd4      	ite	le
 80217aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80217ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80217b2:	4620      	mov	r0, r4
 80217b4:	ee10 2a10 	vmov	r2, s0
 80217b8:	465b      	mov	r3, fp
 80217ba:	4639      	mov	r1, r7
 80217bc:	f7df f85e 	bl	800087c <__aeabi_ddiv>
 80217c0:	ec41 0b10 	vmov	d0, r0, r1
 80217c4:	b003      	add	sp, #12
 80217c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217ca <__copybits>:
 80217ca:	3901      	subs	r1, #1
 80217cc:	b570      	push	{r4, r5, r6, lr}
 80217ce:	1149      	asrs	r1, r1, #5
 80217d0:	6914      	ldr	r4, [r2, #16]
 80217d2:	3101      	adds	r1, #1
 80217d4:	f102 0314 	add.w	r3, r2, #20
 80217d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80217dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80217e0:	1f05      	subs	r5, r0, #4
 80217e2:	42a3      	cmp	r3, r4
 80217e4:	d30c      	bcc.n	8021800 <__copybits+0x36>
 80217e6:	1aa3      	subs	r3, r4, r2
 80217e8:	3b11      	subs	r3, #17
 80217ea:	f023 0303 	bic.w	r3, r3, #3
 80217ee:	3211      	adds	r2, #17
 80217f0:	42a2      	cmp	r2, r4
 80217f2:	bf88      	it	hi
 80217f4:	2300      	movhi	r3, #0
 80217f6:	4418      	add	r0, r3
 80217f8:	2300      	movs	r3, #0
 80217fa:	4288      	cmp	r0, r1
 80217fc:	d305      	bcc.n	802180a <__copybits+0x40>
 80217fe:	bd70      	pop	{r4, r5, r6, pc}
 8021800:	f853 6b04 	ldr.w	r6, [r3], #4
 8021804:	f845 6f04 	str.w	r6, [r5, #4]!
 8021808:	e7eb      	b.n	80217e2 <__copybits+0x18>
 802180a:	f840 3b04 	str.w	r3, [r0], #4
 802180e:	e7f4      	b.n	80217fa <__copybits+0x30>

08021810 <__any_on>:
 8021810:	f100 0214 	add.w	r2, r0, #20
 8021814:	6900      	ldr	r0, [r0, #16]
 8021816:	114b      	asrs	r3, r1, #5
 8021818:	4298      	cmp	r0, r3
 802181a:	b510      	push	{r4, lr}
 802181c:	db11      	blt.n	8021842 <__any_on+0x32>
 802181e:	dd0a      	ble.n	8021836 <__any_on+0x26>
 8021820:	f011 011f 	ands.w	r1, r1, #31
 8021824:	d007      	beq.n	8021836 <__any_on+0x26>
 8021826:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802182a:	fa24 f001 	lsr.w	r0, r4, r1
 802182e:	fa00 f101 	lsl.w	r1, r0, r1
 8021832:	428c      	cmp	r4, r1
 8021834:	d10b      	bne.n	802184e <__any_on+0x3e>
 8021836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802183a:	4293      	cmp	r3, r2
 802183c:	d803      	bhi.n	8021846 <__any_on+0x36>
 802183e:	2000      	movs	r0, #0
 8021840:	bd10      	pop	{r4, pc}
 8021842:	4603      	mov	r3, r0
 8021844:	e7f7      	b.n	8021836 <__any_on+0x26>
 8021846:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802184a:	2900      	cmp	r1, #0
 802184c:	d0f5      	beq.n	802183a <__any_on+0x2a>
 802184e:	2001      	movs	r0, #1
 8021850:	e7f6      	b.n	8021840 <__any_on+0x30>

08021852 <_realloc_r>:
 8021852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021856:	4680      	mov	r8, r0
 8021858:	4614      	mov	r4, r2
 802185a:	460e      	mov	r6, r1
 802185c:	b921      	cbnz	r1, 8021868 <_realloc_r+0x16>
 802185e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021862:	4611      	mov	r1, r2
 8021864:	f7fd ba96 	b.w	801ed94 <_malloc_r>
 8021868:	b92a      	cbnz	r2, 8021876 <_realloc_r+0x24>
 802186a:	f7fd fa27 	bl	801ecbc <_free_r>
 802186e:	4625      	mov	r5, r4
 8021870:	4628      	mov	r0, r5
 8021872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021876:	f000 f993 	bl	8021ba0 <_malloc_usable_size_r>
 802187a:	4284      	cmp	r4, r0
 802187c:	4607      	mov	r7, r0
 802187e:	d802      	bhi.n	8021886 <_realloc_r+0x34>
 8021880:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021884:	d812      	bhi.n	80218ac <_realloc_r+0x5a>
 8021886:	4621      	mov	r1, r4
 8021888:	4640      	mov	r0, r8
 802188a:	f7fd fa83 	bl	801ed94 <_malloc_r>
 802188e:	4605      	mov	r5, r0
 8021890:	2800      	cmp	r0, #0
 8021892:	d0ed      	beq.n	8021870 <_realloc_r+0x1e>
 8021894:	42bc      	cmp	r4, r7
 8021896:	4622      	mov	r2, r4
 8021898:	4631      	mov	r1, r6
 802189a:	bf28      	it	cs
 802189c:	463a      	movcs	r2, r7
 802189e:	f7fd f9c7 	bl	801ec30 <memcpy>
 80218a2:	4631      	mov	r1, r6
 80218a4:	4640      	mov	r0, r8
 80218a6:	f7fd fa09 	bl	801ecbc <_free_r>
 80218aa:	e7e1      	b.n	8021870 <_realloc_r+0x1e>
 80218ac:	4635      	mov	r5, r6
 80218ae:	e7df      	b.n	8021870 <_realloc_r+0x1e>

080218b0 <__ssputs_r>:
 80218b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80218b4:	688e      	ldr	r6, [r1, #8]
 80218b6:	429e      	cmp	r6, r3
 80218b8:	4682      	mov	sl, r0
 80218ba:	460c      	mov	r4, r1
 80218bc:	4690      	mov	r8, r2
 80218be:	461f      	mov	r7, r3
 80218c0:	d838      	bhi.n	8021934 <__ssputs_r+0x84>
 80218c2:	898a      	ldrh	r2, [r1, #12]
 80218c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80218c8:	d032      	beq.n	8021930 <__ssputs_r+0x80>
 80218ca:	6825      	ldr	r5, [r4, #0]
 80218cc:	6909      	ldr	r1, [r1, #16]
 80218ce:	eba5 0901 	sub.w	r9, r5, r1
 80218d2:	6965      	ldr	r5, [r4, #20]
 80218d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80218d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80218dc:	3301      	adds	r3, #1
 80218de:	444b      	add	r3, r9
 80218e0:	106d      	asrs	r5, r5, #1
 80218e2:	429d      	cmp	r5, r3
 80218e4:	bf38      	it	cc
 80218e6:	461d      	movcc	r5, r3
 80218e8:	0553      	lsls	r3, r2, #21
 80218ea:	d531      	bpl.n	8021950 <__ssputs_r+0xa0>
 80218ec:	4629      	mov	r1, r5
 80218ee:	f7fd fa51 	bl	801ed94 <_malloc_r>
 80218f2:	4606      	mov	r6, r0
 80218f4:	b950      	cbnz	r0, 802190c <__ssputs_r+0x5c>
 80218f6:	230c      	movs	r3, #12
 80218f8:	f8ca 3000 	str.w	r3, [sl]
 80218fc:	89a3      	ldrh	r3, [r4, #12]
 80218fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021902:	81a3      	strh	r3, [r4, #12]
 8021904:	f04f 30ff 	mov.w	r0, #4294967295
 8021908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802190c:	6921      	ldr	r1, [r4, #16]
 802190e:	464a      	mov	r2, r9
 8021910:	f7fd f98e 	bl	801ec30 <memcpy>
 8021914:	89a3      	ldrh	r3, [r4, #12]
 8021916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802191a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802191e:	81a3      	strh	r3, [r4, #12]
 8021920:	6126      	str	r6, [r4, #16]
 8021922:	6165      	str	r5, [r4, #20]
 8021924:	444e      	add	r6, r9
 8021926:	eba5 0509 	sub.w	r5, r5, r9
 802192a:	6026      	str	r6, [r4, #0]
 802192c:	60a5      	str	r5, [r4, #8]
 802192e:	463e      	mov	r6, r7
 8021930:	42be      	cmp	r6, r7
 8021932:	d900      	bls.n	8021936 <__ssputs_r+0x86>
 8021934:	463e      	mov	r6, r7
 8021936:	6820      	ldr	r0, [r4, #0]
 8021938:	4632      	mov	r2, r6
 802193a:	4641      	mov	r1, r8
 802193c:	f7fd f986 	bl	801ec4c <memmove>
 8021940:	68a3      	ldr	r3, [r4, #8]
 8021942:	1b9b      	subs	r3, r3, r6
 8021944:	60a3      	str	r3, [r4, #8]
 8021946:	6823      	ldr	r3, [r4, #0]
 8021948:	4433      	add	r3, r6
 802194a:	6023      	str	r3, [r4, #0]
 802194c:	2000      	movs	r0, #0
 802194e:	e7db      	b.n	8021908 <__ssputs_r+0x58>
 8021950:	462a      	mov	r2, r5
 8021952:	f7ff ff7e 	bl	8021852 <_realloc_r>
 8021956:	4606      	mov	r6, r0
 8021958:	2800      	cmp	r0, #0
 802195a:	d1e1      	bne.n	8021920 <__ssputs_r+0x70>
 802195c:	6921      	ldr	r1, [r4, #16]
 802195e:	4650      	mov	r0, sl
 8021960:	f7fd f9ac 	bl	801ecbc <_free_r>
 8021964:	e7c7      	b.n	80218f6 <__ssputs_r+0x46>
	...

08021968 <_svfiprintf_r>:
 8021968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802196c:	4698      	mov	r8, r3
 802196e:	898b      	ldrh	r3, [r1, #12]
 8021970:	061b      	lsls	r3, r3, #24
 8021972:	b09d      	sub	sp, #116	; 0x74
 8021974:	4607      	mov	r7, r0
 8021976:	460d      	mov	r5, r1
 8021978:	4614      	mov	r4, r2
 802197a:	d50e      	bpl.n	802199a <_svfiprintf_r+0x32>
 802197c:	690b      	ldr	r3, [r1, #16]
 802197e:	b963      	cbnz	r3, 802199a <_svfiprintf_r+0x32>
 8021980:	2140      	movs	r1, #64	; 0x40
 8021982:	f7fd fa07 	bl	801ed94 <_malloc_r>
 8021986:	6028      	str	r0, [r5, #0]
 8021988:	6128      	str	r0, [r5, #16]
 802198a:	b920      	cbnz	r0, 8021996 <_svfiprintf_r+0x2e>
 802198c:	230c      	movs	r3, #12
 802198e:	603b      	str	r3, [r7, #0]
 8021990:	f04f 30ff 	mov.w	r0, #4294967295
 8021994:	e0d1      	b.n	8021b3a <_svfiprintf_r+0x1d2>
 8021996:	2340      	movs	r3, #64	; 0x40
 8021998:	616b      	str	r3, [r5, #20]
 802199a:	2300      	movs	r3, #0
 802199c:	9309      	str	r3, [sp, #36]	; 0x24
 802199e:	2320      	movs	r3, #32
 80219a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80219a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80219a8:	2330      	movs	r3, #48	; 0x30
 80219aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021b54 <_svfiprintf_r+0x1ec>
 80219ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80219b2:	f04f 0901 	mov.w	r9, #1
 80219b6:	4623      	mov	r3, r4
 80219b8:	469a      	mov	sl, r3
 80219ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80219be:	b10a      	cbz	r2, 80219c4 <_svfiprintf_r+0x5c>
 80219c0:	2a25      	cmp	r2, #37	; 0x25
 80219c2:	d1f9      	bne.n	80219b8 <_svfiprintf_r+0x50>
 80219c4:	ebba 0b04 	subs.w	fp, sl, r4
 80219c8:	d00b      	beq.n	80219e2 <_svfiprintf_r+0x7a>
 80219ca:	465b      	mov	r3, fp
 80219cc:	4622      	mov	r2, r4
 80219ce:	4629      	mov	r1, r5
 80219d0:	4638      	mov	r0, r7
 80219d2:	f7ff ff6d 	bl	80218b0 <__ssputs_r>
 80219d6:	3001      	adds	r0, #1
 80219d8:	f000 80aa 	beq.w	8021b30 <_svfiprintf_r+0x1c8>
 80219dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219de:	445a      	add	r2, fp
 80219e0:	9209      	str	r2, [sp, #36]	; 0x24
 80219e2:	f89a 3000 	ldrb.w	r3, [sl]
 80219e6:	2b00      	cmp	r3, #0
 80219e8:	f000 80a2 	beq.w	8021b30 <_svfiprintf_r+0x1c8>
 80219ec:	2300      	movs	r3, #0
 80219ee:	f04f 32ff 	mov.w	r2, #4294967295
 80219f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80219f6:	f10a 0a01 	add.w	sl, sl, #1
 80219fa:	9304      	str	r3, [sp, #16]
 80219fc:	9307      	str	r3, [sp, #28]
 80219fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021a02:	931a      	str	r3, [sp, #104]	; 0x68
 8021a04:	4654      	mov	r4, sl
 8021a06:	2205      	movs	r2, #5
 8021a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a0c:	4851      	ldr	r0, [pc, #324]	; (8021b54 <_svfiprintf_r+0x1ec>)
 8021a0e:	f7de fbdf 	bl	80001d0 <memchr>
 8021a12:	9a04      	ldr	r2, [sp, #16]
 8021a14:	b9d8      	cbnz	r0, 8021a4e <_svfiprintf_r+0xe6>
 8021a16:	06d0      	lsls	r0, r2, #27
 8021a18:	bf44      	itt	mi
 8021a1a:	2320      	movmi	r3, #32
 8021a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021a20:	0711      	lsls	r1, r2, #28
 8021a22:	bf44      	itt	mi
 8021a24:	232b      	movmi	r3, #43	; 0x2b
 8021a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8021a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8021a30:	d015      	beq.n	8021a5e <_svfiprintf_r+0xf6>
 8021a32:	9a07      	ldr	r2, [sp, #28]
 8021a34:	4654      	mov	r4, sl
 8021a36:	2000      	movs	r0, #0
 8021a38:	f04f 0c0a 	mov.w	ip, #10
 8021a3c:	4621      	mov	r1, r4
 8021a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021a42:	3b30      	subs	r3, #48	; 0x30
 8021a44:	2b09      	cmp	r3, #9
 8021a46:	d94e      	bls.n	8021ae6 <_svfiprintf_r+0x17e>
 8021a48:	b1b0      	cbz	r0, 8021a78 <_svfiprintf_r+0x110>
 8021a4a:	9207      	str	r2, [sp, #28]
 8021a4c:	e014      	b.n	8021a78 <_svfiprintf_r+0x110>
 8021a4e:	eba0 0308 	sub.w	r3, r0, r8
 8021a52:	fa09 f303 	lsl.w	r3, r9, r3
 8021a56:	4313      	orrs	r3, r2
 8021a58:	9304      	str	r3, [sp, #16]
 8021a5a:	46a2      	mov	sl, r4
 8021a5c:	e7d2      	b.n	8021a04 <_svfiprintf_r+0x9c>
 8021a5e:	9b03      	ldr	r3, [sp, #12]
 8021a60:	1d19      	adds	r1, r3, #4
 8021a62:	681b      	ldr	r3, [r3, #0]
 8021a64:	9103      	str	r1, [sp, #12]
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	bfbb      	ittet	lt
 8021a6a:	425b      	neglt	r3, r3
 8021a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8021a70:	9307      	strge	r3, [sp, #28]
 8021a72:	9307      	strlt	r3, [sp, #28]
 8021a74:	bfb8      	it	lt
 8021a76:	9204      	strlt	r2, [sp, #16]
 8021a78:	7823      	ldrb	r3, [r4, #0]
 8021a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8021a7c:	d10c      	bne.n	8021a98 <_svfiprintf_r+0x130>
 8021a7e:	7863      	ldrb	r3, [r4, #1]
 8021a80:	2b2a      	cmp	r3, #42	; 0x2a
 8021a82:	d135      	bne.n	8021af0 <_svfiprintf_r+0x188>
 8021a84:	9b03      	ldr	r3, [sp, #12]
 8021a86:	1d1a      	adds	r2, r3, #4
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	9203      	str	r2, [sp, #12]
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	bfb8      	it	lt
 8021a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8021a94:	3402      	adds	r4, #2
 8021a96:	9305      	str	r3, [sp, #20]
 8021a98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021b64 <_svfiprintf_r+0x1fc>
 8021a9c:	7821      	ldrb	r1, [r4, #0]
 8021a9e:	2203      	movs	r2, #3
 8021aa0:	4650      	mov	r0, sl
 8021aa2:	f7de fb95 	bl	80001d0 <memchr>
 8021aa6:	b140      	cbz	r0, 8021aba <_svfiprintf_r+0x152>
 8021aa8:	2340      	movs	r3, #64	; 0x40
 8021aaa:	eba0 000a 	sub.w	r0, r0, sl
 8021aae:	fa03 f000 	lsl.w	r0, r3, r0
 8021ab2:	9b04      	ldr	r3, [sp, #16]
 8021ab4:	4303      	orrs	r3, r0
 8021ab6:	3401      	adds	r4, #1
 8021ab8:	9304      	str	r3, [sp, #16]
 8021aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021abe:	4826      	ldr	r0, [pc, #152]	; (8021b58 <_svfiprintf_r+0x1f0>)
 8021ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021ac4:	2206      	movs	r2, #6
 8021ac6:	f7de fb83 	bl	80001d0 <memchr>
 8021aca:	2800      	cmp	r0, #0
 8021acc:	d038      	beq.n	8021b40 <_svfiprintf_r+0x1d8>
 8021ace:	4b23      	ldr	r3, [pc, #140]	; (8021b5c <_svfiprintf_r+0x1f4>)
 8021ad0:	bb1b      	cbnz	r3, 8021b1a <_svfiprintf_r+0x1b2>
 8021ad2:	9b03      	ldr	r3, [sp, #12]
 8021ad4:	3307      	adds	r3, #7
 8021ad6:	f023 0307 	bic.w	r3, r3, #7
 8021ada:	3308      	adds	r3, #8
 8021adc:	9303      	str	r3, [sp, #12]
 8021ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ae0:	4433      	add	r3, r6
 8021ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8021ae4:	e767      	b.n	80219b6 <_svfiprintf_r+0x4e>
 8021ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8021aea:	460c      	mov	r4, r1
 8021aec:	2001      	movs	r0, #1
 8021aee:	e7a5      	b.n	8021a3c <_svfiprintf_r+0xd4>
 8021af0:	2300      	movs	r3, #0
 8021af2:	3401      	adds	r4, #1
 8021af4:	9305      	str	r3, [sp, #20]
 8021af6:	4619      	mov	r1, r3
 8021af8:	f04f 0c0a 	mov.w	ip, #10
 8021afc:	4620      	mov	r0, r4
 8021afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b02:	3a30      	subs	r2, #48	; 0x30
 8021b04:	2a09      	cmp	r2, #9
 8021b06:	d903      	bls.n	8021b10 <_svfiprintf_r+0x1a8>
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	d0c5      	beq.n	8021a98 <_svfiprintf_r+0x130>
 8021b0c:	9105      	str	r1, [sp, #20]
 8021b0e:	e7c3      	b.n	8021a98 <_svfiprintf_r+0x130>
 8021b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8021b14:	4604      	mov	r4, r0
 8021b16:	2301      	movs	r3, #1
 8021b18:	e7f0      	b.n	8021afc <_svfiprintf_r+0x194>
 8021b1a:	ab03      	add	r3, sp, #12
 8021b1c:	9300      	str	r3, [sp, #0]
 8021b1e:	462a      	mov	r2, r5
 8021b20:	4b0f      	ldr	r3, [pc, #60]	; (8021b60 <_svfiprintf_r+0x1f8>)
 8021b22:	a904      	add	r1, sp, #16
 8021b24:	4638      	mov	r0, r7
 8021b26:	f3af 8000 	nop.w
 8021b2a:	1c42      	adds	r2, r0, #1
 8021b2c:	4606      	mov	r6, r0
 8021b2e:	d1d6      	bne.n	8021ade <_svfiprintf_r+0x176>
 8021b30:	89ab      	ldrh	r3, [r5, #12]
 8021b32:	065b      	lsls	r3, r3, #25
 8021b34:	f53f af2c 	bmi.w	8021990 <_svfiprintf_r+0x28>
 8021b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021b3a:	b01d      	add	sp, #116	; 0x74
 8021b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b40:	ab03      	add	r3, sp, #12
 8021b42:	9300      	str	r3, [sp, #0]
 8021b44:	462a      	mov	r2, r5
 8021b46:	4b06      	ldr	r3, [pc, #24]	; (8021b60 <_svfiprintf_r+0x1f8>)
 8021b48:	a904      	add	r1, sp, #16
 8021b4a:	4638      	mov	r0, r7
 8021b4c:	f7fd fb5e 	bl	801f20c <_printf_i>
 8021b50:	e7eb      	b.n	8021b2a <_svfiprintf_r+0x1c2>
 8021b52:	bf00      	nop
 8021b54:	0802301a 	.word	0x0802301a
 8021b58:	08023024 	.word	0x08023024
 8021b5c:	00000000 	.word	0x00000000
 8021b60:	080218b1 	.word	0x080218b1
 8021b64:	08023020 	.word	0x08023020

08021b68 <_read_r>:
 8021b68:	b538      	push	{r3, r4, r5, lr}
 8021b6a:	4d07      	ldr	r5, [pc, #28]	; (8021b88 <_read_r+0x20>)
 8021b6c:	4604      	mov	r4, r0
 8021b6e:	4608      	mov	r0, r1
 8021b70:	4611      	mov	r1, r2
 8021b72:	2200      	movs	r2, #0
 8021b74:	602a      	str	r2, [r5, #0]
 8021b76:	461a      	mov	r2, r3
 8021b78:	f7e1 fa62 	bl	8003040 <_read>
 8021b7c:	1c43      	adds	r3, r0, #1
 8021b7e:	d102      	bne.n	8021b86 <_read_r+0x1e>
 8021b80:	682b      	ldr	r3, [r5, #0]
 8021b82:	b103      	cbz	r3, 8021b86 <_read_r+0x1e>
 8021b84:	6023      	str	r3, [r4, #0]
 8021b86:	bd38      	pop	{r3, r4, r5, pc}
 8021b88:	20010378 	.word	0x20010378
 8021b8c:	00000000 	.word	0x00000000

08021b90 <nan>:
 8021b90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021b98 <nan+0x8>
 8021b94:	4770      	bx	lr
 8021b96:	bf00      	nop
 8021b98:	00000000 	.word	0x00000000
 8021b9c:	7ff80000 	.word	0x7ff80000

08021ba0 <_malloc_usable_size_r>:
 8021ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021ba4:	1f18      	subs	r0, r3, #4
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	bfbc      	itt	lt
 8021baa:	580b      	ldrlt	r3, [r1, r0]
 8021bac:	18c0      	addlt	r0, r0, r3
 8021bae:	4770      	bx	lr

08021bb0 <_gettimeofday>:
 8021bb0:	4b02      	ldr	r3, [pc, #8]	; (8021bbc <_gettimeofday+0xc>)
 8021bb2:	2258      	movs	r2, #88	; 0x58
 8021bb4:	601a      	str	r2, [r3, #0]
 8021bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8021bba:	4770      	bx	lr
 8021bbc:	20010378 	.word	0x20010378

08021bc0 <_init>:
 8021bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bc2:	bf00      	nop
 8021bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021bc6:	bc08      	pop	{r3}
 8021bc8:	469e      	mov	lr, r3
 8021bca:	4770      	bx	lr

08021bcc <_fini>:
 8021bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bce:	bf00      	nop
 8021bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021bd2:	bc08      	pop	{r3}
 8021bd4:	469e      	mov	lr, r3
 8021bd6:	4770      	bx	lr
