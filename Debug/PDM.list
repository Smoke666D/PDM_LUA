
PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800bdd0  0800bdd0  0001bdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf24  0800bf24  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf24  0800bf24  0001bf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf2c  0800bf2c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf2c  0800bf2c  0001bf2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf30  0800bf30  0001bf30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800bf34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          00006214  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006418  20006418  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027a3c  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004baf  00000000  00000000  00047c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ed0  00000000  00000000  0004c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d40  00000000  00000000  0004e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005159  00000000  00000000  00050430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000240e3  00000000  00000000  00055589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3646  00000000  00000000  0007966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ccb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088b4  00000000  00000000  0015cd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  001655b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bdb8 	.word	0x0800bdb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800bdb8 	.word	0x0800bdb8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <prv_send_can_message>:
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
uint32_t TxMailbox;
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t *buffer) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
    static  CAN_TxHeaderTypeDef pTXHeader;
    uint8_t success = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]

    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0) {
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 feea 	bl	8003afc <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d027      	beq.n	8000d7e <prv_send_can_message+0x6e>

        pTXHeader.DLC                = (uint32_t)buffer->DLC;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	791b      	ldrb	r3, [r3, #4]
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <prv_send_can_message+0x78>)
 8000d36:	611a      	str	r2, [r3, #16]
        pTXHeader.ExtId              = 0U;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <prv_send_can_message+0x78>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
        pTXHeader.IDE                = CAN_ID_STD;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <prv_send_can_message+0x78>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
        pTXHeader.RTR                = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	0b9b      	lsrs	r3, r3, #14
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <prv_send_can_message+0x78>)
 8000d50:	60d3      	str	r3, [r2, #12]
        pTXHeader.StdId              = buffer->ident & CANID_MASK;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <prv_send_can_message+0x78>)
 8000d5c:	6013      	str	r3, [r2, #0]
        pTXHeader.TransmitGlobalTime = DISABLE;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <prv_send_can_message+0x78>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	751a      	strb	r2, [r3, #20]

        /* Now add message to FIFO. Should not fail */
        if (HAL_CAN_AddTxMessage(CANmodule->CANptr,  &pTXHeader, buffer->data, &TxMailbox) == HAL_OK)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	1d5a      	adds	r2, r3, #5
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <prv_send_can_message+0x7c>)
 8000d6e:	4906      	ldr	r1, [pc, #24]	; (8000d88 <prv_send_can_message+0x78>)
 8000d70:	f002 fde9 	bl	8003946 <HAL_CAN_AddTxMessage>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <prv_send_can_message+0x6e>
        {
        	success = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return success;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000228 	.word	0x20000228
 8000d8c:	20000224 	.word	0x20000224

08000d90 <CAN_SendMessage>:




void CAN_SendMessage()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0


	CANModule_local->firstCANtxMessage = false;
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
	CANModule_local->bufferInhibitFlag = false;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
    if(CANModule_local->CANtxCount > 0U)
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d045      	beq.n	8000e3e <CAN_SendMessage+0xae>
    {
        uint16_t i;             /* index of transmitting message */
        CO_CANtx_t *buffer = &CANModule_local->txArray[0];
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
        CO_LOCK_CAN_SEND(CANModule_local);
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000dbe:	f3ef 8210 	mrs	r2, PRIMASK
 8000dc2:	607a      	str	r2, [r7, #4]
  return(result);
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop

        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	8a1b      	ldrh	r3, [r3, #16]
 8000dd2:	81fb      	strh	r3, [r7, #14]
 8000dd4:	e021      	b.n	8000e1a <CAN_SendMessage+0x8a>
                   /* Try to send message */
                   if (buffer->bufferFull) {
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d017      	beq.n	8000e0e <CAN_SendMessage+0x7e>
                       if (prv_send_can_message(CANModule_local, buffer)) {
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff93 	bl	8000d10 <prv_send_can_message>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00e      	beq.n	8000e0e <CAN_SendMessage+0x7e>
                           buffer->bufferFull = false;
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
                           CANModule_local->CANtxCount--;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8000dfc:	b292      	uxth	r2, r2
 8000dfe:	3a01      	subs	r2, #1
 8000e00:	b292      	uxth	r2, r2
 8000e02:	849a      	strh	r2, [r3, #36]	; 0x24
                           CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	6952      	ldr	r2, [r2, #20]
 8000e0c:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	81fb      	strh	r3, [r7, #14]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3318      	adds	r3, #24
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1da      	bne.n	8000dd6 <CAN_SendMessage+0x46>
                       }
                   }
               }
        /* Clear counter if no more messages */
        if(i == 0U){
 8000e20:	89fb      	ldrh	r3, [r7, #14]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d103      	bne.n	8000e2e <CAN_SendMessage+0x9e>
        	CANModule_local->CANtxCount = 0U;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <CAN_SendMessage+0xb8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f383 8810 	msr	PRIMASK, r3
}
 8000e3c:	bf00      	nop
    }
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000220 	.word	0x20000220

08000e4c <HAL_CAN_TxMailbox0CompleteCallback>:



void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 8000e54:	f7ff ff9c 	bl	8000d90 <CAN_SendMessage>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 8000e68:	f7ff ff92 	bl	8000d90 <CAN_SendMessage>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	CAN_SendMessage();
 8000e7c:	f7ff ff88 	bl	8000d90 <CAN_SendMessage>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <prv_read_can_received_msg>:


static void  prv_read_can_received_msg(CAN_HandleTypeDef* can, uint32_t fifo) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
    static CAN_RxHeaderTypeDef rx;
    static CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t *buffer = NULL;              /* receive message buffer from CO_CANmodule_t object. */
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
    uint16_t index;                         /* index of received message */
    uint32_t rcvMsgIdent;                   /* identifier of the received message */
    uint8_t messageFound = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	747b      	strb	r3, [r7, #17]

    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(can, fifo, &rx, rcvMsg.data) != HAL_OK)
 8000e9a:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <prv_read_can_received_msg+0x104>)
 8000e9c:	4a3c      	ldr	r2, [pc, #240]	; (8000f90 <prv_read_can_received_msg+0x108>)
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f002 fe60 	bl	8003b66 <HAL_CAN_GetRxMessage>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d16a      	bne.n	8000f82 <prv_read_can_received_msg+0xfa>
    {
        return;
    }

    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx.StdId  | (rx.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8000eac:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <prv_read_can_received_msg+0x108>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <prv_read_can_received_msg+0x108>)
 8000eb2:	68d2      	ldr	r2, [r2, #12]
 8000eb4:	2a02      	cmp	r2, #2
 8000eb6:	d102      	bne.n	8000ebe <prv_read_can_received_msg+0x36>
 8000eb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ebc:	e000      	b.n	8000ec0 <prv_read_can_received_msg+0x38>
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	4a34      	ldr	r2, [pc, #208]	; (8000f94 <prv_read_can_received_msg+0x10c>)
 8000ec4:	6013      	str	r3, [r2, #0]
    rcvMsg.dlc = rx.DLC;
 8000ec6:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <prv_read_can_received_msg+0x108>)
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <prv_read_can_received_msg+0x10c>)
 8000ece:	711a      	strb	r2, [r3, #4]
    rcvMsgIdent = rcvMsg.ident;
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <prv_read_can_received_msg+0x10c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d01f      	beq.n	8000f20 <prv_read_can_received_msg+0x98>

    	buffer = CANModule_local->rxArray;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	617b      	str	r3, [r7, #20]
    	        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	891b      	ldrh	r3, [r3, #8]
 8000eee:	827b      	strh	r3, [r7, #18]
 8000ef0:	e012      	b.n	8000f18 <prv_read_can_received_msg+0x90>
    	            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4053      	eors	r3, r2
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	8852      	ldrh	r2, [r2, #2]
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <prv_read_can_received_msg+0x84>
    	                messageFound = 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	747b      	strb	r3, [r7, #17]
    	                break;
 8000f0a:	e028      	b.n	8000f5e <prv_read_can_received_msg+0xd6>
    	        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8000f0c:	8a7b      	ldrh	r3, [r7, #18]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	827b      	strh	r3, [r7, #18]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	330c      	adds	r3, #12
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	8a7b      	ldrh	r3, [r7, #18]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e9      	bne.n	8000ef2 <prv_read_can_received_msg+0x6a>
 8000f1e:	e01e      	b.n	8000f5e <prv_read_can_received_msg+0xd6>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	617b      	str	r3, [r7, #20]
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <prv_read_can_received_msg+0x110>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	891b      	ldrh	r3, [r3, #8]
 8000f2e:	827b      	strh	r3, [r7, #18]
 8000f30:	e012      	b.n	8000f58 <prv_read_can_received_msg+0xd0>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	8852      	ldrh	r2, [r2, #2]
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <prv_read_can_received_msg+0xc4>
                messageFound = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	747b      	strb	r3, [r7, #17]
                break;
 8000f4a:	e008      	b.n	8000f5e <prv_read_can_received_msg+0xd6>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	827b      	strh	r3, [r7, #18]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	330c      	adds	r3, #12
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	8a7b      	ldrh	r3, [r7, #18]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1e9      	bne.n	8000f32 <prv_read_can_received_msg+0xaa>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8000f5e:	7c7b      	ldrb	r3, [r7, #17]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00f      	beq.n	8000f84 <prv_read_can_received_msg+0xfc>
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00c      	beq.n	8000f84 <prv_read_can_received_msg+0xfc>
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <prv_read_can_received_msg+0xfc>
        buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	6852      	ldr	r2, [r2, #4]
 8000f7a:	4906      	ldr	r1, [pc, #24]	; (8000f94 <prv_read_can_received_msg+0x10c>)
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4798      	blx	r3
 8000f80:	e000      	b.n	8000f84 <prv_read_can_received_msg+0xfc>
        return;
 8000f82:	bf00      	nop
    }
}
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000261 	.word	0x20000261
 8000f90:	20000240 	.word	0x20000240
 8000f94:	2000025c 	.word	0x2000025c
 8000f98:	20000220 	.word	0x20000220

08000f9c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	prv_read_can_received_msg(hcan, CAN_RX_FIFO0);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff6e 	bl	8000e88 <prv_read_can_received_msg>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	prv_read_can_received_msg(hcan, CAN_RX_FIFO1);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff62 	bl	8000e88 <prv_read_can_received_msg>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f001 feec 	bl	8002dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f860 	bl	8001098 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000fd8:	f000 ff74 	bl	8001ec4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 ffa2 	bl	8001f24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fe0:	f000 f8c4 	bl	800116c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000fe4:	f000 fa1c 	bl	8001420 <MX_ADC3_Init>
  MX_ADC2_Init();
 8000fe8:	f000 f974 	bl	80012d4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000fec:	f000 fada 	bl	80015a4 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000ff0:	f000 fb3a 	bl	8001668 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ff4:	f000 fbfc 	bl	80017f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff8:	f000 fc86 	bl	8001908 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ffc:	f000 fd06 	bl	8001a0c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001000:	f000 fd9c 	bl	8001b3c <MX_TIM8_Init>
  MX_TIM9_Init();
 8001004:	f000 fe5e 	bl	8001cc4 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001008:	f000 fe96 	bl	8001d38 <MX_TIM12_Init>
  MX_USB_OTG_FS_PCD_Init();
 800100c:	f000 ff2c 	bl	8001e68 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8001010:	f000 ff58 	bl	8001ec4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001014:	f000 fefe 	bl	8001e14 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001018:	f000 faf8 	bl	800160c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800101c:	f006 fd66 	bl	8007aec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <main+0x9c>)
 8001022:	2100      	movs	r1, #0
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <main+0xa0>)
 8001026:	f006 fdab 	bl	8007b80 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <main+0xa4>)
 800102e:	6013      	str	r3, [r2, #0]

  /* creation of luaTask */
  luaTaskHandle = osThreadNew(vLuaTask, NULL, &luaTask_attributes);
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <main+0xa8>)
 8001032:	2100      	movs	r1, #0
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <main+0xac>)
 8001036:	f006 fda3 	bl	8007b80 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <main+0xb0>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(vADCTask, NULL, &ADCTask_attributes);
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <main+0xb4>)
 8001042:	2100      	movs	r1, #0
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <main+0xb8>)
 8001046:	f006 fd9b 	bl	8007b80 <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <main+0xbc>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of OutContolTask */
  OutContolTaskHandle = osThreadNew(vOutContolTask, NULL, &OutContolTask_attributes);
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <main+0xc0>)
 8001052:	2100      	movs	r1, #0
 8001054:	480e      	ldr	r0, [pc, #56]	; (8001090 <main+0xc4>)
 8001056:	f006 fd93 	bl	8007b80 <osThreadNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <main+0xc8>)
 800105e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001060:	f006 fd68 	bl	8007b34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001064:	e7fe      	b.n	8001064 <main+0x98>
 8001066:	bf00      	nop
 8001068:	0800be14 	.word	0x0800be14
 800106c:	08002125 	.word	0x08002125
 8001070:	20000c28 	.word	0x20000c28
 8001074:	0800be38 	.word	0x0800be38
 8001078:	0800bbad 	.word	0x0800bbad
 800107c:	20000c2c 	.word	0x20000c2c
 8001080:	0800be5c 	.word	0x0800be5c
 8001084:	0800b371 	.word	0x0800b371
 8001088:	20000c30 	.word	0x20000c30
 800108c:	0800be80 	.word	0x0800be80
 8001090:	0800b7a9 	.word	0x0800b7a9
 8001094:	20000ef0 	.word	0x20000ef0

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	; 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00a fdbc 	bl	800bc24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <SystemClock_Config+0xcc>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <SystemClock_Config+0xd0>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800110c:	23a8      	movs	r3, #168	; 0xa8
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001114:	2307      	movs	r3, #7
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f004 f915 	bl	800534c <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001128:	f001 f816 	bl	8002158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001138:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2105      	movs	r1, #5
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fb76 	bl	800583c <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001156:	f000 ffff 	bl	8002158 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117e:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <MX_ADC1_Init+0x15c>)
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <MX_ADC1_Init+0x160>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001184:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <MX_ADC1_Init+0x15c>)
 8001186:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800118a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118c:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <MX_ADC1_Init+0x15c>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001192:	4b4d      	ldr	r3, [pc, #308]	; (80012c8 <MX_ADC1_Init+0x15c>)
 8001194:	2201      	movs	r2, #1
 8001196:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <MX_ADC1_Init+0x15c>)
 800119a:	2201      	movs	r2, #1
 800119c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b48      	ldr	r3, [pc, #288]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b46      	ldr	r3, [pc, #280]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011ae:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <MX_ADC1_Init+0x164>)
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b2:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80011b8:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011ba:	2208      	movs	r2, #8
 80011bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011be:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011cc:	483e      	ldr	r0, [pc, #248]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011ce:	f001 fe53 	bl	8002e78 <HAL_ADC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 ffbe 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011dc:	2304      	movs	r3, #4
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	4836      	ldr	r0, [pc, #216]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80011ee:	f002 f80f 	bl	8003210 <HAL_ADC_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011f8:	f000 ffae 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011fc:	2307      	movs	r3, #7
 80011fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	482f      	ldr	r0, [pc, #188]	; (80012c8 <MX_ADC1_Init+0x15c>)
 800120a:	f002 f801 	bl	8003210 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001214:	f000 ffa0 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001218:	2306      	movs	r3, #6
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800121c:	2303      	movs	r3, #3
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4828      	ldr	r0, [pc, #160]	; (80012c8 <MX_ADC1_Init+0x15c>)
 8001226:	f001 fff3 	bl	8003210 <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001230:	f000 ff92 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001234:	2305      	movs	r3, #5
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001238:	2304      	movs	r3, #4
 800123a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	4821      	ldr	r0, [pc, #132]	; (80012c8 <MX_ADC1_Init+0x15c>)
 8001242:	f001 ffe5 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800124c:	f000 ff84 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001250:	230e      	movs	r3, #14
 8001252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001254:	2305      	movs	r3, #5
 8001256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <MX_ADC1_Init+0x15c>)
 800125e:	f001 ffd7 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001268:	f000 ff76 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800126c:	230f      	movs	r3, #15
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001270:	2306      	movs	r3, #6
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <MX_ADC1_Init+0x15c>)
 800127a:	f001 ffc9 	bl	8003210 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001284:	f000 ff68 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001288:	2308      	movs	r3, #8
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800128c:	2307      	movs	r3, #7
 800128e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_ADC1_Init+0x15c>)
 8001296:	f001 ffbb 	bl	8003210 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80012a0:	f000 ff5a 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012a4:	2309      	movs	r3, #9
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012a8:	2308      	movs	r3, #8
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_ADC1_Init+0x15c>)
 80012b2:	f001 ffad 	bl	8003210 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80012bc:	f000 ff4c 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000026c 	.word	0x2000026c
 80012cc:	40012000 	.word	0x40012000
 80012d0:	0f000001 	.word	0x0f000001

080012d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <MX_ADC2_Init+0x140>)
 80012e8:	4a4b      	ldr	r2, [pc, #300]	; (8001418 <MX_ADC2_Init+0x144>)
 80012ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80012ec:	4b49      	ldr	r3, [pc, #292]	; (8001414 <MX_ADC2_Init+0x140>)
 80012ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012f4:	4b47      	ldr	r3, [pc, #284]	; (8001414 <MX_ADC2_Init+0x140>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <MX_ADC2_Init+0x140>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001300:	4b44      	ldr	r3, [pc, #272]	; (8001414 <MX_ADC2_Init+0x140>)
 8001302:	2201      	movs	r2, #1
 8001304:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <MX_ADC2_Init+0x140>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <MX_ADC2_Init+0x140>)
 8001310:	2200      	movs	r2, #0
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <MX_ADC2_Init+0x140>)
 8001316:	4a41      	ldr	r2, [pc, #260]	; (800141c <MX_ADC2_Init+0x148>)
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <MX_ADC2_Init+0x140>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 8001320:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <MX_ADC2_Init+0x140>)
 8001322:	2207      	movs	r2, #7
 8001324:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <MX_ADC2_Init+0x140>)
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <MX_ADC2_Init+0x140>)
 8001330:	2201      	movs	r2, #1
 8001332:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001334:	4837      	ldr	r0, [pc, #220]	; (8001414 <MX_ADC2_Init+0x140>)
 8001336:	f001 fd9f 	bl	8002e78 <HAL_ADC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001340:	f000 ff0a 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001344:	230b      	movs	r3, #11
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	482f      	ldr	r0, [pc, #188]	; (8001414 <MX_ADC2_Init+0x140>)
 8001356:	f001 ff5b 	bl	8003210 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001360:	f000 fefa 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001364:	2300      	movs	r3, #0
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001368:	2302      	movs	r3, #2
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4828      	ldr	r0, [pc, #160]	; (8001414 <MX_ADC2_Init+0x140>)
 8001372:	f001 ff4d 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800137c:	f000 feec 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001380:	2301      	movs	r3, #1
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001384:	2303      	movs	r3, #3
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4821      	ldr	r0, [pc, #132]	; (8001414 <MX_ADC2_Init+0x140>)
 800138e:	f001 ff3f 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001398:	f000 fede 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800139c:	230d      	movs	r3, #13
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	481a      	ldr	r0, [pc, #104]	; (8001414 <MX_ADC2_Init+0x140>)
 80013aa:	f001 ff31 	bl	8003210 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80013b4:	f000 fed0 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013b8:	230c      	movs	r3, #12
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80013bc:	2305      	movs	r3, #5
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4813      	ldr	r0, [pc, #76]	; (8001414 <MX_ADC2_Init+0x140>)
 80013c6:	f001 ff23 	bl	8003210 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80013d0:	f000 fec2 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013d4:	2303      	movs	r3, #3
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80013d8:	2306      	movs	r3, #6
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <MX_ADC2_Init+0x140>)
 80013e2:	f001 ff15 	bl	8003210 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80013ec:	f000 feb4 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80013f4:	2307      	movs	r3, #7
 80013f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_ADC2_Init+0x140>)
 80013fe:	f001 ff07 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8001408:	f000 fea6 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200002b4 	.word	0x200002b4
 8001418:	40012100 	.word	0x40012100
 800141c:	0f000001 	.word	0x0f000001

08001420 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001432:	4b59      	ldr	r3, [pc, #356]	; (8001598 <MX_ADC3_Init+0x178>)
 8001434:	4a59      	ldr	r2, [pc, #356]	; (800159c <MX_ADC3_Init+0x17c>)
 8001436:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001438:	4b57      	ldr	r3, [pc, #348]	; (8001598 <MX_ADC3_Init+0x178>)
 800143a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800143e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001440:	4b55      	ldr	r3, [pc, #340]	; (8001598 <MX_ADC3_Init+0x178>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001446:	4b54      	ldr	r3, [pc, #336]	; (8001598 <MX_ADC3_Init+0x178>)
 8001448:	2201      	movs	r2, #1
 800144a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800144c:	4b52      	ldr	r3, [pc, #328]	; (8001598 <MX_ADC3_Init+0x178>)
 800144e:	2201      	movs	r2, #1
 8001450:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <MX_ADC3_Init+0x178>)
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800145a:	4b4f      	ldr	r3, [pc, #316]	; (8001598 <MX_ADC3_Init+0x178>)
 800145c:	2200      	movs	r2, #0
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001460:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <MX_ADC3_Init+0x178>)
 8001462:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <MX_ADC3_Init+0x180>)
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001466:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <MX_ADC3_Init+0x178>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 9;
 800146c:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <MX_ADC3_Init+0x178>)
 800146e:	2209      	movs	r2, #9
 8001470:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001472:	4b49      	ldr	r3, [pc, #292]	; (8001598 <MX_ADC3_Init+0x178>)
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <MX_ADC3_Init+0x178>)
 800147c:	2201      	movs	r2, #1
 800147e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001480:	4845      	ldr	r0, [pc, #276]	; (8001598 <MX_ADC3_Init+0x178>)
 8001482:	f001 fcf9 	bl	8002e78 <HAL_ADC_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800148c:	f000 fe64 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001490:	230e      	movs	r3, #14
 8001492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001494:	2301      	movs	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	4619      	mov	r1, r3
 80014a0:	483d      	ldr	r0, [pc, #244]	; (8001598 <MX_ADC3_Init+0x178>)
 80014a2:	f001 feb5 	bl	8003210 <HAL_ADC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80014ac:	f000 fe54 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014b0:	2309      	movs	r3, #9
 80014b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	4836      	ldr	r0, [pc, #216]	; (8001598 <MX_ADC3_Init+0x178>)
 80014be:	f001 fea7 	bl	8003210 <HAL_ADC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80014c8:	f000 fe46 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014cc:	2307      	movs	r3, #7
 80014ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80014d0:	2303      	movs	r3, #3
 80014d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	4619      	mov	r1, r3
 80014d8:	482f      	ldr	r0, [pc, #188]	; (8001598 <MX_ADC3_Init+0x178>)
 80014da:	f001 fe99 	bl	8003210 <HAL_ADC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80014e4:	f000 fe38 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014e8:	2304      	movs	r3, #4
 80014ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80014ec:	2304      	movs	r3, #4
 80014ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4828      	ldr	r0, [pc, #160]	; (8001598 <MX_ADC3_Init+0x178>)
 80014f6:	f001 fe8b 	bl	8003210 <HAL_ADC_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8001500:	f000 fe2a 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001504:	230f      	movs	r3, #15
 8001506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001508:	2305      	movs	r3, #5
 800150a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	4619      	mov	r1, r3
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <MX_ADC3_Init+0x178>)
 8001512:	f001 fe7d 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 800151c:	f000 fe1c 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001520:	2308      	movs	r3, #8
 8001522:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001524:	2306      	movs	r3, #6
 8001526:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <MX_ADC3_Init+0x178>)
 800152e:	f001 fe6f 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8001538:	f000 fe0e 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800153c:	230a      	movs	r3, #10
 800153e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001540:	2307      	movs	r3, #7
 8001542:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	4813      	ldr	r0, [pc, #76]	; (8001598 <MX_ADC3_Init+0x178>)
 800154a:	f001 fe61 	bl	8003210 <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8001554:	f000 fe00 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001558:	2306      	movs	r3, #6
 800155a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800155c:	2308      	movs	r3, #8
 800155e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001560:	463b      	mov	r3, r7
 8001562:	4619      	mov	r1, r3
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <MX_ADC3_Init+0x178>)
 8001566:	f001 fe53 	bl	8003210 <HAL_ADC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8001570:	f000 fdf2 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001574:	2305      	movs	r3, #5
 8001576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001578:	2309      	movs	r3, #9
 800157a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_ADC3_Init+0x178>)
 8001582:	f001 fe45 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC3_Init+0x170>
  {
    Error_Handler();
 800158c:	f000 fde4 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200002fc 	.word	0x200002fc
 800159c:	40012200 	.word	0x40012200
 80015a0:	0f000001 	.word	0x0f000001

080015a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_CAN1_Init+0x60>)
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <MX_CAN1_Init+0x64>)
 80015ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_CAN1_Init+0x60>)
 80015b0:	2210      	movs	r2, #16
 80015b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_CAN1_Init+0x60>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_CAN1_Init+0x60>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_CAN1_Init+0x60>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_CAN1_Init+0x60>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_CAN1_Init+0x60>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_CAN1_Init+0x60>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <MX_CAN1_Init+0x60>)
 80015da:	2200      	movs	r2, #0
 80015dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_CAN1_Init+0x60>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_CAN1_Init+0x60>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_CAN1_Init+0x60>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_CAN1_Init+0x60>)
 80015f2:	f002 f8ad 	bl	8003750 <HAL_CAN_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80015fc:	f000 fdac 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000464 	.word	0x20000464
 8001608:	40006400 	.word	0x40006400

0800160c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_I2C2_Init+0x50>)
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <MX_I2C2_Init+0x54>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_I2C2_Init+0x50>)
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_I2C2_Init+0x58>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_I2C2_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_I2C2_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_I2C2_Init+0x50>)
 800162a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_I2C2_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_I2C2_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_I2C2_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_I2C2_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_I2C2_Init+0x50>)
 800164a:	f003 fc1d 	bl	8004e88 <HAL_I2C_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001654:	f000 fd80 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000048c 	.word	0x2000048c
 8001660:	40005800 	.word	0x40005800
 8001664:	000186a0 	.word	0x000186a0

08001668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b096      	sub	sp, #88	; 0x58
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2220      	movs	r2, #32
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00a fabf 	bl	800bc24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016a8:	4a50      	ldr	r2, [pc, #320]	; (80017ec <MX_TIM1_Init+0x184>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016ac:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c6:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016d2:	4845      	ldr	r0, [pc, #276]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016d4:	f004 fb04 	bl	8005ce0 <HAL_TIM_Base_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016de:	f000 fd3b 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016ec:	4619      	mov	r1, r3
 80016ee:	483e      	ldr	r0, [pc, #248]	; (80017e8 <MX_TIM1_Init+0x180>)
 80016f0:	f004 ff12 	bl	8006518 <HAL_TIM_ConfigClockSource>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016fa:	f000 fd2d 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016fe:	483a      	ldr	r0, [pc, #232]	; (80017e8 <MX_TIM1_Init+0x180>)
 8001700:	f004 fbae 	bl	8005e60 <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800170a:	f000 fd25 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800171a:	4619      	mov	r1, r3
 800171c:	4832      	ldr	r0, [pc, #200]	; (80017e8 <MX_TIM1_Init+0x180>)
 800171e:	f005 fafb 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001728:	f000 fd16 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	2200      	movs	r2, #0
 800174e:	4619      	mov	r1, r3
 8001750:	4825      	ldr	r0, [pc, #148]	; (80017e8 <MX_TIM1_Init+0x180>)
 8001752:	f004 fe1f 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800175c:	f000 fcfc 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	2204      	movs	r2, #4
 8001766:	4619      	mov	r1, r3
 8001768:	481f      	ldr	r0, [pc, #124]	; (80017e8 <MX_TIM1_Init+0x180>)
 800176a:	f004 fe13 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001774:	f000 fcf0 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	2208      	movs	r2, #8
 800177e:	4619      	mov	r1, r3
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <MX_TIM1_Init+0x180>)
 8001782:	f004 fe07 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800178c:	f000 fce4 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	220c      	movs	r2, #12
 8001796:	4619      	mov	r1, r3
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_TIM1_Init+0x180>)
 800179a:	f004 fdfb 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017a4:	f000 fcd8 	bl	8002158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <MX_TIM1_Init+0x180>)
 80017cc:	f005 fb20 	bl	8006e10 <HAL_TIMEx_ConfigBreakDeadTime>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80017d6:	f000 fcbf 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <MX_TIM1_Init+0x180>)
 80017dc:	f001 f81c 	bl	8002818 <HAL_TIM_MspPostInit>

}
 80017e0:	bf00      	nop
 80017e2:	3758      	adds	r7, #88	; 0x58
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200004e0 	.word	0x200004e0
 80017ec:	40010000 	.word	0x40010000

080017f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <MX_TIM2_Init+0x114>)
 8001822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001826:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42;
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <MX_TIM2_Init+0x114>)
 800182a:	222a      	movs	r2, #42	; 0x2a
 800182c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <MX_TIM2_Init+0x114>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <MX_TIM2_Init+0x114>)
 8001836:	f242 7210 	movw	r2, #10000	; 0x2710
 800183a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <MX_TIM2_Init+0x114>)
 800183e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <MX_TIM2_Init+0x114>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800184a:	482e      	ldr	r0, [pc, #184]	; (8001904 <MX_TIM2_Init+0x114>)
 800184c:	f004 fa48 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001856:	f000 fc7f 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001864:	4619      	mov	r1, r3
 8001866:	4827      	ldr	r0, [pc, #156]	; (8001904 <MX_TIM2_Init+0x114>)
 8001868:	f004 fe56 	bl	8006518 <HAL_TIM_ConfigClockSource>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001872:	f000 fc71 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_TIM2_Init+0x114>)
 8001878:	f004 faf2 	bl	8005e60 <HAL_TIM_PWM_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001882:	f000 fc69 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001886:	2320      	movs	r3, #32
 8001888:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4619      	mov	r1, r3
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <MX_TIM2_Init+0x114>)
 8001896:	f005 fa3f 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018a0:	f000 fc5a 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a4:	2360      	movs	r3, #96	; 0x60
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2204      	movs	r2, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4812      	ldr	r0, [pc, #72]	; (8001904 <MX_TIM2_Init+0x114>)
 80018bc:	f004 fd6a 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80018c6:	f000 fc47 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2208      	movs	r2, #8
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <MX_TIM2_Init+0x114>)
 80018d2:	f004 fd5f 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80018dc:	f000 fc3c 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	220c      	movs	r2, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM2_Init+0x114>)
 80018e8:	f004 fd54 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80018f2:	f000 fc31 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018f6:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM2_Init+0x114>)
 80018f8:	f000 ff8e 	bl	8002818 <HAL_TIM_MspPostInit>

}
 80018fc:	bf00      	nop
 80018fe:	3738      	adds	r7, #56	; 0x38
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000528 	.word	0x20000528

08001908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800193a:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <MX_TIM3_Init+0x100>)
 800193c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <MX_TIM3_Init+0xfc>)
 8001940:	222a      	movs	r2, #42	; 0x2a
 8001942:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <MX_TIM3_Init+0xfc>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800194c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <MX_TIM3_Init+0xfc>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800195e:	4829      	ldr	r0, [pc, #164]	; (8001a04 <MX_TIM3_Init+0xfc>)
 8001960:	f004 f9be 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800196a:	f000 fbf5 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001978:	4619      	mov	r1, r3
 800197a:	4822      	ldr	r0, [pc, #136]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800197c:	f004 fdcc 	bl	8006518 <HAL_TIM_ConfigClockSource>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001986:	f000 fbe7 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800198a:	481e      	ldr	r0, [pc, #120]	; (8001a04 <MX_TIM3_Init+0xfc>)
 800198c:	f004 fa68 	bl	8005e60 <HAL_TIM_PWM_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001996:	f000 fbdf 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 800199a:	2360      	movs	r3, #96	; 0x60
 800199c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a2:	f107 0320 	add.w	r3, r7, #32
 80019a6:	4619      	mov	r1, r3
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <MX_TIM3_Init+0xfc>)
 80019aa:	f005 f9b5 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019b4:	f000 fbd0 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b8:	2360      	movs	r3, #96	; 0x60
 80019ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_TIM3_Init+0xfc>)
 80019d0:	f004 fce0 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019da:	f000 fbbd 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2204      	movs	r2, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM3_Init+0xfc>)
 80019e6:	f004 fcd5 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80019f0:	f000 fbb2 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM3_Init+0xfc>)
 80019f6:	f000 ff0f 	bl	8002818 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000570 	.word	0x20000570
 8001a08:	40000400 	.word	0x40000400

08001a0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a3e:	4a3e      	ldr	r2, [pc, #248]	; (8001b38 <MX_TIM4_Init+0x12c>)
 8001a40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 43;
 8001a42:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a44:	222b      	movs	r2, #43	; 0x2b
 8001a46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a48:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a62:	4834      	ldr	r0, [pc, #208]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a64:	f004 f93c 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a6e:	f000 fb73 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	482d      	ldr	r0, [pc, #180]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a80:	f004 fd4a 	bl	8006518 <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a8a:	f000 fb65 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a8e:	4829      	ldr	r0, [pc, #164]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001a90:	f004 f9e6 	bl	8005e60 <HAL_TIM_PWM_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a9a:	f000 fb5d 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4821      	ldr	r0, [pc, #132]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001aae:	f005 f933 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ab8:	f000 fb4e 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abc:	2360      	movs	r3, #96	; 0x60
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4818      	ldr	r0, [pc, #96]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001ad4:	f004 fc5e 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ade:	f000 fb3b 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4812      	ldr	r0, [pc, #72]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001aea:	f004 fc53 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001af4:	f000 fb30 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2208      	movs	r2, #8
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001b00:	f004 fc48 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001b0a:	f000 fb25 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	220c      	movs	r2, #12
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001b16:	f004 fc3d 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001b20:	f000 fb1a 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <MX_TIM4_Init+0x128>)
 8001b26:	f000 fe77 	bl	8002818 <HAL_TIM_MspPostInit>

}
 8001b2a:	bf00      	nop
 8001b2c:	3738      	adds	r7, #56	; 0x38
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200005b8 	.word	0x200005b8
 8001b38:	40000800 	.word	0x40000800

08001b3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b096      	sub	sp, #88	; 0x58
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2220      	movs	r2, #32
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00a f855 	bl	800bc24 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b7a:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001b7c:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <MX_TIM8_Init+0x184>)
 8001b7e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 42;
 8001b80:	4b4e      	ldr	r3, [pc, #312]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001b82:	222a      	movs	r2, #42	; 0x2a
 8001b84:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b92:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b49      	ldr	r3, [pc, #292]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b9a:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba0:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ba6:	4845      	ldr	r0, [pc, #276]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001ba8:	f004 f89a 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001bb2:	f000 fad1 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	483e      	ldr	r0, [pc, #248]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001bc4:	f004 fca8 	bl	8006518 <HAL_TIM_ConfigClockSource>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001bce:	f000 fac3 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bd2:	483a      	ldr	r0, [pc, #232]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001bd4:	f004 f944 	bl	8005e60 <HAL_TIM_PWM_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001bde:	f000 fabb 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001be2:	2320      	movs	r3, #32
 8001be4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4832      	ldr	r0, [pc, #200]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001bf2:	f005 f891 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001bfc:	f000 faac 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c00:	2360      	movs	r3, #96	; 0x60
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	2200      	movs	r2, #0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4825      	ldr	r0, [pc, #148]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001c26:	f004 fbb5 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001c30:	f000 fa92 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c38:	2204      	movs	r2, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481f      	ldr	r0, [pc, #124]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001c3e:	f004 fba9 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001c48:	f000 fa86 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c50:	2208      	movs	r2, #8
 8001c52:	4619      	mov	r1, r3
 8001c54:	4819      	ldr	r0, [pc, #100]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001c56:	f004 fb9d 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001c60:	f000 fa7a 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	220c      	movs	r2, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001c6e:	f004 fb91 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001c78:	f000 fa6e 	bl	8002158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001ca0:	f005 f8b6 	bl	8006e10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001caa:	f000 fa55 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001cae:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_TIM8_Init+0x180>)
 8001cb0:	f000 fdb2 	bl	8002818 <HAL_TIM_MspPostInit>

}
 8001cb4:	bf00      	nop
 8001cb6:	3758      	adds	r7, #88	; 0x58
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000600 	.word	0x20000600
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_TIM9_Init+0x6c>)
 8001cd8:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <MX_TIM9_Init+0x70>)
 8001cda:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_TIM9_Init+0x6c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_TIM9_Init+0x6c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_TIM9_Init+0x6c>)
 8001cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cee:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_TIM9_Init+0x6c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_TIM9_Init+0x6c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <MX_TIM9_Init+0x6c>)
 8001cfe:	f003 ffef 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001d08:	f000 fa26 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	4619      	mov	r1, r3
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <MX_TIM9_Init+0x6c>)
 8001d18:	f004 fbfe 	bl	8006518 <HAL_TIM_ConfigClockSource>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001d22:	f000 fa19 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000648 	.word	0x20000648
 8001d34:	40014000 	.word	0x40014000

08001d38 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001d60:	4a2b      	ldr	r2, [pc, #172]	; (8001e10 <MX_TIM12_Init+0xd8>)
 8001d62:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 43;
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001d66:	222b      	movs	r2, #43	; 0x2b
 8001d68:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d76:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d84:	4821      	ldr	r0, [pc, #132]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001d86:	f003 ffab 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001d90:	f000 f9e2 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d98:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001d9a:	f107 0320 	add.w	r3, r7, #32
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481a      	ldr	r0, [pc, #104]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001da2:	f004 fbb9 	bl	8006518 <HAL_TIM_ConfigClockSource>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001dac:	f000 f9d4 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001db0:	4816      	ldr	r0, [pc, #88]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001db2:	f004 f855 	bl	8005e60 <HAL_TIM_PWM_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001dbc:	f000 f9cc 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc0:	2360      	movs	r3, #96	; 0x60
 8001dc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001dd8:	f004 fadc 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001de2:	f000 f9b9 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2204      	movs	r2, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001dee:	f004 fad1 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001df8:	f000 f9ae 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <MX_TIM12_Init+0xd4>)
 8001dfe:	f000 fd0b 	bl	8002818 <HAL_TIM_MspPostInit>

}
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000690 	.word	0x20000690
 8001e10:	40001800 	.word	0x40001800

08001e14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <MX_USART2_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e4c:	f005 f846 	bl	8006edc <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f000 f97f 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200006d8 	.word	0x200006d8
 8001e64:	40004400 	.word	0x40004400

08001e68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e76:	2204      	movs	r2, #4
 8001e78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eac:	f003 f930 	bl	8005110 <HAL_PCD_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001eb6:	f000 f94f 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000071c 	.word	0x2000071c

08001ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_DMA_Init+0x5c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <MX_DMA_Init+0x5c>)
 8001ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_DMA_Init+0x5c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2105      	movs	r1, #5
 8001eea:	2038      	movs	r0, #56	; 0x38
 8001eec:	f002 fa0c 	bl	8004308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ef0:	2038      	movs	r0, #56	; 0x38
 8001ef2:	f002 fa25 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2105      	movs	r1, #5
 8001efa:	203a      	movs	r0, #58	; 0x3a
 8001efc:	f002 fa04 	bl	8004308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f00:	203a      	movs	r0, #58	; 0x3a
 8001f02:	f002 fa1d 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2105      	movs	r1, #5
 8001f0a:	203c      	movs	r0, #60	; 0x3c
 8001f0c:	f002 f9fc 	bl	8004308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001f10:	203c      	movs	r0, #60	; 0x3c
 8001f12:	f002 fa15 	bl	8004340 <HAL_NVIC_EnableIRQ>

}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	; 0x38
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
 8001f3e:	4b73      	ldr	r3, [pc, #460]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a72      	ldr	r2, [pc, #456]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f44:	f043 0310 	orr.w	r3, r3, #16
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b70      	ldr	r3, [pc, #448]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	4b6c      	ldr	r3, [pc, #432]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a6b      	ldr	r2, [pc, #428]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f60:	f043 0320 	orr.w	r3, r3, #32
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b69      	ldr	r3, [pc, #420]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	4b65      	ldr	r3, [pc, #404]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a64      	ldr	r2, [pc, #400]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b62      	ldr	r3, [pc, #392]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	4b5e      	ldr	r3, [pc, #376]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a5d      	ldr	r2, [pc, #372]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b5b      	ldr	r3, [pc, #364]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b57      	ldr	r3, [pc, #348]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a56      	ldr	r2, [pc, #344]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b50      	ldr	r3, [pc, #320]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a4f      	ldr	r2, [pc, #316]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b4d      	ldr	r3, [pc, #308]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b49      	ldr	r3, [pc, #292]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a48      	ldr	r2, [pc, #288]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b46      	ldr	r3, [pc, #280]	; (800210c <MX_GPIO_Init+0x1e8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b42      	ldr	r3, [pc, #264]	; (800210c <MX_GPIO_Init+0x1e8>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a41      	ldr	r2, [pc, #260]	; (800210c <MX_GPIO_Init+0x1e8>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b3f      	ldr	r3, [pc, #252]	; (800210c <MX_GPIO_Init+0x1e8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 800201a:	2201      	movs	r2, #1
 800201c:	f641 413e 	movw	r1, #7230	; 0x1c3e
 8002020:	483b      	ldr	r0, [pc, #236]	; (8002110 <MX_GPIO_Init+0x1ec>)
 8002022:	f002 ff17 	bl	8004e54 <HAL_GPIO_WritePin>
                          |Cs_Dis8_17_18_Pin|Cs_Dis8_15_16_Pin|Cs_Dis20_3_Pin|Cs_Dis20_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cs_Dis20_6_GPIO_Port, Cs_Dis20_6_Pin, GPIO_PIN_SET);
 8002026:	2201      	movs	r2, #1
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	483a      	ldr	r0, [pc, #232]	; (8002114 <MX_GPIO_Init+0x1f0>)
 800202c:	f002 ff12 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8002036:	4838      	ldr	r0, [pc, #224]	; (8002118 <MX_GPIO_Init+0x1f4>)
 8002038:	f002 ff0c 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	21c0      	movs	r1, #192	; 0xc0
 8002040:	4833      	ldr	r0, [pc, #204]	; (8002110 <MX_GPIO_Init+0x1ec>)
 8002042:	f002 ff07 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Din3_Pin Din4_Pin Din5_Pin Din6_Pin
                           Din7_Pin Din1_Pin Din2_Pin */
  GPIO_InitStruct.Pin = Din3_Pin|Din4_Pin|Din5_Pin|Din6_Pin
 8002046:	237f      	movs	r3, #127	; 0x7f
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
                          |Din7_Pin|Din1_Pin|Din2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800204e:	2302      	movs	r3, #2
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	482e      	ldr	r0, [pc, #184]	; (8002114 <MX_GPIO_Init+0x1f0>)
 800205a:	f002 fd5f 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Din10_Pin Din11_Pin Din12_Pin */
  GPIO_InitStruct.Pin = Din10_Pin|Din11_Pin|Din12_Pin;
 800205e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800206c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	482a      	ldr	r0, [pc, #168]	; (800211c <MX_GPIO_Init+0x1f8>)
 8002074:	f002 fd52 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cs_Dis20_5_Pin Cs_Dis20_2_Pin Cs_Dis20_1_Pin Cs_Dis8_13_14_Pin
                           Cs_Dis8_17_18_Pin PG6 PG7 Cs_Dis8_15_16_Pin
                           Cs_Dis20_3_Pin Cs_Dis20_4_Pin */
  GPIO_InitStruct.Pin = Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 8002078:	f641 43fe 	movw	r3, #7422	; 0x1cfe
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
                          |Cs_Dis8_17_18_Pin|GPIO_PIN_6|GPIO_PIN_7|Cs_Dis8_15_16_Pin
                          |Cs_Dis20_3_Pin|Cs_Dis20_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	481f      	ldr	r0, [pc, #124]	; (8002110 <MX_GPIO_Init+0x1ec>)
 8002092:	f002 fd43 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cs_Dis20_6_Pin */
  GPIO_InitStruct.Pin = Cs_Dis20_6_Pin;
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Cs_Dis20_6_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	4819      	ldr	r0, [pc, #100]	; (8002114 <MX_GPIO_Init+0x1f0>)
 80020ae:	f002 fd35 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cs_Dis8_9_10_Pin */
  GPIO_InitStruct.Pin = Cs_Dis8_9_10_Pin;
 80020b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cs_Dis8_9_10_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	4619      	mov	r1, r3
 80020c6:	4813      	ldr	r0, [pc, #76]	; (8002114 <MX_GPIO_Init+0x1f0>)
 80020c8:	f002 fd28 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cs_Dis8_11_12_Pin Cs_Dis20_7_Pin Cs_Dis8_19_20_Pin Cs_Dis20_8_Pin */
  GPIO_InitStruct.Pin = Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin;
 80020cc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <MX_GPIO_Init+0x1f4>)
 80020e6:	f002 fd19 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Din9_Pin Din8_Pin */
  GPIO_InitStruct.Pin = Din9_Pin|Din8_Pin;
 80020ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4808      	ldr	r0, [pc, #32]	; (8002120 <MX_GPIO_Init+0x1fc>)
 8002100:	f002 fd0c 	bl	8004b1c <HAL_GPIO_Init>

}
 8002104:	bf00      	nop
 8002106:	3738      	adds	r7, #56	; 0x38
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40021800 	.word	0x40021800
 8002114:	40021000 	.word	0x40021000
 8002118:	40020c00 	.word	0x40020c00
 800211c:	40021400 	.word	0x40021400
 8002120:	40020400 	.word	0x40020400

08002124 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800212c:	2001      	movs	r0, #1
 800212e:	f005 fdb9 	bl	8007ca4 <osDelay>
 8002132:	e7fb      	b.n	800212c <StartDefaultTask+0x8>

08002134 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002146:	f000 fe53 	bl	8002df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40002000 	.word	0x40002000

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002160:	e7fe      	b.n	8002160 <Error_Handler+0x8>
	...

08002164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_MspInit+0x54>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_MspInit+0x54>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_MspInit+0x54>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_MspInit+0x54>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_MspInit+0x54>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_MspInit+0x54>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	210f      	movs	r1, #15
 80021a6:	f06f 0001 	mvn.w	r0, #1
 80021aa:	f002 f8ad 	bl	8004308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b092      	sub	sp, #72	; 0x48
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a84      	ldr	r2, [pc, #528]	; (80023ec <HAL_ADC_MspInit+0x230>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	f040 808c 	bne.w	80022f8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
 80021e4:	4b82      	ldr	r3, [pc, #520]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	4a81      	ldr	r2, [pc, #516]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6453      	str	r3, [r2, #68]	; 0x44
 80021f0:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002200:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6313      	str	r3, [r2, #48]	; 0x30
 800220c:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
 800221c:	4b74      	ldr	r3, [pc, #464]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	4a73      	ldr	r2, [pc, #460]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6313      	str	r3, [r2, #48]	; 0x30
 8002228:	4b71      	ldr	r3, [pc, #452]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
 8002238:	4b6d      	ldr	r3, [pc, #436]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	4a6c      	ldr	r2, [pc, #432]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	6313      	str	r3, [r2, #48]	; 0x30
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = CS20_7_Pin|CS8_20_Pin|CS8_19_Pin|CS20_8_Pin;
 8002250:	23f0      	movs	r3, #240	; 0xf0
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002254:	2303      	movs	r3, #3
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002260:	4619      	mov	r1, r3
 8002262:	4864      	ldr	r0, [pc, #400]	; (80023f4 <HAL_ADC_MspInit+0x238>)
 8002264:	f002 fc5a 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_4_Pin|ADC1_5_Pin;
 8002268:	2330      	movs	r3, #48	; 0x30
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800226c:	2303      	movs	r3, #3
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002274:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002278:	4619      	mov	r1, r3
 800227a:	485f      	ldr	r0, [pc, #380]	; (80023f8 <HAL_ADC_MspInit+0x23c>)
 800227c:	f002 fc4e 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_8_Pin|ADC1_9_Pin;
 8002280:	2303      	movs	r3, #3
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002284:	2303      	movs	r3, #3
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002290:	4619      	mov	r1, r3
 8002292:	485a      	ldr	r0, [pc, #360]	; (80023fc <HAL_ADC_MspInit+0x240>)
 8002294:	f002 fc42 	bl	8004b1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_ADC_MspInit+0x244>)
 800229a:	4a5a      	ldr	r2, [pc, #360]	; (8002404 <HAL_ADC_MspInit+0x248>)
 800229c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800229e:	4b58      	ldr	r3, [pc, #352]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022a4:	4b56      	ldr	r3, [pc, #344]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022aa:	4b55      	ldr	r3, [pc, #340]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80022c8:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022ce:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d4:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022da:	4849      	ldr	r0, [pc, #292]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022dc:	f002 f83e 	bl	800435c <HAL_DMA_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80022e6:	f7ff ff37 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a44      	ldr	r2, [pc, #272]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
 80022f0:	4a43      	ldr	r2, [pc, #268]	; (8002400 <HAL_ADC_MspInit+0x244>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80022f6:	e105      	b.n	8002504 <HAL_ADC_MspInit+0x348>
  else if(hadc->Instance==ADC2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a42      	ldr	r2, [pc, #264]	; (8002408 <HAL_ADC_MspInit+0x24c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	f040 8088 	bne.w	8002414 <HAL_ADC_MspInit+0x258>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	4a38      	ldr	r2, [pc, #224]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002312:	6453      	str	r3, [r2, #68]	; 0x44
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6313      	str	r3, [r2, #48]	; 0x30
 8002330:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6313      	str	r3, [r2, #48]	; 0x30
 800234c:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_ADC_MspInit+0x234>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS20_4_Pin|CS8_10_Pin|CS8_9_Pin;
 8002358:	230e      	movs	r3, #14
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235c:	2303      	movs	r3, #3
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002364:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002368:	4619      	mov	r1, r3
 800236a:	4823      	ldr	r0, [pc, #140]	; (80023f8 <HAL_ADC_MspInit+0x23c>)
 800236c:	f002 fbd6 	bl	8004b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS20_5_Pin|CS20_6_Pin|CS8_12_Pin|CS8_11_Pin;
 8002370:	230f      	movs	r3, #15
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002374:	2303      	movs	r3, #3
 8002376:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002380:	4619      	mov	r1, r3
 8002382:	481c      	ldr	r0, [pc, #112]	; (80023f4 <HAL_ADC_MspInit+0x238>)
 8002384:	f002 fbca 	bl	8004b1c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_ADC_MspInit+0x250>)
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_ADC_MspInit+0x254>)
 800238c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_ADC_MspInit+0x250>)
 8002390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002394:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_ADC_MspInit+0x250>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_ADC_MspInit+0x250>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023b0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023bc:	2200      	movs	r2, #0
 80023be:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80023cc:	480f      	ldr	r0, [pc, #60]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023ce:	f001 ffc5 	bl	800435c <HAL_DMA_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_ADC_MspInit+0x220>
      Error_Handler();
 80023d8:	f7ff febe 	bl	8002158 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023e0:	639a      	str	r2, [r3, #56]	; 0x38
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_ADC_MspInit+0x250>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023e8:	e08c      	b.n	8002504 <HAL_ADC_MspInit+0x348>
 80023ea:	bf00      	nop
 80023ec:	40012000 	.word	0x40012000
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020400 	.word	0x40020400
 8002400:	20000344 	.word	0x20000344
 8002404:	40026470 	.word	0x40026470
 8002408:	40012100 	.word	0x40012100
 800240c:	200003a4 	.word	0x200003a4
 8002410:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a3c      	ldr	r2, [pc, #240]	; (800250c <HAL_ADC_MspInit+0x350>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d172      	bne.n	8002504 <HAL_ADC_MspInit+0x348>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_ADC_MspInit+0x354>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <HAL_ADC_MspInit+0x354>)
 8002428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	4b38      	ldr	r3, [pc, #224]	; (8002510 <HAL_ADC_MspInit+0x354>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b34      	ldr	r3, [pc, #208]	; (8002510 <HAL_ADC_MspInit+0x354>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a33      	ldr	r2, [pc, #204]	; (8002510 <HAL_ADC_MspInit+0x354>)
 8002444:	f043 0320 	orr.w	r3, r3, #32
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_ADC_MspInit+0x354>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_ADC_MspInit+0x354>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <HAL_ADC_MspInit+0x354>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_ADC_MspInit+0x354>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CS20_2_Pin|CS20_1_Pin|CS8_14_Pin|CS8_13_Pin
 8002472:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002478:	2303      	movs	r3, #3
 800247a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002480:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002484:	4619      	mov	r1, r3
 8002486:	4823      	ldr	r0, [pc, #140]	; (8002514 <HAL_ADC_MspInit+0x358>)
 8002488:	f002 fb48 	bl	8004b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS8_16_Pin;
 800248c:	2301      	movs	r3, #1
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002490:	2303      	movs	r3, #3
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(CS8_16_GPIO_Port, &GPIO_InitStruct);
 8002498:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800249c:	4619      	mov	r1, r3
 800249e:	481e      	ldr	r0, [pc, #120]	; (8002518 <HAL_ADC_MspInit+0x35c>)
 80024a0:	f002 fb3c 	bl	8004b1c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_ADC_MspInit+0x364>)
 80024a8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024b0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024cc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024d8:	2200      	movs	r2, #0
 80024da:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024de:	2200      	movs	r2, #0
 80024e0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80024e8:	480c      	ldr	r0, [pc, #48]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024ea:	f001 ff37 	bl	800435c <HAL_DMA_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_ADC_MspInit+0x33c>
      Error_Handler();
 80024f4:	f7ff fe30 	bl	8002158 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_ADC_MspInit+0x360>)
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_ADC_MspInit+0x360>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002504:	bf00      	nop
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40012200 	.word	0x40012200
 8002510:	40023800 	.word	0x40023800
 8002514:	40021400 	.word	0x40021400
 8002518:	40020800 	.word	0x40020800
 800251c:	20000404 	.word	0x20000404
 8002520:	40026410 	.word	0x40026410

08002524 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_CAN_MspInit+0xb4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d143      	bne.n	80025ce <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_CAN_MspInit+0xb8>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_CAN_MspInit+0xb8>)
 8002550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_CAN_MspInit+0xb8>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_CAN_MspInit+0xb8>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <HAL_CAN_MspInit+0xb8>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <HAL_CAN_MspInit+0xb8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800257e:	2303      	movs	r3, #3
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800258e:	2309      	movs	r3, #9
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4811      	ldr	r0, [pc, #68]	; (80025e0 <HAL_CAN_MspInit+0xbc>)
 800259a:	f002 fabf 	bl	8004b1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2105      	movs	r1, #5
 80025a2:	2013      	movs	r0, #19
 80025a4:	f001 feb0 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80025a8:	2013      	movs	r0, #19
 80025aa:	f001 fec9 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2105      	movs	r1, #5
 80025b2:	2014      	movs	r0, #20
 80025b4:	f001 fea8 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80025b8:	2014      	movs	r0, #20
 80025ba:	f001 fec1 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2105      	movs	r1, #5
 80025c2:	2015      	movs	r0, #21
 80025c4:	f001 fea0 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80025c8:	2015      	movs	r0, #21
 80025ca:	f001 feb9 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40006400 	.word	0x40006400
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020c00 	.word	0x40020c00

080025e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_I2C_MspInit+0x84>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d12b      	bne.n	800265e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_I2C_MspInit+0x88>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a17      	ldr	r2, [pc, #92]	; (800266c <HAL_I2C_MspInit+0x88>)
 8002610:	f043 0320 	orr.w	r3, r3, #32
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_I2C_MspInit+0x88>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002622:	2303      	movs	r3, #3
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002626:	2312      	movs	r3, #18
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	2301      	movs	r3, #1
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002632:	2304      	movs	r3, #4
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	480c      	ldr	r0, [pc, #48]	; (8002670 <HAL_I2C_MspInit+0x8c>)
 800263e:	f002 fa6d 	bl	8004b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_I2C_MspInit+0x88>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a08      	ldr	r2, [pc, #32]	; (800266c <HAL_I2C_MspInit+0x88>)
 800264c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_I2C_MspInit+0x88>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800265e:	bf00      	nop
 8002660:	3728      	adds	r7, #40	; 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40005800 	.word	0x40005800
 800266c:	40023800 	.word	0x40023800
 8002670:	40021400 	.word	0x40021400

08002674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a5e      	ldr	r2, [pc, #376]	; (80027fc <HAL_TIM_Base_MspInit+0x188>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a5c      	ldr	r2, [pc, #368]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80026a2:	e0a6      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d116      	bne.n	80026dc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b50      	ldr	r3, [pc, #320]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2105      	movs	r1, #5
 80026ce:	201c      	movs	r0, #28
 80026d0:	f001 fe1a 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026d4:	201c      	movs	r0, #28
 80026d6:	f001 fe33 	bl	8004340 <HAL_NVIC_EnableIRQ>
}
 80026da:	e08a      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a48      	ldr	r2, [pc, #288]	; (8002804 <HAL_TIM_Base_MspInit+0x190>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	4b45      	ldr	r3, [pc, #276]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a44      	ldr	r2, [pc, #272]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b42      	ldr	r3, [pc, #264]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
}
 8002702:	e076      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM4)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <HAL_TIM_Base_MspInit+0x194>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10e      	bne.n	800272c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	69bb      	ldr	r3, [r7, #24]
}
 800272a:	e062      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM8)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a36      	ldr	r2, [pc, #216]	; (800280c <HAL_TIM_Base_MspInit+0x198>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d12e      	bne.n	8002794 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a30      	ldr	r2, [pc, #192]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2105      	movs	r1, #5
 8002756:	202b      	movs	r0, #43	; 0x2b
 8002758:	f001 fdd6 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800275c:	202b      	movs	r0, #43	; 0x2b
 800275e:	f001 fdef 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2105      	movs	r1, #5
 8002766:	202c      	movs	r0, #44	; 0x2c
 8002768:	f001 fdce 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800276c:	202c      	movs	r0, #44	; 0x2c
 800276e:	f001 fde7 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	210f      	movs	r1, #15
 8002776:	202d      	movs	r0, #45	; 0x2d
 8002778:	f001 fdc6 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800277c:	202d      	movs	r0, #45	; 0x2d
 800277e:	f001 fddf 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2105      	movs	r1, #5
 8002786:	202e      	movs	r0, #46	; 0x2e
 8002788:	f001 fdbe 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800278c:	202e      	movs	r0, #46	; 0x2e
 800278e:	f001 fdd7 	bl	8004340 <HAL_NVIC_EnableIRQ>
}
 8002792:	e02e      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM9)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_TIM_Base_MspInit+0x19c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
}
 80027ba:	e01a      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM12)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_TIM_Base_MspInit+0x1a0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d115      	bne.n	80027f2 <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80027d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_TIM_Base_MspInit+0x18c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2105      	movs	r1, #5
 80027e6:	202b      	movs	r0, #43	; 0x2b
 80027e8:	f001 fd8e 	bl	8004308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80027ec:	202b      	movs	r0, #43	; 0x2b
 80027ee:	f001 fda7 	bl	8004340 <HAL_NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	; 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	40023800 	.word	0x40023800
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40010400 	.word	0x40010400
 8002810:	40014000 	.word	0x40014000
 8002814:	40001800 	.word	0x40001800

08002818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	; 0x38
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_TIM_MspPostInit+0x1d8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11f      	bne.n	800287a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
 800283e:	4b6d      	ldr	r3, [pc, #436]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a6c      	ldr	r2, [pc, #432]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 8002844:	f043 0310 	orr.w	r3, r3, #16
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	623b      	str	r3, [r7, #32]
 8002854:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = InCH8_9_Pin|InCH8_10_Pin|InCH20_5_Pin|InCH20_6_Pin;
 8002856:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002868:	2301      	movs	r3, #1
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	4619      	mov	r1, r3
 8002872:	4861      	ldr	r0, [pc, #388]	; (80029f8 <HAL_TIM_MspPostInit+0x1e0>)
 8002874:	f002 f952 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002878:	e0b6      	b.n	80029e8 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d11f      	bne.n	80028c4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4a59      	ldr	r2, [pc, #356]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	6313      	str	r3, [r2, #48]	; 0x30
 8002894:	4b57      	ldr	r3, [pc, #348]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = InCH8_12_Pin|InCH8_11_Pin|InCH8_16_Pin;
 80028a0:	f640 4308 	movw	r3, #3080	; 0xc08
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028b2:	2301      	movs	r3, #1
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ba:	4619      	mov	r1, r3
 80028bc:	484f      	ldr	r0, [pc, #316]	; (80029fc <HAL_TIM_MspPostInit+0x1e4>)
 80028be:	f002 f92d 	bl	8004b1c <HAL_GPIO_Init>
}
 80028c2:	e091      	b.n	80029e8 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM3)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a4d      	ldr	r2, [pc, #308]	; (8002a00 <HAL_TIM_MspPostInit+0x1e8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d11e      	bne.n	800290c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	4b48      	ldr	r3, [pc, #288]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a47      	ldr	r2, [pc, #284]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = InCH8_15_Pin|InCH20_4_Pin;
 80028ea:	2330      	movs	r3, #48	; 0x30
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028fa:	2302      	movs	r3, #2
 80028fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002902:	4619      	mov	r1, r3
 8002904:	483d      	ldr	r0, [pc, #244]	; (80029fc <HAL_TIM_MspPostInit+0x1e4>)
 8002906:	f002 f909 	bl	8004b1c <HAL_GPIO_Init>
}
 800290a:	e06d      	b.n	80029e8 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM4)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <HAL_TIM_MspPostInit+0x1ec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d11f      	bne.n	8002956 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = InCH8_20_Pin|InCH20_8_Pin|InCH20_1_Pin|InCH20_2_Pin;
 8002932:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002944:	2302      	movs	r3, #2
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	482e      	ldr	r0, [pc, #184]	; (8002a08 <HAL_TIM_MspPostInit+0x1f0>)
 8002950:	f002 f8e4 	bl	8004b1c <HAL_GPIO_Init>
}
 8002954:	e048      	b.n	80029e8 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM8)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_TIM_MspPostInit+0x1f4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d11f      	bne.n	80029a0 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = InCH8_13_Pin|InCH8_14_Pin|InCH8_17_Pin|InCH8_18_Pin;
 800297c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800298e:	2303      	movs	r3, #3
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	4619      	mov	r1, r3
 8002998:	481d      	ldr	r0, [pc, #116]	; (8002a10 <HAL_TIM_MspPostInit+0x1f8>)
 800299a:	f002 f8bf 	bl	8004b1c <HAL_GPIO_Init>
}
 800299e:	e023      	b.n	80029e8 <HAL_TIM_MspPostInit+0x1d0>
  else if(htim->Instance==TIM12)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_TIM_MspPostInit+0x1fc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d11e      	bne.n	80029e8 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_TIM_MspPostInit+0x1dc>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = InCH20_7_Pin|InCH8_19_Pin;
 80029c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80029d8:	2309      	movs	r3, #9
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e0:	4619      	mov	r1, r3
 80029e2:	4806      	ldr	r0, [pc, #24]	; (80029fc <HAL_TIM_MspPostInit+0x1e4>)
 80029e4:	f002 f89a 	bl	8004b1c <HAL_GPIO_Init>
}
 80029e8:	bf00      	nop
 80029ea:	3738      	adds	r7, #56	; 0x38
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40010400 	.word	0x40010400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40001800 	.word	0x40001800

08002a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_UART_MspInit+0x84>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d12b      	bne.n	8002a92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a60:	f043 0308 	orr.w	r3, r3, #8
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_UART_MspInit+0x88>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a72:	2360      	movs	r3, #96	; 0x60
 8002a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a82:	2307      	movs	r3, #7
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <HAL_UART_MspInit+0x8c>)
 8002a8e:	f002 f845 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	; 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40004400 	.word	0x40004400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020c00 	.word	0x40020c00

08002aa8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac8:	d13f      	bne.n	8002b4a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_PCD_MspInit+0xac>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_PCD_MspInit+0xac>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_PCD_MspInit+0xac>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002ae6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002af8:	230a      	movs	r3, #10
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4815      	ldr	r0, [pc, #84]	; (8002b58 <HAL_PCD_MspInit+0xb0>)
 8002b04:	f002 f80a 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	480e      	ldr	r0, [pc, #56]	; (8002b58 <HAL_PCD_MspInit+0xb0>)
 8002b1e:	f001 fffd 	bl	8004b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_PCD_MspInit+0xac>)
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <HAL_PCD_MspInit+0xac>)
 8002b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2c:	6353      	str	r3, [r2, #52]	; 0x34
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_PCD_MspInit+0xac>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_PCD_MspInit+0xac>)
 8002b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_PCD_MspInit+0xac>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000

08002b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	202d      	movs	r0, #45	; 0x2d
 8002b72:	f001 fbc9 	bl	8004308 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b76:	202d      	movs	r0, #45	; 0x2d
 8002b78:	f001 fbe2 	bl	8004340 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_InitTick+0xa4>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_InitTick+0xa4>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_InitTick+0xa4>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b98:	f107 0210 	add.w	r2, r7, #16
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 f86a 	bl	8005c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ba8:	f003 f840 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8002bac:	4603      	mov	r3, r0
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <HAL_InitTick+0xa8>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0c9b      	lsrs	r3, r3, #18
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_InitTick+0xac>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_InitTick+0xb0>)
 8002bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_InitTick+0xac>)
 8002bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bcc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <HAL_InitTick+0xac>)
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_InitTick+0xac>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_InitTick+0xac>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8002be0:	4809      	ldr	r0, [pc, #36]	; (8002c08 <HAL_InitTick+0xac>)
 8002be2:	f003 f87d 	bl	8005ce0 <HAL_TIM_Base_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002bec:	4806      	ldr	r0, [pc, #24]	; (8002c08 <HAL_InitTick+0xac>)
 8002bee:	f003 f8c7 	bl	8005d80 <HAL_TIM_Base_Start_IT>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	e000      	b.n	8002bf8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3730      	adds	r7, #48	; 0x30
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	200011b0 	.word	0x200011b0
 8002c0c:	40002000 	.word	0x40002000

08002c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <NMI_Handler+0x4>

08002c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <MemManage_Handler+0x4>

08002c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <BusFault_Handler+0x4>

08002c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <UsageFault_Handler+0x4>

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <CAN1_TX_IRQHandler+0x10>)
 8002c42:	f001 f8a2 	bl	8003d8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000464 	.word	0x20000464

08002c50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <CAN1_RX0_IRQHandler+0x10>)
 8002c56:	f001 f898 	bl	8003d8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000464 	.word	0x20000464

08002c64 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <CAN1_RX1_IRQHandler+0x10>)
 8002c6a:	f001 f88e 	bl	8003d8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000464 	.word	0x20000464

08002c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <TIM2_IRQHandler+0x10>)
 8002c7e:	f003 fa81 	bl	8006184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000528 	.word	0x20000528

08002c8c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002c90:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002c92:	f003 fa77 	bl	8006184 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002c96:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002c98:	f003 fa74 	bl	8006184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000600 	.word	0x20000600
 8002ca4:	20000690 	.word	0x20000690

08002ca8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002cae:	f003 fa69 	bl	8006184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000600 	.word	0x20000600

08002cbc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002cc2:	f003 fa5f 	bl	8006184 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002cc6:	4803      	ldr	r0, [pc, #12]	; (8002cd4 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002cc8:	f003 fa5c 	bl	8006184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000600 	.word	0x20000600
 8002cd4:	200011b0 	.word	0x200011b0

08002cd8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <TIM8_CC_IRQHandler+0x10>)
 8002cde:	f003 fa51 	bl	8006184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000600 	.word	0x20000600

08002cec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	vADC_Ready(ADC3_READY);
 8002cf0:	2004      	movs	r0, #4
 8002cf2:	f008 ff19 	bl	800bb28 <vADC_Ready>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002cf6:	4802      	ldr	r0, [pc, #8]	; (8002d00 <DMA2_Stream0_IRQHandler+0x14>)
 8002cf8:	f001 fca6 	bl	8004648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000404 	.word	0x20000404

08002d04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	vADC_Ready(ADC2_READY);
 8002d08:	2002      	movs	r0, #2
 8002d0a:	f008 ff0d 	bl	800bb28 <vADC_Ready>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002d0e:	4802      	ldr	r0, [pc, #8]	; (8002d18 <DMA2_Stream2_IRQHandler+0x14>)
 8002d10:	f001 fc9a 	bl	8004648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200003a4 	.word	0x200003a4

08002d1c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */
   vADC_Ready(ADC1_READY);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f008 ff01 	bl	800bb28 <vADC_Ready>
  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d26:	4802      	ldr	r0, [pc, #8]	; (8002d30 <DMA2_Stream4_IRQHandler+0x14>)
 8002d28:	f001 fc8e 	bl	8004648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000344 	.word	0x20000344

08002d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <SystemInit+0x20>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <SystemInit+0x20>)
 8002d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d5e:	490e      	ldr	r1, [pc, #56]	; (8002d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d60:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d64:	e002      	b.n	8002d6c <LoopCopyDataInit>

08002d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6a:	3304      	adds	r3, #4

08002d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d70:	d3f9      	bcc.n	8002d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d72:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d74:	4c0b      	ldr	r4, [pc, #44]	; (8002da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d78:	e001      	b.n	8002d7e <LoopFillZerobss>

08002d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d7c:	3204      	adds	r2, #4

08002d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d80:	d3fb      	bcc.n	8002d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d82:	f7ff ffd7 	bl	8002d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d86:	f008 ff19 	bl	800bbbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8a:	f7fe f91f 	bl	8000fcc <main>
  bx  lr    
 8002d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d98:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002d9c:	0800bf34 	.word	0x0800bf34
  ldr r2, =_sbss
 8002da0:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002da4:	20006418 	.word	0x20006418

08002da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002da8:	e7fe      	b.n	8002da8 <ADC_IRQHandler>
	...

08002dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_Init+0x40>)
 8002db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_Init+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_Init+0x40>)
 8002dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_Init+0x40>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a07      	ldr	r2, [pc, #28]	; (8002dec <HAL_Init+0x40>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f001 fa8c 	bl	80042f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dda:	200f      	movs	r0, #15
 8002ddc:	f7ff febe 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de0:	f7ff f9c0 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023c00 	.word	0x40023c00

08002df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_IncTick+0x20>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_IncTick+0x24>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <HAL_IncTick+0x24>)
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000008 	.word	0x20000008
 8002e14:	200011f8 	.word	0x200011f8

08002e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_GetTick+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	200011f8 	.word	0x200011f8

08002e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7ff ffee 	bl	8002e18 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d005      	beq.n	8002e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_Delay+0x44>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e56:	bf00      	nop
 8002e58:	f7ff ffde 	bl	8002e18 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8f7      	bhi.n	8002e58 <HAL_Delay+0x28>
  {
  }
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000008 	.word	0x20000008

08002e78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e033      	b.n	8002ef6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff f990 	bl	80021bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ebe:	f023 0302 	bic.w	r3, r3, #2
 8002ec2:	f043 0202 	orr.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fac2 	bl	8003454 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ee6:	e001      	b.n	8002eec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Start_DMA+0x1e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0e9      	b.n	80030f2 <HAL_ADC_Start_DMA+0x1f2>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d018      	beq.n	8002f66 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f44:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <HAL_ADC_Start_DMA+0x1fc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6d      	ldr	r2, [pc, #436]	; (8003100 <HAL_ADC_Start_DMA+0x200>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9a      	lsrs	r2, r3, #18
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f58:	e002      	b.n	8002f60 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f9      	bne.n	8002f5a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f74:	d107      	bne.n	8002f86 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f84:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 80a1 	bne.w	80030d8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d106      	bne.n	8002fe4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f023 0206 	bic.w	r2, r3, #6
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8002fe2:	e002      	b.n	8002fea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff2:	4b44      	ldr	r3, [pc, #272]	; (8003104 <HAL_ADC_Start_DMA+0x204>)
 8002ff4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	4a43      	ldr	r2, [pc, #268]	; (8003108 <HAL_ADC_Start_DMA+0x208>)
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	4a42      	ldr	r2, [pc, #264]	; (800310c <HAL_ADC_Start_DMA+0x20c>)
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	4a41      	ldr	r2, [pc, #260]	; (8003110 <HAL_ADC_Start_DMA+0x210>)
 800300c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003016:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003026:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003036:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	334c      	adds	r3, #76	; 0x4c
 8003042:	4619      	mov	r1, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f001 fa36 	bl	80044b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2b00      	cmp	r3, #0
 8003056:	d12a      	bne.n	80030ae <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2d      	ldr	r2, [pc, #180]	; (8003114 <HAL_ADC_Start_DMA+0x214>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d015      	beq.n	800308e <HAL_ADC_Start_DMA+0x18e>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <HAL_ADC_Start_DMA+0x218>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d105      	bne.n	8003078 <HAL_ADC_Start_DMA+0x178>
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_ADC_Start_DMA+0x204>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_ADC_Start_DMA+0x21c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d136      	bne.n	80030f0 <HAL_ADC_Start_DMA+0x1f0>
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_ADC_Start_DMA+0x204>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d130      	bne.n	80030f0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d129      	bne.n	80030f0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	e020      	b.n	80030f0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <HAL_ADC_Start_DMA+0x214>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d11b      	bne.n	80030f0 <HAL_ADC_Start_DMA+0x1f0>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d114      	bne.n	80030f0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	e00b      	b.n	80030f0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f043 0210 	orr.w	r2, r3, #16
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000
 8003100:	431bde83 	.word	0x431bde83
 8003104:	40012300 	.word	0x40012300
 8003108:	0800364d 	.word	0x0800364d
 800310c:	08003707 	.word	0x08003707
 8003110:	08003723 	.word	0x08003723
 8003114:	40012000 	.word	0x40012000
 8003118:	40012100 	.word	0x40012100
 800311c:	40012200 	.word	0x40012200

08003120 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_Stop_DMA+0x1a>
 8003136:	2302      	movs	r3, #2
 8003138:	e048      	b.n	80031cc <HAL_ADC_Stop_DMA+0xac>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d130      	bne.n	80031c2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d10f      	bne.n	800319e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f9f0 	bl	8004568 <HAL_DMA_Abort>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80031ac:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1c>
 8003228:	2302      	movs	r3, #2
 800322a:	e105      	b.n	8003438 <HAL_ADC_ConfigChannel+0x228>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b09      	cmp	r3, #9
 800323a:	d925      	bls.n	8003288 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68d9      	ldr	r1, [r3, #12]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	3b1e      	subs	r3, #30
 8003252:	2207      	movs	r2, #7
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43da      	mvns	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	400a      	ands	r2, r1
 8003260:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68d9      	ldr	r1, [r3, #12]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	4618      	mov	r0, r3
 8003274:	4603      	mov	r3, r0
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4403      	add	r3, r0
 800327a:	3b1e      	subs	r3, #30
 800327c:	409a      	lsls	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e022      	b.n	80032ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6919      	ldr	r1, [r3, #16]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	2207      	movs	r2, #7
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	400a      	ands	r2, r1
 80032aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4403      	add	r3, r0
 80032c4:	409a      	lsls	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d824      	bhi.n	8003320 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b05      	subs	r3, #5
 80032e8:	221f      	movs	r2, #31
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b05      	subs	r3, #5
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
 800331e:	e04c      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d824      	bhi.n	8003372 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b23      	subs	r3, #35	; 0x23
 800333a:	221f      	movs	r2, #31
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43da      	mvns	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	400a      	ands	r2, r1
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	4618      	mov	r0, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	3b23      	subs	r3, #35	; 0x23
 8003364:	fa00 f203 	lsl.w	r2, r0, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
 8003370:	e023      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b41      	subs	r3, #65	; 0x41
 8003384:	221f      	movs	r2, #31
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	400a      	ands	r2, r1
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	3b41      	subs	r3, #65	; 0x41
 80033ae:	fa00 f203 	lsl.w	r2, r0, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <HAL_ADC_ConfigChannel+0x234>)
 80033bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_ADC_ConfigChannel+0x238>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d109      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1cc>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d105      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_ADC_ConfigChannel+0x238>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d123      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d003      	beq.n	80033f6 <HAL_ADC_ConfigChannel+0x1e6>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b11      	cmp	r3, #17
 80033f4:	d11b      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b10      	cmp	r3, #16
 8003408:	d111      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_ADC_ConfigChannel+0x23c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <HAL_ADC_ConfigChannel+0x240>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	0c9a      	lsrs	r2, r3, #18
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003420:	e002      	b.n	8003428 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3b01      	subs	r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f9      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40012300 	.word	0x40012300
 8003448:	40012000 	.word	0x40012000
 800344c:	20000000 	.word	0x20000000
 8003450:	431bde83 	.word	0x431bde83

08003454 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800345c:	4b79      	ldr	r3, [pc, #484]	; (8003644 <ADC_Init+0x1f0>)
 800345e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	021a      	lsls	r2, r3, #8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	4a58      	ldr	r2, [pc, #352]	; (8003648 <ADC_Init+0x1f4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800351c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	e00f      	b.n	8003552 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0202 	bic.w	r2, r2, #2
 8003560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6899      	ldr	r1, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7e1b      	ldrb	r3, [r3, #24]
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800359e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	3b01      	subs	r3, #1
 80035ac:	035a      	lsls	r2, r3, #13
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	e007      	b.n	80035c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	051a      	lsls	r2, r3, #20
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800360a:	025a      	lsls	r2, r3, #9
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	029a      	lsls	r2, r3, #10
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40012300 	.word	0x40012300
 8003648:	0f000001 	.word	0x0f000001

0800364c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003662:	2b00      	cmp	r3, #0
 8003664:	d13c      	bne.n	80036e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d12b      	bne.n	80036d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003684:	2b00      	cmp	r3, #0
 8003686:	d127      	bne.n	80036d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d119      	bne.n	80036d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0220 	bic.w	r2, r2, #32
 80036b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff fd7b 	bl	80031d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036de:	e00e      	b.n	80036fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff fd85 	bl	80031fc <HAL_ADC_ErrorCallback>
}
 80036f2:	e004      	b.n	80036fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7ff fd67 	bl	80031e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fd5a 	bl	80031fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0ed      	b.n	800393e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe fed8 	bl	8002524 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003784:	f7ff fb48 	bl	8002e18 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800378a:	e012      	b.n	80037b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800378c:	f7ff fb44 	bl	8002e18 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b0a      	cmp	r3, #10
 8003798:	d90b      	bls.n	80037b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2205      	movs	r2, #5
 80037aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0c5      	b.n	800393e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0e5      	beq.n	800378c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0202 	bic.w	r2, r2, #2
 80037ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d0:	f7ff fb22 	bl	8002e18 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037d6:	e012      	b.n	80037fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037d8:	f7ff fb1e 	bl	8002e18 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b0a      	cmp	r3, #10
 80037e4:	d90b      	bls.n	80037fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2205      	movs	r2, #5
 80037f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e09f      	b.n	800393e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7e1b      	ldrb	r3, [r3, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d108      	bne.n	8003826 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e007      	b.n	8003836 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7e5b      	ldrb	r3, [r3, #25]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d108      	bne.n	8003850 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e007      	b.n	8003860 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7e9b      	ldrb	r3, [r3, #26]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d108      	bne.n	800387a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e007      	b.n	800388a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0220 	bic.w	r2, r2, #32
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7edb      	ldrb	r3, [r3, #27]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d108      	bne.n	80038a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0210 	bic.w	r2, r2, #16
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e007      	b.n	80038b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0210 	orr.w	r2, r2, #16
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	7f1b      	ldrb	r3, [r3, #28]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d108      	bne.n	80038ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e007      	b.n	80038de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0208 	bic.w	r2, r2, #8
 80038dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	7f5b      	ldrb	r3, [r3, #29]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d108      	bne.n	80038f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0204 	orr.w	r2, r2, #4
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e007      	b.n	8003908 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0204 	bic.w	r2, r2, #4
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	ea42 0103 	orr.w	r1, r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	1e5a      	subs	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003946:	b480      	push	{r7}
 8003948:	b089      	sub	sp, #36	; 0x24
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003964:	7ffb      	ldrb	r3, [r7, #31]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d003      	beq.n	8003972 <HAL_CAN_AddTxMessage+0x2c>
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	2b02      	cmp	r3, #2
 800396e:	f040 80b8 	bne.w	8003ae2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a0 	beq.w	8003ad2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d907      	bls.n	80039b2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e09e      	b.n	8003af0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039b2:	2201      	movs	r2, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10d      	bne.n	80039e0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	6809      	ldr	r1, [r1, #0]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3318      	adds	r3, #24
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	440b      	add	r3, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e00f      	b.n	8003a00 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039f0:	68f9      	ldr	r1, [r7, #12]
 80039f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80039f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3318      	adds	r3, #24
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	440b      	add	r3, r1
 80039fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3318      	adds	r3, #24
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	440b      	add	r3, r1
 8003a10:	3304      	adds	r3, #4
 8003a12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	7d1b      	ldrb	r3, [r3, #20]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d111      	bne.n	8003a40 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	3318      	adds	r3, #24
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	6811      	ldr	r1, [r2, #0]
 8003a30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3318      	adds	r3, #24
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3307      	adds	r3, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	061a      	lsls	r2, r3, #24
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3306      	adds	r3, #6
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3305      	adds	r3, #5
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	3204      	adds	r2, #4
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	4610      	mov	r0, r2
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	6811      	ldr	r1, [r2, #0]
 8003a68:	ea43 0200 	orr.w	r2, r3, r0
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	440b      	add	r3, r1
 8003a72:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3303      	adds	r3, #3
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	061a      	lsls	r2, r3, #24
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3302      	adds	r3, #2
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	4313      	orrs	r3, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	4610      	mov	r0, r2
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	6811      	ldr	r1, [r2, #0]
 8003a9e:	ea43 0200 	orr.w	r2, r3, r0
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003aac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	3318      	adds	r3, #24
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4413      	add	r3, r2
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	6811      	ldr	r1, [r2, #0]
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3318      	adds	r3, #24
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	440b      	add	r3, r1
 8003acc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e00e      	b.n	8003af0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e006      	b.n	8003af0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3724      	adds	r7, #36	; 0x24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b0e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b10:	7afb      	ldrb	r3, [r7, #11]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d002      	beq.n	8003b1c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003b16:	7afb      	ldrb	r3, [r7, #11]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11d      	bne.n	8003b58 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003b58:	68fb      	ldr	r3, [r7, #12]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b66:	b480      	push	{r7}
 8003b68:	b087      	sub	sp, #28
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b7a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d003      	beq.n	8003b8a <HAL_CAN_GetRxMessage+0x24>
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	f040 80f3 	bne.w	8003d70 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10e      	bne.n	8003bae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e0e7      	b.n	8003d7e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d107      	bne.n	8003bcc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0d8      	b.n	8003d7e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	331b      	adds	r3, #27
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0204 	and.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10c      	bne.n	8003c04 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	331b      	adds	r3, #27
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	4413      	add	r3, r2
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0d5b      	lsrs	r3, r3, #21
 8003bfa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e00b      	b.n	8003c1c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	331b      	adds	r3, #27
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	4413      	add	r3, r2
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	08db      	lsrs	r3, r3, #3
 8003c14:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	331b      	adds	r3, #27
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	4413      	add	r3, r2
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0202 	and.w	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	331b      	adds	r3, #27
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3304      	adds	r3, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 020f 	and.w	r2, r3, #15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	331b      	adds	r3, #27
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	4413      	add	r3, r2
 8003c56:	3304      	adds	r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	331b      	adds	r3, #27
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3304      	adds	r3, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0a1a      	lsrs	r2, r3, #8
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	0c1a      	lsrs	r2, r3, #16
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0e1a      	lsrs	r2, r3, #24
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	3303      	adds	r3, #3
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0a1a      	lsrs	r2, r3, #8
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3305      	adds	r3, #5
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0c1a      	lsrs	r2, r3, #16
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	3306      	adds	r3, #6
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	0e1a      	lsrs	r2, r3, #24
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	3307      	adds	r3, #7
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0220 	orr.w	r2, r2, #32
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	e007      	b.n	8003d6c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0220 	orr.w	r2, r2, #32
 8003d6a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e006      	b.n	8003d7e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08a      	sub	sp, #40	; 0x28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d07c      	beq.n	8003eca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d023      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7fd f82d 	bl	8000e4c <HAL_CAN_TxMailbox0CompleteCallback>
 8003df2:	e016      	b.n	8003e22 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e00c      	b.n	8003e22 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e002      	b.n	8003e22 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f96b 	bl	80040f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d024      	beq.n	8003e76 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7fd f80d 	bl	8000e60 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e46:	e016      	b.n	8003e76 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5a:	e00c      	b.n	8003e76 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	e002      	b.n	8003e76 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f94b 	bl	800410c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d024      	beq.n	8003eca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fc ffed 	bl	8000e74 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e9a:	e016      	b.n	8003eca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	e00c      	b.n	8003eca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e002      	b.n	8003eca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f92b 	bl	8004120 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2210      	movs	r2, #16
 8003eec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2208      	movs	r2, #8
 8003f08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f912 	bl	8004134 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fd f837 	bl	8000f9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00c      	beq.n	8003f52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2210      	movs	r2, #16
 8003f50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d006      	beq.n	8003f74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8ea 	bl	8004148 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fd f811 	bl	8000fb4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2210      	movs	r2, #16
 8003fac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8d4 	bl	800415c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d006      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8cd 	bl	8004170 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d07b      	beq.n	80040d8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d072      	beq.n	80040d0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	f043 0304 	orr.w	r3, r3, #4
 800403c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004044:	2b00      	cmp	r3, #0
 8004046:	d043      	beq.n	80040d0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800404e:	2b00      	cmp	r3, #0
 8004050:	d03e      	beq.n	80040d0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004058:	2b60      	cmp	r3, #96	; 0x60
 800405a:	d02b      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x32a>
 800405c:	2b60      	cmp	r3, #96	; 0x60
 800405e:	d82e      	bhi.n	80040be <HAL_CAN_IRQHandler+0x334>
 8004060:	2b50      	cmp	r3, #80	; 0x50
 8004062:	d022      	beq.n	80040aa <HAL_CAN_IRQHandler+0x320>
 8004064:	2b50      	cmp	r3, #80	; 0x50
 8004066:	d82a      	bhi.n	80040be <HAL_CAN_IRQHandler+0x334>
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d019      	beq.n	80040a0 <HAL_CAN_IRQHandler+0x316>
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d826      	bhi.n	80040be <HAL_CAN_IRQHandler+0x334>
 8004070:	2b30      	cmp	r3, #48	; 0x30
 8004072:	d010      	beq.n	8004096 <HAL_CAN_IRQHandler+0x30c>
 8004074:	2b30      	cmp	r3, #48	; 0x30
 8004076:	d822      	bhi.n	80040be <HAL_CAN_IRQHandler+0x334>
 8004078:	2b10      	cmp	r3, #16
 800407a:	d002      	beq.n	8004082 <HAL_CAN_IRQHandler+0x2f8>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d005      	beq.n	800408c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004080:	e01d      	b.n	80040be <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	f043 0308 	orr.w	r3, r3, #8
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800408a:	e019      	b.n	80040c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	f043 0310 	orr.w	r3, r3, #16
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004094:	e014      	b.n	80040c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	f043 0320 	orr.w	r3, r3, #32
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800409e:	e00f      	b.n	80040c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a8:	e00a      	b.n	80040c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b2:	e005      	b.n	80040c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040bc:	e000      	b.n	80040c0 <HAL_CAN_IRQHandler+0x336>
            break;
 80040be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2204      	movs	r2, #4
 80040d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f84a 	bl	8004184 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040f0:	bf00      	nop
 80040f2:	3728      	adds	r7, #40	; 0x28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <__NVIC_SetPriorityGrouping+0x44>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041b4:	4013      	ands	r3, r2
 80041b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ca:	4a04      	ldr	r2, [pc, #16]	; (80041dc <__NVIC_SetPriorityGrouping+0x44>)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	60d3      	str	r3, [r2, #12]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <__NVIC_GetPriorityGrouping+0x18>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	f003 0307 	and.w	r3, r3, #7
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	2b00      	cmp	r3, #0
 800420c:	db0b      	blt.n	8004226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	f003 021f 	and.w	r2, r3, #31
 8004214:	4907      	ldr	r1, [pc, #28]	; (8004234 <__NVIC_EnableIRQ+0x38>)
 8004216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	2001      	movs	r0, #1
 800421e:	fa00 f202 	lsl.w	r2, r0, r2
 8004222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000e100 	.word	0xe000e100

08004238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	6039      	str	r1, [r7, #0]
 8004242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004248:	2b00      	cmp	r3, #0
 800424a:	db0a      	blt.n	8004262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	490c      	ldr	r1, [pc, #48]	; (8004284 <__NVIC_SetPriority+0x4c>)
 8004252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004256:	0112      	lsls	r2, r2, #4
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	440b      	add	r3, r1
 800425c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004260:	e00a      	b.n	8004278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	4908      	ldr	r1, [pc, #32]	; (8004288 <__NVIC_SetPriority+0x50>)
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	3b04      	subs	r3, #4
 8004270:	0112      	lsls	r2, r2, #4
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	440b      	add	r3, r1
 8004276:	761a      	strb	r2, [r3, #24]
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000e100 	.word	0xe000e100
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f1c3 0307 	rsb	r3, r3, #7
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	bf28      	it	cs
 80042aa:	2304      	movcs	r3, #4
 80042ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3304      	adds	r3, #4
 80042b2:	2b06      	cmp	r3, #6
 80042b4:	d902      	bls.n	80042bc <NVIC_EncodePriority+0x30>
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3b03      	subs	r3, #3
 80042ba:	e000      	b.n	80042be <NVIC_EncodePriority+0x32>
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	401a      	ands	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042d4:	f04f 31ff 	mov.w	r1, #4294967295
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	43d9      	mvns	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e4:	4313      	orrs	r3, r2
         );
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3724      	adds	r7, #36	; 0x24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff4c 	bl	8004198 <__NVIC_SetPriorityGrouping>
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800431a:	f7ff ff61 	bl	80041e0 <__NVIC_GetPriorityGrouping>
 800431e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	6978      	ldr	r0, [r7, #20]
 8004326:	f7ff ffb1 	bl	800428c <NVIC_EncodePriority>
 800432a:	4602      	mov	r2, r0
 800432c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff80 	bl	8004238 <__NVIC_SetPriority>
}
 8004338:	bf00      	nop
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff54 	bl	80041fc <__NVIC_EnableIRQ>
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004368:	f7fe fd56 	bl	8002e18 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e099      	b.n	80044ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004398:	e00f      	b.n	80043ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800439a:	f7fe fd3d 	bl	8002e18 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d908      	bls.n	80043ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2203      	movs	r2, #3
 80043b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e078      	b.n	80044ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e8      	bne.n	800439a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4b38      	ldr	r3, [pc, #224]	; (80044b4 <HAL_DMA_Init+0x158>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b04      	cmp	r3, #4
 8004412:	d107      	bne.n	8004424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4313      	orrs	r3, r2
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f023 0307 	bic.w	r3, r3, #7
 800443a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b04      	cmp	r3, #4
 800444c:	d117      	bne.n	800447e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fadf 	bl	8004a24 <DMA_CheckFifoParam>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800447a:	2301      	movs	r3, #1
 800447c:	e016      	b.n	80044ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa96 	bl	80049b8 <DMA_CalcBaseAndBitshift>
 800448c:	4603      	mov	r3, r0
 800448e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004494:	223f      	movs	r2, #63	; 0x3f
 8004496:	409a      	lsls	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	f010803f 	.word	0xf010803f

080044b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_DMA_Start_IT+0x26>
 80044da:	2302      	movs	r3, #2
 80044dc:	e040      	b.n	8004560 <HAL_DMA_Start_IT+0xa8>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d12f      	bne.n	8004552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa28 	bl	800495c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	223f      	movs	r2, #63	; 0x3f
 8004512:	409a      	lsls	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0216 	orr.w	r2, r2, #22
 8004526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0208 	orr.w	r2, r2, #8
 800453e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e005      	b.n	800455e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800455a:	2302      	movs	r3, #2
 800455c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004576:	f7fe fc4f 	bl	8002e18 <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d008      	beq.n	800459a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e052      	b.n	8004640 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0216 	bic.w	r2, r2, #22
 80045a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <HAL_DMA_Abort+0x62>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0208 	bic.w	r2, r2, #8
 80045d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0201 	bic.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ea:	e013      	b.n	8004614 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ec:	f7fe fc14 	bl	8002e18 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d90c      	bls.n	8004614 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2203      	movs	r2, #3
 8004604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e015      	b.n	8004640 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e4      	bne.n	80045ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004626:	223f      	movs	r2, #63	; 0x3f
 8004628:	409a      	lsls	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004654:	4b8e      	ldr	r3, [pc, #568]	; (8004890 <HAL_DMA_IRQHandler+0x248>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a8e      	ldr	r2, [pc, #568]	; (8004894 <HAL_DMA_IRQHandler+0x24c>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	0a9b      	lsrs	r3, r3, #10
 8004660:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	2208      	movs	r2, #8
 8004674:	409a      	lsls	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01a      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0204 	bic.w	r2, r2, #4
 800469a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	2208      	movs	r2, #8
 80046a2:	409a      	lsls	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	f043 0201 	orr.w	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	2201      	movs	r2, #1
 80046ba:	409a      	lsls	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d012      	beq.n	80046ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	2201      	movs	r2, #1
 80046d8:	409a      	lsls	r2, r3
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	f043 0202 	orr.w	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	2204      	movs	r2, #4
 80046f0:	409a      	lsls	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d012      	beq.n	8004720 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00b      	beq.n	8004720 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	2204      	movs	r2, #4
 800470e:	409a      	lsls	r2, r3
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	f043 0204 	orr.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	2210      	movs	r2, #16
 8004726:	409a      	lsls	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d043      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d03c      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	2210      	movs	r2, #16
 8004744:	409a      	lsls	r2, r3
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d018      	beq.n	800478a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d108      	bne.n	8004778 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d024      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
 8004776:	e01f      	b.n	80047b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01b      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
 8004788:	e016      	b.n	80047b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d107      	bne.n	80047a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0208 	bic.w	r2, r2, #8
 80047a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047bc:	2220      	movs	r2, #32
 80047be:	409a      	lsls	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 808f 	beq.w	80048e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8087 	beq.w	80048e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047de:	2220      	movs	r2, #32
 80047e0:	409a      	lsls	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b05      	cmp	r3, #5
 80047f0:	d136      	bne.n	8004860 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0216 	bic.w	r2, r2, #22
 8004800:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004810:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <HAL_DMA_IRQHandler+0x1da>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0208 	bic.w	r2, r2, #8
 8004830:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	223f      	movs	r2, #63	; 0x3f
 8004838:	409a      	lsls	r2, r3
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	2b00      	cmp	r3, #0
 8004854:	d07e      	beq.n	8004954 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
        }
        return;
 800485e:	e079      	b.n	8004954 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01d      	beq.n	80048aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	2b00      	cmp	r3, #0
 8004882:	d031      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4798      	blx	r3
 800488c:	e02c      	b.n	80048e8 <HAL_DMA_IRQHandler+0x2a0>
 800488e:	bf00      	nop
 8004890:	20000000 	.word	0x20000000
 8004894:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d023      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
 80048a8:	e01e      	b.n	80048e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10f      	bne.n	80048d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0210 	bic.w	r2, r2, #16
 80048c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d032      	beq.n	8004956 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d022      	beq.n	8004942 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2205      	movs	r2, #5
 8004900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	3301      	adds	r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	429a      	cmp	r2, r3
 800491e:	d307      	bcc.n	8004930 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f2      	bne.n	8004914 <HAL_DMA_IRQHandler+0x2cc>
 800492e:	e000      	b.n	8004932 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004930:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
 8004952:	e000      	b.n	8004956 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004954:	bf00      	nop
    }
  }
}
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d108      	bne.n	800499c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800499a:	e007      	b.n	80049ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	3b10      	subs	r3, #16
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <DMA_CalcBaseAndBitshift+0x64>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <DMA_CalcBaseAndBitshift+0x68>)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d909      	bls.n	80049fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	1d1a      	adds	r2, r3, #4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	659a      	str	r2, [r3, #88]	; 0x58
 80049f8:	e007      	b.n	8004a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	aaaaaaab 	.word	0xaaaaaaab
 8004a20:	0800bebc 	.word	0x0800bebc

08004a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d11f      	bne.n	8004a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d856      	bhi.n	8004af2 <DMA_CheckFifoParam+0xce>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <DMA_CheckFifoParam+0x28>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a5d 	.word	0x08004a5d
 8004a50:	08004a6f 	.word	0x08004a6f
 8004a54:	08004a5d 	.word	0x08004a5d
 8004a58:	08004af3 	.word	0x08004af3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d046      	beq.n	8004af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6c:	e043      	b.n	8004af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a76:	d140      	bne.n	8004afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7c:	e03d      	b.n	8004afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a86:	d121      	bne.n	8004acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d837      	bhi.n	8004afe <DMA_CheckFifoParam+0xda>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <DMA_CheckFifoParam+0x70>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004aa5 	.word	0x08004aa5
 8004a98:	08004aab 	.word	0x08004aab
 8004a9c:	08004aa5 	.word	0x08004aa5
 8004aa0:	08004abd 	.word	0x08004abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa8:	e030      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d025      	beq.n	8004b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aba:	e022      	b.n	8004b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ac4:	d11f      	bne.n	8004b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004aca:	e01c      	b.n	8004b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d903      	bls.n	8004ada <DMA_CheckFifoParam+0xb6>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d003      	beq.n	8004ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ad8:	e018      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ade:	e015      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      break;
 8004af0:	e00b      	b.n	8004b0a <DMA_CheckFifoParam+0xe6>
      break;
 8004af2:	bf00      	nop
 8004af4:	e00a      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
      break;
 8004af6:	bf00      	nop
 8004af8:	e008      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
      break;
 8004afa:	bf00      	nop
 8004afc:	e006      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
      break;
 8004afe:	bf00      	nop
 8004b00:	e004      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
      break;
 8004b02:	bf00      	nop
 8004b04:	e002      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b06:	bf00      	nop
 8004b08:	e000      	b.n	8004b0c <DMA_CheckFifoParam+0xe8>
      break;
 8004b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop

08004b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b089      	sub	sp, #36	; 0x24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	e16b      	b.n	8004e10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b38:	2201      	movs	r2, #1
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	f040 815a 	bne.w	8004e0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d005      	beq.n	8004b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d130      	bne.n	8004bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	2203      	movs	r2, #3
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 0201 	and.w	r2, r3, #1
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d017      	beq.n	8004c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	2203      	movs	r2, #3
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d123      	bne.n	8004c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	08da      	lsrs	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3208      	adds	r2, #8
 8004c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	220f      	movs	r2, #15
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	08da      	lsrs	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3208      	adds	r2, #8
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 0203 	and.w	r2, r3, #3
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80b4 	beq.w	8004e0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	4b60      	ldr	r3, [pc, #384]	; (8004e28 <HAL_GPIO_Init+0x30c>)
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	4a5f      	ldr	r2, [pc, #380]	; (8004e28 <HAL_GPIO_Init+0x30c>)
 8004cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cb2:	4b5d      	ldr	r3, [pc, #372]	; (8004e28 <HAL_GPIO_Init+0x30c>)
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cbe:	4a5b      	ldr	r2, [pc, #364]	; (8004e2c <HAL_GPIO_Init+0x310>)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a52      	ldr	r2, [pc, #328]	; (8004e30 <HAL_GPIO_Init+0x314>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02b      	beq.n	8004d42 <HAL_GPIO_Init+0x226>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a51      	ldr	r2, [pc, #324]	; (8004e34 <HAL_GPIO_Init+0x318>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d025      	beq.n	8004d3e <HAL_GPIO_Init+0x222>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a50      	ldr	r2, [pc, #320]	; (8004e38 <HAL_GPIO_Init+0x31c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01f      	beq.n	8004d3a <HAL_GPIO_Init+0x21e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a4f      	ldr	r2, [pc, #316]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d019      	beq.n	8004d36 <HAL_GPIO_Init+0x21a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a4e      	ldr	r2, [pc, #312]	; (8004e40 <HAL_GPIO_Init+0x324>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_GPIO_Init+0x216>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a4d      	ldr	r2, [pc, #308]	; (8004e44 <HAL_GPIO_Init+0x328>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00d      	beq.n	8004d2e <HAL_GPIO_Init+0x212>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a4c      	ldr	r2, [pc, #304]	; (8004e48 <HAL_GPIO_Init+0x32c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <HAL_GPIO_Init+0x20e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a4b      	ldr	r2, [pc, #300]	; (8004e4c <HAL_GPIO_Init+0x330>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_GPIO_Init+0x20a>
 8004d22:	2307      	movs	r3, #7
 8004d24:	e00e      	b.n	8004d44 <HAL_GPIO_Init+0x228>
 8004d26:	2308      	movs	r3, #8
 8004d28:	e00c      	b.n	8004d44 <HAL_GPIO_Init+0x228>
 8004d2a:	2306      	movs	r3, #6
 8004d2c:	e00a      	b.n	8004d44 <HAL_GPIO_Init+0x228>
 8004d2e:	2305      	movs	r3, #5
 8004d30:	e008      	b.n	8004d44 <HAL_GPIO_Init+0x228>
 8004d32:	2304      	movs	r3, #4
 8004d34:	e006      	b.n	8004d44 <HAL_GPIO_Init+0x228>
 8004d36:	2303      	movs	r3, #3
 8004d38:	e004      	b.n	8004d44 <HAL_GPIO_Init+0x228>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e002      	b.n	8004d44 <HAL_GPIO_Init+0x228>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <HAL_GPIO_Init+0x228>
 8004d42:	2300      	movs	r3, #0
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	f002 0203 	and.w	r2, r2, #3
 8004d4a:	0092      	lsls	r2, r2, #2
 8004d4c:	4093      	lsls	r3, r2
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d54:	4935      	ldr	r1, [pc, #212]	; (8004e2c <HAL_GPIO_Init+0x310>)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	089b      	lsrs	r3, r3, #2
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d62:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <HAL_GPIO_Init+0x334>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d86:	4a32      	ldr	r2, [pc, #200]	; (8004e50 <HAL_GPIO_Init+0x334>)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d8c:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <HAL_GPIO_Init+0x334>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004db0:	4a27      	ldr	r2, [pc, #156]	; (8004e50 <HAL_GPIO_Init+0x334>)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004db6:	4b26      	ldr	r3, [pc, #152]	; (8004e50 <HAL_GPIO_Init+0x334>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dda:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <HAL_GPIO_Init+0x334>)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004de0:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <HAL_GPIO_Init+0x334>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4013      	ands	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e04:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <HAL_GPIO_Init+0x334>)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b0f      	cmp	r3, #15
 8004e14:	f67f ae90 	bls.w	8004b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40013800 	.word	0x40013800
 8004e30:	40020000 	.word	0x40020000
 8004e34:	40020400 	.word	0x40020400
 8004e38:	40020800 	.word	0x40020800
 8004e3c:	40020c00 	.word	0x40020c00
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40021400 	.word	0x40021400
 8004e48:	40021800 	.word	0x40021800
 8004e4c:	40021c00 	.word	0x40021c00
 8004e50:	40013c00 	.word	0x40013c00

08004e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
 8004e60:	4613      	mov	r3, r2
 8004e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e64:	787b      	ldrb	r3, [r7, #1]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e70:	e003      	b.n	8004e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e72:	887b      	ldrh	r3, [r7, #2]
 8004e74:	041a      	lsls	r2, r3, #16
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e12b      	b.n	80050f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fd fb98 	bl	80025e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eec:	f000 fe9e 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8004ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4a81      	ldr	r2, [pc, #516]	; (80050fc <HAL_I2C_Init+0x274>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d807      	bhi.n	8004f0c <HAL_I2C_Init+0x84>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a80      	ldr	r2, [pc, #512]	; (8005100 <HAL_I2C_Init+0x278>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	bf94      	ite	ls
 8004f04:	2301      	movls	r3, #1
 8004f06:	2300      	movhi	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	e006      	b.n	8004f1a <HAL_I2C_Init+0x92>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a7d      	ldr	r2, [pc, #500]	; (8005104 <HAL_I2C_Init+0x27c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	bf94      	ite	ls
 8004f14:	2301      	movls	r3, #1
 8004f16:	2300      	movhi	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0e7      	b.n	80050f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a78      	ldr	r2, [pc, #480]	; (8005108 <HAL_I2C_Init+0x280>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	0c9b      	lsrs	r3, r3, #18
 8004f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a6a      	ldr	r2, [pc, #424]	; (80050fc <HAL_I2C_Init+0x274>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d802      	bhi.n	8004f5c <HAL_I2C_Init+0xd4>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	e009      	b.n	8004f70 <HAL_I2C_Init+0xe8>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	4a69      	ldr	r2, [pc, #420]	; (800510c <HAL_I2C_Init+0x284>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	099b      	lsrs	r3, r3, #6
 8004f6e:	3301      	adds	r3, #1
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	495c      	ldr	r1, [pc, #368]	; (80050fc <HAL_I2C_Init+0x274>)
 8004f8c:	428b      	cmp	r3, r1
 8004f8e:	d819      	bhi.n	8004fc4 <HAL_I2C_Init+0x13c>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1e59      	subs	r1, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f9e:	1c59      	adds	r1, r3, #1
 8004fa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fa4:	400b      	ands	r3, r1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_I2C_Init+0x138>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1e59      	subs	r1, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbe:	e051      	b.n	8005064 <HAL_I2C_Init+0x1dc>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	e04f      	b.n	8005064 <HAL_I2C_Init+0x1dc>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d111      	bne.n	8004ff0 <HAL_I2C_Init+0x168>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1e58      	subs	r0, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	440b      	add	r3, r1
 8004fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e012      	b.n	8005016 <HAL_I2C_Init+0x18e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1e58      	subs	r0, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	0099      	lsls	r1, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	fbb0 f3f3 	udiv	r3, r0, r3
 8005006:	3301      	adds	r3, #1
 8005008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Init+0x196>
 800501a:	2301      	movs	r3, #1
 800501c:	e022      	b.n	8005064 <HAL_I2C_Init+0x1dc>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10e      	bne.n	8005044 <HAL_I2C_Init+0x1bc>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1e58      	subs	r0, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	440b      	add	r3, r1
 8005034:	fbb0 f3f3 	udiv	r3, r0, r3
 8005038:	3301      	adds	r3, #1
 800503a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005042:	e00f      	b.n	8005064 <HAL_I2C_Init+0x1dc>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	1e58      	subs	r0, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	0099      	lsls	r1, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	fbb0 f3f3 	udiv	r3, r0, r3
 800505a:	3301      	adds	r3, #1
 800505c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	6809      	ldr	r1, [r1, #0]
 8005068:	4313      	orrs	r3, r2
 800506a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6911      	ldr	r1, [r2, #16]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68d2      	ldr	r2, [r2, #12]
 800509e:	4311      	orrs	r1, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	430b      	orrs	r3, r1
 80050a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	000186a0 	.word	0x000186a0
 8005100:	001e847f 	.word	0x001e847f
 8005104:	003d08ff 	.word	0x003d08ff
 8005108:	431bde83 	.word	0x431bde83
 800510c:	10624dd3 	.word	0x10624dd3

08005110 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005112:	b08f      	sub	sp, #60	; 0x3c
 8005114:	af0a      	add	r7, sp, #40	; 0x28
 8005116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e10f      	b.n	8005342 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fd fcb3 	bl	8002aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2203      	movs	r2, #3
 8005146:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f002 f9de 	bl	8007522 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	687e      	ldr	r6, [r7, #4]
 800516e:	466d      	mov	r5, sp
 8005170:	f106 0410 	add.w	r4, r6, #16
 8005174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800517a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800517c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005180:	e885 0003 	stmia.w	r5, {r0, r1}
 8005184:	1d33      	adds	r3, r6, #4
 8005186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005188:	6838      	ldr	r0, [r7, #0]
 800518a:	f002 f969 	bl	8007460 <USB_CoreInit>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0d0      	b.n	8005342 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f002 f9cc 	bl	8007544 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ac:	2300      	movs	r3, #0
 80051ae:	73fb      	strb	r3, [r7, #15]
 80051b0:	e04a      	b.n	8005248 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051b2:	7bfa      	ldrb	r2, [r7, #15]
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	333d      	adds	r3, #61	; 0x3d
 80051c2:	2201      	movs	r2, #1
 80051c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	333c      	adds	r3, #60	; 0x3c
 80051d6:	7bfa      	ldrb	r2, [r7, #15]
 80051d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051da:	7bfa      	ldrb	r2, [r7, #15]
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	b298      	uxth	r0, r3
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	3344      	adds	r3, #68	; 0x44
 80051ee:	4602      	mov	r2, r0
 80051f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	3340      	adds	r3, #64	; 0x40
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005206:	7bfa      	ldrb	r2, [r7, #15]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	3348      	adds	r3, #72	; 0x48
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	334c      	adds	r3, #76	; 0x4c
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800522e:	7bfa      	ldrb	r2, [r7, #15]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	3354      	adds	r3, #84	; 0x54
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	3301      	adds	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	7bfa      	ldrb	r2, [r7, #15]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	d3af      	bcc.n	80051b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
 8005256:	e044      	b.n	80052e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005280:	7bfa      	ldrb	r2, [r7, #15]
 8005282:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800529a:	7bfa      	ldrb	r2, [r7, #15]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	3301      	adds	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	7bfa      	ldrb	r2, [r7, #15]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3b5      	bcc.n	8005258 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	687e      	ldr	r6, [r7, #4]
 80052f4:	466d      	mov	r5, sp
 80052f6:	f106 0410 	add.w	r4, r6, #16
 80052fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005302:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005306:	e885 0003 	stmia.w	r5, {r0, r1}
 800530a:	1d33      	adds	r3, r6, #4
 800530c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800530e:	6838      	ldr	r0, [r7, #0]
 8005310:	f002 f964 	bl	80075dc <USB_DevInit>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e00d      	b.n	8005342 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f002 fb2f 	bl	800799e <USB_DevDisconnect>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800534c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e267      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d075      	beq.n	8005456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800536a:	4b88      	ldr	r3, [pc, #544]	; (800558c <HAL_RCC_OscConfig+0x240>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b04      	cmp	r3, #4
 8005374:	d00c      	beq.n	8005390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005376:	4b85      	ldr	r3, [pc, #532]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800537e:	2b08      	cmp	r3, #8
 8005380:	d112      	bne.n	80053a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005382:	4b82      	ldr	r3, [pc, #520]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800538e:	d10b      	bne.n	80053a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005390:	4b7e      	ldr	r3, [pc, #504]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d05b      	beq.n	8005454 <HAL_RCC_OscConfig+0x108>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d157      	bne.n	8005454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e242      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b0:	d106      	bne.n	80053c0 <HAL_RCC_OscConfig+0x74>
 80053b2:	4b76      	ldr	r3, [pc, #472]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a75      	ldr	r2, [pc, #468]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e01d      	b.n	80053fc <HAL_RCC_OscConfig+0xb0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCC_OscConfig+0x98>
 80053ca:	4b70      	ldr	r3, [pc, #448]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6f      	ldr	r2, [pc, #444]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	4b6d      	ldr	r3, [pc, #436]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6c      	ldr	r2, [pc, #432]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e00b      	b.n	80053fc <HAL_RCC_OscConfig+0xb0>
 80053e4:	4b69      	ldr	r3, [pc, #420]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a68      	ldr	r2, [pc, #416]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	4b66      	ldr	r3, [pc, #408]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a65      	ldr	r2, [pc, #404]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005404:	f7fd fd08 	bl	8002e18 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800540c:	f7fd fd04 	bl	8002e18 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e207      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b5b      	ldr	r3, [pc, #364]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0xc0>
 800542a:	e014      	b.n	8005456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fd fcf4 	bl	8002e18 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005434:	f7fd fcf0 	bl	8002e18 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e1f3      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	4b51      	ldr	r3, [pc, #324]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0xe8>
 8005452:	e000      	b.n	8005456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d063      	beq.n	800552a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005462:	4b4a      	ldr	r3, [pc, #296]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800546e:	4b47      	ldr	r3, [pc, #284]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005476:	2b08      	cmp	r3, #8
 8005478:	d11c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800547a:	4b44      	ldr	r3, [pc, #272]	; (800558c <HAL_RCC_OscConfig+0x240>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	4b41      	ldr	r3, [pc, #260]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_RCC_OscConfig+0x152>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e1c7      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800549e:	4b3b      	ldr	r3, [pc, #236]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4937      	ldr	r1, [pc, #220]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b2:	e03a      	b.n	800552a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054bc:	4b34      	ldr	r3, [pc, #208]	; (8005590 <HAL_RCC_OscConfig+0x244>)
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fd fca9 	bl	8002e18 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ca:	f7fd fca5 	bl	8002e18 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e1a8      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054dc:	4b2b      	ldr	r3, [pc, #172]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e8:	4b28      	ldr	r3, [pc, #160]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4925      	ldr	r1, [pc, #148]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
 80054fc:	e015      	b.n	800552a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fe:	4b24      	ldr	r3, [pc, #144]	; (8005590 <HAL_RCC_OscConfig+0x244>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fd fc88 	bl	8002e18 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550c:	f7fd fc84 	bl	8002e18 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e187      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551e:	4b1b      	ldr	r3, [pc, #108]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d036      	beq.n	80055a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d016      	beq.n	800556c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <HAL_RCC_OscConfig+0x248>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fd fc68 	bl	8002e18 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554c:	f7fd fc64 	bl	8002e18 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e167      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x200>
 800556a:	e01b      	b.n	80055a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <HAL_RCC_OscConfig+0x248>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005572:	f7fd fc51 	bl	8002e18 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005578:	e00e      	b.n	8005598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800557a:	f7fd fc4d 	bl	8002e18 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d907      	bls.n	8005598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e150      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800558c:	40023800 	.word	0x40023800
 8005590:	42470000 	.word	0x42470000
 8005594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005598:	4b88      	ldr	r3, [pc, #544]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800559a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1ea      	bne.n	800557a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8097 	beq.w	80056e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b2:	2300      	movs	r3, #0
 80055b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b6:	4b81      	ldr	r3, [pc, #516]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10f      	bne.n	80055e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	4b7d      	ldr	r3, [pc, #500]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	4a7c      	ldr	r2, [pc, #496]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80055cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d0:	6413      	str	r3, [r2, #64]	; 0x40
 80055d2:	4b7a      	ldr	r3, [pc, #488]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e2:	4b77      	ldr	r3, [pc, #476]	; (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d118      	bne.n	8005620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ee:	4b74      	ldr	r3, [pc, #464]	; (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a73      	ldr	r2, [pc, #460]	; (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fa:	f7fd fc0d 	bl	8002e18 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005602:	f7fd fc09 	bl	8002e18 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e10c      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005614:	4b6a      	ldr	r3, [pc, #424]	; (80057c0 <HAL_RCC_OscConfig+0x474>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d106      	bne.n	8005636 <HAL_RCC_OscConfig+0x2ea>
 8005628:	4b64      	ldr	r3, [pc, #400]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	4a63      	ldr	r2, [pc, #396]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6713      	str	r3, [r2, #112]	; 0x70
 8005634:	e01c      	b.n	8005670 <HAL_RCC_OscConfig+0x324>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b05      	cmp	r3, #5
 800563c:	d10c      	bne.n	8005658 <HAL_RCC_OscConfig+0x30c>
 800563e:	4b5f      	ldr	r3, [pc, #380]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	4a5e      	ldr	r2, [pc, #376]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	6713      	str	r3, [r2, #112]	; 0x70
 800564a:	4b5c      	ldr	r3, [pc, #368]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a5b      	ldr	r2, [pc, #364]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
 8005656:	e00b      	b.n	8005670 <HAL_RCC_OscConfig+0x324>
 8005658:	4b58      	ldr	r3, [pc, #352]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a57      	ldr	r2, [pc, #348]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	6713      	str	r3, [r2, #112]	; 0x70
 8005664:	4b55      	ldr	r3, [pc, #340]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	4a54      	ldr	r2, [pc, #336]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800566a:	f023 0304 	bic.w	r3, r3, #4
 800566e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fd fbce 	bl	8002e18 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fd fbca 	bl	8002e18 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0cb      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005696:	4b49      	ldr	r3, [pc, #292]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0ee      	beq.n	8005680 <HAL_RCC_OscConfig+0x334>
 80056a2:	e014      	b.n	80056ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a4:	f7fd fbb8 	bl	8002e18 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ac:	f7fd fbb4 	bl	8002e18 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e0b5      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c2:	4b3e      	ldr	r3, [pc, #248]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1ee      	bne.n	80056ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d105      	bne.n	80056e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d4:	4b39      	ldr	r3, [pc, #228]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	4a38      	ldr	r2, [pc, #224]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80056da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a1 	beq.w	800582c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ea:	4b34      	ldr	r3, [pc, #208]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d05c      	beq.n	80057b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d141      	bne.n	8005782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fe:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fd fb88 	bl	8002e18 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570c:	f7fd fb84 	bl	8002e18 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e087      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571e:	4b27      	ldr	r3, [pc, #156]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	3b01      	subs	r3, #1
 8005744:	041b      	lsls	r3, r3, #16
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	491b      	ldr	r1, [pc, #108]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005754:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575a:	f7fd fb5d 	bl	8002e18 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005762:	f7fd fb59 	bl	8002e18 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e05c      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005774:	4b11      	ldr	r3, [pc, #68]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x416>
 8005780:	e054      	b.n	800582c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005782:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005788:	f7fd fb46 	bl	8002e18 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005790:	f7fd fb42 	bl	8002e18 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e045      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0x444>
 80057ae:	e03d      	b.n	800582c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d107      	bne.n	80057c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e038      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 80057bc:	40023800 	.word	0x40023800
 80057c0:	40007000 	.word	0x40007000
 80057c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057c8:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <HAL_RCC_OscConfig+0x4ec>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d028      	beq.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d121      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d11a      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005800:	4293      	cmp	r3, r2
 8005802:	d111      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	3b01      	subs	r3, #1
 8005812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d107      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800

0800583c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0cc      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005850:	4b68      	ldr	r3, [pc, #416]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d90c      	bls.n	8005878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585e:	4b65      	ldr	r3, [pc, #404]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005866:	4b63      	ldr	r3, [pc, #396]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0b8      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d020      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005890:	4b59      	ldr	r3, [pc, #356]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4a58      	ldr	r2, [pc, #352]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800589a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058a8:	4b53      	ldr	r3, [pc, #332]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a52      	ldr	r2, [pc, #328]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b4:	4b50      	ldr	r3, [pc, #320]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	494d      	ldr	r1, [pc, #308]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d044      	beq.n	800595c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058da:	4b47      	ldr	r3, [pc, #284]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d119      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e07f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d003      	beq.n	80058fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fa:	4b3f      	ldr	r3, [pc, #252]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e06f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590a:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e067      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591a:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f023 0203 	bic.w	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	4934      	ldr	r1, [pc, #208]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	4313      	orrs	r3, r2
 800592a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800592c:	f7fd fa74 	bl	8002e18 <HAL_GetTick>
 8005930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	e00a      	b.n	800594a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005934:	f7fd fa70 	bl	8002e18 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e04f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 020c 	and.w	r2, r3, #12
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	429a      	cmp	r2, r3
 800595a:	d1eb      	bne.n	8005934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800595c:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d20c      	bcs.n	8005984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b22      	ldr	r3, [pc, #136]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e032      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4916      	ldr	r1, [pc, #88]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ae:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	490e      	ldr	r1, [pc, #56]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059c2:	f000 f821 	bl	8005a08 <HAL_RCC_GetSysClockFreq>
 80059c6:	4602      	mov	r2, r0
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	490a      	ldr	r1, [pc, #40]	; (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 80059d4:	5ccb      	ldrb	r3, [r1, r3]
 80059d6:	fa22 f303 	lsr.w	r3, r2, r3
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80059dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <HAL_RCC_ClockConfig+0x1c8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd f8ba 	bl	8002b5c <HAL_InitTick>

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40023c00 	.word	0x40023c00
 80059f8:	40023800 	.word	0x40023800
 80059fc:	0800bea4 	.word	0x0800bea4
 8005a00:	20000000 	.word	0x20000000
 8005a04:	20000004 	.word	0x20000004

08005a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a0c:	b094      	sub	sp, #80	; 0x50
 8005a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	647b      	str	r3, [r7, #68]	; 0x44
 8005a14:	2300      	movs	r3, #0
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	2300      	movs	r3, #0
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a20:	4b79      	ldr	r3, [pc, #484]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d00d      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x40>
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	f200 80e1 	bhi.w	8005bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x34>
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d003      	beq.n	8005a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a3a:	e0db      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a3c:	4b73      	ldr	r3, [pc, #460]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a40:	e0db      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a42:	4b73      	ldr	r3, [pc, #460]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a46:	e0d8      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a48:	4b6f      	ldr	r3, [pc, #444]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a52:	4b6d      	ldr	r3, [pc, #436]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d063      	beq.n	8005b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a5e:	4b6a      	ldr	r3, [pc, #424]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	099b      	lsrs	r3, r3, #6
 8005a64:	2200      	movs	r2, #0
 8005a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
 8005a72:	2300      	movs	r3, #0
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	f04f 0000 	mov.w	r0, #0
 8005a82:	f04f 0100 	mov.w	r1, #0
 8005a86:	0159      	lsls	r1, r3, #5
 8005a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a8c:	0150      	lsls	r0, r2, #5
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4621      	mov	r1, r4
 8005a94:	1a51      	subs	r1, r2, r1
 8005a96:	6139      	str	r1, [r7, #16]
 8005a98:	4629      	mov	r1, r5
 8005a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005aac:	4659      	mov	r1, fp
 8005aae:	018b      	lsls	r3, r1, #6
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ab6:	4651      	mov	r1, sl
 8005ab8:	018a      	lsls	r2, r1, #6
 8005aba:	4651      	mov	r1, sl
 8005abc:	ebb2 0801 	subs.w	r8, r2, r1
 8005ac0:	4659      	mov	r1, fp
 8005ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ada:	4690      	mov	r8, r2
 8005adc:	4699      	mov	r9, r3
 8005ade:	4623      	mov	r3, r4
 8005ae0:	eb18 0303 	adds.w	r3, r8, r3
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	eb49 0303 	adc.w	r3, r9, r3
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005afa:	4629      	mov	r1, r5
 8005afc:	024b      	lsls	r3, r1, #9
 8005afe:	4621      	mov	r1, r4
 8005b00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b04:	4621      	mov	r1, r4
 8005b06:	024a      	lsls	r2, r1, #9
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0e:	2200      	movs	r2, #0
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b18:	f7fa ff78 	bl	8000a0c <__aeabi_uldivmod>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4613      	mov	r3, r2
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	e058      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b26:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	099b      	lsrs	r3, r3, #6
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	4611      	mov	r1, r2
 8005b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b36:	623b      	str	r3, [r7, #32]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b40:	4642      	mov	r2, r8
 8005b42:	464b      	mov	r3, r9
 8005b44:	f04f 0000 	mov.w	r0, #0
 8005b48:	f04f 0100 	mov.w	r1, #0
 8005b4c:	0159      	lsls	r1, r3, #5
 8005b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b52:	0150      	lsls	r0, r2, #5
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4641      	mov	r1, r8
 8005b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b5e:	4649      	mov	r1, r9
 8005b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b78:	ebb2 040a 	subs.w	r4, r2, sl
 8005b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	00eb      	lsls	r3, r5, #3
 8005b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b8e:	00e2      	lsls	r2, r4, #3
 8005b90:	4614      	mov	r4, r2
 8005b92:	461d      	mov	r5, r3
 8005b94:	4643      	mov	r3, r8
 8005b96:	18e3      	adds	r3, r4, r3
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	eb45 0303 	adc.w	r3, r5, r3
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bae:	4629      	mov	r1, r5
 8005bb0:	028b      	lsls	r3, r1, #10
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bb8:	4621      	mov	r1, r4
 8005bba:	028a      	lsls	r2, r1, #10
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	61fa      	str	r2, [r7, #28]
 8005bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bcc:	f7fa ff1e 	bl	8000a0c <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	3301      	adds	r3, #1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bf2:	e002      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3750      	adds	r7, #80	; 0x50
 8005c00:	46bd      	mov	sp, r7
 8005c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c06:	bf00      	nop
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	00f42400 	.word	0x00f42400
 8005c10:	007a1200 	.word	0x007a1200

08005c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000000 	.word	0x20000000

08005c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c30:	f7ff fff0 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	0a9b      	lsrs	r3, r3, #10
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4903      	ldr	r1, [pc, #12]	; (8005c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	0800beb4 	.word	0x0800beb4

08005c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c58:	f7ff ffdc 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	0b5b      	lsrs	r3, r3, #13
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	4903      	ldr	r1, [pc, #12]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c6a:	5ccb      	ldrb	r3, [r1, r3]
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40023800 	.word	0x40023800
 8005c78:	0800beb4 	.word	0x0800beb4

08005c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	220f      	movs	r2, #15
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c8c:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 0203 	and.w	r2, r3, #3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c98:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	08db      	lsrs	r3, r3, #3
 8005cb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <HAL_RCC_GetClockConfig+0x60>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0207 	and.w	r2, r3, #7
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	40023c00 	.word	0x40023c00

08005ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e041      	b.n	8005d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc fcb4 	bl	8002674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f000 fcea 	bl	80066f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d001      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e04e      	b.n	8005e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a23      	ldr	r2, [pc, #140]	; (8005e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d022      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc2:	d01d      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1f      	ldr	r2, [pc, #124]	; (8005e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d018      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d111      	bne.n	8005e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b06      	cmp	r3, #6
 8005e10:	d010      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e22:	e007      	b.n	8005e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40010400 	.word	0x40010400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40001800 	.word	0x40001800

08005e60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e041      	b.n	8005ef6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f839 	bl	8005efe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f000 fc2a 	bl	80066f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d109      	bne.n	8005f38 <HAL_TIM_PWM_Start+0x24>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	bf14      	ite	ne
 8005f30:	2301      	movne	r3, #1
 8005f32:	2300      	moveq	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	e022      	b.n	8005f7e <HAL_TIM_PWM_Start+0x6a>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d109      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x3e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	bf14      	ite	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	2300      	moveq	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	e015      	b.n	8005f7e <HAL_TIM_PWM_Start+0x6a>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d109      	bne.n	8005f6c <HAL_TIM_PWM_Start+0x58>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	e008      	b.n	8005f7e <HAL_TIM_PWM_Start+0x6a>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e07c      	b.n	8006080 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0x82>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f94:	e013      	b.n	8005fbe <HAL_TIM_PWM_Start+0xaa>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0x92>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa4:	e00b      	b.n	8005fbe <HAL_TIM_PWM_Start+0xaa>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_PWM_Start+0xa2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb4:	e003      	b.n	8005fbe <HAL_TIM_PWM_Start+0xaa>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fe80 	bl	8006ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <HAL_TIM_PWM_Start+0x174>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_TIM_PWM_Start+0xcc>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2c      	ldr	r2, [pc, #176]	; (800608c <HAL_TIM_PWM_Start+0x178>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d101      	bne.n	8005fe4 <HAL_TIM_PWM_Start+0xd0>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xd2>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a22      	ldr	r2, [pc, #136]	; (8006088 <HAL_TIM_PWM_Start+0x174>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d022      	beq.n	800604a <HAL_TIM_PWM_Start+0x136>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600c:	d01d      	beq.n	800604a <HAL_TIM_PWM_Start+0x136>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <HAL_TIM_PWM_Start+0x17c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d018      	beq.n	800604a <HAL_TIM_PWM_Start+0x136>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <HAL_TIM_PWM_Start+0x180>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_TIM_PWM_Start+0x136>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1c      	ldr	r2, [pc, #112]	; (8006098 <HAL_TIM_PWM_Start+0x184>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_TIM_PWM_Start+0x136>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a16      	ldr	r2, [pc, #88]	; (800608c <HAL_TIM_PWM_Start+0x178>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_TIM_PWM_Start+0x136>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a18      	ldr	r2, [pc, #96]	; (800609c <HAL_TIM_PWM_Start+0x188>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_TIM_PWM_Start+0x136>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a16      	ldr	r2, [pc, #88]	; (80060a0 <HAL_TIM_PWM_Start+0x18c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d111      	bne.n	800606e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b06      	cmp	r3, #6
 800605a:	d010      	beq.n	800607e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606c:	e007      	b.n	800607e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40010000 	.word	0x40010000
 800608c:	40010400 	.word	0x40010400
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	40014000 	.word	0x40014000
 80060a0:	40001800 	.word	0x40001800

080060a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fe08 	bl	8006ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a2e      	ldr	r2, [pc, #184]	; (800617c <HAL_TIM_PWM_Stop+0xd8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_TIM_PWM_Stop+0x2c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a2d      	ldr	r2, [pc, #180]	; (8006180 <HAL_TIM_PWM_Stop+0xdc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d101      	bne.n	80060d4 <HAL_TIM_PWM_Stop+0x30>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <HAL_TIM_PWM_Stop+0x32>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d017      	beq.n	800610a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a1a      	ldr	r2, [r3, #32]
 80060e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10f      	bne.n	800610a <HAL_TIM_PWM_Stop+0x66>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	f240 4344 	movw	r3, #1092	; 0x444
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d107      	bne.n	800610a <HAL_TIM_PWM_Stop+0x66>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a1a      	ldr	r2, [r3, #32]
 8006110:	f241 1311 	movw	r3, #4369	; 0x1111
 8006114:	4013      	ands	r3, r2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <HAL_TIM_PWM_Stop+0x96>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	f240 4344 	movw	r3, #1092	; 0x444
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <HAL_TIM_PWM_Stop+0x96>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_TIM_PWM_Stop+0xa6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006148:	e013      	b.n	8006172 <HAL_TIM_PWM_Stop+0xce>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Stop+0xb6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006158:	e00b      	b.n	8006172 <HAL_TIM_PWM_Stop+0xce>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b08      	cmp	r3, #8
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Stop+0xc6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006168:	e003      	b.n	8006172 <HAL_TIM_PWM_Stop+0xce>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40010000 	.word	0x40010000
 8006180:	40010400 	.word	0x40010400

08006184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0202 	mvn.w	r2, #2
 80061b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fa77 	bl	80066ba <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fa69 	bl	80066a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fa7a 	bl	80066ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0204 	mvn.w	r2, #4
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa4d 	bl	80066ba <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fa3f 	bl	80066a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fa50 	bl	80066ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b08      	cmp	r3, #8
 8006240:	d122      	bne.n	8006288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d11b      	bne.n	8006288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0208 	mvn.w	r2, #8
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa23 	bl	80066ba <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa15 	bl	80066a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa26 	bl	80066ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b10      	cmp	r3, #16
 8006294:	d122      	bne.n	80062dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0210 	mvn.w	r2, #16
 80062ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2208      	movs	r2, #8
 80062b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9f9 	bl	80066ba <HAL_TIM_IC_CaptureCallback>
 80062c8:	e005      	b.n	80062d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9eb 	bl	80066a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f9fc 	bl	80066ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10e      	bne.n	8006308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d107      	bne.n	8006308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0201 	mvn.w	r2, #1
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fb ff16 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b80      	cmp	r3, #128	; 0x80
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fdca 	bl	8006ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f9c1 	bl	80066e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b20      	cmp	r3, #32
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0220 	mvn.w	r2, #32
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fd94 	bl	8006eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0ae      	b.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b0c      	cmp	r3, #12
 80063be:	f200 809f 	bhi.w	8006500 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	08006501 	.word	0x08006501
 80063d0:	08006501 	.word	0x08006501
 80063d4:	08006501 	.word	0x08006501
 80063d8:	0800643d 	.word	0x0800643d
 80063dc:	08006501 	.word	0x08006501
 80063e0:	08006501 	.word	0x08006501
 80063e4:	08006501 	.word	0x08006501
 80063e8:	0800647f 	.word	0x0800647f
 80063ec:	08006501 	.word	0x08006501
 80063f0:	08006501 	.word	0x08006501
 80063f4:	08006501 	.word	0x08006501
 80063f8:	080064bf 	.word	0x080064bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fa18 	bl	8006838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0208 	orr.w	r2, r2, #8
 8006416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0204 	bic.w	r2, r2, #4
 8006426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6999      	ldr	r1, [r3, #24]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	619a      	str	r2, [r3, #24]
      break;
 800643a:	e064      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fa68 	bl	8006918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6999      	ldr	r1, [r3, #24]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	021a      	lsls	r2, r3, #8
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	619a      	str	r2, [r3, #24]
      break;
 800647c:	e043      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fabd 	bl	8006a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0208 	orr.w	r2, r2, #8
 8006498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0204 	bic.w	r2, r2, #4
 80064a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	61da      	str	r2, [r3, #28]
      break;
 80064bc:	e023      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fb11 	bl	8006aec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69d9      	ldr	r1, [r3, #28]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	021a      	lsls	r2, r3, #8
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	61da      	str	r2, [r3, #28]
      break;
 80064fe:	e002      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
      break;
 8006504:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_TIM_ConfigClockSource+0x1c>
 8006530:	2302      	movs	r3, #2
 8006532:	e0b4      	b.n	800669e <HAL_TIM_ConfigClockSource+0x186>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656c:	d03e      	beq.n	80065ec <HAL_TIM_ConfigClockSource+0xd4>
 800656e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006572:	f200 8087 	bhi.w	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657a:	f000 8086 	beq.w	800668a <HAL_TIM_ConfigClockSource+0x172>
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	d87f      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 8006584:	2b70      	cmp	r3, #112	; 0x70
 8006586:	d01a      	beq.n	80065be <HAL_TIM_ConfigClockSource+0xa6>
 8006588:	2b70      	cmp	r3, #112	; 0x70
 800658a:	d87b      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 800658c:	2b60      	cmp	r3, #96	; 0x60
 800658e:	d050      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0x11a>
 8006590:	2b60      	cmp	r3, #96	; 0x60
 8006592:	d877      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 8006594:	2b50      	cmp	r3, #80	; 0x50
 8006596:	d03c      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0xfa>
 8006598:	2b50      	cmp	r3, #80	; 0x50
 800659a:	d873      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d058      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0x13a>
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d86f      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 80065a4:	2b30      	cmp	r3, #48	; 0x30
 80065a6:	d064      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x15a>
 80065a8:	2b30      	cmp	r3, #48	; 0x30
 80065aa:	d86b      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d060      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x15a>
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d867      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d05c      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x15a>
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d05a      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x15a>
 80065bc:	e062      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6899      	ldr	r1, [r3, #8]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f000 fb5d 	bl	8006c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	609a      	str	r2, [r3, #8]
      break;
 80065ea:	e04f      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	6899      	ldr	r1, [r3, #8]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f000 fb46 	bl	8006c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800660e:	609a      	str	r2, [r3, #8]
      break;
 8006610:	e03c      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6859      	ldr	r1, [r3, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	461a      	mov	r2, r3
 8006620:	f000 faba 	bl	8006b98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2150      	movs	r1, #80	; 0x50
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fb13 	bl	8006c56 <TIM_ITRx_SetConfig>
      break;
 8006630:	e02c      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6859      	ldr	r1, [r3, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	461a      	mov	r2, r3
 8006640:	f000 fad9 	bl	8006bf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2160      	movs	r1, #96	; 0x60
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fb03 	bl	8006c56 <TIM_ITRx_SetConfig>
      break;
 8006650:	e01c      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	461a      	mov	r2, r3
 8006660:	f000 fa9a 	bl	8006b98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2140      	movs	r1, #64	; 0x40
 800666a:	4618      	mov	r0, r3
 800666c:	f000 faf3 	bl	8006c56 <TIM_ITRx_SetConfig>
      break;
 8006670:	e00c      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f000 faea 	bl	8006c56 <TIM_ITRx_SetConfig>
      break;
 8006682:	e003      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	73fb      	strb	r3, [r7, #15]
      break;
 8006688:	e000      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800668a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a40      	ldr	r2, [pc, #256]	; (800680c <TIM_Base_SetConfig+0x114>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006716:	d00f      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a3d      	ldr	r2, [pc, #244]	; (8006810 <TIM_Base_SetConfig+0x118>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00b      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3c      	ldr	r2, [pc, #240]	; (8006814 <TIM_Base_SetConfig+0x11c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3b      	ldr	r2, [pc, #236]	; (8006818 <TIM_Base_SetConfig+0x120>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3a      	ldr	r2, [pc, #232]	; (800681c <TIM_Base_SetConfig+0x124>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2f      	ldr	r2, [pc, #188]	; (800680c <TIM_Base_SetConfig+0x114>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d02b      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d027      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2c      	ldr	r2, [pc, #176]	; (8006810 <TIM_Base_SetConfig+0x118>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d023      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2b      	ldr	r2, [pc, #172]	; (8006814 <TIM_Base_SetConfig+0x11c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01f      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2a      	ldr	r2, [pc, #168]	; (8006818 <TIM_Base_SetConfig+0x120>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d01b      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a29      	ldr	r2, [pc, #164]	; (800681c <TIM_Base_SetConfig+0x124>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d017      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a28      	ldr	r2, [pc, #160]	; (8006820 <TIM_Base_SetConfig+0x128>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a27      	ldr	r2, [pc, #156]	; (8006824 <TIM_Base_SetConfig+0x12c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00f      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a26      	ldr	r2, [pc, #152]	; (8006828 <TIM_Base_SetConfig+0x130>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00b      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a25      	ldr	r2, [pc, #148]	; (800682c <TIM_Base_SetConfig+0x134>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d007      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a24      	ldr	r2, [pc, #144]	; (8006830 <TIM_Base_SetConfig+0x138>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_Base_SetConfig+0xb2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a23      	ldr	r2, [pc, #140]	; (8006834 <TIM_Base_SetConfig+0x13c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d108      	bne.n	80067bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a0a      	ldr	r2, [pc, #40]	; (800680c <TIM_Base_SetConfig+0x114>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0xf8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a0c      	ldr	r2, [pc, #48]	; (800681c <TIM_Base_SetConfig+0x124>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d103      	bne.n	80067f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	615a      	str	r2, [r3, #20]
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40010400 	.word	0x40010400
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800
 800682c:	40001800 	.word	0x40001800
 8006830:	40001c00 	.word	0x40001c00
 8006834:	40002000 	.word	0x40002000

08006838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f023 0201 	bic.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 0302 	bic.w	r3, r3, #2
 8006880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a20      	ldr	r2, [pc, #128]	; (8006910 <TIM_OC1_SetConfig+0xd8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_OC1_SetConfig+0x64>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a1f      	ldr	r2, [pc, #124]	; (8006914 <TIM_OC1_SetConfig+0xdc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d10c      	bne.n	80068b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f023 0308 	bic.w	r3, r3, #8
 80068a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 0304 	bic.w	r3, r3, #4
 80068b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a15      	ldr	r2, [pc, #84]	; (8006910 <TIM_OC1_SetConfig+0xd8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_OC1_SetConfig+0x8e>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a14      	ldr	r2, [pc, #80]	; (8006914 <TIM_OC1_SetConfig+0xdc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d111      	bne.n	80068ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	621a      	str	r2, [r3, #32]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40010000 	.word	0x40010000
 8006914:	40010400 	.word	0x40010400

08006918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0210 	bic.w	r2, r3, #16
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 0320 	bic.w	r3, r3, #32
 8006962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a22      	ldr	r2, [pc, #136]	; (80069fc <TIM_OC2_SetConfig+0xe4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_OC2_SetConfig+0x68>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a21      	ldr	r2, [pc, #132]	; (8006a00 <TIM_OC2_SetConfig+0xe8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d10d      	bne.n	800699c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a17      	ldr	r2, [pc, #92]	; (80069fc <TIM_OC2_SetConfig+0xe4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC2_SetConfig+0x94>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a16      	ldr	r2, [pc, #88]	; (8006a00 <TIM_OC2_SetConfig+0xe8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d113      	bne.n	80069d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40010400 	.word	0x40010400

08006a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a21      	ldr	r2, [pc, #132]	; (8006ae4 <TIM_OC3_SetConfig+0xe0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d003      	beq.n	8006a6a <TIM_OC3_SetConfig+0x66>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a20      	ldr	r2, [pc, #128]	; (8006ae8 <TIM_OC3_SetConfig+0xe4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d10d      	bne.n	8006a86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	021b      	lsls	r3, r3, #8
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a16      	ldr	r2, [pc, #88]	; (8006ae4 <TIM_OC3_SetConfig+0xe0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC3_SetConfig+0x92>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <TIM_OC3_SetConfig+0xe4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d113      	bne.n	8006abe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	621a      	str	r2, [r3, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400

08006aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	031b      	lsls	r3, r3, #12
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <TIM_OC4_SetConfig+0xa4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_OC4_SetConfig+0x68>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <TIM_OC4_SetConfig+0xa8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d109      	bne.n	8006b68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	019b      	lsls	r3, r3, #6
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40010400 	.word	0x40010400

08006b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f023 0201 	bic.w	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f023 030a 	bic.w	r3, r3, #10
 8006bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	621a      	str	r2, [r3, #32]
}
 8006bea:	bf00      	nop
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b087      	sub	sp, #28
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0210 	bic.w	r2, r3, #16
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	031b      	lsls	r3, r3, #12
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	621a      	str	r2, [r3, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f043 0307 	orr.w	r3, r3, #7
 8006c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	609a      	str	r2, [r3, #8]
}
 8006c80:	bf00      	nop
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	021a      	lsls	r2, r3, #8
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	609a      	str	r2, [r3, #8]
}
 8006cc0:	bf00      	nop
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	2201      	movs	r2, #1
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a1a      	ldr	r2, [r3, #32]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	43db      	mvns	r3, r3
 8006cee:	401a      	ands	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a1a      	ldr	r2, [r3, #32]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	fa01 f303 	lsl.w	r3, r1, r3
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	621a      	str	r2, [r3, #32]
}
 8006d0a:	bf00      	nop
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
	...

08006d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e05a      	b.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a21      	ldr	r2, [pc, #132]	; (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d022      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7c:	d01d      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d018      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1b      	ldr	r2, [pc, #108]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1a      	ldr	r2, [pc, #104]	; (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00e      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d10c      	bne.n	8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40010000 	.word	0x40010000
 8006df8:	40000400 	.word	0x40000400
 8006dfc:	40000800 	.word	0x40000800
 8006e00:	40000c00 	.word	0x40000c00
 8006e04:	40010400 	.word	0x40010400
 8006e08:	40014000 	.word	0x40014000
 8006e0c:	40001800 	.word	0x40001800

08006e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e03d      	b.n	8006ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e03f      	b.n	8006f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fb fd88 	bl	8002a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2224      	movs	r2, #36	; 0x24
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f829 	bl	8006f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695a      	ldr	r2, [r3, #20]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f7c:	b0c0      	sub	sp, #256	; 0x100
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f94:	68d9      	ldr	r1, [r3, #12]
 8006f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	ea40 0301 	orr.w	r3, r0, r1
 8006fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fd0:	f021 010c 	bic.w	r1, r1, #12
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff2:	6999      	ldr	r1, [r3, #24]
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	ea40 0301 	orr.w	r3, r0, r1
 8006ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4b8f      	ldr	r3, [pc, #572]	; (8007244 <UART_SetConfig+0x2cc>)
 8007008:	429a      	cmp	r2, r3
 800700a:	d005      	beq.n	8007018 <UART_SetConfig+0xa0>
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b8d      	ldr	r3, [pc, #564]	; (8007248 <UART_SetConfig+0x2d0>)
 8007014:	429a      	cmp	r2, r3
 8007016:	d104      	bne.n	8007022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007018:	f7fe fe1c 	bl	8005c54 <HAL_RCC_GetPCLK2Freq>
 800701c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007020:	e003      	b.n	800702a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007022:	f7fe fe03 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8007026:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800702a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007034:	f040 810c 	bne.w	8007250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800703c:	2200      	movs	r2, #0
 800703e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007042:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800704a:	4622      	mov	r2, r4
 800704c:	462b      	mov	r3, r5
 800704e:	1891      	adds	r1, r2, r2
 8007050:	65b9      	str	r1, [r7, #88]	; 0x58
 8007052:	415b      	adcs	r3, r3
 8007054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800705a:	4621      	mov	r1, r4
 800705c:	eb12 0801 	adds.w	r8, r2, r1
 8007060:	4629      	mov	r1, r5
 8007062:	eb43 0901 	adc.w	r9, r3, r1
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800707a:	4690      	mov	r8, r2
 800707c:	4699      	mov	r9, r3
 800707e:	4623      	mov	r3, r4
 8007080:	eb18 0303 	adds.w	r3, r8, r3
 8007084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007088:	462b      	mov	r3, r5
 800708a:	eb49 0303 	adc.w	r3, r9, r3
 800708e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800709e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070a6:	460b      	mov	r3, r1
 80070a8:	18db      	adds	r3, r3, r3
 80070aa:	653b      	str	r3, [r7, #80]	; 0x50
 80070ac:	4613      	mov	r3, r2
 80070ae:	eb42 0303 	adc.w	r3, r2, r3
 80070b2:	657b      	str	r3, [r7, #84]	; 0x54
 80070b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070bc:	f7f9 fca6 	bl	8000a0c <__aeabi_uldivmod>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4b61      	ldr	r3, [pc, #388]	; (800724c <UART_SetConfig+0x2d4>)
 80070c6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	011c      	lsls	r4, r3, #4
 80070ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070e0:	4642      	mov	r2, r8
 80070e2:	464b      	mov	r3, r9
 80070e4:	1891      	adds	r1, r2, r2
 80070e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80070e8:	415b      	adcs	r3, r3
 80070ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070f0:	4641      	mov	r1, r8
 80070f2:	eb12 0a01 	adds.w	sl, r2, r1
 80070f6:	4649      	mov	r1, r9
 80070f8:	eb43 0b01 	adc.w	fp, r3, r1
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800710c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007110:	4692      	mov	sl, r2
 8007112:	469b      	mov	fp, r3
 8007114:	4643      	mov	r3, r8
 8007116:	eb1a 0303 	adds.w	r3, sl, r3
 800711a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800711e:	464b      	mov	r3, r9
 8007120:	eb4b 0303 	adc.w	r3, fp, r3
 8007124:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007134:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800713c:	460b      	mov	r3, r1
 800713e:	18db      	adds	r3, r3, r3
 8007140:	643b      	str	r3, [r7, #64]	; 0x40
 8007142:	4613      	mov	r3, r2
 8007144:	eb42 0303 	adc.w	r3, r2, r3
 8007148:	647b      	str	r3, [r7, #68]	; 0x44
 800714a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800714e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007152:	f7f9 fc5b 	bl	8000a0c <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4611      	mov	r1, r2
 800715c:	4b3b      	ldr	r3, [pc, #236]	; (800724c <UART_SetConfig+0x2d4>)
 800715e:	fba3 2301 	umull	r2, r3, r3, r1
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	2264      	movs	r2, #100	; 0x64
 8007166:	fb02 f303 	mul.w	r3, r2, r3
 800716a:	1acb      	subs	r3, r1, r3
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007172:	4b36      	ldr	r3, [pc, #216]	; (800724c <UART_SetConfig+0x2d4>)
 8007174:	fba3 2302 	umull	r2, r3, r3, r2
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007180:	441c      	add	r4, r3
 8007182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007186:	2200      	movs	r2, #0
 8007188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800718c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007194:	4642      	mov	r2, r8
 8007196:	464b      	mov	r3, r9
 8007198:	1891      	adds	r1, r2, r2
 800719a:	63b9      	str	r1, [r7, #56]	; 0x38
 800719c:	415b      	adcs	r3, r3
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071a4:	4641      	mov	r1, r8
 80071a6:	1851      	adds	r1, r2, r1
 80071a8:	6339      	str	r1, [r7, #48]	; 0x30
 80071aa:	4649      	mov	r1, r9
 80071ac:	414b      	adcs	r3, r1
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071bc:	4659      	mov	r1, fp
 80071be:	00cb      	lsls	r3, r1, #3
 80071c0:	4651      	mov	r1, sl
 80071c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071c6:	4651      	mov	r1, sl
 80071c8:	00ca      	lsls	r2, r1, #3
 80071ca:	4610      	mov	r0, r2
 80071cc:	4619      	mov	r1, r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	4642      	mov	r2, r8
 80071d2:	189b      	adds	r3, r3, r2
 80071d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071d8:	464b      	mov	r3, r9
 80071da:	460a      	mov	r2, r1
 80071dc:	eb42 0303 	adc.w	r3, r2, r3
 80071e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071f8:	460b      	mov	r3, r1
 80071fa:	18db      	adds	r3, r3, r3
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071fe:	4613      	mov	r3, r2
 8007200:	eb42 0303 	adc.w	r3, r2, r3
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800720a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800720e:	f7f9 fbfd 	bl	8000a0c <__aeabi_uldivmod>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <UART_SetConfig+0x2d4>)
 8007218:	fba3 1302 	umull	r1, r3, r3, r2
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	2164      	movs	r1, #100	; 0x64
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	3332      	adds	r3, #50	; 0x32
 800722a:	4a08      	ldr	r2, [pc, #32]	; (800724c <UART_SetConfig+0x2d4>)
 800722c:	fba2 2303 	umull	r2, r3, r2, r3
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	f003 0207 	and.w	r2, r3, #7
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4422      	add	r2, r4
 800723e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007240:	e105      	b.n	800744e <UART_SetConfig+0x4d6>
 8007242:	bf00      	nop
 8007244:	40011000 	.word	0x40011000
 8007248:	40011400 	.word	0x40011400
 800724c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007254:	2200      	movs	r2, #0
 8007256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800725a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800725e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007262:	4642      	mov	r2, r8
 8007264:	464b      	mov	r3, r9
 8007266:	1891      	adds	r1, r2, r2
 8007268:	6239      	str	r1, [r7, #32]
 800726a:	415b      	adcs	r3, r3
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
 800726e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007272:	4641      	mov	r1, r8
 8007274:	1854      	adds	r4, r2, r1
 8007276:	4649      	mov	r1, r9
 8007278:	eb43 0501 	adc.w	r5, r3, r1
 800727c:	f04f 0200 	mov.w	r2, #0
 8007280:	f04f 0300 	mov.w	r3, #0
 8007284:	00eb      	lsls	r3, r5, #3
 8007286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800728a:	00e2      	lsls	r2, r4, #3
 800728c:	4614      	mov	r4, r2
 800728e:	461d      	mov	r5, r3
 8007290:	4643      	mov	r3, r8
 8007292:	18e3      	adds	r3, r4, r3
 8007294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007298:	464b      	mov	r3, r9
 800729a:	eb45 0303 	adc.w	r3, r5, r3
 800729e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072be:	4629      	mov	r1, r5
 80072c0:	008b      	lsls	r3, r1, #2
 80072c2:	4621      	mov	r1, r4
 80072c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072c8:	4621      	mov	r1, r4
 80072ca:	008a      	lsls	r2, r1, #2
 80072cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072d0:	f7f9 fb9c 	bl	8000a0c <__aeabi_uldivmod>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4b60      	ldr	r3, [pc, #384]	; (800745c <UART_SetConfig+0x4e4>)
 80072da:	fba3 2302 	umull	r2, r3, r3, r2
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	011c      	lsls	r4, r3, #4
 80072e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072f4:	4642      	mov	r2, r8
 80072f6:	464b      	mov	r3, r9
 80072f8:	1891      	adds	r1, r2, r2
 80072fa:	61b9      	str	r1, [r7, #24]
 80072fc:	415b      	adcs	r3, r3
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007304:	4641      	mov	r1, r8
 8007306:	1851      	adds	r1, r2, r1
 8007308:	6139      	str	r1, [r7, #16]
 800730a:	4649      	mov	r1, r9
 800730c:	414b      	adcs	r3, r1
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	f04f 0200 	mov.w	r2, #0
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800731c:	4659      	mov	r1, fp
 800731e:	00cb      	lsls	r3, r1, #3
 8007320:	4651      	mov	r1, sl
 8007322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007326:	4651      	mov	r1, sl
 8007328:	00ca      	lsls	r2, r1, #3
 800732a:	4610      	mov	r0, r2
 800732c:	4619      	mov	r1, r3
 800732e:	4603      	mov	r3, r0
 8007330:	4642      	mov	r2, r8
 8007332:	189b      	adds	r3, r3, r2
 8007334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007338:	464b      	mov	r3, r9
 800733a:	460a      	mov	r2, r1
 800733c:	eb42 0303 	adc.w	r3, r2, r3
 8007340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	67bb      	str	r3, [r7, #120]	; 0x78
 800734e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800735c:	4649      	mov	r1, r9
 800735e:	008b      	lsls	r3, r1, #2
 8007360:	4641      	mov	r1, r8
 8007362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007366:	4641      	mov	r1, r8
 8007368:	008a      	lsls	r2, r1, #2
 800736a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800736e:	f7f9 fb4d 	bl	8000a0c <__aeabi_uldivmod>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4b39      	ldr	r3, [pc, #228]	; (800745c <UART_SetConfig+0x4e4>)
 8007378:	fba3 1302 	umull	r1, r3, r3, r2
 800737c:	095b      	lsrs	r3, r3, #5
 800737e:	2164      	movs	r1, #100	; 0x64
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	3332      	adds	r3, #50	; 0x32
 800738a:	4a34      	ldr	r2, [pc, #208]	; (800745c <UART_SetConfig+0x4e4>)
 800738c:	fba2 2303 	umull	r2, r3, r2, r3
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007396:	441c      	add	r4, r3
 8007398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800739c:	2200      	movs	r2, #0
 800739e:	673b      	str	r3, [r7, #112]	; 0x70
 80073a0:	677a      	str	r2, [r7, #116]	; 0x74
 80073a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073a6:	4642      	mov	r2, r8
 80073a8:	464b      	mov	r3, r9
 80073aa:	1891      	adds	r1, r2, r2
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	415b      	adcs	r3, r3
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073b6:	4641      	mov	r1, r8
 80073b8:	1851      	adds	r1, r2, r1
 80073ba:	6039      	str	r1, [r7, #0]
 80073bc:	4649      	mov	r1, r9
 80073be:	414b      	adcs	r3, r1
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073ce:	4659      	mov	r1, fp
 80073d0:	00cb      	lsls	r3, r1, #3
 80073d2:	4651      	mov	r1, sl
 80073d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d8:	4651      	mov	r1, sl
 80073da:	00ca      	lsls	r2, r1, #3
 80073dc:	4610      	mov	r0, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	4603      	mov	r3, r0
 80073e2:	4642      	mov	r2, r8
 80073e4:	189b      	adds	r3, r3, r2
 80073e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073e8:	464b      	mov	r3, r9
 80073ea:	460a      	mov	r2, r1
 80073ec:	eb42 0303 	adc.w	r3, r2, r3
 80073f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	663b      	str	r3, [r7, #96]	; 0x60
 80073fc:	667a      	str	r2, [r7, #100]	; 0x64
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800740a:	4649      	mov	r1, r9
 800740c:	008b      	lsls	r3, r1, #2
 800740e:	4641      	mov	r1, r8
 8007410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007414:	4641      	mov	r1, r8
 8007416:	008a      	lsls	r2, r1, #2
 8007418:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800741c:	f7f9 faf6 	bl	8000a0c <__aeabi_uldivmod>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4b0d      	ldr	r3, [pc, #52]	; (800745c <UART_SetConfig+0x4e4>)
 8007426:	fba3 1302 	umull	r1, r3, r3, r2
 800742a:	095b      	lsrs	r3, r3, #5
 800742c:	2164      	movs	r1, #100	; 0x64
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	3332      	adds	r3, #50	; 0x32
 8007438:	4a08      	ldr	r2, [pc, #32]	; (800745c <UART_SetConfig+0x4e4>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	f003 020f 	and.w	r2, r3, #15
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4422      	add	r2, r4
 800744c:	609a      	str	r2, [r3, #8]
}
 800744e:	bf00      	nop
 8007450:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007454:	46bd      	mov	sp, r7
 8007456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745a:	bf00      	nop
 800745c:	51eb851f 	.word	0x51eb851f

08007460 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007460:	b084      	sub	sp, #16
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	f107 001c 	add.w	r0, r7, #28
 800746e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	2b01      	cmp	r3, #1
 8007476:	d122      	bne.n	80074be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800748c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d105      	bne.n	80074b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 faa2 	bl	80079fc <USB_CoreReset>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]
 80074bc:	e01a      	b.n	80074f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa96 	bl	80079fc <USB_CoreReset>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
 80074e6:	e005      	b.n	80074f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d10b      	bne.n	8007512 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f043 0206 	orr.w	r2, r3, #6
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f043 0220 	orr.w	r2, r3, #32
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800751e:	b004      	add	sp, #16
 8007520:	4770      	bx	lr

08007522 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f023 0201 	bic.w	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d115      	bne.n	8007592 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007572:	2001      	movs	r0, #1
 8007574:	f7fb fc5c 	bl	8002e30 <HAL_Delay>
      ms++;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa2e 	bl	80079e0 <USB_GetMode>
 8007584:	4603      	mov	r3, r0
 8007586:	2b01      	cmp	r3, #1
 8007588:	d01e      	beq.n	80075c8 <USB_SetCurrentMode+0x84>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b31      	cmp	r3, #49	; 0x31
 800758e:	d9f0      	bls.n	8007572 <USB_SetCurrentMode+0x2e>
 8007590:	e01a      	b.n	80075c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d115      	bne.n	80075c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075a4:	2001      	movs	r0, #1
 80075a6:	f7fb fc43 	bl	8002e30 <HAL_Delay>
      ms++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3301      	adds	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fa15 	bl	80079e0 <USB_GetMode>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <USB_SetCurrentMode+0x84>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b31      	cmp	r3, #49	; 0x31
 80075c0:	d9f0      	bls.n	80075a4 <USB_SetCurrentMode+0x60>
 80075c2:	e001      	b.n	80075c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e005      	b.n	80075d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b32      	cmp	r3, #50	; 0x32
 80075cc:	d101      	bne.n	80075d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075dc:	b084      	sub	sp, #16
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	e009      	b.n	8007610 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3340      	adds	r3, #64	; 0x40
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	2200      	movs	r2, #0
 8007608:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	3301      	adds	r3, #1
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b0e      	cmp	r3, #14
 8007614:	d9f2      	bls.n	80075fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d11c      	bne.n	8007656 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800762a:	f043 0302 	orr.w	r3, r3, #2
 800762e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
 8007654:	e00b      	b.n	800766e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007674:	461a      	mov	r2, r3
 8007676:	2300      	movs	r3, #0
 8007678:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007680:	4619      	mov	r1, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007688:	461a      	mov	r2, r3
 800768a:	680b      	ldr	r3, [r1, #0]
 800768c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10c      	bne.n	80076ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800769a:	2100      	movs	r1, #0
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f965 	bl	800796c <USB_SetDevSpeed>
 80076a2:	e008      	b.n	80076b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076a4:	2101      	movs	r1, #1
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f960 	bl	800796c <USB_SetDevSpeed>
 80076ac:	e003      	b.n	80076b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076ae:	2103      	movs	r1, #3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f95b 	bl	800796c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076b6:	2110      	movs	r1, #16
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f8f3 	bl	80078a4 <USB_FlushTxFifo>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f91f 	bl	800790c <USB_FlushRxFifo>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076de:	461a      	mov	r2, r3
 80076e0:	2300      	movs	r3, #0
 80076e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ea:	461a      	mov	r2, r3
 80076ec:	2300      	movs	r3, #0
 80076ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f6:	461a      	mov	r2, r3
 80076f8:	2300      	movs	r3, #0
 80076fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	e043      	b.n	800778a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007718:	d118      	bne.n	800774c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772c:	461a      	mov	r2, r3
 800772e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	e013      	b.n	800775e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007742:	461a      	mov	r2, r3
 8007744:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e008      	b.n	800775e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007758:	461a      	mov	r2, r3
 800775a:	2300      	movs	r3, #0
 800775c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776a:	461a      	mov	r2, r3
 800776c:	2300      	movs	r3, #0
 800776e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	461a      	mov	r2, r3
 800777e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007782:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3301      	adds	r3, #1
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	429a      	cmp	r2, r3
 8007790:	d3b7      	bcc.n	8007702 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007792:	2300      	movs	r3, #0
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	e043      	b.n	8007820 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ae:	d118      	bne.n	80077e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	461a      	mov	r2, r3
 80077c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e013      	b.n	80077f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	461a      	mov	r2, r3
 80077da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	e008      	b.n	80077f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ee:	461a      	mov	r2, r3
 80077f0:	2300      	movs	r3, #0
 80077f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	461a      	mov	r2, r3
 8007802:	2300      	movs	r3, #0
 8007804:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007812:	461a      	mov	r2, r3
 8007814:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007818:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	3301      	adds	r3, #1
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d3b7      	bcc.n	8007798 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800783a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007848:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f043 0210 	orr.w	r2, r3, #16
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699a      	ldr	r2, [r3, #24]
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <USB_DevInit+0x2c4>)
 8007862:	4313      	orrs	r3, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f043 0208 	orr.w	r2, r3, #8
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800787a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007888:	f043 0304 	orr.w	r3, r3, #4
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800789c:	b004      	add	sp, #16
 800789e:	4770      	bx	lr
 80078a0:	803c3800 	.word	0x803c3800

080078a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3301      	adds	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4a13      	ldr	r2, [pc, #76]	; (8007908 <USB_FlushTxFifo+0x64>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d901      	bls.n	80078c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e01b      	b.n	80078fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	daf2      	bge.n	80078b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	019b      	lsls	r3, r3, #6
 80078d4:	f043 0220 	orr.w	r2, r3, #32
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4a08      	ldr	r2, [pc, #32]	; (8007908 <USB_FlushTxFifo+0x64>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d901      	bls.n	80078ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e006      	b.n	80078fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d0f0      	beq.n	80078dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	00030d40 	.word	0x00030d40

0800790c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3301      	adds	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4a11      	ldr	r2, [pc, #68]	; (8007968 <USB_FlushRxFifo+0x5c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d901      	bls.n	800792a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e018      	b.n	800795c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	daf2      	bge.n	8007918 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2210      	movs	r2, #16
 800793a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a08      	ldr	r2, [pc, #32]	; (8007968 <USB_FlushRxFifo+0x5c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e006      	b.n	800795c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b10      	cmp	r3, #16
 8007958:	d0f0      	beq.n	800793c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	00030d40 	.word	0x00030d40

0800796c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800798c:	4313      	orrs	r3, r2
 800798e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079b8:	f023 0303 	bic.w	r3, r3, #3
 80079bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079cc:	f043 0302 	orr.w	r3, r3, #2
 80079d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0301 	and.w	r3, r3, #1
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <USB_CoreReset+0x64>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d901      	bls.n	8007a1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e01b      	b.n	8007a52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	daf2      	bge.n	8007a08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f043 0201 	orr.w	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <USB_CoreReset+0x64>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d901      	bls.n	8007a44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e006      	b.n	8007a52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d0f0      	beq.n	8007a32 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	00030d40 	.word	0x00030d40

08007a64 <__NVIC_SetPriority>:
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	db0a      	blt.n	8007a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	490c      	ldr	r1, [pc, #48]	; (8007ab0 <__NVIC_SetPriority+0x4c>)
 8007a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a82:	0112      	lsls	r2, r2, #4
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	440b      	add	r3, r1
 8007a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a8c:	e00a      	b.n	8007aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	4908      	ldr	r1, [pc, #32]	; (8007ab4 <__NVIC_SetPriority+0x50>)
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	3b04      	subs	r3, #4
 8007a9c:	0112      	lsls	r2, r2, #4
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	761a      	strb	r2, [r3, #24]
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	e000e100 	.word	0xe000e100
 8007ab4:	e000ed00 	.word	0xe000ed00

08007ab8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <SysTick_Handler+0x1c>)
 8007abe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ac0:	f001 ffd2 	bl	8009a68 <xTaskGetSchedulerState>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d001      	beq.n	8007ace <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007aca:	f002 fdf5 	bl	800a6b8 <xPortSysTickHandler>
  }
}
 8007ace:	bf00      	nop
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	e000e010 	.word	0xe000e010

08007ad8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007adc:	2100      	movs	r1, #0
 8007ade:	f06f 0004 	mvn.w	r0, #4
 8007ae2:	f7ff ffbf 	bl	8007a64 <__NVIC_SetPriority>
#endif
}
 8007ae6:	bf00      	nop
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007af2:	f3ef 8305 	mrs	r3, IPSR
 8007af6:	603b      	str	r3, [r7, #0]
  return(result);
 8007af8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007afe:	f06f 0305 	mvn.w	r3, #5
 8007b02:	607b      	str	r3, [r7, #4]
 8007b04:	e00c      	b.n	8007b20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b06:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <osKernelInitialize+0x44>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d105      	bne.n	8007b1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b0e:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <osKernelInitialize+0x44>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	607b      	str	r3, [r7, #4]
 8007b18:	e002      	b.n	8007b20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b20:	687b      	ldr	r3, [r7, #4]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	200011fc 	.word	0x200011fc

08007b34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3a:	f3ef 8305 	mrs	r3, IPSR
 8007b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b46:	f06f 0305 	mvn.w	r3, #5
 8007b4a:	607b      	str	r3, [r7, #4]
 8007b4c:	e010      	b.n	8007b70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <osKernelStart+0x48>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d109      	bne.n	8007b6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b56:	f7ff ffbf 	bl	8007ad8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b5a:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <osKernelStart+0x48>)
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b60:	f001 fa88 	bl	8009074 <vTaskStartScheduler>
      stat = osOK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	e002      	b.n	8007b70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b70:	687b      	ldr	r3, [r7, #4]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	200011fc 	.word	0x200011fc

08007b80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08e      	sub	sp, #56	; 0x38
 8007b84:	af04      	add	r7, sp, #16
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b90:	f3ef 8305 	mrs	r3, IPSR
 8007b94:	617b      	str	r3, [r7, #20]
  return(result);
 8007b96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d17e      	bne.n	8007c9a <osThreadNew+0x11a>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d07b      	beq.n	8007c9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ba2:	2380      	movs	r3, #128	; 0x80
 8007ba4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ba6:	2318      	movs	r3, #24
 8007ba8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d045      	beq.n	8007c46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <osThreadNew+0x48>
        name = attr->name;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d008      	beq.n	8007bee <osThreadNew+0x6e>
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	2b38      	cmp	r3, #56	; 0x38
 8007be0:	d805      	bhi.n	8007bee <osThreadNew+0x6e>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <osThreadNew+0x72>
        return (NULL);
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e054      	b.n	8007c9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	089b      	lsrs	r3, r3, #2
 8007c00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00e      	beq.n	8007c28 <osThreadNew+0xa8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2bbb      	cmp	r3, #187	; 0xbb
 8007c10:	d90a      	bls.n	8007c28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <osThreadNew+0xa8>
        mem = 1;
 8007c22:	2301      	movs	r3, #1
 8007c24:	61bb      	str	r3, [r7, #24]
 8007c26:	e010      	b.n	8007c4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10c      	bne.n	8007c4a <osThreadNew+0xca>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d108      	bne.n	8007c4a <osThreadNew+0xca>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d104      	bne.n	8007c4a <osThreadNew+0xca>
          mem = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	e001      	b.n	8007c4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d110      	bne.n	8007c72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c58:	9202      	str	r2, [sp, #8]
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6a3a      	ldr	r2, [r7, #32]
 8007c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f001 f818 	bl	8008c9c <xTaskCreateStatic>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	e013      	b.n	8007c9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d110      	bne.n	8007c9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f107 0310 	add.w	r3, r7, #16
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f001 f863 	bl	8008d56 <xTaskCreate>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d001      	beq.n	8007c9a <osThreadNew+0x11a>
            hTask = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c9a:	693b      	ldr	r3, [r7, #16]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3728      	adds	r7, #40	; 0x28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cac:	f3ef 8305 	mrs	r3, IPSR
 8007cb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <osDelay+0x1c>
    stat = osErrorISR;
 8007cb8:	f06f 0305 	mvn.w	r3, #5
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	e007      	b.n	8007cd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f99e 	bl	800900c <vTaskDelay>
    }
  }

  return (stat);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a07      	ldr	r2, [pc, #28]	; (8007d08 <vApplicationGetIdleTaskMemory+0x2c>)
 8007cec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	4a06      	ldr	r2, [pc, #24]	; (8007d0c <vApplicationGetIdleTaskMemory+0x30>)
 8007cf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2280      	movs	r2, #128	; 0x80
 8007cf8:	601a      	str	r2, [r3, #0]
}
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20001200 	.word	0x20001200
 8007d0c:	200012bc 	.word	0x200012bc

08007d10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4a07      	ldr	r2, [pc, #28]	; (8007d3c <vApplicationGetTimerTaskMemory+0x2c>)
 8007d20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4a06      	ldr	r2, [pc, #24]	; (8007d40 <vApplicationGetTimerTaskMemory+0x30>)
 8007d26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d2e:	601a      	str	r2, [r3, #0]
}
 8007d30:	bf00      	nop
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	200014bc 	.word	0x200014bc
 8007d40:	20001578 	.word	0x20001578

08007d44 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007d68:	2320      	movs	r3, #32
 8007d6a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d00a      	beq.n	8007d88 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	60fb      	str	r3, [r7, #12]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 f9dd 	bl	800815c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2201      	movs	r2, #1
 8007da6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007da8:	697b      	ldr	r3, [r7, #20]
	}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b090      	sub	sp, #64	; 0x40
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xEventGroupWaitBits+0x36>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <xEventGroupWaitBits+0x56>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	61fb      	str	r3, [r7, #28]
}
 8007e06:	bf00      	nop
 8007e08:	e7fe      	b.n	8007e08 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xEventGroupWaitBits+0x72>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	61bb      	str	r3, [r7, #24]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e26:	f001 fe1f 	bl	8009a68 <xTaskGetSchedulerState>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <xEventGroupWaitBits+0x82>
 8007e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <xEventGroupWaitBits+0x86>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <xEventGroupWaitBits+0x88>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	617b      	str	r3, [r7, #20]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8007e56:	f001 f97d 	bl	8009154 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e66:	f000 f943 	bl	80080f0 <prvTestWaitCondition>
 8007e6a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00e      	beq.n	8007e90 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d028      	beq.n	8007ed2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	43db      	mvns	r3, r3
 8007e88:	401a      	ands	r2, r3
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e020      	b.n	8007ed2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e9e:	e018      	b.n	8007ed2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eac:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007eba:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	1d18      	adds	r0, r3, #4
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f001 fb41 	bl	8009550 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007ed2:	f001 f94d 	bl	8009170 <xTaskResumeAll>
 8007ed6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d031      	beq.n	8007f42 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d107      	bne.n	8007ef4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007ee4:	4b19      	ldr	r3, [pc, #100]	; (8007f4c <xEventGroupWaitBits+0x198>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007ef4:	f001 fe44 	bl	8009b80 <uxTaskResetEventItemValue>
 8007ef8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d11a      	bne.n	8007f3a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8007f04:	f002 fb46 	bl	800a594 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007f14:	f000 f8ec 	bl	80080f0 <prvTestWaitCondition>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	43db      	mvns	r3, r3
 8007f2c:	401a      	ands	r2, r3
 8007f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f30:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8007f36:	f002 fb5d 	bl	800a5f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3740      	adds	r7, #64	; 0x40
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <xEventGroupClearBits+0x2a>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	60fb      	str	r3, [r7, #12]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <xEventGroupClearBits+0x4a>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	60bb      	str	r3, [r7, #8]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8007f9a:	f002 fafb 	bl	800a594 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	43db      	mvns	r3, r3
 8007fac:	401a      	ands	r2, r3
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007fb2:	f002 fb1f 	bl	800a5f4 <vPortExitCritical>

	return uxReturn;
 8007fb6:	693b      	ldr	r3, [r7, #16]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <xEventGroupSetBits+0x32>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	613b      	str	r3, [r7, #16]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <xEventGroupSetBits+0x52>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	60fb      	str	r3, [r7, #12]
}
 800800e:	bf00      	nop
 8008010:	e7fe      	b.n	8008010 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	3304      	adds	r3, #4
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	3308      	adds	r3, #8
 800801c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800801e:	f001 f899 	bl	8009154 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	431a      	orrs	r2, r3
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008034:	e03c      	b.n	80080b0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800803c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008042:	2300      	movs	r3, #0
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800804c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008054:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d108      	bne.n	8008072 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800806c:	2301      	movs	r3, #1
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008070:	e008      	b.n	8008084 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	4013      	ands	r3, r2
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	429a      	cmp	r2, r3
 800807e:	d101      	bne.n	8008084 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008080:	2301      	movs	r3, #1
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d010      	beq.n	80080ac <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	4313      	orrs	r3, r2
 800809a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080a4:	4619      	mov	r1, r3
 80080a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080a8:	f001 fb1e 	bl	80096e8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80080b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d1be      	bne.n	8008036 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	43db      	mvns	r3, r3
 80080c0:	401a      	ands	r2, r3
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80080c6:	f001 f853 	bl	8009170 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	681b      	ldr	r3, [r3, #0]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3738      	adds	r7, #56	; 0x38
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff ff6c 	bl	8007fc0 <xEventGroupSetBits>
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d107      	bne.n	8008116 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008110:	2301      	movs	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	e007      	b.n	8008126 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4013      	ands	r3, r2
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d101      	bne.n	8008126 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008122:	2301      	movs	r3, #1
 8008124:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008126:	697b      	ldr	r3, [r7, #20]
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	68f9      	ldr	r1, [r7, #12]
 8008146:	4804      	ldr	r0, [pc, #16]	; (8008158 <xEventGroupSetBitsFromISR+0x24>)
 8008148:	f002 f8d4 	bl	800a2f4 <xTimerPendFunctionCallFromISR>
 800814c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800814e:	697b      	ldr	r3, [r7, #20]
	}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	080080d7 	.word	0x080080d7

0800815c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f103 0208 	add.w	r2, r3, #8
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f04f 32ff 	mov.w	r2, #4294967295
 8008174:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f103 0208 	add.w	r2, r3, #8
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f103 0208 	add.w	r2, r3, #8
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081aa:	bf00      	nop
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	601a      	str	r2, [r3, #0]
}
 80081f2:	bf00      	nop
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081fe:	b480      	push	{r7}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008214:	d103      	bne.n	800821e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	e00c      	b.n	8008238 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3308      	adds	r3, #8
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e002      	b.n	800822c <vListInsert+0x2e>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	429a      	cmp	r2, r3
 8008236:	d2f6      	bcs.n	8008226 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	601a      	str	r2, [r3, #0]
}
 8008264:	bf00      	nop
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6892      	ldr	r2, [r2, #8]
 8008286:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6852      	ldr	r2, [r2, #4]
 8008290:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	429a      	cmp	r2, r3
 800829a:	d103      	bne.n	80082a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xQueueGenericReset+0x2a>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	60bb      	str	r3, [r7, #8]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082ee:	f002 f951 	bl	800a594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082fe:	fb01 f303 	mul.w	r3, r1, r3
 8008302:	441a      	add	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831e:	3b01      	subs	r3, #1
 8008320:	68f9      	ldr	r1, [r7, #12]
 8008322:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	441a      	add	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	22ff      	movs	r2, #255	; 0xff
 8008332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	22ff      	movs	r2, #255	; 0xff
 800833a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d114      	bne.n	800836e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01a      	beq.n	8008382 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3310      	adds	r3, #16
 8008350:	4618      	mov	r0, r3
 8008352:	f001 f965 	bl	8009620 <xTaskRemoveFromEventList>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d012      	beq.n	8008382 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800835c:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <xQueueGenericReset+0xcc>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	e009      	b.n	8008382 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3310      	adds	r3, #16
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fef2 	bl	800815c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3324      	adds	r3, #36	; 0x24
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff feed 	bl	800815c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008382:	f002 f937 	bl	800a5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008386:	2301      	movs	r3, #1
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08e      	sub	sp, #56	; 0x38
 8008398:	af02      	add	r7, sp, #8
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ba:	bf00      	nop
 80083bc:	e7fe      	b.n	80083bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <xQueueGenericCreateStatic+0x52>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <xQueueGenericCreateStatic+0x56>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <xQueueGenericCreateStatic+0x58>
 80083ea:	2300      	movs	r3, #0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	623b      	str	r3, [r7, #32]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <xQueueGenericCreateStatic+0x7e>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <xQueueGenericCreateStatic+0x82>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <xQueueGenericCreateStatic+0x84>
 8008416:	2300      	movs	r3, #0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10a      	bne.n	8008432 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	61fb      	str	r3, [r7, #28]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008432:	2350      	movs	r3, #80	; 0x50
 8008434:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b50      	cmp	r3, #80	; 0x50
 800843a:	d00a      	beq.n	8008452 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	61bb      	str	r3, [r7, #24]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008452:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00d      	beq.n	800847a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008466:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4613      	mov	r3, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f805 	bl	8008484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800847c:	4618      	mov	r0, r3
 800847e:	3730      	adds	r7, #48	; 0x30
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	e002      	b.n	80084a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084b2:	2101      	movs	r1, #1
 80084b4:	69b8      	ldr	r0, [r7, #24]
 80084b6:	f7ff ff05 	bl	80082c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	78fa      	ldrb	r2, [r7, #3]
 80084be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08e      	sub	sp, #56	; 0x38
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084da:	2300      	movs	r3, #0
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <xQueueGenericSend+0x32>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <xQueueGenericSend+0x40>
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <xQueueGenericSend+0x44>
 800850c:	2301      	movs	r3, #1
 800850e:	e000      	b.n	8008512 <xQueueGenericSend+0x46>
 8008510:	2300      	movs	r3, #0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <xQueueGenericSend+0x60>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d103      	bne.n	800853a <xQueueGenericSend+0x6e>
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008536:	2b01      	cmp	r3, #1
 8008538:	d101      	bne.n	800853e <xQueueGenericSend+0x72>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <xQueueGenericSend+0x74>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <xQueueGenericSend+0x8e>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	623b      	str	r3, [r7, #32]
}
 8008556:	bf00      	nop
 8008558:	e7fe      	b.n	8008558 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800855a:	f001 fa85 	bl	8009a68 <xTaskGetSchedulerState>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <xQueueGenericSend+0x9e>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <xQueueGenericSend+0xa2>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <xQueueGenericSend+0xa4>
 800856e:	2300      	movs	r3, #0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xQueueGenericSend+0xbe>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	61fb      	str	r3, [r7, #28]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800858a:	f002 f803 	bl	800a594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	429a      	cmp	r2, r3
 8008598:	d302      	bcc.n	80085a0 <xQueueGenericSend+0xd4>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d129      	bne.n	80085f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085a6:	f000 fa0b 	bl	80089c0 <prvCopyDataToQueue>
 80085aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d010      	beq.n	80085d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	3324      	adds	r3, #36	; 0x24
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 f831 	bl	8009620 <xTaskRemoveFromEventList>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d013      	beq.n	80085ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085c4:	4b3f      	ldr	r3, [pc, #252]	; (80086c4 <xQueueGenericSend+0x1f8>)
 80085c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	e00a      	b.n	80085ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085dc:	4b39      	ldr	r3, [pc, #228]	; (80086c4 <xQueueGenericSend+0x1f8>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085ec:	f002 f802 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e063      	b.n	80086bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085fa:	f001 fffb 	bl	800a5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	e05c      	b.n	80086bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008604:	2b00      	cmp	r3, #0
 8008606:	d106      	bne.n	8008616 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008608:	f107 0314 	add.w	r3, r7, #20
 800860c:	4618      	mov	r0, r3
 800860e:	f001 f8cd 	bl	80097ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008616:	f001 ffed 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800861a:	f000 fd9b 	bl	8009154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800861e:	f001 ffb9 	bl	800a594 <vPortEnterCritical>
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008628:	b25b      	sxtb	r3, r3
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d103      	bne.n	8008638 <xQueueGenericSend+0x16c>
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800863e:	b25b      	sxtb	r3, r3
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	d103      	bne.n	800864e <xQueueGenericSend+0x182>
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800864e:	f001 ffd1 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008652:	1d3a      	adds	r2, r7, #4
 8008654:	f107 0314 	add.w	r3, r7, #20
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f001 f8bc 	bl	80097d8 <xTaskCheckForTimeOut>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d124      	bne.n	80086b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008668:	f000 faa2 	bl	8008bb0 <prvIsQueueFull>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d018      	beq.n	80086a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	3310      	adds	r3, #16
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f000 ff44 	bl	8009508 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008682:	f000 fa2d 	bl	8008ae0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008686:	f000 fd73 	bl	8009170 <xTaskResumeAll>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	f47f af7c 	bne.w	800858a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008692:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <xQueueGenericSend+0x1f8>)
 8008694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	e772      	b.n	800858a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086a6:	f000 fa1b 	bl	8008ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086aa:	f000 fd61 	bl	8009170 <xTaskResumeAll>
 80086ae:	e76c      	b.n	800858a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086b2:	f000 fa15 	bl	8008ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086b6:	f000 fd5b 	bl	8009170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3738      	adds	r7, #56	; 0x38
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b090      	sub	sp, #64	; 0x40
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
 80086d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10a      	bne.n	80086f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d103      	bne.n	8008704 <xQueueGenericSendFromISR+0x3c>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <xQueueGenericSendFromISR+0x40>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <xQueueGenericSendFromISR+0x42>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d103      	bne.n	8008732 <xQueueGenericSendFromISR+0x6a>
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <xQueueGenericSendFromISR+0x6e>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <xQueueGenericSendFromISR+0x70>
 8008736:	2300      	movs	r3, #0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	623b      	str	r3, [r7, #32]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008752:	f002 f801 	bl	800a758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008756:	f3ef 8211 	mrs	r2, BASEPRI
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	61fa      	str	r2, [r7, #28]
 800876c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800876e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877a:	429a      	cmp	r2, r3
 800877c:	d302      	bcc.n	8008784 <xQueueGenericSendFromISR+0xbc>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d12f      	bne.n	80087e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800878a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800879a:	f000 f911 	bl	80089c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800879e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80087a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a6:	d112      	bne.n	80087ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d016      	beq.n	80087de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	3324      	adds	r3, #36	; 0x24
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 ff33 	bl	8009620 <xTaskRemoveFromEventList>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00e      	beq.n	80087de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00b      	beq.n	80087de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e007      	b.n	80087de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087d2:	3301      	adds	r3, #1
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	b25a      	sxtb	r2, r3
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087de:	2301      	movs	r3, #1
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087e2:	e001      	b.n	80087e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3740      	adds	r7, #64	; 0x40
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	; 0x30
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800880c:	2300      	movs	r3, #0
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10a      	bne.n	8008830 <xQueueReceive+0x30>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	623b      	str	r3, [r7, #32]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d103      	bne.n	800883e <xQueueReceive+0x3e>
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <xQueueReceive+0x42>
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <xQueueReceive+0x44>
 8008842:	2300      	movs	r3, #0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <xQueueReceive+0x5e>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	61fb      	str	r3, [r7, #28]
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800885e:	f001 f903 	bl	8009a68 <xTaskGetSchedulerState>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <xQueueReceive+0x6e>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <xQueueReceive+0x72>
 800886e:	2301      	movs	r3, #1
 8008870:	e000      	b.n	8008874 <xQueueReceive+0x74>
 8008872:	2300      	movs	r3, #0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10a      	bne.n	800888e <xQueueReceive+0x8e>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	61bb      	str	r3, [r7, #24]
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800888e:	f001 fe81 	bl	800a594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01f      	beq.n	80088de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f000 f8f7 	bl	8008a94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	1e5a      	subs	r2, r3, #1
 80088aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00f      	beq.n	80088d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	3310      	adds	r3, #16
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 feb0 	bl	8009620 <xTaskRemoveFromEventList>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088c6:	4b3d      	ldr	r3, [pc, #244]	; (80089bc <xQueueReceive+0x1bc>)
 80088c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088d6:	f001 fe8d 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 80088da:	2301      	movs	r3, #1
 80088dc:	e069      	b.n	80089b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d103      	bne.n	80088ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088e4:	f001 fe86 	bl	800a5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e062      	b.n	80089b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d106      	bne.n	8008900 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088f2:	f107 0310 	add.w	r3, r7, #16
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 ff58 	bl	80097ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088fc:	2301      	movs	r3, #1
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008900:	f001 fe78 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008904:	f000 fc26 	bl	8009154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008908:	f001 fe44 	bl	800a594 <vPortEnterCritical>
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008912:	b25b      	sxtb	r3, r3
 8008914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008918:	d103      	bne.n	8008922 <xQueueReceive+0x122>
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008928:	b25b      	sxtb	r3, r3
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d103      	bne.n	8008938 <xQueueReceive+0x138>
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008938:	f001 fe5c 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800893c:	1d3a      	adds	r2, r7, #4
 800893e:	f107 0310 	add.w	r3, r7, #16
 8008942:	4611      	mov	r1, r2
 8008944:	4618      	mov	r0, r3
 8008946:	f000 ff47 	bl	80097d8 <xTaskCheckForTimeOut>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d123      	bne.n	8008998 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008952:	f000 f917 	bl	8008b84 <prvIsQueueEmpty>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d017      	beq.n	800898c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	3324      	adds	r3, #36	; 0x24
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fdcf 	bl	8009508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800896a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800896c:	f000 f8b8 	bl	8008ae0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008970:	f000 fbfe 	bl	8009170 <xTaskResumeAll>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d189      	bne.n	800888e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <xQueueReceive+0x1bc>)
 800897c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	e780      	b.n	800888e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800898c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800898e:	f000 f8a7 	bl	8008ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008992:	f000 fbed 	bl	8009170 <xTaskResumeAll>
 8008996:	e77a      	b.n	800888e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800899a:	f000 f8a1 	bl	8008ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800899e:	f000 fbe7 	bl	8009170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a4:	f000 f8ee 	bl	8008b84 <prvIsQueueEmpty>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f43f af6f 	beq.w	800888e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3730      	adds	r7, #48	; 0x30
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	e000ed04 	.word	0xe000ed04

080089c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10d      	bne.n	80089fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d14d      	bne.n	8008a82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 f85a 	bl	8009aa4 <xTaskPriorityDisinherit>
 80089f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	e043      	b.n	8008a82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d119      	bne.n	8008a34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6858      	ldr	r0, [r3, #4]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	f003 f8fc 	bl	800bc08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	441a      	add	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d32b      	bcc.n	8008a82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	605a      	str	r2, [r3, #4]
 8008a32:	e026      	b.n	8008a82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	68d8      	ldr	r0, [r3, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	f003 f8e2 	bl	800bc08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	425b      	negs	r3, r3
 8008a4e:	441a      	add	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68da      	ldr	r2, [r3, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d207      	bcs.n	8008a70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	425b      	negs	r3, r3
 8008a6a:	441a      	add	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d105      	bne.n	8008a82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a8a:	697b      	ldr	r3, [r7, #20]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d018      	beq.n	8008ad8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	441a      	add	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d303      	bcc.n	8008ac8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68d9      	ldr	r1, [r3, #12]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6838      	ldr	r0, [r7, #0]
 8008ad4:	f003 f898 	bl	800bc08 <memcpy>
	}
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ae8:	f001 fd54 	bl	800a594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008af2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008af4:	e011      	b.n	8008b1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d012      	beq.n	8008b24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3324      	adds	r3, #36	; 0x24
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fd8c 	bl	8009620 <xTaskRemoveFromEventList>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b0e:	f000 fec5 	bl	800989c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	dce9      	bgt.n	8008af6 <prvUnlockQueue+0x16>
 8008b22:	e000      	b.n	8008b26 <prvUnlockQueue+0x46>
					break;
 8008b24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	22ff      	movs	r2, #255	; 0xff
 8008b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b2e:	f001 fd61 	bl	800a5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b32:	f001 fd2f 	bl	800a594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b3e:	e011      	b.n	8008b64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d012      	beq.n	8008b6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3310      	adds	r3, #16
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fd67 	bl	8009620 <xTaskRemoveFromEventList>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b58:	f000 fea0 	bl	800989c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dce9      	bgt.n	8008b40 <prvUnlockQueue+0x60>
 8008b6c:	e000      	b.n	8008b70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	22ff      	movs	r2, #255	; 0xff
 8008b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b78:	f001 fd3c 	bl	800a5f4 <vPortExitCritical>
}
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b8c:	f001 fd02 	bl	800a594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e001      	b.n	8008ba2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ba2:	f001 fd27 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bb8:	f001 fcec 	bl	800a594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d102      	bne.n	8008bce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	e001      	b.n	8008bd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bd2:	f001 fd0f 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	e014      	b.n	8008c1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bf0:	4a0f      	ldr	r2, [pc, #60]	; (8008c30 <vQueueAddToRegistry+0x50>)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10b      	bne.n	8008c14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008bfc:	490c      	ldr	r1, [pc, #48]	; (8008c30 <vQueueAddToRegistry+0x50>)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c06:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <vQueueAddToRegistry+0x50>)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	4413      	add	r3, r2
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c12:	e006      	b.n	8008c22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b07      	cmp	r3, #7
 8008c1e:	d9e7      	bls.n	8008bf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20001978 	.word	0x20001978

08008c34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c44:	f001 fca6 	bl	800a594 <vPortEnterCritical>
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c4e:	b25b      	sxtb	r3, r3
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c54:	d103      	bne.n	8008c5e <vQueueWaitForMessageRestricted+0x2a>
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c64:	b25b      	sxtb	r3, r3
 8008c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6a:	d103      	bne.n	8008c74 <vQueueWaitForMessageRestricted+0x40>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c74:	f001 fcbe 	bl	800a5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d106      	bne.n	8008c8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	3324      	adds	r3, #36	; 0x24
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	68b9      	ldr	r1, [r7, #8]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fc9d 	bl	80095c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c8e:	6978      	ldr	r0, [r7, #20]
 8008c90:	f7ff ff26 	bl	8008ae0 <prvUnlockQueue>
	}
 8008c94:	bf00      	nop
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08e      	sub	sp, #56	; 0x38
 8008ca0:	af04      	add	r7, sp, #16
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	623b      	str	r3, [r7, #32]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	61fb      	str	r3, [r7, #28]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ce2:	23bc      	movs	r3, #188	; 0xbc
 8008ce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2bbc      	cmp	r3, #188	; 0xbc
 8008cea:	d00a      	beq.n	8008d02 <xTaskCreateStatic+0x66>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	61bb      	str	r3, [r7, #24]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d01e      	beq.n	8008d48 <xTaskCreateStatic+0xac>
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01b      	beq.n	8008d48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d22:	2300      	movs	r3, #0
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	9302      	str	r3, [sp, #8]
 8008d2a:	f107 0314 	add.w	r3, r7, #20
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 f850 	bl	8008de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d42:	f000 f8f3 	bl	8008f2c <prvAddNewTaskToReadyList>
 8008d46:	e001      	b.n	8008d4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d4c:	697b      	ldr	r3, [r7, #20]
	}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3728      	adds	r7, #40	; 0x28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b08c      	sub	sp, #48	; 0x30
 8008d5a:	af04      	add	r7, sp, #16
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	603b      	str	r3, [r7, #0]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 fd34 	bl	800a7d8 <pvPortMalloc>
 8008d70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00e      	beq.n	8008d96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d78:	20bc      	movs	r0, #188	; 0xbc
 8008d7a:	f001 fd2d 	bl	800a7d8 <pvPortMalloc>
 8008d7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8008d8c:	e005      	b.n	8008d9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d8e:	6978      	ldr	r0, [r7, #20]
 8008d90:	f001 fdee 	bl	800a970 <vPortFree>
 8008d94:	e001      	b.n	8008d9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d017      	beq.n	8008dd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008da8:	88fa      	ldrh	r2, [r7, #6]
 8008daa:	2300      	movs	r3, #0
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	9302      	str	r3, [sp, #8]
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 f80e 	bl	8008de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dc4:	69f8      	ldr	r0, [r7, #28]
 8008dc6:	f000 f8b1 	bl	8008f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	61bb      	str	r3, [r7, #24]
 8008dce:	e002      	b.n	8008dd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3720      	adds	r7, #32
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	461a      	mov	r2, r3
 8008df8:	21a5      	movs	r1, #165	; 0xa5
 8008dfa:	f002 ff13 	bl	800bc24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	f023 0307 	bic.w	r3, r3, #7
 8008e16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	f003 0307 	and.w	r3, r3, #7
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	617b      	str	r3, [r7, #20]
}
 8008e34:	bf00      	nop
 8008e36:	e7fe      	b.n	8008e36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d01f      	beq.n	8008e7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61fb      	str	r3, [r7, #28]
 8008e42:	e012      	b.n	8008e6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4413      	add	r3, r2
 8008e4a:	7819      	ldrb	r1, [r3, #0]
 8008e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	3334      	adds	r3, #52	; 0x34
 8008e54:	460a      	mov	r2, r1
 8008e56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d006      	beq.n	8008e72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	3301      	adds	r3, #1
 8008e68:	61fb      	str	r3, [r7, #28]
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	2b0f      	cmp	r3, #15
 8008e6e:	d9e9      	bls.n	8008e44 <prvInitialiseNewTask+0x64>
 8008e70:	e000      	b.n	8008e74 <prvInitialiseNewTask+0x94>
			{
				break;
 8008e72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e7c:	e003      	b.n	8008e86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	2b37      	cmp	r3, #55	; 0x37
 8008e8a:	d901      	bls.n	8008e90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e8c:	2337      	movs	r3, #55	; 0x37
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff f978 	bl	800819c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	3318      	adds	r3, #24
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff f973 	bl	800819c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	3354      	adds	r3, #84	; 0x54
 8008ee0:	2260      	movs	r2, #96	; 0x60
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f002 fe9d 	bl	800bc24 <memset>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	4a0c      	ldr	r2, [pc, #48]	; (8008f20 <prvInitialiseNewTask+0x140>)
 8008eee:	659a      	str	r2, [r3, #88]	; 0x58
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	4a0c      	ldr	r2, [pc, #48]	; (8008f24 <prvInitialiseNewTask+0x144>)
 8008ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	4a0b      	ldr	r2, [pc, #44]	; (8008f28 <prvInitialiseNewTask+0x148>)
 8008efa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	68f9      	ldr	r1, [r7, #12]
 8008f00:	69b8      	ldr	r0, [r7, #24]
 8008f02:	f001 fa17 	bl	800a334 <pxPortInitialiseStack>
 8008f06:	4602      	mov	r2, r0
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f18:	bf00      	nop
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	0800bee4 	.word	0x0800bee4
 8008f24:	0800bf04 	.word	0x0800bf04
 8008f28:	0800bec4 	.word	0x0800bec4

08008f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f34:	f001 fb2e 	bl	800a594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f38:	4b2d      	ldr	r3, [pc, #180]	; (8008ff0 <prvAddNewTaskToReadyList+0xc4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	4a2c      	ldr	r2, [pc, #176]	; (8008ff0 <prvAddNewTaskToReadyList+0xc4>)
 8008f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f42:	4b2c      	ldr	r3, [pc, #176]	; (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f4a:	4a2a      	ldr	r2, [pc, #168]	; (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f50:	4b27      	ldr	r3, [pc, #156]	; (8008ff0 <prvAddNewTaskToReadyList+0xc4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d110      	bne.n	8008f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f58:	f000 fcc4 	bl	80098e4 <prvInitialiseTaskLists>
 8008f5c:	e00d      	b.n	8008f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f5e:	4b26      	ldr	r3, [pc, #152]	; (8008ff8 <prvAddNewTaskToReadyList+0xcc>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d109      	bne.n	8008f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f66:	4b23      	ldr	r3, [pc, #140]	; (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d802      	bhi.n	8008f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f74:	4a1f      	ldr	r2, [pc, #124]	; (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f7a:	4b20      	ldr	r3, [pc, #128]	; (8008ffc <prvAddNewTaskToReadyList+0xd0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	4a1e      	ldr	r2, [pc, #120]	; (8008ffc <prvAddNewTaskToReadyList+0xd0>)
 8008f82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f84:	4b1d      	ldr	r3, [pc, #116]	; (8008ffc <prvAddNewTaskToReadyList+0xd0>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <prvAddNewTaskToReadyList+0xd4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d903      	bls.n	8008fa0 <prvAddNewTaskToReadyList+0x74>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	4a18      	ldr	r2, [pc, #96]	; (8009000 <prvAddNewTaskToReadyList+0xd4>)
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4a15      	ldr	r2, [pc, #84]	; (8009004 <prvAddNewTaskToReadyList+0xd8>)
 8008fae:	441a      	add	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7ff f8fd 	bl	80081b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fbc:	f001 fb1a 	bl	800a5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fc0:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <prvAddNewTaskToReadyList+0xcc>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00e      	beq.n	8008fe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d207      	bcs.n	8008fe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fd6:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <prvAddNewTaskToReadyList+0xdc>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20001e8c 	.word	0x20001e8c
 8008ff4:	200019b8 	.word	0x200019b8
 8008ff8:	20001e98 	.word	0x20001e98
 8008ffc:	20001ea8 	.word	0x20001ea8
 8009000:	20001e94 	.word	0x20001e94
 8009004:	200019bc 	.word	0x200019bc
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d017      	beq.n	800904e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <vTaskDelay+0x60>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <vTaskDelay+0x30>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	60bb      	str	r3, [r7, #8]
}
 8009038:	bf00      	nop
 800903a:	e7fe      	b.n	800903a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800903c:	f000 f88a 	bl	8009154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009040:	2100      	movs	r1, #0
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fdb4 	bl	8009bb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009048:	f000 f892 	bl	8009170 <xTaskResumeAll>
 800904c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d107      	bne.n	8009064 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009054:	4b06      	ldr	r3, [pc, #24]	; (8009070 <vTaskDelay+0x64>)
 8009056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009064:	bf00      	nop
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20001eb4 	.word	0x20001eb4
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08a      	sub	sp, #40	; 0x28
 8009078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009082:	463a      	mov	r2, r7
 8009084:	1d39      	adds	r1, r7, #4
 8009086:	f107 0308 	add.w	r3, r7, #8
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fe26 	bl	8007cdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	9202      	str	r2, [sp, #8]
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	2300      	movs	r3, #0
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	2300      	movs	r3, #0
 80090a0:	460a      	mov	r2, r1
 80090a2:	4924      	ldr	r1, [pc, #144]	; (8009134 <vTaskStartScheduler+0xc0>)
 80090a4:	4824      	ldr	r0, [pc, #144]	; (8009138 <vTaskStartScheduler+0xc4>)
 80090a6:	f7ff fdf9 	bl	8008c9c <xTaskCreateStatic>
 80090aa:	4603      	mov	r3, r0
 80090ac:	4a23      	ldr	r2, [pc, #140]	; (800913c <vTaskStartScheduler+0xc8>)
 80090ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090b0:	4b22      	ldr	r3, [pc, #136]	; (800913c <vTaskStartScheduler+0xc8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090b8:	2301      	movs	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
 80090bc:	e001      	b.n	80090c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d102      	bne.n	80090ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090c8:	f000 fdc6 	bl	8009c58 <xTimerCreateTimerTask>
 80090cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d11b      	bne.n	800910c <vTaskStartScheduler+0x98>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	613b      	str	r3, [r7, #16]
}
 80090e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090e8:	4b15      	ldr	r3, [pc, #84]	; (8009140 <vTaskStartScheduler+0xcc>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3354      	adds	r3, #84	; 0x54
 80090ee:	4a15      	ldr	r2, [pc, #84]	; (8009144 <vTaskStartScheduler+0xd0>)
 80090f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090f2:	4b15      	ldr	r3, [pc, #84]	; (8009148 <vTaskStartScheduler+0xd4>)
 80090f4:	f04f 32ff 	mov.w	r2, #4294967295
 80090f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <vTaskStartScheduler+0xd8>)
 80090fc:	2201      	movs	r2, #1
 80090fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009100:	4b13      	ldr	r3, [pc, #76]	; (8009150 <vTaskStartScheduler+0xdc>)
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009106:	f001 f9a3 	bl	800a450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800910a:	e00e      	b.n	800912a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009112:	d10a      	bne.n	800912a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	60fb      	str	r3, [r7, #12]
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <vTaskStartScheduler+0xb4>
}
 800912a:	bf00      	nop
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	0800bdfc 	.word	0x0800bdfc
 8009138:	080098b5 	.word	0x080098b5
 800913c:	20001eb0 	.word	0x20001eb0
 8009140:	200019b8 	.word	0x200019b8
 8009144:	200001a0 	.word	0x200001a0
 8009148:	20001eac 	.word	0x20001eac
 800914c:	20001e98 	.word	0x20001e98
 8009150:	20001e90 	.word	0x20001e90

08009154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009158:	4b04      	ldr	r3, [pc, #16]	; (800916c <vTaskSuspendAll+0x18>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3301      	adds	r3, #1
 800915e:	4a03      	ldr	r2, [pc, #12]	; (800916c <vTaskSuspendAll+0x18>)
 8009160:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009162:	bf00      	nop
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	20001eb4 	.word	0x20001eb4

08009170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800917e:	4b42      	ldr	r3, [pc, #264]	; (8009288 <xTaskResumeAll+0x118>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <xTaskResumeAll+0x2c>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	603b      	str	r3, [r7, #0]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800919c:	f001 f9fa 	bl	800a594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091a0:	4b39      	ldr	r3, [pc, #228]	; (8009288 <xTaskResumeAll+0x118>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	4a38      	ldr	r2, [pc, #224]	; (8009288 <xTaskResumeAll+0x118>)
 80091a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091aa:	4b37      	ldr	r3, [pc, #220]	; (8009288 <xTaskResumeAll+0x118>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d162      	bne.n	8009278 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091b2:	4b36      	ldr	r3, [pc, #216]	; (800928c <xTaskResumeAll+0x11c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d05e      	beq.n	8009278 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091ba:	e02f      	b.n	800921c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091bc:	4b34      	ldr	r3, [pc, #208]	; (8009290 <xTaskResumeAll+0x120>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3318      	adds	r3, #24
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff f851 	bl	8008270 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff f84c 	bl	8008270 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4b2d      	ldr	r3, [pc, #180]	; (8009294 <xTaskResumeAll+0x124>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d903      	bls.n	80091ec <xTaskResumeAll+0x7c>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	4a2a      	ldr	r2, [pc, #168]	; (8009294 <xTaskResumeAll+0x124>)
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4a27      	ldr	r2, [pc, #156]	; (8009298 <xTaskResumeAll+0x128>)
 80091fa:	441a      	add	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f7fe ffd7 	bl	80081b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920c:	4b23      	ldr	r3, [pc, #140]	; (800929c <xTaskResumeAll+0x12c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	429a      	cmp	r2, r3
 8009214:	d302      	bcc.n	800921c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009216:	4b22      	ldr	r3, [pc, #136]	; (80092a0 <xTaskResumeAll+0x130>)
 8009218:	2201      	movs	r2, #1
 800921a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800921c:	4b1c      	ldr	r3, [pc, #112]	; (8009290 <xTaskResumeAll+0x120>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1cb      	bne.n	80091bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800922a:	f000 fbfd 	bl	8009a28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800922e:	4b1d      	ldr	r3, [pc, #116]	; (80092a4 <xTaskResumeAll+0x134>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d010      	beq.n	800925c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800923a:	f000 f847 	bl	80092cc <xTaskIncrementTick>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009244:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <xTaskResumeAll+0x130>)
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3b01      	subs	r3, #1
 800924e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f1      	bne.n	800923a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009256:	4b13      	ldr	r3, [pc, #76]	; (80092a4 <xTaskResumeAll+0x134>)
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800925c:	4b10      	ldr	r3, [pc, #64]	; (80092a0 <xTaskResumeAll+0x130>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d009      	beq.n	8009278 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009264:	2301      	movs	r3, #1
 8009266:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009268:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <xTaskResumeAll+0x138>)
 800926a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009278:	f001 f9bc 	bl	800a5f4 <vPortExitCritical>

	return xAlreadyYielded;
 800927c:	68bb      	ldr	r3, [r7, #8]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20001eb4 	.word	0x20001eb4
 800928c:	20001e8c 	.word	0x20001e8c
 8009290:	20001e4c 	.word	0x20001e4c
 8009294:	20001e94 	.word	0x20001e94
 8009298:	200019bc 	.word	0x200019bc
 800929c:	200019b8 	.word	0x200019b8
 80092a0:	20001ea0 	.word	0x20001ea0
 80092a4:	20001e9c 	.word	0x20001e9c
 80092a8:	e000ed04 	.word	0xe000ed04

080092ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092b2:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <xTaskGetTickCount+0x1c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092b8:	687b      	ldr	r3, [r7, #4]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	20001e90 	.word	0x20001e90

080092cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092d2:	2300      	movs	r3, #0
 80092d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092d6:	4b4f      	ldr	r3, [pc, #316]	; (8009414 <xTaskIncrementTick+0x148>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 808f 	bne.w	80093fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092e0:	4b4d      	ldr	r3, [pc, #308]	; (8009418 <xTaskIncrementTick+0x14c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092e8:	4a4b      	ldr	r2, [pc, #300]	; (8009418 <xTaskIncrementTick+0x14c>)
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d120      	bne.n	8009336 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092f4:	4b49      	ldr	r3, [pc, #292]	; (800941c <xTaskIncrementTick+0x150>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <xTaskIncrementTick+0x48>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	603b      	str	r3, [r7, #0]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <xTaskIncrementTick+0x46>
 8009314:	4b41      	ldr	r3, [pc, #260]	; (800941c <xTaskIncrementTick+0x150>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	4b41      	ldr	r3, [pc, #260]	; (8009420 <xTaskIncrementTick+0x154>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a3f      	ldr	r2, [pc, #252]	; (800941c <xTaskIncrementTick+0x150>)
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	4a3f      	ldr	r2, [pc, #252]	; (8009420 <xTaskIncrementTick+0x154>)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	4b3e      	ldr	r3, [pc, #248]	; (8009424 <xTaskIncrementTick+0x158>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3301      	adds	r3, #1
 800932e:	4a3d      	ldr	r2, [pc, #244]	; (8009424 <xTaskIncrementTick+0x158>)
 8009330:	6013      	str	r3, [r2, #0]
 8009332:	f000 fb79 	bl	8009a28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009336:	4b3c      	ldr	r3, [pc, #240]	; (8009428 <xTaskIncrementTick+0x15c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	429a      	cmp	r2, r3
 800933e:	d349      	bcc.n	80093d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009340:	4b36      	ldr	r3, [pc, #216]	; (800941c <xTaskIncrementTick+0x150>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d104      	bne.n	8009354 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800934a:	4b37      	ldr	r3, [pc, #220]	; (8009428 <xTaskIncrementTick+0x15c>)
 800934c:	f04f 32ff 	mov.w	r2, #4294967295
 8009350:	601a      	str	r2, [r3, #0]
					break;
 8009352:	e03f      	b.n	80093d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009354:	4b31      	ldr	r3, [pc, #196]	; (800941c <xTaskIncrementTick+0x150>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	429a      	cmp	r2, r3
 800936a:	d203      	bcs.n	8009374 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800936c:	4a2e      	ldr	r2, [pc, #184]	; (8009428 <xTaskIncrementTick+0x15c>)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009372:	e02f      	b.n	80093d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	3304      	adds	r3, #4
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe ff79 	bl	8008270 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	d004      	beq.n	8009390 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	3318      	adds	r3, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f7fe ff70 	bl	8008270 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	4b25      	ldr	r3, [pc, #148]	; (800942c <xTaskIncrementTick+0x160>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d903      	bls.n	80093a4 <xTaskIncrementTick+0xd8>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	4a22      	ldr	r2, [pc, #136]	; (800942c <xTaskIncrementTick+0x160>)
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4a1f      	ldr	r2, [pc, #124]	; (8009430 <xTaskIncrementTick+0x164>)
 80093b2:	441a      	add	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	3304      	adds	r3, #4
 80093b8:	4619      	mov	r1, r3
 80093ba:	4610      	mov	r0, r2
 80093bc:	f7fe fefb 	bl	80081b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	4b1b      	ldr	r3, [pc, #108]	; (8009434 <xTaskIncrementTick+0x168>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d3b8      	bcc.n	8009340 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80093ce:	2301      	movs	r3, #1
 80093d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093d2:	e7b5      	b.n	8009340 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093d4:	4b17      	ldr	r3, [pc, #92]	; (8009434 <xTaskIncrementTick+0x168>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093da:	4915      	ldr	r1, [pc, #84]	; (8009430 <xTaskIncrementTick+0x164>)
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	440b      	add	r3, r1
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d901      	bls.n	80093f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80093ec:	2301      	movs	r3, #1
 80093ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <xTaskIncrementTick+0x16c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80093f8:	2301      	movs	r3, #1
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	e004      	b.n	8009408 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093fe:	4b0f      	ldr	r3, [pc, #60]	; (800943c <xTaskIncrementTick+0x170>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	4a0d      	ldr	r2, [pc, #52]	; (800943c <xTaskIncrementTick+0x170>)
 8009406:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009408:	697b      	ldr	r3, [r7, #20]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20001eb4 	.word	0x20001eb4
 8009418:	20001e90 	.word	0x20001e90
 800941c:	20001e44 	.word	0x20001e44
 8009420:	20001e48 	.word	0x20001e48
 8009424:	20001ea4 	.word	0x20001ea4
 8009428:	20001eac 	.word	0x20001eac
 800942c:	20001e94 	.word	0x20001e94
 8009430:	200019bc 	.word	0x200019bc
 8009434:	200019b8 	.word	0x200019b8
 8009438:	20001ea0 	.word	0x20001ea0
 800943c:	20001e9c 	.word	0x20001e9c

08009440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009446:	4b2a      	ldr	r3, [pc, #168]	; (80094f0 <vTaskSwitchContext+0xb0>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800944e:	4b29      	ldr	r3, [pc, #164]	; (80094f4 <vTaskSwitchContext+0xb4>)
 8009450:	2201      	movs	r2, #1
 8009452:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009454:	e046      	b.n	80094e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009456:	4b27      	ldr	r3, [pc, #156]	; (80094f4 <vTaskSwitchContext+0xb4>)
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945c:	4b26      	ldr	r3, [pc, #152]	; (80094f8 <vTaskSwitchContext+0xb8>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	e010      	b.n	8009486 <vTaskSwitchContext+0x46>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10a      	bne.n	8009480 <vTaskSwitchContext+0x40>
	__asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	607b      	str	r3, [r7, #4]
}
 800947c:	bf00      	nop
 800947e:	e7fe      	b.n	800947e <vTaskSwitchContext+0x3e>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3b01      	subs	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	491d      	ldr	r1, [pc, #116]	; (80094fc <vTaskSwitchContext+0xbc>)
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0e4      	beq.n	8009464 <vTaskSwitchContext+0x24>
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4a15      	ldr	r2, [pc, #84]	; (80094fc <vTaskSwitchContext+0xbc>)
 80094a6:	4413      	add	r3, r2
 80094a8:	60bb      	str	r3, [r7, #8]
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	605a      	str	r2, [r3, #4]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	3308      	adds	r3, #8
 80094bc:	429a      	cmp	r2, r3
 80094be:	d104      	bne.n	80094ca <vTaskSwitchContext+0x8a>
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	605a      	str	r2, [r3, #4]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	4a0b      	ldr	r2, [pc, #44]	; (8009500 <vTaskSwitchContext+0xc0>)
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	4a08      	ldr	r2, [pc, #32]	; (80094f8 <vTaskSwitchContext+0xb8>)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094da:	4b09      	ldr	r3, [pc, #36]	; (8009500 <vTaskSwitchContext+0xc0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3354      	adds	r3, #84	; 0x54
 80094e0:	4a08      	ldr	r2, [pc, #32]	; (8009504 <vTaskSwitchContext+0xc4>)
 80094e2:	6013      	str	r3, [r2, #0]
}
 80094e4:	bf00      	nop
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	20001eb4 	.word	0x20001eb4
 80094f4:	20001ea0 	.word	0x20001ea0
 80094f8:	20001e94 	.word	0x20001e94
 80094fc:	200019bc 	.word	0x200019bc
 8009500:	200019b8 	.word	0x200019b8
 8009504:	200001a0 	.word	0x200001a0

08009508 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	60fb      	str	r3, [r7, #12]
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800952e:	4b07      	ldr	r3, [pc, #28]	; (800954c <vTaskPlaceOnEventList+0x44>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3318      	adds	r3, #24
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fe fe61 	bl	80081fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800953c:	2101      	movs	r1, #1
 800953e:	6838      	ldr	r0, [r7, #0]
 8009540:	f000 fb36 	bl	8009bb0 <prvAddCurrentTaskToDelayedList>
}
 8009544:	bf00      	nop
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	200019b8 	.word	0x200019b8

08009550 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10a      	bne.n	8009578 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	617b      	str	r3, [r7, #20]
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009578:	4b11      	ldr	r3, [pc, #68]	; (80095c0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	613b      	str	r3, [r7, #16]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009596:	4b0b      	ldr	r3, [pc, #44]	; (80095c4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80095a0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095a2:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3318      	adds	r3, #24
 80095a8:	4619      	mov	r1, r3
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f7fe fe03 	bl	80081b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095b0:	2101      	movs	r1, #1
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fafc 	bl	8009bb0 <prvAddCurrentTaskToDelayedList>
}
 80095b8:	bf00      	nop
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20001eb4 	.word	0x20001eb4
 80095c4:	200019b8 	.word	0x200019b8

080095c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10a      	bne.n	80095f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	617b      	str	r3, [r7, #20]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095f0:	4b0a      	ldr	r3, [pc, #40]	; (800961c <vTaskPlaceOnEventListRestricted+0x54>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3318      	adds	r3, #24
 80095f6:	4619      	mov	r1, r3
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7fe fddc 	bl	80081b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009604:	f04f 33ff 	mov.w	r3, #4294967295
 8009608:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	68b8      	ldr	r0, [r7, #8]
 800960e:	f000 facf 	bl	8009bb0 <prvAddCurrentTaskToDelayedList>
	}
 8009612:	bf00      	nop
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200019b8 	.word	0x200019b8

08009620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	60fb      	str	r3, [r7, #12]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	3318      	adds	r3, #24
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fe0d 	bl	8008270 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009656:	4b1e      	ldr	r3, [pc, #120]	; (80096d0 <xTaskRemoveFromEventList+0xb0>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d11d      	bne.n	800969a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3304      	adds	r3, #4
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fe04 	bl	8008270 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966c:	4b19      	ldr	r3, [pc, #100]	; (80096d4 <xTaskRemoveFromEventList+0xb4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <xTaskRemoveFromEventList+0x5c>
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	4a16      	ldr	r2, [pc, #88]	; (80096d4 <xTaskRemoveFromEventList+0xb4>)
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4a13      	ldr	r2, [pc, #76]	; (80096d8 <xTaskRemoveFromEventList+0xb8>)
 800968a:	441a      	add	r2, r3
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	3304      	adds	r3, #4
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7fe fd8f 	bl	80081b6 <vListInsertEnd>
 8009698:	e005      	b.n	80096a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	3318      	adds	r3, #24
 800969e:	4619      	mov	r1, r3
 80096a0:	480e      	ldr	r0, [pc, #56]	; (80096dc <xTaskRemoveFromEventList+0xbc>)
 80096a2:	f7fe fd88 	bl	80081b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096aa:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <xTaskRemoveFromEventList+0xc0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d905      	bls.n	80096c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <xTaskRemoveFromEventList+0xc4>)
 80096ba:	2201      	movs	r2, #1
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	e001      	b.n	80096c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096c0:	2300      	movs	r3, #0
 80096c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096c4:	697b      	ldr	r3, [r7, #20]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20001eb4 	.word	0x20001eb4
 80096d4:	20001e94 	.word	0x20001e94
 80096d8:	200019bc 	.word	0x200019bc
 80096dc:	20001e4c 	.word	0x20001e4c
 80096e0:	200019b8 	.word	0x200019b8
 80096e4:	20001ea0 	.word	0x20001ea0

080096e8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80096f2:	4b29      	ldr	r3, [pc, #164]	; (8009798 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	613b      	str	r3, [r7, #16]
}
 800970c:	bf00      	nop
 800970e:	e7fe      	b.n	800970e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60fb      	str	r3, [r7, #12]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7fe fd97 	bl	8008270 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	3304      	adds	r3, #4
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe fd92 	bl	8008270 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009750:	4b12      	ldr	r3, [pc, #72]	; (800979c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d903      	bls.n	8009760 <vTaskRemoveFromUnorderedEventList+0x78>
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	4a0f      	ldr	r2, [pc, #60]	; (800979c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4a0c      	ldr	r2, [pc, #48]	; (80097a0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800976e:	441a      	add	r2, r3
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	3304      	adds	r3, #4
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fe fd1d 	bl	80081b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	4b08      	ldr	r3, [pc, #32]	; (80097a4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009786:	429a      	cmp	r2, r3
 8009788:	d902      	bls.n	8009790 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800978c:	2201      	movs	r2, #1
 800978e:	601a      	str	r2, [r3, #0]
	}
}
 8009790:	bf00      	nop
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20001eb4 	.word	0x20001eb4
 800979c:	20001e94 	.word	0x20001e94
 80097a0:	200019bc 	.word	0x200019bc
 80097a4:	200019b8 	.word	0x200019b8
 80097a8:	20001ea0 	.word	0x20001ea0

080097ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097b4:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <vTaskInternalSetTimeOutState+0x24>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097bc:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <vTaskInternalSetTimeOutState+0x28>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	605a      	str	r2, [r3, #4]
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	20001ea4 	.word	0x20001ea4
 80097d4:	20001e90 	.word	0x20001e90

080097d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	613b      	str	r3, [r7, #16]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10a      	bne.n	800981a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	60fb      	str	r3, [r7, #12]
}
 8009816:	bf00      	nop
 8009818:	e7fe      	b.n	8009818 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800981a:	f000 febb 	bl	800a594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800981e:	4b1d      	ldr	r3, [pc, #116]	; (8009894 <xTaskCheckForTimeOut+0xbc>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009836:	d102      	bne.n	800983e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
 800983c:	e023      	b.n	8009886 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <xTaskCheckForTimeOut+0xc0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d007      	beq.n	800985a <xTaskCheckForTimeOut+0x82>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	429a      	cmp	r2, r3
 8009852:	d302      	bcc.n	800985a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009854:	2301      	movs	r3, #1
 8009856:	61fb      	str	r3, [r7, #28]
 8009858:	e015      	b.n	8009886 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	429a      	cmp	r2, r3
 8009862:	d20b      	bcs.n	800987c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	1ad2      	subs	r2, r2, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff ff9b 	bl	80097ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009876:	2300      	movs	r3, #0
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	e004      	b.n	8009886 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2200      	movs	r2, #0
 8009880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009882:	2301      	movs	r3, #1
 8009884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009886:	f000 feb5 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 800988a:	69fb      	ldr	r3, [r7, #28]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3720      	adds	r7, #32
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20001e90 	.word	0x20001e90
 8009898:	20001ea4 	.word	0x20001ea4

0800989c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098a0:	4b03      	ldr	r3, [pc, #12]	; (80098b0 <vTaskMissedYield+0x14>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	601a      	str	r2, [r3, #0]
}
 80098a6:	bf00      	nop
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	20001ea0 	.word	0x20001ea0

080098b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098bc:	f000 f852 	bl	8009964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098c0:	4b06      	ldr	r3, [pc, #24]	; (80098dc <prvIdleTask+0x28>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d9f9      	bls.n	80098bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80098c8:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <prvIdleTask+0x2c>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098d8:	e7f0      	b.n	80098bc <prvIdleTask+0x8>
 80098da:	bf00      	nop
 80098dc:	200019bc 	.word	0x200019bc
 80098e0:	e000ed04 	.word	0xe000ed04

080098e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ea:	2300      	movs	r3, #0
 80098ec:	607b      	str	r3, [r7, #4]
 80098ee:	e00c      	b.n	800990a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4a12      	ldr	r2, [pc, #72]	; (8009944 <prvInitialiseTaskLists+0x60>)
 80098fc:	4413      	add	r3, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fe fc2c 	bl	800815c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3301      	adds	r3, #1
 8009908:	607b      	str	r3, [r7, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b37      	cmp	r3, #55	; 0x37
 800990e:	d9ef      	bls.n	80098f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009910:	480d      	ldr	r0, [pc, #52]	; (8009948 <prvInitialiseTaskLists+0x64>)
 8009912:	f7fe fc23 	bl	800815c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009916:	480d      	ldr	r0, [pc, #52]	; (800994c <prvInitialiseTaskLists+0x68>)
 8009918:	f7fe fc20 	bl	800815c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800991c:	480c      	ldr	r0, [pc, #48]	; (8009950 <prvInitialiseTaskLists+0x6c>)
 800991e:	f7fe fc1d 	bl	800815c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009922:	480c      	ldr	r0, [pc, #48]	; (8009954 <prvInitialiseTaskLists+0x70>)
 8009924:	f7fe fc1a 	bl	800815c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009928:	480b      	ldr	r0, [pc, #44]	; (8009958 <prvInitialiseTaskLists+0x74>)
 800992a:	f7fe fc17 	bl	800815c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <prvInitialiseTaskLists+0x78>)
 8009930:	4a05      	ldr	r2, [pc, #20]	; (8009948 <prvInitialiseTaskLists+0x64>)
 8009932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009934:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <prvInitialiseTaskLists+0x7c>)
 8009936:	4a05      	ldr	r2, [pc, #20]	; (800994c <prvInitialiseTaskLists+0x68>)
 8009938:	601a      	str	r2, [r3, #0]
}
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	200019bc 	.word	0x200019bc
 8009948:	20001e1c 	.word	0x20001e1c
 800994c:	20001e30 	.word	0x20001e30
 8009950:	20001e4c 	.word	0x20001e4c
 8009954:	20001e60 	.word	0x20001e60
 8009958:	20001e78 	.word	0x20001e78
 800995c:	20001e44 	.word	0x20001e44
 8009960:	20001e48 	.word	0x20001e48

08009964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800996a:	e019      	b.n	80099a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800996c:	f000 fe12 	bl	800a594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009970:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <prvCheckTasksWaitingTermination+0x50>)
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	3304      	adds	r3, #4
 800997c:	4618      	mov	r0, r3
 800997e:	f7fe fc77 	bl	8008270 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009982:	4b0d      	ldr	r3, [pc, #52]	; (80099b8 <prvCheckTasksWaitingTermination+0x54>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3b01      	subs	r3, #1
 8009988:	4a0b      	ldr	r2, [pc, #44]	; (80099b8 <prvCheckTasksWaitingTermination+0x54>)
 800998a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800998c:	4b0b      	ldr	r3, [pc, #44]	; (80099bc <prvCheckTasksWaitingTermination+0x58>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3b01      	subs	r3, #1
 8009992:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <prvCheckTasksWaitingTermination+0x58>)
 8009994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009996:	f000 fe2d 	bl	800a5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f810 	bl	80099c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <prvCheckTasksWaitingTermination+0x58>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e1      	bne.n	800996c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20001e60 	.word	0x20001e60
 80099b8:	20001e8c 	.word	0x20001e8c
 80099bc:	20001e74 	.word	0x20001e74

080099c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3354      	adds	r3, #84	; 0x54
 80099cc:	4618      	mov	r0, r3
 80099ce:	f002 f98b 	bl	800bce8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d108      	bne.n	80099ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 ffc5 	bl	800a970 <vPortFree>
				vPortFree( pxTCB );
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 ffc2 	bl	800a970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099ec:	e018      	b.n	8009a20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d103      	bne.n	8009a00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 ffb9 	bl	800a970 <vPortFree>
	}
 80099fe:	e00f      	b.n	8009a20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d00a      	beq.n	8009a20 <prvDeleteTCB+0x60>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	60fb      	str	r3, [r7, #12]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <prvDeleteTCB+0x5e>
	}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a2e:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <prvResetNextTaskUnblockTime+0x38>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d104      	bne.n	8009a42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a38:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <prvResetNextTaskUnblockTime+0x3c>)
 8009a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a40:	e008      	b.n	8009a54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a42:	4b07      	ldr	r3, [pc, #28]	; (8009a60 <prvResetNextTaskUnblockTime+0x38>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	4a04      	ldr	r2, [pc, #16]	; (8009a64 <prvResetNextTaskUnblockTime+0x3c>)
 8009a52:	6013      	str	r3, [r2, #0]
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	20001e44 	.word	0x20001e44
 8009a64:	20001eac 	.word	0x20001eac

08009a68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a6e:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <xTaskGetSchedulerState+0x34>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a76:	2301      	movs	r3, #1
 8009a78:	607b      	str	r3, [r7, #4]
 8009a7a:	e008      	b.n	8009a8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a7c:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <xTaskGetSchedulerState+0x38>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a84:	2302      	movs	r3, #2
 8009a86:	607b      	str	r3, [r7, #4]
 8009a88:	e001      	b.n	8009a8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a8e:	687b      	ldr	r3, [r7, #4]
	}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20001e98 	.word	0x20001e98
 8009aa0:	20001eb4 	.word	0x20001eb4

08009aa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d056      	beq.n	8009b68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009aba:	4b2e      	ldr	r3, [pc, #184]	; (8009b74 <xTaskPriorityDisinherit+0xd0>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d00a      	beq.n	8009ada <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	60fb      	str	r3, [r7, #12]
}
 8009ad6:	bf00      	nop
 8009ad8:	e7fe      	b.n	8009ad8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	60bb      	str	r3, [r7, #8]
}
 8009af4:	bf00      	nop
 8009af6:	e7fe      	b.n	8009af6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afc:	1e5a      	subs	r2, r3, #1
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d02c      	beq.n	8009b68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d128      	bne.n	8009b68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fba8 	bl	8008270 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b38:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <xTaskPriorityDisinherit+0xd4>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d903      	bls.n	8009b48 <xTaskPriorityDisinherit+0xa4>
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	4a0c      	ldr	r2, [pc, #48]	; (8009b78 <xTaskPriorityDisinherit+0xd4>)
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4a09      	ldr	r2, [pc, #36]	; (8009b7c <xTaskPriorityDisinherit+0xd8>)
 8009b56:	441a      	add	r2, r3
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4610      	mov	r0, r2
 8009b60:	f7fe fb29 	bl	80081b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b64:	2301      	movs	r3, #1
 8009b66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b68:	697b      	ldr	r3, [r7, #20]
	}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200019b8 	.word	0x200019b8
 8009b78:	20001e94 	.word	0x20001e94
 8009b7c:	200019bc 	.word	0x200019bc

08009b80 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <uxTaskResetEventItemValue+0x2c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b8e:	4b07      	ldr	r3, [pc, #28]	; (8009bac <uxTaskResetEventItemValue+0x2c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <uxTaskResetEventItemValue+0x2c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009b9c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009b9e:	687b      	ldr	r3, [r7, #4]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	200019b8 	.word	0x200019b8

08009bb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bba:	4b21      	ldr	r3, [pc, #132]	; (8009c40 <prvAddCurrentTaskToDelayedList+0x90>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bc0:	4b20      	ldr	r3, [pc, #128]	; (8009c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fb52 	bl	8008270 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d10a      	bne.n	8009bea <prvAddCurrentTaskToDelayedList+0x3a>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d007      	beq.n	8009bea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bda:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4819      	ldr	r0, [pc, #100]	; (8009c48 <prvAddCurrentTaskToDelayedList+0x98>)
 8009be4:	f7fe fae7 	bl	80081b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009be8:	e026      	b.n	8009c38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4413      	add	r3, r2
 8009bf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bf2:	4b14      	ldr	r3, [pc, #80]	; (8009c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d209      	bcs.n	8009c16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c02:	4b12      	ldr	r3, [pc, #72]	; (8009c4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4610      	mov	r0, r2
 8009c10:	f7fe faf5 	bl	80081fe <vListInsert>
}
 8009c14:	e010      	b.n	8009c38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c16:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4619      	mov	r1, r3
 8009c22:	4610      	mov	r0, r2
 8009c24:	f7fe faeb 	bl	80081fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d202      	bcs.n	8009c38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c32:	4a08      	ldr	r2, [pc, #32]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	6013      	str	r3, [r2, #0]
}
 8009c38:	bf00      	nop
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	20001e90 	.word	0x20001e90
 8009c44:	200019b8 	.word	0x200019b8
 8009c48:	20001e78 	.word	0x20001e78
 8009c4c:	20001e48 	.word	0x20001e48
 8009c50:	20001e44 	.word	0x20001e44
 8009c54:	20001eac 	.word	0x20001eac

08009c58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c62:	f000 fb07 	bl	800a274 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c66:	4b1c      	ldr	r3, [pc, #112]	; (8009cd8 <xTimerCreateTimerTask+0x80>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d021      	beq.n	8009cb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c76:	1d3a      	adds	r2, r7, #4
 8009c78:	f107 0108 	add.w	r1, r7, #8
 8009c7c:	f107 030c 	add.w	r3, r7, #12
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe f845 	bl	8007d10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	9202      	str	r2, [sp, #8]
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	2302      	movs	r3, #2
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	2300      	movs	r3, #0
 8009c96:	460a      	mov	r2, r1
 8009c98:	4910      	ldr	r1, [pc, #64]	; (8009cdc <xTimerCreateTimerTask+0x84>)
 8009c9a:	4811      	ldr	r0, [pc, #68]	; (8009ce0 <xTimerCreateTimerTask+0x88>)
 8009c9c:	f7fe fffe 	bl	8008c9c <xTaskCreateStatic>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	4a10      	ldr	r2, [pc, #64]	; (8009ce4 <xTimerCreateTimerTask+0x8c>)
 8009ca4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <xTimerCreateTimerTask+0x8c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	613b      	str	r3, [r7, #16]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009cce:	697b      	ldr	r3, [r7, #20]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	20001ee8 	.word	0x20001ee8
 8009cdc:	0800be04 	.word	0x0800be04
 8009ce0:	08009e1d 	.word	0x08009e1d
 8009ce4:	20001eec 	.word	0x20001eec

08009ce8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08a      	sub	sp, #40	; 0x28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10a      	bne.n	8009d16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	623b      	str	r3, [r7, #32]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d16:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <xTimerGenericCommand+0x98>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d02a      	beq.n	8009d74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2b05      	cmp	r3, #5
 8009d2e:	dc18      	bgt.n	8009d62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d30:	f7ff fe9a 	bl	8009a68 <xTaskGetSchedulerState>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d109      	bne.n	8009d4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d3a:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <xTimerGenericCommand+0x98>)
 8009d3c:	6818      	ldr	r0, [r3, #0]
 8009d3e:	f107 0110 	add.w	r1, r7, #16
 8009d42:	2300      	movs	r3, #0
 8009d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d46:	f7fe fbc1 	bl	80084cc <xQueueGenericSend>
 8009d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d4c:	e012      	b.n	8009d74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d4e:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <xTimerGenericCommand+0x98>)
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f107 0110 	add.w	r1, r7, #16
 8009d56:	2300      	movs	r3, #0
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f7fe fbb7 	bl	80084cc <xQueueGenericSend>
 8009d5e:	6278      	str	r0, [r7, #36]	; 0x24
 8009d60:	e008      	b.n	8009d74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <xTimerGenericCommand+0x98>)
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f107 0110 	add.w	r1, r7, #16
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	f7fe fcab 	bl	80086c8 <xQueueGenericSendFromISR>
 8009d72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3728      	adds	r7, #40	; 0x28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20001ee8 	.word	0x20001ee8

08009d84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8e:	4b22      	ldr	r3, [pc, #136]	; (8009e18 <prvProcessExpiredTimer+0x94>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe fa67 	bl	8008270 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d022      	beq.n	8009df6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	699a      	ldr	r2, [r3, #24]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	18d1      	adds	r1, r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	6978      	ldr	r0, [r7, #20]
 8009dbe:	f000 f8d1 	bl	8009f64 <prvInsertTimerInActiveList>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d01f      	beq.n	8009e08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009dc8:	2300      	movs	r3, #0
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6978      	ldr	r0, [r7, #20]
 8009dd4:	f7ff ff88 	bl	8009ce8 <xTimerGenericCommand>
 8009dd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d113      	bne.n	8009e08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	60fb      	str	r3, [r7, #12]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dfc:	f023 0301 	bic.w	r3, r3, #1
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	6978      	ldr	r0, [r7, #20]
 8009e0e:	4798      	blx	r3
}
 8009e10:	bf00      	nop
 8009e12:	3718      	adds	r7, #24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20001ee0 	.word	0x20001ee0

08009e1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e24:	f107 0308 	add.w	r3, r7, #8
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 f857 	bl	8009edc <prvGetNextExpireTime>
 8009e2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	4619      	mov	r1, r3
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f000 f803 	bl	8009e40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e3a:	f000 f8d5 	bl	8009fe8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e3e:	e7f1      	b.n	8009e24 <prvTimerTask+0x8>

08009e40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e4a:	f7ff f983 	bl	8009154 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e4e:	f107 0308 	add.w	r3, r7, #8
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f866 	bl	8009f24 <prvSampleTimeNow>
 8009e58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d130      	bne.n	8009ec2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10a      	bne.n	8009e7c <prvProcessTimerOrBlockTask+0x3c>
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d806      	bhi.n	8009e7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e6e:	f7ff f97f 	bl	8009170 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e72:	68f9      	ldr	r1, [r7, #12]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff ff85 	bl	8009d84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e7a:	e024      	b.n	8009ec6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d008      	beq.n	8009e94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e82:	4b13      	ldr	r3, [pc, #76]	; (8009ed0 <prvProcessTimerOrBlockTask+0x90>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <prvProcessTimerOrBlockTask+0x50>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e000      	b.n	8009e92 <prvProcessTimerOrBlockTask+0x52>
 8009e90:	2300      	movs	r3, #0
 8009e92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e94:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <prvProcessTimerOrBlockTask+0x94>)
 8009e96:	6818      	ldr	r0, [r3, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f7fe fec7 	bl	8008c34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ea6:	f7ff f963 	bl	8009170 <xTaskResumeAll>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10a      	bne.n	8009ec6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009eb0:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <prvProcessTimerOrBlockTask+0x98>)
 8009eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	f3bf 8f6f 	isb	sy
}
 8009ec0:	e001      	b.n	8009ec6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ec2:	f7ff f955 	bl	8009170 <xTaskResumeAll>
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20001ee4 	.word	0x20001ee4
 8009ed4:	20001ee8 	.word	0x20001ee8
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ee4:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <prvGetNextExpireTime+0x44>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <prvGetNextExpireTime+0x16>
 8009eee:	2201      	movs	r2, #1
 8009ef0:	e000      	b.n	8009ef4 <prvGetNextExpireTime+0x18>
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d105      	bne.n	8009f0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <prvGetNextExpireTime+0x44>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	e001      	b.n	8009f10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f10:	68fb      	ldr	r3, [r7, #12]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	20001ee0 	.word	0x20001ee0

08009f24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f2c:	f7ff f9be 	bl	80092ac <xTaskGetTickCount>
 8009f30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f32:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <prvSampleTimeNow+0x3c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d205      	bcs.n	8009f48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f3c:	f000 f936 	bl	800a1ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	e002      	b.n	8009f4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f4e:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <prvSampleTimeNow+0x3c>)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f54:	68fb      	ldr	r3, [r7, #12]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20001ef0 	.word	0x20001ef0

08009f64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f72:	2300      	movs	r3, #0
 8009f74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d812      	bhi.n	8009fb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d302      	bcc.n	8009f9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	e01b      	b.n	8009fd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f9e:	4b10      	ldr	r3, [pc, #64]	; (8009fe0 <prvInsertTimerInActiveList+0x7c>)
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	4610      	mov	r0, r2
 8009faa:	f7fe f928 	bl	80081fe <vListInsert>
 8009fae:	e012      	b.n	8009fd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d206      	bcs.n	8009fc6 <prvInsertTimerInActiveList+0x62>
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d302      	bcc.n	8009fc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	e007      	b.n	8009fd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fc6:	4b07      	ldr	r3, [pc, #28]	; (8009fe4 <prvInsertTimerInActiveList+0x80>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3304      	adds	r3, #4
 8009fce:	4619      	mov	r1, r3
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	f7fe f914 	bl	80081fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fd6:	697b      	ldr	r3, [r7, #20]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20001ee4 	.word	0x20001ee4
 8009fe4:	20001ee0 	.word	0x20001ee0

08009fe8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08e      	sub	sp, #56	; 0x38
 8009fec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fee:	e0ca      	b.n	800a186 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	da18      	bge.n	800a028 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ff6:	1d3b      	adds	r3, r7, #4
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	61fb      	str	r3, [r7, #28]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a01e:	6850      	ldr	r0, [r2, #4]
 800a020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a022:	6892      	ldr	r2, [r2, #8]
 800a024:	4611      	mov	r1, r2
 800a026:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f2c0 80aa 	blt.w	800a184 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	3304      	adds	r3, #4
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe f915 	bl	8008270 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a046:	463b      	mov	r3, r7
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff ff6b 	bl	8009f24 <prvSampleTimeNow>
 800a04e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b09      	cmp	r3, #9
 800a054:	f200 8097 	bhi.w	800a186 <prvProcessReceivedCommands+0x19e>
 800a058:	a201      	add	r2, pc, #4	; (adr r2, 800a060 <prvProcessReceivedCommands+0x78>)
 800a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05e:	bf00      	nop
 800a060:	0800a089 	.word	0x0800a089
 800a064:	0800a089 	.word	0x0800a089
 800a068:	0800a089 	.word	0x0800a089
 800a06c:	0800a0fd 	.word	0x0800a0fd
 800a070:	0800a111 	.word	0x0800a111
 800a074:	0800a15b 	.word	0x0800a15b
 800a078:	0800a089 	.word	0x0800a089
 800a07c:	0800a089 	.word	0x0800a089
 800a080:	0800a0fd 	.word	0x0800a0fd
 800a084:	0800a111 	.word	0x0800a111
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a08e:	f043 0301 	orr.w	r3, r3, #1
 800a092:	b2da      	uxtb	r2, r3
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	18d1      	adds	r1, r2, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a8:	f7ff ff5c 	bl	8009f64 <prvInsertTimerInActiveList>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d069      	beq.n	800a186 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0c0:	f003 0304 	and.w	r3, r3, #4
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d05e      	beq.n	800a186 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	441a      	add	r2, r3
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0da:	f7ff fe05 	bl	8009ce8 <xTimerGenericCommand>
 800a0de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d14f      	bne.n	800a186 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	61bb      	str	r3, [r7, #24]
}
 800a0f8:	bf00      	nop
 800a0fa:	e7fe      	b.n	800a0fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a102:	f023 0301 	bic.w	r3, r3, #1
 800a106:	b2da      	uxtb	r2, r3
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a10e:	e03a      	b.n	800a186 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	617b      	str	r3, [r7, #20]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	18d1      	adds	r1, r2, r3
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a154:	f7ff ff06 	bl	8009f64 <prvInsertTimerInActiveList>
					break;
 800a158:	e015      	b.n	800a186 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d103      	bne.n	800a170 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a16a:	f000 fc01 	bl	800a970 <vPortFree>
 800a16e:	e00a      	b.n	800a186 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a176:	f023 0301 	bic.w	r3, r3, #1
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a182:	e000      	b.n	800a186 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a184:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a186:	4b08      	ldr	r3, [pc, #32]	; (800a1a8 <prvProcessReceivedCommands+0x1c0>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	1d39      	adds	r1, r7, #4
 800a18c:	2200      	movs	r2, #0
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fb36 	bl	8008800 <xQueueReceive>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	f47f af2a 	bne.w	8009ff0 <prvProcessReceivedCommands+0x8>
	}
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	3730      	adds	r7, #48	; 0x30
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20001ee8 	.word	0x20001ee8

0800a1ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b088      	sub	sp, #32
 800a1b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1b2:	e048      	b.n	800a246 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1b4:	4b2d      	ldr	r3, [pc, #180]	; (800a26c <prvSwitchTimerLists+0xc0>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1be:	4b2b      	ldr	r3, [pc, #172]	; (800a26c <prvSwitchTimerLists+0xc0>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe f84f 	bl	8008270 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e0:	f003 0304 	and.w	r3, r3, #4
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d02e      	beq.n	800a246 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d90e      	bls.n	800a218 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a206:	4b19      	ldr	r3, [pc, #100]	; (800a26c <prvSwitchTimerLists+0xc0>)
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3304      	adds	r3, #4
 800a20e:	4619      	mov	r1, r3
 800a210:	4610      	mov	r0, r2
 800a212:	f7fd fff4 	bl	80081fe <vListInsert>
 800a216:	e016      	b.n	800a246 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a218:	2300      	movs	r3, #0
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	2300      	movs	r3, #0
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	2100      	movs	r1, #0
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff fd60 	bl	8009ce8 <xTimerGenericCommand>
 800a228:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	603b      	str	r3, [r7, #0]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a246:	4b09      	ldr	r3, [pc, #36]	; (800a26c <prvSwitchTimerLists+0xc0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1b1      	bne.n	800a1b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a250:	4b06      	ldr	r3, [pc, #24]	; (800a26c <prvSwitchTimerLists+0xc0>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a256:	4b06      	ldr	r3, [pc, #24]	; (800a270 <prvSwitchTimerLists+0xc4>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a04      	ldr	r2, [pc, #16]	; (800a26c <prvSwitchTimerLists+0xc0>)
 800a25c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a25e:	4a04      	ldr	r2, [pc, #16]	; (800a270 <prvSwitchTimerLists+0xc4>)
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	6013      	str	r3, [r2, #0]
}
 800a264:	bf00      	nop
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20001ee0 	.word	0x20001ee0
 800a270:	20001ee4 	.word	0x20001ee4

0800a274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a27a:	f000 f98b 	bl	800a594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a27e:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <prvCheckForValidListAndQueue+0x60>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d120      	bne.n	800a2c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a286:	4814      	ldr	r0, [pc, #80]	; (800a2d8 <prvCheckForValidListAndQueue+0x64>)
 800a288:	f7fd ff68 	bl	800815c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a28c:	4813      	ldr	r0, [pc, #76]	; (800a2dc <prvCheckForValidListAndQueue+0x68>)
 800a28e:	f7fd ff65 	bl	800815c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a292:	4b13      	ldr	r3, [pc, #76]	; (800a2e0 <prvCheckForValidListAndQueue+0x6c>)
 800a294:	4a10      	ldr	r2, [pc, #64]	; (800a2d8 <prvCheckForValidListAndQueue+0x64>)
 800a296:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a298:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <prvCheckForValidListAndQueue+0x70>)
 800a29a:	4a10      	ldr	r2, [pc, #64]	; (800a2dc <prvCheckForValidListAndQueue+0x68>)
 800a29c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	4b11      	ldr	r3, [pc, #68]	; (800a2e8 <prvCheckForValidListAndQueue+0x74>)
 800a2a4:	4a11      	ldr	r2, [pc, #68]	; (800a2ec <prvCheckForValidListAndQueue+0x78>)
 800a2a6:	2110      	movs	r1, #16
 800a2a8:	200a      	movs	r0, #10
 800a2aa:	f7fe f873 	bl	8008394 <xQueueGenericCreateStatic>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4a08      	ldr	r2, [pc, #32]	; (800a2d4 <prvCheckForValidListAndQueue+0x60>)
 800a2b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a2b4:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <prvCheckForValidListAndQueue+0x60>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d005      	beq.n	800a2c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2bc:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <prvCheckForValidListAndQueue+0x60>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	490b      	ldr	r1, [pc, #44]	; (800a2f0 <prvCheckForValidListAndQueue+0x7c>)
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fc8c 	bl	8008be0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2c8:	f000 f994 	bl	800a5f4 <vPortExitCritical>
}
 800a2cc:	bf00      	nop
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20001ee8 	.word	0x20001ee8
 800a2d8:	20001eb8 	.word	0x20001eb8
 800a2dc:	20001ecc 	.word	0x20001ecc
 800a2e0:	20001ee0 	.word	0x20001ee0
 800a2e4:	20001ee4 	.word	0x20001ee4
 800a2e8:	20001f94 	.word	0x20001f94
 800a2ec:	20001ef4 	.word	0x20001ef4
 800a2f0:	0800be0c 	.word	0x0800be0c

0800a2f4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b08a      	sub	sp, #40	; 0x28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a302:	f06f 0301 	mvn.w	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a314:	4b06      	ldr	r3, [pc, #24]	; (800a330 <xTimerPendFunctionCallFromISR+0x3c>)
 800a316:	6818      	ldr	r0, [r3, #0]
 800a318:	f107 0114 	add.w	r1, r7, #20
 800a31c:	2300      	movs	r3, #0
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	f7fe f9d2 	bl	80086c8 <xQueueGenericSendFromISR>
 800a324:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a328:	4618      	mov	r0, r3
 800a32a:	3728      	adds	r7, #40	; 0x28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20001ee8 	.word	0x20001ee8

0800a334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3b04      	subs	r3, #4
 800a344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a34c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3b04      	subs	r3, #4
 800a352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f023 0201 	bic.w	r2, r3, #1
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3b04      	subs	r3, #4
 800a362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a364:	4a0c      	ldr	r2, [pc, #48]	; (800a398 <pxPortInitialiseStack+0x64>)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3b14      	subs	r3, #20
 800a36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3b04      	subs	r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f06f 0202 	mvn.w	r2, #2
 800a382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3b20      	subs	r3, #32
 800a388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a38a:	68fb      	ldr	r3, [r7, #12]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	0800a39d 	.word	0x0800a39d

0800a39c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3a6:	4b12      	ldr	r3, [pc, #72]	; (800a3f0 <prvTaskExitError+0x54>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ae:	d00a      	beq.n	800a3c6 <prvTaskExitError+0x2a>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	60fb      	str	r3, [r7, #12]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <prvTaskExitError+0x28>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60bb      	str	r3, [r7, #8]
}
 800a3d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3da:	bf00      	nop
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0fc      	beq.n	800a3dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3e2:	bf00      	nop
 800a3e4:	bf00      	nop
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	2000000c 	.word	0x2000000c
	...

0800a400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <pxCurrentTCBConst2>)
 800a402:	6819      	ldr	r1, [r3, #0]
 800a404:	6808      	ldr	r0, [r1, #0]
 800a406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40a:	f380 8809 	msr	PSP, r0
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f04f 0000 	mov.w	r0, #0
 800a416:	f380 8811 	msr	BASEPRI, r0
 800a41a:	4770      	bx	lr
 800a41c:	f3af 8000 	nop.w

0800a420 <pxCurrentTCBConst2>:
 800a420:	200019b8 	.word	0x200019b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop

0800a428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a428:	4808      	ldr	r0, [pc, #32]	; (800a44c <prvPortStartFirstTask+0x24>)
 800a42a:	6800      	ldr	r0, [r0, #0]
 800a42c:	6800      	ldr	r0, [r0, #0]
 800a42e:	f380 8808 	msr	MSP, r0
 800a432:	f04f 0000 	mov.w	r0, #0
 800a436:	f380 8814 	msr	CONTROL, r0
 800a43a:	b662      	cpsie	i
 800a43c:	b661      	cpsie	f
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	df00      	svc	0
 800a448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a44a:	bf00      	nop
 800a44c:	e000ed08 	.word	0xe000ed08

0800a450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a456:	4b46      	ldr	r3, [pc, #280]	; (800a570 <xPortStartScheduler+0x120>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a46      	ldr	r2, [pc, #280]	; (800a574 <xPortStartScheduler+0x124>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d10a      	bne.n	800a476 <xPortStartScheduler+0x26>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	613b      	str	r3, [r7, #16]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a476:	4b3e      	ldr	r3, [pc, #248]	; (800a570 <xPortStartScheduler+0x120>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a3f      	ldr	r2, [pc, #252]	; (800a578 <xPortStartScheduler+0x128>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10a      	bne.n	800a496 <xPortStartScheduler+0x46>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a496:	4b39      	ldr	r3, [pc, #228]	; (800a57c <xPortStartScheduler+0x12c>)
 800a498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	4b31      	ldr	r3, [pc, #196]	; (800a580 <xPortStartScheduler+0x130>)
 800a4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4be:	4b31      	ldr	r3, [pc, #196]	; (800a584 <xPortStartScheduler+0x134>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4c4:	e009      	b.n	800a4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a4c6:	4b2f      	ldr	r3, [pc, #188]	; (800a584 <xPortStartScheduler+0x134>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	4a2d      	ldr	r2, [pc, #180]	; (800a584 <xPortStartScheduler+0x134>)
 800a4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b80      	cmp	r3, #128	; 0x80
 800a4e4:	d0ef      	beq.n	800a4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4e6:	4b27      	ldr	r3, [pc, #156]	; (800a584 <xPortStartScheduler+0x134>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f1c3 0307 	rsb	r3, r3, #7
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d00a      	beq.n	800a508 <xPortStartScheduler+0xb8>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60bb      	str	r3, [r7, #8]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a508:	4b1e      	ldr	r3, [pc, #120]	; (800a584 <xPortStartScheduler+0x134>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <xPortStartScheduler+0x134>)
 800a510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a512:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <xPortStartScheduler+0x134>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a51a:	4a1a      	ldr	r2, [pc, #104]	; (800a584 <xPortStartScheduler+0x134>)
 800a51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a526:	4b18      	ldr	r3, [pc, #96]	; (800a588 <xPortStartScheduler+0x138>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a17      	ldr	r2, [pc, #92]	; (800a588 <xPortStartScheduler+0x138>)
 800a52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a532:	4b15      	ldr	r3, [pc, #84]	; (800a588 <xPortStartScheduler+0x138>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a14      	ldr	r2, [pc, #80]	; (800a588 <xPortStartScheduler+0x138>)
 800a538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a53e:	f000 f8dd 	bl	800a6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <xPortStartScheduler+0x13c>)
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a548:	f000 f8fc 	bl	800a744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a54c:	4b10      	ldr	r3, [pc, #64]	; (800a590 <xPortStartScheduler+0x140>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a0f      	ldr	r2, [pc, #60]	; (800a590 <xPortStartScheduler+0x140>)
 800a552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a558:	f7ff ff66 	bl	800a428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a55c:	f7fe ff70 	bl	8009440 <vTaskSwitchContext>
	prvTaskExitError();
 800a560:	f7ff ff1c 	bl	800a39c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	e000ed00 	.word	0xe000ed00
 800a574:	410fc271 	.word	0x410fc271
 800a578:	410fc270 	.word	0x410fc270
 800a57c:	e000e400 	.word	0xe000e400
 800a580:	20001fe4 	.word	0x20001fe4
 800a584:	20001fe8 	.word	0x20001fe8
 800a588:	e000ed20 	.word	0xe000ed20
 800a58c:	2000000c 	.word	0x2000000c
 800a590:	e000ef34 	.word	0xe000ef34

0800a594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	607b      	str	r3, [r7, #4]
}
 800a5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5ae:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d10f      	bne.n	800a5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <vPortEnterCritical+0x5c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	603b      	str	r3, [r7, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <vPortEnterCritical+0x4a>
	}
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	2000000c 	.word	0x2000000c
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5fa:	4b12      	ldr	r3, [pc, #72]	; (800a644 <vPortExitCritical+0x50>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <vPortExitCritical+0x24>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	607b      	str	r3, [r7, #4]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <vPortExitCritical+0x50>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	4a09      	ldr	r2, [pc, #36]	; (800a644 <vPortExitCritical+0x50>)
 800a620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a622:	4b08      	ldr	r3, [pc, #32]	; (800a644 <vPortExitCritical+0x50>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <vPortExitCritical+0x42>
 800a62a:	2300      	movs	r3, #0
 800a62c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	f383 8811 	msr	BASEPRI, r3
}
 800a634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	2000000c 	.word	0x2000000c
	...

0800a650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a650:	f3ef 8009 	mrs	r0, PSP
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <pxCurrentTCBConst>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f01e 0f10 	tst.w	lr, #16
 800a660:	bf08      	it	eq
 800a662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	6010      	str	r0, [r2, #0]
 800a66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a674:	f380 8811 	msr	BASEPRI, r0
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f7fe fede 	bl	8009440 <vTaskSwitchContext>
 800a684:	f04f 0000 	mov.w	r0, #0
 800a688:	f380 8811 	msr	BASEPRI, r0
 800a68c:	bc09      	pop	{r0, r3}
 800a68e:	6819      	ldr	r1, [r3, #0]
 800a690:	6808      	ldr	r0, [r1, #0]
 800a692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a696:	f01e 0f10 	tst.w	lr, #16
 800a69a:	bf08      	it	eq
 800a69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6a0:	f380 8809 	msr	PSP, r0
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	f3af 8000 	nop.w

0800a6b0 <pxCurrentTCBConst>:
 800a6b0:	200019b8 	.word	0x200019b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	607b      	str	r3, [r7, #4]
}
 800a6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6d2:	f7fe fdfb 	bl	80092cc <xTaskIncrementTick>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <xPortSysTickHandler+0x40>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	f383 8811 	msr	BASEPRI, r3
}
 800a6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <vPortSetupTimerInterrupt+0x34>)
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a706:	4b0b      	ldr	r3, [pc, #44]	; (800a734 <vPortSetupTimerInterrupt+0x38>)
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a70c:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <vPortSetupTimerInterrupt+0x3c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a0a      	ldr	r2, [pc, #40]	; (800a73c <vPortSetupTimerInterrupt+0x40>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	099b      	lsrs	r3, r3, #6
 800a718:	4a09      	ldr	r2, [pc, #36]	; (800a740 <vPortSetupTimerInterrupt+0x44>)
 800a71a:	3b01      	subs	r3, #1
 800a71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a71e:	4b04      	ldr	r3, [pc, #16]	; (800a730 <vPortSetupTimerInterrupt+0x34>)
 800a720:	2207      	movs	r2, #7
 800a722:	601a      	str	r2, [r3, #0]
}
 800a724:	bf00      	nop
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	e000e010 	.word	0xe000e010
 800a734:	e000e018 	.word	0xe000e018
 800a738:	20000000 	.word	0x20000000
 800a73c:	10624dd3 	.word	0x10624dd3
 800a740:	e000e014 	.word	0xe000e014

0800a744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a754 <vPortEnableVFP+0x10>
 800a748:	6801      	ldr	r1, [r0, #0]
 800a74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a74e:	6001      	str	r1, [r0, #0]
 800a750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a752:	bf00      	nop
 800a754:	e000ed88 	.word	0xe000ed88

0800a758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a75e:	f3ef 8305 	mrs	r3, IPSR
 800a762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b0f      	cmp	r3, #15
 800a768:	d914      	bls.n	800a794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a76a:	4a17      	ldr	r2, [pc, #92]	; (800a7c8 <vPortValidateInterruptPriority+0x70>)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a774:	4b15      	ldr	r3, [pc, #84]	; (800a7cc <vPortValidateInterruptPriority+0x74>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	7afa      	ldrb	r2, [r7, #11]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d20a      	bcs.n	800a794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	607b      	str	r3, [r7, #4]
}
 800a790:	bf00      	nop
 800a792:	e7fe      	b.n	800a792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a794:	4b0e      	ldr	r3, [pc, #56]	; (800a7d0 <vPortValidateInterruptPriority+0x78>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a79c:	4b0d      	ldr	r3, [pc, #52]	; (800a7d4 <vPortValidateInterruptPriority+0x7c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d90a      	bls.n	800a7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	603b      	str	r3, [r7, #0]
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <vPortValidateInterruptPriority+0x60>
	}
 800a7ba:	bf00      	nop
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	e000e3f0 	.word	0xe000e3f0
 800a7cc:	20001fe4 	.word	0x20001fe4
 800a7d0:	e000ed0c 	.word	0xe000ed0c
 800a7d4:	20001fe8 	.word	0x20001fe8

0800a7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08a      	sub	sp, #40	; 0x28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7e4:	f7fe fcb6 	bl	8009154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7e8:	4b5b      	ldr	r3, [pc, #364]	; (800a958 <pvPortMalloc+0x180>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7f0:	f000 f920 	bl	800aa34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7f4:	4b59      	ldr	r3, [pc, #356]	; (800a95c <pvPortMalloc+0x184>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f040 8093 	bne.w	800a928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01d      	beq.n	800a844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a808:	2208      	movs	r2, #8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4413      	add	r3, r2
 800a80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f003 0307 	and.w	r3, r3, #7
 800a816:	2b00      	cmp	r3, #0
 800a818:	d014      	beq.n	800a844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f023 0307 	bic.w	r3, r3, #7
 800a820:	3308      	adds	r3, #8
 800a822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <pvPortMalloc+0x6c>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	617b      	str	r3, [r7, #20]
}
 800a840:	bf00      	nop
 800a842:	e7fe      	b.n	800a842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d06e      	beq.n	800a928 <pvPortMalloc+0x150>
 800a84a:	4b45      	ldr	r3, [pc, #276]	; (800a960 <pvPortMalloc+0x188>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d869      	bhi.n	800a928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a854:	4b43      	ldr	r3, [pc, #268]	; (800a964 <pvPortMalloc+0x18c>)
 800a856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a858:	4b42      	ldr	r3, [pc, #264]	; (800a964 <pvPortMalloc+0x18c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a85e:	e004      	b.n	800a86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d903      	bls.n	800a87c <pvPortMalloc+0xa4>
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1f1      	bne.n	800a860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a87c:	4b36      	ldr	r3, [pc, #216]	; (800a958 <pvPortMalloc+0x180>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a882:	429a      	cmp	r2, r3
 800a884:	d050      	beq.n	800a928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2208      	movs	r2, #8
 800a88c:	4413      	add	r3, r2
 800a88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d91f      	bls.n	800a8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	613b      	str	r3, [r7, #16]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	685a      	ldr	r2, [r3, #4]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8e2:	69b8      	ldr	r0, [r7, #24]
 800a8e4:	f000 f908 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8e8:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <pvPortMalloc+0x188>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	4a1b      	ldr	r2, [pc, #108]	; (800a960 <pvPortMalloc+0x188>)
 800a8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8f6:	4b1a      	ldr	r3, [pc, #104]	; (800a960 <pvPortMalloc+0x188>)
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <pvPortMalloc+0x190>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d203      	bcs.n	800a90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a902:	4b17      	ldr	r3, [pc, #92]	; (800a960 <pvPortMalloc+0x188>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a18      	ldr	r2, [pc, #96]	; (800a968 <pvPortMalloc+0x190>)
 800a908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	4b13      	ldr	r3, [pc, #76]	; (800a95c <pvPortMalloc+0x184>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	431a      	orrs	r2, r3
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a91e:	4b13      	ldr	r3, [pc, #76]	; (800a96c <pvPortMalloc+0x194>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a11      	ldr	r2, [pc, #68]	; (800a96c <pvPortMalloc+0x194>)
 800a926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a928:	f7fe fc22 	bl	8009170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f003 0307 	and.w	r3, r3, #7
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00a      	beq.n	800a94c <pvPortMalloc+0x174>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	60fb      	str	r3, [r7, #12]
}
 800a948:	bf00      	nop
 800a94a:	e7fe      	b.n	800a94a <pvPortMalloc+0x172>
	return pvReturn;
 800a94c:	69fb      	ldr	r3, [r7, #28]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3728      	adds	r7, #40	; 0x28
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20005bf4 	.word	0x20005bf4
 800a95c:	20005c08 	.word	0x20005c08
 800a960:	20005bf8 	.word	0x20005bf8
 800a964:	20005bec 	.word	0x20005bec
 800a968:	20005bfc 	.word	0x20005bfc
 800a96c:	20005c00 	.word	0x20005c00

0800a970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d04d      	beq.n	800aa1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a982:	2308      	movs	r3, #8
 800a984:	425b      	negs	r3, r3
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4413      	add	r3, r2
 800a98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <vPortFree+0xb8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4013      	ands	r3, r2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <vPortFree+0x44>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	60fb      	str	r3, [r7, #12]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00a      	beq.n	800a9d2 <vPortFree+0x62>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	60bb      	str	r3, [r7, #8]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	4b14      	ldr	r3, [pc, #80]	; (800aa28 <vPortFree+0xb8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01e      	beq.n	800aa1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d11a      	bne.n	800aa1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <vPortFree+0xb8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	401a      	ands	r2, r3
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9f8:	f7fe fbac 	bl	8009154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <vPortFree+0xbc>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4413      	add	r3, r2
 800aa06:	4a09      	ldr	r2, [pc, #36]	; (800aa2c <vPortFree+0xbc>)
 800aa08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa0a:	6938      	ldr	r0, [r7, #16]
 800aa0c:	f000 f874 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <vPortFree+0xc0>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3301      	adds	r3, #1
 800aa16:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <vPortFree+0xc0>)
 800aa18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa1a:	f7fe fba9 	bl	8009170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa1e:	bf00      	nop
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20005c08 	.word	0x20005c08
 800aa2c:	20005bf8 	.word	0x20005bf8
 800aa30:	20005c04 	.word	0x20005c04

0800aa34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa40:	4b27      	ldr	r3, [pc, #156]	; (800aae0 <prvHeapInit+0xac>)
 800aa42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00c      	beq.n	800aa68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3307      	adds	r3, #7
 800aa52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f023 0307 	bic.w	r3, r3, #7
 800aa5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <prvHeapInit+0xac>)
 800aa64:	4413      	add	r3, r2
 800aa66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa6c:	4a1d      	ldr	r2, [pc, #116]	; (800aae4 <prvHeapInit+0xb0>)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa72:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <prvHeapInit+0xb0>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa80:	2208      	movs	r2, #8
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 0307 	bic.w	r3, r3, #7
 800aa8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <prvHeapInit+0xb4>)
 800aa94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa96:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <prvHeapInit+0xb4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <prvHeapInit+0xb4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	1ad2      	subs	r2, r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aab4:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <prvHeapInit+0xb4>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <prvHeapInit+0xb8>)
 800aac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	4a09      	ldr	r2, [pc, #36]	; (800aaf0 <prvHeapInit+0xbc>)
 800aaca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aacc:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <prvHeapInit+0xc0>)
 800aace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aad2:	601a      	str	r2, [r3, #0]
}
 800aad4:	bf00      	nop
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	20001fec 	.word	0x20001fec
 800aae4:	20005bec 	.word	0x20005bec
 800aae8:	20005bf4 	.word	0x20005bf4
 800aaec:	20005bfc 	.word	0x20005bfc
 800aaf0:	20005bf8 	.word	0x20005bf8
 800aaf4:	20005c08 	.word	0x20005c08

0800aaf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab00:	4b28      	ldr	r3, [pc, #160]	; (800aba4 <prvInsertBlockIntoFreeList+0xac>)
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	e002      	b.n	800ab0c <prvInsertBlockIntoFreeList+0x14>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d8f7      	bhi.n	800ab06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	4413      	add	r3, r2
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d108      	bne.n	800ab3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	441a      	add	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	441a      	add	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d118      	bne.n	800ab80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d00d      	beq.n	800ab76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	441a      	add	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e008      	b.n	800ab88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab76:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e003      	b.n	800ab88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d002      	beq.n	800ab96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20005bec 	.word	0x20005bec
 800aba8:	20005bf4 	.word	0x20005bf4

0800abac <vHWOutInit>:
void vGetAverDataFromRAW(uint16_t * Indata, uint16_t *OutData, uint16_t InIndex, uint16_t OutIndex, uint8_t Size,uint16_t FrameSize, uint16_t BufferSize);



void vHWOutInit(OUT_NAME_TYPE out_name, TIM_HandleTypeDef * ptim, uint32_t  channel,  float power, uint16_t overload_timer, float overload_power, uint8_t PWM)
{
 800abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	b08f      	sub	sp, #60	; 0x3c
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6139      	str	r1, [r7, #16]
 800abb6:	60fa      	str	r2, [r7, #12]
 800abb8:	ed87 0a02 	vstr	s0, [r7, #8]
 800abbc:	461a      	mov	r2, r3
 800abbe:	edc7 0a01 	vstr	s1, [r7, #4]
 800abc2:	4603      	mov	r3, r0
 800abc4:	75fb      	strb	r3, [r7, #23]
 800abc6:	4613      	mov	r3, r2
 800abc8:	82bb      	strh	r3, [r7, #20]
	out[out_name].ptim = ptim;
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	4a3c      	ldr	r2, [pc, #240]	; (800acc0 <vHWOutInit+0x114>)
 800abce:	2158      	movs	r1, #88	; 0x58
 800abd0:	fb01 f303 	mul.w	r3, r1, r3
 800abd4:	4413      	add	r3, r2
 800abd6:	3304      	adds	r3, #4
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	601a      	str	r2, [r3, #0]
	out[out_name].channel = channel;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	4a38      	ldr	r2, [pc, #224]	; (800acc0 <vHWOutInit+0x114>)
 800abe0:	2158      	movs	r1, #88	; 0x58
 800abe2:	fb01 f303 	mul.w	r3, r1, r3
 800abe6:	4413      	add	r3, r2
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	601a      	str	r2, [r3, #0]
	out[out_name].power = power;
 800abec:	7dfb      	ldrb	r3, [r7, #23]
 800abee:	4a34      	ldr	r2, [pc, #208]	; (800acc0 <vHWOutInit+0x114>)
 800abf0:	2158      	movs	r1, #88	; 0x58
 800abf2:	fb01 f303 	mul.w	r3, r1, r3
 800abf6:	4413      	add	r3, r2
 800abf8:	330c      	adds	r3, #12
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	601a      	str	r2, [r3, #0]
	out[out_name].overload_power = overload_power;
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	4a2f      	ldr	r2, [pc, #188]	; (800acc0 <vHWOutInit+0x114>)
 800ac02:	2158      	movs	r1, #88	; 0x58
 800ac04:	fb01 f303 	mul.w	r3, r1, r3
 800ac08:	4413      	add	r3, r2
 800ac0a:	3310      	adds	r3, #16
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	601a      	str	r2, [r3, #0]
	out[out_name].overload_config_timer = overload_timer;
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	4a2b      	ldr	r2, [pc, #172]	; (800acc0 <vHWOutInit+0x114>)
 800ac14:	2158      	movs	r1, #88	; 0x58
 800ac16:	fb01 f303 	mul.w	r3, r1, r3
 800ac1a:	4413      	add	r3, r2
 800ac1c:	3316      	adds	r3, #22
 800ac1e:	8aba      	ldrh	r2, [r7, #20]
 800ac20:	801a      	strh	r2, [r3, #0]
	out[out_name].overload_timer = 0;
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
 800ac24:	4a26      	ldr	r2, [pc, #152]	; (800acc0 <vHWOutInit+0x114>)
 800ac26:	2158      	movs	r1, #88	; 0x58
 800ac28:	fb01 f303 	mul.w	r3, r1, r3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	3318      	adds	r3, #24
 800ac30:	2200      	movs	r2, #0
 800ac32:	801a      	strh	r2, [r3, #0]
	out[out_name].out_logic_state =OUT_OFF;
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	4a22      	ldr	r2, [pc, #136]	; (800acc0 <vHWOutInit+0x114>)
 800ac38:	2158      	movs	r1, #88	; 0x58
 800ac3a:	fb01 f303 	mul.w	r3, r1, r3
 800ac3e:	4413      	add	r3, r2
 800ac40:	3308      	adds	r3, #8
 800ac42:	2201      	movs	r2, #1
 800ac44:	701a      	strb	r2, [r3, #0]
	out[out_name].out_state =STATE_OUT_OFF;
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	4a1d      	ldr	r2, [pc, #116]	; (800acc0 <vHWOutInit+0x114>)
 800ac4a:	2158      	movs	r1, #88	; 0x58
 800ac4c:	fb01 f303 	mul.w	r3, r1, r3
 800ac50:	4413      	add	r3, r2
 800ac52:	3309      	adds	r3, #9
 800ac54:	2200      	movs	r2, #0
 800ac56:	701a      	strb	r2, [r3, #0]
	out[out_name].error_flag = ERROR_OFF;
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	4a19      	ldr	r2, [pc, #100]	; (800acc0 <vHWOutInit+0x114>)
 800ac5c:	2158      	movs	r1, #88	; 0x58
 800ac5e:	fb01 f303 	mul.w	r3, r1, r3
 800ac62:	4413      	add	r3, r2
 800ac64:	3320      	adds	r3, #32
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]
	out[out_name].error_count = 0;
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	4a14      	ldr	r2, [pc, #80]	; (800acc0 <vHWOutInit+0x114>)
 800ac6e:	2158      	movs	r1, #88	; 0x58
 800ac70:	fb01 f303 	mul.w	r3, r1, r3
 800ac74:	4413      	add	r3, r2
 800ac76:	331a      	adds	r3, #26
 800ac78:	2200      	movs	r2, #0
 800ac7a:	701a      	strb	r2, [r3, #0]
	out[out_name].restart_timer =0;
 800ac7c:	7dfb      	ldrb	r3, [r7, #23]
 800ac7e:	4a10      	ldr	r2, [pc, #64]	; (800acc0 <vHWOutInit+0x114>)
 800ac80:	2158      	movs	r1, #88	; 0x58
 800ac82:	fb01 f303 	mul.w	r3, r1, r3
 800ac86:	4413      	add	r3, r2
 800ac88:	331c      	adds	r3, #28
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	801a      	strh	r2, [r3, #0]
	out[out_name].restart_config_timer =1000;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	4a0b      	ldr	r2, [pc, #44]	; (800acc0 <vHWOutInit+0x114>)
 800ac92:	2158      	movs	r1, #88	; 0x58
 800ac94:	fb01 f303 	mul.w	r3, r1, r3
 800ac98:	4413      	add	r3, r2
 800ac9a:	331e      	adds	r3, #30
 800ac9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aca0:	801a      	strh	r2, [r3, #0]
	out[out_name].PWM = PWM;
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	4a06      	ldr	r2, [pc, #24]	; (800acc0 <vHWOutInit+0x114>)
 800aca6:	2158      	movs	r1, #88	; 0x58
 800aca8:	fb01 f303 	mul.w	r3, r1, r3
 800acac:	4413      	add	r3, r2
 800acae:	3314      	adds	r3, #20
 800acb0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800acb4:	701a      	strb	r2, [r3, #0]
	for (uint8_t j=0; j< 4U; j++)
 800acb6:	2300      	movs	r3, #0
 800acb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800acbc:	e11b      	b.n	800aef6 <vHWOutInit+0x34a>
 800acbe:	bf00      	nop
 800acc0:	20005ca0 	.word	0x20005ca0
	{
		//Проверяем что хоты одно значение АЦП не равно нулю,что-то не словить делением на ноль.
		if ((CurSensData[out_name][j].Data !=0) || (CurSensData[out_name][j+1].Data !=0 ))
 800acc4:	7dfa      	ldrb	r2, [r7, #23]
 800acc6:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800acca:	48b9      	ldr	r0, [pc, #740]	; (800afb0 <vHWOutInit+0x404>)
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	440b      	add	r3, r1
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4403      	add	r3, r0
 800acd8:	885b      	ldrh	r3, [r3, #2]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10e      	bne.n	800acfc <vHWOutInit+0x150>
 800acde:	7dfa      	ldrb	r2, [r7, #23]
 800ace0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ace4:	1c59      	adds	r1, r3, #1
 800ace6:	48b2      	ldr	r0, [pc, #712]	; (800afb0 <vHWOutInit+0x404>)
 800ace8:	4613      	mov	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4413      	add	r3, r2
 800acee:	440b      	add	r3, r1
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4403      	add	r3, r0
 800acf4:	885b      	ldrh	r3, [r3, #2]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 80f8 	beq.w	800aeec <vHWOutInit+0x340>
		{
			out[out_name].CSC[j].data = CurSensData[out_name][j+1].Data;
 800acfc:	7df9      	ldrb	r1, [r7, #23]
 800acfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad02:	1c5e      	adds	r6, r3, #1
 800ad04:	7df8      	ldrb	r0, [r7, #23]
 800ad06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ad0a:	4ba9      	ldr	r3, [pc, #676]	; (800afb0 <vHWOutInit+0x404>)
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	4433      	add	r3, r6
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	440b      	add	r3, r1
 800ad1c:	885e      	ldrh	r6, [r3, #2]
 800ad1e:	49a5      	ldr	r1, [pc, #660]	; (800afb4 <vHWOutInit+0x408>)
 800ad20:	4613      	mov	r3, r2
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	2258      	movs	r2, #88	; 0x58
 800ad2a:	fb00 f202 	mul.w	r2, r0, r2
 800ad2e:	4413      	add	r3, r2
 800ad30:	440b      	add	r3, r1
 800ad32:	3324      	adds	r3, #36	; 0x24
 800ad34:	4632      	mov	r2, r6
 800ad36:	801a      	strh	r2, [r3, #0]
			out[out_name].CSC[j].k = (float)( CurSensData[out_name][j].KOOF -  CurSensData[out_name][j+1].KOOF) /(float) ( CurSensData[out_name][j].Data- CurSensData[out_name][j+1].Data);
 800ad38:	7dfa      	ldrb	r2, [r7, #23]
 800ad3a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ad3e:	489c      	ldr	r0, [pc, #624]	; (800afb0 <vHWOutInit+0x404>)
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	440b      	add	r3, r1
 800ad48:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800ad4c:	461e      	mov	r6, r3
 800ad4e:	7dfa      	ldrb	r2, [r7, #23]
 800ad50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad54:	1c59      	adds	r1, r3, #1
 800ad56:	4896      	ldr	r0, [pc, #600]	; (800afb0 <vHWOutInit+0x404>)
 800ad58:	4613      	mov	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	440b      	add	r3, r1
 800ad60:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800ad64:	1af3      	subs	r3, r6, r3
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ad6e:	7dfa      	ldrb	r2, [r7, #23]
 800ad70:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ad74:	488e      	ldr	r0, [pc, #568]	; (800afb0 <vHWOutInit+0x404>)
 800ad76:	4613      	mov	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	440b      	add	r3, r1
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4403      	add	r3, r0
 800ad82:	885b      	ldrh	r3, [r3, #2]
 800ad84:	461e      	mov	r6, r3
 800ad86:	7dfa      	ldrb	r2, [r7, #23]
 800ad88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad8c:	1c59      	adds	r1, r3, #1
 800ad8e:	4888      	ldr	r0, [pc, #544]	; (800afb0 <vHWOutInit+0x404>)
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	440b      	add	r3, r1
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4403      	add	r3, r0
 800ad9c:	885b      	ldrh	r3, [r3, #2]
 800ad9e:	1af3      	subs	r3, r6, r3
 800ada0:	ee07 3a90 	vmov	s15, r3
 800ada4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ada8:	7df9      	ldrb	r1, [r7, #23]
 800adaa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800adae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb2:	4880      	ldr	r0, [pc, #512]	; (800afb4 <vHWOutInit+0x408>)
 800adb4:	4613      	mov	r3, r2
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	4413      	add	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	2258      	movs	r2, #88	; 0x58
 800adbe:	fb01 f202 	mul.w	r2, r1, r2
 800adc2:	4413      	add	r3, r2
 800adc4:	4403      	add	r3, r0
 800adc6:	3328      	adds	r3, #40	; 0x28
 800adc8:	edc3 7a00 	vstr	s15, [r3]
			out[out_name].CSC[j].b = (-1)* ((double) CurSensData[out_name][j].Data * CurSensData[out_name][j+1].KOOF + (double) CurSensData[out_name][j+1].Data * CurSensData[out_name][j].KOOF)/(CurSensData[out_name][j].Data - CurSensData[out_name][j+1].Data);
 800adcc:	7dfa      	ldrb	r2, [r7, #23]
 800adce:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800add2:	4877      	ldr	r0, [pc, #476]	; (800afb0 <vHWOutInit+0x404>)
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	440b      	add	r3, r1
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4403      	add	r3, r0
 800ade0:	885b      	ldrh	r3, [r3, #2]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7f5 fb36 	bl	8000454 <__aeabi_ui2d>
 800ade8:	4680      	mov	r8, r0
 800adea:	4689      	mov	r9, r1
 800adec:	7dfa      	ldrb	r2, [r7, #23]
 800adee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adf2:	1c59      	adds	r1, r3, #1
 800adf4:	486e      	ldr	r0, [pc, #440]	; (800afb0 <vHWOutInit+0x404>)
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	440b      	add	r3, r1
 800adfe:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7f5 fb36 	bl	8000474 <__aeabi_i2d>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4640      	mov	r0, r8
 800ae0e:	4649      	mov	r1, r9
 800ae10:	f7f5 fb9a 	bl	8000548 <__aeabi_dmul>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4692      	mov	sl, r2
 800ae1a:	469b      	mov	fp, r3
 800ae1c:	7dfa      	ldrb	r2, [r7, #23]
 800ae1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae22:	1c59      	adds	r1, r3, #1
 800ae24:	4862      	ldr	r0, [pc, #392]	; (800afb0 <vHWOutInit+0x404>)
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	440b      	add	r3, r1
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4403      	add	r3, r0
 800ae32:	885b      	ldrh	r3, [r3, #2]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f5 fb0d 	bl	8000454 <__aeabi_ui2d>
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	4689      	mov	r9, r1
 800ae3e:	7dfa      	ldrb	r2, [r7, #23]
 800ae40:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ae44:	485a      	ldr	r0, [pc, #360]	; (800afb0 <vHWOutInit+0x404>)
 800ae46:	4613      	mov	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	440b      	add	r3, r1
 800ae4e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7f5 fb0e 	bl	8000474 <__aeabi_i2d>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f7f5 fb72 	bl	8000548 <__aeabi_dmul>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4650      	mov	r0, sl
 800ae6a:	4659      	mov	r1, fp
 800ae6c:	f7f5 f9b6 	bl	80001dc <__adddf3>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4614      	mov	r4, r2
 800ae76:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800ae7a:	7dfa      	ldrb	r2, [r7, #23]
 800ae7c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ae80:	484b      	ldr	r0, [pc, #300]	; (800afb0 <vHWOutInit+0x404>)
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	440b      	add	r3, r1
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4403      	add	r3, r0
 800ae8e:	885b      	ldrh	r3, [r3, #2]
 800ae90:	461e      	mov	r6, r3
 800ae92:	7dfa      	ldrb	r2, [r7, #23]
 800ae94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae98:	1c59      	adds	r1, r3, #1
 800ae9a:	4845      	ldr	r0, [pc, #276]	; (800afb0 <vHWOutInit+0x404>)
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	440b      	add	r3, r1
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4403      	add	r3, r0
 800aea8:	885b      	ldrh	r3, [r3, #2]
 800aeaa:	1af3      	subs	r3, r6, r3
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f5 fae1 	bl	8000474 <__aeabi_i2d>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 fc6f 	bl	800079c <__aeabi_ddiv>
 800aebe:	4602      	mov	r2, r0
 800aec0:	460b      	mov	r3, r1
 800aec2:	f897 8017 	ldrb.w	r8, [r7, #23]
 800aec6:	f897 6037 	ldrb.w	r6, [r7, #55]	; 0x37
 800aeca:	4610      	mov	r0, r2
 800aecc:	4619      	mov	r1, r3
 800aece:	f7f5 fd4d 	bl	800096c <__aeabi_d2f>
 800aed2:	4601      	mov	r1, r0
 800aed4:	4837      	ldr	r0, [pc, #220]	; (800afb4 <vHWOutInit+0x408>)
 800aed6:	4633      	mov	r3, r6
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	4433      	add	r3, r6
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	2258      	movs	r2, #88	; 0x58
 800aee0:	fb02 f208 	mul.w	r2, r2, r8
 800aee4:	4413      	add	r3, r2
 800aee6:	4403      	add	r3, r0
 800aee8:	332c      	adds	r3, #44	; 0x2c
 800aeea:	6019      	str	r1, [r3, #0]
	for (uint8_t j=0; j< 4U; j++)
 800aeec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aef0:	3301      	adds	r3, #1
 800aef2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aef6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	f67f aee2 	bls.w	800acc4 <vHWOutInit+0x118>
		}
	}

    TIM_OC_InitTypeDef sConfigOC = {0};
 800af00:	f107 0318 	add.w	r3, r7, #24
 800af04:	2200      	movs	r2, #0
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	605a      	str	r2, [r3, #4]
 800af0a:	609a      	str	r2, [r3, #8]
 800af0c:	60da      	str	r2, [r3, #12]
 800af0e:	611a      	str	r2, [r3, #16]
 800af10:	615a      	str	r2, [r3, #20]
 800af12:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800af14:	2360      	movs	r3, #96	; 0x60
 800af16:	61bb      	str	r3, [r7, #24]
	sConfigOC.Pulse = (uint32_t)( out[out_name].ptim ->Init.Period *(float)out[out_name].PWM/100);
 800af18:	7dfb      	ldrb	r3, [r7, #23]
 800af1a:	4a26      	ldr	r2, [pc, #152]	; (800afb4 <vHWOutInit+0x408>)
 800af1c:	2158      	movs	r1, #88	; 0x58
 800af1e:	fb01 f303 	mul.w	r3, r1, r3
 800af22:	4413      	add	r3, r2
 800af24:	3304      	adds	r3, #4
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	ee07 3a90 	vmov	s15, r3
 800af2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	4a1f      	ldr	r2, [pc, #124]	; (800afb4 <vHWOutInit+0x408>)
 800af36:	2158      	movs	r1, #88	; 0x58
 800af38:	fb01 f303 	mul.w	r3, r1, r3
 800af3c:	4413      	add	r3, r2
 800af3e:	3314      	adds	r3, #20
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af4e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800afb8 <vHWOutInit+0x40c>
 800af52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af5a:	ee17 3a90 	vmov	r3, s15
 800af5e:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800af60:	2300      	movs	r3, #0
 800af62:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800af64:	2300      	movs	r3, #0
 800af66:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800af68:	2300      	movs	r3, #0
 800af6a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800af6c:	2300      	movs	r3, #0
 800af6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800af70:	2300      	movs	r3, #0
 800af72:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(out[out_name].ptim , &sConfigOC, out[out_name].channel) != HAL_OK)
 800af74:	7dfb      	ldrb	r3, [r7, #23]
 800af76:	4a0f      	ldr	r2, [pc, #60]	; (800afb4 <vHWOutInit+0x408>)
 800af78:	2158      	movs	r1, #88	; 0x58
 800af7a:	fb01 f303 	mul.w	r3, r1, r3
 800af7e:	4413      	add	r3, r2
 800af80:	3304      	adds	r3, #4
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	7dfb      	ldrb	r3, [r7, #23]
 800af86:	4a0b      	ldr	r2, [pc, #44]	; (800afb4 <vHWOutInit+0x408>)
 800af88:	2158      	movs	r1, #88	; 0x58
 800af8a:	fb01 f303 	mul.w	r3, r1, r3
 800af8e:	4413      	add	r3, r2
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	f107 0318 	add.w	r3, r7, #24
 800af96:	4619      	mov	r1, r3
 800af98:	f7fb f9fc 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <vHWOutInit+0x3fa>
	{
	    Error_Handler();
 800afa2:	f7f7 f8d9 	bl	8002158 <Error_Handler>
	}
}
 800afa6:	bf00      	nop
 800afa8:	373c      	adds	r7, #60	; 0x3c
 800afaa:	46bd      	mov	sp, r7
 800afac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb0:	20000010 	.word	0x20000010
 800afb4:	20005ca0 	.word	0x20005ca0
 800afb8:	42c80000 	.word	0x42c80000

0800afbc <vHWOutResete>:
	xEventGroupClearBits (xOutEvent, ( 0x1 < out_name) );
}


void vHWOutResete( OUT_NAME_TYPE out_name)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]
	 HAL_TIM_PWM_Stop(out[out_name].ptim,  out[out_name].channel);
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	4a10      	ldr	r2, [pc, #64]	; (800b00c <vHWOutResete+0x50>)
 800afca:	2158      	movs	r1, #88	; 0x58
 800afcc:	fb01 f303 	mul.w	r3, r1, r3
 800afd0:	4413      	add	r3, r2
 800afd2:	3304      	adds	r3, #4
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	490c      	ldr	r1, [pc, #48]	; (800b00c <vHWOutResete+0x50>)
 800afda:	2058      	movs	r0, #88	; 0x58
 800afdc:	fb00 f303 	mul.w	r3, r0, r3
 800afe0:	440b      	add	r3, r1
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f7fb f85c 	bl	80060a4 <HAL_TIM_PWM_Stop>
	 out_register &= ~(0x1<< out_name);
 800afec:	79fb      	ldrb	r3, [r7, #7]
 800afee:	2201      	movs	r2, #1
 800aff0:	fa02 f303 	lsl.w	r3, r2, r3
 800aff4:	43db      	mvns	r3, r3
 800aff6:	461a      	mov	r2, r3
 800aff8:	4b05      	ldr	r3, [pc, #20]	; (800b010 <vHWOutResete+0x54>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4013      	ands	r3, r2
 800affe:	4a04      	ldr	r2, [pc, #16]	; (800b010 <vHWOutResete+0x54>)
 800b000:	6013      	str	r3, [r2, #0]

}
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20005ca0 	.word	0x20005ca0
 800b010:	200063c0 	.word	0x200063c0

0800b014 <vHWOutSet>:

void vHWOutSet( OUT_NAME_TYPE out_name, uint8_t power)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b08a      	sub	sp, #40	; 0x28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	460a      	mov	r2, r1
 800b01e:	71fb      	strb	r3, [r7, #7]
 800b020:	4613      	mov	r3, r2
 800b022:	71bb      	strb	r3, [r7, #6]
   TIM_OC_InitTypeDef sConfigOC = {0};
 800b024:	f107 030c 	add.w	r3, r7, #12
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]
 800b02c:	605a      	str	r2, [r3, #4]
 800b02e:	609a      	str	r2, [r3, #8]
 800b030:	60da      	str	r2, [r3, #12]
 800b032:	611a      	str	r2, [r3, #16]
 800b034:	615a      	str	r2, [r3, #20]
 800b036:	619a      	str	r2, [r3, #24]
   //В зависимости от номера выхода выибраетм таймер и канал таймера PWM
   if ( power != 100 )
 800b038:	79bb      	ldrb	r3, [r7, #6]
 800b03a:	2b64      	cmp	r3, #100	; 0x64
 800b03c:	d048      	beq.n	800b0d0 <vHWOutSet+0xbc>
   {
   	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b03e:	2360      	movs	r3, #96	; 0x60
 800b040:	60fb      	str	r3, [r7, #12]
   	  sConfigOC.Pulse = (uint32_t )((float)power/100 * (out[out_name].ptim->Init.Period *(float)out[out_name].PWM/100 ));
 800b042:	79bb      	ldrb	r3, [r7, #6]
 800b044:	ee07 3a90 	vmov	s15, r3
 800b048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04c:	eddf 6a31 	vldr	s13, [pc, #196]	; 800b114 <vHWOutSet+0x100>
 800b050:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	4a30      	ldr	r2, [pc, #192]	; (800b118 <vHWOutSet+0x104>)
 800b058:	2158      	movs	r1, #88	; 0x58
 800b05a:	fb01 f303 	mul.w	r3, r1, r3
 800b05e:	4413      	add	r3, r2
 800b060:	3304      	adds	r3, #4
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06e:	79fb      	ldrb	r3, [r7, #7]
 800b070:	4a29      	ldr	r2, [pc, #164]	; (800b118 <vHWOutSet+0x104>)
 800b072:	2158      	movs	r1, #88	; 0x58
 800b074:	fb01 f303 	mul.w	r3, r1, r3
 800b078:	4413      	add	r3, r2
 800b07a:	3314      	adds	r3, #20
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b086:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b08a:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b114 <vHWOutSet+0x100>
 800b08e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b09a:	ee17 3a90 	vmov	r3, s15
 800b09e:	613b      	str	r3, [r7, #16]
   	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	617b      	str	r3, [r7, #20]
   	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	61fb      	str	r3, [r7, #28]
   	  HAL_TIM_PWM_ConfigChannel(out[out_name].ptim, &sConfigOC, out[out_name].channel);
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	4a1b      	ldr	r2, [pc, #108]	; (800b118 <vHWOutSet+0x104>)
 800b0ac:	2158      	movs	r1, #88	; 0x58
 800b0ae:	fb01 f303 	mul.w	r3, r1, r3
 800b0b2:	4413      	add	r3, r2
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	6818      	ldr	r0, [r3, #0]
 800b0b8:	79fb      	ldrb	r3, [r7, #7]
 800b0ba:	4a17      	ldr	r2, [pc, #92]	; (800b118 <vHWOutSet+0x104>)
 800b0bc:	2158      	movs	r1, #88	; 0x58
 800b0be:	fb01 f303 	mul.w	r3, r1, r3
 800b0c2:	4413      	add	r3, r2
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	f107 030c 	add.w	r3, r7, #12
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	f7fb f962 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>

   }
   HAL_TIM_PWM_Start(out[out_name].ptim,out[out_name].channel);
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	4a11      	ldr	r2, [pc, #68]	; (800b118 <vHWOutSet+0x104>)
 800b0d4:	2158      	movs	r1, #88	; 0x58
 800b0d6:	fb01 f303 	mul.w	r3, r1, r3
 800b0da:	4413      	add	r3, r2
 800b0dc:	3304      	adds	r3, #4
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	79fb      	ldrb	r3, [r7, #7]
 800b0e2:	490d      	ldr	r1, [pc, #52]	; (800b118 <vHWOutSet+0x104>)
 800b0e4:	2058      	movs	r0, #88	; 0x58
 800b0e6:	fb00 f303 	mul.w	r3, r0, r3
 800b0ea:	440b      	add	r3, r1
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7fa ff0f 	bl	8005f14 <HAL_TIM_PWM_Start>
   out_register |= 0x1<< out_name;
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fe:	461a      	mov	r2, r3
 800b100:	4b06      	ldr	r3, [pc, #24]	; (800b11c <vHWOutSet+0x108>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4313      	orrs	r3, r2
 800b106:	4a05      	ldr	r2, [pc, #20]	; (800b11c <vHWOutSet+0x108>)
 800b108:	6013      	str	r3, [r2, #0]
}
 800b10a:	bf00      	nop
 800b10c:	3728      	adds	r7, #40	; 0x28
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	42c80000 	.word	0x42c80000
 800b118:	20005ca0 	.word	0x20005ca0
 800b11c:	200063c0 	.word	0x200063c0

0800b120 <vOutInit>:
}



void vOutInit()
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af02      	add	r7, sp, #8
	//Инициализация портов упраления ключами
	HAL_GPIO_WritePin(GPIOG, Cs_Dis20_5_Pin|Cs_Dis20_2_Pin|Cs_Dis20_1_Pin|Cs_Dis8_13_14_Pin
 800b126:	2200      	movs	r2, #0
 800b128:	f641 413e 	movw	r1, #7230	; 0x1c3e
 800b12c:	4886      	ldr	r0, [pc, #536]	; (800b348 <vOutInit+0x228>)
 800b12e:	f7f9 fe91 	bl	8004e54 <HAL_GPIO_WritePin>
	                          |Cs_Dis8_17_18_Pin|Cs_Dis8_15_16_Pin|Cs_Dis20_3_Pin|Cs_Dis20_4_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, Cs_Dis8_11_12_Pin|Cs_Dis20_7_Pin|Cs_Dis8_19_20_Pin|Cs_Dis20_8_Pin, GPIO_PIN_RESET);
 800b132:	2200      	movs	r2, #0
 800b134:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800b138:	4884      	ldr	r0, [pc, #528]	; (800b34c <vOutInit+0x22c>)
 800b13a:	f7f9 fe8b 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Cs_Dis20_6_GPIO_Port, Cs_Dis20_6_Pin, GPIO_PIN_RESET);
 800b13e:	2200      	movs	r2, #0
 800b140:	2180      	movs	r1, #128	; 0x80
 800b142:	4883      	ldr	r0, [pc, #524]	; (800b350 <vOutInit+0x230>)
 800b144:	f7f9 fe86 	bl	8004e54 <HAL_GPIO_WritePin>

	vHWOutInit(OUT_1, &htim4, TIM_CHANNEL_3, 20.0, 1000, 60, 100 );
 800b148:	2364      	movs	r3, #100	; 0x64
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	eddf 0a81 	vldr	s1, [pc, #516]	; 800b354 <vOutInit+0x234>
 800b150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b154:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b158:	2208      	movs	r2, #8
 800b15a:	497f      	ldr	r1, [pc, #508]	; (800b358 <vOutInit+0x238>)
 800b15c:	2000      	movs	r0, #0
 800b15e:	f7ff fd25 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_2, &htim4, TIM_CHANNEL_4, 20.0, 1000, 60, 100 );
 800b162:	2364      	movs	r3, #100	; 0x64
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800b354 <vOutInit+0x234>
 800b16a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b16e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b172:	220c      	movs	r2, #12
 800b174:	4978      	ldr	r1, [pc, #480]	; (800b358 <vOutInit+0x238>)
 800b176:	2001      	movs	r0, #1
 800b178:	f7ff fd18 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_3, &htim2, TIM_CHANNEL_1, 20.0, 1000, 60, 100 );
 800b17c:	2364      	movs	r3, #100	; 0x64
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	eddf 0a74 	vldr	s1, [pc, #464]	; 800b354 <vOutInit+0x234>
 800b184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b188:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b18c:	2200      	movs	r2, #0
 800b18e:	4973      	ldr	r1, [pc, #460]	; (800b35c <vOutInit+0x23c>)
 800b190:	2002      	movs	r0, #2
 800b192:	f7ff fd0b 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_4, &htim3, TIM_CHANNEL_2, 20.0, 1000, 60, 100 );
 800b196:	2364      	movs	r3, #100	; 0x64
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b354 <vOutInit+0x234>
 800b19e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1a2:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b1a6:	2204      	movs	r2, #4
 800b1a8:	496d      	ldr	r1, [pc, #436]	; (800b360 <vOutInit+0x240>)
 800b1aa:	2003      	movs	r0, #3
 800b1ac:	f7ff fcfe 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_5, &htim1, TIM_CHANNEL_3, 20.0, 1000, 60, 100 );
 800b1b0:	2364      	movs	r3, #100	; 0x64
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	eddf 0a67 	vldr	s1, [pc, #412]	; 800b354 <vOutInit+0x234>
 800b1b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1bc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	4968      	ldr	r1, [pc, #416]	; (800b364 <vOutInit+0x244>)
 800b1c4:	2004      	movs	r0, #4
 800b1c6:	f7ff fcf1 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_6, &htim1, TIM_CHANNEL_4, 20.0, 1000, 60, 100 );
 800b1ca:	2364      	movs	r3, #100	; 0x64
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	eddf 0a61 	vldr	s1, [pc, #388]	; 800b354 <vOutInit+0x234>
 800b1d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1d6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b1da:	220c      	movs	r2, #12
 800b1dc:	4961      	ldr	r1, [pc, #388]	; (800b364 <vOutInit+0x244>)
 800b1de:	2005      	movs	r0, #5
 800b1e0:	f7ff fce4 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_7, &htim12, TIM_CHANNEL_1,20.0, 1000, 60, 100 );
 800b1e4:	2364      	movs	r3, #100	; 0x64
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800b354 <vOutInit+0x234>
 800b1ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1f0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	495c      	ldr	r1, [pc, #368]	; (800b368 <vOutInit+0x248>)
 800b1f8:	2006      	movs	r0, #6
 800b1fa:	f7ff fcd7 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_8, &htim4, TIM_CHANNEL_2, 20.0, 1000, 60, 100 );
 800b1fe:	2364      	movs	r3, #100	; 0x64
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	eddf 0a54 	vldr	s1, [pc, #336]	; 800b354 <vOutInit+0x234>
 800b206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b20a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800b20e:	2204      	movs	r2, #4
 800b210:	4951      	ldr	r1, [pc, #324]	; (800b358 <vOutInit+0x238>)
 800b212:	2007      	movs	r0, #7
 800b214:	f7ff fcca 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_9, &htim1, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800b218:	2364      	movs	r3, #100	; 0x64
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b220:	2300      	movs	r3, #0
 800b222:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b226:	2200      	movs	r2, #0
 800b228:	494e      	ldr	r1, [pc, #312]	; (800b364 <vOutInit+0x244>)
 800b22a:	2008      	movs	r0, #8
 800b22c:	f7ff fcbe 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_10, &htim1, TIM_CHANNEL_2,8.0, 0, 8.0, 100 );
 800b230:	2364      	movs	r3, #100	; 0x64
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b238:	2300      	movs	r3, #0
 800b23a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b23e:	2204      	movs	r2, #4
 800b240:	4948      	ldr	r1, [pc, #288]	; (800b364 <vOutInit+0x244>)
 800b242:	2009      	movs	r0, #9
 800b244:	f7ff fcb2 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_11, &htim2, TIM_CHANNEL_4, 8.0, 0, 8.0, 100 );
 800b248:	2364      	movs	r3, #100	; 0x64
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b250:	2300      	movs	r3, #0
 800b252:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b256:	220c      	movs	r2, #12
 800b258:	4940      	ldr	r1, [pc, #256]	; (800b35c <vOutInit+0x23c>)
 800b25a:	200a      	movs	r0, #10
 800b25c:	f7ff fca6 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_12, &htim2, TIM_CHANNEL_3, 8.0, 0, 8.0, 100 );
 800b260:	2364      	movs	r3, #100	; 0x64
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b268:	2300      	movs	r3, #0
 800b26a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b26e:	2208      	movs	r2, #8
 800b270:	493a      	ldr	r1, [pc, #232]	; (800b35c <vOutInit+0x23c>)
 800b272:	200b      	movs	r0, #11
 800b274:	f7ff fc9a 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_13, &htim8, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800b278:	2364      	movs	r3, #100	; 0x64
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b280:	2300      	movs	r3, #0
 800b282:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b286:	2200      	movs	r2, #0
 800b288:	4938      	ldr	r1, [pc, #224]	; (800b36c <vOutInit+0x24c>)
 800b28a:	200c      	movs	r0, #12
 800b28c:	f7ff fc8e 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_14, &htim8, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 800b290:	2364      	movs	r3, #100	; 0x64
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b298:	2300      	movs	r3, #0
 800b29a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b29e:	2204      	movs	r2, #4
 800b2a0:	4932      	ldr	r1, [pc, #200]	; (800b36c <vOutInit+0x24c>)
 800b2a2:	200d      	movs	r0, #13
 800b2a4:	f7ff fc82 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_15, &htim3, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800b2a8:	2364      	movs	r3, #100	; 0x64
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4929      	ldr	r1, [pc, #164]	; (800b360 <vOutInit+0x240>)
 800b2ba:	200e      	movs	r0, #14
 800b2bc:	f7ff fc76 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_16, &htim2, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 800b2c0:	2364      	movs	r3, #100	; 0x64
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b2ce:	2204      	movs	r2, #4
 800b2d0:	4922      	ldr	r1, [pc, #136]	; (800b35c <vOutInit+0x23c>)
 800b2d2:	200f      	movs	r0, #15
 800b2d4:	f7ff fc6a 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_17, &htim8, TIM_CHANNEL_3, 8.0, 0, 8.0, 100 );
 800b2d8:	2364      	movs	r3, #100	; 0x64
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b2e6:	2208      	movs	r2, #8
 800b2e8:	4920      	ldr	r1, [pc, #128]	; (800b36c <vOutInit+0x24c>)
 800b2ea:	2010      	movs	r0, #16
 800b2ec:	f7ff fc5e 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_18,  &htim8, TIM_CHANNEL_4, 8.0, 0, 8.0, 100 );
 800b2f0:	2364      	movs	r3, #100	; 0x64
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b2fe:	220c      	movs	r2, #12
 800b300:	491a      	ldr	r1, [pc, #104]	; (800b36c <vOutInit+0x24c>)
 800b302:	2011      	movs	r0, #17
 800b304:	f7ff fc52 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_19, &htim12, TIM_CHANNEL_2, 8.0, 0, 8.0, 100 );
 800b308:	2364      	movs	r3, #100	; 0x64
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b310:	2300      	movs	r3, #0
 800b312:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b316:	2204      	movs	r2, #4
 800b318:	4913      	ldr	r1, [pc, #76]	; (800b368 <vOutInit+0x248>)
 800b31a:	2012      	movs	r0, #18
 800b31c:	f7ff fc46 	bl	800abac <vHWOutInit>
	vHWOutInit(OUT_20, &htim4, TIM_CHANNEL_1, 8.0, 0, 8.0, 100 );
 800b320:	2364      	movs	r3, #100	; 0x64
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b328:	2300      	movs	r3, #0
 800b32a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800b32e:	2200      	movs	r2, #0
 800b330:	4909      	ldr	r1, [pc, #36]	; (800b358 <vOutInit+0x238>)
 800b332:	2013      	movs	r0, #19
 800b334:	f7ff fc3a 	bl	800abac <vHWOutInit>
	//vHWOutSet(OUT_8,100);
	//vHWOutSet(OUT_9,100);
	//vHWOutSet(OUT_10,100);
	//vHWOutSet(OUT_11,100);
	//vHWOutSet(OUT_12,00);
	vHWOutSet(OUT_13,100);
 800b338:	2164      	movs	r1, #100	; 0x64
 800b33a:	200c      	movs	r0, #12
 800b33c:	f7ff fe6a 	bl	800b014 <vHWOutSet>
//	vHWOutSet(OUT_17,100);
//	vHWOutSet(OUT_18,100);
//	vHWOutSet(OUT_19,100);
//	vHWOutSet(OUT_20,100);
//
}
 800b340:	bf00      	nop
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	40021800 	.word	0x40021800
 800b34c:	40020c00 	.word	0x40020c00
 800b350:	40021000 	.word	0x40021000
 800b354:	42700000 	.word	0x42700000
 800b358:	200005b8 	.word	0x200005b8
 800b35c:	20000528 	.word	0x20000528
 800b360:	20000570 	.word	0x20000570
 800b364:	200004e0 	.word	0x200004e0
 800b368:	20000690 	.word	0x20000690
 800b36c:	20000600 	.word	0x20000600

0800b370 <vADCTask>:
 // vADCConfigInit();
  return;
}

void vADCTask(void * argument)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af02      	add	r7, sp, #8
 800b376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vADCTask */
  xADCEvent = xEventGroupCreateStatic(&xADCCreatedEventGroup );
 800b378:	4816      	ldr	r0, [pc, #88]	; (800b3d4 <vADCTask+0x64>)
 800b37a:	f7fc fce3 	bl	8007d44 <xEventGroupCreateStatic>
 800b37e:	4603      	mov	r3, r0
 800b380:	4a15      	ldr	r2, [pc, #84]	; (800b3d8 <vADCTask+0x68>)
 800b382:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800b384:	2001      	movs	r0, #1
 800b386:	f7fc fc8d 	bl	8007ca4 <osDelay>
	HAL_ADC_Start_DMA( &hadc1,( uint32_t* )&ADC1_IN_Buffer, ( ADC_FRAME_SIZE * ADC1_CHANNELS ));
 800b38a:	2218      	movs	r2, #24
 800b38c:	4913      	ldr	r1, [pc, #76]	; (800b3dc <vADCTask+0x6c>)
 800b38e:	4814      	ldr	r0, [pc, #80]	; (800b3e0 <vADCTask+0x70>)
 800b390:	f7f7 fdb6 	bl	8002f00 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( &hadc2,( uint32_t* )&ADC2_IN_Buffer, ( ADC_FRAME_SIZE * ADC2_CHANNELS ));
 800b394:	2215      	movs	r2, #21
 800b396:	4913      	ldr	r1, [pc, #76]	; (800b3e4 <vADCTask+0x74>)
 800b398:	4813      	ldr	r0, [pc, #76]	; (800b3e8 <vADCTask+0x78>)
 800b39a:	f7f7 fdb1 	bl	8002f00 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA( &hadc3,( uint32_t* )&ADC3_IN_Buffer, ( ADC_FRAME_SIZE * ADC3_CHANNELS ));
 800b39e:	221b      	movs	r2, #27
 800b3a0:	4912      	ldr	r1, [pc, #72]	; (800b3ec <vADCTask+0x7c>)
 800b3a2:	4813      	ldr	r0, [pc, #76]	; (800b3f0 <vADCTask+0x80>)
 800b3a4:	f7f7 fdac 	bl	8002f00 <HAL_ADC_Start_DMA>
	xEventGroupWaitBits( xADCEvent, ( ADC3_READY  | ADC2_READY | ADC1_READY   ), pdTRUE, pdTRUE, portMAX_DELAY );
 800b3a8:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <vADCTask+0x68>)
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	2107      	movs	r1, #7
 800b3b8:	f7fc fcfc 	bl	8007db4 <xEventGroupWaitBits>
	HAL_ADC_Stop_DMA(&hadc1);
 800b3bc:	4808      	ldr	r0, [pc, #32]	; (800b3e0 <vADCTask+0x70>)
 800b3be:	f7f7 feaf 	bl	8003120 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800b3c2:	4809      	ldr	r0, [pc, #36]	; (800b3e8 <vADCTask+0x78>)
 800b3c4:	f7f7 feac 	bl	8003120 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800b3c8:	4809      	ldr	r0, [pc, #36]	; (800b3f0 <vADCTask+0x80>)
 800b3ca:	f7f7 fea9 	bl	8003120 <HAL_ADC_Stop_DMA>
	vDataConvertToFloat();
 800b3ce:	f000 f857 	bl	800b480 <vDataConvertToFloat>
	  osDelay(1);
 800b3d2:	e7d7      	b.n	800b384 <vADCTask+0x14>
 800b3d4:	200063c8 	.word	0x200063c8
 800b3d8:	200063c4 	.word	0x200063c4
 800b3dc:	20005c0c 	.word	0x20005c0c
 800b3e0:	2000026c 	.word	0x2000026c
 800b3e4:	20005c3c 	.word	0x20005c3c
 800b3e8:	200002b4 	.word	0x200002b4
 800b3ec:	20005c68 	.word	0x20005c68
 800b3f0:	200002fc 	.word	0x200002fc

0800b3f4 <vGetAverDataFromRAW>:
/*
 * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
 * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
 */
void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint16_t InIndex, uint16_t OutIndex, uint8_t Size,uint16_t FrameSize, uint16_t BufferSize)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	4611      	mov	r1, r2
 800b400:	461a      	mov	r2, r3
 800b402:	460b      	mov	r3, r1
 800b404:	80fb      	strh	r3, [r7, #6]
 800b406:	4613      	mov	r3, r2
 800b408:	80bb      	strh	r3, [r7, #4]
	uint32_t temp;
	for (uint8_t i=0;i<Size;i++)
 800b40a:	2300      	movs	r3, #0
 800b40c:	74fb      	strb	r3, [r7, #19]
 800b40e:	e02b      	b.n	800b468 <vGetAverDataFromRAW+0x74>
	{
		temp = 0;
 800b410:	2300      	movs	r3, #0
 800b412:	617b      	str	r3, [r7, #20]
		for (uint8_t j=0;j<FrameSize;j++)
 800b414:	2300      	movs	r3, #0
 800b416:	74bb      	strb	r3, [r7, #18]
 800b418:	e012      	b.n	800b440 <vGetAverDataFromRAW+0x4c>
		{
		  temp = temp + InData[InIndex+i+j*BufferSize];
 800b41a:	88fa      	ldrh	r2, [r7, #6]
 800b41c:	7cfb      	ldrb	r3, [r7, #19]
 800b41e:	441a      	add	r2, r3
 800b420:	7cbb      	ldrb	r3, [r7, #18]
 800b422:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800b424:	fb01 f303 	mul.w	r3, r1, r3
 800b428:	4413      	add	r3, r2
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	461a      	mov	r2, r3
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	4413      	add	r3, r2
 800b438:	617b      	str	r3, [r7, #20]
		for (uint8_t j=0;j<FrameSize;j++)
 800b43a:	7cbb      	ldrb	r3, [r7, #18]
 800b43c:	3301      	adds	r3, #1
 800b43e:	74bb      	strb	r3, [r7, #18]
 800b440:	7cbb      	ldrb	r3, [r7, #18]
 800b442:	b29b      	uxth	r3, r3
 800b444:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b446:	429a      	cmp	r2, r3
 800b448:	d8e7      	bhi.n	800b41a <vGetAverDataFromRAW+0x26>
		}
		OutData[OutIndex+i] = temp / FrameSize;
 800b44a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b44c:	697a      	ldr	r2, [r7, #20]
 800b44e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b452:	88ba      	ldrh	r2, [r7, #4]
 800b454:	7cfb      	ldrb	r3, [r7, #19]
 800b456:	4413      	add	r3, r2
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	4413      	add	r3, r2
 800b45e:	b28a      	uxth	r2, r1
 800b460:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0;i<Size;i++)
 800b462:	7cfb      	ldrb	r3, [r7, #19]
 800b464:	3301      	adds	r3, #1
 800b466:	74fb      	strb	r3, [r7, #19]
 800b468:	7cfa      	ldrb	r2, [r7, #19]
 800b46a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d3ce      	bcc.n	800b410 <vGetAverDataFromRAW+0x1c>
	}
}
 800b472:	bf00      	nop
 800b474:	bf00      	nop
 800b476:	371c      	adds	r7, #28
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <vDataConvertToFloat>:

/*
 *  Функция усредняет данные из буфеера АЦП, и пробразует их значения
 */
void vDataConvertToFloat( void)
{
 800b480:	b590      	push	{r4, r7, lr}
 800b482:	b087      	sub	sp, #28
 800b484:	af04      	add	r7, sp, #16
	uint8_t i;
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 7-8
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawCurData, 0U, 6U, 2U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800b486:	2308      	movs	r3, #8
 800b488:	9302      	str	r3, [sp, #8]
 800b48a:	2303      	movs	r3, #3
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	2302      	movs	r3, #2
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	2306      	movs	r3, #6
 800b494:	2200      	movs	r2, #0
 800b496:	49ba      	ldr	r1, [pc, #744]	; (800b780 <vDataConvertToFloat+0x300>)
 800b498:	48ba      	ldr	r0, [pc, #744]	; (800b784 <vDataConvertToFloat+0x304>)
 800b49a:	f7ff ffab 	bl	800b3f4 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 19-20
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawCurData, 2U, 18U, 2U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800b49e:	2308      	movs	r3, #8
 800b4a0:	9302      	str	r3, [sp, #8]
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	2312      	movs	r3, #18
 800b4ac:	2202      	movs	r2, #2
 800b4ae:	49b4      	ldr	r1, [pc, #720]	; (800b780 <vDataConvertToFloat+0x300>)
 800b4b0:	48b4      	ldr	r0, [pc, #720]	; (800b784 <vDataConvertToFloat+0x304>)
 800b4b2:	f7ff ff9f 	bl	800b3f4 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов AIN
	 vGetAverDataFromRAW((uint16_t *)&ADC1_IN_Buffer, (uint16_t *)&muRawVData, 4U, 0U, 4U ,ADC_FRAME_SIZE,ADC1_CHANNELS);
 800b4b6:	2308      	movs	r3, #8
 800b4b8:	9302      	str	r3, [sp, #8]
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	2304      	movs	r3, #4
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	49b0      	ldr	r1, [pc, #704]	; (800b788 <vDataConvertToFloat+0x308>)
 800b4c8:	48ae      	ldr	r0, [pc, #696]	; (800b784 <vDataConvertToFloat+0x304>)
 800b4ca:	f7ff ff93 	bl	800b3f4 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 2 данныех каналов каналов тока 4-6
	 vGetAverDataFromRAW((uint16_t *)&ADC2_IN_Buffer, (uint16_t *)&muRawCurData,0U, 3U, 3U ,ADC_FRAME_SIZE,ADC2_CHANNELS);
 800b4ce:	2307      	movs	r3, #7
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	2303      	movs	r3, #3
 800b4dc:	2200      	movs	r2, #0
 800b4de:	49a8      	ldr	r1, [pc, #672]	; (800b780 <vDataConvertToFloat+0x300>)
 800b4e0:	48aa      	ldr	r0, [pc, #680]	; (800b78c <vDataConvertToFloat+0x30c>)
 800b4e2:	f7ff ff87 	bl	800b3f4 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 2 данныех каналов каналов тока 9-12
	 vGetAverDataFromRAW((uint16_t *)&ADC2_IN_Buffer, (uint16_t *)&muRawCurData, 3U, 8U, 4U ,ADC_FRAME_SIZE,ADC2_CHANNELS);
 800b4e6:	2307      	movs	r3, #7
 800b4e8:	9302      	str	r3, [sp, #8]
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	2304      	movs	r3, #4
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	2203      	movs	r2, #3
 800b4f6:	49a2      	ldr	r1, [pc, #648]	; (800b780 <vDataConvertToFloat+0x300>)
 800b4f8:	48a4      	ldr	r0, [pc, #656]	; (800b78c <vDataConvertToFloat+0x30c>)
 800b4fa:	f7ff ff7b 	bl	800b3f4 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 1-3
	 vGetAverDataFromRAW((uint16_t *)&ADC3_IN_Buffer, (uint16_t *)&muRawCurData, 0U, 0U, 3U ,ADC_FRAME_SIZE,ADC3_CHANNELS);
 800b4fe:	2309      	movs	r3, #9
 800b500:	9302      	str	r3, [sp, #8]
 800b502:	2303      	movs	r3, #3
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	2303      	movs	r3, #3
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	2300      	movs	r3, #0
 800b50c:	2200      	movs	r2, #0
 800b50e:	499c      	ldr	r1, [pc, #624]	; (800b780 <vDataConvertToFloat+0x300>)
 800b510:	489f      	ldr	r0, [pc, #636]	; (800b790 <vDataConvertToFloat+0x310>)
 800b512:	f7ff ff6f 	bl	800b3f4 <vGetAverDataFromRAW>
	 // Полчени из буфера ADC 1 данныех каналов каналов тока 13-18
	 vGetAverDataFromRAW((uint16_t *)&ADC3_IN_Buffer, (uint16_t *)&muRawCurData, 3U, 12U, 5U ,ADC_FRAME_SIZE,ADC3_CHANNELS);
 800b516:	2309      	movs	r3, #9
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	2303      	movs	r3, #3
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	2305      	movs	r3, #5
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	230c      	movs	r3, #12
 800b524:	2203      	movs	r2, #3
 800b526:	4996      	ldr	r1, [pc, #600]	; (800b780 <vDataConvertToFloat+0x300>)
 800b528:	4899      	ldr	r0, [pc, #612]	; (800b790 <vDataConvertToFloat+0x310>)
 800b52a:	f7ff ff63 	bl	800b3f4 <vGetAverDataFromRAW>
	 //Преобразование во флоат данных AIN
	 for ( i = 0; i < 4U; i++ )
 800b52e:	2300      	movs	r3, #0
 800b530:	71fb      	strb	r3, [r7, #7]
 800b532:	e024      	b.n	800b57e <vDataConvertToFloat+0xfe>
	 {
		 mfVData[ i ] = muRawVData[ i ] * COOF;
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	4a94      	ldr	r2, [pc, #592]	; (800b788 <vDataConvertToFloat+0x308>)
 800b538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b53c:	461a      	mov	r2, r3
 800b53e:	4b95      	ldr	r3, [pc, #596]	; (800b794 <vDataConvertToFloat+0x314>)
 800b540:	fb02 f303 	mul.w	r3, r2, r3
 800b544:	4a94      	ldr	r2, [pc, #592]	; (800b798 <vDataConvertToFloat+0x318>)
 800b546:	fb82 1203 	smull	r1, r2, r2, r3
 800b54a:	1412      	asrs	r2, r2, #16
 800b54c:	17db      	asrs	r3, r3, #31
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	4618      	mov	r0, r3
 800b552:	f7f4 ff8f 	bl	8000474 <__aeabi_i2d>
 800b556:	a388      	add	r3, pc, #544	; (adr r3, 800b778 <vDataConvertToFloat+0x2f8>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f7f4 fff4 	bl	8000548 <__aeabi_dmul>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	79fc      	ldrb	r4, [r7, #7]
 800b566:	4610      	mov	r0, r2
 800b568:	4619      	mov	r1, r3
 800b56a:	f7f5 f9ff 	bl	800096c <__aeabi_d2f>
 800b56e:	4602      	mov	r2, r0
 800b570:	498a      	ldr	r1, [pc, #552]	; (800b79c <vDataConvertToFloat+0x31c>)
 800b572:	00a3      	lsls	r3, r4, #2
 800b574:	440b      	add	r3, r1
 800b576:	601a      	str	r2, [r3, #0]
	 for ( i = 0; i < 4U; i++ )
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	3301      	adds	r3, #1
 800b57c:	71fb      	strb	r3, [r7, #7]
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	2b03      	cmp	r3, #3
 800b582:	d9d7      	bls.n	800b534 <vDataConvertToFloat+0xb4>
	 }
	 //Преобразвоание во float данных тока каналов 1-20
	 for ( i =0; i < 20U ; i++)
 800b584:	2300      	movs	r3, #0
 800b586:	71fb      	strb	r3, [r7, #7]
 800b588:	e0ed      	b.n	800b766 <vDataConvertToFloat+0x2e6>
	{
		 if  (muRawCurData[ i ] == 0xFFF)
 800b58a:	79fb      	ldrb	r3, [r7, #7]
 800b58c:	4a7c      	ldr	r2, [pc, #496]	; (800b780 <vDataConvertToFloat+0x300>)
 800b58e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b592:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b596:	4293      	cmp	r3, r2
 800b598:	d109      	bne.n	800b5ae <vDataConvertToFloat+0x12e>
		 {
			 out[i].error_flag  = ERROR_ON;
 800b59a:	79fb      	ldrb	r3, [r7, #7]
 800b59c:	4a80      	ldr	r2, [pc, #512]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b59e:	2158      	movs	r1, #88	; 0x58
 800b5a0:	fb01 f303 	mul.w	r3, r1, r3
 800b5a4:	4413      	add	r3, r2
 800b5a6:	3320      	adds	r3, #32
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	701a      	strb	r2, [r3, #0]
 800b5ac:	e0d8      	b.n	800b760 <vDataConvertToFloat+0x2e0>
		 }
		 else
		 {
			 out[i].error_flag  = ERROR_OFF;
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	4a7b      	ldr	r2, [pc, #492]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b5b2:	2158      	movs	r1, #88	; 0x58
 800b5b4:	fb01 f303 	mul.w	r3, r1, r3
 800b5b8:	4413      	add	r3, r2
 800b5ba:	3320      	adds	r3, #32
 800b5bc:	2200      	movs	r2, #0
 800b5be:	701a      	strb	r2, [r3, #0]
			 for (uint8_t r = 0; r < 4U; r++)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	71bb      	strb	r3, [r7, #6]
 800b5c4:	e0c8      	b.n	800b758 <vDataConvertToFloat+0x2d8>
			 {
				 float temp;
				 if ( muRawCurData[ i ] < out[i].CSC[r].data )
 800b5c6:	79fb      	ldrb	r3, [r7, #7]
 800b5c8:	4a6d      	ldr	r2, [pc, #436]	; (800b780 <vDataConvertToFloat+0x300>)
 800b5ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b5ce:	79f8      	ldrb	r0, [r7, #7]
 800b5d0:	79ba      	ldrb	r2, [r7, #6]
 800b5d2:	4c73      	ldr	r4, [pc, #460]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	4413      	add	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	2258      	movs	r2, #88	; 0x58
 800b5de:	fb00 f202 	mul.w	r2, r0, r2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	4423      	add	r3, r4
 800b5e6:	3324      	adds	r3, #36	; 0x24
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	4299      	cmp	r1, r3
 800b5ec:	f080 80b1 	bcs.w	800b752 <vDataConvertToFloat+0x2d2>
				 {
					 out[i].current =   (float) muRawCurData [ i ];
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	4a63      	ldr	r2, [pc, #396]	; (800b780 <vDataConvertToFloat+0x300>)
 800b5f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800b5f8:	79fb      	ldrb	r3, [r7, #7]
 800b5fa:	ee07 2a90 	vmov	s15, r2
 800b5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b602:	4a67      	ldr	r2, [pc, #412]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b604:	2158      	movs	r1, #88	; 0x58
 800b606:	fb01 f303 	mul.w	r3, r1, r3
 800b60a:	4413      	add	r3, r2
 800b60c:	3354      	adds	r3, #84	; 0x54
 800b60e:	edc3 7a00 	vstr	s15, [r3]
					 out[i].current =  out[i].current * out[i].CSC[r].k;
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	4a62      	ldr	r2, [pc, #392]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b616:	2158      	movs	r1, #88	; 0x58
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	4413      	add	r3, r2
 800b61e:	3354      	adds	r3, #84	; 0x54
 800b620:	ed93 7a00 	vldr	s14, [r3]
 800b624:	79f9      	ldrb	r1, [r7, #7]
 800b626:	79ba      	ldrb	r2, [r7, #6]
 800b628:	485d      	ldr	r0, [pc, #372]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b62a:	4613      	mov	r3, r2
 800b62c:	005b      	lsls	r3, r3, #1
 800b62e:	4413      	add	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	2258      	movs	r2, #88	; 0x58
 800b634:	fb01 f202 	mul.w	r2, r1, r2
 800b638:	4413      	add	r3, r2
 800b63a:	4403      	add	r3, r0
 800b63c:	3328      	adds	r3, #40	; 0x28
 800b63e:	edd3 7a00 	vldr	s15, [r3]
 800b642:	79fb      	ldrb	r3, [r7, #7]
 800b644:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b648:	4a55      	ldr	r2, [pc, #340]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b64a:	2158      	movs	r1, #88	; 0x58
 800b64c:	fb01 f303 	mul.w	r3, r1, r3
 800b650:	4413      	add	r3, r2
 800b652:	3354      	adds	r3, #84	; 0x54
 800b654:	edc3 7a00 	vstr	s15, [r3]
					 out[i].current =  out[i].current + out[i].CSC[r].b ;
 800b658:	79fb      	ldrb	r3, [r7, #7]
 800b65a:	4a51      	ldr	r2, [pc, #324]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b65c:	2158      	movs	r1, #88	; 0x58
 800b65e:	fb01 f303 	mul.w	r3, r1, r3
 800b662:	4413      	add	r3, r2
 800b664:	3354      	adds	r3, #84	; 0x54
 800b666:	ed93 7a00 	vldr	s14, [r3]
 800b66a:	79f9      	ldrb	r1, [r7, #7]
 800b66c:	79ba      	ldrb	r2, [r7, #6]
 800b66e:	484c      	ldr	r0, [pc, #304]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b670:	4613      	mov	r3, r2
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	2258      	movs	r2, #88	; 0x58
 800b67a:	fb01 f202 	mul.w	r2, r1, r2
 800b67e:	4413      	add	r3, r2
 800b680:	4403      	add	r3, r0
 800b682:	332c      	adds	r3, #44	; 0x2c
 800b684:	edd3 7a00 	vldr	s15, [r3]
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b68e:	4a44      	ldr	r2, [pc, #272]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b690:	2158      	movs	r1, #88	; 0x58
 800b692:	fb01 f303 	mul.w	r3, r1, r3
 800b696:	4413      	add	r3, r2
 800b698:	3354      	adds	r3, #84	; 0x54
 800b69a:	edc3 7a00 	vstr	s15, [r3]
					 temp =(float) muRawCurData [ i ] *K/RR;
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	4a37      	ldr	r2, [pc, #220]	; (800b780 <vDataConvertToFloat+0x300>)
 800b6a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ae:	ee17 0a90 	vmov	r0, s15
 800b6b2:	f7f4 fef1 	bl	8000498 <__aeabi_f2d>
 800b6b6:	a330      	add	r3, pc, #192	; (adr r3, 800b778 <vDataConvertToFloat+0x2f8>)
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	f7f4 ff44 	bl	8000548 <__aeabi_dmul>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f04f 0200 	mov.w	r2, #0
 800b6cc:	4b35      	ldr	r3, [pc, #212]	; (800b7a4 <vDataConvertToFloat+0x324>)
 800b6ce:	f7f5 f865 	bl	800079c <__aeabi_ddiv>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	f7f5 f947 	bl	800096c <__aeabi_d2f>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	603b      	str	r3, [r7, #0]
					 out[i].current =  out[i].current * temp;
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	4a2e      	ldr	r2, [pc, #184]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b6e6:	2158      	movs	r1, #88	; 0x58
 800b6e8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ec:	4413      	add	r3, r2
 800b6ee:	3354      	adds	r3, #84	; 0x54
 800b6f0:	ed93 7a00 	vldr	s14, [r3]
 800b6f4:	79fb      	ldrb	r3, [r7, #7]
 800b6f6:	edd7 7a00 	vldr	s15, [r7]
 800b6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fe:	4a28      	ldr	r2, [pc, #160]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b700:	2158      	movs	r1, #88	; 0x58
 800b702:	fb01 f303 	mul.w	r3, r1, r3
 800b706:	4413      	add	r3, r2
 800b708:	3354      	adds	r3, #84	; 0x54
 800b70a:	edc3 7a00 	vstr	s15, [r3]
					 if (out[i].current > out[i].power )
 800b70e:	79fb      	ldrb	r3, [r7, #7]
 800b710:	4a23      	ldr	r2, [pc, #140]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b712:	2158      	movs	r1, #88	; 0x58
 800b714:	fb01 f303 	mul.w	r3, r1, r3
 800b718:	4413      	add	r3, r2
 800b71a:	3354      	adds	r3, #84	; 0x54
 800b71c:	ed93 7a00 	vldr	s14, [r3]
 800b720:	79fb      	ldrb	r3, [r7, #7]
 800b722:	4a1f      	ldr	r2, [pc, #124]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b724:	2158      	movs	r1, #88	; 0x58
 800b726:	fb01 f303 	mul.w	r3, r1, r3
 800b72a:	4413      	add	r3, r2
 800b72c:	330c      	adds	r3, #12
 800b72e:	edd3 7a00 	vldr	s15, [r3]
 800b732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73a:	dc00      	bgt.n	800b73e <vDataConvertToFloat+0x2be>
					 {
						 out[i].error_flag = ERROR_OVERLOAD;
					 }
					 break;
 800b73c:	e010      	b.n	800b760 <vDataConvertToFloat+0x2e0>
						 out[i].error_flag = ERROR_OVERLOAD;
 800b73e:	79fb      	ldrb	r3, [r7, #7]
 800b740:	4a17      	ldr	r2, [pc, #92]	; (800b7a0 <vDataConvertToFloat+0x320>)
 800b742:	2158      	movs	r1, #88	; 0x58
 800b744:	fb01 f303 	mul.w	r3, r1, r3
 800b748:	4413      	add	r3, r2
 800b74a:	3320      	adds	r3, #32
 800b74c:	2202      	movs	r2, #2
 800b74e:	701a      	strb	r2, [r3, #0]
					 break;
 800b750:	e006      	b.n	800b760 <vDataConvertToFloat+0x2e0>
			 for (uint8_t r = 0; r < 4U; r++)
 800b752:	79bb      	ldrb	r3, [r7, #6]
 800b754:	3301      	adds	r3, #1
 800b756:	71bb      	strb	r3, [r7, #6]
 800b758:	79bb      	ldrb	r3, [r7, #6]
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	f67f af33 	bls.w	800b5c6 <vDataConvertToFloat+0x146>
	 for ( i =0; i < 20U ; i++)
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	3301      	adds	r3, #1
 800b764:	71fb      	strb	r3, [r7, #7]
 800b766:	79fb      	ldrb	r3, [r7, #7]
 800b768:	2b13      	cmp	r3, #19
 800b76a:	f67f af0e 	bls.w	800b58a <vDataConvertToFloat+0x10a>
				 }
			 }
		 }
	}
}
 800b76e:	bf00      	nop
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	bd90      	pop	{r4, r7, pc}
 800b778:	e734d9b4 	.word	0xe734d9b4
 800b77c:	3f4a680c 	.word	0x3f4a680c
 800b780:	20006380 	.word	0x20006380
 800b784:	20005c0c 	.word	0x20005c0c
 800b788:	200063a8 	.word	0x200063a8
 800b78c:	20005c3c 	.word	0x20005c3c
 800b790:	20005c68 	.word	0x20005c68
 800b794:	000222e0 	.word	0x000222e0
 800b798:	6fd91d85 	.word	0x6fd91d85
 800b79c:	200063b0 	.word	0x200063b0
 800b7a0:	20005ca0 	.word	0x20005ca0
 800b7a4:	408f4000 	.word	0x408f4000

0800b7a8 <vOutContolTask>:


void vOutContolTask(void * argument)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
	uint8_t temp_power,cur_power;
	xOutEvent = xEventGroupCreateStatic(&xOutCreatedEventGroup );
 800b7b0:	48ac      	ldr	r0, [pc, #688]	; (800ba64 <vOutContolTask+0x2bc>)
 800b7b2:	f7fc fac7 	bl	8007d44 <xEventGroupCreateStatic>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	4aab      	ldr	r2, [pc, #684]	; (800ba68 <vOutContolTask+0x2c0>)
 800b7ba:	6013      	str	r3, [r2, #0]
	EventBits_t config_state;
	vOutInit();
 800b7bc:	f7ff fcb0 	bl	800b120 <vOutInit>
	for(;;)
	{
		   vTaskDelay(1);
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	f7fd fc23 	bl	800900c <vTaskDelay>
		   config_state = xEventGroupGetBits (xOutEvent); //Получаем состоние конфигурационных флагов
 800b7c6:	4ba8      	ldr	r3, [pc, #672]	; (800ba68 <vOutContolTask+0x2c0>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fc fbbf 	bl	8007f50 <xEventGroupClearBits>
 800b7d2:	6138      	str	r0, [r7, #16]
			for (uint8_t i=0; i<OUT_COUNT;i++)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	75bb      	strb	r3, [r7, #22]
 800b7d8:	e19e      	b.n	800bb18 <vOutContolTask+0x370>
			{
				if ( (config_state & ((uint32_t)0x1< i)) ==0 ) //Если канал не находится в режиме конфигурации, то переходим к обработке
 800b7da:	7dbb      	ldrb	r3, [r7, #22]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	bf8c      	ite	hi
 800b7e0:	2301      	movhi	r3, #1
 800b7e2:	2300      	movls	r3, #0
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f040 8189 	bne.w	800bb04 <vOutContolTask+0x35c>
				{
					switch (out[i].out_state)
 800b7f2:	7dbb      	ldrb	r3, [r7, #22]
 800b7f4:	4a9d      	ldr	r2, [pc, #628]	; (800ba6c <vOutContolTask+0x2c4>)
 800b7f6:	2158      	movs	r1, #88	; 0x58
 800b7f8:	fb01 f303 	mul.w	r3, r1, r3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	3309      	adds	r3, #9
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2b10      	cmp	r3, #16
 800b804:	f200 8185 	bhi.w	800bb12 <vOutContolTask+0x36a>
 800b808:	a201      	add	r2, pc, #4	; (adr r2, 800b810 <vOutContolTask+0x68>)
 800b80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80e:	bf00      	nop
 800b810:	0800b855 	.word	0x0800b855
 800b814:	0800b895 	.word	0x0800b895
 800b818:	0800b9a1 	.word	0x0800b9a1
 800b81c:	0800bb13 	.word	0x0800bb13
 800b820:	0800bb13 	.word	0x0800bb13
 800b824:	0800bb13 	.word	0x0800bb13
 800b828:	0800bb13 	.word	0x0800bb13
 800b82c:	0800bb13 	.word	0x0800bb13
 800b830:	0800ba17 	.word	0x0800ba17
 800b834:	0800bb13 	.word	0x0800bb13
 800b838:	0800bb13 	.word	0x0800bb13
 800b83c:	0800bb13 	.word	0x0800bb13
 800b840:	0800bb13 	.word	0x0800bb13
 800b844:	0800bb13 	.word	0x0800bb13
 800b848:	0800bb13 	.word	0x0800bb13
 800b84c:	0800bb13 	.word	0x0800bb13
 800b850:	0800ba71 	.word	0x0800ba71
					{
					case STATE_OUT_OFF: //Состония входа - выключен
							if (out[i].out_logic_state == OUT_ON)  //Если обнаружено логическое соостония -вкл, то переходим в состония включения
 800b854:	7dbb      	ldrb	r3, [r7, #22]
 800b856:	4a85      	ldr	r2, [pc, #532]	; (800ba6c <vOutContolTask+0x2c4>)
 800b858:	2158      	movs	r1, #88	; 0x58
 800b85a:	fb01 f303 	mul.w	r3, r1, r3
 800b85e:	4413      	add	r3, r2
 800b860:	3308      	adds	r3, #8
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	f040 814f 	bne.w	800bb08 <vOutContolTask+0x360>
							{
								out[i].out_state = STATE_OUT_ON_PROCESS;
 800b86a:	7dbb      	ldrb	r3, [r7, #22]
 800b86c:	4a7f      	ldr	r2, [pc, #508]	; (800ba6c <vOutContolTask+0x2c4>)
 800b86e:	2158      	movs	r1, #88	; 0x58
 800b870:	fb01 f303 	mul.w	r3, r1, r3
 800b874:	4413      	add	r3, r2
 800b876:	3309      	adds	r3, #9
 800b878:	2201      	movs	r2, #1
 800b87a:	701a      	strb	r2, [r3, #0]
								out[i].overload_timer = 0U;
 800b87c:	7dbb      	ldrb	r3, [r7, #22]
 800b87e:	4a7b      	ldr	r2, [pc, #492]	; (800ba6c <vOutContolTask+0x2c4>)
 800b880:	2158      	movs	r1, #88	; 0x58
 800b882:	fb01 f303 	mul.w	r3, r1, r3
 800b886:	4413      	add	r3, r2
 800b888:	3318      	adds	r3, #24
 800b88a:	2200      	movs	r2, #0
 800b88c:	801a      	strh	r2, [r3, #0]
								cur_power = START_POWER;
 800b88e:	231e      	movs	r3, #30
 800b890:	75fb      	strb	r3, [r7, #23]
							}
							break;
 800b892:	e139      	b.n	800bb08 <vOutContolTask+0x360>
					case STATE_OUT_ON_PROCESS: //Состояния влючения
							out[i].overload_timer++;
 800b894:	7dbb      	ldrb	r3, [r7, #22]
 800b896:	4975      	ldr	r1, [pc, #468]	; (800ba6c <vOutContolTask+0x2c4>)
 800b898:	2258      	movs	r2, #88	; 0x58
 800b89a:	fb03 f202 	mul.w	r2, r3, r2
 800b89e:	440a      	add	r2, r1
 800b8a0:	3218      	adds	r2, #24
 800b8a2:	8812      	ldrh	r2, [r2, #0]
 800b8a4:	3201      	adds	r2, #1
 800b8a6:	b290      	uxth	r0, r2
 800b8a8:	4a70      	ldr	r2, [pc, #448]	; (800ba6c <vOutContolTask+0x2c4>)
 800b8aa:	2158      	movs	r1, #88	; 0x58
 800b8ac:	fb01 f303 	mul.w	r3, r1, r3
 800b8b0:	4413      	add	r3, r2
 800b8b2:	3318      	adds	r3, #24
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	801a      	strh	r2, [r3, #0]
							if ( (out[i].error_flag == ERROR_ON) || (out[i].error_flag == ERROR_OVERLOAD) ) //Если обнаружена перегрузка
 800b8b8:	7dbb      	ldrb	r3, [r7, #22]
 800b8ba:	4a6c      	ldr	r2, [pc, #432]	; (800ba6c <vOutContolTask+0x2c4>)
 800b8bc:	2158      	movs	r1, #88	; 0x58
 800b8be:	fb01 f303 	mul.w	r3, r1, r3
 800b8c2:	4413      	add	r3, r2
 800b8c4:	3320      	adds	r3, #32
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d009      	beq.n	800b8e0 <vOutContolTask+0x138>
 800b8cc:	7dbb      	ldrb	r3, [r7, #22]
 800b8ce:	4a67      	ldr	r2, [pc, #412]	; (800ba6c <vOutContolTask+0x2c4>)
 800b8d0:	2158      	movs	r1, #88	; 0x58
 800b8d2:	fb01 f303 	mul.w	r3, r1, r3
 800b8d6:	4413      	add	r3, r2
 800b8d8:	3320      	adds	r3, #32
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d10d      	bne.n	800b8fc <vOutContolTask+0x154>
							{
								vHWOutResete(i);  //Выключаем выход
 800b8e0:	7dbb      	ldrb	r3, [r7, #22]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff fb6a 	bl	800afbc <vHWOutResete>
								out[i].out_state = STATE_OUT_ERROR_PROCESS; //Переходим в состония бработки ошибок
 800b8e8:	7dbb      	ldrb	r3, [r7, #22]
 800b8ea:	4a60      	ldr	r2, [pc, #384]	; (800ba6c <vOutContolTask+0x2c4>)
 800b8ec:	2158      	movs	r1, #88	; 0x58
 800b8ee:	fb01 f303 	mul.w	r3, r1, r3
 800b8f2:	4413      	add	r3, r2
 800b8f4:	3309      	adds	r3, #9
 800b8f6:	2208      	movs	r2, #8
 800b8f8:	701a      	strb	r2, [r3, #0]
								break;
 800b8fa:	e10a      	b.n	800bb12 <vOutContolTask+0x36a>
							}
							if  ( out[i].overload_timer >= out[i].overload_config_timer ) //Если прошло время полонго пуска
 800b8fc:	7dbb      	ldrb	r3, [r7, #22]
 800b8fe:	4a5b      	ldr	r2, [pc, #364]	; (800ba6c <vOutContolTask+0x2c4>)
 800b900:	2158      	movs	r1, #88	; 0x58
 800b902:	fb01 f303 	mul.w	r3, r1, r3
 800b906:	4413      	add	r3, r2
 800b908:	3318      	adds	r3, #24
 800b90a:	881a      	ldrh	r2, [r3, #0]
 800b90c:	7dbb      	ldrb	r3, [r7, #22]
 800b90e:	4957      	ldr	r1, [pc, #348]	; (800ba6c <vOutContolTask+0x2c4>)
 800b910:	2058      	movs	r0, #88	; 0x58
 800b912:	fb00 f303 	mul.w	r3, r0, r3
 800b916:	440b      	add	r3, r1
 800b918:	3316      	adds	r3, #22
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d30b      	bcc.n	800b938 <vOutContolTask+0x190>
							{
									out[i].out_state = STATE_OUT_ON; //переходим в стосония влючено и запускаем выход на 100% мощности
 800b920:	7dbb      	ldrb	r3, [r7, #22]
 800b922:	4a52      	ldr	r2, [pc, #328]	; (800ba6c <vOutContolTask+0x2c4>)
 800b924:	2158      	movs	r1, #88	; 0x58
 800b926:	fb01 f303 	mul.w	r3, r1, r3
 800b92a:	4413      	add	r3, r2
 800b92c:	3309      	adds	r3, #9
 800b92e:	2202      	movs	r2, #2
 800b930:	701a      	strb	r2, [r3, #0]
									cur_power = 100;
 800b932:	2364      	movs	r3, #100	; 0x64
 800b934:	75fb      	strb	r3, [r7, #23]
 800b936:	e02c      	b.n	800b992 <vOutContolTask+0x1ea>
							}
							else
							{   //время пуска не прошоло, вычисляем текущую мощность, котору надо пдать на выход.
								temp_power =(uint8_t) (float)out[i].overload_timer/out[i].overload_config_timer*100;
 800b938:	7dbb      	ldrb	r3, [r7, #22]
 800b93a:	4a4c      	ldr	r2, [pc, #304]	; (800ba6c <vOutContolTask+0x2c4>)
 800b93c:	2158      	movs	r1, #88	; 0x58
 800b93e:	fb01 f303 	mul.w	r3, r1, r3
 800b942:	4413      	add	r3, r2
 800b944:	3318      	adds	r3, #24
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	ee07 3a90 	vmov	s15, r3
 800b94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b954:	edc7 7a00 	vstr	s15, [r7]
 800b958:	783b      	ldrb	r3, [r7, #0]
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	4618      	mov	r0, r3
 800b95e:	7dbb      	ldrb	r3, [r7, #22]
 800b960:	4a42      	ldr	r2, [pc, #264]	; (800ba6c <vOutContolTask+0x2c4>)
 800b962:	2158      	movs	r1, #88	; 0x58
 800b964:	fb01 f303 	mul.w	r3, r1, r3
 800b968:	4413      	add	r3, r2
 800b96a:	3316      	adds	r3, #22
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	fb90 f3f3 	sdiv	r3, r0, r3
 800b972:	b2db      	uxtb	r3, r3
 800b974:	461a      	mov	r2, r3
 800b976:	0092      	lsls	r2, r2, #2
 800b978:	4413      	add	r3, r2
 800b97a:	461a      	mov	r2, r3
 800b97c:	0091      	lsls	r1, r2, #2
 800b97e:	461a      	mov	r2, r3
 800b980:	460b      	mov	r3, r1
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	73fb      	strb	r3, [r7, #15]
								if (temp_power > START_POWER)
 800b988:	7bfb      	ldrb	r3, [r7, #15]
 800b98a:	2b1e      	cmp	r3, #30
 800b98c:	d901      	bls.n	800b992 <vOutContolTask+0x1ea>
								{
									cur_power = temp_power;
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	75fb      	strb	r3, [r7, #23]
								}
							}
							vHWOutSet(i,cur_power);
 800b992:	7dfa      	ldrb	r2, [r7, #23]
 800b994:	7dbb      	ldrb	r3, [r7, #22]
 800b996:	4611      	mov	r1, r2
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff fb3b 	bl	800b014 <vHWOutSet>
							break;
 800b99e:	e0b8      	b.n	800bb12 <vOutContolTask+0x36a>
						case STATE_OUT_ON:  // Состояние входа - включен
								//Если система обнаружила ошибку ключа или ток больше номинального
								if ( (out[i].error_flag == ERROR_ON) || (out[i].error_flag == ERROR_OVERLOAD) )
 800b9a0:	7dbb      	ldrb	r3, [r7, #22]
 800b9a2:	4a32      	ldr	r2, [pc, #200]	; (800ba6c <vOutContolTask+0x2c4>)
 800b9a4:	2158      	movs	r1, #88	; 0x58
 800b9a6:	fb01 f303 	mul.w	r3, r1, r3
 800b9aa:	4413      	add	r3, r2
 800b9ac:	3320      	adds	r3, #32
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d009      	beq.n	800b9c8 <vOutContolTask+0x220>
 800b9b4:	7dbb      	ldrb	r3, [r7, #22]
 800b9b6:	4a2d      	ldr	r2, [pc, #180]	; (800ba6c <vOutContolTask+0x2c4>)
 800b9b8:	2158      	movs	r1, #88	; 0x58
 800b9ba:	fb01 f303 	mul.w	r3, r1, r3
 800b9be:	4413      	add	r3, r2
 800b9c0:	3320      	adds	r3, #32
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d10d      	bne.n	800b9e4 <vOutContolTask+0x23c>
								{
									vHWOutResete(i);
 800b9c8:	7dbb      	ldrb	r3, [r7, #22]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff faf6 	bl	800afbc <vHWOutResete>
									out[i].out_state = STATE_OUT_ERROR_PROCESS;
 800b9d0:	7dbb      	ldrb	r3, [r7, #22]
 800b9d2:	4a26      	ldr	r2, [pc, #152]	; (800ba6c <vOutContolTask+0x2c4>)
 800b9d4:	2158      	movs	r1, #88	; 0x58
 800b9d6:	fb01 f303 	mul.w	r3, r1, r3
 800b9da:	4413      	add	r3, r2
 800b9dc:	3309      	adds	r3, #9
 800b9de:	2208      	movs	r2, #8
 800b9e0:	701a      	strb	r2, [r3, #0]
									break;
 800b9e2:	e096      	b.n	800bb12 <vOutContolTask+0x36a>
								}
								if  (out[i].out_logic_state == OUT_OFF)
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	4a21      	ldr	r2, [pc, #132]	; (800ba6c <vOutContolTask+0x2c4>)
 800b9e8:	2158      	movs	r1, #88	; 0x58
 800b9ea:	fb01 f303 	mul.w	r3, r1, r3
 800b9ee:	4413      	add	r3, r2
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	f040 8089 	bne.w	800bb0c <vOutContolTask+0x364>
								{
									vHWOutResete(i);
 800b9fa:	7dbb      	ldrb	r3, [r7, #22]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff fadd 	bl	800afbc <vHWOutResete>
									out[i].out_state = STATE_OUT_OFF;
 800ba02:	7dbb      	ldrb	r3, [r7, #22]
 800ba04:	4a19      	ldr	r2, [pc, #100]	; (800ba6c <vOutContolTask+0x2c4>)
 800ba06:	2158      	movs	r1, #88	; 0x58
 800ba08:	fb01 f303 	mul.w	r3, r1, r3
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3309      	adds	r3, #9
 800ba10:	2200      	movs	r2, #0
 800ba12:	701a      	strb	r2, [r3, #0]
								}
								break;
 800ba14:	e07a      	b.n	800bb0c <vOutContolTask+0x364>
						case STATE_OUT_ERROR_PROCESS:
							   if (out[i].error_count == 1)
 800ba16:	7dbb      	ldrb	r3, [r7, #22]
 800ba18:	4a14      	ldr	r2, [pc, #80]	; (800ba6c <vOutContolTask+0x2c4>)
 800ba1a:	2158      	movs	r1, #88	; 0x58
 800ba1c:	fb01 f303 	mul.w	r3, r1, r3
 800ba20:	4413      	add	r3, r2
 800ba22:	331a      	adds	r3, #26
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d109      	bne.n	800ba3e <vOutContolTask+0x296>
							   {
								   out[i].out_state = STATE_OUT_ERROR;
 800ba2a:	7dbb      	ldrb	r3, [r7, #22]
 800ba2c:	4a0f      	ldr	r2, [pc, #60]	; (800ba6c <vOutContolTask+0x2c4>)
 800ba2e:	2158      	movs	r1, #88	; 0x58
 800ba30:	fb01 f303 	mul.w	r3, r1, r3
 800ba34:	4413      	add	r3, r2
 800ba36:	3309      	adds	r3, #9
 800ba38:	2204      	movs	r2, #4
 800ba3a:	701a      	strb	r2, [r3, #0]
								   break;
 800ba3c:	e069      	b.n	800bb12 <vOutContolTask+0x36a>
							   }
							   out[i].restart_timer = 0U;
 800ba3e:	7dbb      	ldrb	r3, [r7, #22]
 800ba40:	4a0a      	ldr	r2, [pc, #40]	; (800ba6c <vOutContolTask+0x2c4>)
 800ba42:	2158      	movs	r1, #88	; 0x58
 800ba44:	fb01 f303 	mul.w	r3, r1, r3
 800ba48:	4413      	add	r3, r2
 800ba4a:	331c      	adds	r3, #28
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	801a      	strh	r2, [r3, #0]
							   out[i].out_state = STATE_OUT_RESTART_PROCESS;
 800ba50:	7dbb      	ldrb	r3, [r7, #22]
 800ba52:	4a06      	ldr	r2, [pc, #24]	; (800ba6c <vOutContolTask+0x2c4>)
 800ba54:	2158      	movs	r1, #88	; 0x58
 800ba56:	fb01 f303 	mul.w	r3, r1, r3
 800ba5a:	4413      	add	r3, r2
 800ba5c:	3309      	adds	r3, #9
 800ba5e:	2210      	movs	r2, #16
 800ba60:	701a      	strb	r2, [r3, #0]
							   break;
 800ba62:	e056      	b.n	800bb12 <vOutContolTask+0x36a>
 800ba64:	200063ec 	.word	0x200063ec
 800ba68:	200063e8 	.word	0x200063e8
 800ba6c:	20005ca0 	.word	0x20005ca0
						case STATE_OUT_ERROR:
							 break;
						case STATE_OUT_RESTART_PROCESS:
							out[i].restart_timer++;
 800ba70:	7dbb      	ldrb	r3, [r7, #22]
 800ba72:	492c      	ldr	r1, [pc, #176]	; (800bb24 <vOutContolTask+0x37c>)
 800ba74:	2258      	movs	r2, #88	; 0x58
 800ba76:	fb03 f202 	mul.w	r2, r3, r2
 800ba7a:	440a      	add	r2, r1
 800ba7c:	321c      	adds	r2, #28
 800ba7e:	8812      	ldrh	r2, [r2, #0]
 800ba80:	3201      	adds	r2, #1
 800ba82:	b290      	uxth	r0, r2
 800ba84:	4a27      	ldr	r2, [pc, #156]	; (800bb24 <vOutContolTask+0x37c>)
 800ba86:	2158      	movs	r1, #88	; 0x58
 800ba88:	fb01 f303 	mul.w	r3, r1, r3
 800ba8c:	4413      	add	r3, r2
 800ba8e:	331c      	adds	r3, #28
 800ba90:	4602      	mov	r2, r0
 800ba92:	801a      	strh	r2, [r3, #0]
							if  ( out[i].restart_timer >= out[i].restart_config_timer )
 800ba94:	7dbb      	ldrb	r3, [r7, #22]
 800ba96:	4a23      	ldr	r2, [pc, #140]	; (800bb24 <vOutContolTask+0x37c>)
 800ba98:	2158      	movs	r1, #88	; 0x58
 800ba9a:	fb01 f303 	mul.w	r3, r1, r3
 800ba9e:	4413      	add	r3, r2
 800baa0:	331c      	adds	r3, #28
 800baa2:	881a      	ldrh	r2, [r3, #0]
 800baa4:	7dbb      	ldrb	r3, [r7, #22]
 800baa6:	491f      	ldr	r1, [pc, #124]	; (800bb24 <vOutContolTask+0x37c>)
 800baa8:	2058      	movs	r0, #88	; 0x58
 800baaa:	fb00 f303 	mul.w	r3, r0, r3
 800baae:	440b      	add	r3, r1
 800bab0:	331e      	adds	r3, #30
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d32b      	bcc.n	800bb10 <vOutContolTask+0x368>
							{
								if (out[i].error_count > 1)
 800bab8:	7dbb      	ldrb	r3, [r7, #22]
 800baba:	4a1a      	ldr	r2, [pc, #104]	; (800bb24 <vOutContolTask+0x37c>)
 800babc:	2158      	movs	r1, #88	; 0x58
 800babe:	fb01 f303 	mul.w	r3, r1, r3
 800bac2:	4413      	add	r3, r2
 800bac4:	331a      	adds	r3, #26
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d921      	bls.n	800bb10 <vOutContolTask+0x368>
								{
									out[i].out_state = STATE_OUT_OFF;
 800bacc:	7dbb      	ldrb	r3, [r7, #22]
 800bace:	4a15      	ldr	r2, [pc, #84]	; (800bb24 <vOutContolTask+0x37c>)
 800bad0:	2158      	movs	r1, #88	; 0x58
 800bad2:	fb01 f303 	mul.w	r3, r1, r3
 800bad6:	4413      	add	r3, r2
 800bad8:	3309      	adds	r3, #9
 800bada:	2200      	movs	r2, #0
 800badc:	701a      	strb	r2, [r3, #0]
									out[i].error_count--;
 800bade:	7dbb      	ldrb	r3, [r7, #22]
 800bae0:	4910      	ldr	r1, [pc, #64]	; (800bb24 <vOutContolTask+0x37c>)
 800bae2:	2258      	movs	r2, #88	; 0x58
 800bae4:	fb03 f202 	mul.w	r2, r3, r2
 800bae8:	440a      	add	r2, r1
 800baea:	321a      	adds	r2, #26
 800baec:	7812      	ldrb	r2, [r2, #0]
 800baee:	3a01      	subs	r2, #1
 800baf0:	b2d0      	uxtb	r0, r2
 800baf2:	4a0c      	ldr	r2, [pc, #48]	; (800bb24 <vOutContolTask+0x37c>)
 800baf4:	2158      	movs	r1, #88	; 0x58
 800baf6:	fb01 f303 	mul.w	r3, r1, r3
 800bafa:	4413      	add	r3, r2
 800bafc:	331a      	adds	r3, #26
 800bafe:	4602      	mov	r2, r0
 800bb00:	701a      	strb	r2, [r3, #0]
									break;
 800bb02:	e006      	b.n	800bb12 <vOutContolTask+0x36a>
								}
							}
							break;
					}
				}
 800bb04:	bf00      	nop
 800bb06:	e004      	b.n	800bb12 <vOutContolTask+0x36a>
							break;
 800bb08:	bf00      	nop
 800bb0a:	e002      	b.n	800bb12 <vOutContolTask+0x36a>
								break;
 800bb0c:	bf00      	nop
 800bb0e:	e000      	b.n	800bb12 <vOutContolTask+0x36a>
							break;
 800bb10:	bf00      	nop
			for (uint8_t i=0; i<OUT_COUNT;i++)
 800bb12:	7dbb      	ldrb	r3, [r7, #22]
 800bb14:	3301      	adds	r3, #1
 800bb16:	75bb      	strb	r3, [r7, #22]
 800bb18:	7dbb      	ldrb	r3, [r7, #22]
 800bb1a:	2b13      	cmp	r3, #19
 800bb1c:	f67f ae5d 	bls.w	800b7da <vOutContolTask+0x32>
		   vTaskDelay(1);
 800bb20:	e64e      	b.n	800b7c0 <vOutContolTask+0x18>
 800bb22:	bf00      	nop
 800bb24:	20005ca0 	.word	0x20005ca0

0800bb28 <vADC_Ready>:
}



 void vADC_Ready ( uint8_t adc_number )
 {
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	71fb      	strb	r3, [r7, #7]
   static portBASE_TYPE xHigherPriorityTaskWoken;

   xHigherPriorityTaskWoken = pdFALSE;
 800bb32:	4b1b      	ldr	r3, [pc, #108]	; (800bba0 <vADC_Ready+0x78>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]
   switch ( adc_number )
 800bb38:	79fb      	ldrb	r3, [r7, #7]
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d006      	beq.n	800bb4c <vADC_Ready+0x24>
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	dc1c      	bgt.n	800bb7c <vADC_Ready+0x54>
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d012      	beq.n	800bb6c <vADC_Ready+0x44>
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d008      	beq.n	800bb5c <vADC_Ready+0x34>
       break;
     case ADC1_READY:
       xEventGroupSetBitsFromISR( xADCEvent, ADC1_READY, &xHigherPriorityTaskWoken );
       break;
     default:
       break;
 800bb4a:	e017      	b.n	800bb7c <vADC_Ready+0x54>
       xEventGroupSetBitsFromISR( xADCEvent, ADC3_READY, &xHigherPriorityTaskWoken );
 800bb4c:	4b15      	ldr	r3, [pc, #84]	; (800bba4 <vADC_Ready+0x7c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a13      	ldr	r2, [pc, #76]	; (800bba0 <vADC_Ready+0x78>)
 800bb52:	2104      	movs	r1, #4
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fc faed 	bl	8008134 <xEventGroupSetBitsFromISR>
       break;
 800bb5a:	e010      	b.n	800bb7e <vADC_Ready+0x56>
       xEventGroupSetBitsFromISR( xADCEvent, ADC2_READY, &xHigherPriorityTaskWoken );
 800bb5c:	4b11      	ldr	r3, [pc, #68]	; (800bba4 <vADC_Ready+0x7c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a0f      	ldr	r2, [pc, #60]	; (800bba0 <vADC_Ready+0x78>)
 800bb62:	2102      	movs	r1, #2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fc fae5 	bl	8008134 <xEventGroupSetBitsFromISR>
       break;
 800bb6a:	e008      	b.n	800bb7e <vADC_Ready+0x56>
       xEventGroupSetBitsFromISR( xADCEvent, ADC1_READY, &xHigherPriorityTaskWoken );
 800bb6c:	4b0d      	ldr	r3, [pc, #52]	; (800bba4 <vADC_Ready+0x7c>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a0b      	ldr	r2, [pc, #44]	; (800bba0 <vADC_Ready+0x78>)
 800bb72:	2101      	movs	r1, #1
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fc fadd 	bl	8008134 <xEventGroupSetBitsFromISR>
       break;
 800bb7a:	e000      	b.n	800bb7e <vADC_Ready+0x56>
       break;
 800bb7c:	bf00      	nop
   }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800bb7e:	4b08      	ldr	r3, [pc, #32]	; (800bba0 <vADC_Ready+0x78>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d008      	beq.n	800bb98 <vADC_Ready+0x70>
 800bb86:	4b08      	ldr	r3, [pc, #32]	; (800bba8 <vADC_Ready+0x80>)
 800bb88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	f3bf 8f6f 	isb	sy
   return;
 800bb96:	bf00      	nop
 800bb98:	bf00      	nop
 }
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	2000640c 	.word	0x2000640c
 800bba4:	200063c4 	.word	0x200063c4
 800bba8:	e000ed04 	.word	0xe000ed04

0800bbac <vLuaTask>:
#include "FreeRTOS.h"
#include "script.c"


void vLuaTask(void *argument)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 //    luaL_openlibs(L); // open standard libraries
 //    luaL_loadstring(L, lib );
 //    luaL_loadstring(L, mainscript);
	 while(1)
	 {
		  vTaskDelay(1 );
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	f7fd fa29 	bl	800900c <vTaskDelay>
	 {
 800bbba:	e7fb      	b.n	800bbb4 <vLuaTask+0x8>

0800bbbc <__libc_init_array>:
 800bbbc:	b570      	push	{r4, r5, r6, lr}
 800bbbe:	4d0d      	ldr	r5, [pc, #52]	; (800bbf4 <__libc_init_array+0x38>)
 800bbc0:	4c0d      	ldr	r4, [pc, #52]	; (800bbf8 <__libc_init_array+0x3c>)
 800bbc2:	1b64      	subs	r4, r4, r5
 800bbc4:	10a4      	asrs	r4, r4, #2
 800bbc6:	2600      	movs	r6, #0
 800bbc8:	42a6      	cmp	r6, r4
 800bbca:	d109      	bne.n	800bbe0 <__libc_init_array+0x24>
 800bbcc:	4d0b      	ldr	r5, [pc, #44]	; (800bbfc <__libc_init_array+0x40>)
 800bbce:	4c0c      	ldr	r4, [pc, #48]	; (800bc00 <__libc_init_array+0x44>)
 800bbd0:	f000 f8f2 	bl	800bdb8 <_init>
 800bbd4:	1b64      	subs	r4, r4, r5
 800bbd6:	10a4      	asrs	r4, r4, #2
 800bbd8:	2600      	movs	r6, #0
 800bbda:	42a6      	cmp	r6, r4
 800bbdc:	d105      	bne.n	800bbea <__libc_init_array+0x2e>
 800bbde:	bd70      	pop	{r4, r5, r6, pc}
 800bbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe4:	4798      	blx	r3
 800bbe6:	3601      	adds	r6, #1
 800bbe8:	e7ee      	b.n	800bbc8 <__libc_init_array+0xc>
 800bbea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbee:	4798      	blx	r3
 800bbf0:	3601      	adds	r6, #1
 800bbf2:	e7f2      	b.n	800bbda <__libc_init_array+0x1e>
 800bbf4:	0800bf2c 	.word	0x0800bf2c
 800bbf8:	0800bf2c 	.word	0x0800bf2c
 800bbfc:	0800bf2c 	.word	0x0800bf2c
 800bc00:	0800bf30 	.word	0x0800bf30

0800bc04 <__retarget_lock_acquire_recursive>:
 800bc04:	4770      	bx	lr

0800bc06 <__retarget_lock_release_recursive>:
 800bc06:	4770      	bx	lr

0800bc08 <memcpy>:
 800bc08:	440a      	add	r2, r1
 800bc0a:	4291      	cmp	r1, r2
 800bc0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc10:	d100      	bne.n	800bc14 <memcpy+0xc>
 800bc12:	4770      	bx	lr
 800bc14:	b510      	push	{r4, lr}
 800bc16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc1e:	4291      	cmp	r1, r2
 800bc20:	d1f9      	bne.n	800bc16 <memcpy+0xe>
 800bc22:	bd10      	pop	{r4, pc}

0800bc24 <memset>:
 800bc24:	4402      	add	r2, r0
 800bc26:	4603      	mov	r3, r0
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d100      	bne.n	800bc2e <memset+0xa>
 800bc2c:	4770      	bx	lr
 800bc2e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc32:	e7f9      	b.n	800bc28 <memset+0x4>

0800bc34 <_free_r>:
 800bc34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc36:	2900      	cmp	r1, #0
 800bc38:	d044      	beq.n	800bcc4 <_free_r+0x90>
 800bc3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc3e:	9001      	str	r0, [sp, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f1a1 0404 	sub.w	r4, r1, #4
 800bc46:	bfb8      	it	lt
 800bc48:	18e4      	addlt	r4, r4, r3
 800bc4a:	f000 f8a9 	bl	800bda0 <__malloc_lock>
 800bc4e:	4a1e      	ldr	r2, [pc, #120]	; (800bcc8 <_free_r+0x94>)
 800bc50:	9801      	ldr	r0, [sp, #4]
 800bc52:	6813      	ldr	r3, [r2, #0]
 800bc54:	b933      	cbnz	r3, 800bc64 <_free_r+0x30>
 800bc56:	6063      	str	r3, [r4, #4]
 800bc58:	6014      	str	r4, [r2, #0]
 800bc5a:	b003      	add	sp, #12
 800bc5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc60:	f000 b8a4 	b.w	800bdac <__malloc_unlock>
 800bc64:	42a3      	cmp	r3, r4
 800bc66:	d908      	bls.n	800bc7a <_free_r+0x46>
 800bc68:	6825      	ldr	r5, [r4, #0]
 800bc6a:	1961      	adds	r1, r4, r5
 800bc6c:	428b      	cmp	r3, r1
 800bc6e:	bf01      	itttt	eq
 800bc70:	6819      	ldreq	r1, [r3, #0]
 800bc72:	685b      	ldreq	r3, [r3, #4]
 800bc74:	1949      	addeq	r1, r1, r5
 800bc76:	6021      	streq	r1, [r4, #0]
 800bc78:	e7ed      	b.n	800bc56 <_free_r+0x22>
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	b10b      	cbz	r3, 800bc84 <_free_r+0x50>
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	d9fa      	bls.n	800bc7a <_free_r+0x46>
 800bc84:	6811      	ldr	r1, [r2, #0]
 800bc86:	1855      	adds	r5, r2, r1
 800bc88:	42a5      	cmp	r5, r4
 800bc8a:	d10b      	bne.n	800bca4 <_free_r+0x70>
 800bc8c:	6824      	ldr	r4, [r4, #0]
 800bc8e:	4421      	add	r1, r4
 800bc90:	1854      	adds	r4, r2, r1
 800bc92:	42a3      	cmp	r3, r4
 800bc94:	6011      	str	r1, [r2, #0]
 800bc96:	d1e0      	bne.n	800bc5a <_free_r+0x26>
 800bc98:	681c      	ldr	r4, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	6053      	str	r3, [r2, #4]
 800bc9e:	4421      	add	r1, r4
 800bca0:	6011      	str	r1, [r2, #0]
 800bca2:	e7da      	b.n	800bc5a <_free_r+0x26>
 800bca4:	d902      	bls.n	800bcac <_free_r+0x78>
 800bca6:	230c      	movs	r3, #12
 800bca8:	6003      	str	r3, [r0, #0]
 800bcaa:	e7d6      	b.n	800bc5a <_free_r+0x26>
 800bcac:	6825      	ldr	r5, [r4, #0]
 800bcae:	1961      	adds	r1, r4, r5
 800bcb0:	428b      	cmp	r3, r1
 800bcb2:	bf04      	itt	eq
 800bcb4:	6819      	ldreq	r1, [r3, #0]
 800bcb6:	685b      	ldreq	r3, [r3, #4]
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	bf04      	itt	eq
 800bcbc:	1949      	addeq	r1, r1, r5
 800bcbe:	6021      	streq	r1, [r4, #0]
 800bcc0:	6054      	str	r4, [r2, #4]
 800bcc2:	e7ca      	b.n	800bc5a <_free_r+0x26>
 800bcc4:	b003      	add	sp, #12
 800bcc6:	bd30      	pop	{r4, r5, pc}
 800bcc8:	20006414 	.word	0x20006414

0800bccc <cleanup_glue>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	460c      	mov	r4, r1
 800bcd0:	6809      	ldr	r1, [r1, #0]
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	b109      	cbz	r1, 800bcda <cleanup_glue+0xe>
 800bcd6:	f7ff fff9 	bl	800bccc <cleanup_glue>
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4628      	mov	r0, r5
 800bcde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bce2:	f7ff bfa7 	b.w	800bc34 <_free_r>
	...

0800bce8 <_reclaim_reent>:
 800bce8:	4b2c      	ldr	r3, [pc, #176]	; (800bd9c <_reclaim_reent+0xb4>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4283      	cmp	r3, r0
 800bcee:	b570      	push	{r4, r5, r6, lr}
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	d051      	beq.n	800bd98 <_reclaim_reent+0xb0>
 800bcf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bcf6:	b143      	cbz	r3, 800bd0a <_reclaim_reent+0x22>
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d14a      	bne.n	800bd94 <_reclaim_reent+0xac>
 800bcfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd00:	6819      	ldr	r1, [r3, #0]
 800bd02:	b111      	cbz	r1, 800bd0a <_reclaim_reent+0x22>
 800bd04:	4620      	mov	r0, r4
 800bd06:	f7ff ff95 	bl	800bc34 <_free_r>
 800bd0a:	6961      	ldr	r1, [r4, #20]
 800bd0c:	b111      	cbz	r1, 800bd14 <_reclaim_reent+0x2c>
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f7ff ff90 	bl	800bc34 <_free_r>
 800bd14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bd16:	b111      	cbz	r1, 800bd1e <_reclaim_reent+0x36>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f7ff ff8b 	bl	800bc34 <_free_r>
 800bd1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bd20:	b111      	cbz	r1, 800bd28 <_reclaim_reent+0x40>
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7ff ff86 	bl	800bc34 <_free_r>
 800bd28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bd2a:	b111      	cbz	r1, 800bd32 <_reclaim_reent+0x4a>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f7ff ff81 	bl	800bc34 <_free_r>
 800bd32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bd34:	b111      	cbz	r1, 800bd3c <_reclaim_reent+0x54>
 800bd36:	4620      	mov	r0, r4
 800bd38:	f7ff ff7c 	bl	800bc34 <_free_r>
 800bd3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bd3e:	b111      	cbz	r1, 800bd46 <_reclaim_reent+0x5e>
 800bd40:	4620      	mov	r0, r4
 800bd42:	f7ff ff77 	bl	800bc34 <_free_r>
 800bd46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bd48:	b111      	cbz	r1, 800bd50 <_reclaim_reent+0x68>
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f7ff ff72 	bl	800bc34 <_free_r>
 800bd50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd52:	b111      	cbz	r1, 800bd5a <_reclaim_reent+0x72>
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7ff ff6d 	bl	800bc34 <_free_r>
 800bd5a:	69a3      	ldr	r3, [r4, #24]
 800bd5c:	b1e3      	cbz	r3, 800bd98 <_reclaim_reent+0xb0>
 800bd5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd60:	4620      	mov	r0, r4
 800bd62:	4798      	blx	r3
 800bd64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd66:	b1b9      	cbz	r1, 800bd98 <_reclaim_reent+0xb0>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd6e:	f7ff bfad 	b.w	800bccc <cleanup_glue>
 800bd72:	5949      	ldr	r1, [r1, r5]
 800bd74:	b941      	cbnz	r1, 800bd88 <_reclaim_reent+0xa0>
 800bd76:	3504      	adds	r5, #4
 800bd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd7a:	2d80      	cmp	r5, #128	; 0x80
 800bd7c:	68d9      	ldr	r1, [r3, #12]
 800bd7e:	d1f8      	bne.n	800bd72 <_reclaim_reent+0x8a>
 800bd80:	4620      	mov	r0, r4
 800bd82:	f7ff ff57 	bl	800bc34 <_free_r>
 800bd86:	e7ba      	b.n	800bcfe <_reclaim_reent+0x16>
 800bd88:	680e      	ldr	r6, [r1, #0]
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f7ff ff52 	bl	800bc34 <_free_r>
 800bd90:	4631      	mov	r1, r6
 800bd92:	e7ef      	b.n	800bd74 <_reclaim_reent+0x8c>
 800bd94:	2500      	movs	r5, #0
 800bd96:	e7ef      	b.n	800bd78 <_reclaim_reent+0x90>
 800bd98:	bd70      	pop	{r4, r5, r6, pc}
 800bd9a:	bf00      	nop
 800bd9c:	200001a0 	.word	0x200001a0

0800bda0 <__malloc_lock>:
 800bda0:	4801      	ldr	r0, [pc, #4]	; (800bda8 <__malloc_lock+0x8>)
 800bda2:	f7ff bf2f 	b.w	800bc04 <__retarget_lock_acquire_recursive>
 800bda6:	bf00      	nop
 800bda8:	20006410 	.word	0x20006410

0800bdac <__malloc_unlock>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__malloc_unlock+0x8>)
 800bdae:	f7ff bf2a 	b.w	800bc06 <__retarget_lock_release_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	20006410 	.word	0x20006410

0800bdb8 <_init>:
 800bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdba:	bf00      	nop
 800bdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdbe:	bc08      	pop	{r3}
 800bdc0:	469e      	mov	lr, r3
 800bdc2:	4770      	bx	lr

0800bdc4 <_fini>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	bf00      	nop
 800bdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdca:	bc08      	pop	{r3}
 800bdcc:	469e      	mov	lr, r3
 800bdce:	4770      	bx	lr
